{"index":"<h1>Hypertext Transfer Protocol</h1><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; document authors. All rights reserved.<br>\n    <a href=\"https://tools.ietf.org/html/\" class=\"_attribution-link\">https://tools.ietf.org/html/</a>\n  </p>\n</div>\n","rfc7233":"<div class=\"_rfc-pre\">Internet Engineering Task Force (IETF)                  R. Fielding, Ed.\nRequest for Comments: 7233                                         Adobe\nObsoletes: <a href=\"https://tools.ietf.org/html/rfc2616\">2616</a>                                            Y. Lafon, Ed.\nCategory: Standards Track                                            W3C\nISSN: 2070-1721                                          J. Reschke, Ed.\n                                                              greenbytes\n                                                              June 2014\n\n\n         <h1 class=\"h1\">Hypertext Transfer Protocol (HTTP/1.1): Range Requests</h1>\nAbstract\n\n   The Hypertext Transfer Protocol (HTTP) is a stateless application-\n   level protocol for distributed, collaborative, hypertext information\n   systems.  This document defines range requests and the rules for\n   constructing and combining responses to those requests.\n\nStatus of This Memo\n\n   This is an Internet Standards Track document.\n\n   This document is a product of the Internet Engineering Task Force\n   (IETF).  It represents the consensus of the IETF community.  It has\n   received public review and has been approved for publication by the\n   Internet Engineering Steering Group (IESG).  Further information on\n   Internet Standards is available in <a href=\"https://tools.ietf.org/html/rfc5741#section-2\">Section 2 of RFC 5741</a>.\n\n   Information about the current status of this document, any errata,\n   and how to provide feedback on it may be obtained at\n   <a href=\"http://www.rfc-editor.org/info/rfc7233\">http://www.rfc-editor.org/info/rfc7233</a>.\n\nCopyright Notice\n\n   Copyright (c) 2014 IETF Trust and the persons identified as the\n   document authors.  All rights reserved.\n\n   This document is subject to <a href=\"https://tools.ietf.org/html/bcp78\">BCP 78</a> and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n   (<a href=\"http://trustee.ietf.org/license-info\">http://trustee.ietf.org/license-info</a>) in effect on the date of\n   publication of this document.  Please review these documents\n   carefully, as they describe your rights and restrictions with respect\n   to this document.  Code Components extracted from this document must\n   include Simplified BSD License text as described in <a href=\"#section-4\">Section 4</a>.e of\n   the Trust Legal Provisions and are provided without warranty as\n   described in the Simplified BSD License.\n\n   This document may contain material from IETF Documents or IETF\n   Contributions published or made publicly available before November\n   10, 2008.  The person(s) controlling the copyright in some of this\n   material may not have granted the IETF Trust the right to allow\n   modifications of such material outside the IETF Standards Process.\n   Without obtaining an adequate license from the person(s) controlling\n   the copyright in such materials, this document may not be modified\n   outside the IETF Standards Process, and derivative works of it may\n   not be created outside the IETF Standards Process, except to format\n   it for publication as an RFC or to translate it into languages other\n   than English.\n\nTable of Contents\n\n   <a href=\"#section-1\">1</a>. Introduction \n      <a href=\"#section-1.1\">1.1</a>. Conformance and Error Handling \n      <a href=\"#section-1.2\">1.2</a>. Syntax Notation \n   <a href=\"#section-2\">2</a>. Range Units \n      <a href=\"#section-2.1\">2.1</a>. Byte Ranges \n      <a href=\"#section-2.2\">2.2</a>. Other Range Units \n      <a href=\"#section-2.3\">2.3</a>. Accept-Ranges \n   <a href=\"#section-3\">3</a>. Range Requests \n      <a href=\"#section-3.1\">3.1</a>. Range \n      <a href=\"#section-3.2\">3.2</a>. If-Range \n   <a href=\"#section-4\">4</a>. Responses to a Range Request \n      <a href=\"#section-4.1\">4.1</a>. 206 Partial Content \n      <a href=\"#section-4.2\">4.2</a>. Content-Range \n      <a href=\"#section-4.3\">4.3</a>. Combining Ranges \n      <a href=\"#section-4.4\">4.4</a>. 416 Range Not Satisfiable \n   <a href=\"#section-5\">5</a>. IANA Considerations \n      <a href=\"#section-5.1\">5.1</a>. Range Unit Registry \n           <a href=\"#section-5.1.1\">5.1.1</a>. Procedure \n           <a href=\"#section-5.1.2\">5.1.2</a>. Registrations \n      <a href=\"#section-5.2\">5.2</a>. Status Code Registration \n      <a href=\"#section-5.3\">5.3</a>. Header Field Registration \n      <a href=\"#section-5.4\">5.4</a>. Internet Media Type Registration \n           <a href=\"#section-5.4.1\">5.4.1</a>. Internet Media Type multipart/byteranges \n   <a href=\"#section-6\">6</a>. Security Considerations \n      <a href=\"#section-6.1\">6.1</a>. Denial-of-Service Attacks Using Range \n   <a href=\"#section-7\">7</a>. Acknowledgments \n   <a href=\"#section-8\">8</a>. References \n      <a href=\"#section-8.1\">8.1</a>. Normative References \n      <a href=\"#section-8.2\">8.2</a>. Informative References \n   <a href=\"#appendix-A\">Appendix A</a>. Internet Media Type multipart/byteranges \n   <a href=\"#appendix-B\">Appendix B</a>. Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a> \n   <a href=\"#appendix-C\">Appendix C</a>. Imported ABNF \n   <a href=\"#appendix-D\">Appendix D</a>. Collected ABNF \n   Index \n\n<h2 class=\"h2\" id=\"section-1\">1.  Introduction</h2>\n   Hypertext Transfer Protocol (HTTP) clients often encounter\n   interrupted data transfers as a result of canceled requests or\n   dropped connections.  When a client has stored a partial\n   representation, it is desirable to request the remainder of that\n   representation in a subsequent request rather than transfer the\n   entire representation.  Likewise, devices with limited local storage\n   might benefit from being able to request only a subset of a larger\n   representation, such as a single page of a very large document, or\n   the dimensions of an embedded image.\n\n   This document defines HTTP/1.1 range requests, partial responses, and\n   the multipart/byteranges media type.  Range requests are an OPTIONAL\n   feature of HTTP, designed so that recipients not implementing this\n   feature (or not supporting it for the target resource) can respond as\n   if it is a normal GET request without impacting interoperability.\n   Partial responses are indicated by a distinct status code to not be\n   mistaken for full responses by caches that might not implement the\n   feature.\n\n   Although the range request mechanism is designed to allow for\n   extensible range types, this specification only defines requests for\n   byte ranges.\n\n<h3 class=\"h3\" id=\"section-1.1\">1.1.  Conformance and Error Handling</h3>\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described in [<a href=\"https://tools.ietf.org/html/rfc2119\" title='\"Key words for use in RFCs to Indicate Requirement Levels\"'>RFC2119</a>].\n\n   Conformance criteria and considerations regarding error handling are\n   defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-2.5\">Section 2.5 of [RFC7230]</a>.\n\n<h3 class=\"h3\" id=\"section-1.2\">1.2.  Syntax Notation</h3>\n   This specification uses the Augmented Backus-Naur Form (ABNF)\n   notation of [<a href=\"https://tools.ietf.org/html/rfc5234\" title='\"Augmented BNF for Syntax Specifications: ABNF\"'>RFC5234</a>] with a list extension, defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-7\">Section 7 of\n   [RFC7230]</a>, that allows for compact definition of comma-separated\n   lists using a '#' operator (similar to how the '*' operator indicates\n   repetition).  <a href=\"#appendix-C\">Appendix C</a> describes rules imported from other\n   documents.  <a href=\"#appendix-D\">Appendix D</a> shows the collected grammar with all list\n   operators expanded to standard ABNF notation.\n\n<h2 class=\"h2\" id=\"section-2\">2.  Range Units</h2>\n   A representation can be partitioned into subranges according to\n   various structural units, depending on the structure inherent in the\n   representation's media type.  This \"range unit\" is used in the\n   Accept-Ranges (<a href=\"#section-2.3\">Section 2.3</a>) response header field to advertise\n   support for range requests, the Range (<a href=\"#section-3.1\">Section 3.1</a>) request header\n   field to delineate the parts of a representation that are requested,\n   and the Content-Range (<a href=\"#section-4.2\">Section 4.2</a>) payload header field to describe\n   which part of a representation is being transferred.\n\n     range-unit       = bytes-unit / other-range-unit\n\n<h3 class=\"h3\" id=\"section-2.1\">2.1.  Byte Ranges</h3>\n   Since representation data is transferred in payloads as a sequence of\n   octets, a byte range is a meaningful substructure for any\n   representation transferable over HTTP (<a href=\"https://tools.ietf.org/html/rfc7231#section-3\">Section 3 of [RFC7231]</a>).  The\n   \"bytes\" range unit is defined for expressing subranges of the data's\n   octet sequence.\n\n     bytes-unit       = \"bytes\"\n\n   A byte-range request can specify a single range of bytes or a set of\n   ranges within a single representation.\n\n     byte-ranges-specifier = bytes-unit \"=\" byte-range-set\n     byte-range-set  = 1#( byte-range-spec / suffix-byte-range-spec )\n     byte-range-spec = first-byte-pos \"-\" [ last-byte-pos ]\n     first-byte-pos  = 1*DIGIT\n     last-byte-pos   = 1*DIGIT\n\n   The first-byte-pos value in a byte-range-spec gives the byte-offset\n   of the first byte in a range.  The last-byte-pos value gives the\n   byte-offset of the last byte in the range; that is, the byte\n   positions specified are inclusive.  Byte offsets start at zero.\n\n   Examples of byte-ranges-specifier values:\n\n   o  The first 500 bytes (byte offsets 0-499, inclusive):\n\n        bytes=0-499\n\n   o  The second 500 bytes (byte offsets 500-999, inclusive):\n\n        bytes=500-999\n\n   A byte-range-spec is invalid if the last-byte-pos value is present\n   and less than the first-byte-pos.\n\n   A client can limit the number of bytes requested without knowing the\n   size of the selected representation.  If the last-byte-pos value is\n   absent, or if the value is greater than or equal to the current\n   length of the representation data, the byte range is interpreted as\n   the remainder of the representation (i.e., the server replaces the\n   value of last-byte-pos with a value that is one less than the current\n   length of the selected representation).\n\n   A client can request the last N bytes of the selected representation\n   using a suffix-byte-range-spec.\n\n     suffix-byte-range-spec = \"-\" suffix-length\n     suffix-length = 1*DIGIT\n\n   If the selected representation is shorter than the specified\n   suffix-length, the entire representation is used.\n\n   Additional examples, assuming a representation of length 10000:\n\n   o  The final 500 bytes (byte offsets 9500-9999, inclusive):\n\n        bytes=-500\n\n   Or:\n\n        bytes=9500-\n\n   o  The first and last bytes only (bytes 0 and 9999):\n\n        bytes=0-0,-1\n\n   o  Other valid (but not canonical) specifications of the second 500\n      bytes (byte offsets 500-999, inclusive):\n\n        bytes=500-600,601-999\n        bytes=500-700,601-999\n\n   If a valid byte-range-set includes at least one byte-range-spec with\n   a first-byte-pos that is less than the current length of the\n   representation, or at least one suffix-byte-range-spec with a\n   non-zero suffix-length, then the byte-range-set is satisfiable.\n   Otherwise, the byte-range-set is unsatisfiable.\n\n   In the byte-range syntax, first-byte-pos, last-byte-pos, and\n   suffix-length are expressed as decimal number of octets.  Since there\n   is no predefined limit to the length of a payload, recipients MUST\n   anticipate potentially large decimal numerals and prevent parsing\n   errors due to integer conversion overflows.\n\n<h3 class=\"h3\" id=\"section-2.2\">2.2.  Other Range Units</h3>\n   Range units are intended to be extensible.  New range units ought to\n   be registered with IANA, as defined in <a href=\"#section-5.1\">Section 5.1</a>.\n\n     other-range-unit = token\n\n<h3 class=\"h3\" id=\"section-2.3\">2.3.  Accept-Ranges</h3>\n   The \"Accept-Ranges\" header field allows a server to indicate that it\n   supports range requests for the target resource.\n\n     Accept-Ranges     = acceptable-ranges\n     acceptable-ranges = 1#range-unit / \"none\"\n\n   An origin server that supports byte-range requests for a given target\n   resource MAY send\n\n     Accept-Ranges: bytes\n\n   to indicate what range units are supported.  A client MAY generate\n   range requests without having received this header field for the\n   resource involved.  Range units are defined in <a href=\"#section-2\">Section 2</a>.\n\n   A server that does not support any kind of range request for the\n   target resource MAY send\n\n     Accept-Ranges: none\n\n   to advise the client not to attempt a range request.\n\n<h2 class=\"h2\" id=\"section-3\">3.  Range Requests</h2>\n<h3 class=\"h3\" id=\"section-3.1\">3.1.  Range</h3>\n   The \"Range\" header field on a GET request modifies the method\n   semantics to request transfer of only one or more subranges of the\n   selected representation data, rather than the entire selected\n   representation data.\n\n     Range = byte-ranges-specifier / other-ranges-specifier\n     other-ranges-specifier = other-range-unit \"=\" other-range-set\n     other-range-set = 1*VCHAR\n\n   A server MAY ignore the Range header field.  However, origin servers\n   and intermediate caches ought to support byte ranges when possible,\n   since Range supports efficient recovery from partially failed\n   transfers and partial retrieval of large representations.  A server\n   MUST ignore a Range header field received with a request method other\n   than GET.\n\n   An origin server MUST ignore a Range header field that contains a\n   range unit it does not understand.  A proxy MAY discard a Range\n   header field that contains a range unit it does not understand.\n\n   A server that supports range requests MAY ignore or reject a Range\n   header field that consists of more than two overlapping ranges, or a\n   set of many small ranges that are not listed in ascending order,\n   since both are indications of either a broken client or a deliberate\n   denial-of-service attack (<a href=\"#section-6.1\">Section 6.1</a>).  A client SHOULD NOT request\n   multiple ranges that are inherently less efficient to process and\n   transfer than a single range that encompasses the same data.\n\n   A client that is requesting multiple ranges SHOULD list those ranges\n   in ascending order (the order in which they would typically be\n   received in a complete representation) unless there is a specific\n   need to request a later part earlier.  For example, a user agent\n   processing a large representation with an internal catalog of parts\n   might need to request later parts first, particularly if the\n   representation consists of pages stored in reverse order and the user\n   agent wishes to transfer one page at a time.\n\n   The Range header field is evaluated after evaluating the precondition\n   header fields defined in [<a href=\"https://tools.ietf.org/html/rfc7232\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\"'>RFC7232</a>], and only if the result in absence\n   of the Range header field would be a 200 (OK) response.  In other\n   words, Range is ignored when a conditional GET would result in a 304\n   (Not Modified) response.\n\n   The If-Range header field (<a href=\"#section-3.2\">Section 3.2</a>) can be used as a precondition\n   to applying the Range header field.\n\n   If all of the preconditions are true, the server supports the Range\n   header field for the target resource, and the specified range(s) are\n   valid and satisfiable (as defined in <a href=\"#section-2.1\">Section 2.1</a>), the server SHOULD\n   send a 206 (Partial Content) response with a payload containing one\n   or more partial representations that correspond to the satisfiable\n   ranges requested, as defined in <a href=\"#section-4\">Section 4</a>.\n\n   If all of the preconditions are true, the server supports the Range\n   header field for the target resource, and the specified range(s) are\n   invalid or unsatisfiable, the server SHOULD send a 416 (Range Not\n   Satisfiable) response.\n\n<h3 class=\"h3\" id=\"section-3.2\">3.2.  If-Range</h3>\n   If a client has a partial copy of a representation and wishes to have\n   an up-to-date copy of the entire representation, it could use the\n   Range header field with a conditional GET (using either or both of\n   If-Unmodified-Since and If-Match.)  However, if the precondition\n   fails because the representation has been modified, the client would\n   then have to make a second request to obtain the entire current\n   representation.\n\n   The \"If-Range\" header field allows a client to \"short-circuit\" the\n   second request.  Informally, its meaning is as follows: if the\n   representation is unchanged, send me the part(s) that I am requesting\n   in Range; otherwise, send me the entire representation.\n\n     If-Range = entity-tag / HTTP-date\n\n   A client MUST NOT generate an If-Range header field in a request that\n   does not contain a Range header field.  A server MUST ignore an\n   If-Range header field received in a request that does not contain a\n   Range header field.  An origin server MUST ignore an If-Range header\n   field received in a request for a target resource that does not\n   support Range requests.\n\n   A client MUST NOT generate an If-Range header field containing an\n   entity-tag that is marked as weak.  A client MUST NOT generate an\n   If-Range header field containing an HTTP-date unless the client has\n   no entity-tag for the corresponding representation and the date is a\n   strong validator in the sense defined by <a href=\"https://tools.ietf.org/html/rfc7232#section-2.2.2\">Section 2.2.2 of [RFC7232]</a>.\n\n   A server that evaluates an If-Range precondition MUST use the strong\n   comparison function when comparing entity-tags (<a href=\"https://tools.ietf.org/html/rfc7232#section-2.3.2\">Section 2.3.2 of\n   [RFC7232]</a>) and MUST evaluate the condition as false if an HTTP-date\n\n   validator is provided that is not a strong validator in the sense\n   defined by <a href=\"https://tools.ietf.org/html/rfc7232#section-2.2.2\">Section 2.2.2 of [RFC7232]</a>.  A valid entity-tag can be\n   distinguished from a valid HTTP-date by examining the first two\n   characters for a DQUOTE.\n\n   If the validator given in the If-Range header field matches the\n   current validator for the selected representation of the target\n   resource, then the server SHOULD process the Range header field as\n   requested.  If the validator does not match, the server MUST ignore\n   the Range header field.  Note that this comparison by exact match,\n   including when the validator is an HTTP-date, differs from the\n   \"earlier than or equal to\" comparison used when evaluating an\n   If-Unmodified-Since conditional.\n\n<h2 class=\"h2\" id=\"section-4\">4.  Responses to a Range Request</h2>\n<h3 class=\"h3\" id=\"section-4.1\">4.1.  206 Partial Content</h3>\n   The 206 (Partial Content) status code indicates that the server is\n   successfully fulfilling a range request for the target resource by\n   transferring one or more parts of the selected representation that\n   correspond to the satisfiable ranges found in the request's Range\n   header field (<a href=\"#section-3.1\">Section 3.1</a>).\n\n   If a single part is being transferred, the server generating the 206\n   response MUST generate a Content-Range header field, describing what\n   range of the selected representation is enclosed, and a payload\n   consisting of the range.  For example:\n\n     HTTP/1.1 206 Partial Content\n     Date: Wed, 15 Nov 1995 06:25:24 GMT\n     Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT\n     Content-Range: bytes 21010-47021/47022\n     Content-Length: 26012\n     Content-Type: image/gif\n\n     ... 26012 bytes of partial image data \n\n   If multiple parts are being transferred, the server generating the\n   206 response MUST generate a \"multipart/byteranges\" payload, as\n   defined in <a href=\"#appendix-A\">Appendix A</a>, and a Content-Type header field containing the\n   multipart/byteranges media type and its required boundary parameter.\n   To avoid confusion with single-part responses, a server MUST NOT\n   generate a Content-Range header field in the HTTP header section of a\n   multiple part response (this field will be sent in each part\n   instead).\n\n   Within the header area of each body part in the multipart payload,\n   the server MUST generate a Content-Range header field corresponding\n   to the range being enclosed in that body part.  If the selected\n   representation would have had a Content-Type header field in a 200\n   (OK) response, the server SHOULD generate that same Content-Type\n   field in the header area of each body part.  For example:\n\n     HTTP/1.1 206 Partial Content\n     Date: Wed, 15 Nov 1995 06:25:24 GMT\n     Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT\n     Content-Length: 1741\n     Content-Type: multipart/byteranges; boundary=THIS_STRING_SEPARATES\n\n     --THIS_STRING_SEPARATES\n     Content-Type: application/pdf\n     Content-Range: bytes 500-999/8000\n\n     ...the first range\n     --THIS_STRING_SEPARATES\n     Content-Type: application/pdf\n     Content-Range: bytes 7000-7999/8000\n\n     ...the second range\n     --THIS_STRING_SEPARATES--\n\n   When multiple ranges are requested, a server MAY coalesce any of the\n   ranges that overlap, or that are separated by a gap that is smaller\n   than the overhead of sending multiple parts, regardless of the order\n   in which the corresponding byte-range-spec appeared in the received\n   Range header field.  Since the typical overhead between parts of a\n   multipart/byteranges payload is around 80 bytes, depending on the\n   selected representation's media type and the chosen boundary\n   parameter length, it can be less efficient to transfer many small\n   disjoint parts than it is to transfer the entire selected\n   representation.\n\n   A server MUST NOT generate a multipart response to a request for a\n   single range, since a client that does not request multiple parts\n   might not support multipart responses.  However, a server MAY\n   generate a multipart/byteranges payload with only a single body part\n   if multiple ranges were requested and only one range was found to be\n   satisfiable or only one range remained after coalescing.  A client\n   that cannot process a multipart/byteranges response MUST NOT generate\n   a request that asks for multiple ranges.\n\n   When a multipart response payload is generated, the server SHOULD\n   send the parts in the same order that the corresponding\n   byte-range-spec appeared in the received Range header field,\n\n   excluding those ranges that were deemed unsatisfiable or that were\n   coalesced into other ranges.  A client that receives a multipart\n   response MUST inspect the Content-Range header field present in each\n   body part in order to determine which range is contained in that body\n   part; a client cannot rely on receiving the same ranges that it\n   requested, nor the same order that it requested.\n\n   When a 206 response is generated, the server MUST generate the\n   following header fields, in addition to those required above, if the\n   field would have been sent in a 200 (OK) response to the same\n   request: Date, Cache-Control, ETag, Expires, Content-Location, and\n   Vary.\n\n   If a 206 is generated in response to a request with an If-Range\n   header field, the sender SHOULD NOT generate other representation\n   header fields beyond those required above, because the client is\n   understood to already have a prior response containing those header\n   fields.  Otherwise, the sender MUST generate all of the\n   representation header fields that would have been sent in a 200 (OK)\n   response to the same request.\n\n   A 206 response is cacheable by default; i.e., unless otherwise\n   indicated by explicit cache controls (see <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of\n   [RFC7234]</a>).\n\n<h3 class=\"h3\" id=\"section-4.2\">4.2.  Content-Range</h3>\n   The \"Content-Range\" header field is sent in a single part 206\n   (Partial Content) response to indicate the partial range of the\n   selected representation enclosed as the message payload, sent in each\n   part of a multipart 206 response to indicate the range enclosed\n   within each body part, and sent in 416 (Range Not Satisfiable)\n   responses to provide information about the selected representation.\n\n     Content-Range       = byte-content-range\n                         / other-content-range\n\n     byte-content-range  = bytes-unit SP\n                           ( byte-range-resp / unsatisfied-range )\n\n     byte-range-resp     = byte-range \"/\" ( complete-length / \"*\" )\n     byte-range          = first-byte-pos \"-\" last-byte-pos\n     unsatisfied-range   = \"*/\" complete-length\n\n     complete-length     = 1*DIGIT\n\n     other-content-range = other-range-unit SP other-range-resp\n     other-range-resp    = *CHAR\n\n   If a 206 (Partial Content) response contains a Content-Range header\n   field with a range unit (<a href=\"#section-2\">Section 2</a>) that the recipient does not\n   understand, the recipient MUST NOT attempt to recombine it with a\n   stored representation.  A proxy that receives such a message SHOULD\n   forward it downstream.\n\n   For byte ranges, a sender SHOULD indicate the complete length of the\n   representation from which the range has been extracted, unless the\n   complete length is unknown or difficult to determine.  An asterisk\n   character (\"*\") in place of the complete-length indicates that the\n   representation length was unknown when the header field was\n   generated.\n\n   The following example illustrates when the complete length of the\n   selected representation is known by the sender to be 1234 bytes:\n\n     Content-Range: bytes 42-1233/1234\n\n   and this second example illustrates when the complete length is\n   unknown:\n\n     Content-Range: bytes 42-1233/*\n\n   A Content-Range field value is invalid if it contains a\n   byte-range-resp that has a last-byte-pos value less than its\n   first-byte-pos value, or a complete-length value less than or equal\n   to its last-byte-pos value.  The recipient of an invalid\n   Content-Range MUST NOT attempt to recombine the received content with\n   a stored representation.\n\n   A server generating a 416 (Range Not Satisfiable) response to a\n   byte-range request SHOULD send a Content-Range header field with an\n   unsatisfied-range value, as in the following example:\n\n     Content-Range: bytes */1234\n\n   The complete-length in a 416 response indicates the current length of\n   the selected representation.\n\n   The Content-Range header field has no meaning for status codes that\n   do not explicitly describe its semantic.  For this specification,\n   only the 206 (Partial Content) and 416 (Range Not Satisfiable) status\n   codes describe a meaning for Content-Range.\n\n   The following are examples of Content-Range values in which the\n   selected representation contains a total of 1234 bytes:\n\n   o  The first 500 bytes:\n\n        Content-Range: bytes 0-499/1234\n\n   o  The second 500 bytes:\n\n        Content-Range: bytes 500-999/1234\n\n   o  All except for the first 500 bytes:\n\n        Content-Range: bytes 500-1233/1234\n\n   o  The last 500 bytes:\n\n        Content-Range: bytes 734-1233/1234\n\n<h3 class=\"h3\" id=\"section-4.3\">4.3.  Combining Ranges</h3>\n   A response might transfer only a subrange of a representation if the\n   connection closed prematurely or if the request used one or more\n   Range specifications.  After several such transfers, a client might\n   have received several ranges of the same representation.  These\n   ranges can only be safely combined if they all have in common the\n   same strong validator (<a href=\"https://tools.ietf.org/html/rfc7232#section-2.1\">Section 2.1 of [RFC7232]</a>).\n\n   A client that has received multiple partial responses to GET requests\n   on a target resource MAY combine those responses into a larger\n   continuous range if they share the same strong validator.\n\n   If the most recent response is an incomplete 200 (OK) response, then\n   the header fields of that response are used for any combined response\n   and replace those of the matching stored responses.\n\n   If the most recent response is a 206 (Partial Content) response and\n   at least one of the matching stored responses is a 200 (OK), then the\n   combined response header fields consist of the most recent 200\n   response's header fields.  If all of the matching stored responses\n   are 206 responses, then the stored response with the most recent\n   header fields is used as the source of header fields for the combined\n   response, except that the client MUST use other header fields\n   provided in the new response, aside from Content-Range, to replace\n   all instances of the corresponding header fields in the stored\n   response.\n\n   The combined response message body consists of the union of partial\n   content ranges in the new response and each of the selected\n   responses.  If the union consists of the entire range of the\n   representation, then the client MUST process the combined response as\n   if it were a complete 200 (OK) response, including a Content-Length\n   header field that reflects the complete length.  Otherwise, the\n   client MUST process the set of continuous ranges as one of the\n   following: an incomplete 200 (OK) response if the combined response\n   is a prefix of the representation, a single 206 (Partial Content)\n   response containing a multipart/byteranges body, or multiple 206\n   (Partial Content) responses, each with one continuous range that is\n   indicated by a Content-Range header field.\n\n<h3 class=\"h3\" id=\"section-4.4\">4.4.  416 Range Not Satisfiable</h3>\n   The 416 (Range Not Satisfiable) status code indicates that none of\n   the ranges in the request's Range header field (<a href=\"#section-3.1\">Section 3.1</a>) overlap\n   the current extent of the selected resource or that the set of ranges\n   requested has been rejected due to invalid ranges or an excessive\n   request of small or overlapping ranges.\n\n   For byte ranges, failing to overlap the current extent means that the\n   first-byte-pos of all of the byte-range-spec values were greater than\n   the current length of the selected representation.  When this status\n   code is generated in response to a byte-range request, the sender\n   SHOULD generate a Content-Range header field specifying the current\n   length of the selected representation (<a href=\"#section-4.2\">Section 4.2</a>).\n\n   For example:\n\n     HTTP/1.1 416 Range Not Satisfiable\n     Date: Fri, 20 Jan 2012 15:41:54 GMT\n     Content-Range: bytes */47022\n\n      Note: Because servers are free to ignore Range, many\n      implementations will simply respond with the entire selected\n      representation in a 200 (OK) response.  That is partly because\n      most clients are prepared to receive a 200 (OK) to complete the\n      task (albeit less efficiently) and partly because clients might\n      not stop making an invalid partial request until they have\n      received a complete representation.  Thus, clients cannot depend\n      on receiving a 416 (Range Not Satisfiable) response even when it\n      is most appropriate.\n\n<h2 class=\"h2\" id=\"section-5\">5.  IANA Considerations</h2>\n<h3 class=\"h3\" id=\"section-5.1\">5.1.  Range Unit Registry</h3>\n   The \"HTTP Range Unit Registry\" defines the namespace for the range\n   unit names and refers to their corresponding specifications.  The\n   registry has been created and is now maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/http-parameters\">http://www.iana.org/assignments/http-parameters</a>&gt;.\n\n<h4 class=\"h4\" id=\"section-5.1.1\">5.1.1.  Procedure</h4>\n   Registration of an HTTP Range Unit MUST include the following fields:\n\n   o  Name\n\n   o  Description\n\n   o  Pointer to specification text\n\n   Values to be added to this namespace require IETF Review (see\n   <a href=\"https://tools.ietf.org/html/rfc5226#section-4.1\">[RFC5226], Section 4.1</a>).\n\n<h4 class=\"h4\" id=\"section-5.1.2\">5.1.2.  Registrations</h4>\n   The initial range unit registry contains the registrations below:\n\n   +-------------+---------------------------------------+-------------+\n   | Range Unit  | Description                           | Reference   |\n   | Name        |                                       |             |\n   +-------------+---------------------------------------+-------------+\n   | bytes       | a range of octets                     | <a href=\"#section-2.1\">Section 2.1</a> |\n   | none        | reserved as keyword, indicating no    | <a href=\"#section-2.3\">Section 2.3</a> |\n   |             | ranges are supported                  |             |\n   +-------------+---------------------------------------+-------------+\n\n   The change controller is: \"IETF (iesg@ietf.org) - Internet\n   Engineering Task Force\".\n\n<h3 class=\"h3\" id=\"section-5.2\">5.2.  Status Code Registration</h3>\n   The \"Hypertext Transfer Protocol (HTTP) Status Code Registry\" located\n   at &lt;<a href=\"http://www.iana.org/assignments/http-status-codes\">http://www.iana.org/assignments/http-status-codes</a>&gt; has been\n   updated to include the registrations below:\n\n   +-------+-----------------------+-------------+\n   | Value | Description           | Reference   |\n   +-------+-----------------------+-------------+\n   | 206   | Partial Content       | <a href=\"#section-4.1\">Section 4.1</a> |\n   | 416   | Range Not Satisfiable | <a href=\"#section-4.4\">Section 4.4</a> |\n   +-------+-----------------------+-------------+\n\n<h3 class=\"h3\" id=\"section-5.3\">5.3.  Header Field Registration</h3>\n   HTTP header fields are registered within the \"Message Headers\"\n   registry maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/message-headers/\">http://www.iana.org/assignments/message-headers/</a>&gt;.\n\n   This document defines the following HTTP header fields, so their\n   associated registry entries have been updated according to the\n   permanent registrations below (see [<a href=\"#ref-BCP90\" title='\"Registration Procedures for Message Header Fields\"'>BCP90</a>]):\n\n   +-------------------+----------+----------+-------------+\n   | Header Field Name | Protocol | Status   | Reference   |\n   +-------------------+----------+----------+-------------+\n   | Accept-Ranges     | http     | standard | <a href=\"#section-2.3\">Section 2.3</a> |\n   | Content-Range     | http     | standard | <a href=\"#section-4.2\">Section 4.2</a> |\n   | If-Range          | http     | standard | <a href=\"#section-3.2\">Section 3.2</a> |\n   | Range             | http     | standard | <a href=\"#section-3.1\">Section 3.1</a> |\n   +-------------------+----------+----------+-------------+\n\n   The change controller is: \"IETF (iesg@ietf.org) - Internet\n   Engineering Task Force\".\n\n<h3 class=\"h3\" id=\"section-5.4\">5.4.  Internet Media Type Registration</h3>\n   IANA maintains the registry of Internet media types [<a href=\"#ref-BCP13\" title='\"Media Type Specifications and Registration Procedures\"'>BCP13</a>] at\n   &lt;<a href=\"http://www.iana.org/assignments/media-types\">http://www.iana.org/assignments/media-types</a>&gt;.\n\n   This document serves as the specification for the Internet media type\n   \"multipart/byteranges\".  The following has been registered with IANA.\n\n<h4 class=\"h4\" id=\"section-5.4.1\">5.4.1.  Internet Media Type multipart/byteranges</h4>\n   Type name:  multipart\n\n   Subtype name:  byteranges\n\n   Required parameters:  boundary\n\n   Optional parameters:  N/A\n\n   Encoding considerations:  only \"7bit\", \"8bit\", or \"binary\" are\n      permitted\n\n   Security considerations:  see <a href=\"#section-6\">Section 6</a>\n\n   Interoperability considerations:  N/A\n\n   Published specification:  This specification (see <a href=\"#appendix-A\">Appendix A</a>).\n\n   Applications that use this media type:  HTTP components supporting\n      multiple ranges in a single request.\n\n   Fragment identifier considerations:  N/A\n\n   Additional information:\n\n      Deprecated alias names for this type:  N/A\n\n      Magic number(s):  N/A\n\n      File extension(s):  N/A\n\n      Macintosh file type code(s):  N/A\n\n   Person and email address to contact for further information:  See\n      Authors' Addresses section.\n\n   Intended usage:  COMMON\n\n   Restrictions on usage:  N/A\n\n   Author:  See Authors' Addresses section.\n\n   Change controller:  IESG\n\n<h2 class=\"h2\" id=\"section-6\">6.  Security Considerations</h2>\n   This section is meant to inform developers, information providers,\n   and users of known security concerns specific to the HTTP range\n   request mechanisms.  More general security considerations are\n   addressed in HTTP messaging [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>] and semantics [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>].\n\n<h3 class=\"h3\" id=\"section-6.1\">6.1.  Denial-of-Service Attacks Using Range</h3>\n   Unconstrained multiple range requests are susceptible to denial-of-\n   service attacks because the effort required to request many\n   overlapping ranges of the same data is tiny compared to the time,\n   memory, and bandwidth consumed by attempting to serve the requested\n   data in many parts.  Servers ought to ignore, coalesce, or reject\n   egregious range requests, such as requests for more than two\n   overlapping ranges or for many small ranges in a single set,\n   particularly when the ranges are requested out of order for no\n   apparent reason.  Multipart range requests are not designed to\n   support random access.\n\n<h2 class=\"h2\" id=\"section-7\">7.  Acknowledgments</h2>\n   See <a href=\"https://tools.ietf.org/html/rfc7230#section-10\">Section 10 of [RFC7230]</a>.\n\n<h2 class=\"h2\" id=\"section-8\">8.  References</h2>\n<h3 class=\"h3\" id=\"section-8.1\">8.1.  Normative References</h3>\n   [<a name=\"ref-RFC2046\" id=\"ref-RFC2046\">RFC2046</a>]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions (MIME) Part Two: Media Types\", <a href=\"https://tools.ietf.org/html/rfc2046\">RFC 2046</a>,\n              November 1996.\n\n   [<a name=\"ref-RFC2119\" id=\"ref-RFC2119\">RFC2119</a>]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\", <a href=\"https://tools.ietf.org/html/bcp14\">BCP 14</a>, <a href=\"https://tools.ietf.org/html/rfc2119\">RFC 2119</a>, March 1997.\n\n   [<a name=\"ref-RFC5234\" id=\"ref-RFC5234\">RFC5234</a>]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications: ABNF\", STD 68, <a href=\"https://tools.ietf.org/html/rfc5234\">RFC 5234</a>, January 2008.\n\n   [<a name=\"ref-RFC7230\" id=\"ref-RFC7230\">RFC7230</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Message Syntax and Routing\",\n              <a href=\"https://tools.ietf.org/html/rfc7230\">RFC 7230</a>, June 2014.\n\n   [<a name=\"ref-RFC7231\" id=\"ref-RFC7231\">RFC7231</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Semantics and Content\", <a href=\"https://tools.ietf.org/html/rfc7231\">RFC 7231</a>,\n              June 2014.\n\n   [<a name=\"ref-RFC7232\" id=\"ref-RFC7232\">RFC7232</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Conditional Requests\", <a href=\"https://tools.ietf.org/html/rfc7232\">RFC 7232</a>,\n              June 2014.\n\n   [<a name=\"ref-RFC7234\" id=\"ref-RFC7234\">RFC7234</a>]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              <a href=\"https://tools.ietf.org/html/rfc7234\">RFC 7234</a>, June 2014.\n\n<h3 class=\"h3\" id=\"section-8.2\">8.2.  Informative References</h3>\n   [<a name=\"ref-BCP13\" id=\"ref-BCP13\">BCP13</a>]    Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications and Registration Procedures\", <a href=\"https://tools.ietf.org/html/bcp13\">BCP 13</a>,\n              <a href=\"https://tools.ietf.org/html/rfc6838\">RFC 6838</a>, January 2013.\n\n   [<a name=\"ref-BCP90\" id=\"ref-BCP90\">BCP90</a>]    Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures for Message Header Fields\", <a href=\"https://tools.ietf.org/html/bcp90\">BCP 90</a>, <a href=\"https://tools.ietf.org/html/rfc3864\">RFC 3864</a>,\n              September 2004.\n\n   [<a name=\"ref-RFC2616\" id=\"ref-RFC2616\">RFC2616</a>]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>, June 1999.\n\n   [<a name=\"ref-RFC5226\" id=\"ref-RFC5226\">RFC5226</a>]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\", <a href=\"https://tools.ietf.org/html/bcp26\">BCP 26</a>, <a href=\"https://tools.ietf.org/html/rfc5226\">RFC 5226</a>,\n              May 2008.\n\n<h2 class=\"h2\" id=\"appendix-A\">Appendix A.  Internet Media Type multipart/byteranges</h2>\n   When a 206 (Partial Content) response message includes the content of\n   multiple ranges, they are transmitted as body parts in a multipart\n   message body (<a href=\"https://tools.ietf.org/html/rfc2046#section-5.1\">[RFC2046], Section 5.1</a>) with the media type of\n   \"multipart/byteranges\".\n\n   The multipart/byteranges media type includes one or more body parts,\n   each with its own Content-Type and Content-Range fields.  The\n   required boundary parameter specifies the boundary string used to\n   separate each body part.\n\n   Implementation Notes:\n\n   1.  Additional CRLFs might precede the first boundary string in the\n       body.\n\n   2.  Although [<a href=\"https://tools.ietf.org/html/rfc2046\" title='\"Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types\"'>RFC2046</a>] permits the boundary string to be quoted, some\n       existing implementations handle a quoted boundary string\n       incorrectly.\n\n   3.  A number of clients and servers were coded to an early draft of\n       the byteranges specification that used a media type of multipart/\n       x-byteranges, which is almost (but not quite) compatible with\n       this type.\n\n   Despite the name, the \"multipart/byteranges\" media type is not\n   limited to byte ranges.  The following example uses an \"exampleunit\"\n   range unit:\n\n     HTTP/1.1 206 Partial Content\n     Date: Tue, 14 Nov 1995 06:25:24 GMT\n     Last-Modified: Tue, 14 July 04:58:08 GMT\n     Content-Length: 2331785\n     Content-Type: multipart/byteranges; boundary=THIS_STRING_SEPARATES\n\n     --THIS_STRING_SEPARATES\n     Content-Type: video/example\n     Content-Range: exampleunit 1.2-4.3/25\n\n     ...the first range\n     --THIS_STRING_SEPARATES\n     Content-Type: video/example\n     Content-Range: exampleunit 11.2-14.3/25\n\n     ...the second range\n     --THIS_STRING_SEPARATES--\n\n<h2 class=\"h2\" id=\"appendix-B\">Appendix B.  Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>\n</h2>\n   Servers are given more leeway in how they respond to a range request,\n   in order to mitigate abuse by malicious (or just greedy) clients.\n   (<a href=\"#section-3.1\">Section 3.1</a>)\n\n   A weak validator cannot be used in a 206 response.  (<a href=\"#section-4.1\">Section 4.1</a>)\n\n   The Content-Range header field only has meaning when the status code\n   explicitly defines its use.  (<a href=\"#section-4.2\">Section 4.2</a>)\n\n   This specification introduces a Range Unit Registry.  (<a href=\"#section-5.1\">Section 5.1</a>)\n\n   multipart/byteranges can consist of a single part.  (Appendix A)\n\n<h2 class=\"h2\" id=\"appendix-C\">Appendix C.  Imported ABNF</h2>\n   The following core rules are included by reference, as defined in\n   <a href=\"https://tools.ietf.org/html/rfc5234#appendix-B.1\">Appendix B.1 of [RFC5234]</a>: ALPHA (letters), CR (carriage return),\n   CRLF (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double\n   quote), HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed), OCTET (any\n   8-bit sequence of data), SP (space), and VCHAR (any visible US-ASCII\n   character).\n\n   Note that all rules derived from token are to be compared\n   case-insensitively, like range-unit and acceptable-ranges.\n\n   The rules below are defined in [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>]:\n\n     OWS        = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n     token      = &lt;token, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n\n   The rules below are defined in other parts:\n\n     HTTP-date  = &lt;HTTP-date, see <a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.1.1\">[RFC7231], Section 7.1.1.1</a>&gt;\n     entity-tag = &lt;entity-tag, see <a href=\"https://tools.ietf.org/html/rfc7232#section-2.3\">[RFC7232], Section 2.3</a>&gt;\n\n<h2 class=\"h2\" id=\"appendix-D\">Appendix D.  Collected ABNF</h2>\n   In the collected ABNF below, list rules are expanded as per <a href=\"#section-1.2\">Section</a>\n   <a href=\"#section-1.2\">1.2</a> of [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>].\n\n   Accept-Ranges = acceptable-ranges\n\n   Content-Range = byte-content-range / other-content-range\n\n   HTTP-date = &lt;HTTP-date, see <a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.1.1\">[RFC7231], Section 7.1.1.1</a>&gt;\n\n   If-Range = entity-tag / HTTP-date\n\n   OWS = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n\n   Range = byte-ranges-specifier / other-ranges-specifier\n\n   acceptable-ranges = ( *( \",\" OWS ) range-unit *( OWS \",\" [ OWS\n    range-unit ] ) ) / \"none\"\n\n   byte-content-range = bytes-unit SP ( byte-range-resp /\n    unsatisfied-range )\n   byte-range = first-byte-pos \"-\" last-byte-pos\n   byte-range-resp = byte-range \"/\" ( complete-length / \"*\" )\n   byte-range-set = *( \",\" OWS ) ( byte-range-spec /\n    suffix-byte-range-spec ) *( OWS \",\" [ OWS ( byte-range-spec /\n    suffix-byte-range-spec ) ] )\n   byte-range-spec = first-byte-pos \"-\" [ last-byte-pos ]\n   byte-ranges-specifier = bytes-unit \"=\" byte-range-set\n   bytes-unit = \"bytes\"\n\n   complete-length = 1*DIGIT\n\n   entity-tag = &lt;entity-tag, see <a href=\"https://tools.ietf.org/html/rfc7232#section-2.3\">[RFC7232], Section 2.3</a>&gt;\n\n   first-byte-pos = 1*DIGIT\n\n   last-byte-pos = 1*DIGIT\n\n   other-content-range = other-range-unit SP other-range-resp\n   other-range-resp = *CHAR\n   other-range-set = 1*VCHAR\n   other-range-unit = token\n   other-ranges-specifier = other-range-unit \"=\" other-range-set\n\n   range-unit = bytes-unit / other-range-unit\n\n   suffix-byte-range-spec = \"-\" suffix-length\n\n   suffix-length = 1*DIGIT\n\n   token = &lt;token, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n\n   unsatisfied-range = \"*/\" complete-length\n\nIndex\n\n   2\n      206 Partial Content (status code)  10\n\n   4\n      416 Range Not Satisfiable (status code)  15\n\n   A\n      Accept-Ranges header field  7\n\n   C\n      Content-Range header field  12\n\n   G\n      Grammar\n         Accept-Ranges  7\n         acceptable-ranges  7\n         byte-content-range  12\n         byte-range  12\n         byte-range-resp  12\n         byte-range-set  5\n         byte-range-spec  5\n         byte-ranges-specifier  5\n         bytes-unit  5\n         complete-length  12\n         Content-Range  12\n         first-byte-pos  5\n         If-Range  9\n         last-byte-pos  5\n         other-content-range  12\n         other-range-resp  12\n         other-range-unit  5, 7\n         Range  8\n         range-unit  5\n         ranges-specifier  5\n         suffix-byte-range-spec  6\n         suffix-length  6\n         unsatisfied-range  12\n\n   I\n      If-Range header field  9\n\n   M\n      Media Type\n         multipart/byteranges  18, 21\n         multipart/x-byteranges  19\n      multipart/byteranges Media Type  18, 21\n      multipart/x-byteranges Media Type  21\n\n   R\n      Range header field  8\n\nAuthors' Addresses\n\n   Roy T. Fielding (editor)\n   Adobe Systems Incorporated\n   345 Park Ave\n   San Jose, CA  95110\n   USA\n\n   EMail: fielding@gbiv.com\n   URI:   <a href=\"http://roy.gbiv.com/\">http://roy.gbiv.com/</a>\n\n\n   Yves Lafon (editor)\n   World Wide Web Consortium\n   W3C / ERCIM\n   2004, rte des Lucioles\n   Sophia-Antipolis, AM  06902\n   France\n\n   EMail: ylafon@w3.org\n   URI:   <a href=\"http://www.raubacapeu.net/people/yves/\">http://www.raubacapeu.net/people/yves/</a>\n\n\n   Julian F. Reschke (editor)\n   greenbytes GmbH\n   Hafenweg 16\n   Muenster, NW  48155\n   Germany\n\n   EMail: julian.reschke@greenbytes.de\n   URI:   <a href=\"http://greenbytes.de/tech/webdav/\">http://greenbytes.de/tech/webdav/</a>\n\n\nFielding, et al.             Standards Track                   [Page 25]<br>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; document authors. All rights reserved.<br>\n    <a href=\"https://tools.ietf.org/html/rfc7233\" class=\"_attribution-link\">https://tools.ietf.org/html/rfc7233</a>\n  </p>\n</div>\n","rfc7235":"<div class=\"_rfc-pre\">Internet Engineering Task Force (IETF)                  R. Fielding, Ed.\nRequest for Comments: 7235                                         Adobe\nObsoletes: <a href=\"https://tools.ietf.org/html/rfc2616\">2616</a>                                          J. Reschke, Ed.\nUpdates: <a href=\"https://tools.ietf.org/html/rfc2617\">2617</a>                                                 greenbytes\nCategory: Standards Track                                      June 2014\nISSN: 2070-1721\n\n\n         <h1 class=\"h1\">Hypertext Transfer Protocol (HTTP/1.1): Authentication</h1>\nAbstract\n\n   The Hypertext Transfer Protocol (HTTP) is a stateless application-\n   level protocol for distributed, collaborative, hypermedia information\n   systems.  This document defines the HTTP Authentication framework.\n\nStatus of This Memo\n\n   This is an Internet Standards Track document.\n\n   This document is a product of the Internet Engineering Task Force\n   (IETF).  It represents the consensus of the IETF community.  It has\n   received public review and has been approved for publication by the\n   Internet Engineering Steering Group (IESG).  Further information on\n   Internet Standards is available in <a href=\"https://tools.ietf.org/html/rfc5741#section-2\">Section 2 of RFC 5741</a>.\n\n   Information about the current status of this document, any errata,\n   and how to provide feedback on it may be obtained at\n   <a href=\"http://www.rfc-editor.org/info/rfc7235\">http://www.rfc-editor.org/info/rfc7235</a>.\n\nCopyright Notice\n\n   Copyright (c) 2014 IETF Trust and the persons identified as the\n   document authors.  All rights reserved.\n\n   This document is subject to <a href=\"https://tools.ietf.org/html/bcp78\">BCP 78</a> and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n   (<a href=\"http://trustee.ietf.org/license-info\">http://trustee.ietf.org/license-info</a>) in effect on the date of\n   publication of this document.  Please review these documents\n   carefully, as they describe your rights and restrictions with respect\n   to this document.  Code Components extracted from this document must\n   include Simplified BSD License text as described in <a href=\"#section-4\">Section 4</a>.e of\n   the Trust Legal Provisions and are provided without warranty as\n   described in the Simplified BSD License.\n\n   This document may contain material from IETF Documents or IETF\n   Contributions published or made publicly available before November\n   10, 2008.  The person(s) controlling the copyright in some of this\n\n   material may not have granted the IETF Trust the right to allow\n   modifications of such material outside the IETF Standards Process.\n   Without obtaining an adequate license from the person(s) controlling\n   the copyright in such materials, this document may not be modified\n   outside the IETF Standards Process, and derivative works of it may\n   not be created outside the IETF Standards Process, except to format\n   it for publication as an RFC or to translate it into languages other\n   than English.\n\nTable of Contents\n\n   <a href=\"#section-1\">1</a>. Introduction \n      <a href=\"#section-1.1\">1.1</a>. Conformance and Error Handling \n      <a href=\"#section-1.2\">1.2</a>. Syntax Notation \n   <a href=\"#section-2\">2</a>. Access Authentication Framework \n      <a href=\"#section-2.1\">2.1</a>. Challenge and Response \n      <a href=\"#section-2.2\">2.2</a>. Protection Space (Realm) \n   <a href=\"#section-3\">3</a>. Status Code Definitions \n      <a href=\"#section-3.1\">3.1</a>. 401 Unauthorized \n      <a href=\"#section-3.2\">3.2</a>. 407 Proxy Authentication Required \n   <a href=\"#section-4\">4</a>. Header Field Definitions \n      <a href=\"#section-4.1\">4.1</a>. WWW-Authenticate \n      <a href=\"#section-4.2\">4.2</a>. Authorization \n      <a href=\"#section-4.3\">4.3</a>. Proxy-Authenticate \n      <a href=\"#section-4.4\">4.4</a>. Proxy-Authorization \n   <a href=\"#section-5\">5</a>. IANA Considerations \n      <a href=\"#section-5.1\">5.1</a>. Authentication Scheme Registry \n           <a href=\"#section-5.1.1\">5.1.1</a>. Procedure \n           <a href=\"#section-5.1.2\">5.1.2</a>. Considerations for New Authentication Schemes \n      <a href=\"#section-5.2\">5.2</a>. Status Code Registration \n      <a href=\"#section-5.3\">5.3</a>. Header Field Registration \n   <a href=\"#section-6\">6</a>. Security Considerations \n      <a href=\"#section-6.1\">6.1</a>. Confidentiality of Credentials \n      <a href=\"#section-6.2\">6.2</a>. Authentication Credentials and Idle Clients \n      <a href=\"#section-6.3\">6.3</a>. Protection Spaces \n   <a href=\"#section-7\">7</a>. Acknowledgments \n   <a href=\"#section-8\">8</a>. References \n      <a href=\"#section-8.1\">8.1</a>. Normative References \n      <a href=\"#section-8.2\">8.2</a>. Informative References \n   <a href=\"#appendix-A\">Appendix A</a>. Changes from RFCs 2616 and 2617 \n   <a href=\"#appendix-B\">Appendix B</a>. Imported ABNF \n   <a href=\"#appendix-C\">Appendix C</a>. Collected ABNF \n   Index \n\n<h2 class=\"h2\" id=\"section-1\">1.  Introduction</h2>\n   HTTP provides a general framework for access control and\n   authentication, via an extensible set of challenge-response\n   authentication schemes, which can be used by a server to challenge a\n   client request and by a client to provide authentication information.\n   This document defines HTTP/1.1 authentication in terms of the\n   architecture defined in \"Hypertext Transfer Protocol (HTTP/1.1):\n   Message Syntax and Routing\" [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>], including the general\n   framework previously described in \"HTTP Authentication: Basic and\n   Digest Access Authentication\" [<a href=\"https://tools.ietf.org/html/rfc2617\" title='\"HTTP Authentication: Basic and Digest Access Authentication\"'>RFC2617</a>] and the related fields and\n   status codes previously defined in \"Hypertext Transfer Protocol --\n   HTTP/1.1\" [<a href=\"https://tools.ietf.org/html/rfc2616\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>RFC2616</a>].\n\n   The IANA Authentication Scheme Registry (<a href=\"#section-5.1\">Section 5.1</a>) lists\n   registered authentication schemes and their corresponding\n   specifications, including the \"basic\" and \"digest\" authentication\n   schemes previously defined by <a href=\"https://tools.ietf.org/html/rfc2617\">RFC 2617</a>.\n\n<h3 class=\"h3\" id=\"section-1.1\">1.1.  Conformance and Error Handling</h3>\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described in [<a href=\"https://tools.ietf.org/html/rfc2119\" title='\"Key words for use in RFCs to Indicate Requirement Levels\"'>RFC2119</a>].\n\n   Conformance criteria and considerations regarding error handling are\n   defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-2.5\">Section 2.5 of [RFC7230]</a>.\n\n<h3 class=\"h3\" id=\"section-1.2\">1.2.  Syntax Notation</h3>\n   This specification uses the Augmented Backus-Naur Form (ABNF)\n   notation of [<a href=\"https://tools.ietf.org/html/rfc5234\" title='\"Augmented BNF for Syntax Specifications: ABNF\"'>RFC5234</a>] with a list extension, defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-7\">Section 7 of\n   [RFC7230]</a>, that allows for compact definition of comma-separated\n   lists using a '#' operator (similar to how the '*' operator indicates\n   repetition).  <a href=\"#appendix-B\">Appendix B</a> describes rules imported from other\n   documents.  <a href=\"#appendix-C\">Appendix C</a> shows the collected grammar with all list\n   operators expanded to standard ABNF notation.\n\n<h2 class=\"h2\" id=\"section-2\">2.  Access Authentication Framework</h2>\n<h3 class=\"h3\" id=\"section-2.1\">2.1.  Challenge and Response</h3>\n   HTTP provides a simple challenge-response authentication framework\n   that can be used by a server to challenge a client request and by a\n   client to provide authentication information.  It uses a case-\n   insensitive token as a means to identify the authentication scheme,\n   followed by additional information necessary for achieving\n\n   authentication via that scheme.  The latter can be either a comma-\n   separated list of parameters or a single sequence of characters\n   capable of holding base64-encoded information.\n\n   Authentication parameters are name=value pairs, where the name token\n   is matched case-insensitively, and each parameter name MUST only\n   occur once per challenge.\n\n     auth-scheme    = token\n\n     auth-param     = token BWS \"=\" BWS ( token / quoted-string )\n\n     token68        = 1*( ALPHA / DIGIT /\n                          \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\n\n   The token68 syntax allows the 66 unreserved URI characters\n   ([<a href=\"https://tools.ietf.org/html/rfc3986\" title='\"Uniform Resource Identifier (URI): Generic Syntax\"'>RFC3986</a>]), plus a few others, so that it can hold a base64,\n   base64url (URL and filename safe alphabet), base32, or base16 (hex)\n   encoding, with or without padding, but excluding whitespace\n   ([<a href=\"https://tools.ietf.org/html/rfc4648\" title='\"The Base16, Base32, and Base64 Data Encodings\"'>RFC4648</a>]).\n\n   A 401 (Unauthorized) response message is used by an origin server to\n   challenge the authorization of a user agent, including a\n   WWW-Authenticate header field containing at least one challenge\n   applicable to the requested resource.\n\n   A 407 (Proxy Authentication Required) response message is used by a\n   proxy to challenge the authorization of a client, including a\n   Proxy-Authenticate header field containing at least one challenge\n   applicable to the proxy for the requested resource.\n\n     challenge   = auth-scheme [ 1*SP ( token68 / #auth-param ) ]\n\n      Note: Many clients fail to parse a challenge that contains an\n      unknown scheme.  A workaround for this problem is to list well-\n      supported schemes (such as \"basic\") first.\n\n   A user agent that wishes to authenticate itself with an origin server\n   -- usually, but not necessarily, after receiving a 401 (Unauthorized)\n   -- can do so by including an Authorization header field with the\n   request.\n\n   A client that wishes to authenticate itself with a proxy -- usually,\n   but not necessarily, after receiving a 407 (Proxy Authentication\n   Required) -- can do so by including a Proxy-Authorization header\n   field with the request.\n\n   Both the Authorization field value and the Proxy-Authorization field\n   value contain the client's credentials for the realm of the resource\n   being requested, based upon a challenge received in a response\n   (possibly at some point in the past).  When creating their values,\n   the user agent ought to do so by selecting the challenge with what it\n   considers to be the most secure auth-scheme that it understands,\n   obtaining credentials from the user as appropriate.  Transmission of\n   credentials within header field values implies significant security\n   considerations regarding the confidentiality of the underlying\n   connection, as described in <a href=\"#section-6.1\">Section 6.1</a>.\n\n     credentials = auth-scheme [ 1*SP ( token68 / #auth-param ) ]\n\n   Upon receipt of a request for a protected resource that omits\n   credentials, contains invalid credentials (e.g., a bad password) or\n   partial credentials (e.g., when the authentication scheme requires\n   more than one round trip), an origin server SHOULD send a 401\n   (Unauthorized) response that contains a WWW-Authenticate header field\n   with at least one (possibly new) challenge applicable to the\n   requested resource.\n\n   Likewise, upon receipt of a request that omits proxy credentials or\n   contains invalid or partial proxy credentials, a proxy that requires\n   authentication SHOULD generate a 407 (Proxy Authentication Required)\n   response that contains a Proxy-Authenticate header field with at\n   least one (possibly new) challenge applicable to the proxy.\n\n   A server that receives valid credentials that are not adequate to\n   gain access ought to respond with the 403 (Forbidden) status code\n   (<a href=\"https://tools.ietf.org/html/rfc7231#section-6.5.3\">Section 6.5.3 of [RFC7231]</a>).\n\n   HTTP does not restrict applications to this simple challenge-response\n   framework for access authentication.  Additional mechanisms can be\n   used, such as authentication at the transport level or via message\n   encapsulation, and with additional header fields specifying\n   authentication information.  However, such additional mechanisms are\n   not defined by this specification.\n\n<h3 class=\"h3\" id=\"section-2.2\">2.2.  Protection Space (Realm)</h3>\n   The \"realm\" authentication parameter is reserved for use by\n   authentication schemes that wish to indicate a scope of protection.\n\n   A protection space is defined by the canonical root URI (the scheme\n   and authority components of the effective request URI; see <a href=\"#section-5.5\">Section</a>\n   <a href=\"#section-5.5\">5.5</a> of [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>]) of the server being accessed, in combination with\n   the realm value if present.  These realms allow the protected\n   resources on a server to be partitioned into a set of protection\n\n   spaces, each with its own authentication scheme and/or authorization\n   database.  The realm value is a string, generally assigned by the\n   origin server, that can have additional semantics specific to the\n   authentication scheme.  Note that a response can have multiple\n   challenges with the same auth-scheme but with different realms.\n\n   The protection space determines the domain over which credentials can\n   be automatically applied.  If a prior request has been authorized,\n   the user agent MAY reuse the same credentials for all other requests\n   within that protection space for a period of time determined by the\n   authentication scheme, parameters, and/or user preferences (such as a\n   configurable inactivity timeout).  Unless specifically allowed by the\n   authentication scheme, a single protection space cannot extend\n   outside the scope of its server.\n\n   For historical reasons, a sender MUST only generate the quoted-string\n   syntax.  Recipients might have to support both token and\n   quoted-string syntax for maximum interoperability with existing\n   clients that have been accepting both notations for a long time.\n\n<h2 class=\"h2\" id=\"section-3\">3.  Status Code Definitions</h2>\n<h3 class=\"h3\" id=\"section-3.1\">3.1.  401 Unauthorized</h3>\n   The 401 (Unauthorized) status code indicates that the request has not\n   been applied because it lacks valid authentication credentials for\n   the target resource.  The server generating a 401 response MUST send\n   a WWW-Authenticate header field (<a href=\"#section-4.1\">Section 4.1</a>) containing at least one\n   challenge applicable to the target resource.\n\n   If the request included authentication credentials, then the 401\n   response indicates that authorization has been refused for those\n   credentials.  The user agent MAY repeat the request with a new or\n   replaced Authorization header field (<a href=\"#section-4.2\">Section 4.2</a>).  If the 401\n   response contains the same challenge as the prior response, and the\n   user agent has already attempted authentication at least once, then\n   the user agent SHOULD present the enclosed representation to the\n   user, since it usually contains relevant diagnostic information.\n\n<h3 class=\"h3\" id=\"section-3.2\">3.2.  407 Proxy Authentication Required</h3>\n   The 407 (Proxy Authentication Required) status code is similar to 401\n   (Unauthorized), but it indicates that the client needs to\n   authenticate itself in order to use a proxy.  The proxy MUST send a\n   Proxy-Authenticate header field (<a href=\"#section-4.3\">Section 4.3</a>) containing a challenge\n   applicable to that proxy for the target resource.  The client MAY\n   repeat the request with a new or replaced Proxy-Authorization header\n   field (<a href=\"#section-4.4\">Section 4.4</a>).\n\n<h2 class=\"h2\" id=\"section-4\">4.  Header Field Definitions</h2>\n   This section defines the syntax and semantics of header fields\n   related to the HTTP authentication framework.\n\n<h3 class=\"h3\" id=\"section-4.1\">4.1.  WWW-Authenticate</h3>\n   The \"WWW-Authenticate\" header field indicates the authentication\n   scheme(s) and parameters applicable to the target resource.\n\n     WWW-Authenticate = 1#challenge\n\n   A server generating a 401 (Unauthorized) response MUST send a\n   WWW-Authenticate header field containing at least one challenge.  A\n   server MAY generate a WWW-Authenticate header field in other response\n   messages to indicate that supplying credentials (or different\n   credentials) might affect the response.\n\n   A proxy forwarding a response MUST NOT modify any WWW-Authenticate\n   fields in that response.\n\n   User agents are advised to take special care in parsing the field\n   value, as it might contain more than one challenge, and each\n   challenge can contain a comma-separated list of authentication\n   parameters.  Furthermore, the header field itself can occur multiple\n   times.\n\n   For instance:\n\n     WWW-Authenticate: Newauth realm=\"apps\", type=1,\n                       title=\"Login to \\\"apps\\\"\", Basic realm=\"simple\"\n\n   This header field contains two challenges; one for the \"Newauth\"\n   scheme with a realm value of \"apps\", and two additional parameters\n   \"type\" and \"title\", and another one for the \"Basic\" scheme with a\n   realm value of \"simple\".\n\n      Note: The challenge grammar production uses the list syntax as\n      well.  Therefore, a sequence of comma, whitespace, and comma can\n      be considered either as applying to the preceding challenge, or to\n      be an empty entry in the list of challenges.  In practice, this\n      ambiguity does not affect the semantics of the header field value\n      and thus is harmless.\n\n<h3 class=\"h3\" id=\"section-4.2\">4.2.  Authorization</h3>\n   The \"Authorization\" header field allows a user agent to authenticate\n   itself with an origin server -- usually, but not necessarily, after\n   receiving a 401 (Unauthorized) response.  Its value consists of\n   credentials containing the authentication information of the user\n   agent for the realm of the resource being requested.\n\n     Authorization = credentials\n\n   If a request is authenticated and a realm specified, the same\n   credentials are presumed to be valid for all other requests within\n   this realm (assuming that the authentication scheme itself does not\n   require otherwise, such as credentials that vary according to a\n   challenge value or using synchronized clocks).\n\n   A proxy forwarding a request MUST NOT modify any Authorization fields\n   in that request.  See <a href=\"https://tools.ietf.org/html/rfc7234#section-3.2\">Section 3.2 of [RFC7234]</a> for details of and\n   requirements pertaining to handling of the Authorization field by\n   HTTP caches.\n\n<h3 class=\"h3\" id=\"section-4.3\">4.3.  Proxy-Authenticate</h3>\n   The \"Proxy-Authenticate\" header field consists of at least one\n   challenge that indicates the authentication scheme(s) and parameters\n   applicable to the proxy for this effective request URI (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">Section 5.5\n   of [RFC7230]</a>).  A proxy MUST send at least one Proxy-Authenticate\n   header field in each 407 (Proxy Authentication Required) response\n   that it generates.\n\n     Proxy-Authenticate = 1#challenge\n\n   Unlike WWW-Authenticate, the Proxy-Authenticate header field applies\n   only to the next outbound client on the response chain.  This is\n   because only the client that chose a given proxy is likely to have\n   the credentials necessary for authentication.  However, when multiple\n   proxies are used within the same administrative domain, such as\n   office and regional caching proxies within a large corporate network,\n   it is common for credentials to be generated by the user agent and\n   passed through the hierarchy until consumed.  Hence, in such a\n   configuration, it will appear as if Proxy-Authenticate is being\n   forwarded because each proxy will send the same challenge set.\n\n   Note that the parsing considerations for WWW-Authenticate apply to\n   this header field as well; see <a href=\"#section-4.1\">Section 4.1</a> for details.\n\n<h3 class=\"h3\" id=\"section-4.4\">4.4.  Proxy-Authorization</h3>\n   The \"Proxy-Authorization\" header field allows the client to identify\n   itself (or its user) to a proxy that requires authentication.  Its\n   value consists of credentials containing the authentication\n   information of the client for the proxy and/or realm of the resource\n   being requested.\n\n     Proxy-Authorization = credentials\n\n   Unlike Authorization, the Proxy-Authorization header field applies\n   only to the next inbound proxy that demanded authentication using the\n   Proxy-Authenticate field.  When multiple proxies are used in a chain,\n   the Proxy-Authorization header field is consumed by the first inbound\n   proxy that was expecting to receive credentials.  A proxy MAY relay\n   the credentials from the client request to the next proxy if that is\n   the mechanism by which the proxies cooperatively authenticate a given\n   request.\n\n<h2 class=\"h2\" id=\"section-5\">5.  IANA Considerations</h2>\n<h3 class=\"h3\" id=\"section-5.1\">5.1.  Authentication Scheme Registry</h3>\n   The \"Hypertext Transfer Protocol (HTTP) Authentication Scheme\n   Registry\" defines the namespace for the authentication schemes in\n   challenges and credentials.  It has been created and is now\n   maintained at &lt;<a href=\"http://www.iana.org/assignments/http-authschemes\">http://www.iana.org/assignments/http-authschemes</a>&gt;.\n\n<h4 class=\"h4\" id=\"section-5.1.1\">5.1.1.  Procedure</h4>\n   Registrations MUST include the following fields:\n\n   o  Authentication Scheme Name\n\n   o  Pointer to specification text\n\n   o  Notes (optional)\n\n   Values to be added to this namespace require IETF Review (see\n   <a href=\"https://tools.ietf.org/html/rfc5226#section-4.1\">[RFC5226], Section 4.1</a>).\n\n<h4 class=\"h4\" id=\"section-5.1.2\">5.1.2.  Considerations for New Authentication Schemes</h4>\n   There are certain aspects of the HTTP Authentication Framework that\n   put constraints on how new authentication schemes can work:\n\n   o  HTTP authentication is presumed to be stateless: all of the\n      information necessary to authenticate a request MUST be provided\n      in the request, rather than be dependent on the server remembering\n      prior requests.  Authentication based on, or bound to, the\n      underlying connection is outside the scope of this specification\n      and inherently flawed unless steps are taken to ensure that the\n      connection cannot be used by any party other than the\n      authenticated user (see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.3\">Section 2.3 of [RFC7230]</a>).\n\n   o  The authentication parameter \"realm\" is reserved for defining\n      protection spaces as described in <a href=\"#section-2.2\">Section 2.2</a>.  New schemes MUST\n      NOT use it in a way incompatible with that definition.\n\n   o  The \"token68\" notation was introduced for compatibility with\n      existing authentication schemes and can only be used once per\n      challenge or credential.  Thus, new schemes ought to use the\n      auth-param syntax instead, because otherwise future extensions\n      will be impossible.\n\n   o  The parsing of challenges and credentials is defined by this\n      specification and cannot be modified by new authentication\n      schemes.  When the auth-param syntax is used, all parameters ought\n      to support both token and quoted-string syntax, and syntactical\n      constraints ought to be defined on the field value after parsing\n      (i.e., quoted-string processing).  This is necessary so that\n      recipients can use a generic parser that applies to all\n      authentication schemes.\n\n      Note: The fact that the value syntax for the \"realm\" parameter is\n      restricted to quoted-string was a bad design choice not to be\n      repeated for new parameters.\n\n   o  Definitions of new schemes ought to define the treatment of\n      unknown extension parameters.  In general, a \"must-ignore\" rule is\n      preferable to a \"must-understand\" rule, because otherwise it will\n      be hard to introduce new parameters in the presence of legacy\n      recipients.  Furthermore, it's good to describe the policy for\n      defining new parameters (such as \"update the specification\" or\n      \"use this registry\").\n\n   o  Authentication schemes need to document whether they are usable in\n      origin-server authentication (i.e., using WWW-Authenticate),\n      and/or proxy authentication (i.e., using Proxy-Authenticate).\n\n   o  The credentials carried in an Authorization header field are\n      specific to the user agent and, therefore, have the same effect on\n      HTTP caches as the \"private\" Cache-Control response directive\n      (<a href=\"https://tools.ietf.org/html/rfc7234#section-5.2.2.6\">Section 5.2.2.6 of [RFC7234]</a>), within the scope of the request in\n      which they appear.\n\n      Therefore, new authentication schemes that choose not to carry\n      credentials in the Authorization header field (e.g., using a newly\n      defined header field) will need to explicitly disallow caching, by\n      mandating the use of either Cache-Control request directives\n      (e.g., \"no-store\", <a href=\"https://tools.ietf.org/html/rfc7234#section-5.2.1.5\">Section 5.2.1.5 of [RFC7234]</a>) or response\n      directives (e.g., \"private\").\n\n<h3 class=\"h3\" id=\"section-5.2\">5.2.  Status Code Registration</h3>\n   The \"Hypertext Transfer Protocol (HTTP) Status Code Registry\" located\n   at &lt;<a href=\"http://www.iana.org/assignments/http-status-codes\">http://www.iana.org/assignments/http-status-codes</a>&gt; has been\n   updated with the registrations below:\n\n   +-------+-------------------------------+-------------+\n   | Value | Description                   | Reference   |\n   +-------+-------------------------------+-------------+\n   | 401   | Unauthorized                  | <a href=\"#section-3.1\">Section 3.1</a> |\n   | 407   | Proxy Authentication Required | <a href=\"#section-3.2\">Section 3.2</a> |\n   +-------+-------------------------------+-------------+\n\n<h3 class=\"h3\" id=\"section-5.3\">5.3.  Header Field Registration</h3>\n   HTTP header fields are registered within the \"Message Headers\"\n   registry maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/message-headers/\">http://www.iana.org/assignments/message-headers/</a>&gt;.\n\n   This document defines the following HTTP header fields, so the\n   \"Permanent Message Header Field Names\" registry has been updated\n   accordingly (see [<a href=\"#ref-BCP90\" title='\"Registration Procedures for Message Header Fields\"'>BCP90</a>]).\n\n   +---------------------+----------+----------+-------------+\n   | Header Field Name   | Protocol | Status   | Reference   |\n   +---------------------+----------+----------+-------------+\n   | Authorization       | http     | standard | <a href=\"#section-4.2\">Section 4.2</a> |\n   | Proxy-Authenticate  | http     | standard | <a href=\"#section-4.3\">Section 4.3</a> |\n   | Proxy-Authorization | http     | standard | <a href=\"#section-4.4\">Section 4.4</a> |\n   | WWW-Authenticate    | http     | standard | <a href=\"#section-4.1\">Section 4.1</a> |\n   +---------------------+----------+----------+-------------+\n\n   The change controller is: \"IETF (iesg@ietf.org) - Internet\n   Engineering Task Force\".\n\n<h2 class=\"h2\" id=\"section-6\">6.  Security Considerations</h2>\n   This section is meant to inform developers, information providers,\n   and users of known security concerns specific to HTTP authentication.\n   More general security considerations are addressed in HTTP messaging\n   [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>] and semantics [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>].\n\n   Everything about the topic of HTTP authentication is a security\n   consideration, so the list of considerations below is not exhaustive.\n   Furthermore, it is limited to security considerations regarding the\n   authentication framework, in general, rather than discussing all of\n   the potential considerations for specific authentication schemes\n   (which ought to be documented in the specifications that define those\n   schemes).  Various organizations maintain topical information and\n   links to current research on Web application security (e.g.,\n   [<a href=\"#ref-OWASP\" title='\"A Guide to Building Secure Web Applications and Web Services\"'>OWASP</a>]), including common pitfalls for implementing and using the\n   authentication schemes found in practice.\n\n<h3 class=\"h3\" id=\"section-6.1\">6.1.  Confidentiality of Credentials</h3>\n   The HTTP authentication framework does not define a single mechanism\n   for maintaining the confidentiality of credentials; instead, each\n   authentication scheme defines how the credentials are encoded prior\n   to transmission.  While this provides flexibility for the development\n   of future authentication schemes, it is inadequate for the protection\n   of existing schemes that provide no confidentiality on their own, or\n   that do not sufficiently protect against replay attacks.\n   Furthermore, if the server expects credentials that are specific to\n   each individual user, the exchange of those credentials will have the\n   effect of identifying that user even if the content within\n   credentials remains confidential.\n\n   HTTP depends on the security properties of the underlying transport-\n   or session-level connection to provide confidential transmission of\n   header fields.  In other words, if a server limits access to\n   authenticated users using this framework, the server needs to ensure\n   that the connection is properly secured in accordance with the nature\n   of the authentication scheme used.  For example, services that depend\n   on individual user authentication often require a connection to be\n   secured with TLS (\"Transport Layer Security\", [<a href=\"https://tools.ietf.org/html/rfc5246\" title='\"The Transport Layer Security (TLS) Protocol Version 1.2\"'>RFC5246</a>]) prior to\n   exchanging any credentials.\n\n<h3 class=\"h3\" id=\"section-6.2\">6.2.  Authentication Credentials and Idle Clients</h3>\n   Existing HTTP clients and user agents typically retain authentication\n   information indefinitely.  HTTP does not provide a mechanism for the\n   origin server to direct clients to discard these cached credentials,\n   since the protocol has no awareness of how credentials are obtained\n\n   or managed by the user agent.  The mechanisms for expiring or\n   revoking credentials can be specified as part of an authentication\n   scheme definition.\n\n   Circumstances under which credential caching can interfere with the\n   application's security model include but are not limited to:\n\n   o  Clients that have been idle for an extended period, following\n      which the server might wish to cause the client to re-prompt the\n      user for credentials.\n\n   o  Applications that include a session termination indication (such\n      as a \"logout\" or \"commit\" button on a page) after which the server\n      side of the application \"knows\" that there is no further reason\n      for the client to retain the credentials.\n\n   User agents that cache credentials are encouraged to provide a\n   readily accessible mechanism for discarding cached credentials under\n   user control.\n\n<h3 class=\"h3\" id=\"section-6.3\">6.3.  Protection Spaces</h3>\n   Authentication schemes that solely rely on the \"realm\" mechanism for\n   establishing a protection space will expose credentials to all\n   resources on an origin server.  Clients that have successfully made\n   authenticated requests with a resource can use the same\n   authentication credentials for other resources on the same origin\n   server.  This makes it possible for a different resource to harvest\n   authentication credentials for other resources.\n\n   This is of particular concern when an origin server hosts resources\n   for multiple parties under the same canonical root URI (<a href=\"#section-2.2\">Section 2.2</a>).\n   Possible mitigation strategies include restricting direct access to\n   authentication credentials (i.e., not making the content of the\n   Authorization request header field available), and separating\n   protection spaces by using a different host name (or port number) for\n   each party.\n\n<h2 class=\"h2\" id=\"section-7\">7.  Acknowledgments</h2>\n   This specification takes over the definition of the HTTP\n   Authentication Framework, previously defined in <a href=\"https://tools.ietf.org/html/rfc2617\">RFC 2617</a>.  We thank\n   John Franks, Phillip M. Hallam-Baker, Jeffery L. Hostetler, Scott D.\n   Lawrence, Paul J. Leach, Ari Luotonen, and Lawrence C. Stewart for\n   their work on that specification.  See <a href=\"https://tools.ietf.org/html/rfc2617#section-6\">Section 6 of [RFC2617]</a> for\n   further acknowledgements.\n\n   See <a href=\"https://tools.ietf.org/html/rfc7230#section-10\">Section 10 of [RFC7230]</a> for the Acknowledgments related to this\n   document revision.\n\n<h2 class=\"h2\" id=\"section-8\">8.  References</h2>\n<h3 class=\"h3\" id=\"section-8.1\">8.1.  Normative References</h3>\n   [<a name=\"ref-RFC2119\" id=\"ref-RFC2119\">RFC2119</a>]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\", <a href=\"https://tools.ietf.org/html/bcp14\">BCP 14</a>, <a href=\"https://tools.ietf.org/html/rfc2119\">RFC 2119</a>, March 1997.\n\n   [<a name=\"ref-RFC5234\" id=\"ref-RFC5234\">RFC5234</a>]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications: ABNF\", STD 68, <a href=\"https://tools.ietf.org/html/rfc5234\">RFC 5234</a>, January 2008.\n\n   [<a name=\"ref-RFC7230\" id=\"ref-RFC7230\">RFC7230</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Message Syntax and Routing\",\n              <a href=\"https://tools.ietf.org/html/rfc7230\">RFC 7230</a>, June 2014.\n\n   [<a name=\"ref-RFC7231\" id=\"ref-RFC7231\">RFC7231</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Semantics and Content\", <a href=\"https://tools.ietf.org/html/rfc7231\">RFC 7231</a>,\n              June 2014.\n\n   [<a name=\"ref-RFC7234\" id=\"ref-RFC7234\">RFC7234</a>]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              <a href=\"https://tools.ietf.org/html/rfc7234\">RFC 7234</a>, June 2014.\n\n<h3 class=\"h3\" id=\"section-8.2\">8.2.  Informative References</h3>\n   [<a name=\"ref-BCP90\" id=\"ref-BCP90\">BCP90</a>]    Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures for Message Header Fields\", <a href=\"https://tools.ietf.org/html/bcp90\">BCP 90</a>, <a href=\"https://tools.ietf.org/html/rfc3864\">RFC 3864</a>,\n              September 2004.\n\n   [<a name=\"ref-OWASP\" id=\"ref-OWASP\">OWASP</a>]    van der Stock, A., Ed., \"A Guide to Building Secure Web\n              Applications and Web Services\", The Open Web Application\n              Security Project (OWASP) 2.0.1, July 2005,\n              &lt;<a href=\"https://www.owasp.org/\">https://www.owasp.org/</a>&gt;.\n\n   [<a name=\"ref-RFC2616\" id=\"ref-RFC2616\">RFC2616</a>]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>, June 1999.\n\n   [<a name=\"ref-RFC2617\" id=\"ref-RFC2617\">RFC2617</a>]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n              Leach, P., Luotonen, A., and L. Stewart, \"HTTP\n              Authentication: Basic and Digest Access Authentication\",\n              <a href=\"https://tools.ietf.org/html/rfc2617\">RFC 2617</a>, June 1999.\n\n   [<a name=\"ref-RFC3986\" id=\"ref-RFC3986\">RFC3986</a>]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic Syntax\", STD 66,\n              <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>, January 2005.\n\n   [<a name=\"ref-RFC4648\" id=\"ref-RFC4648\">RFC4648</a>]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\", <a href=\"https://tools.ietf.org/html/rfc4648\">RFC 4648</a>, October 2006.\n\n   [<a name=\"ref-RFC5226\" id=\"ref-RFC5226\">RFC5226</a>]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\", <a href=\"https://tools.ietf.org/html/bcp26\">BCP 26</a>, <a href=\"https://tools.ietf.org/html/rfc5226\">RFC 5226</a>,\n              May 2008.\n\n   [<a name=\"ref-RFC5246\" id=\"ref-RFC5246\">RFC5246</a>]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\", <a href=\"https://tools.ietf.org/html/rfc5246\">RFC 5246</a>, August 2008.\n\n<h2 class=\"h2\" id=\"appendix-A\">Appendix A.  Changes from RFCs 2616 and 2617</h2>\n   The framework for HTTP Authentication is now defined by this\n   document, rather than <a href=\"https://tools.ietf.org/html/rfc2617\">RFC 2617</a>.\n\n   The \"realm\" parameter is no longer always required on challenges;\n   consequently, the ABNF allows challenges without any auth parameters.\n   (<a href=\"#section-2\">Section 2</a>)\n\n   The \"token68\" alternative to auth-param lists has been added for\n   consistency with legacy authentication schemes such as \"Basic\".\n   (<a href=\"#section-2\">Section 2</a>)\n\n   This specification introduces the Authentication Scheme Registry,\n   along with considerations for new authentication schemes.\n   (<a href=\"#section-5.1\">Section 5.1</a>)\n\n<h2 class=\"h2\" id=\"appendix-B\">Appendix B.  Imported ABNF</h2>\n   The following core rules are included by reference, as defined in\n   <a href=\"https://tools.ietf.org/html/rfc5234#appendix-B.1\">Appendix B.1 of [RFC5234]</a>: ALPHA (letters), CR (carriage return),\n   CRLF (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double\n   quote), HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed), OCTET (any\n   8-bit sequence of data), SP (space), and VCHAR (any visible US-ASCII\n   character).\n\n   The rules below are defined in [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>]:\n\n     BWS           = &lt;BWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n     OWS           = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n     quoted-string = &lt;quoted-string, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n     token         = &lt;token, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n\n<h2 class=\"h2\" id=\"appendix-C\">Appendix C.  Collected ABNF</h2>\n   In the collected ABNF below, list rules are expanded as per <a href=\"#section-1.2\">Section</a>\n   <a href=\"#section-1.2\">1.2</a> of [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>].\n\n   Authorization = credentials\n\n   BWS = &lt;BWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n\n   OWS = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n\n   Proxy-Authenticate = *( \",\" OWS ) challenge *( OWS \",\" [ OWS\n    challenge ] )\n   Proxy-Authorization = credentials\n\n   WWW-Authenticate = *( \",\" OWS ) challenge *( OWS \",\" [ OWS challenge\n    ] )\n\n   auth-param = token BWS \"=\" BWS ( token / quoted-string )\n   auth-scheme = token\n\n   challenge = auth-scheme [ 1*SP ( token68 / [ ( \",\" / auth-param ) *(\n    OWS \",\" [ OWS auth-param ] ) ] ) ]\n   credentials = auth-scheme [ 1*SP ( token68 / [ ( \",\" / auth-param )\n    *( OWS \",\" [ OWS auth-param ] ) ] ) ]\n\n   quoted-string = &lt;quoted-string, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n\n   token = &lt;token, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n   token68 = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" )\n    *\"=\"\n\nIndex\n\n   4\n      401 Unauthorized (status code)  6\n      407 Proxy Authentication Required (status code)  6\n\n   A\n      Authorization header field  8\n\n   C\n      Canonical Root URI  5\n\n   G\n      Grammar\n         auth-param  4\n         auth-scheme  4\n         Authorization  8\n         challenge  4\n         credentials  5\n         Proxy-Authenticate  8\n         Proxy-Authorization  9\n         token68  4\n         WWW-Authenticate  7\n\n   P\n      Protection Space  5\n      Proxy-Authenticate header field  8\n      Proxy-Authorization header field  9\n\n   R\n      Realm  5\n\n   W\n      WWW-Authenticate header field  7\n\nAuthors' Addresses\n\n   Roy T. Fielding (editor)\n   Adobe Systems Incorporated\n   345 Park Ave\n   San Jose, CA  95110\n   USA\n\n   EMail: fielding@gbiv.com\n   URI:   <a href=\"http://roy.gbiv.com/\">http://roy.gbiv.com/</a>\n\n\n   Julian F. Reschke (editor)\n   greenbytes GmbH\n   Hafenweg 16\n   Muenster, NW  48155\n   Germany\n\n   EMail: julian.reschke@greenbytes.de\n   URI:   <a href=\"http://greenbytes.de/tech/webdav/\">http://greenbytes.de/tech/webdav/</a>\n\n\nFielding &amp; Reschke           Standards Track                   [Page 19]<br>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; document authors. All rights reserved.<br>\n    <a href=\"https://tools.ietf.org/html/rfc7235\" class=\"_attribution-link\">https://tools.ietf.org/html/rfc7235</a>\n  </p>\n</div>\n","rfc7234":"<div class=\"_rfc-pre\">Internet Engineering Task Force (IETF)                  R. Fielding, Ed.\nRequest for Comments: 7234                                         Adobe\nObsoletes: <a href=\"https://tools.ietf.org/html/rfc2616\">2616</a>                                       M. Nottingham, Ed.\nCategory: Standards Track                                         Akamai\nISSN: 2070-1721                                          J. Reschke, Ed.\n                                                              greenbytes\n                                                               June 2014\n\n\n            <h1 class=\"h1\">Hypertext Transfer Protocol (HTTP/1.1): Caching</h1>\nAbstract\n\n   The Hypertext Transfer Protocol (HTTP) is a stateless application-\n   level protocol for distributed, collaborative, hypertext information\n   systems.  This document defines HTTP caches and the associated header\n   fields that control cache behavior or indicate cacheable response\n   messages.\n\nStatus of This Memo\n\n   This is an Internet Standards Track document.\n\n   This document is a product of the Internet Engineering Task Force\n   (IETF).  It represents the consensus of the IETF community.  It has\n   received public review and has been approved for publication by the\n   Internet Engineering Steering Group (IESG).  Further information on\n   Internet Standards is available in <a href=\"https://tools.ietf.org/html/rfc5741#section-2\">Section 2 of RFC 5741</a>.\n\n   Information about the current status of this document, any errata,\n   and how to provide feedback on it may be obtained at\n   <a href=\"http://www.rfc-editor.org/info/rfc7234\">http://www.rfc-editor.org/info/rfc7234</a>.\n\nCopyright Notice\n\n   Copyright (c) 2014 IETF Trust and the persons identified as the\n   document authors.  All rights reserved.\n\n   This document is subject to <a href=\"https://tools.ietf.org/html/bcp78\">BCP 78</a> and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n   (<a href=\"http://trustee.ietf.org/license-info\">http://trustee.ietf.org/license-info</a>) in effect on the date of\n   publication of this document.  Please review these documents\n   carefully, as they describe your rights and restrictions with respect\n   to this document.  Code Components extracted from this document must\n   include Simplified BSD License text as described in <a href=\"#section-4\">Section 4</a>.e of\n   the Trust Legal Provisions and are provided without warranty as\n   described in the Simplified BSD License.\n\n   This document may contain material from IETF Documents or IETF\n   Contributions published or made publicly available before November\n   10, 2008.  The person(s) controlling the copyright in some of this\n   material may not have granted the IETF Trust the right to allow\n   modifications of such material outside the IETF Standards Process.\n   Without obtaining an adequate license from the person(s) controlling\n   the copyright in such materials, this document may not be modified\n   outside the IETF Standards Process, and derivative works of it may\n   not be created outside the IETF Standards Process, except to format\n   it for publication as an RFC or to translate it into languages other\n   than English.\n\nTable of Contents\n\n   <a href=\"#section-1\">1</a>. Introduction \n      <a href=\"#section-1.1\">1.1</a>. Conformance and Error Handling \n      <a href=\"#section-1.2\">1.2</a>. Syntax Notation \n           <a href=\"#section-1.2.1\">1.2.1</a>. Delta Seconds \n   <a href=\"#section-2\">2</a>. Overview of Cache Operation \n   <a href=\"#section-3\">3</a>. Storing Responses in Caches \n      <a href=\"#section-3.1\">3.1</a>. Storing Incomplete Responses \n      <a href=\"#section-3.2\">3.2</a>. Storing Responses to Authenticated Requests \n      <a href=\"#section-3.3\">3.3</a>. Combining Partial Content \n   <a href=\"#section-4\">4</a>. Constructing Responses from Caches \n      <a href=\"#section-4.1\">4.1</a>. Calculating Secondary Keys with Vary \n      <a href=\"#section-4.2\">4.2</a>. Freshness \n           <a href=\"#section-4.2.1\">4.2.1</a>. Calculating Freshness Lifetime \n           <a href=\"#section-4.2.2\">4.2.2</a>. Calculating Heuristic Freshness \n           <a href=\"#section-4.2.3\">4.2.3</a>. Calculating Age \n           <a href=\"#section-4.2.4\">4.2.4</a>. Serving Stale Responses \n      <a href=\"#section-4.3\">4.3</a>. Validation \n           <a href=\"#section-4.3.1\">4.3.1</a>. Sending a Validation Request \n           <a href=\"#section-4.3.2\">4.3.2</a>. Handling a Received Validation Request \n\n           <a href=\"#section-4.3.3\">4.3.3</a>. Handling a Validation Response \n           <a href=\"#section-4.3.4\">4.3.4</a>. Freshening Stored Responses upon Validation \n           <a href=\"#section-4.3.5\">4.3.5</a>. Freshening Responses via HEAD \n      <a href=\"#section-4.4\">4.4</a>. Invalidation \n   <a href=\"#section-5\">5</a>. Header Field Definitions \n      <a href=\"#section-5.1\">5.1</a>. Age \n      <a href=\"#section-5.2\">5.2</a>. Cache-Control \n           <a href=\"#section-5.2.1\">5.2.1</a>. Request Cache-Control Directives \n           <a href=\"#section-5.2.2\">5.2.2</a>. Response Cache-Control Directives \n           <a href=\"#section-5.2.3\">5.2.3</a>. Cache Control Extensions \n      <a href=\"#section-5.3\">5.3</a>. Expires \n      <a href=\"#section-5.4\">5.4</a>. Pragma \n      <a href=\"#section-5.5\">5.5</a>. Warning \n           <a href=\"#section-5.5.1\">5.5.1</a>. Warning: 110 - \"Response is Stale\" \n           <a href=\"#section-5.5.2\">5.5.2</a>. Warning: 111 - \"Revalidation Failed\" \n           <a href=\"#section-5.5.3\">5.5.3</a>. Warning: 112 - \"Disconnected Operation\" \n           <a href=\"#section-5.5.4\">5.5.4</a>. Warning: 113 - \"Heuristic Expiration\" \n           <a href=\"#section-5.5.5\">5.5.5</a>. Warning: 199 - \"Miscellaneous Warning\" \n           <a href=\"#section-5.5.6\">5.5.6</a>. Warning: 214 - \"Transformation Applied\" \n           <a href=\"#section-5.5.7\">5.5.7</a>. Warning: 299 - \"Miscellaneous Persistent Warning\" \n   <a href=\"#section-6\">6</a>. History Lists \n   <a href=\"#section-7\">7</a>. IANA Considerations \n      <a href=\"#section-7.1\">7.1</a>. Cache Directive Registry \n           <a href=\"#section-7.1.1\">7.1.1</a>. Procedure \n           <a href=\"#section-7.1.2\">7.1.2</a>. Considerations for New Cache Control Directives \n           <a href=\"#section-7.1.3\">7.1.3</a>. Registrations \n      <a href=\"#section-7.2\">7.2</a>. Warn Code Registry \n           <a href=\"#section-7.2.1\">7.2.1</a>. Procedure \n           <a href=\"#section-7.2.2\">7.2.2</a>. Registrations \n      <a href=\"#section-7.3\">7.3</a>. Header Field Registration \n   <a href=\"#section-8\">8</a>. Security Considerations \n   <a href=\"#section-9\">9</a>. Acknowledgments \n   <a href=\"#section-10\">10</a>. References \n      <a href=\"#section-10.1\">10.1</a>. Normative References \n      <a href=\"#section-10.2\">10.2</a>. Informative References \n   <a href=\"#appendix-A\">Appendix A</a>. Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a> \n   <a href=\"#appendix-B\">Appendix B</a>. Imported ABNF \n   <a href=\"#appendix-C\">Appendix C</a>. Collected ABNF \n   Index \n\n<h2 class=\"h2\" id=\"section-1\">1.  Introduction</h2>\n   HTTP is typically used for distributed information systems, where\n   performance can be improved by the use of response caches.  This\n   document defines aspects of HTTP/1.1 related to caching and reusing\n   response messages.\n\n   An HTTP cache is a local store of response messages and the subsystem\n   that controls storage, retrieval, and deletion of messages in it.  A\n   cache stores cacheable responses in order to reduce the response time\n   and network bandwidth consumption on future, equivalent requests.\n   Any client or server MAY employ a cache, though a cache cannot be\n   used by a server that is acting as a tunnel.\n\n   A shared cache is a cache that stores responses to be reused by more\n   than one user; shared caches are usually (but not always) deployed as\n   a part of an intermediary.  A private cache, in contrast, is\n   dedicated to a single user; often, they are deployed as a component\n   of a user agent.\n\n   The goal of caching in HTTP/1.1 is to significantly improve\n   performance by reusing a prior response message to satisfy a current\n   request.  A stored response is considered \"fresh\", as defined in\n   <a href=\"#section-4.2\">Section 4.2</a>, if the response can be reused without \"validation\"\n   (checking with the origin server to see if the cached response\n   remains valid for this request).  A fresh response can therefore\n   reduce both latency and network overhead each time it is reused.\n   When a cached response is not fresh, it might still be reusable if it\n   can be freshened by validation (<a href=\"#section-4.3\">Section 4.3</a>) or if the origin is\n   unavailable (<a href=\"#section-4.2.4\">Section 4.2.4</a>).\n\n<h3 class=\"h3\" id=\"section-1.1\">1.1.  Conformance and Error Handling</h3>\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described in [<a href=\"https://tools.ietf.org/html/rfc2119\" title='\"Key words for use in RFCs to Indicate Requirement Levels\"'>RFC2119</a>].\n\n   Conformance criteria and considerations regarding error handling are\n   defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-2.5\">Section 2.5 of [RFC7230]</a>.\n\n<h3 class=\"h3\" id=\"section-1.2\">1.2.  Syntax Notation</h3>\n   This specification uses the Augmented Backus-Naur Form (ABNF)\n   notation of [<a href=\"https://tools.ietf.org/html/rfc5234\" title='\"Augmented BNF for Syntax Specifications: ABNF\"'>RFC5234</a>] with a list extension, defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-7\">Section 7 of\n   [RFC7230]</a>, that allows for compact definition of comma-separated\n   lists using a '#' operator (similar to how the '*' operator indicates\n\n   repetition).  <a href=\"#appendix-B\">Appendix B</a> describes rules imported from other\n   documents.  <a href=\"#appendix-C\">Appendix C</a> shows the collected grammar with all list\n   operators expanded to standard ABNF notation.\n\n<h4 class=\"h4\" id=\"section-1.2.1\">1.2.1.  Delta Seconds</h4>\n   The delta-seconds rule specifies a non-negative integer, representing\n   time in seconds.\n\n     delta-seconds  = 1*DIGIT\n\n   A recipient parsing a delta-seconds value and converting it to binary\n   form ought to use an arithmetic type of at least 31 bits of\n   non-negative integer range.  If a cache receives a delta-seconds\n   value greater than the greatest integer it can represent, or if any\n   of its subsequent calculations overflows, the cache MUST consider the\n   value to be either 2147483648 (2^31) or the greatest positive integer\n   it can conveniently represent.\n\n      Note: The value 2147483648 is here for historical reasons,\n      effectively represents infinity (over 68 years), and does not need\n      to be stored in binary form; an implementation could produce it as\n      a canned string if any overflow occurs, even if the calculations\n      are performed with an arithmetic type incapable of directly\n      representing that number.  What matters here is that an overflow\n      be detected and not treated as a negative value in later\n      calculations.\n\n<h2 class=\"h2\" id=\"section-2\">2.  Overview of Cache Operation</h2>\n   Proper cache operation preserves the semantics of HTTP transfers\n   ([<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>]) while eliminating the transfer of information already\n   held in the cache.  Although caching is an entirely OPTIONAL feature\n   of HTTP, it can be assumed that reusing a cached response is\n   desirable and that such reuse is the default behavior when no\n   requirement or local configuration prevents it.  Therefore, HTTP\n   cache requirements are focused on preventing a cache from either\n   storing a non-reusable response or reusing a stored response\n   inappropriately, rather than mandating that caches always store and\n   reuse particular responses.\n\n   Each cache entry consists of a cache key and one or more HTTP\n   responses corresponding to prior requests that used the same key.\n   The most common form of cache entry is a successful result of a\n   retrieval request: i.e., a 200 (OK) response to a GET request, which\n   contains a representation of the resource identified by the request\n   target (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\">Section 4.3.1 of [RFC7231]</a>).  However, it is also possible to\n   cache permanent redirects, negative results (e.g., 404 (Not Found)),\n\n   incomplete results (e.g., 206 (Partial Content)), and responses to\n   methods other than GET if the method's definition allows such caching\n   and defines something suitable for use as a cache key.\n\n   The primary cache key consists of the request method and target URI.\n   However, since HTTP caches in common use today are typically limited\n   to caching responses to GET, many caches simply decline other methods\n   and use only the URI as the primary cache key.\n\n   If a request target is subject to content negotiation, its cache\n   entry might consist of multiple stored responses, each differentiated\n   by a secondary key for the values of the original request's selecting\n   header fields (<a href=\"#section-4.1\">Section 4.1</a>).\n\n<h2 class=\"h2\" id=\"section-3\">3.  Storing Responses in Caches</h2>\n   A cache MUST NOT store a response to any request, unless:\n\n   o  The request method is understood by the cache and defined as being\n      cacheable, and\n\n   o  the response status code is understood by the cache, and\n\n   o  the \"no-store\" cache directive (see <a href=\"#section-5.2\">Section 5.2</a>) does not appear\n      in request or response header fields, and\n\n   o  the \"private\" response directive (see <a href=\"#section-5.2.2.6\">Section 5.2.2.6</a>) does not\n      appear in the response, if the cache is shared, and\n\n   o  the Authorization header field (see <a href=\"https://tools.ietf.org/html/rfc7235#section-4.2\">Section 4.2 of [RFC7235]</a>) does\n      not appear in the request, if the cache is shared, unless the\n      response explicitly allows it (see <a href=\"#section-3.2\">Section 3.2</a>), and\n\n   o  the response either:\n\n      *  contains an Expires header field (see <a href=\"#section-5.3\">Section 5.3</a>), or\n\n      *  contains a max-age response directive (see <a href=\"#section-5.2.2.8\">Section 5.2.2.8</a>), or\n\n      *  contains a s-maxage response directive (see <a href=\"#section-5.2.2.9\">Section 5.2.2.9</a>)\n         and the cache is shared, or\n\n      *  contains a Cache Control Extension (see <a href=\"#section-5.2.3\">Section 5.2.3</a>) that\n         allows it to be cached, or\n\n      *  has a status code that is defined as cacheable by default (see\n         <a href=\"#section-4.2.2\">Section 4.2.2</a>), or\n\n      *  contains a public response directive (see <a href=\"#section-5.2.2.5\">Section 5.2.2.5</a>).\n\n   Note that any of the requirements listed above can be overridden by a\n   cache-control extension; see <a href=\"#section-5.2.3\">Section 5.2.3</a>.\n\n   In this context, a cache has \"understood\" a request method or a\n   response status code if it recognizes it and implements all specified\n   caching-related behavior.\n\n   Note that, in normal operation, some caches will not store a response\n   that has neither a cache validator nor an explicit expiration time,\n   as such responses are not usually useful to store.  However, caches\n   are not prohibited from storing such responses.\n\n<h3 class=\"h3\" id=\"section-3.1\">3.1.  Storing Incomplete Responses</h3>\n   A response message is considered complete when all of the octets\n   indicated by the message framing ([<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>]) are received prior to\n   the connection being closed.  If the request method is GET, the\n   response status code is 200 (OK), and the entire response header\n   section has been received, a cache MAY store an incomplete response\n   message body if the cache entry is recorded as incomplete.  Likewise,\n   a 206 (Partial Content) response MAY be stored as if it were an\n   incomplete 200 (OK) cache entry.  However, a cache MUST NOT store\n   incomplete or partial-content responses if it does not support the\n   Range and Content-Range header fields or if it does not understand\n   the range units used in those fields.\n\n   A cache MAY complete a stored incomplete response by making a\n   subsequent range request ([<a href=\"https://tools.ietf.org/html/rfc7233\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\"'>RFC7233</a>]) and combining the successful\n   response with the stored entry, as defined in <a href=\"#section-3.3\">Section 3.3</a>.  A cache\n   MUST NOT use an incomplete response to answer requests unless the\n   response has been made complete or the request is partial and\n   specifies a range that is wholly within the incomplete response.  A\n   cache MUST NOT send a partial response to a client without explicitly\n   marking it as such using the 206 (Partial Content) status code.\n\n<h3 class=\"h3\" id=\"section-3.2\">3.2.  Storing Responses to Authenticated Requests</h3>\n   A shared cache MUST NOT use a cached response to a request with an\n   Authorization header field (<a href=\"https://tools.ietf.org/html/rfc7235#section-4.2\">Section 4.2 of [RFC7235]</a>) to satisfy any\n   subsequent request unless a cache directive that allows such\n   responses to be stored is present in the response.\n\n   In this specification, the following Cache-Control response\n   directives (<a href=\"#section-5.2.2\">Section 5.2.2</a>) have such an effect: must-revalidate,\n   public, and s-maxage.\n\n   Note that cached responses that contain the \"must-revalidate\" and/or\n   \"s-maxage\" response directives are not allowed to be served stale\n   (<a href=\"#section-4.2.4\">Section 4.2.4</a>) by shared caches.  In particular, a response with\n   either \"max-age=0, must-revalidate\" or \"s-maxage=0\" cannot be used to\n   satisfy a subsequent request without revalidating it on the origin\n   server.\n\n<h3 class=\"h3\" id=\"section-3.3\">3.3.  Combining Partial Content</h3>\n   A response might transfer only a partial representation if the\n   connection closed prematurely or if the request used one or more\n   Range specifiers ([<a href=\"https://tools.ietf.org/html/rfc7233\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\"'>RFC7233</a>]).  After several such transfers, a cache\n   might have received several ranges of the same representation.  A\n   cache MAY combine these ranges into a single stored response, and\n   reuse that response to satisfy later requests, if they all share the\n   same strong validator and the cache complies with the client\n   requirements in <a href=\"https://tools.ietf.org/html/rfc7233#section-4.3\">Section 4.3 of [RFC7233]</a>.\n\n   When combining the new response with one or more stored responses, a\n   cache MUST:\n\n   o  delete any Warning header fields in the stored response with\n      warn-code 1xx (see <a href=\"#section-5.5\">Section 5.5</a>);\n\n   o  retain any Warning header fields in the stored response with\n      warn-code 2xx; and,\n\n   o  use other header fields provided in the new response, aside from\n      Content-Range, to replace all instances of the corresponding\n      header fields in the stored response.\n\n<h2 class=\"h2\" id=\"section-4\">4.  Constructing Responses from Caches</h2>\n   When presented with a request, a cache MUST NOT reuse a stored\n   response, unless:\n\n   o  The presented effective request URI (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">Section 5.5 of [RFC7230]</a>) and\n      that of the stored response match, and\n\n   o  the request method associated with the stored response allows it\n      to be used for the presented request, and\n\n   o  selecting header fields nominated by the stored response (if any)\n      match those presented (see <a href=\"#section-4.1\">Section 4.1</a>), and\n\n   o  the presented request does not contain the no-cache pragma\n      (<a href=\"#section-5.4\">Section 5.4</a>), nor the no-cache cache directive (<a href=\"#section-5.2.1\">Section 5.2.1</a>),\n      unless the stored response is successfully validated\n      (<a href=\"#section-4.3\">Section 4.3</a>), and\n\n   o  the stored response does not contain the no-cache cache directive\n      (<a href=\"#section-5.2.2.2\">Section 5.2.2.2</a>), unless it is successfully validated\n      (<a href=\"#section-4.3\">Section 4.3</a>), and\n\n   o  the stored response is either:\n\n      *  fresh (see <a href=\"#section-4.2\">Section 4.2</a>), or\n\n      *  allowed to be served stale (see <a href=\"#section-4.2.4\">Section 4.2.4</a>), or\n\n      *  successfully validated (see <a href=\"#section-4.3\">Section 4.3</a>).\n\n   Note that any of the requirements listed above can be overridden by a\n   cache-control extension; see <a href=\"#section-5.2.3\">Section 5.2.3</a>.\n\n   When a stored response is used to satisfy a request without\n   validation, a cache MUST generate an Age header field (<a href=\"#section-5.1\">Section 5.1</a>),\n   replacing any present in the response with a value equal to the\n   stored response's current_age; see <a href=\"#section-4.2.3\">Section 4.2.3</a>.\n\n   A cache MUST write through requests with methods that are unsafe\n   (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.2.1\">Section 4.2.1 of [RFC7231]</a>) to the origin server; i.e., a cache is\n   not allowed to generate a reply to such a request before having\n   forwarded the request and having received a corresponding response.\n\n   Also, note that unsafe requests might invalidate already-stored\n   responses; see <a href=\"#section-4.4\">Section 4.4</a>.\n\n   When more than one suitable response is stored, a cache MUST use the\n   most recent response (as determined by the Date header field).  It\n   can also forward the request with \"Cache-Control: max-age=0\" or\n   \"Cache-Control: no-cache\" to disambiguate which response to use.\n\n   A cache that does not have a clock available MUST NOT use stored\n   responses without revalidating them upon every use.\n\n<h3 class=\"h3\" id=\"section-4.1\">4.1.  Calculating Secondary Keys with Vary</h3>\n   When a cache receives a request that can be satisfied by a stored\n   response that has a Vary header field (<a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.4\">Section 7.1.4 of [RFC7231]</a>),\n   it MUST NOT use that response unless all of the selecting header\n\n   fields nominated by the Vary header field match in both the original\n   request (i.e., that associated with the stored response), and the\n   presented request.\n\n   The selecting header fields from two requests are defined to match if\n   and only if those in the first request can be transformed to those in\n   the second request by applying any of the following:\n\n   o  adding or removing whitespace, where allowed in the header field's\n      syntax\n\n   o  combining multiple header fields with the same field name (see\n      <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">Section 3.2 of [RFC7230]</a>)\n\n   o  normalizing both header field values in a way that is known to\n      have identical semantics, according to the header field's\n      specification (e.g., reordering field values when order is not\n      significant; case-normalization, where values are defined to be\n      case-insensitive)\n\n   If (after any normalization that might take place) a header field is\n   absent from a request, it can only match another request if it is\n   also absent there.\n\n   A Vary header field-value of \"*\" always fails to match.\n\n   The stored response with matching selecting header fields is known as\n   the selected response.\n\n   If multiple selected responses are available (potentially including\n   responses without a Vary header field), the cache will need to choose\n   one to use.  When a selecting header field has a known mechanism for\n   doing so (e.g., qvalues on Accept and similar request header fields),\n   that mechanism MAY be used to select preferred responses; of the\n   remainder, the most recent response (as determined by the Date header\n   field) is used, as per <a href=\"#section-4\">Section 4</a>.\n\n   If no selected response is available, the cache cannot satisfy the\n   presented request.  Typically, it is forwarded to the origin server\n   in a (possibly conditional; see <a href=\"#section-4.3\">Section 4.3</a>) request.\n\n<h3 class=\"h3\" id=\"section-4.2\">4.2.  Freshness</h3>\n   A fresh response is one whose age has not yet exceeded its freshness\n   lifetime.  Conversely, a stale response is one where it has.\n\n   A response's freshness lifetime is the length of time between its\n   generation by the origin server and its expiration time.  An explicit\n   expiration time is the time at which the origin server intends that a\n   stored response can no longer be used by a cache without further\n   validation, whereas a heuristic expiration time is assigned by a\n   cache when no explicit expiration time is available.\n\n   A response's age is the time that has passed since it was generated\n   by, or successfully validated with, the origin server.\n\n   When a response is \"fresh\" in the cache, it can be used to satisfy\n   subsequent requests without contacting the origin server, thereby\n   improving efficiency.\n\n   The primary mechanism for determining freshness is for an origin\n   server to provide an explicit expiration time in the future, using\n   either the Expires header field (<a href=\"#section-5.3\">Section 5.3</a>) or the max-age response\n   directive (<a href=\"#section-5.2.2.8\">Section 5.2.2.8</a>).  Generally, origin servers will assign\n   future explicit expiration times to responses in the belief that the\n   representation is not likely to change in a semantically significant\n   way before the expiration time is reached.\n\n   If an origin server wishes to force a cache to validate every\n   request, it can assign an explicit expiration time in the past to\n   indicate that the response is already stale.  Compliant caches will\n   normally validate a stale cached response before reusing it for\n   subsequent requests (see <a href=\"#section-4.2.4\">Section 4.2.4</a>).\n\n   Since origin servers do not always provide explicit expiration times,\n   caches are also allowed to use a heuristic to determine an expiration\n   time under certain circumstances (see <a href=\"#section-4.2.2\">Section 4.2.2</a>).\n\n   The calculation to determine if a response is fresh is:\n\n      response_is_fresh = (freshness_lifetime &gt; current_age)\n\n   freshness_lifetime is defined in <a href=\"#section-4.2.1\">Section 4.2.1</a>; current_age is\n   defined in <a href=\"#section-4.2.3\">Section 4.2.3</a>.\n\n   Clients can send the max-age or min-fresh cache directives in a\n   request to constrain or relax freshness calculations for the\n   corresponding response (<a href=\"#section-5.2.1\">Section 5.2.1</a>).\n\n   When calculating freshness, to avoid common problems in date parsing:\n\n   o  Although all date formats are specified to be case-sensitive, a\n      cache recipient SHOULD match day, week, and time-zone names\n      case-insensitively.\n\n   o  If a cache recipient's internal implementation of time has less\n      resolution than the value of an HTTP-date, the recipient MUST\n      internally represent a parsed Expires date as the nearest time\n      equal to or earlier than the received value.\n\n   o  A cache recipient MUST NOT allow local time zones to influence the\n      calculation or comparison of an age or expiration time.\n\n   o  A cache recipient SHOULD consider a date with a zone abbreviation\n      other than GMT or UTC to be invalid for calculating expiration.\n\n   Note that freshness applies only to cache operation; it cannot be\n   used to force a user agent to refresh its display or reload a\n   resource.  See <a href=\"#section-6\">Section 6</a> for an explanation of the difference between\n   caches and history mechanisms.\n\n<h4 class=\"h4\" id=\"section-4.2.1\">4.2.1.  Calculating Freshness Lifetime</h4>\n   A cache can calculate the freshness lifetime (denoted as\n   freshness_lifetime) of a response by using the first match of the\n   following:\n\n   o  If the cache is shared and the s-maxage response directive\n      (<a href=\"#section-5.2.2.9\">Section 5.2.2.9</a>) is present, use its value, or\n\n   o  If the max-age response directive (<a href=\"#section-5.2.2.8\">Section 5.2.2.8</a>) is present,\n      use its value, or\n\n   o  If the Expires response header field (<a href=\"#section-5.3\">Section 5.3</a>) is present, use\n      its value minus the value of the Date response header field, or\n\n   o  Otherwise, no explicit expiration time is present in the response.\n      A heuristic freshness lifetime might be applicable; see\n      <a href=\"#section-4.2.2\">Section 4.2.2</a>.\n\n   Note that this calculation is not vulnerable to clock skew, since all\n   of the information comes from the origin server.\n\n   When there is more than one value present for a given directive\n   (e.g., two Expires header fields, multiple Cache-Control: max-age\n   directives), the directive's value is considered invalid.  Caches are\n   encouraged to consider responses that have invalid freshness\n   information to be stale.\n\n<h4 class=\"h4\" id=\"section-4.2.2\">4.2.2.  Calculating Heuristic Freshness</h4>\n   Since origin servers do not always provide explicit expiration times,\n   a cache MAY assign a heuristic expiration time when an explicit time\n   is not specified, employing algorithms that use other header field\n   values (such as the Last-Modified time) to estimate a plausible\n   expiration time.  This specification does not provide specific\n   algorithms, but does impose worst-case constraints on their results.\n\n   A cache MUST NOT use heuristics to determine freshness when an\n   explicit expiration time is present in the stored response.  Because\n   of the requirements in <a href=\"#section-3\">Section 3</a>, this means that, effectively,\n   heuristics can only be used on responses without explicit freshness\n   whose status codes are defined as cacheable by default (see <a href=\"#section-6.1\">Section</a>\n   <a href=\"#section-6.1\">6.1</a> of [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>]), and those responses without explicit freshness\n   that have been marked as explicitly cacheable (e.g., with a \"public\"\n   response directive).\n\n   If the response has a Last-Modified header field (<a href=\"https://tools.ietf.org/html/rfc7232#section-2.2\">Section 2.2 of\n   [RFC7232]</a>), caches are encouraged to use a heuristic expiration value\n   that is no more than some fraction of the interval since that time.\n   A typical setting of this fraction might be 10%.\n\n   When a heuristic is used to calculate freshness lifetime, a cache\n   SHOULD generate a Warning header field with a 113 warn-code (see\n   <a href=\"#section-5.5.4\">Section 5.5.4</a>) in the response if its current_age is more than 24\n   hours and such a warning is not already present.\n\n      Note: <a href=\"https://tools.ietf.org/html/rfc2616#section-13.9\">Section 13.9 of [RFC2616]</a> prohibited caches from calculating\n      heuristic freshness for URIs with query components (i.e., those\n      containing '?').  In practice, this has not been widely\n      implemented.  Therefore, origin servers are encouraged to send\n      explicit directives (e.g., Cache-Control: no-cache) if they wish\n      to preclude caching.\n\n<h4 class=\"h4\" id=\"section-4.2.3\">4.2.3.  Calculating Age</h4>\n   The Age header field is used to convey an estimated age of the\n   response message when obtained from a cache.  The Age field value is\n   the cache's estimate of the number of seconds since the response was\n   generated or validated by the origin server.  In essence, the Age\n\n   value is the sum of the time that the response has been resident in\n   each of the caches along the path from the origin server, plus the\n   amount of time it has been in transit along network paths.\n\n   The following data is used for the age calculation:\n\n   age_value\n\n      The term \"age_value\" denotes the value of the Age header field\n      (<a href=\"#section-5.1\">Section 5.1</a>), in a form appropriate for arithmetic operation; or\n      0, if not available.\n\n   date_value\n\n      The term \"date_value\" denotes the value of the Date header field,\n      in a form appropriate for arithmetic operations.  See <a href=\"#section-7.1.1.2\">Section</a>\n      <a href=\"#section-7.1.1.2\">7.1.1.2</a> of [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>] for the definition of the Date header field,\n      and for requirements regarding responses without it.\n\n   now\n\n      The term \"now\" means \"the current value of the clock at the host\n      performing the calculation\".  A host ought to use NTP ([<a href=\"https://tools.ietf.org/html/rfc5905\" title='\"Network Time Protocol Version 4: Protocol and Algorithms Specification\"'>RFC5905</a>])\n      or some similar protocol to synchronize its clocks to Coordinated\n      Universal Time.\n\n   request_time\n\n      The current value of the clock at the host at the time the request\n      resulting in the stored response was made.\n\n   response_time\n\n      The current value of the clock at the host at the time the\n      response was received.\n\n   A response's age can be calculated in two entirely independent ways:\n\n   1.  the \"apparent_age\": response_time minus date_value, if the local\n       clock is reasonably well synchronized to the origin server's\n       clock.  If the result is negative, the result is replaced by\n       zero.\n\n   2.  the \"corrected_age_value\", if all of the caches along the\n       response path implement HTTP/1.1.  A cache MUST interpret this\n       value relative to the time the request was initiated, not the\n       time that the response was received.\n\n     apparent_age = max(0, response_time - date_value);\n\n     response_delay = response_time - request_time;\n     corrected_age_value = age_value + response_delay;\n\n   These are combined as\n\n     corrected_initial_age = max(apparent_age, corrected_age_value);\n\n   unless the cache is confident in the value of the Age header field\n   (e.g., because there are no HTTP/1.0 hops in the Via header field),\n   in which case the corrected_age_value MAY be used as the\n   corrected_initial_age.\n\n   The current_age of a stored response can then be calculated by adding\n   the amount of time (in seconds) since the stored response was last\n   validated by the origin server to the corrected_initial_age.\n\n     resident_time = now - response_time;\n     current_age = corrected_initial_age + resident_time;\n\n<h4 class=\"h4\" id=\"section-4.2.4\">4.2.4.  Serving Stale Responses</h4>\n   A \"stale\" response is one that either has explicit expiry information\n   or is allowed to have heuristic expiry calculated, but is not fresh\n   according to the calculations in <a href=\"#section-4.2\">Section 4.2</a>.\n\n   A cache MUST NOT generate a stale response if it is prohibited by an\n   explicit in-protocol directive (e.g., by a \"no-store\" or \"no-cache\"\n   cache directive, a \"must-revalidate\" cache-response-directive, or an\n   applicable \"s-maxage\" or \"proxy-revalidate\" cache-response-directive;\n   see <a href=\"#section-5.2.2\">Section 5.2.2</a>).\n\n   A cache MUST NOT send stale responses unless it is disconnected\n   (i.e., it cannot contact the origin server or otherwise find a\n   forward path) or doing so is explicitly allowed (e.g., by the\n   max-stale request directive; see <a href=\"#section-5.2.1\">Section 5.2.1</a>).\n\n   A cache SHOULD generate a Warning header field with the 110 warn-code\n   (see <a href=\"#section-5.5.1\">Section 5.5.1</a>) in stale responses.  Likewise, a cache SHOULD\n   generate a 112 warn-code (see <a href=\"#section-5.5.3\">Section 5.5.3</a>) in stale responses if\n   the cache is disconnected.\n\n   A cache SHOULD NOT generate a new Warning header field when\n   forwarding a response that does not have an Age header field, even if\n   the response is already stale.  A cache need not validate a response\n   that merely became stale in transit.\n\n<h3 class=\"h3\" id=\"section-4.3\">4.3.  Validation</h3>\n   When a cache has one or more stored responses for a requested URI,\n   but cannot serve any of them (e.g., because they are not fresh, or\n   one cannot be selected; see <a href=\"#section-4.1\">Section 4.1</a>), it can use the conditional\n   request mechanism [<a href=\"https://tools.ietf.org/html/rfc7232\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\"'>RFC7232</a>] in the forwarded request to give the next\n   inbound server an opportunity to select a valid stored response to\n   use, updating the stored metadata in the process, or to replace the\n   stored response(s) with a new response.  This process is known as\n   \"validating\" or \"revalidating\" the stored response.\n\n<h4 class=\"h4\" id=\"section-4.3.1\">4.3.1.  Sending a Validation Request</h4>\n   When sending a conditional request for cache validation, a cache\n   sends one or more precondition header fields containing validator\n   metadata from its stored response(s), which is then compared by\n   recipients to determine whether a stored response is equivalent to a\n   current representation of the resource.\n\n   One such validator is the timestamp given in a Last-Modified header\n   field (<a href=\"https://tools.ietf.org/html/rfc7232#section-2.2\">Section 2.2 of [RFC7232]</a>), which can be used in an\n   If-Modified-Since header field for response validation, or in an\n   If-Unmodified-Since or If-Range header field for representation\n   selection (i.e., the client is referring specifically to a previously\n   obtained representation with that timestamp).\n\n   Another validator is the entity-tag given in an ETag header field\n   (<a href=\"https://tools.ietf.org/html/rfc7232#section-2.3\">Section 2.3 of [RFC7232]</a>).  One or more entity-tags, indicating one\n   or more stored responses, can be used in an If-None-Match header\n   field for response validation, or in an If-Match or If-Range header\n   field for representation selection (i.e., the client is referring\n   specifically to one or more previously obtained representations with\n   the listed entity-tags).\n\n<h4 class=\"h4\" id=\"section-4.3.2\">4.3.2.  Handling a Received Validation Request</h4>\n   Each client in the request chain may have its own cache, so it is\n   common for a cache at an intermediary to receive conditional requests\n   from other (outbound) caches.  Likewise, some user agents make use of\n   conditional requests to limit data transfers to recently modified\n   representations or to complete the transfer of a partially retrieved\n   representation.\n\n   If a cache receives a request that can be satisfied by reusing one of\n   its stored 200 (OK) or 206 (Partial Content) responses, the cache\n   SHOULD evaluate any applicable conditional header field preconditions\n   received in that request with respect to the corresponding validators\n   contained within the selected response.  A cache MUST NOT evaluate\n\n   conditional header fields that are only applicable to an origin\n   server, found in a request with semantics that cannot be satisfied\n   with a cached response, or applied to a target resource for which it\n   has no stored responses; such preconditions are likely intended for\n   some other (inbound) server.\n\n   The proper evaluation of conditional requests by a cache depends on\n   the received precondition header fields and their precedence, as\n   defined in <a href=\"https://tools.ietf.org/html/rfc7232#section-6\">Section 6 of [RFC7232]</a>.  The If-Match and\n   If-Unmodified-Since conditional header fields are not applicable to a\n   cache.\n\n   A request containing an If-None-Match header field (<a href=\"https://tools.ietf.org/html/rfc7232#section-3.2\">Section 3.2 of\n   [RFC7232]</a>) indicates that the client wants to validate one or more of\n   its own stored responses in comparison to whichever stored response\n   is selected by the cache.  If the field-value is \"*\", or if the\n   field-value is a list of entity-tags and at least one of them matches\n   the entity-tag of the selected stored response, a cache recipient\n   SHOULD generate a 304 (Not Modified) response (using the metadata of\n   the selected stored response) instead of sending that stored\n   response.\n\n   When a cache decides to revalidate its own stored responses for a\n   request that contains an If-None-Match list of entity-tags, the cache\n   MAY combine the received list with a list of entity-tags from its own\n   stored set of responses (fresh or stale) and send the union of the\n   two lists as a replacement If-None-Match header field value in the\n   forwarded request.  If a stored response contains only partial\n   content, the cache MUST NOT include its entity-tag in the union\n   unless the request is for a range that would be fully satisfied by\n   that partial stored response.  If the response to the forwarded\n   request is 304 (Not Modified) and has an ETag header field value with\n   an entity-tag that is not in the client's list, the cache MUST\n   generate a 200 (OK) response for the client by reusing its\n   corresponding stored response, as updated by the 304 response\n   metadata (<a href=\"#section-4.3.4\">Section 4.3.4</a>).\n\n   If an If-None-Match header field is not present, a request containing\n   an If-Modified-Since header field (<a href=\"https://tools.ietf.org/html/rfc7232#section-3.3\">Section 3.3 of [RFC7232]</a>)\n   indicates that the client wants to validate one or more of its own\n   stored responses by modification date.  A cache recipient SHOULD\n   generate a 304 (Not Modified) response (using the metadata of the\n   selected stored response) if one of the following cases is true: 1)\n   the selected stored response has a Last-Modified field-value that is\n   earlier than or equal to the conditional timestamp; 2) no\n   Last-Modified field is present in the selected stored response, but\n   it has a Date field-value that is earlier than or equal to the\n   conditional timestamp; or, 3) neither Last-Modified nor Date is\n\n   present in the selected stored response, but the cache recorded it as\n   having been received at a time earlier than or equal to the\n   conditional timestamp.\n\n   A cache that implements partial responses to range requests, as\n   defined in [<a href=\"https://tools.ietf.org/html/rfc7233\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\"'>RFC7233</a>], also needs to evaluate a received If-Range\n   header field (<a href=\"https://tools.ietf.org/html/rfc7233#section-3.2\">Section 3.2 of [RFC7233]</a>) with respect to its selected\n   stored response.\n\n<h4 class=\"h4\" id=\"section-4.3.3\">4.3.3.  Handling a Validation Response</h4>\n   Cache handling of a response to a conditional request is dependent\n   upon its status code:\n\n   o  A 304 (Not Modified) response status code indicates that the\n      stored response can be updated and reused; see <a href=\"#section-4.3.4\">Section 4.3.4</a>.\n\n   o  A full response (i.e., one with a payload body) indicates that\n      none of the stored responses nominated in the conditional request\n      is suitable.  Instead, the cache MUST use the full response to\n      satisfy the request and MAY replace the stored response(s).\n\n   o  However, if a cache receives a 5xx (Server Error) response while\n      attempting to validate a response, it can either forward this\n      response to the requesting client, or act as if the server failed\n      to respond.  In the latter case, the cache MAY send a previously\n      stored response (see <a href=\"#section-4.2.4\">Section 4.2.4</a>).\n\n<h4 class=\"h4\" id=\"section-4.3.4\">4.3.4.  Freshening Stored Responses upon Validation</h4>\n   When a cache receives a 304 (Not Modified) response and already has\n   one or more stored 200 (OK) responses for the same cache key, the\n   cache needs to identify which of the stored responses are updated by\n   this new response and then update the stored response(s) with the new\n   information provided in the 304 response.\n\n   The stored response to update is identified by using the first match\n   (if any) of the following:\n\n   o  If the new response contains a strong validator (see <a href=\"https://tools.ietf.org/html/rfc7232#section-2.1\">Section 2.1\n      of [RFC7232]</a>), then that strong validator identifies the selected\n      representation for update.  All of the stored responses with the\n      same strong validator are selected.  If none of the stored\n      responses contain the same strong validator, then the cache MUST\n      NOT use the new response to update any stored responses.\n\n   o  If the new response contains a weak validator and that validator\n      corresponds to one of the cache's stored responses, then the most\n      recent of those matching stored responses is selected for update.\n\n   o  If the new response does not include any form of validator (such\n      as in the case where a client generates an If-Modified-Since\n      request from a source other than the Last-Modified response header\n      field), and there is only one stored response, and that stored\n      response also lacks a validator, then that stored response is\n      selected for update.\n\n   If a stored response is selected for update, the cache MUST:\n\n   o  delete any Warning header fields in the stored response with\n      warn-code 1xx (see <a href=\"#section-5.5\">Section 5.5</a>);\n\n   o  retain any Warning header fields in the stored response with\n      warn-code 2xx; and,\n\n   o  use other header fields provided in the 304 (Not Modified)\n      response to replace all instances of the corresponding header\n      fields in the stored response.\n\n<h4 class=\"h4\" id=\"section-4.3.5\">4.3.5.  Freshening Responses via HEAD</h4>\n   A response to the HEAD method is identical to what an equivalent\n   request made with a GET would have been, except it lacks a body.\n   This property of HEAD responses can be used to invalidate or update a\n   cached GET response if the more efficient conditional GET request\n   mechanism is not available (due to no validators being present in the\n   stored response) or if transmission of the representation body is not\n   desired even if it has changed.\n\n   When a cache makes an inbound HEAD request for a given request target\n   and receives a 200 (OK) response, the cache SHOULD update or\n   invalidate each of its stored GET responses that could have been\n   selected for that request (see <a href=\"#section-4.1\">Section 4.1</a>).\n\n   For each of the stored responses that could have been selected, if\n   the stored response and HEAD response have matching values for any\n   received validator fields (ETag and Last-Modified) and, if the HEAD\n   response has a Content-Length header field, the value of\n   Content-Length matches that of the stored response, the cache SHOULD\n   update the stored response as described below; otherwise, the cache\n   SHOULD consider the stored response to be stale.\n\n   If a cache updates a stored response with the metadata provided in a\n   HEAD response, the cache MUST:\n\n   o  delete any Warning header fields in the stored response with\n      warn-code 1xx (see <a href=\"#section-5.5\">Section 5.5</a>);\n\n   o  retain any Warning header fields in the stored response with\n      warn-code 2xx; and,\n\n   o  use other header fields provided in the HEAD response to replace\n      all instances of the corresponding header fields in the stored\n      response and append new header fields to the stored response's\n      header section unless otherwise restricted by the Cache-Control\n      header field.\n\n<h3 class=\"h3\" id=\"section-4.4\">4.4.  Invalidation</h3>\n   Because unsafe request methods (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.2.1\">Section 4.2.1 of [RFC7231]</a>) such as\n   PUT, POST or DELETE have the potential for changing state on the\n   origin server, intervening caches can use them to keep their contents\n   up to date.\n\n   A cache MUST invalidate the effective Request URI (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">Section 5.5 of\n   [RFC7230]</a>) as well as the URI(s) in the Location and Content-Location\n   response header fields (if present) when a non-error status code is\n   received in response to an unsafe request method.\n\n   However, a cache MUST NOT invalidate a URI from a Location or\n   Content-Location response header field if the host part of that URI\n   differs from the host part in the effective request URI (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">Section 5.5\n   of [RFC7230]</a>).  This helps prevent denial-of-service attacks.\n\n   A cache MUST invalidate the effective request URI (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">Section 5.5 of\n   [RFC7230]</a>) when it receives a non-error response to a request with a\n   method whose safety is unknown.\n\n   Here, a \"non-error response\" is one with a 2xx (Successful) or 3xx\n   (Redirection) status code.  \"Invalidate\" means that the cache will\n   either remove all stored responses related to the effective request\n   URI or will mark these as \"invalid\" and in need of a mandatory\n   validation before they can be sent in response to a subsequent\n   request.\n\n   Note that this does not guarantee that all appropriate responses are\n   invalidated.  For example, a state-changing request might invalidate\n   responses in the caches it travels through, but relevant responses\n   still might be stored in other caches that it has not.\n\n<h2 class=\"h2\" id=\"section-5\">5.  Header Field Definitions</h2>\n   This section defines the syntax and semantics of HTTP/1.1 header\n   fields related to caching.\n\n<h3 class=\"h3\" id=\"section-5.1\">5.1.  Age</h3>\n   The \"Age\" header field conveys the sender's estimate of the amount of\n   time since the response was generated or successfully validated at\n   the origin server.  Age values are calculated as specified in\n   <a href=\"#section-4.2.3\">Section 4.2.3</a>.\n\n     Age = delta-seconds\n\n   The Age field-value is a non-negative integer, representing time in\n   seconds (see <a href=\"#section-1.2.1\">Section 1.2.1</a>).\n\n   The presence of an Age header field implies that the response was not\n   generated or validated by the origin server for this request.\n   However, lack of an Age header field does not imply the origin was\n   contacted, since the response might have been received from an\n   HTTP/1.0 cache that does not implement Age.\n\n<h3 class=\"h3\" id=\"section-5.2\">5.2.  Cache-Control</h3>\n   The \"Cache-Control\" header field is used to specify directives for\n   caches along the request/response chain.  Such cache directives are\n   unidirectional in that the presence of a directive in a request does\n   not imply that the same directive is to be given in the response.\n\n   A cache MUST obey the requirements of the Cache-Control directives\n   defined in this section.  See <a href=\"#section-5.2.3\">Section 5.2.3</a> for information about how\n   Cache-Control directives defined elsewhere are handled.\n\n      Note: Some HTTP/1.0 caches might not implement Cache-Control.\n\n   A proxy, whether or not it implements a cache, MUST pass cache\n   directives through in forwarded messages, regardless of their\n   significance to that application, since the directives might be\n   applicable to all recipients along the request/response chain.  It is\n   not possible to target a directive to a specific cache.\n\n   Cache directives are identified by a token, to be compared\n   case-insensitively, and have an optional argument, that can use both\n   token and quoted-string syntax.  For the directives defined below\n   that define arguments, recipients ought to accept both forms, even if\n   one is documented to be preferred.  For any directive not defined by\n   this specification, a recipient MUST accept both forms.\n\n     Cache-Control   = 1#cache-directive\n\n     cache-directive = token [ \"=\" ( token / quoted-string ) ]\n\n   For the cache directives defined below, no argument is defined (nor\n   allowed) unless stated otherwise.\n\n<h4 class=\"h4\" id=\"section-5.2.1\">5.2.1.  Request Cache-Control Directives</h4>\n<h5 class=\"h5\" id=\"section-5.2.1.1\">5.2.1.1.  max-age</h5>\n   Argument syntax:\n\n      delta-seconds (see <a href=\"#section-1.2.1\">Section 1.2.1</a>)\n\n   The \"max-age\" request directive indicates that the client is\n   unwilling to accept a response whose age is greater than the\n   specified number of seconds.  Unless the max-stale request directive\n   is also present, the client is not willing to accept a stale\n   response.\n\n   This directive uses the token form of the argument syntax: e.g.,\n   'max-age=5' not 'max-age=\"5\"'.  A sender SHOULD NOT generate the\n   quoted-string form.\n\n<h5 class=\"h5\" id=\"section-5.2.1.2\">5.2.1.2.  max-stale</h5>\n   Argument syntax:\n\n      delta-seconds (see <a href=\"#section-1.2.1\">Section 1.2.1</a>)\n\n   The \"max-stale\" request directive indicates that the client is\n   willing to accept a response that has exceeded its freshness\n   lifetime.  If max-stale is assigned a value, then the client is\n   willing to accept a response that has exceeded its freshness lifetime\n   by no more than the specified number of seconds.  If no value is\n   assigned to max-stale, then the client is willing to accept a stale\n   response of any age.\n\n   This directive uses the token form of the argument syntax: e.g.,\n   'max-stale=10' not 'max-stale=\"10\"'.  A sender SHOULD NOT generate\n   the quoted-string form.\n\n<h5 class=\"h5\" id=\"section-5.2.1.3\">5.2.1.3.  min-fresh</h5>\n   Argument syntax:\n\n      delta-seconds (see <a href=\"#section-1.2.1\">Section 1.2.1</a>)\n\n   The \"min-fresh\" request directive indicates that the client is\n   willing to accept a response whose freshness lifetime is no less than\n   its current age plus the specified time in seconds.  That is, the\n   client wants a response that will still be fresh for at least the\n   specified number of seconds.\n\n   This directive uses the token form of the argument syntax: e.g.,\n   'min-fresh=20' not 'min-fresh=\"20\"'.  A sender SHOULD NOT generate\n   the quoted-string form.\n\n<h5 class=\"h5\" id=\"section-5.2.1.4\">5.2.1.4.  no-cache</h5>\n   The \"no-cache\" request directive indicates that a cache MUST NOT use\n   a stored response to satisfy the request without successful\n   validation on the origin server.\n\n<h5 class=\"h5\" id=\"section-5.2.1.5\">5.2.1.5.  no-store</h5>\n   The \"no-store\" request directive indicates that a cache MUST NOT\n   store any part of either this request or any response to it.  This\n   directive applies to both private and shared caches.  \"MUST NOT\n   store\" in this context means that the cache MUST NOT intentionally\n   store the information in non-volatile storage, and MUST make a\n   best-effort attempt to remove the information from volatile storage\n   as promptly as possible after forwarding it.\n\n   This directive is NOT a reliable or sufficient mechanism for ensuring\n   privacy.  In particular, malicious or compromised caches might not\n   recognize or obey this directive, and communications networks might\n   be vulnerable to eavesdropping.\n\n   Note that if a request containing this directive is satisfied from a\n   cache, the no-store request directive does not apply to the already\n   stored response.\n\n<h5 class=\"h5\" id=\"section-5.2.1.6\">5.2.1.6.  no-transform</h5>\n   The \"no-transform\" request directive indicates that an intermediary\n   (whether or not it implements a cache) MUST NOT transform the\n   payload, as defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-5.7.2\">Section 5.7.2 of [RFC7230]</a>.\n\n<h5 class=\"h5\" id=\"section-5.2.1.7\">5.2.1.7.  only-if-cached</h5>\n   The \"only-if-cached\" request directive indicates that the client only\n   wishes to obtain a stored response.  If it receives this directive, a\n   cache SHOULD either respond using a stored response that is\n   consistent with the other constraints of the request, or respond with\n\n   a 504 (Gateway Timeout) status code.  If a group of caches is being\n   operated as a unified system with good internal connectivity, a\n   member cache MAY forward such a request within that group of caches.\n\n<h4 class=\"h4\" id=\"section-5.2.2\">5.2.2.  Response Cache-Control Directives</h4>\n<h5 class=\"h5\" id=\"section-5.2.2.1\">5.2.2.1.  must-revalidate</h5>\n   The \"must-revalidate\" response directive indicates that once it has\n   become stale, a cache MUST NOT use the response to satisfy subsequent\n   requests without successful validation on the origin server.\n\n   The must-revalidate directive is necessary to support reliable\n   operation for certain protocol features.  In all circumstances a\n   cache MUST obey the must-revalidate directive; in particular, if a\n   cache cannot reach the origin server for any reason, it MUST generate\n   a 504 (Gateway Timeout) response.\n\n   The must-revalidate directive ought to be used by servers if and only\n   if failure to validate a request on the representation could result\n   in incorrect operation, such as a silently unexecuted financial\n   transaction.\n\n<h5 class=\"h5\" id=\"section-5.2.2.2\">5.2.2.2.  no-cache</h5>\n   Argument syntax:\n\n      #field-name\n\n   The \"no-cache\" response directive indicates that the response MUST\n   NOT be used to satisfy a subsequent request without successful\n   validation on the origin server.  This allows an origin server to\n   prevent a cache from using it to satisfy a request without contacting\n   it, even by caches that have been configured to send stale responses.\n\n   If the no-cache response directive specifies one or more field-names,\n   then a cache MAY use the response to satisfy a subsequent request,\n   subject to any other restrictions on caching.  However, any header\n   fields in the response that have the field-name(s) listed MUST NOT be\n   sent in the response to a subsequent request without successful\n   revalidation with the origin server.  This allows an origin server to\n   prevent the re-use of certain header fields in a response, while\n   still allowing caching of the rest of the response.\n\n   The field-names given are not limited to the set of header fields\n   defined by this specification.  Field names are case-insensitive.\n\n   This directive uses the quoted-string form of the argument syntax.  A\n   sender SHOULD NOT generate the token form (even if quoting appears\n   not to be needed for single-entry lists).\n\n   Note: Although it has been back-ported to many implementations, some\n   HTTP/1.0 caches will not recognize or obey this directive.  Also,\n   no-cache response directives with field-names are often handled by\n   caches as if an unqualified no-cache directive was received; i.e.,\n   the special handling for the qualified form is not widely\n   implemented.\n\n<h5 class=\"h5\" id=\"section-5.2.2.3\">5.2.2.3.  no-store</h5>\n   The \"no-store\" response directive indicates that a cache MUST NOT\n   store any part of either the immediate request or response.  This\n   directive applies to both private and shared caches.  \"MUST NOT\n   store\" in this context means that the cache MUST NOT intentionally\n   store the information in non-volatile storage, and MUST make a\n   best-effort attempt to remove the information from volatile storage\n   as promptly as possible after forwarding it.\n\n   This directive is NOT a reliable or sufficient mechanism for ensuring\n   privacy.  In particular, malicious or compromised caches might not\n   recognize or obey this directive, and communications networks might\n   be vulnerable to eavesdropping.\n\n<h5 class=\"h5\" id=\"section-5.2.2.4\">5.2.2.4.  no-transform</h5>\n   The \"no-transform\" response directive indicates that an intermediary\n   (regardless of whether it implements a cache) MUST NOT transform the\n   payload, as defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-5.7.2\">Section 5.7.2 of [RFC7230]</a>.\n\n<h5 class=\"h5\" id=\"section-5.2.2.5\">5.2.2.5.  public</h5>\n   The \"public\" response directive indicates that any cache MAY store\n   the response, even if the response would normally be non-cacheable or\n   cacheable only within a private cache.  (See <a href=\"#section-3.2\">Section 3.2</a> for\n   additional details related to the use of public in response to a\n   request containing Authorization, and <a href=\"#section-3\">Section 3</a> for details of how\n   public affects responses that would normally not be stored, due to\n   their status codes not being defined as cacheable by default; see\n   <a href=\"#section-4.2.2\">Section 4.2.2</a>.)\n\n<h5 class=\"h5\" id=\"section-5.2.2.6\">5.2.2.6.  private</h5>\n   Argument syntax:\n\n      #field-name\n\n   The \"private\" response directive indicates that the response message\n   is intended for a single user and MUST NOT be stored by a shared\n   cache.  A private cache MAY store the response and reuse it for later\n   requests, even if the response would normally be non-cacheable.\n\n   If the private response directive specifies one or more field-names,\n   this requirement is limited to the field-values associated with the\n   listed response header fields.  That is, a shared cache MUST NOT\n   store the specified field-names(s), whereas it MAY store the\n   remainder of the response message.\n\n   The field-names given are not limited to the set of header fields\n   defined by this specification.  Field names are case-insensitive.\n\n   This directive uses the quoted-string form of the argument syntax.  A\n   sender SHOULD NOT generate the token form (even if quoting appears\n   not to be needed for single-entry lists).\n\n   Note: This usage of the word \"private\" only controls where the\n   response can be stored; it cannot ensure the privacy of the message\n   content.  Also, private response directives with field-names are\n   often handled by caches as if an unqualified private directive was\n   received; i.e., the special handling for the qualified form is not\n   widely implemented.\n\n<h5 class=\"h5\" id=\"section-5.2.2.7\">5.2.2.7.  proxy-revalidate</h5>\n   The \"proxy-revalidate\" response directive has the same meaning as the\n   must-revalidate response directive, except that it does not apply to\n   private caches.\n\n<h5 class=\"h5\" id=\"section-5.2.2.8\">5.2.2.8.  max-age</h5>\n   Argument syntax:\n\n      delta-seconds (see <a href=\"#section-1.2.1\">Section 1.2.1</a>)\n\n   The \"max-age\" response directive indicates that the response is to be\n   considered stale after its age is greater than the specified number\n   of seconds.\n\n   This directive uses the token form of the argument syntax: e.g.,\n   'max-age=5' not 'max-age=\"5\"'.  A sender SHOULD NOT generate the\n   quoted-string form.\n\n<h5 class=\"h5\" id=\"section-5.2.2.9\">5.2.2.9.  s-maxage</h5>\n   Argument syntax:\n\n      delta-seconds (see <a href=\"#section-1.2.1\">Section 1.2.1</a>)\n\n   The \"s-maxage\" response directive indicates that, in shared caches,\n   the maximum age specified by this directive overrides the maximum age\n   specified by either the max-age directive or the Expires header\n   field.  The s-maxage directive also implies the semantics of the\n   proxy-revalidate response directive.\n\n   This directive uses the token form of the argument syntax: e.g.,\n   's-maxage=10' not 's-maxage=\"10\"'.  A sender SHOULD NOT generate the\n   quoted-string form.\n\n<h4 class=\"h4\" id=\"section-5.2.3\">5.2.3.  Cache Control Extensions</h4>\n   The Cache-Control header field can be extended through the use of one\n   or more cache-extension tokens, each with an optional value.  A cache\n   MUST ignore unrecognized cache directives.\n\n   Informational extensions (those that do not require a change in cache\n   behavior) can be added without changing the semantics of other\n   directives.\n\n   Behavioral extensions are designed to work by acting as modifiers to\n   the existing base of cache directives.  Both the new directive and\n   the old directive are supplied, such that applications that do not\n   understand the new directive will default to the behavior specified\n   by the old directive, and those that understand the new directive\n   will recognize it as modifying the requirements associated with the\n   old directive.  In this way, extensions to the existing cache-control\n   directives can be made without breaking deployed caches.\n\n   For example, consider a hypothetical new response directive called\n   \"community\" that acts as a modifier to the private directive: in\n   addition to private caches, any cache that is shared only by members\n   of the named community is allowed to cache the response.  An origin\n   server wishing to allow the UCI community to use an otherwise private\n   response in their shared cache(s) could do so by including\n\n     Cache-Control: private, community=\"UCI\"\n\n   A cache that recognizes such a community cache-extension could\n   broaden its behavior in accordance with that extension.  A cache that\n   does not recognize the community cache-extension would ignore it and\n   adhere to the private directive.\n\n<h3 class=\"h3\" id=\"section-5.3\">5.3.  Expires</h3>\n   The \"Expires\" header field gives the date/time after which the\n   response is considered stale.  See <a href=\"#section-4.2\">Section 4.2</a> for further discussion\n   of the freshness model.\n\n   The presence of an Expires field does not imply that the original\n   resource will change or cease to exist at, before, or after that\n   time.\n\n   The Expires value is an HTTP-date timestamp, as defined in <a href=\"#section-7.1.1.1\">Section</a>\n   <a href=\"#section-7.1.1.1\">7.1.1.1</a> of [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>].\n\n     Expires = HTTP-date\n\n   For example\n\n     Expires: Thu, 01 Dec 1994 16:00:00 GMT\n\n   A cache recipient MUST interpret invalid date formats, especially the\n   value \"0\", as representing a time in the past (i.e., \"already\n   expired\").\n\n   If a response includes a Cache-Control field with the max-age\n   directive (<a href=\"#section-5.2.2.8\">Section 5.2.2.8</a>), a recipient MUST ignore the Expires\n   field.  Likewise, if a response includes the s-maxage directive\n   (<a href=\"#section-5.2.2.9\">Section 5.2.2.9</a>), a shared cache recipient MUST ignore the Expires\n   field.  In both these cases, the value in Expires is only intended\n   for recipients that have not yet implemented the Cache-Control field.\n\n   An origin server without a clock MUST NOT generate an Expires field\n   unless its value represents a fixed time in the past (always expired)\n   or its value has been associated with the resource by a system or\n   user with a reliable clock.\n\n   Historically, HTTP required the Expires field-value to be no more\n   than a year in the future.  While longer freshness lifetimes are no\n   longer prohibited, extremely large values have been demonstrated to\n   cause problems (e.g., clock overflows due to use of 32-bit integers\n   for time values), and many caches will evict a response far sooner\n   than that.\n\n<h3 class=\"h3\" id=\"section-5.4\">5.4.  Pragma</h3>\n   The \"Pragma\" header field allows backwards compatibility with\n   HTTP/1.0 caches, so that clients can specify a \"no-cache\" request\n   that they will understand (as Cache-Control was not defined until\n   HTTP/1.1).  When the Cache-Control header field is also present and\n   understood in a request, Pragma is ignored.\n\n   In HTTP/1.0, Pragma was defined as an extensible field for\n   implementation-specified directives for recipients.  This\n   specification deprecates such extensions to improve interoperability.\n\n     Pragma           = 1#pragma-directive\n     pragma-directive = \"no-cache\" / extension-pragma\n     extension-pragma = token [ \"=\" ( token / quoted-string ) ]\n\n   When the Cache-Control header field is not present in a request,\n   caches MUST consider the no-cache request pragma-directive as having\n   the same effect as if \"Cache-Control: no-cache\" were present (see\n   <a href=\"#section-5.2.1\">Section 5.2.1</a>).\n\n   When sending a no-cache request, a client ought to include both the\n   pragma and cache-control directives, unless Cache-Control: no-cache\n   is purposefully omitted to target other Cache-Control response\n   directives at HTTP/1.1 caches.  For example:\n\n     GET / HTTP/1.1\n     Host: www.example.com\n     Cache-Control: max-age=30\n     Pragma: no-cache\n\n   will constrain HTTP/1.1 caches to serve a response no older than 30\n   seconds, while precluding implementations that do not understand\n   Cache-Control from serving a cached response.\n\n      Note: Because the meaning of \"Pragma: no-cache\" in responses is\n      not specified, it does not provide a reliable replacement for\n      \"Cache-Control: no-cache\" in them.\n\n<h3 class=\"h3\" id=\"section-5.5\">5.5.  Warning</h3>\n   The \"Warning\" header field is used to carry additional information\n   about the status or transformation of a message that might not be\n   reflected in the status code.  This information is typically used to\n   warn about possible incorrectness introduced by caching operations or\n   transformations applied to the payload of the message.\n\n   Warnings can be used for other purposes, both cache-related and\n   otherwise.  The use of a warning, rather than an error status code,\n   distinguishes these responses from true failures.\n\n   Warning header fields can in general be applied to any message,\n   however some warn-codes are specific to caches and can only be\n   applied to response messages.\n\n     Warning       = 1#warning-value\n\n     warning-value = warn-code SP warn-agent SP warn-text\n                                           [ SP warn-date ]\n\n     warn-code  = 3DIGIT\n     warn-agent = ( uri-host [ \":\" port ] ) / pseudonym\n                     ; the name or pseudonym of the server adding\n                     ; the Warning header field, for use in debugging\n                     ; a single \"-\" is recommended when agent unknown\n     warn-text  = quoted-string\n     warn-date  = DQUOTE HTTP-date DQUOTE\n\n   Multiple warnings can be generated in a response (either by the\n   origin server or by a cache), including multiple warnings with the\n   same warn-code number that only differ in warn-text.\n\n   A user agent that receives one or more Warning header fields SHOULD\n   inform the user of as many of them as possible, in the order that\n   they appear in the response.  Senders that generate multiple Warning\n   header fields are encouraged to order them with this user agent\n   behavior in mind.  A sender that generates new Warning header fields\n   MUST append them after any existing Warning header fields.\n\n   Warnings are assigned three digit warn-codes.  The first digit\n   indicates whether the Warning is required to be deleted from a stored\n   response after validation:\n\n   o  1xx warn-codes describe the freshness or validation status of the\n      response, and so they MUST be deleted by a cache after validation.\n      They can only be generated by a cache when validating a cached\n      entry, and MUST NOT be generated in any other situation.\n\n   o  2xx warn-codes describe some aspect of the representation that is\n      not rectified by a validation (for example, a lossy compression of\n      the representation) and they MUST NOT be deleted by a cache after\n      validation, unless a full response is sent, in which case they\n      MUST be.\n\n   If a sender generates one or more 1xx warn-codes in a message to be\n   sent to a recipient known to implement only HTTP/1.0, the sender MUST\n   include in each corresponding warning-value a warn-date that matches\n   the Date header field in the message.  For example:\n\n     HTTP/1.1 200 OK\n     Date: Sat, 25 Aug 2012 23:34:45 GMT\n     Warning: 112 - \"network down\" \"Sat, 25 Aug 2012 23:34:45 GMT\"\n\n\n   Warnings have accompanying warn-text that describes the error, e.g.,\n   for logging.  It is advisory only, and its content does not affect\n   interpretation of the warn-code.\n\n   If a recipient that uses, evaluates, or displays Warning header\n   fields receives a warn-date that is different from the Date value in\n   the same message, the recipient MUST exclude the warning-value\n   containing that warn-date before storing, forwarding, or using the\n   message.  This allows recipients to exclude warning-values that were\n   improperly retained after a cache validation.  If all of the\n   warning-values are excluded, the recipient MUST exclude the Warning\n   header field as well.\n\n   The following warn-codes are defined by this specification, each with\n   a recommended warn-text in English, and a description of its meaning.\n   The procedure for defining additional warn codes is described in\n   <a href=\"#section-7.2.1\">Section 7.2.1</a>.\n\n<h4 class=\"h4\" id=\"section-5.5.1\">5.5.1.  Warning: 110 - \"Response is Stale\"</h4>\n   A cache SHOULD generate this whenever the sent response is stale.\n\n<h4 class=\"h4\" id=\"section-5.5.2\">5.5.2.  Warning: 111 - \"Revalidation Failed\"</h4>\n   A cache SHOULD generate this when sending a stale response because an\n   attempt to validate the response failed, due to an inability to reach\n   the server.\n\n<h4 class=\"h4\" id=\"section-5.5.3\">5.5.3.  Warning: 112 - \"Disconnected Operation\"</h4>\n   A cache SHOULD generate this if it is intentionally disconnected from\n   the rest of the network for a period of time.\n\n<h4 class=\"h4\" id=\"section-5.5.4\">5.5.4.  Warning: 113 - \"Heuristic Expiration\"</h4>\n   A cache SHOULD generate this if it heuristically chose a freshness\n   lifetime greater than 24 hours and the response's age is greater than\n   24 hours.\n\n<h4 class=\"h4\" id=\"section-5.5.5\">5.5.5.  Warning: 199 - \"Miscellaneous Warning\"</h4>\n   The warning text can include arbitrary information to be presented to\n   a human user or logged.  A system receiving this warning MUST NOT\n   take any automated action, besides presenting the warning to the\n   user.\n\n<h4 class=\"h4\" id=\"section-5.5.6\">5.5.6.  Warning: 214 - \"Transformation Applied\"</h4>\n   This Warning code MUST be added by a proxy if it applies any\n   transformation to the representation, such as changing the\n   content-coding, media-type, or modifying the representation data,\n   unless this Warning code already appears in the response.\n\n<h4 class=\"h4\" id=\"section-5.5.7\">5.5.7.  Warning: 299 - \"Miscellaneous Persistent Warning\"</h4>\n   The warning text can include arbitrary information to be presented to\n   a human user or logged.  A system receiving this warning MUST NOT\n   take any automated action.\n\n<h2 class=\"h2\" id=\"section-6\">6.  History Lists</h2>\n   User agents often have history mechanisms, such as \"Back\" buttons and\n   history lists, that can be used to redisplay a representation\n   retrieved earlier in a session.\n\n   The freshness model (<a href=\"#section-4.2\">Section 4.2</a>) does not necessarily apply to\n   history mechanisms.  That is, a history mechanism can display a\n   previous representation even if it has expired.\n\n   This does not prohibit the history mechanism from telling the user\n   that a view might be stale or from honoring cache directives (e.g.,\n   Cache-Control: no-store).\n\n<h2 class=\"h2\" id=\"section-7\">7.  IANA Considerations</h2>\n<h3 class=\"h3\" id=\"section-7.1\">7.1.  Cache Directive Registry</h3>\n   The \"Hypertext Transfer Protocol (HTTP) Cache Directive Registry\"\n   defines the namespace for the cache directives.  It has been created\n   and is now maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/http-cache-directives\">http://www.iana.org/assignments/http-cache-directives</a>&gt;.\n\n<h4 class=\"h4\" id=\"section-7.1.1\">7.1.1.  Procedure</h4>\n   A registration MUST include the following fields:\n\n   o  Cache Directive Name\n\n   o  Pointer to specification text\n\n   Values to be added to this namespace require IETF Review (see\n   <a href=\"https://tools.ietf.org/html/rfc5226#section-4.1\">[RFC5226], Section 4.1</a>).\n\n<h4 class=\"h4\" id=\"section-7.1.2\">7.1.2.  Considerations for New Cache Control Directives</h4>\n   New extension directives ought to consider defining:\n\n   o  What it means for a directive to be specified multiple times,\n\n   o  When the directive does not take an argument, what it means when\n      an argument is present,\n\n   o  When the directive requires an argument, what it means when it is\n      missing,\n\n   o  Whether the directive is specific to requests, responses, or able\n      to be used in either.\n\n   See also <a href=\"#section-5.2.3\">Section 5.2.3</a>.\n\n<h4 class=\"h4\" id=\"section-7.1.3\">7.1.3.  Registrations</h4>\n   The registry has been populated with the registrations below:\n\n   +------------------------+----------------------------------+\n   | Cache Directive        | Reference                        |\n   +------------------------+----------------------------------+\n   | max-age                | <a href=\"#section-5.2.1.1\">Section 5.2.1.1</a>, <a href=\"#section-5.2.2.8\">Section 5.2.2.8</a> |\n   | max-stale              | <a href=\"#section-5.2.1.2\">Section 5.2.1.2</a>                  |\n   | min-fresh              | <a href=\"#section-5.2.1.3\">Section 5.2.1.3</a>                  |\n   | must-revalidate        | <a href=\"#section-5.2.2.1\">Section 5.2.2.1</a>                  |\n   | no-cache               | <a href=\"#section-5.2.1.4\">Section 5.2.1.4</a>, <a href=\"#section-5.2.2.2\">Section 5.2.2.2</a> |\n   | no-store               | <a href=\"#section-5.2.1.5\">Section 5.2.1.5</a>, <a href=\"#section-5.2.2.3\">Section 5.2.2.3</a> |\n   | no-transform           | <a href=\"#section-5.2.1.6\">Section 5.2.1.6</a>, <a href=\"#section-5.2.2.4\">Section 5.2.2.4</a> |\n   | only-if-cached         | <a href=\"#section-5.2.1.7\">Section 5.2.1.7</a>                  |\n   | private                | <a href=\"#section-5.2.2.6\">Section 5.2.2.6</a>                  |\n   | proxy-revalidate       | <a href=\"#section-5.2.2.7\">Section 5.2.2.7</a>                  |\n   | public                 | <a href=\"#section-5.2.2.5\">Section 5.2.2.5</a>                  |\n   | s-maxage               | <a href=\"#section-5.2.2.9\">Section 5.2.2.9</a>                  |\n   | stale-if-error         | <a href=\"https://tools.ietf.org/html/rfc5861#section-4\">[RFC5861], Section 4</a>             |\n   | stale-while-revalidate | <a href=\"https://tools.ietf.org/html/rfc5861#section-3\">[RFC5861], Section 3</a>             |\n   +------------------------+----------------------------------+\n\n<h3 class=\"h3\" id=\"section-7.2\">7.2.  Warn Code Registry</h3>\n   The \"Hypertext Transfer Protocol (HTTP) Warn Codes\" registry defines\n   the namespace for warn codes.  It has been created and is now\n   maintained at &lt;<a href=\"http://www.iana.org/assignments/http-warn-codes\">http://www.iana.org/assignments/http-warn-codes</a>&gt;.\n\n<h4 class=\"h4\" id=\"section-7.2.1\">7.2.1.  Procedure</h4>\n   A registration MUST include the following fields:\n\n   o  Warn Code (3 digits)\n\n   o  Short Description\n\n   o  Pointer to specification text\n\n   Values to be added to this namespace require IETF Review (see\n   <a href=\"https://tools.ietf.org/html/rfc5226#section-4.1\">[RFC5226], Section 4.1</a>).\n\n<h4 class=\"h4\" id=\"section-7.2.2\">7.2.2.  Registrations</h4>\n   The registry has been populated with the registrations below:\n\n   +-----------+----------------------------------+---------------+\n   | Warn Code | Short Description                | Reference     |\n   +-----------+----------------------------------+---------------+\n   | 110       | Response is Stale                | <a href=\"#section-5.5.1\">Section 5.5.1</a> |\n   | 111       | Revalidation Failed              | <a href=\"#section-5.5.2\">Section 5.5.2</a> |\n   | 112       | Disconnected Operation           | <a href=\"#section-5.5.3\">Section 5.5.3</a> |\n   | 113       | Heuristic Expiration             | <a href=\"#section-5.5.4\">Section 5.5.4</a> |\n   | 199       | Miscellaneous Warning            | <a href=\"#section-5.5.5\">Section 5.5.5</a> |\n   | 214       | Transformation Applied           | <a href=\"#section-5.5.6\">Section 5.5.6</a> |\n   | 299       | Miscellaneous Persistent Warning | <a href=\"#section-5.5.7\">Section 5.5.7</a> |\n   +-----------+----------------------------------+---------------+\n\n<h3 class=\"h3\" id=\"section-7.3\">7.3.  Header Field Registration</h3>\n   HTTP header fields are registered within the \"Message Headers\"\n   registry maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/message-headers/\">http://www.iana.org/assignments/message-headers/</a>&gt;.\n\n   This document defines the following HTTP header fields, so the\n   \"Permanent Message Header Field Names\" registry has been updated\n   accordingly (see [<a href=\"#ref-BCP90\" title='\"Registration Procedures for Message Header Fields\"'>BCP90</a>]).\n\n   +-------------------+----------+----------+-------------+\n   | Header Field Name | Protocol | Status   | Reference   |\n   +-------------------+----------+----------+-------------+\n   | Age               | http     | standard | <a href=\"#section-5.1\">Section 5.1</a> |\n   | Cache-Control     | http     | standard | <a href=\"#section-5.2\">Section 5.2</a> |\n   | Expires           | http     | standard | <a href=\"#section-5.3\">Section 5.3</a> |\n   | Pragma            | http     | standard | <a href=\"#section-5.4\">Section 5.4</a> |\n   | Warning           | http     | standard | <a href=\"#section-5.5\">Section 5.5</a> |\n   +-------------------+----------+----------+-------------+\n\n   The change controller is: \"IETF (iesg@ietf.org) - Internet\n   Engineering Task Force\".\n\n<h2 class=\"h2\" id=\"section-8\">8.  Security Considerations</h2>\n   This section is meant to inform developers, information providers,\n   and users of known security concerns specific to HTTP caching.  More\n   general security considerations are addressed in HTTP messaging\n   [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>] and semantics [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>].\n\n   Caches expose additional potential vulnerabilities, since the\n   contents of the cache represent an attractive target for malicious\n   exploitation.  Because cache contents persist after an HTTP request\n   is complete, an attack on the cache can reveal information long after\n   a user believes that the information has been removed from the\n   network.  Therefore, cache contents need to be protected as sensitive\n   information.\n\n   In particular, various attacks might be amplified by being stored in\n   a shared cache; such \"cache poisoning\" attacks use the cache to\n   distribute a malicious payload to many clients, and are especially\n   effective when an attacker can use implementation flaws, elevated\n   privileges, or other techniques to insert such a response into a\n   cache.  One common attack vector for cache poisoning is to exploit\n   differences in message parsing on proxies and in user agents; see\n   <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.3\">Section 3.3.3 of [RFC7230]</a> for the relevant requirements.\n\n   Likewise, implementation flaws (as well as misunderstanding of cache\n   operation) might lead to caching of sensitive information (e.g.,\n   authentication credentials) that is thought to be private, exposing\n   it to unauthorized parties.\n\n   Furthermore, the very use of a cache can bring about privacy\n   concerns.  For example, if two users share a cache, and the first one\n   browses to a site, the second may be able to detect that the other\n   has been to that site, because the resources from it load more\n   quickly, thanks to the cache.\n\n   Note that the Set-Cookie response header field [<a href=\"https://tools.ietf.org/html/rfc6265\" title='\"HTTP State Management Mechanism\"'>RFC6265</a>] does not\n   inhibit caching; a cacheable response with a Set-Cookie header field\n   can be (and often is) used to satisfy subsequent requests to caches.\n   Servers who wish to control caching of these responses are encouraged\n   to emit appropriate Cache-Control response header fields.\n\n<h2 class=\"h2\" id=\"section-9\">9.  Acknowledgments</h2>\n   See <a href=\"https://tools.ietf.org/html/rfc7230#section-10\">Section 10 of [RFC7230]</a>.\n\n<h2 class=\"h2\" id=\"section-10\">10.  References</h2>\n<h3 class=\"h3\" id=\"section-10.1\">10.1.  Normative References</h3>\n   [<a name=\"ref-RFC2119\" id=\"ref-RFC2119\">RFC2119</a>]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\", <a href=\"https://tools.ietf.org/html/bcp14\">BCP 14</a>, <a href=\"https://tools.ietf.org/html/rfc2119\">RFC 2119</a>, March 1997.\n\n   [<a name=\"ref-RFC5234\" id=\"ref-RFC5234\">RFC5234</a>]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications: ABNF\", STD 68, <a href=\"https://tools.ietf.org/html/rfc5234\">RFC 5234</a>, January 2008.\n\n   [<a name=\"ref-RFC7230\" id=\"ref-RFC7230\">RFC7230</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Message Syntax and Routing\",\n              <a href=\"https://tools.ietf.org/html/rfc7230\">RFC 7230</a>, June 2014.\n\n   [<a name=\"ref-RFC7231\" id=\"ref-RFC7231\">RFC7231</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Semantics and Content\", <a href=\"https://tools.ietf.org/html/rfc7231\">RFC 7231</a>,\n              June 2014.\n\n   [<a name=\"ref-RFC7232\" id=\"ref-RFC7232\">RFC7232</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Conditional Requests\", <a href=\"https://tools.ietf.org/html/rfc7232\">RFC 7232</a>,\n              June 2014.\n\n   [<a name=\"ref-RFC7233\" id=\"ref-RFC7233\">RFC7233</a>]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,\n              \"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\",\n              <a href=\"https://tools.ietf.org/html/rfc7233\">RFC 7233</a>, June 2014.\n\n   [<a name=\"ref-RFC7235\" id=\"ref-RFC7235\">RFC7235</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Authentication\", <a href=\"https://tools.ietf.org/html/rfc7235\">RFC 7235</a>, June 2014.\n\n<h3 class=\"h3\" id=\"section-10.2\">10.2.  Informative References</h3>\n   [<a name=\"ref-BCP90\" id=\"ref-BCP90\">BCP90</a>]    Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures for Message Header Fields\", <a href=\"https://tools.ietf.org/html/bcp90\">BCP 90</a>, <a href=\"https://tools.ietf.org/html/rfc3864\">RFC 3864</a>,\n              September 2004.\n\n   [<a name=\"ref-RFC2616\" id=\"ref-RFC2616\">RFC2616</a>]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>, June 1999.\n\n   [<a name=\"ref-RFC5226\" id=\"ref-RFC5226\">RFC5226</a>]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\", <a href=\"https://tools.ietf.org/html/bcp26\">BCP 26</a>, <a href=\"https://tools.ietf.org/html/rfc5226\">RFC 5226</a>,\n              May 2008.\n\n   [<a name=\"ref-RFC5861\" id=\"ref-RFC5861\">RFC5861</a>]  Nottingham, M., \"HTTP Cache-Control Extensions for Stale\n              Content\", <a href=\"https://tools.ietf.org/html/rfc5861\">RFC 5861</a>, April 2010.\n\n   [<a name=\"ref-RFC5905\" id=\"ref-RFC5905\">RFC5905</a>]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n              \"Network Time Protocol Version 4: Protocol and Algorithms\n              Specification\", <a href=\"https://tools.ietf.org/html/rfc5905\">RFC 5905</a>, June 2010.\n\n   [<a name=\"ref-RFC6265\" id=\"ref-RFC6265\">RFC6265</a>]  Barth, A., \"HTTP State Management Mechanism\", <a href=\"https://tools.ietf.org/html/rfc6265\">RFC 6265</a>,\n              April 2011.\n\n<h2 class=\"h2\" id=\"appendix-A\">Appendix A.  Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>\n</h2>\n   The specification has been substantially rewritten for clarity.\n\n   The conditions under which an authenticated response can be cached\n   have been clarified.  (<a href=\"#section-3.2\">Section 3.2</a>)\n\n   New status codes can now define that caches are allowed to use\n   heuristic freshness with them.  Caches are now allowed to calculate\n   heuristic freshness for URIs with query components.  (<a href=\"#section-4.2.2\">Section 4.2.2</a>)\n\n   The algorithm for calculating age is now less conservative.  Caches\n   are now required to handle dates with time zones as if they're\n   invalid, because it's not possible to accurately guess.\n   (<a href=\"#section-4.2.3\">Section 4.2.3</a>)\n\n   The Content-Location response header field is no longer used to\n   determine the appropriate response to use when validating.\n   (<a href=\"#section-4.3\">Section 4.3</a>)\n\n   The algorithm for selecting a cached negotiated response to use has\n   been clarified in several ways.  In particular, it now explicitly\n   allows header-specific canonicalization when processing selecting\n   header fields.  (<a href=\"#section-4.1\">Section 4.1</a>)\n\n   Requirements regarding denial-of-service attack avoidance when\n   performing invalidation have been clarified.  (<a href=\"#section-4.4\">Section 4.4</a>)\n\n   Cache invalidation only occurs when a successful response is\n   received.  (<a href=\"#section-4.4\">Section 4.4</a>)\n\n   Cache directives are explicitly defined to be case-insensitive.\n   Handling of multiple instances of cache directives when only one is\n   expected is now defined.  (<a href=\"#section-5.2\">Section 5.2</a>)\n\n   The \"no-store\" request directive doesn't apply to responses; i.e., a\n   cache can satisfy a request with no-store on it and does not\n   invalidate it.  (<a href=\"#section-5.2.1.5\">Section 5.2.1.5</a>)\n\n   The qualified forms of the private and no-cache cache directives are\n   noted to not be widely implemented; for example, \"private=foo\" is\n   interpreted by many caches as simply \"private\".  Additionally, the\n   meaning of the qualified form of no-cache has been clarified.\n   (<a href=\"#section-5.2.2\">Section 5.2.2</a>)\n\n   The \"no-cache\" response directive's meaning has been clarified.\n   (<a href=\"#section-5.2.2.2\">Section 5.2.2.2</a>)\n\n   The one-year limit on Expires header field values has been removed;\n   instead, the reasoning for using a sensible value is given.\n   (<a href=\"#section-5.3\">Section 5.3</a>)\n\n   The Pragma header field is now only defined for backwards\n   compatibility; future pragmas are deprecated.  (<a href=\"#section-5.4\">Section 5.4</a>)\n\n   Some requirements regarding production and processing of the Warning\n   header fields have been relaxed, as it is not widely implemented.\n   Furthermore, the Warning header field no longer uses <a href=\"https://tools.ietf.org/html/rfc2047\">RFC 2047</a>\n   encoding, nor does it allow multiple languages, as these aspects were\n   not implemented.  (<a href=\"#section-5.5\">Section 5.5</a>)\n\n   This specification introduces the Cache Directive and Warn Code\n   Registries, and defines considerations for new cache directives.\n   (<a href=\"#section-7.1\">Section 7.1</a> and <a href=\"#section-7.2\">Section 7.2</a>)\n\n<h2 class=\"h2\" id=\"appendix-B\">Appendix B.  Imported ABNF</h2>\n   The following core rules are included by reference, as defined in\n   <a href=\"https://tools.ietf.org/html/rfc5234#appendix-B.1\">Appendix B.1 of [RFC5234]</a>: ALPHA (letters), CR (carriage return),\n   CRLF (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double\n   quote), HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed), OCTET (any\n   8-bit sequence of data), SP (space), and VCHAR (any visible US-ASCII\n   character).\n\n   The rules below are defined in [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>]:\n\n     OWS           = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n     field-name    = &lt;field-name, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">[RFC7230], Section 3.2</a>&gt;\n     quoted-string = &lt;quoted-string, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n     token         = &lt;token, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n\n     port          = &lt;port, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n     pseudonym     = &lt;pseudonym, see <a href=\"https://tools.ietf.org/html/rfc7230#section-5.7.1\">[RFC7230], Section 5.7.1</a>&gt;\n     uri-host      = &lt;uri-host, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n\n   The rules below are defined in other parts:\n\n     HTTP-date     = &lt;HTTP-date, see <a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.1.1\">[RFC7231], Section 7.1.1.1</a>&gt;\n\n<h2 class=\"h2\" id=\"appendix-C\">Appendix C.  Collected ABNF</h2>\n   In the collected ABNF below, list rules are expanded as per <a href=\"#section-1.2\">Section</a>\n   <a href=\"#section-1.2\">1.2</a> of [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>].\n\n   Age = delta-seconds\n\n   Cache-Control = *( \",\" OWS ) cache-directive *( OWS \",\" [ OWS\n    cache-directive ] )\n\n   Expires = HTTP-date\n\n   HTTP-date = &lt;HTTP-date, see <a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.1.1\">[RFC7231], Section 7.1.1.1</a>&gt;\n\n   OWS = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n\n   Pragma = *( \",\" OWS ) pragma-directive *( OWS \",\" [ OWS\n    pragma-directive ] )\n\n   Warning = *( \",\" OWS ) warning-value *( OWS \",\" [ OWS warning-value ]\n    )\n\n   cache-directive = token [ \"=\" ( token / quoted-string ) ]\n\n   delta-seconds = 1*DIGIT\n\n   extension-pragma = token [ \"=\" ( token / quoted-string ) ]\n\n   field-name = &lt;field-name, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">[RFC7230], Section 3.2</a>&gt;\n\n   port = &lt;port, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n   pragma-directive = \"no-cache\" / extension-pragma\n   pseudonym = &lt;pseudonym, see <a href=\"https://tools.ietf.org/html/rfc7230#section-5.7.1\">[RFC7230], Section 5.7.1</a>&gt;\n\n   quoted-string = &lt;quoted-string, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n\n   token = &lt;token, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n\n   uri-host = &lt;uri-host, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n\n   warn-agent = ( uri-host [ \":\" port ] ) / pseudonym\n   warn-code = 3DIGIT\n   warn-date = DQUOTE HTTP-date DQUOTE\n   warn-text = quoted-string\n   warning-value = warn-code SP warn-agent SP warn-text [ SP warn-date\n    ]\n\nIndex\n\n   1\n      110 (warn-code)  31\n      111 (warn-code)  31\n      112 (warn-code)  31\n      113 (warn-code)  31\n      199 (warn-code)  32\n\n   2\n      214 (warn-code)  32\n      299 (warn-code)  32\n\n   A\n      age  11\n      Age header field  21\n\n   C\n      cache  4\n      cache entry  5\n      cache key  5-6\n      Cache-Control header field  21\n\n   D\n      Disconnected Operation (warn-text)  31\n\n   E\n      Expires header field  28\n      explicit expiration time  11\n\n   F\n      fresh  11\n      freshness lifetime  11\n\n   G\n      Grammar\n         Age  21\n         Cache-Control  22\n         cache-directive  22\n         delta-seconds  5\n         Expires  28\n         extension-pragma  29\n         Pragma  29\n         pragma-directive  29\n         warn-agent  29\n         warn-code  29\n         warn-date  29\n         warn-text  29\n\n         Warning  29\n         warning-value  29\n\n   H\n      Heuristic Expiration (warn-text)  31\n      heuristic expiration time  11\n   M\n      max-age (cache directive)  22, 26\n      max-stale (cache directive)  22\n      min-fresh (cache directive)  22\n      Miscellaneous Persistent Warning (warn-text)  32\n      Miscellaneous Warning (warn-text)  32\n      must-revalidate (cache directive)  24\n\n   N\n      no-cache (cache directive)  23, 25\n      no-store (cache directive)  23, 24\n      no-transform (cache directive)  23, 25\n\n   O\n      only-if-cached (cache directive)  23\n\n   P\n      Pragma header field  29\n      private (cache directive)  25\n      private cache  4\n      proxy-revalidate (cache directive)  26\n      public (cache directive)  25\n\n   R\n      Response is Stale (warn-text)  30\n      Revalidation Failed (warn-text)  31\n\n   S\n      s-maxage (cache directive)  27\n      shared cache  4\n      stale  11\n      strong validator  18\n\n   T\n      Transformation Applied (warn-text)  32\n\n   V\n      validator  16\n\n   W\n      Warning header field  29\n\nAuthors' Addresses\n\n   Roy T. Fielding (editor)\n   Adobe Systems Incorporated\n   345 Park Ave\n   San Jose, CA  95110\n   USA\n\n   EMail: fielding@gbiv.com\n   URI:   <a href=\"http://roy.gbiv.com/\">http://roy.gbiv.com/</a>\n\n\n   Mark Nottingham (editor)\n   Akamai\n\n   EMail: mnot@mnot.net\n   URI:   <a href=\"http://www.mnot.net/\">http://www.mnot.net/</a>\n\n\n   Julian F. Reschke (editor)\n   greenbytes GmbH\n   Hafenweg 16\n   Muenster, NW  48155\n   Germany\n\n   EMail: julian.reschke@greenbytes.de\n   URI:   <a href=\"http://greenbytes.de/tech/webdav/\">http://greenbytes.de/tech/webdav/</a>\n\n\nFielding, et al.             Standards Track                   [Page 43]<br>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; document authors. All rights reserved.<br>\n    <a href=\"https://tools.ietf.org/html/rfc7234\" class=\"_attribution-link\">https://tools.ietf.org/html/rfc7234</a>\n  </p>\n</div>\n","rfc7231":"<div class=\"_rfc-pre\">Internet Engineering Task Force (IETF)                  R. Fielding, Ed.\nRequest for Comments: 7231                                         Adobe\nObsoletes: <a href=\"https://tools.ietf.org/html/rfc2616\">2616</a>                                          J. Reschke, Ed.\nUpdates: <a href=\"https://tools.ietf.org/html/rfc2817\">2817</a>                                                 greenbytes\nCategory: Standards Track                                      June 2014\nISSN: 2070-1721\n\n\n     <h1 class=\"h1\">Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</h1>\nAbstract\n\n   The Hypertext Transfer Protocol (HTTP) is a stateless application-\n   level protocol for distributed, collaborative, hypertext information\n   systems.  This document defines the semantics of HTTP/1.1 messages,\n   as expressed by request methods, request header fields, response\n   status codes, and response header fields, along with the payload of\n   messages (metadata and body content) and mechanisms for content\n   negotiation.\n\nStatus of This Memo\n\n   This is an Internet Standards Track document.\n\n   This document is a product of the Internet Engineering Task Force\n   (IETF).  It represents the consensus of the IETF community.  It has\n   received public review and has been approved for publication by the\n   Internet Engineering Steering Group (IESG).  Further information on\n   Internet Standards is available in <a href=\"https://tools.ietf.org/html/rfc5741#section-2\">Section 2 of RFC 5741</a>.\n\n   Information about the current status of this document, any errata,\n   and how to provide feedback on it may be obtained at\n   <a href=\"http://www.rfc-editor.org/info/rfc7231\">http://www.rfc-editor.org/info/rfc7231</a>.\n\nCopyright Notice\n\n   Copyright (c) 2014 IETF Trust and the persons identified as the\n   document authors.  All rights reserved.\n\n   This document is subject to <a href=\"https://tools.ietf.org/html/bcp78\">BCP 78</a> and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n   (<a href=\"http://trustee.ietf.org/license-info\">http://trustee.ietf.org/license-info</a>) in effect on the date of\n   publication of this document.  Please review these documents\n   carefully, as they describe your rights and restrictions with respect\n   to this document.  Code Components extracted from this document must\n   include Simplified BSD License text as described in <a href=\"#section-4\">Section 4</a>.e of\n   the Trust Legal Provisions and are provided without warranty as\n   described in the Simplified BSD License.\n\n   This document may contain material from IETF Documents or IETF\n   Contributions published or made publicly available before November\n   10, 2008.  The person(s) controlling the copyright in some of this\n   material may not have granted the IETF Trust the right to allow\n   modifications of such material outside the IETF Standards Process.\n   Without obtaining an adequate license from the person(s) controlling\n   the copyright in such materials, this document may not be modified\n   outside the IETF Standards Process, and derivative works of it may\n   not be created outside the IETF Standards Process, except to format\n   it for publication as an RFC or to translate it into languages other\n   than English.\n\nTable of Contents\n\n   <a href=\"#section-1\">1</a>. Introduction \n      <a href=\"#section-1.1\">1.1</a>. Conformance and Error Handling \n      <a href=\"#section-1.2\">1.2</a>. Syntax Notation \n   <a href=\"#section-2\">2</a>. Resources \n   <a href=\"#section-3\">3</a>. Representations \n      <a href=\"#section-3.1\">3.1</a>. Representation Metadata \n           <a href=\"#section-3.1.1\">3.1.1</a>. Processing Representation Data \n           <a href=\"#section-3.1.2\">3.1.2</a>. Encoding for Compression or Integrity \n           <a href=\"#section-3.1.3\">3.1.3</a>. Audience Language \n           <a href=\"#section-3.1.4\">3.1.4</a>. Identification \n      <a href=\"#section-3.2\">3.2</a>. Representation Data \n      <a href=\"#section-3.3\">3.3</a>. Payload Semantics \n      <a href=\"#section-3.4\">3.4</a>. Content Negotiation \n           <a href=\"#section-3.4.1\">3.4.1</a>. Proactive Negotiation \n           <a href=\"#section-3.4.2\">3.4.2</a>. Reactive Negotiation \n   <a href=\"#section-4\">4</a>. Request Methods \n      <a href=\"#section-4.1\">4.1</a>. Overview \n      <a href=\"#section-4.2\">4.2</a>. Common Method Properties \n           <a href=\"#section-4.2.1\">4.2.1</a>. Safe Methods \n           <a href=\"#section-4.2.2\">4.2.2</a>. Idempotent Methods \n           <a href=\"#section-4.2.3\">4.2.3</a>. Cacheable Methods \n      <a href=\"#section-4.3\">4.3</a>. Method Definitions \n           <a href=\"#section-4.3.1\">4.3.1</a>. GET \n           <a href=\"#section-4.3.2\">4.3.2</a>. HEAD \n           <a href=\"#section-4.3.3\">4.3.3</a>. POST \n           <a href=\"#section-4.3.4\">4.3.4</a>. PUT \n           <a href=\"#section-4.3.5\">4.3.5</a>. DELETE \n           <a href=\"#section-4.3.6\">4.3.6</a>. CONNECT \n           <a href=\"#section-4.3.7\">4.3.7</a>. OPTIONS \n           <a href=\"#section-4.3.8\">4.3.8</a>. TRACE \n   <a href=\"#section-5\">5</a>. Request Header Fields \n      <a href=\"#section-5.1\">5.1</a>. Controls \n           <a href=\"#section-5.1.1\">5.1.1</a>. Expect \n           <a href=\"#section-5.1.2\">5.1.2</a>. Max-Forwards \n      <a href=\"#section-5.2\">5.2</a>. Conditionals \n      <a href=\"#section-5.3\">5.3</a>. Content Negotiation \n           <a href=\"#section-5.3.1\">5.3.1</a>. Quality Values \n           <a href=\"#section-5.3.2\">5.3.2</a>. Accept \n           <a href=\"#section-5.3.3\">5.3.3</a>. Accept-Charset \n           <a href=\"#section-5.3.4\">5.3.4</a>. Accept-Encoding \n           <a href=\"#section-5.3.5\">5.3.5</a>. Accept-Language \n      <a href=\"#section-5.4\">5.4</a>. Authentication Credentials \n      <a href=\"#section-5.5\">5.5</a>. Request Context \n           <a href=\"#section-5.5.1\">5.5.1</a>. From \n           <a href=\"#section-5.5.2\">5.5.2</a>. Referer \n           <a href=\"#section-5.5.3\">5.5.3</a>. User-Agent \n\n   <a href=\"#section-6\">6</a>. Response Status Codes \n      <a href=\"#section-6.1\">6.1</a>. Overview of Status Codes \n      <a href=\"#section-6.2\">6.2</a>. Informational 1xx \n           <a href=\"#section-6.2.1\">6.2.1</a>. 100 Continue \n           <a href=\"#section-6.2.2\">6.2.2</a>. 101 Switching Protocols \n      <a href=\"#section-6.3\">6.3</a>. Successful 2xx \n           <a href=\"#section-6.3.1\">6.3.1</a>. 200 OK \n           <a href=\"#section-6.3.2\">6.3.2</a>. 201 Created \n           <a href=\"#section-6.3.3\">6.3.3</a>. 202 Accepted \n           <a href=\"#section-6.3.4\">6.3.4</a>. 203 Non-Authoritative Information \n           <a href=\"#section-6.3.5\">6.3.5</a>. 204 No Content \n           <a href=\"#section-6.3.6\">6.3.6</a>. 205 Reset Content \n      <a href=\"#section-6.4\">6.4</a>. Redirection 3xx \n           <a href=\"#section-6.4.1\">6.4.1</a>. 300 Multiple Choices \n           <a href=\"#section-6.4.2\">6.4.2</a>. 301 Moved Permanently \n           <a href=\"#section-6.4.3\">6.4.3</a>. 302 Found \n           <a href=\"#section-6.4.4\">6.4.4</a>. 303 See Other \n           <a href=\"#section-6.4.5\">6.4.5</a>. 305 Use Proxy \n           <a href=\"#section-6.4.6\">6.4.6</a>. 306 (Unused) \n           <a href=\"#section-6.4.7\">6.4.7</a>. 307 Temporary Redirect \n      <a href=\"#section-6.5\">6.5</a>. Client Error 4xx \n           <a href=\"#section-6.5.1\">6.5.1</a>. 400 Bad Request \n           <a href=\"#section-6.5.2\">6.5.2</a>. 402 Payment Required \n           <a href=\"#section-6.5.3\">6.5.3</a>. 403 Forbidden \n           <a href=\"#section-6.5.4\">6.5.4</a>. 404 Not Found \n           <a href=\"#section-6.5.5\">6.5.5</a>. 405 Method Not Allowed \n           <a href=\"#section-6.5.6\">6.5.6</a>. 406 Not Acceptable \n           <a href=\"#section-6.5.7\">6.5.7</a>. 408 Request Timeout \n           <a href=\"#section-6.5.8\">6.5.8</a>. 409 Conflict \n           <a href=\"#section-6.5.9\">6.5.9</a>. 410 Gone \n           <a href=\"#section-6.5.10\">6.5.10</a>. 411 Length Required \n           <a href=\"#section-6.5.11\">6.5.11</a>. 413 Payload Too Large \n           <a href=\"#section-6.5.12\">6.5.12</a>. 414 URI Too Long \n           <a href=\"#section-6.5.13\">6.5.13</a>. 415 Unsupported Media Type \n           <a href=\"#section-6.5.14\">6.5.14</a>. 417 Expectation Failed \n           <a href=\"#section-6.5.15\">6.5.15</a>. 426 Upgrade Required \n      <a href=\"#section-6.6\">6.6</a>. Server Error 5xx \n           <a href=\"#section-6.6.1\">6.6.1</a>. 500 Internal Server Error \n           <a href=\"#section-6.6.2\">6.6.2</a>. 501 Not Implemented \n           <a href=\"#section-6.6.3\">6.6.3</a>. 502 Bad Gateway \n           <a href=\"#section-6.6.4\">6.6.4</a>. 503 Service Unavailable \n           <a href=\"#section-6.6.5\">6.6.5</a>. 504 Gateway Timeout \n           <a href=\"#section-6.6.6\">6.6.6</a>. 505 HTTP Version Not Supported \n   <a href=\"#section-7\">7</a>. Response Header Fields \n      <a href=\"#section-7.1\">7.1</a>. Control Data \ned            7.1.1. Origination Date \n           <a href=\"#section-7.1.2\">7.1.2</a>. Location \n           <a href=\"#section-7.1.3\">7.1.3</a>. Retry-After \n\n           <a href=\"#section-7.1.4\">7.1.4</a>. Vary \n      <a href=\"#section-7.2\">7.2</a>. Validator Header Fields \n      <a href=\"#section-7.3\">7.3</a>. Authentication Challenges \n      <a href=\"#section-7.4\">7.4</a>. Response Context \n           <a href=\"#section-7.4.1\">7.4.1</a>. Allow \n           <a href=\"#section-7.4.2\">7.4.2</a>. Server \n   <a href=\"#section-8\">8</a>. IANA Considerations \n      <a href=\"#section-8.1\">8.1</a>. Method Registry \n           <a href=\"#section-8.1.1\">8.1.1</a>. Procedure \n           <a href=\"#section-8.1.2\">8.1.2</a>. Considerations for New Methods \n           <a href=\"#section-8.1.3\">8.1.3</a>. Registrations \n      <a href=\"#section-8.2\">8.2</a>. Status Code Registry \n           <a href=\"#section-8.2.1\">8.2.1</a>. Procedure \n           <a href=\"#section-8.2.2\">8.2.2</a>. Considerations for New Status Codes \n           <a href=\"#section-8.2.3\">8.2.3</a>. Registrations \n      <a href=\"#section-8.3\">8.3</a>. Header Field Registry \n           <a href=\"#section-8.3.1\">8.3.1</a>. Considerations for New Header Fields \n           <a href=\"#section-8.3.2\">8.3.2</a>. Registrations \n      <a href=\"#section-8.4\">8.4</a>. Content Coding Registry \n           <a href=\"#section-8.4.1\">8.4.1</a>. Procedure \n           <a href=\"#section-8.4.2\">8.4.2</a>. Registrations \n   <a href=\"#section-9\">9</a>. Security Considerations \n      <a href=\"#section-9.1\">9.1</a>. Attacks Based on File and Path Names \n      <a href=\"#section-9.2\">9.2</a>. Attacks Based on Command, Code, or Query Injection \n      <a href=\"#section-9.3\">9.3</a>. Disclosure of Personal Information \n      <a href=\"#section-9.4\">9.4</a>. Disclosure of Sensitive Information in URIs \n      <a href=\"#section-9.5\">9.5</a>. Disclosure of Fragment after Redirects \n      <a href=\"#section-9.6\">9.6</a>. Disclosure of Product Information \n      <a href=\"#section-9.7\">9.7</a>. Browser Fingerprinting \n   <a href=\"#section-10\">10</a>. Acknowledgments \n   <a href=\"#section-11\">11</a>. References \n      <a href=\"#section-11.1\">11.1</a>. Normative References \n      <a href=\"#section-11.2\">11.2</a>. Informative References \n   <a href=\"#appendix-A\">Appendix A</a>. Differences between HTTP and MIME \n      <a href=\"#appendix-A.1\">A.1</a>. MIME-Version \n      <a href=\"#appendix-A.2\">A.2</a>. Conversion to Canonical Form \n      <a href=\"#appendix-A.3\">A.3</a>. Conversion of Date Formats \n      <a href=\"#appendix-A.4\">A.4</a>. Conversion of Content-Encoding \n      <a href=\"#appendix-A.5\">A.5</a>. Conversion of Content-Transfer-Encoding \n      <a href=\"#appendix-A.6\">A.6</a>. MHTML and Line Length Limitations \n   <a href=\"#appendix-B\">Appendix B</a>. Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a> \n   <a href=\"#appendix-C\">Appendix C</a>. Imported ABNF \n   <a href=\"#appendix-D\">Appendix D</a>. Collected ABNF \n   Index \n\n<h2 class=\"h2\" id=\"section-1\">1.  Introduction</h2>\n   Each Hypertext Transfer Protocol (HTTP) message is either a request\n   or a response.  A server listens on a connection for a request,\n   parses each message received, interprets the message semantics in\n   relation to the identified request target, and responds to that\n   request with one or more response messages.  A client constructs\n   request messages to communicate specific intentions, examines\n   received responses to see if the intentions were carried out, and\n   determines how to interpret the results.  This document defines\n   HTTP/1.1 request and response semantics in terms of the architecture\n   defined in [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>].\n\n   HTTP provides a uniform interface for interacting with a resource\n   (<a href=\"#section-2\">Section 2</a>), regardless of its type, nature, or implementation, via\n   the manipulation and transfer of representations (<a href=\"#section-3\">Section 3</a>).\n\n   HTTP semantics include the intentions defined by each request method\n   (<a href=\"#section-4\">Section 4</a>), extensions to those semantics that might be described in\n   request header fields (<a href=\"#section-5\">Section 5</a>), the meaning of status codes to\n   indicate a machine-readable response (<a href=\"#section-6\">Section 6</a>), and the meaning of\n   other control data and resource metadata that might be given in\n   response header fields (<a href=\"#section-7\">Section 7</a>).\n\n   This document also defines representation metadata that describe how\n   a payload is intended to be interpreted by a recipient, the request\n   header fields that might influence content selection, and the various\n   selection algorithms that are collectively referred to as \"content\n   negotiation\" (<a href=\"#section-3.4\">Section 3.4</a>).\n\n<h3 class=\"h3\" id=\"section-1.1\">1.1.  Conformance and Error Handling</h3>\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described in [<a href=\"https://tools.ietf.org/html/rfc2119\" title='\"Key words for use in RFCs to Indicate Requirement Levels\"'>RFC2119</a>].\n\n   Conformance criteria and considerations regarding error handling are\n   defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-2.5\">Section 2.5 of [RFC7230]</a>.\n\n<h3 class=\"h3\" id=\"section-1.2\">1.2.  Syntax Notation</h3>\n   This specification uses the Augmented Backus-Naur Form (ABNF)\n   notation of [<a href=\"https://tools.ietf.org/html/rfc5234\" title='\"Augmented BNF for Syntax Specifications: ABNF\"'>RFC5234</a>] with a list extension, defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-7\">Section 7 of\n   [RFC7230]</a>, that allows for compact definition of comma-separated\n   lists using a '#' operator (similar to how the '*' operator indicates\n   repetition).  <a href=\"#appendix-C\">Appendix C</a> describes rules imported from other\n   documents.  <a href=\"#appendix-D\">Appendix D</a> shows the collected grammar with all list\n   operators expanded to standard ABNF notation.\n\n   This specification uses the terms \"character\", \"character encoding\n   scheme\", \"charset\", and \"protocol element\" as they are defined in\n   [<a href=\"https://tools.ietf.org/html/rfc6365\" title='\"Terminology Used in Internationalization in the IETF\"'>RFC6365</a>].\n\n<h2 class=\"h2\" id=\"section-2\">2.  Resources</h2>\n   The target of an HTTP request is called a \"resource\".  HTTP does not\n   limit the nature of a resource; it merely defines an interface that\n   might be used to interact with resources.  Each resource is\n   identified by a Uniform Resource Identifier (URI), as described in\n   <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">Section 2.7 of [RFC7230]</a>.\n\n   When a client constructs an HTTP/1.1 request message, it sends the\n   target URI in one of various forms, as defined in (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.3\">Section 5.3 of\n   [RFC7230]</a>).  When a request is received, the server reconstructs an\n   effective request URI for the target resource (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">Section 5.5 of\n   [RFC7230]</a>).\n\n   One design goal of HTTP is to separate resource identification from\n   request semantics, which is made possible by vesting the request\n   semantics in the request method (<a href=\"#section-4\">Section 4</a>) and a few\n   request-modifying header fields (<a href=\"#section-5\">Section 5</a>).  If there is a conflict\n   between the method semantics and any semantic implied by the URI\n   itself, as described in <a href=\"#section-4.2.1\">Section 4.2.1</a>, the method semantics take\n   precedence.\n\n<h2 class=\"h2\" id=\"section-3\">3.  Representations</h2>\n   Considering that a resource could be anything, and that the uniform\n   interface provided by HTTP is similar to a window through which one\n   can observe and act upon such a thing only through the communication\n   of messages to some independent actor on the other side, an\n   abstraction is needed to represent (\"take the place of\") the current\n   or desired state of that thing in our communications.  That\n   abstraction is called a representation [<a href=\"#ref-REST\" title='\"Architectural Styles and the Design of Network-based Software Architectures\"'>REST</a>].\n\n   For the purposes of HTTP, a \"representation\" is information that is\n   intended to reflect a past, current, or desired state of a given\n   resource, in a format that can be readily communicated via the\n   protocol, and that consists of a set of representation metadata and a\n   potentially unbounded stream of representation data.\n\n   An origin server might be provided with, or be capable of generating,\n   multiple representations that are each intended to reflect the\n   current state of a target resource.  In such cases, some algorithm is\n   used by the origin server to select one of those representations as\n   most applicable to a given request, usually based on content\n   negotiation.  This \"selected representation\" is used to provide the\n\n   data and metadata for evaluating conditional requests [<a href=\"https://tools.ietf.org/html/rfc7232\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\"'>RFC7232</a>] and\n   constructing the payload for 200 (OK) and 304 (Not Modified)\n   responses to GET (<a href=\"#section-4.3.1\">Section 4.3.1</a>).\n\n<h3 class=\"h3\" id=\"section-3.1\">3.1.  Representation Metadata</h3>\n   Representation header fields provide metadata about the\n   representation.  When a message includes a payload body, the\n   representation header fields describe how to interpret the\n   representation data enclosed in the payload body.  In a response to a\n   HEAD request, the representation header fields describe the\n   representation data that would have been enclosed in the payload body\n   if the same request had been a GET.\n\n   The following header fields convey representation metadata:\n\n   +-------------------+-----------------+\n   | Header Field Name | Defined in...   |\n   +-------------------+-----------------+\n   | Content-Type      | <a href=\"#section-3.1.1.5\">Section 3.1.1.5</a> |\n   | Content-Encoding  | <a href=\"#section-3.1.2.2\">Section 3.1.2.2</a> |\n   | Content-Language  | <a href=\"#section-3.1.3.2\">Section 3.1.3.2</a> |\n   | Content-Location  | <a href=\"#section-3.1.4.2\">Section 3.1.4.2</a> |\n   +-------------------+-----------------+\n\n<h4 class=\"h4\" id=\"section-3.1.1\">3.1.1.  Processing Representation Data</h4>\n<h5 class=\"h5\" id=\"section-3.1.1.1\">3.1.1.1.  Media Type</h5>\n   HTTP uses Internet media types [<a href=\"https://tools.ietf.org/html/rfc2046\" title='\"Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types\"'>RFC2046</a>] in the Content-Type\n   (<a href=\"#section-3.1.1.5\">Section 3.1.1.5</a>) and Accept (<a href=\"#section-5.3.2\">Section 5.3.2</a>) header fields in order\n   to provide open and extensible data typing and type negotiation.\n   Media types define both a data format and various processing models:\n   how to process that data in accordance with each context in which it\n   is received.\n\n     media-type = type \"/\" subtype *( OWS \";\" OWS parameter )\n     type       = token\n     subtype    = token\n\n   The type/subtype MAY be followed by parameters in the form of\n   name=value pairs.\n\n     parameter      = token \"=\" ( token / quoted-string )\n\n   The type, subtype, and parameter name tokens are case-insensitive.\n   Parameter values might or might not be case-sensitive, depending on\n   the semantics of the parameter name.  The presence or absence of a\n   parameter might be significant to the processing of a media-type,\n   depending on its definition within the media type registry.\n\n   A parameter value that matches the token production can be\n   transmitted either as a token or within a quoted-string.  The quoted\n   and unquoted values are equivalent.  For example, the following\n   examples are all equivalent, but the first is preferred for\n   consistency:\n\n     text/html;charset=utf-8\n     text/html;charset=UTF-8\n     Text/HTML;Charset=\"utf-8\"\n     text/html; charset=\"utf-8\"\n\n   Internet media types ought to be registered with IANA according to\n   the procedures defined in [<a href=\"#ref-BCP13\" title='\"Media Type Specifications and Registration Procedures\"'>BCP13</a>].\n\n      Note: Unlike some similar constructs in other header fields, media\n      type parameters do not allow whitespace (even \"bad\" whitespace)\n      around the \"=\" character.\n\n<h5 class=\"h5\" id=\"section-3.1.1.2\">3.1.1.2.  Charset</h5>\n   HTTP uses charset names to indicate or negotiate the character\n   encoding scheme of a textual representation [<a href=\"https://tools.ietf.org/html/rfc6365\" title='\"Terminology Used in Internationalization in the IETF\"'>RFC6365</a>].  A charset is\n   identified by a case-insensitive token.\n\n     charset = token\n\n   Charset names ought to be registered in the IANA \"Character Sets\"\n   registry (&lt;<a href=\"http://www.iana.org/assignments/character-sets\">http://www.iana.org/assignments/character-sets</a>&gt;) according\n   to the procedures defined in [<a href=\"https://tools.ietf.org/html/rfc2978\" title='\"IANA Charset Registration Procedures\"'>RFC2978</a>].\n\n<h5 class=\"h5\" id=\"section-3.1.1.3\">3.1.1.3.  Canonicalization and Text Defaults</h5>\n   Internet media types are registered with a canonical form in order to\n   be interoperable among systems with varying native encoding formats.\n   Representations selected or transferred via HTTP ought to be in\n   canonical form, for many of the same reasons described by the\n   Multipurpose Internet Mail Extensions (MIME) [<a href=\"https://tools.ietf.org/html/rfc2045\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>RFC2045</a>].  However, the\n   performance characteristics of email deployments (i.e., store and\n   forward messages to peers) are significantly different from those\n   common to HTTP and the Web (server-based information services).\n   Furthermore, MIME's constraints for the sake of compatibility with\n   older mail transfer protocols do not apply to HTTP (see <a href=\"#appendix-A\">Appendix A</a>).\n\n   MIME's canonical form requires that media subtypes of the \"text\" type\n   use CRLF as the text line break.  HTTP allows the transfer of text\n   media with plain CR or LF alone representing a line break, when such\n   line breaks are consistent for an entire representation.  An HTTP\n   sender MAY generate, and a recipient MUST be able to parse, line\n   breaks in text media that consist of CRLF, bare CR, or bare LF.  In\n   addition, text media in HTTP is not limited to charsets that use\n   octets 13 and 10 for CR and LF, respectively.  This flexibility\n   regarding line breaks applies only to text within a representation\n   that has been assigned a \"text\" media type; it does not apply to\n   \"multipart\" types or HTTP elements outside the payload body (e.g.,\n   header fields).\n\n   If a representation is encoded with a content-coding, the underlying\n   data ought to be in a form defined above prior to being encoded.\n\n<h5 class=\"h5\" id=\"section-3.1.1.4\">3.1.1.4.  Multipart Types</h5>\n   MIME provides for a number of \"multipart\" types -- encapsulations of\n   one or more representations within a single message body.  All\n   multipart types share a common syntax, as defined in <a href=\"https://tools.ietf.org/html/rfc2046#section-5.1.1\">Section 5.1.1 of\n   [RFC2046]</a>, and include a boundary parameter as part of the media type\n   value.  The message body is itself a protocol element; a sender MUST\n   generate only CRLF to represent line breaks between body parts.\n\n   HTTP message framing does not use the multipart boundary as an\n   indicator of message body length, though it might be used by\n   implementations that generate or process the payload.  For example,\n   the \"multipart/form-data\" type is often used for carrying form data\n   in a request, as described in [<a href=\"https://tools.ietf.org/html/rfc2388\" title='\"Returning Values from Forms: multipart/ form-data\"'>RFC2388</a>], and the \"multipart/\n   byteranges\" type is defined by this specification for use in some 206\n   (Partial Content) responses [<a href=\"https://tools.ietf.org/html/rfc7233\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\"'>RFC7233</a>].\n\n<h5 class=\"h5\" id=\"section-3.1.1.5\">3.1.1.5.  Content-Type</h5>\n   The \"Content-Type\" header field indicates the media type of the\n   associated representation: either the representation enclosed in the\n   message payload or the selected representation, as determined by the\n   message semantics.  The indicated media type defines both the data\n   format and how that data is intended to be processed by a recipient,\n   within the scope of the received message semantics, after any content\n   codings indicated by Content-Encoding are decoded.\n\n     Content-Type = media-type\n\n   Media types are defined in <a href=\"#section-3.1.1.1\">Section 3.1.1.1</a>.  An example of the field\n   is\n\n     Content-Type: text/html; charset=ISO-8859-4\n\n   A sender that generates a message containing a payload body SHOULD\n   generate a Content-Type header field in that message unless the\n   intended media type of the enclosed representation is unknown to the\n   sender.  If a Content-Type header field is not present, the recipient\n   MAY either assume a media type of \"application/octet-stream\"\n   (<a href=\"https://tools.ietf.org/html/rfc2046#section-4.5.1\">[RFC2046], Section 4.5.1</a>) or examine the data to determine its type.\n\n   In practice, resource owners do not always properly configure their\n   origin server to provide the correct Content-Type for a given\n   representation, with the result that some clients will examine a\n   payload's content and override the specified type.  Clients that do\n   so risk drawing incorrect conclusions, which might expose additional\n   security risks (e.g., \"privilege escalation\").  Furthermore, it is\n   impossible to determine the sender's intent by examining the data\n   format: many data formats match multiple media types that differ only\n   in processing semantics.  Implementers are encouraged to provide a\n   means of disabling such \"content sniffing\" when it is used.\n\n<h4 class=\"h4\" id=\"section-3.1.2\">3.1.2.  Encoding for Compression or Integrity</h4>\n<h5 class=\"h5\" id=\"section-3.1.2.1\">3.1.2.1.  Content Codings</h5>\n   Content coding values indicate an encoding transformation that has\n   been or can be applied to a representation.  Content codings are\n   primarily used to allow a representation to be compressed or\n   otherwise usefully transformed without losing the identity of its\n   underlying media type and without loss of information.  Frequently,\n   the representation is stored in coded form, transmitted directly, and\n   only decoded by the final recipient.\n\n     content-coding   = token\n\n   All content-coding values are case-insensitive and ought to be\n   registered within the \"HTTP Content Coding Registry\", as defined in\n   <a href=\"#section-8.4\">Section 8.4</a>.  They are used in the Accept-Encoding (<a href=\"#section-5.3.4\">Section 5.3.4</a>)\n   and Content-Encoding (<a href=\"#section-3.1.2.2\">Section 3.1.2.2</a>) header fields.\n\n   The following content-coding values are defined by this\n   specification:\n\n      compress (and x-compress): See <a href=\"https://tools.ietf.org/html/rfc7230#section-4.2.1\">Section 4.2.1 of [RFC7230]</a>.\n\n      deflate: See <a href=\"https://tools.ietf.org/html/rfc7230#section-4.2.2\">Section 4.2.2 of [RFC7230]</a>.\n\n      gzip (and x-gzip): See <a href=\"https://tools.ietf.org/html/rfc7230#section-4.2.3\">Section 4.2.3 of [RFC7230]</a>.\n\n<h5 class=\"h5\" id=\"section-3.1.2.2\">3.1.2.2.  Content-Encoding</h5>\n   The \"Content-Encoding\" header field indicates what content codings\n   have been applied to the representation, beyond those inherent in the\n   media type, and thus what decoding mechanisms have to be applied in\n   order to obtain data in the media type referenced by the Content-Type\n   header field.  Content-Encoding is primarily used to allow a\n   representation's data to be compressed without losing the identity of\n   its underlying media type.\n\n     Content-Encoding = 1#content-coding\n\n   An example of its use is\n\n     Content-Encoding: gzip\n\n   If one or more encodings have been applied to a representation, the\n   sender that applied the encodings MUST generate a Content-Encoding\n   header field that lists the content codings in the order in which\n   they were applied.  Additional information about the encoding\n   parameters can be provided by other header fields not defined by this\n   specification.\n\n   Unlike Transfer-Encoding (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.1\">Section 3.3.1 of [RFC7230]</a>), the codings\n   listed in Content-Encoding are a characteristic of the\n   representation; the representation is defined in terms of the coded\n   form, and all other metadata about the representation is about the\n   coded form unless otherwise noted in the metadata definition.\n   Typically, the representation is only decoded just prior to rendering\n   or analogous usage.\n\n   If the media type includes an inherent encoding, such as a data\n   format that is always compressed, then that encoding would not be\n   restated in Content-Encoding even if it happens to be the same\n   algorithm as one of the content codings.  Such a content coding would\n   only be listed if, for some bizarre reason, it is applied a second\n   time to form the representation.  Likewise, an origin server might\n   choose to publish the same data as multiple representations that\n   differ only in whether the coding is defined as part of Content-Type\n\n   or Content-Encoding, since some user agents will behave differently\n   in their handling of each response (e.g., open a \"Save as ...\" dialog\n   instead of automatic decompression and rendering of content).\n\n   An origin server MAY respond with a status code of 415 (Unsupported\n   Media Type) if a representation in the request message has a content\n   coding that is not acceptable.\n\n<h4 class=\"h4\" id=\"section-3.1.3\">3.1.3.  Audience Language</h4>\n<h5 class=\"h5\" id=\"section-3.1.3.1\">3.1.3.1.  Language Tags</h5>\n   A language tag, as defined in [<a href=\"https://tools.ietf.org/html/rfc5646\" title='\"Tags for Identifying Languages\"'>RFC5646</a>], identifies a natural\n   language spoken, written, or otherwise conveyed by human beings for\n   communication of information to other human beings.  Computer\n   languages are explicitly excluded.\n\n   HTTP uses language tags within the Accept-Language and\n   Content-Language header fields.  Accept-Language uses the broader\n   language-range production defined in <a href=\"#section-5.3.5\">Section 5.3.5</a>, whereas\n   Content-Language uses the language-tag production defined below.\n\n     language-tag = &lt;Language-Tag, see <a href=\"https://tools.ietf.org/html/rfc5646#section-2.1\">[RFC5646], Section 2.1</a>&gt;\n\n   A language tag is a sequence of one or more case-insensitive subtags,\n   each separated by a hyphen character (\"-\", %x2D).  In most cases, a\n   language tag consists of a primary language subtag that identifies a\n   broad family of related languages (e.g., \"en\" = English), which is\n   optionally followed by a series of subtags that refine or narrow that\n   language's range (e.g., \"en-CA\" = the variety of English as\n   communicated in Canada).  Whitespace is not allowed within a language\n   tag.  Example tags include:\n\n     fr, en-US, es-419, az-Arab, x-pig-latin, man-Nkoo-GN\n\n   See [<a href=\"https://tools.ietf.org/html/rfc5646\" title='\"Tags for Identifying Languages\"'>RFC5646</a>] for further information.\n\n<h5 class=\"h5\" id=\"section-3.1.3.2\">3.1.3.2.  Content-Language</h5>\n   The \"Content-Language\" header field describes the natural language(s)\n   of the intended audience for the representation.  Note that this\n   might not be equivalent to all the languages used within the\n   representation.\n\n     Content-Language = 1#language-tag\n\n   Language tags are defined in <a href=\"#section-3.1.3.1\">Section 3.1.3.1</a>.  The primary purpose of\n   Content-Language is to allow a user to identify and differentiate\n   representations according to the users' own preferred language.\n   Thus, if the content is intended only for a Danish-literate audience,\n   the appropriate field is\n\n     Content-Language: da\n\n   If no Content-Language is specified, the default is that the content\n   is intended for all language audiences.  This might mean that the\n   sender does not consider it to be specific to any natural language,\n   or that the sender does not know for which language it is intended.\n\n   Multiple languages MAY be listed for content that is intended for\n   multiple audiences.  For example, a rendition of the \"Treaty of\n   Waitangi\", presented simultaneously in the original Maori and English\n   versions, would call for\n\n     Content-Language: mi, en\n\n   However, just because multiple languages are present within a\n   representation does not mean that it is intended for multiple\n   linguistic audiences.  An example would be a beginner's language\n   primer, such as \"A First Lesson in Latin\", which is clearly intended\n   to be used by an English-literate audience.  In this case, the\n   Content-Language would properly only include \"en\".\n\n   Content-Language MAY be applied to any media type -- it is not\n   limited to textual documents.\n\n<h4 class=\"h4\" id=\"section-3.1.4\">3.1.4.  Identification</h4>\n<h5 class=\"h5\" id=\"section-3.1.4.1\">3.1.4.1.  Identifying a Representation</h5>\n   When a complete or partial representation is transferred in a message\n   payload, it is often desirable for the sender to supply, or the\n   recipient to determine, an identifier for a resource corresponding to\n   that representation.\n\n   For a request message:\n\n   o  If the request has a Content-Location header field, then the\n      sender asserts that the payload is a representation of the\n      resource identified by the Content-Location field-value.  However,\n      such an assertion cannot be trusted unless it can be verified by\n      other means (not defined by this specification).  The information\n      might still be useful for revision history links.\n\n   o  Otherwise, the payload is unidentified.\n\n   For a response message, the following rules are applied in order\n   until a match is found:\n\n   1.  If the request method is GET or HEAD and the response status code\n       is 200 (OK), 204 (No Content), 206 (Partial Content), or 304 (Not\n       Modified), the payload is a representation of the resource\n       identified by the effective request URI (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">Section 5.5 of\n       [RFC7230]</a>).\n\n   2.  If the request method is GET or HEAD and the response status code\n       is 203 (Non-Authoritative Information), the payload is a\n       potentially modified or enhanced representation of the target\n       resource as provided by an intermediary.\n\n   3.  If the response has a Content-Location header field and its\n       field-value is a reference to the same URI as the effective\n       request URI, the payload is a representation of the resource\n       identified by the effective request URI.\n\n   4.  If the response has a Content-Location header field and its\n       field-value is a reference to a URI different from the effective\n       request URI, then the sender asserts that the payload is a\n       representation of the resource identified by the Content-Location\n       field-value.  However, such an assertion cannot be trusted unless\n       it can be verified by other means (not defined by this\n       specification).\n\n   5.  Otherwise, the payload is unidentified.\n\n<h5 class=\"h5\" id=\"section-3.1.4.2\">3.1.4.2.  Content-Location</h5>\n   The \"Content-Location\" header field references a URI that can be used\n   as an identifier for a specific resource corresponding to the\n   representation in this message's payload.  In other words, if one\n   were to perform a GET request on this URI at the time of this\n   message's generation, then a 200 (OK) response would contain the same\n   representation that is enclosed as payload in this message.\n\n     Content-Location = absolute-URI / partial-URI\n\n   The Content-Location value is not a replacement for the effective\n   Request URI (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">Section 5.5 of [RFC7230]</a>).  It is representation\n   metadata.  It has the same syntax and semantics as the header field\n   of the same name defined for MIME body parts in <a href=\"https://tools.ietf.org/html/rfc2557#section-4\">Section 4 of\n   [RFC2557]</a>.  However, its appearance in an HTTP message has some\n   special implications for HTTP recipients.\n\n   If Content-Location is included in a 2xx (Successful) response\n   message and its value refers (after conversion to absolute form) to a\n   URI that is the same as the effective request URI, then the recipient\n   MAY consider the payload to be a current representation of that\n   resource at the time indicated by the message origination date.  For\n   a GET (<a href=\"#section-4.3.1\">Section 4.3.1</a>) or HEAD (<a href=\"#section-4.3.2\">Section 4.3.2</a>) request, this is the\n   same as the default semantics when no Content-Location is provided by\n   the server.  For a state-changing request like PUT (<a href=\"#section-4.3.4\">Section 4.3.4</a>) or\n   POST (<a href=\"#section-4.3.3\">Section 4.3.3</a>), it implies that the server's response contains\n   the new representation of that resource, thereby distinguishing it\n   from representations that might only report about the action (e.g.,\n   \"It worked!\").  This allows authoring applications to update their\n   local copies without the need for a subsequent GET request.\n\n   If Content-Location is included in a 2xx (Successful) response\n   message and its field-value refers to a URI that differs from the\n   effective request URI, then the origin server claims that the URI is\n   an identifier for a different resource corresponding to the enclosed\n   representation.  Such a claim can only be trusted if both identifiers\n   share the same resource owner, which cannot be programmatically\n   determined via HTTP.\n\n   o  For a response to a GET or HEAD request, this is an indication\n      that the effective request URI refers to a resource that is\n      subject to content negotiation and the Content-Location\n      field-value is a more specific identifier for the selected\n      representation.\n\n   o  For a 201 (Created) response to a state-changing method, a\n      Content-Location field-value that is identical to the Location\n      field-value indicates that this payload is a current\n      representation of the newly created resource.\n\n   o  Otherwise, such a Content-Location indicates that this payload is\n      a representation reporting on the requested action's status and\n      that the same report is available (for future access with GET) at\n      the given URI.  For example, a purchase transaction made via a\n      POST request might include a receipt document as the payload of\n      the 200 (OK) response; the Content-Location field-value provides\n      an identifier for retrieving a copy of that same receipt in the\n      future.\n\n   A user agent that sends Content-Location in a request message is\n   stating that its value refers to where the user agent originally\n   obtained the content of the enclosed representation (prior to any\n   modifications made by that user agent).  In other words, the user\n   agent is providing a back link to the source of the original\n   representation.\n\n   An origin server that receives a Content-Location field in a request\n   message MUST treat the information as transitory request context\n   rather than as metadata to be saved verbatim as part of the\n   representation.  An origin server MAY use that context to guide in\n   processing the request or to save it for other uses, such as within\n   source links or versioning metadata.  However, an origin server MUST\n   NOT use such context information to alter the request semantics.\n\n   For example, if a client makes a PUT request on a negotiated resource\n   and the origin server accepts that PUT (without redirection), then\n   the new state of that resource is expected to be consistent with the\n   one representation supplied in that PUT; the Content-Location cannot\n   be used as a form of reverse content selection identifier to update\n   only one of the negotiated representations.  If the user agent had\n   wanted the latter semantics, it would have applied the PUT directly\n   to the Content-Location URI.\n\n<h3 class=\"h3\" id=\"section-3.2\">3.2.  Representation Data</h3>\n   The representation data associated with an HTTP message is either\n   provided as the payload body of the message or referred to by the\n   message semantics and the effective request URI.  The representation\n   data is in a format and encoding defined by the representation\n   metadata header fields.\n\n   The data type of the representation data is determined via the header\n   fields Content-Type and Content-Encoding.  These define a two-layer,\n   ordered encoding model:\n\n     representation-data := Content-Encoding( Content-Type( bits ) )\n\n<h3 class=\"h3\" id=\"section-3.3\">3.3.  Payload Semantics</h3>\n   Some HTTP messages transfer a complete or partial representation as\n   the message \"payload\".  In some cases, a payload might contain only\n   the associated representation's header fields (e.g., responses to\n   HEAD) or only some part(s) of the representation data (e.g., the 206\n   (Partial Content) status code).\n\n   The purpose of a payload in a request is defined by the method\n   semantics.  For example, a representation in the payload of a PUT\n   request (<a href=\"#section-4.3.4\">Section 4.3.4</a>) represents the desired state of the target\n   resource if the request is successfully applied, whereas a\n   representation in the payload of a POST request (<a href=\"#section-4.3.3\">Section 4.3.3</a>)\n   represents information to be processed by the target resource.\n\n   In a response, the payload's purpose is defined by both the request\n   method and the response status code.  For example, the payload of a\n   200 (OK) response to GET (<a href=\"#section-4.3.1\">Section 4.3.1</a>) represents the current state\n   of the target resource, as observed at the time of the message\n   origination date (<a href=\"#section-7.1.1.2\">Section 7.1.1.2</a>), whereas the payload of the same\n   status code in a response to POST might represent either the\n   processing result or the new state of the target resource after\n   applying the processing.  Response messages with an error status code\n   usually contain a payload that represents the error condition, such\n   that it describes the error state and what next steps are suggested\n   for resolving it.\n\n   Header fields that specifically describe the payload, rather than the\n   associated representation, are referred to as \"payload header\n   fields\".  Payload header fields are defined in other parts of this\n   specification, due to their impact on message parsing.\n\n   +-------------------+----------------------------+\n   | Header Field Name | Defined in...              |\n   +-------------------+----------------------------+\n   | Content-Length    | <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.2\">Section 3.3.2 of [RFC7230]</a> |\n   | Content-Range     | <a href=\"https://tools.ietf.org/html/rfc7233#section-4.2\">Section 4.2 of [RFC7233]</a>   |\n   | Trailer           | <a href=\"https://tools.ietf.org/html/rfc7230#section-4.4\">Section 4.4 of [RFC7230]</a>   |\n   | Transfer-Encoding | <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.1\">Section 3.3.1 of [RFC7230]</a> |\n   +-------------------+----------------------------+\n\n<h3 class=\"h3\" id=\"section-3.4\">3.4.  Content Negotiation</h3>\n   When responses convey payload information, whether indicating a\n   success or an error, the origin server often has different ways of\n   representing that information; for example, in different formats,\n   languages, or encodings.  Likewise, different users or user agents\n   might have differing capabilities, characteristics, or preferences\n   that could influence which representation, among those available,\n   would be best to deliver.  For this reason, HTTP provides mechanisms\n   for content negotiation.\n\n   This specification defines two patterns of content negotiation that\n   can be made visible within the protocol: \"proactive\", where the\n   server selects the representation based upon the user agent's stated\n   preferences, and \"reactive\" negotiation, where the server provides a\n   list of representations for the user agent to choose from.  Other\n   patterns of content negotiation include \"conditional content\", where\n   the representation consists of multiple parts that are selectively\n   rendered based on user agent parameters, \"active content\", where the\n   representation contains a script that makes additional (more\n   specific) requests based on the user agent characteristics, and\n   \"Transparent Content Negotiation\" ([<a href=\"https://tools.ietf.org/html/rfc2295\" title='\"Transparent Content Negotiation in HTTP\"'>RFC2295</a>]), where content\n\n   selection is performed by an intermediary.  These patterns are not\n   mutually exclusive, and each has trade-offs in applicability and\n   practicality.\n\n   Note that, in all cases, HTTP is not aware of the resource semantics.\n   The consistency with which an origin server responds to requests,\n   over time and over the varying dimensions of content negotiation, and\n   thus the \"sameness\" of a resource's observed representations over\n   time, is determined entirely by whatever entity or algorithm selects\n   or generates those responses.  HTTP pays no attention to the man\n   behind the curtain.\n\n<h4 class=\"h4\" id=\"section-3.4.1\">3.4.1.  Proactive Negotiation</h4>\n   When content negotiation preferences are sent by the user agent in a\n   request to encourage an algorithm located at the server to select the\n   preferred representation, it is called proactive negotiation (a.k.a.,\n   server-driven negotiation).  Selection is based on the available\n   representations for a response (the dimensions over which it might\n   vary, such as language, content-coding, etc.) compared to various\n   information supplied in the request, including both the explicit\n   negotiation fields of <a href=\"#section-5.3\">Section 5.3</a> and implicit characteristics, such\n   as the client's network address or parts of the User-Agent field.\n\n   Proactive negotiation is advantageous when the algorithm for\n   selecting from among the available representations is difficult to\n   describe to a user agent, or when the server desires to send its\n   \"best guess\" to the user agent along with the first response (hoping\n   to avoid the round trip delay of a subsequent request if the \"best\n   guess\" is good enough for the user).  In order to improve the\n   server's guess, a user agent MAY send request header fields that\n   describe its preferences.\n\n   Proactive negotiation has serious disadvantages:\n\n   o  It is impossible for the server to accurately determine what might\n      be \"best\" for any given user, since that would require complete\n      knowledge of both the capabilities of the user agent and the\n      intended use for the response (e.g., does the user want to view it\n      on screen or print it on paper?);\n\n   o  Having the user agent describe its capabilities in every request\n      can be both very inefficient (given that only a small percentage\n      of responses have multiple representations) and a potential risk\n      to the user's privacy;\n\n   o  It complicates the implementation of an origin server and the\n      algorithms for generating responses to a request; and,\n\n   o  It limits the reusability of responses for shared caching.\n\n   A user agent cannot rely on proactive negotiation preferences being\n   consistently honored, since the origin server might not implement\n   proactive negotiation for the requested resource or might decide that\n   sending a response that doesn't conform to the user agent's\n   preferences is better than sending a 406 (Not Acceptable) response.\n\n   A Vary header field (<a href=\"#section-7.1.4\">Section 7.1.4</a>) is often sent in a response\n   subject to proactive negotiation to indicate what parts of the\n   request information were used in the selection algorithm.\n\n<h4 class=\"h4\" id=\"section-3.4.2\">3.4.2.  Reactive Negotiation</h4>\n   With reactive negotiation (a.k.a., agent-driven negotiation),\n   selection of the best response representation (regardless of the\n   status code) is performed by the user agent after receiving an\n   initial response from the origin server that contains a list of\n   resources for alternative representations.  If the user agent is not\n   satisfied by the initial response representation, it can perform a\n   GET request on one or more of the alternative resources, selected\n   based on metadata included in the list, to obtain a different form of\n   representation for that response.  Selection of alternatives might be\n   performed automatically by the user agent or manually by the user\n   selecting from a generated (possibly hypertext) menu.\n\n   Note that the above refers to representations of the response, in\n   general, not representations of the resource.  The alternative\n   representations are only considered representations of the target\n   resource if the response in which those alternatives are provided has\n   the semantics of being a representation of the target resource (e.g.,\n   a 200 (OK) response to a GET request) or has the semantics of\n   providing links to alternative representations for the target\n   resource (e.g., a 300 (Multiple Choices) response to a GET request).\n\n   A server might choose not to send an initial representation, other\n   than the list of alternatives, and thereby indicate that reactive\n   negotiation by the user agent is preferred.  For example, the\n   alternatives listed in responses with the 300 (Multiple Choices) and\n   406 (Not Acceptable) status codes include information about the\n   available representations so that the user or user agent can react by\n   making a selection.\n\n   Reactive negotiation is advantageous when the response would vary\n   over commonly used dimensions (such as type, language, or encoding),\n   when the origin server is unable to determine a user agent's\n   capabilities from examining the request, and generally when public\n   caches are used to distribute server load and reduce network usage.\n\n   Reactive negotiation suffers from the disadvantages of transmitting a\n   list of alternatives to the user agent, which degrades user-perceived\n   latency if transmitted in the header section, and needing a second\n   request to obtain an alternate representation.  Furthermore, this\n   specification does not define a mechanism for supporting automatic\n   selection, though it does not prevent such a mechanism from being\n   developed as an extension.\n\n<h2 class=\"h2\" id=\"section-4\">4.  Request Methods</h2>\n<h3 class=\"h3\" id=\"section-4.1\">4.1.  Overview</h3>\n   The request method token is the primary source of request semantics;\n   it indicates the purpose for which the client has made this request\n   and what is expected by the client as a successful result.\n\n   The request method's semantics might be further specialized by the\n   semantics of some header fields when present in a request (<a href=\"#section-5\">Section 5</a>)\n   if those additional semantics do not conflict with the method.  For\n   example, a client can send conditional request header fields\n   (<a href=\"#section-5.2\">Section 5.2</a>) to make the requested action conditional on the current\n   state of the target resource ([<a href=\"https://tools.ietf.org/html/rfc7232\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\"'>RFC7232</a>]).\n\n     method = token\n\n   HTTP was originally designed to be usable as an interface to\n   distributed object systems.  The request method was envisioned as\n   applying semantics to a target resource in much the same way as\n   invoking a defined method on an identified object would apply\n   semantics.  The method token is case-sensitive because it might be\n   used as a gateway to object-based systems with case-sensitive method\n   names.\n\n   Unlike distributed objects, the standardized request methods in HTTP\n   are not resource-specific, since uniform interfaces provide for\n   better visibility and reuse in network-based systems [<a href=\"#ref-REST\" title='\"Architectural Styles and the Design of Network-based Software Architectures\"'>REST</a>].  Once\n   defined, a standardized method ought to have the same semantics when\n   applied to any resource, though each resource determines for itself\n   whether those semantics are implemented or allowed.\n\n   This specification defines a number of standardized methods that are\n   commonly used in HTTP, as outlined by the following table.  By\n   convention, standardized methods are defined in all-uppercase\n   US-ASCII letters.\n\n   +---------+-------------------------------------------------+-------+\n   | Method  | Description                                     | Sec.  |\n   +---------+-------------------------------------------------+-------+\n   | GET     | Transfer a current representation of the target | 4.3.1 |\n   |         | resource.                                       |       |\n   | HEAD    | Same as GET, but only transfer the status line  | 4.3.2 |\n   |         | and header section.                             |       |\n   | POST    | Perform resource-specific processing on the     | 4.3.3 |\n   |         | request payload.                                |       |\n   | PUT     | Replace all current representations of the      | 4.3.4 |\n   |         | target resource with the request payload.       |       |\n   | DELETE  | Remove all current representations of the       | 4.3.5 |\n   |         | target resource.                                |       |\n   | CONNECT | Establish a tunnel to the server identified by  | 4.3.6 |\n   |         | the target resource.                            |       |\n   | OPTIONS | Describe the communication options for the      | 4.3.7 |\n   |         | target resource.                                |       |\n   | TRACE   | Perform a message loop-back test along the path | 4.3.8 |\n   |         | to the target resource.                         |       |\n   +---------+-------------------------------------------------+-------+\n\n   All general-purpose servers MUST support the methods GET and HEAD.\n   All other methods are OPTIONAL.\n\n   Additional methods, outside the scope of this specification, have\n   been standardized for use in HTTP.  All such methods ought to be\n   registered within the \"Hypertext Transfer Protocol (HTTP) Method\n   Registry\" maintained by IANA, as defined in <a href=\"#section-8.1\">Section 8.1</a>.\n\n   The set of methods allowed by a target resource can be listed in an\n   Allow header field (<a href=\"#section-7.4.1\">Section 7.4.1</a>).  However, the set of allowed\n   methods can change dynamically.  When a request method is received\n   that is unrecognized or not implemented by an origin server, the\n   origin server SHOULD respond with the 501 (Not Implemented) status\n   code.  When a request method is received that is known by an origin\n   server but not allowed for the target resource, the origin server\n   SHOULD respond with the 405 (Method Not Allowed) status code.\n\n<h3 class=\"h3\" id=\"section-4.2\">4.2.  Common Method Properties</h3>\n<h4 class=\"h4\" id=\"section-4.2.1\">4.2.1.  Safe Methods</h4>\n   Request methods are considered \"safe\" if their defined semantics are\n   essentially read-only; i.e., the client does not request, and does\n   not expect, any state change on the origin server as a result of\n   applying a safe method to a target resource.  Likewise, reasonable\n   use of a safe method is not expected to cause any harm, loss of\n   property, or unusual burden on the origin server.\n\n   This definition of safe methods does not prevent an implementation\n   from including behavior that is potentially harmful, that is not\n   entirely read-only, or that causes side effects while invoking a safe\n   method.  What is important, however, is that the client did not\n   request that additional behavior and cannot be held accountable for\n   it.  For example, most servers append request information to access\n   log files at the completion of every response, regardless of the\n   method, and that is considered safe even though the log storage might\n   become full and crash the server.  Likewise, a safe request initiated\n   by selecting an advertisement on the Web will often have the side\n   effect of charging an advertising account.\n\n   Of the request methods defined by this specification, the GET, HEAD,\n   OPTIONS, and TRACE methods are defined to be safe.\n\n   The purpose of distinguishing between safe and unsafe methods is to\n   allow automated retrieval processes (spiders) and cache performance\n   optimization (pre-fetching) to work without fear of causing harm.  In\n   addition, it allows a user agent to apply appropriate constraints on\n   the automated use of unsafe methods when processing potentially\n   untrusted content.\n\n   A user agent SHOULD distinguish between safe and unsafe methods when\n   presenting potential actions to a user, such that the user can be\n   made aware of an unsafe action before it is requested.\n\n   When a resource is constructed such that parameters within the\n   effective request URI have the effect of selecting an action, it is\n   the resource owner's responsibility to ensure that the action is\n   consistent with the request method semantics.  For example, it is\n   common for Web-based content editing software to use actions within\n   query parameters, such as \"page?do=delete\".  If the purpose of such a\n   resource is to perform an unsafe action, then the resource owner MUST\n   disable or disallow that action when it is accessed using a safe\n   request method.  Failure to do so will result in unfortunate side\n   effects when automated processes perform a GET on every URI reference\n   for the sake of link maintenance, pre-fetching, building a search\n   index, etc.\n\n<h4 class=\"h4\" id=\"section-4.2.2\">4.2.2.  Idempotent Methods</h4>\n   A request method is considered \"idempotent\" if the intended effect on\n   the server of multiple identical requests with that method is the\n   same as the effect for a single such request.  Of the request methods\n   defined by this specification, PUT, DELETE, and safe request methods\n   are idempotent.\n\n   Like the definition of safe, the idempotent property only applies to\n   what has been requested by the user; a server is free to log each\n   request separately, retain a revision control history, or implement\n   other non-idempotent side effects for each idempotent request.\n\n   Idempotent methods are distinguished because the request can be\n   repeated automatically if a communication failure occurs before the\n   client is able to read the server's response.  For example, if a\n   client sends a PUT request and the underlying connection is closed\n   before any response is received, then the client can establish a new\n   connection and retry the idempotent request.  It knows that repeating\n   the request will have the same intended effect, even if the original\n   request succeeded, though the response might differ.\n\n<h4 class=\"h4\" id=\"section-4.2.3\">4.2.3.  Cacheable Methods</h4>\n   Request methods can be defined as \"cacheable\" to indicate that\n   responses to them are allowed to be stored for future reuse; for\n   specific requirements see [<a href=\"https://tools.ietf.org/html/rfc7234\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Caching\"'>RFC7234</a>].  In general, safe methods that\n   do not depend on a current or authoritative response are defined as\n   cacheable; this specification defines GET, HEAD, and POST as\n   cacheable, although the overwhelming majority of cache\n   implementations only support GET and HEAD.\n\n<h3 class=\"h3\" id=\"section-4.3\">4.3.  Method Definitions</h3>\n<h4 class=\"h4\" id=\"section-4.3.1\">4.3.1.  GET</h4>\n   The GET method requests transfer of a current selected representation\n   for the target resource.  GET is the primary mechanism of information\n   retrieval and the focus of almost all performance optimizations.\n   Hence, when people speak of retrieving some identifiable information\n   via HTTP, they are generally referring to making a GET request.\n\n   It is tempting to think of resource identifiers as remote file system\n   pathnames and of representations as being a copy of the contents of\n   such files.  In fact, that is how many resources are implemented (see\n   <a href=\"#section-9.1\">Section 9.1</a> for related security considerations).  However, there are\n   no such limitations in practice.  The HTTP interface for a resource\n   is just as likely to be implemented as a tree of content objects, a\n   programmatic view on various database records, or a gateway to other\n   information systems.  Even when the URI mapping mechanism is tied to\n   a file system, an origin server might be configured to execute the\n   files with the request as input and send the output as the\n   representation rather than transfer the files directly.  Regardless,\n   only the origin server needs to know how each of its resource\n\n   identifiers corresponds to an implementation and how each\n   implementation manages to select and send a current representation of\n   the target resource in a response to GET.\n\n   A client can alter the semantics of GET to be a \"range request\",\n   requesting transfer of only some part(s) of the selected\n   representation, by sending a Range header field in the request\n   ([<a href=\"https://tools.ietf.org/html/rfc7233\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\"'>RFC7233</a>]).\n\n   A payload within a GET request message has no defined semantics;\n   sending a payload body on a GET request might cause some existing\n   implementations to reject the request.\n\n   The response to a GET request is cacheable; a cache MAY use it to\n   satisfy subsequent GET and HEAD requests unless otherwise indicated\n   by the Cache-Control header field (<a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Section 5.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-4.3.2\">4.3.2.  HEAD</h4>\n   The HEAD method is identical to GET except that the server MUST NOT\n   send a message body in the response (i.e., the response terminates at\n   the end of the header section).  The server SHOULD send the same\n   header fields in response to a HEAD request as it would have sent if\n   the request had been a GET, except that the payload header fields\n   (<a href=\"#section-3.3\">Section 3.3</a>) MAY be omitted.  This method can be used for obtaining\n   metadata about the selected representation without transferring the\n   representation data and is often used for testing hypertext links for\n   validity, accessibility, and recent modification.\n\n   A payload within a HEAD request message has no defined semantics;\n   sending a payload body on a HEAD request might cause some existing\n   implementations to reject the request.\n\n   The response to a HEAD request is cacheable; a cache MAY use it to\n   satisfy subsequent HEAD requests unless otherwise indicated by the\n   Cache-Control header field (<a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Section 5.2 of [RFC7234]</a>).  A HEAD\n   response might also have an effect on previously cached responses to\n   GET; see <a href=\"https://tools.ietf.org/html/rfc7234#section-4.3.5\">Section 4.3.5 of [RFC7234]</a>.\n\n<h4 class=\"h4\" id=\"section-4.3.3\">4.3.3.  POST</h4>\n   The POST method requests that the target resource process the\n   representation enclosed in the request according to the resource's\n   own specific semantics.  For example, POST is used for the following\n   functions (among others):\n\n   o  Providing a block of data, such as the fields entered into an HTML\n      form, to a data-handling process;\n\n   o  Posting a message to a bulletin board, newsgroup, mailing list,\n      blog, or similar group of articles;\n\n   o  Creating a new resource that has yet to be identified by the\n      origin server; and\n\n   o  Appending data to a resource's existing representation(s).\n\n   An origin server indicates response semantics by choosing an\n   appropriate status code depending on the result of processing the\n   POST request; almost all of the status codes defined by this\n   specification might be received in a response to POST (the exceptions\n   being 206 (Partial Content), 304 (Not Modified), and 416 (Range Not\n   Satisfiable)).\n\n   If one or more resources has been created on the origin server as a\n   result of successfully processing a POST request, the origin server\n   SHOULD send a 201 (Created) response containing a Location header\n   field that provides an identifier for the primary resource created\n   (<a href=\"#section-7.1.2\">Section 7.1.2</a>) and a representation that describes the status of the\n   request while referring to the new resource(s).\n\n   Responses to POST requests are only cacheable when they include\n   explicit freshness information (see <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.1\">Section 4.2.1 of [RFC7234]</a>).\n   However, POST caching is not widely implemented.  For cases where an\n   origin server wishes the client to be able to cache the result of a\n   POST in a way that can be reused by a later GET, the origin server\n   MAY send a 200 (OK) response containing the result and a\n   Content-Location header field that has the same value as the POST's\n   effective request URI (<a href=\"#section-3.1.4.2\">Section 3.1.4.2</a>).\n\n   If the result of processing a POST would be equivalent to a\n   representation of an existing resource, an origin server MAY redirect\n   the user agent to that resource by sending a 303 (See Other) response\n   with the existing resource's identifier in the Location field.  This\n   has the benefits of providing the user agent a resource identifier\n   and transferring the representation via a method more amenable to\n   shared caching, though at the cost of an extra request if the user\n   agent does not already have the representation cached.\n\n<h4 class=\"h4\" id=\"section-4.3.4\">4.3.4.  PUT</h4>\n   The PUT method requests that the state of the target resource be\n   created or replaced with the state defined by the representation\n   enclosed in the request message payload.  A successful PUT of a given\n   representation would suggest that a subsequent GET on that same\n   target resource will result in an equivalent representation being\n   sent in a 200 (OK) response.  However, there is no guarantee that\n\n   such a state change will be observable, since the target resource\n   might be acted upon by other user agents in parallel, or might be\n   subject to dynamic processing by the origin server, before any\n   subsequent GET is received.  A successful response only implies that\n   the user agent's intent was achieved at the time of its processing by\n   the origin server.\n\n   If the target resource does not have a current representation and the\n   PUT successfully creates one, then the origin server MUST inform the\n   user agent by sending a 201 (Created) response.  If the target\n   resource does have a current representation and that representation\n   is successfully modified in accordance with the state of the enclosed\n   representation, then the origin server MUST send either a 200 (OK) or\n   a 204 (No Content) response to indicate successful completion of the\n   request.\n\n   An origin server SHOULD ignore unrecognized header fields received in\n   a PUT request (i.e., do not save them as part of the resource state).\n\n   An origin server SHOULD verify that the PUT representation is\n   consistent with any constraints the server has for the target\n   resource that cannot or will not be changed by the PUT.  This is\n   particularly important when the origin server uses internal\n   configuration information related to the URI in order to set the\n   values for representation metadata on GET responses.  When a PUT\n   representation is inconsistent with the target resource, the origin\n   server SHOULD either make them consistent, by transforming the\n   representation or changing the resource configuration, or respond\n   with an appropriate error message containing sufficient information\n   to explain why the representation is unsuitable.  The 409 (Conflict)\n   or 415 (Unsupported Media Type) status codes are suggested, with the\n   latter being specific to constraints on Content-Type values.\n\n   For example, if the target resource is configured to always have a\n   Content-Type of \"text/html\" and the representation being PUT has a\n   Content-Type of \"image/jpeg\", the origin server ought to do one of:\n\n   a.  reconfigure the target resource to reflect the new media type;\n\n   b.  transform the PUT representation to a format consistent with that\n       of the resource before saving it as the new resource state; or,\n\n   c.  reject the request with a 415 (Unsupported Media Type) response\n       indicating that the target resource is limited to \"text/html\",\n       perhaps including a link to a different resource that would be a\n       suitable target for the new representation.\n\n   HTTP does not define exactly how a PUT method affects the state of an\n   origin server beyond what can be expressed by the intent of the user\n   agent request and the semantics of the origin server response.  It\n   does not define what a resource might be, in any sense of that word,\n   beyond the interface provided via HTTP.  It does not define how\n   resource state is \"stored\", nor how such storage might change as a\n   result of a change in resource state, nor how the origin server\n   translates resource state into representations.  Generally speaking,\n   all implementation details behind the resource interface are\n   intentionally hidden by the server.\n\n   An origin server MUST NOT send a validator header field\n   (<a href=\"#section-7.2\">Section 7.2</a>), such as an ETag or Last-Modified field, in a\n   successful response to PUT unless the request's representation data\n   was saved without any transformation applied to the body (i.e., the\n   resource's new representation data is identical to the representation\n   data received in the PUT request) and the validator field value\n   reflects the new representation.  This requirement allows a user\n   agent to know when the representation body it has in memory remains\n   current as a result of the PUT, thus not in need of being retrieved\n   again from the origin server, and that the new validator(s) received\n   in the response can be used for future conditional requests in order\n   to prevent accidental overwrites (<a href=\"#section-5.2\">Section 5.2</a>).\n\n   The fundamental difference between the POST and PUT methods is\n   highlighted by the different intent for the enclosed representation.\n   The target resource in a POST request is intended to handle the\n   enclosed representation according to the resource's own semantics,\n   whereas the enclosed representation in a PUT request is defined as\n   replacing the state of the target resource.  Hence, the intent of PUT\n   is idempotent and visible to intermediaries, even though the exact\n   effect is only known by the origin server.\n\n   Proper interpretation of a PUT request presumes that the user agent\n   knows which target resource is desired.  A service that selects a\n   proper URI on behalf of the client, after receiving a state-changing\n   request, SHOULD be implemented using the POST method rather than PUT.\n   If the origin server will not make the requested PUT state change to\n   the target resource and instead wishes to have it applied to a\n   different resource, such as when the resource has been moved to a\n   different URI, then the origin server MUST send an appropriate 3xx\n   (Redirection) response; the user agent MAY then make its own decision\n   regarding whether or not to redirect the request.\n\n   A PUT request applied to the target resource can have side effects on\n   other resources.  For example, an article might have a URI for\n   identifying \"the current version\" (a resource) that is separate from\n   the URIs identifying each particular version (different resources\n\n   that at one point shared the same state as the current version\n   resource).  A successful PUT request on \"the current version\" URI\n   might therefore create a new version resource in addition to changing\n   the state of the target resource, and might also cause links to be\n   added between the related resources.\n\n   An origin server that allows PUT on a given target resource MUST send\n   a 400 (Bad Request) response to a PUT request that contains a\n   Content-Range header field (<a href=\"https://tools.ietf.org/html/rfc7233#section-4.2\">Section 4.2 of [RFC7233]</a>), since the\n   payload is likely to be partial content that has been mistakenly PUT\n   as a full representation.  Partial content updates are possible by\n   targeting a separately identified resource with state that overlaps a\n   portion of the larger resource, or by using a different method that\n   has been specifically defined for partial updates (for example, the\n   PATCH method defined in [<a href=\"https://tools.ietf.org/html/rfc5789\" title='\"PATCH Method for HTTP\"'>RFC5789</a>]).\n\n   Responses to the PUT method are not cacheable.  If a successful PUT\n   request passes through a cache that has one or more stored responses\n   for the effective request URI, those stored responses will be\n   invalidated (see <a href=\"https://tools.ietf.org/html/rfc7234#section-4.4\">Section 4.4 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-4.3.5\">4.3.5.  DELETE</h4>\n   The DELETE method requests that the origin server remove the\n   association between the target resource and its current\n   functionality.  In effect, this method is similar to the rm command\n   in UNIX: it expresses a deletion operation on the URI mapping of the\n   origin server rather than an expectation that the previously\n   associated information be deleted.\n\n   If the target resource has one or more current representations, they\n   might or might not be destroyed by the origin server, and the\n   associated storage might or might not be reclaimed, depending\n   entirely on the nature of the resource and its implementation by the\n   origin server (which are beyond the scope of this specification).\n   Likewise, other implementation aspects of a resource might need to be\n   deactivated or archived as a result of a DELETE, such as database or\n   gateway connections.  In general, it is assumed that the origin\n   server will only allow DELETE on resources for which it has a\n   prescribed mechanism for accomplishing the deletion.\n\n   Relatively few resources allow the DELETE method -- its primary use\n   is for remote authoring environments, where the user has some\n   direction regarding its effect.  For example, a resource that was\n   previously created using a PUT request, or identified via the\n   Location header field after a 201 (Created) response to a POST\n   request, might allow a corresponding DELETE request to undo those\n   actions.  Similarly, custom user agent implementations that implement\n\n   an authoring function, such as revision control clients using HTTP\n   for remote operations, might use DELETE based on an assumption that\n   the server's URI space has been crafted to correspond to a version\n   repository.\n\n   If a DELETE method is successfully applied, the origin server SHOULD\n   send a 202 (Accepted) status code if the action will likely succeed\n   but has not yet been enacted, a 204 (No Content) status code if the\n   action has been enacted and no further information is to be supplied,\n   or a 200 (OK) status code if the action has been enacted and the\n   response message includes a representation describing the status.\n\n   A payload within a DELETE request message has no defined semantics;\n   sending a payload body on a DELETE request might cause some existing\n   implementations to reject the request.\n\n   Responses to the DELETE method are not cacheable.  If a DELETE\n   request passes through a cache that has one or more stored responses\n   for the effective request URI, those stored responses will be\n   invalidated (see <a href=\"https://tools.ietf.org/html/rfc7234#section-4.4\">Section 4.4 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-4.3.6\">4.3.6.  CONNECT</h4>\n   The CONNECT method requests that the recipient establish a tunnel to\n   the destination origin server identified by the request-target and,\n   if successful, thereafter restrict its behavior to blind forwarding\n   of packets, in both directions, until the tunnel is closed.  Tunnels\n   are commonly used to create an end-to-end virtual connection, through\n   one or more proxies, which can then be secured using TLS (Transport\n   Layer Security, [<a href=\"https://tools.ietf.org/html/rfc5246\" title='\"The Transport Layer Security (TLS) Protocol Version 1.2\"'>RFC5246</a>]).\n\n   CONNECT is intended only for use in requests to a proxy.  An origin\n   server that receives a CONNECT request for itself MAY respond with a\n   2xx (Successful) status code to indicate that a connection is\n   established.  However, most origin servers do not implement CONNECT.\n\n   A client sending a CONNECT request MUST send the authority form of\n   request-target (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.3\">Section 5.3 of [RFC7230]</a>); i.e., the request-target\n   consists of only the host name and port number of the tunnel\n   destination, separated by a colon.  For example,\n\n     CONNECT server.example.com:80 HTTP/1.1\n     Host: server.example.com:80\n\n   The recipient proxy can establish a tunnel either by directly\n   connecting to the request-target or, if configured to use another\n   proxy, by forwarding the CONNECT request to the next inbound proxy.\n   Any 2xx (Successful) response indicates that the sender (and all\n\n   inbound proxies) will switch to tunnel mode immediately after the\n   blank line that concludes the successful response's header section;\n   data received after that blank line is from the server identified by\n   the request-target.  Any response other than a successful response\n   indicates that the tunnel has not yet been formed and that the\n   connection remains governed by HTTP.\n\n   A tunnel is closed when a tunnel intermediary detects that either\n   side has closed its connection: the intermediary MUST attempt to send\n   any outstanding data that came from the closed side to the other\n   side, close both connections, and then discard any remaining data\n   left undelivered.\n\n   Proxy authentication might be used to establish the authority to\n   create a tunnel.  For example,\n\n     CONNECT server.example.com:80 HTTP/1.1\n     Host: server.example.com:80\n     Proxy-Authorization: basic aGVsbG86d29ybGQ=\n\n   There are significant risks in establishing a tunnel to arbitrary\n   servers, particularly when the destination is a well-known or\n   reserved TCP port that is not intended for Web traffic.  For example,\n   a CONNECT to a request-target of \"example.com:25\" would suggest that\n   the proxy connect to the reserved port for SMTP traffic; if allowed,\n   that could trick the proxy into relaying spam email.  Proxies that\n   support CONNECT SHOULD restrict its use to a limited set of known\n   ports or a configurable whitelist of safe request targets.\n\n   A server MUST NOT send any Transfer-Encoding or Content-Length header\n   fields in a 2xx (Successful) response to CONNECT.  A client MUST\n   ignore any Content-Length or Transfer-Encoding header fields received\n   in a successful response to CONNECT.\n\n   A payload within a CONNECT request message has no defined semantics;\n   sending a payload body on a CONNECT request might cause some existing\n   implementations to reject the request.\n\n   Responses to the CONNECT method are not cacheable.\n\n<h4 class=\"h4\" id=\"section-4.3.7\">4.3.7.  OPTIONS</h4>\n   The OPTIONS method requests information about the communication\n   options available for the target resource, at either the origin\n   server or an intervening intermediary.  This method allows a client\n   to determine the options and/or requirements associated with a\n   resource, or the capabilities of a server, without implying a\n   resource action.\n\n   An OPTIONS request with an asterisk (\"*\") as the request-target\n   (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.3\">Section 5.3 of [RFC7230]</a>) applies to the server in general rather\n   than to a specific resource.  Since a server's communication options\n   typically depend on the resource, the \"*\" request is only useful as a\n   \"ping\" or \"no-op\" type of method; it does nothing beyond allowing the\n   client to test the capabilities of the server.  For example, this can\n   be used to test a proxy for HTTP/1.1 conformance (or lack thereof).\n\n   If the request-target is not an asterisk, the OPTIONS request applies\n   to the options that are available when communicating with the target\n   resource.\n\n   A server generating a successful response to OPTIONS SHOULD send any\n   header fields that might indicate optional features implemented by\n   the server and applicable to the target resource (e.g., Allow),\n   including potential extensions not defined by this specification.\n   The response payload, if any, might also describe the communication\n   options in a machine or human-readable representation.  A standard\n   format for such a representation is not defined by this\n   specification, but might be defined by future extensions to HTTP.  A\n   server MUST generate a Content-Length field with a value of \"0\" if no\n   payload body is to be sent in the response.\n\n   A client MAY send a Max-Forwards header field in an OPTIONS request\n   to target a specific recipient in the request chain (see\n   <a href=\"#section-5.1.2\">Section 5.1.2</a>).  A proxy MUST NOT generate a Max-Forwards header\n   field while forwarding a request unless that request was received\n   with a Max-Forwards field.\n\n   A client that generates an OPTIONS request containing a payload body\n   MUST send a valid Content-Type header field describing the\n   representation media type.  Although this specification does not\n   define any use for such a payload, future extensions to HTTP might\n   use the OPTIONS body to make more detailed queries about the target\n   resource.\n\n   Responses to the OPTIONS method are not cacheable.\n\n<h4 class=\"h4\" id=\"section-4.3.8\">4.3.8.  TRACE</h4>\n   The TRACE method requests a remote, application-level loop-back of\n   the request message.  The final recipient of the request SHOULD\n   reflect the message received, excluding some fields described below,\n   back to the client as the message body of a 200 (OK) response with a\n   Content-Type of \"message/http\" (<a href=\"https://tools.ietf.org/html/rfc7230#section-8.3.1\">Section 8.3.1 of [RFC7230]</a>).  The\n   final recipient is either the origin server or the first server to\n   receive a Max-Forwards value of zero (0) in the request\n   (<a href=\"#section-5.1.2\">Section 5.1.2</a>).\n\n   A client MUST NOT generate header fields in a TRACE request\n   containing sensitive data that might be disclosed by the response.\n   For example, it would be foolish for a user agent to send stored user\n   credentials [<a href=\"https://tools.ietf.org/html/rfc7235\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Authentication\"'>RFC7235</a>] or cookies [<a href=\"https://tools.ietf.org/html/rfc6265\" title='\"HTTP State Management Mechanism\"'>RFC6265</a>] in a TRACE request.  The\n   final recipient of the request SHOULD exclude any request header\n   fields that are likely to contain sensitive data when that recipient\n   generates the response body.\n\n   TRACE allows the client to see what is being received at the other\n   end of the request chain and use that data for testing or diagnostic\n   information.  The value of the Via header field (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.7.1\">Section 5.7.1 of\n   [RFC7230]</a>) is of particular interest, since it acts as a trace of the\n   request chain.  Use of the Max-Forwards header field allows the\n   client to limit the length of the request chain, which is useful for\n   testing a chain of proxies forwarding messages in an infinite loop.\n\n   A client MUST NOT send a message body in a TRACE request.\n\n   Responses to the TRACE method are not cacheable.\n\n<h2 class=\"h2\" id=\"section-5\">5.  Request Header Fields</h2>\n   A client sends request header fields to provide more information\n   about the request context, make the request conditional based on the\n   target resource state, suggest preferred formats for the response,\n   supply authentication credentials, or modify the expected request\n   processing.  These fields act as request modifiers, similar to the\n   parameters on a programming language method invocation.\n\n<h3 class=\"h3\" id=\"section-5.1\">5.1.  Controls</h3>\n   Controls are request header fields that direct specific handling of\n   the request.\n\n   +-------------------+--------------------------+\n   | Header Field Name | Defined in...            |\n   +-------------------+--------------------------+\n   | Cache-Control     | <a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Section 5.2 of [RFC7234]</a> |\n   | Expect            | <a href=\"#section-5.1.1\">Section 5.1.1</a>            |\n   | Host              | <a href=\"https://tools.ietf.org/html/rfc7230#section-5.4\">Section 5.4 of [RFC7230]</a> |\n   | Max-Forwards      | <a href=\"#section-5.1.2\">Section 5.1.2</a>            |\n   | Pragma            | <a href=\"https://tools.ietf.org/html/rfc7234#section-5.4\">Section 5.4 of [RFC7234]</a> |\n   | Range             | <a href=\"https://tools.ietf.org/html/rfc7233#section-3.1\">Section 3.1 of [RFC7233]</a> |\n   | TE                | <a href=\"https://tools.ietf.org/html/rfc7230#section-4.3\">Section 4.3 of [RFC7230]</a> |\n   +-------------------+--------------------------+\n\n<h4 class=\"h4\" id=\"section-5.1.1\">5.1.1.  Expect</h4>\n   The \"Expect\" header field in a request indicates a certain set of\n   behaviors (expectations) that need to be supported by the server in\n   order to properly handle this request.  The only such expectation\n   defined by this specification is 100-continue.\n\n     Expect  = \"100-continue\"\n\n   The Expect field-value is case-insensitive.\n\n   A server that receives an Expect field-value other than 100-continue\n   MAY respond with a 417 (Expectation Failed) status code to indicate\n   that the unexpected expectation cannot be met.\n\n   A 100-continue expectation informs recipients that the client is\n   about to send a (presumably large) message body in this request and\n   wishes to receive a 100 (Continue) interim response if the\n   request-line and header fields are not sufficient to cause an\n   immediate success, redirect, or error response.  This allows the\n   client to wait for an indication that it is worthwhile to send the\n   message body before actually doing so, which can improve efficiency\n   when the message body is huge or when the client anticipates that an\n   error is likely (e.g., when sending a state-changing method, for the\n   first time, without previously verified authentication credentials).\n\n   For example, a request that begins with\n\n     PUT /somewhere/fun HTTP/1.1\n     Host: origin.example.com\n     Content-Type: video/h264\n     Content-Length: 1234567890987\n     Expect: 100-continue\n\n\n   allows the origin server to immediately respond with an error\n   message, such as 401 (Unauthorized) or 405 (Method Not Allowed),\n   before the client starts filling the pipes with an unnecessary data\n   transfer.\n\n   Requirements for clients:\n\n   o  A client MUST NOT generate a 100-continue expectation in a request\n      that does not include a message body.\n\n   o  A client that will wait for a 100 (Continue) response before\n      sending the request message body MUST send an Expect header field\n      containing a 100-continue expectation.\n\n   o  A client that sends a 100-continue expectation is not required to\n      wait for any specific length of time; such a client MAY proceed to\n      send the message body even if it has not yet received a response.\n      Furthermore, since 100 (Continue) responses cannot be sent through\n      an HTTP/1.0 intermediary, such a client SHOULD NOT wait for an\n      indefinite period before sending the message body.\n\n   o  A client that receives a 417 (Expectation Failed) status code in\n      response to a request containing a 100-continue expectation SHOULD\n      repeat that request without a 100-continue expectation, since the\n      417 response merely indicates that the response chain does not\n      support expectations (e.g., it passes through an HTTP/1.0 server).\n\n   Requirements for servers:\n\n   o  A server that receives a 100-continue expectation in an HTTP/1.0\n      request MUST ignore that expectation.\n\n   o  A server MAY omit sending a 100 (Continue) response if it has\n      already received some or all of the message body for the\n      corresponding request, or if the framing indicates that there is\n      no message body.\n\n   o  A server that sends a 100 (Continue) response MUST ultimately send\n      a final status code, once the message body is received and\n      processed, unless the connection is closed prematurely.\n\n   o  A server that responds with a final status code before reading the\n      entire message body SHOULD indicate in that response whether it\n      intends to close the connection or continue reading and discarding\n      the request message (see <a href=\"https://tools.ietf.org/html/rfc7230#section-6.6\">Section 6.6 of [RFC7230]</a>).\n\n   An origin server MUST, upon receiving an HTTP/1.1 (or later)\n   request-line and a complete header section that contains a\n   100-continue expectation and indicates a request message body will\n   follow, either send an immediate response with a final status code,\n   if that status can be determined by examining just the request-line\n   and header fields, or send an immediate 100 (Continue) response to\n   encourage the client to send the request's message body.  The origin\n   server MUST NOT wait for the message body before sending the 100\n   (Continue) response.\n\n   A proxy MUST, upon receiving an HTTP/1.1 (or later) request-line and\n   a complete header section that contains a 100-continue expectation\n   and indicates a request message body will follow, either send an\n   immediate response with a final status code, if that status can be\n   determined by examining just the request-line and header fields, or\n   begin forwarding the request toward the origin server by sending a\n\n   corresponding request-line and header section to the next inbound\n   server.  If the proxy believes (from configuration or past\n   interaction) that the next inbound server only supports HTTP/1.0, the\n   proxy MAY generate an immediate 100 (Continue) response to encourage\n   the client to begin sending the message body.\n\n      Note: The Expect header field was added after the original\n      publication of HTTP/1.1 [<a href=\"https://tools.ietf.org/html/rfc2068\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>RFC2068</a>] as both the means to request an\n      interim 100 (Continue) response and the general mechanism for\n      indicating must-understand extensions.  However, the extension\n      mechanism has not been used by clients and the must-understand\n      requirements have not been implemented by many servers, rendering\n      the extension mechanism useless.  This specification has removed\n      the extension mechanism in order to simplify the definition and\n      processing of 100-continue.\n\n<h4 class=\"h4\" id=\"section-5.1.2\">5.1.2.  Max-Forwards</h4>\n   The \"Max-Forwards\" header field provides a mechanism with the TRACE\n   (<a href=\"#section-4.3.8\">Section 4.3.8</a>) and OPTIONS (<a href=\"#section-4.3.7\">Section 4.3.7</a>) request methods to limit\n   the number of times that the request is forwarded by proxies.  This\n   can be useful when the client is attempting to trace a request that\n   appears to be failing or looping mid-chain.\n\n     Max-Forwards = 1*DIGIT\n\n   The Max-Forwards value is a decimal integer indicating the remaining\n   number of times this request message can be forwarded.\n\n   Each intermediary that receives a TRACE or OPTIONS request containing\n   a Max-Forwards header field MUST check and update its value prior to\n   forwarding the request.  If the received value is zero (0), the\n   intermediary MUST NOT forward the request; instead, the intermediary\n   MUST respond as the final recipient.  If the received Max-Forwards\n   value is greater than zero, the intermediary MUST generate an updated\n   Max-Forwards field in the forwarded message with a field-value that\n   is the lesser of a) the received value decremented by one (1) or b)\n   the recipient's maximum supported value for Max-Forwards.\n\n   A recipient MAY ignore a Max-Forwards header field received with any\n   other request methods.\n\n<h3 class=\"h3\" id=\"section-5.2\">5.2.  Conditionals</h3>\n   The HTTP conditional request header fields [<a href=\"https://tools.ietf.org/html/rfc7232\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\"'>RFC7232</a>] allow a client\n   to place a precondition on the state of the target resource, so that\n   the action corresponding to the method semantics will not be applied\n   if the precondition evaluates to false.  Each precondition defined by\n\n   this specification consists of a comparison between a set of\n   validators obtained from prior representations of the target resource\n   to the current state of validators for the selected representation\n   (<a href=\"#section-7.2\">Section 7.2</a>).  Hence, these preconditions evaluate whether the state\n   of the target resource has changed since a given state known by the\n   client.  The effect of such an evaluation depends on the method\n   semantics and choice of conditional, as defined in <a href=\"https://tools.ietf.org/html/rfc7232#section-5\">Section 5 of\n   [RFC7232]</a>.\n\n   +---------------------+--------------------------+\n   | Header Field Name   | Defined in...            |\n   +---------------------+--------------------------+\n   | If-Match            | <a href=\"https://tools.ietf.org/html/rfc7232#section-3.1\">Section 3.1 of [RFC7232]</a> |\n   | If-None-Match       | <a href=\"https://tools.ietf.org/html/rfc7232#section-3.2\">Section 3.2 of [RFC7232]</a> |\n   | If-Modified-Since   | <a href=\"https://tools.ietf.org/html/rfc7232#section-3.3\">Section 3.3 of [RFC7232]</a> |\n   | If-Unmodified-Since | <a href=\"https://tools.ietf.org/html/rfc7232#section-3.4\">Section 3.4 of [RFC7232]</a> |\n   | If-Range            | <a href=\"https://tools.ietf.org/html/rfc7233#section-3.2\">Section 3.2 of [RFC7233]</a> |\n   +---------------------+--------------------------+\n\n<h3 class=\"h3\" id=\"section-5.3\">5.3.  Content Negotiation</h3>\n   The following request header fields are sent by a user agent to\n   engage in proactive negotiation of the response content, as defined\n   in <a href=\"#section-3.4.1\">Section 3.4.1</a>.  The preferences sent in these fields apply to any\n   content in the response, including representations of the target\n   resource, representations of error or processing status, and\n   potentially even the miscellaneous text strings that might appear\n   within the protocol.\n\n   +-------------------+---------------+\n   | Header Field Name | Defined in... |\n   +-------------------+---------------+\n   | Accept            | <a href=\"#section-5.3.2\">Section 5.3.2</a> |\n   | Accept-Charset    | <a href=\"#section-5.3.3\">Section 5.3.3</a> |\n   | Accept-Encoding   | <a href=\"#section-5.3.4\">Section 5.3.4</a> |\n   | Accept-Language   | <a href=\"#section-5.3.5\">Section 5.3.5</a> |\n   +-------------------+---------------+\n\n<h4 class=\"h4\" id=\"section-5.3.1\">5.3.1.  Quality Values</h4>\n   Many of the request header fields for proactive negotiation use a\n   common parameter, named \"q\" (case-insensitive), to assign a relative\n   \"weight\" to the preference for that associated kind of content.  This\n   weight is referred to as a \"quality value\" (or \"qvalue\") because the\n   same parameter name is often used within server configurations to\n   assign a weight to the relative quality of the various\n   representations that can be selected for a resource.\n\n   The weight is normalized to a real number in the range 0 through 1,\n   where 0.001 is the least preferred and 1 is the most preferred; a\n   value of 0 means \"not acceptable\".  If no \"q\" parameter is present,\n   the default weight is 1.\n\n     weight = OWS \";\" OWS \"q=\" qvalue\n     qvalue = ( \"0\" [ \".\" 0*3DIGIT ] )\n            / ( \"1\" [ \".\" 0*3(\"0\") ] )\n\n   A sender of qvalue MUST NOT generate more than three digits after the\n   decimal point.  User configuration of these values ought to be\n   limited in the same fashion.\n\n<h4 class=\"h4\" id=\"section-5.3.2\">5.3.2.  Accept</h4>\n   The \"Accept\" header field can be used by user agents to specify\n   response media types that are acceptable.  Accept header fields can\n   be used to indicate that the request is specifically limited to a\n   small set of desired types, as in the case of a request for an\n   in-line image.\n\n     Accept = #( media-range [ accept-params ] )\n\n     media-range    = ( \"*/*\"\n                      / ( type \"/\" \"*\" )\n                      / ( type \"/\" subtype )\n                      ) *( OWS \";\" OWS parameter )\n     accept-params  = weight *( accept-ext )\n     accept-ext = OWS \";\" OWS token [ \"=\" ( token / quoted-string ) ]\n\n   The asterisk \"*\" character is used to group media types into ranges,\n   with \"*/*\" indicating all media types and \"type/*\" indicating all\n   subtypes of that type.  The media-range can include media type\n   parameters that are applicable to that range.\n\n   Each media-range might be followed by zero or more applicable media\n   type parameters (e.g., charset), an optional \"q\" parameter for\n   indicating a relative weight (<a href=\"#section-5.3.1\">Section 5.3.1</a>), and then zero or more\n   extension parameters.  The \"q\" parameter is necessary if any\n   extensions (accept-ext) are present, since it acts as a separator\n   between the two parameter sets.\n\n      Note: Use of the \"q\" parameter name to separate media type\n      parameters from Accept extension parameters is due to historical\n      practice.  Although this prevents any media type parameter named\n      \"q\" from being used with a media range, such an event is believed\n      to be unlikely given the lack of any \"q\" parameters in the IANA\n\n      media type registry and the rare usage of any media type\n      parameters in Accept.  Future media types are discouraged from\n      registering any parameter named \"q\".\n\n   The example\n\n     Accept: audio/*; q=0.2, audio/basic\n\n   is interpreted as \"I prefer audio/basic, but send me any audio type\n   if it is the best available after an 80% markdown in quality\".\n\n   A request without any Accept header field implies that the user agent\n   will accept any media type in response.  If the header field is\n   present in a request and none of the available representations for\n   the response have a media type that is listed as acceptable, the\n   origin server can either honor the header field by sending a 406 (Not\n   Acceptable) response or disregard the header field by treating the\n   response as if it is not subject to content negotiation.\n\n   A more elaborate example is\n\n     Accept: text/plain; q=0.5, text/html,\n             text/x-dvi; q=0.8, text/x-c\n\n   Verbally, this would be interpreted as \"text/html and text/x-c are\n   the equally preferred media types, but if they do not exist, then\n   send the text/x-dvi representation, and if that does not exist, send\n   the text/plain representation\".\n\n   Media ranges can be overridden by more specific media ranges or\n   specific media types.  If more than one media range applies to a\n   given type, the most specific reference has precedence.  For example,\n\n     Accept: text/*, text/plain, text/plain;format=flowed, */*\n\n   have the following precedence:\n\n   1.  text/plain;format=flowed\n\n   2.  text/plain\n\n   3.  text/*\n\n   4.  */*\n\n   The media type quality factor associated with a given type is\n   determined by finding the media range with the highest precedence\n   that matches the type.  For example,\n\n     Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,\n             text/html;level=2;q=0.4, */*;q=0.5\n\n   would cause the following values to be associated:\n\n   +-------------------+---------------+\n   | Media Type        | Quality Value |\n   +-------------------+---------------+\n   | text/html;level=1 | 1             |\n   | text/html         | 0.7           |\n   | text/plain        | 0.3           |\n   | image/jpeg        | 0.5           |\n   | text/html;level=2 | 0.4           |\n   | text/html;level=3 | 0.7           |\n   +-------------------+---------------+\n\n   Note: A user agent might be provided with a default set of quality\n   values for certain media ranges.  However, unless the user agent is a\n   closed system that cannot interact with other rendering agents, this\n   default set ought to be configurable by the user.\n\n<h4 class=\"h4\" id=\"section-5.3.3\">5.3.3.  Accept-Charset</h4>\n   The \"Accept-Charset\" header field can be sent by a user agent to\n   indicate what charsets are acceptable in textual response content.\n   This field allows user agents capable of understanding more\n   comprehensive or special-purpose charsets to signal that capability\n   to an origin server that is capable of representing information in\n   those charsets.\n\n     Accept-Charset = 1#( ( charset / \"*\" ) [ weight ] )\n\n   Charset names are defined in <a href=\"#section-3.1.1.2\">Section 3.1.1.2</a>.  A user agent MAY\n   associate a quality value with each charset to indicate the user's\n   relative preference for that charset, as defined in <a href=\"#section-5.3.1\">Section 5.3.1</a>.\n   An example is\n\n     Accept-Charset: iso-8859-5, unicode-1-1;q=0.8\n\n   The special value \"*\", if present in the Accept-Charset field,\n   matches every charset that is not mentioned elsewhere in the\n   Accept-Charset field.  If no \"*\" is present in an Accept-Charset\n   field, then any charsets not explicitly mentioned in the field are\n   considered \"not acceptable\" to the client.\n\n   A request without any Accept-Charset header field implies that the\n   user agent will accept any charset in response.  Most general-purpose\n   user agents do not send Accept-Charset, unless specifically\n\n   configured to do so, because a detailed list of supported charsets\n   makes it easier for a server to identify an individual by virtue of\n   the user agent's request characteristics (<a href=\"#section-9.7\">Section 9.7</a>).\n\n   If an Accept-Charset header field is present in a request and none of\n   the available representations for the response has a charset that is\n   listed as acceptable, the origin server can either honor the header\n   field, by sending a 406 (Not Acceptable) response, or disregard the\n   header field by treating the resource as if it is not subject to\n   content negotiation.\n\n<h4 class=\"h4\" id=\"section-5.3.4\">5.3.4.  Accept-Encoding</h4>\n   The \"Accept-Encoding\" header field can be used by user agents to\n   indicate what response content-codings (<a href=\"#section-3.1.2.1\">Section 3.1.2.1</a>) are\n   acceptable in the response.  An \"identity\" token is used as a synonym\n   for \"no encoding\" in order to communicate when no encoding is\n   preferred.\n\n     Accept-Encoding  = #( codings [ weight ] )\n     codings          = content-coding / \"identity\" / \"*\"\n\n   Each codings value MAY be given an associated quality value\n   representing the preference for that encoding, as defined in\n   <a href=\"#section-5.3.1\">Section 5.3.1</a>.  The asterisk \"*\" symbol in an Accept-Encoding field\n   matches any available content-coding not explicitly listed in the\n   header field.\n\n   For example,\n\n     Accept-Encoding: compress, gzip\n     Accept-Encoding:\n     Accept-Encoding: *\n     Accept-Encoding: compress;q=0.5, gzip;q=1.0\n     Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0\n\n   A request without an Accept-Encoding header field implies that the\n   user agent has no preferences regarding content-codings.  Although\n   this allows the server to use any content-coding in a response, it\n   does not imply that the user agent will be able to correctly process\n   all encodings.\n\n   A server tests whether a content-coding for a given representation is\n   acceptable using these rules:\n\n   1.  If no Accept-Encoding field is in the request, any content-coding\n       is considered acceptable by the user agent.\n\n   2.  If the representation has no content-coding, then it is\n       acceptable by default unless specifically excluded by the\n       Accept-Encoding field stating either \"identity;q=0\" or \"*;q=0\"\n       without a more specific entry for \"identity\".\n\n   3.  If the representation's content-coding is one of the\n       content-codings listed in the Accept-Encoding field, then it is\n       acceptable unless it is accompanied by a qvalue of 0.  (As\n       defined in <a href=\"#section-5.3.1\">Section 5.3.1</a>, a qvalue of 0 means \"not acceptable\".)\n\n   4.  If multiple content-codings are acceptable, then the acceptable\n       content-coding with the highest non-zero qvalue is preferred.\n\n   An Accept-Encoding header field with a combined field-value that is\n   empty implies that the user agent does not want any content-coding in\n   response.  If an Accept-Encoding header field is present in a request\n   and none of the available representations for the response have a\n   content-coding that is listed as acceptable, the origin server SHOULD\n   send a response without any content-coding.\n\n      Note: Most HTTP/1.0 applications do not recognize or obey qvalues\n      associated with content-codings.  This means that qvalues might\n      not work and are not permitted with x-gzip or x-compress.\n\n<h4 class=\"h4\" id=\"section-5.3.5\">5.3.5.  Accept-Language</h4>\n   The \"Accept-Language\" header field can be used by user agents to\n   indicate the set of natural languages that are preferred in the\n   response.  Language tags are defined in <a href=\"#section-3.1.3.1\">Section 3.1.3.1</a>.\n\n     Accept-Language = 1#( language-range [ weight ] )\n     language-range  =\n               &lt;language-range, see <a href=\"https://tools.ietf.org/html/rfc4647#section-2.1\">[RFC4647], Section 2.1</a>&gt;\n\n   Each language-range can be given an associated quality value\n   representing an estimate of the user's preference for the languages\n   specified by that range, as defined in <a href=\"#section-5.3.1\">Section 5.3.1</a>.  For example,\n\n     Accept-Language: da, en-gb;q=0.8, en;q=0.7\n\n   would mean: \"I prefer Danish, but will accept British English and\n   other types of English\".\n\n   A request without any Accept-Language header field implies that the\n   user agent will accept any language in response.  If the header field\n   is present in a request and none of the available representations for\n   the response have a matching language tag, the origin server can\n   either disregard the header field by treating the response as if it\n\n   is not subject to content negotiation or honor the header field by\n   sending a 406 (Not Acceptable) response.  However, the latter is not\n   encouraged, as doing so can prevent users from accessing content that\n   they might be able to use (with translation software, for example).\n\n   Note that some recipients treat the order in which language tags are\n   listed as an indication of descending priority, particularly for tags\n   that are assigned equal quality values (no value is the same as q=1).\n   However, this behavior cannot be relied upon.  For consistency and to\n   maximize interoperability, many user agents assign each language tag\n   a unique quality value while also listing them in order of decreasing\n   quality.  Additional discussion of language priority lists can be\n   found in <a href=\"https://tools.ietf.org/html/rfc4647#section-2.3\">Section 2.3 of [RFC4647]</a>.\n\n   For matching, <a href=\"https://tools.ietf.org/html/rfc4647#section-3\">Section 3 of [RFC4647]</a> defines several matching\n   schemes.  Implementations can offer the most appropriate matching\n   scheme for their requirements.  The \"Basic Filtering\" scheme\n   (<a href=\"https://tools.ietf.org/html/rfc4647#section-3.3.1\">[RFC4647], Section 3.3.1</a>) is identical to the matching scheme that\n   was previously defined for HTTP in <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\">Section 14.4 of [RFC2616]</a>.\n\n   It might be contrary to the privacy expectations of the user to send\n   an Accept-Language header field with the complete linguistic\n   preferences of the user in every request (<a href=\"#section-9.7\">Section 9.7</a>).\n\n   Since intelligibility is highly dependent on the individual user,\n   user agents need to allow user control over the linguistic preference\n   (either through configuration of the user agent itself or by\n   defaulting to a user controllable system setting).  A user agent that\n   does not provide such control to the user MUST NOT send an\n   Accept-Language header field.\n\n      Note: User agents ought to provide guidance to users when setting\n      a preference, since users are rarely familiar with the details of\n      language matching as described above.  For example, users might\n      assume that on selecting \"en-gb\", they will be served any kind of\n      English document if British English is not available.  A user\n      agent might suggest, in such a case, to add \"en\" to the list for\n      better matching behavior.\n\n<h3 class=\"h3\" id=\"section-5.4\">5.4.  Authentication Credentials</h3>\n   Two header fields are used for carrying authentication credentials,\n   as defined in [<a href=\"https://tools.ietf.org/html/rfc7235\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Authentication\"'>RFC7235</a>].  Note that various custom mechanisms for\n   user authentication use the Cookie header field for this purpose, as\n   defined in [<a href=\"https://tools.ietf.org/html/rfc6265\" title='\"HTTP State Management Mechanism\"'>RFC6265</a>].\n\n   +---------------------+--------------------------+\n   | Header Field Name   | Defined in...            |\n   +---------------------+--------------------------+\n   | Authorization       | <a href=\"https://tools.ietf.org/html/rfc7235#section-4.2\">Section 4.2 of [RFC7235]</a> |\n   | Proxy-Authorization | <a href=\"https://tools.ietf.org/html/rfc7235#section-4.4\">Section 4.4 of [RFC7235]</a> |\n   +---------------------+--------------------------+\n\n<h3 class=\"h3\" id=\"section-5.5\">5.5.  Request Context</h3>\n   The following request header fields provide additional information\n   about the request context, including information about the user, user\n   agent, and resource behind the request.\n\n   +-------------------+---------------+\n   | Header Field Name | Defined in... |\n   +-------------------+---------------+\n   | From              | <a href=\"#section-5.5.1\">Section 5.5.1</a> |\n   | Referer           | <a href=\"#section-5.5.2\">Section 5.5.2</a> |\n   | User-Agent        | <a href=\"#section-5.5.3\">Section 5.5.3</a> |\n   +-------------------+---------------+\n\n<h4 class=\"h4\" id=\"section-5.5.1\">5.5.1.  From</h4>\n   The \"From\" header field contains an Internet email address for a\n   human user who controls the requesting user agent.  The address ought\n   to be machine-usable, as defined by \"mailbox\" in <a href=\"https://tools.ietf.org/html/rfc5322#section-3.4\">Section 3.4 of\n   [RFC5322]</a>:\n\n     From    = mailbox\n\n     mailbox = &lt;mailbox, see <a href=\"https://tools.ietf.org/html/rfc5322#section-3.4\">[RFC5322], Section 3.4</a>&gt;\n\n   An example is:\n\n     From: webmaster@example.org\n\n   The From header field is rarely sent by non-robotic user agents.  A\n   user agent SHOULD NOT send a From header field without explicit\n   configuration by the user, since that might conflict with the user's\n   privacy interests or their site's security policy.\n\n   A robotic user agent SHOULD send a valid From header field so that\n   the person responsible for running the robot can be contacted if\n   problems occur on servers, such as if the robot is sending excessive,\n   unwanted, or invalid requests.\n\n   A server SHOULD NOT use the From header field for access control or\n   authentication, since most recipients will assume that the field\n   value is public information.\n\n<h4 class=\"h4\" id=\"section-5.5.2\">5.5.2.  Referer</h4>\n   The \"Referer\" [sic] header field allows the user agent to specify a\n   URI reference for the resource from which the target URI was obtained\n   (i.e., the \"referrer\", though the field name is misspelled).  A user\n   agent MUST NOT include the fragment and userinfo components of the\n   URI reference [<a href=\"https://tools.ietf.org/html/rfc3986\" title='\"Uniform Resource Identifier (URI): Generic Syntax\"'>RFC3986</a>], if any, when generating the Referer field\n   value.\n\n     Referer = absolute-URI / partial-URI\n\n   The Referer header field allows servers to generate back-links to\n   other resources for simple analytics, logging, optimized caching,\n   etc.  It also allows obsolete or mistyped links to be found for\n   maintenance.  Some servers use the Referer header field as a means of\n   denying links from other sites (so-called \"deep linking\") or\n   restricting cross-site request forgery (CSRF), but not all requests\n   contain it.\n\n   Example:\n\n     Referer: http://www.example.org/hypertext/Overview.html\n\n   If the target URI was obtained from a source that does not have its\n   own URI (e.g., input from the user keyboard, or an entry within the\n   user's bookmarks/favorites), the user agent MUST either exclude the\n   Referer field or send it with a value of \"about:blank\".\n\n   The Referer field has the potential to reveal information about the\n   request context or browsing history of the user, which is a privacy\n   concern if the referring resource's identifier reveals personal\n   information (such as an account name) or a resource that is supposed\n   to be confidential (such as behind a firewall or internal to a\n   secured service).  Most general-purpose user agents do not send the\n   Referer header field when the referring resource is a local \"file\" or\n   \"data\" URI.  A user agent MUST NOT send a Referer header field in an\n   unsecured HTTP request if the referring page was received with a\n   secure protocol.  See <a href=\"#section-9.4\">Section 9.4</a> for additional security\n   considerations.\n\n   Some intermediaries have been known to indiscriminately remove\n   Referer header fields from outgoing requests.  This has the\n   unfortunate side effect of interfering with protection against CSRF\n   attacks, which can be far more harmful to their users.\n   Intermediaries and user agent extensions that wish to limit\n   information disclosure in Referer ought to restrict their changes to\n   specific edits, such as replacing internal domain names with\n   pseudonyms or truncating the query and/or path components.  An\n   intermediary SHOULD NOT modify or delete the Referer header field\n   when the field value shares the same scheme and host as the request\n   target.\n\n<h4 class=\"h4\" id=\"section-5.5.3\">5.5.3.  User-Agent</h4>\n   The \"User-Agent\" header field contains information about the user\n   agent originating the request, which is often used by servers to help\n   identify the scope of reported interoperability problems, to work\n   around or tailor responses to avoid particular user agent\n   limitations, and for analytics regarding browser or operating system\n   use.  A user agent SHOULD send a User-Agent field in each request\n   unless specifically configured not to do so.\n\n     User-Agent = product *( RWS ( product / comment ) )\n\n   The User-Agent field-value consists of one or more product\n   identifiers, each followed by zero or more comments (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">Section 3.2 of\n   [RFC7230]</a>), which together identify the user agent software and its\n   significant subproducts.  By convention, the product identifiers are\n   listed in decreasing order of their significance for identifying the\n   user agent software.  Each product identifier consists of a name and\n   optional version.\n\n     product         = token [\"/\" product-version]\n     product-version = token\n\n   A sender SHOULD limit generated product identifiers to what is\n   necessary to identify the product; a sender MUST NOT generate\n   advertising or other nonessential information within the product\n   identifier.  A sender SHOULD NOT generate information in\n   product-version that is not a version identifier (i.e., successive\n   versions of the same product name ought to differ only in the\n   product-version portion of the product identifier).\n\n   Example:\n\n     User-Agent: CERN-LineMode/2.15 libwww/2.17b3\n\n   A user agent SHOULD NOT generate a User-Agent field containing\n   needlessly fine-grained detail and SHOULD limit the addition of\n   subproducts by third parties.  Overly long and detailed User-Agent\n   field values increase request latency and the risk of a user being\n   identified against their wishes (\"fingerprinting\").\n\n   Likewise, implementations are encouraged not to use the product\n   tokens of other implementations in order to declare compatibility\n   with them, as this circumvents the purpose of the field.  If a user\n   agent masquerades as a different user agent, recipients can assume\n   that the user intentionally desires to see responses tailored for\n   that identified user agent, even if they might not work as well for\n   the actual user agent being used.\n\n<h2 class=\"h2\" id=\"section-6\">6.  Response Status Codes</h2>\n   The status-code element is a three-digit integer code giving the\n   result of the attempt to understand and satisfy the request.\n\n   HTTP status codes are extensible.  HTTP clients are not required to\n   understand the meaning of all registered status codes, though such\n   understanding is obviously desirable.  However, a client MUST\n   understand the class of any status code, as indicated by the first\n   digit, and treat an unrecognized status code as being equivalent to\n   the x00 status code of that class, with the exception that a\n   recipient MUST NOT cache a response with an unrecognized status code.\n\n   For example, if an unrecognized status code of 471 is received by a\n   client, the client can assume that there was something wrong with its\n   request and treat the response as if it had received a 400 (Bad\n   Request) status code.  The response message will usually contain a\n   representation that explains the status.\n\n   The first digit of the status-code defines the class of response.\n   The last two digits do not have any categorization role.  There are\n   five values for the first digit:\n\n   o  1xx (Informational): The request was received, continuing process\n\n   o  2xx (Successful): The request was successfully received,\n      understood, and accepted\n\n   o  3xx (Redirection): Further action needs to be taken in order to\n      complete the request\n\n   o  4xx (Client Error): The request contains bad syntax or cannot be\n      fulfilled\n\n   o  5xx (Server Error): The server failed to fulfill an apparently\n      valid request\n\n<h3 class=\"h3\" id=\"section-6.1\">6.1.  Overview of Status Codes</h3>\n   The status codes listed below are defined in this specification,\n   <a href=\"https://tools.ietf.org/html/rfc7232#section-4\">Section 4 of [RFC7232]</a>, <a href=\"https://tools.ietf.org/html/rfc7233#section-4\">Section 4 of [RFC7233]</a>, and <a href=\"https://tools.ietf.org/html/rfc7235#section-3\">Section 3 of\n   [RFC7235]</a>.  The reason phrases listed here are only recommendations\n   -- they can be replaced by local equivalents without affecting the\n   protocol.\n\n   Responses with status codes that are defined as cacheable by default\n   (e.g., 200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501 in\n   this specification) can be reused by a cache with heuristic\n   expiration unless otherwise indicated by the method definition or\n   explicit cache controls [<a href=\"https://tools.ietf.org/html/rfc7234\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Caching\"'>RFC7234</a>]; all other status codes are not\n   cacheable by default.\n\n   +------+-------------------------------+--------------------------+\n   | Code | Reason-Phrase                 | Defined in...            |\n   +------+-------------------------------+--------------------------+\n   | 100  | Continue                      | <a href=\"#section-6.2.1\">Section 6.2.1</a>            |\n   | 101  | Switching Protocols           | <a href=\"#section-6.2.2\">Section 6.2.2</a>            |\n   | 200  | OK                            | <a href=\"#section-6.3.1\">Section 6.3.1</a>            |\n   | 201  | Created                       | <a href=\"#section-6.3.2\">Section 6.3.2</a>            |\n   | 202  | Accepted                      | <a href=\"#section-6.3.3\">Section 6.3.3</a>            |\n   | 203  | Non-Authoritative Information | <a href=\"#section-6.3.4\">Section 6.3.4</a>            |\n   | 204  | No Content                    | <a href=\"#section-6.3.5\">Section 6.3.5</a>            |\n   | 205  | Reset Content                 | <a href=\"#section-6.3.6\">Section 6.3.6</a>            |\n   | 206  | Partial Content               | <a href=\"https://tools.ietf.org/html/rfc7233#section-4.1\">Section 4.1 of [RFC7233]</a> |\n   | 300  | Multiple Choices              | <a href=\"#section-6.4.1\">Section 6.4.1</a>            |\n   | 301  | Moved Permanently             | <a href=\"#section-6.4.2\">Section 6.4.2</a>            |\n   | 302  | Found                         | <a href=\"#section-6.4.3\">Section 6.4.3</a>            |\n   | 303  | See Other                     | <a href=\"#section-6.4.4\">Section 6.4.4</a>            |\n   | 304  | Not Modified                  | <a href=\"https://tools.ietf.org/html/rfc7232#section-4.1\">Section 4.1 of [RFC7232]</a> |\n   | 305  | Use Proxy                     | <a href=\"#section-6.4.5\">Section 6.4.5</a>            |\n   | 307  | Temporary Redirect            | <a href=\"#section-6.4.7\">Section 6.4.7</a>            |\n   | 400  | Bad Request                   | <a href=\"#section-6.5.1\">Section 6.5.1</a>            |\n   | 401  | Unauthorized                  | <a href=\"https://tools.ietf.org/html/rfc7235#section-3.1\">Section 3.1 of [RFC7235]</a> |\n   | 402  | Payment Required              | <a href=\"#section-6.5.2\">Section 6.5.2</a>            |\n   | 403  | Forbidden                     | <a href=\"#section-6.5.3\">Section 6.5.3</a>            |\n   | 404  | Not Found                     | <a href=\"#section-6.5.4\">Section 6.5.4</a>            |\n   | 405  | Method Not Allowed            | <a href=\"#section-6.5.5\">Section 6.5.5</a>            |\n   | 406  | Not Acceptable                | <a href=\"#section-6.5.6\">Section 6.5.6</a>            |\n   | 407  | Proxy Authentication Required | <a href=\"https://tools.ietf.org/html/rfc7235#section-3.2\">Section 3.2 of [RFC7235]</a> |\n   | 408  | Request Timeout               | <a href=\"#section-6.5.7\">Section 6.5.7</a>            |\n   | 409  | Conflict                      | <a href=\"#section-6.5.8\">Section 6.5.8</a>            |\n   | 410  | Gone                          | <a href=\"#section-6.5.9\">Section 6.5.9</a>            |\n   | 411  | Length Required               | <a href=\"#section-6.5.10\">Section 6.5.10</a>           |\n   | 412  | Precondition Failed           | <a href=\"https://tools.ietf.org/html/rfc7232#section-4.2\">Section 4.2 of [RFC7232]</a> |\n   | 413  | Payload Too Large             | <a href=\"#section-6.5.11\">Section 6.5.11</a>           |\n   | 414  | URI Too Long                  | <a href=\"#section-6.5.12\">Section 6.5.12</a>           |\n   | 415  | Unsupported Media Type        | <a href=\"#section-6.5.13\">Section 6.5.13</a>           |\n   | 416  | Range Not Satisfiable         | <a href=\"https://tools.ietf.org/html/rfc7233#section-4.4\">Section 4.4 of [RFC7233]</a> |\n   | 417  | Expectation Failed            | <a href=\"#section-6.5.14\">Section 6.5.14</a>           |\n   | 426  | Upgrade Required              | <a href=\"#section-6.5.15\">Section 6.5.15</a>           |\n   | 500  | Internal Server Error         | <a href=\"#section-6.6.1\">Section 6.6.1</a>            |\n   | 501  | Not Implemented               | <a href=\"#section-6.6.2\">Section 6.6.2</a>            |\n   | 502  | Bad Gateway                   | <a href=\"#section-6.6.3\">Section 6.6.3</a>            |\n   | 503  | Service Unavailable           | <a href=\"#section-6.6.4\">Section 6.6.4</a>            |\n   | 504  | Gateway Timeout               | <a href=\"#section-6.6.5\">Section 6.6.5</a>            |\n   | 505  | HTTP Version Not Supported    | <a href=\"#section-6.6.6\">Section 6.6.6</a>            |\n   +------+-------------------------------+--------------------------+\n\n   Note that this list is not exhaustive -- it does not include\n   extension status codes defined in other specifications.  The complete\n   list of status codes is maintained by IANA.  See <a href=\"#section-8.2\">Section 8.2</a> for\n   details.\n\n<h3 class=\"h3\" id=\"section-6.2\">6.2.  Informational 1xx</h3>\n   The 1xx (Informational) class of status code indicates an interim\n   response for communicating connection status or request progress\n   prior to completing the requested action and sending a final\n   response. 1xx responses are terminated by the first empty line after\n   the status-line (the empty line signaling the end of the header\n   section).  Since HTTP/1.0 did not define any 1xx status codes, a\n   server MUST NOT send a 1xx response to an HTTP/1.0 client.\n\n   A client MUST be able to parse one or more 1xx responses received\n   prior to a final response, even if the client does not expect one.  A\n   user agent MAY ignore unexpected 1xx responses.\n\n   A proxy MUST forward 1xx responses unless the proxy itself requested\n   the generation of the 1xx response.  For example, if a proxy adds an\n   \"Expect: 100-continue\" field when it forwards a request, then it need\n   not forward the corresponding 100 (Continue) response(s).\n\n<h4 class=\"h4\" id=\"section-6.2.1\">6.2.1.  100 Continue</h4>\n   The 100 (Continue) status code indicates that the initial part of a\n   request has been received and has not yet been rejected by the\n   server.  The server intends to send a final response after the\n   request has been fully received and acted upon.\n\n   When the request contains an Expect header field that includes a\n   100-continue expectation, the 100 response indicates that the server\n   wishes to receive the request payload body, as described in\n   <a href=\"#section-5.1.1\">Section 5.1.1</a>.  The client ought to continue sending the request and\n   discard the 100 response.\n\n   If the request did not contain an Expect header field containing the\n   100-continue expectation, the client can simply discard this interim\n   response.\n\n<h4 class=\"h4\" id=\"section-6.2.2\">6.2.2.  101 Switching Protocols</h4>\n   The 101 (Switching Protocols) status code indicates that the server\n   understands and is willing to comply with the client's request, via\n   the Upgrade header field (<a href=\"https://tools.ietf.org/html/rfc7230#section-6.7\">Section 6.7 of [RFC7230]</a>), for a change in\n   the application protocol being used on this connection.  The server\n\n   MUST generate an Upgrade header field in the response that indicates\n   which protocol(s) will be switched to immediately after the empty\n   line that terminates the 101 response.\n\n   It is assumed that the server will only agree to switch protocols\n   when it is advantageous to do so.  For example, switching to a newer\n   version of HTTP might be advantageous over older versions, and\n   switching to a real-time, synchronous protocol might be advantageous\n   when delivering resources that use such features.\n\n<h3 class=\"h3\" id=\"section-6.3\">6.3.  Successful 2xx</h3>\n   The 2xx (Successful) class of status code indicates that the client's\n   request was successfully received, understood, and accepted.\n\n<h4 class=\"h4\" id=\"section-6.3.1\">6.3.1.  200 OK</h4>\n   The 200 (OK) status code indicates that the request has succeeded.\n   The payload sent in a 200 response depends on the request method.\n   For the methods defined by this specification, the intended meaning\n   of the payload can be summarized as:\n\n   GET  a representation of the target resource;\n\n   HEAD  the same representation as GET, but without the representation\n      data;\n\n   POST  a representation of the status of, or results obtained from,\n      the action;\n\n   PUT, DELETE  a representation of the status of the action;\n\n   OPTIONS  a representation of the communications options;\n\n   TRACE  a representation of the request message as received by the end\n      server.\n\n   Aside from responses to CONNECT, a 200 response always has a payload,\n   though an origin server MAY generate a payload body of zero length.\n   If no payload is desired, an origin server ought to send 204 (No\n   Content) instead.  For CONNECT, no payload is allowed because the\n   successful result is a tunnel, which begins immediately after the 200\n   response header section.\n\n   A 200 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-6.3.2\">6.3.2.  201 Created</h4>\n   The 201 (Created) status code indicates that the request has been\n   fulfilled and has resulted in one or more new resources being\n   created.  The primary resource created by the request is identified\n   by either a Location header field in the response or, if no Location\n   field is received, by the effective request URI.\n\n   The 201 response payload typically describes and links to the\n   resource(s) created.  See <a href=\"#section-7.2\">Section 7.2</a> for a discussion of the meaning\n   and purpose of validator header fields, such as ETag and\n   Last-Modified, in a 201 response.\n\n<h4 class=\"h4\" id=\"section-6.3.3\">6.3.3.  202 Accepted</h4>\n   The 202 (Accepted) status code indicates that the request has been\n   accepted for processing, but the processing has not been completed.\n   The request might or might not eventually be acted upon, as it might\n   be disallowed when processing actually takes place.  There is no\n   facility in HTTP for re-sending a status code from an asynchronous\n   operation.\n\n   The 202 response is intentionally noncommittal.  Its purpose is to\n   allow a server to accept a request for some other process (perhaps a\n   batch-oriented process that is only run once per day) without\n   requiring that the user agent's connection to the server persist\n   until the process is completed.  The representation sent with this\n   response ought to describe the request's current status and point to\n   (or embed) a status monitor that can provide the user with an\n   estimate of when the request will be fulfilled.\n\n<h4 class=\"h4\" id=\"section-6.3.4\">6.3.4.  203 Non-Authoritative Information</h4>\n   The 203 (Non-Authoritative Information) status code indicates that\n   the request was successful but the enclosed payload has been modified\n   from that of the origin server's 200 (OK) response by a transforming\n   proxy (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.7.2\">Section 5.7.2 of [RFC7230]</a>).  This status code allows the\n   proxy to notify recipients when a transformation has been applied,\n   since that knowledge might impact later decisions regarding the\n   content.  For example, future cache validation requests for the\n   content might only be applicable along the same request path (through\n   the same proxies).\n\n   The 203 response is similar to the Warning code of 214 Transformation\n   Applied (<a href=\"https://tools.ietf.org/html/rfc7234#section-5.5\">Section 5.5 of [RFC7234]</a>), which has the advantage of being\n   applicable to responses with any status code.\n\n   A 203 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-6.3.5\">6.3.5.  204 No Content</h4>\n   The 204 (No Content) status code indicates that the server has\n   successfully fulfilled the request and that there is no additional\n   content to send in the response payload body.  Metadata in the\n   response header fields refer to the target resource and its selected\n   representation after the requested action was applied.\n\n   For example, if a 204 status code is received in response to a PUT\n   request and the response contains an ETag header field, then the PUT\n   was successful and the ETag field-value contains the entity-tag for\n   the new representation of that target resource.\n\n   The 204 response allows a server to indicate that the action has been\n   successfully applied to the target resource, while implying that the\n   user agent does not need to traverse away from its current \"document\n   view\" (if any).  The server assumes that the user agent will provide\n   some indication of the success to its user, in accord with its own\n   interface, and apply any new or updated metadata in the response to\n   its active representation.\n\n   For example, a 204 status code is commonly used with document editing\n   interfaces corresponding to a \"save\" action, such that the document\n   being saved remains available to the user for editing.  It is also\n   frequently used with interfaces that expect automated data transfers\n   to be prevalent, such as within distributed version control systems.\n\n   A 204 response is terminated by the first empty line after the header\n   fields because it cannot contain a message body.\n\n   A 204 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-6.3.6\">6.3.6.  205 Reset Content</h4>\n   The 205 (Reset Content) status code indicates that the server has\n   fulfilled the request and desires that the user agent reset the\n   \"document view\", which caused the request to be sent, to its original\n   state as received from the origin server.\n\n   This response is intended to support a common data entry use case\n   where the user receives content that supports data entry (a form,\n   notepad, canvas, etc.), enters or manipulates data in that space,\n\n   causes the entered data to be submitted in a request, and then the\n   data entry mechanism is reset for the next entry so that the user can\n   easily initiate another input action.\n\n   Since the 205 status code implies that no additional content will be\n   provided, a server MUST NOT generate a payload in a 205 response.  In\n   other words, a server MUST do one of the following for a 205\n   response: a) indicate a zero-length body for the response by\n   including a Content-Length header field with a value of 0; b)\n   indicate a zero-length payload for the response by including a\n   Transfer-Encoding header field with a value of chunked and a message\n   body consisting of a single chunk of zero-length; or, c) close the\n   connection immediately after sending the blank line terminating the\n   header section.\n\n<h3 class=\"h3\" id=\"section-6.4\">6.4.  Redirection 3xx</h3>\n   The 3xx (Redirection) class of status code indicates that further\n   action needs to be taken by the user agent in order to fulfill the\n   request.  If a Location header field (<a href=\"#section-7.1.2\">Section 7.1.2</a>) is provided, the\n   user agent MAY automatically redirect its request to the URI\n   referenced by the Location field value, even if the specific status\n   code is not understood.  Automatic redirection needs to done with\n   care for methods not known to be safe, as defined in <a href=\"#section-4.2.1\">Section 4.2.1</a>,\n   since the user might not wish to redirect an unsafe request.\n\n   There are several types of redirects:\n\n   1.  Redirects that indicate the resource might be available at a\n       different URI, as provided by the Location field, as in the\n       status codes 301 (Moved Permanently), 302 (Found), and 307\n       (Temporary Redirect).\n\n   2.  Redirection that offers a choice of matching resources, each\n       capable of representing the original request target, as in the\n       300 (Multiple Choices) status code.\n\n   3.  Redirection to a different resource, identified by the Location\n       field, that can represent an indirect response to the request, as\n       in the 303 (See Other) status code.\n\n   4.  Redirection to a previously cached result, as in the 304 (Not\n       Modified) status code.\n\n      Note: In HTTP/1.0, the status codes 301 (Moved Permanently) and\n      302 (Found) were defined for the first type of redirect\n      (<a href=\"https://tools.ietf.org/html/rfc1945#section-9.3\">[RFC1945], Section 9.3</a>).  Early user agents split on whether the\n      method applied to the redirect target would be the same as the\n\n      original request or would be rewritten as GET.  Although HTTP\n      originally defined the former semantics for 301 and 302 (to match\n      its original implementation at CERN), and defined 303 (See Other)\n      to match the latter semantics, prevailing practice gradually\n      converged on the latter semantics for 301 and 302 as well.  The\n      first revision of HTTP/1.1 added 307 (Temporary Redirect) to\n      indicate the former semantics without being impacted by divergent\n      practice.  Over 10 years later, most user agents still do method\n      rewriting for 301 and 302; therefore, this specification makes\n      that behavior conformant when the original request is POST.\n\n   A client SHOULD detect and intervene in cyclical redirections (i.e.,\n   \"infinite\" redirection loops).\n\n      Note: An earlier version of this specification recommended a\n      maximum of five redirections (<a href=\"https://tools.ietf.org/html/rfc2068#section-10.3\">[RFC2068], Section 10.3</a>).  Content\n      developers need to be aware that some clients might implement such\n      a fixed limitation.\n\n<h4 class=\"h4\" id=\"section-6.4.1\">6.4.1.  300 Multiple Choices</h4>\n   The 300 (Multiple Choices) status code indicates that the target\n   resource has more than one representation, each with its own more\n   specific identifier, and information about the alternatives is being\n   provided so that the user (or user agent) can select a preferred\n   representation by redirecting its request to one or more of those\n   identifiers.  In other words, the server desires that the user agent\n   engage in reactive negotiation to select the most appropriate\n   representation(s) for its needs (<a href=\"#section-3.4\">Section 3.4</a>).\n\n   If the server has a preferred choice, the server SHOULD generate a\n   Location header field containing a preferred choice's URI reference.\n   The user agent MAY use the Location field value for automatic\n   redirection.\n\n   For request methods other than HEAD, the server SHOULD generate a\n   payload in the 300 response containing a list of representation\n   metadata and URI reference(s) from which the user or user agent can\n   choose the one most preferred.  The user agent MAY make a selection\n   from that list automatically if it understands the provided media\n   type.  A specific format for automatic selection is not defined by\n   this specification because HTTP tries to remain orthogonal to the\n   definition of its payloads.  In practice, the representation is\n   provided in some easily parsed format believed to be acceptable to\n   the user agent, as determined by shared design or content\n   negotiation, or in some commonly accepted hypertext format.\n\n   A 300 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n      Note: The original proposal for the 300 status code defined the\n      URI header field as providing a list of alternative\n      representations, such that it would be usable for 200, 300, and\n      406 responses and be transferred in responses to the HEAD method.\n      However, lack of deployment and disagreement over syntax led to\n      both URI and Alternates (a subsequent proposal) being dropped from\n      this specification.  It is possible to communicate the list using\n      a set of Link header fields [<a href=\"https://tools.ietf.org/html/rfc5988\" title='\"Web Linking\"'>RFC5988</a>], each with a relationship of\n      \"alternate\", though deployment is a chicken-and-egg problem.\n\n<h4 class=\"h4\" id=\"section-6.4.2\">6.4.2.  301 Moved Permanently</h4>\n   The 301 (Moved Permanently) status code indicates that the target\n   resource has been assigned a new permanent URI and any future\n   references to this resource ought to use one of the enclosed URIs.\n   Clients with link-editing capabilities ought to automatically re-link\n   references to the effective request URI to one or more of the new\n   references sent by the server, where possible.\n\n   The server SHOULD generate a Location header field in the response\n   containing a preferred URI reference for the new permanent URI.  The\n   user agent MAY use the Location field value for automatic\n   redirection.  The server's response payload usually contains a short\n   hypertext note with a hyperlink to the new URI(s).\n\n      Note: For historical reasons, a user agent MAY change the request\n      method from POST to GET for the subsequent request.  If this\n      behavior is undesired, the 307 (Temporary Redirect) status code\n      can be used instead.\n\n   A 301 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-6.4.3\">6.4.3.  302 Found</h4>\n   The 302 (Found) status code indicates that the target resource\n   resides temporarily under a different URI.  Since the redirection\n   might be altered on occasion, the client ought to continue to use the\n   effective request URI for future requests.\n\n   The server SHOULD generate a Location header field in the response\n   containing a URI reference for the different URI.  The user agent MAY\n   use the Location field value for automatic redirection.  The server's\n   response payload usually contains a short hypertext note with a\n   hyperlink to the different URI(s).\n\n      Note: For historical reasons, a user agent MAY change the request\n      method from POST to GET for the subsequent request.  If this\n      behavior is undesired, the 307 (Temporary Redirect) status code\n      can be used instead.\n\n<h4 class=\"h4\" id=\"section-6.4.4\">6.4.4.  303 See Other</h4>\n   The 303 (See Other) status code indicates that the server is\n   redirecting the user agent to a different resource, as indicated by a\n   URI in the Location header field, which is intended to provide an\n   indirect response to the original request.  A user agent can perform\n   a retrieval request targeting that URI (a GET or HEAD request if\n   using HTTP), which might also be redirected, and present the eventual\n   result as an answer to the original request.  Note that the new URI\n   in the Location header field is not considered equivalent to the\n   effective request URI.\n\n   This status code is applicable to any HTTP method.  It is primarily\n   used to allow the output of a POST action to redirect the user agent\n   to a selected resource, since doing so provides the information\n   corresponding to the POST response in a form that can be separately\n   identified, bookmarked, and cached, independent of the original\n   request.\n\n   A 303 response to a GET request indicates that the origin server does\n   not have a representation of the target resource that can be\n   transferred by the server over HTTP.  However, the Location field\n   value refers to a resource that is descriptive of the target\n   resource, such that making a retrieval request on that other resource\n   might result in a representation that is useful to recipients without\n   implying that it represents the original target resource.  Note that\n   answers to the questions of what can be represented, what\n   representations are adequate, and what might be a useful description\n   are outside the scope of HTTP.\n\n   Except for responses to a HEAD request, the representation of a 303\n   response ought to contain a short hypertext note with a hyperlink to\n   the same URI reference provided in the Location header field.\n\n<h4 class=\"h4\" id=\"section-6.4.5\">6.4.5.  305 Use Proxy</h4>\n   The 305 (Use Proxy) status code was defined in a previous version of\n   this specification and is now deprecated (Appendix B).\n\n<h4 class=\"h4\" id=\"section-6.4.6\">6.4.6.  306 (Unused)</h4>\n   The 306 status code was defined in a previous version of this\n   specification, is no longer used, and the code is reserved.\n\n<h4 class=\"h4\" id=\"section-6.4.7\">6.4.7.  307 Temporary Redirect</h4>\n   The 307 (Temporary Redirect) status code indicates that the target\n   resource resides temporarily under a different URI and the user agent\n   MUST NOT change the request method if it performs an automatic\n   redirection to that URI.  Since the redirection can change over time,\n   the client ought to continue using the original effective request URI\n   for future requests.\n\n   The server SHOULD generate a Location header field in the response\n   containing a URI reference for the different URI.  The user agent MAY\n   use the Location field value for automatic redirection.  The server's\n   response payload usually contains a short hypertext note with a\n   hyperlink to the different URI(s).\n\n      Note: This status code is similar to 302 (Found), except that it\n      does not allow changing the request method from POST to GET.  This\n      specification defines no equivalent counterpart for 301 (Moved\n      Permanently) ([<a href=\"https://tools.ietf.org/html/rfc7238\" title='\"The Hypertext Transfer Protocol (HTTP) Status Code 308 (Permanent Redirect)\"'>RFC7238</a>], however, defines the status code 308\n      (Permanent Redirect) for this purpose).\n\n<h3 class=\"h3\" id=\"section-6.5\">6.5.  Client Error 4xx</h3>\n   The 4xx (Client Error) class of status code indicates that the client\n   seems to have erred.  Except when responding to a HEAD request, the\n   server SHOULD send a representation containing an explanation of the\n   error situation, and whether it is a temporary or permanent\n   condition.  These status codes are applicable to any request method.\n   User agents SHOULD display any included representation to the user.\n\n<h4 class=\"h4\" id=\"section-6.5.1\">6.5.1.  400 Bad Request</h4>\n   The 400 (Bad Request) status code indicates that the server cannot or\n   will not process the request due to something that is perceived to be\n   a client error (e.g., malformed request syntax, invalid request\n   message framing, or deceptive request routing).\n\n<h4 class=\"h4\" id=\"section-6.5.2\">6.5.2.  402 Payment Required</h4>\n   The 402 (Payment Required) status code is reserved for future use.\n\n<h4 class=\"h4\" id=\"section-6.5.3\">6.5.3.  403 Forbidden</h4>\n   The 403 (Forbidden) status code indicates that the server understood\n   the request but refuses to authorize it.  A server that wishes to\n   make public why the request has been forbidden can describe that\n   reason in the response payload (if any).\n\n   If authentication credentials were provided in the request, the\n   server considers them insufficient to grant access.  The client\n   SHOULD NOT automatically repeat the request with the same\n   credentials.  The client MAY repeat the request with new or different\n   credentials.  However, a request might be forbidden for reasons\n   unrelated to the credentials.\n\n   An origin server that wishes to \"hide\" the current existence of a\n   forbidden target resource MAY instead respond with a status code of\n   404 (Not Found).\n\n<h4 class=\"h4\" id=\"section-6.5.4\">6.5.4.  404 Not Found</h4>\n   The 404 (Not Found) status code indicates that the origin server did\n   not find a current representation for the target resource or is not\n   willing to disclose that one exists.  A 404 status code does not\n   indicate whether this lack of representation is temporary or\n   permanent; the 410 (Gone) status code is preferred over 404 if the\n   origin server knows, presumably through some configurable means, that\n   the condition is likely to be permanent.\n\n   A 404 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-6.5.5\">6.5.5.  405 Method Not Allowed</h4>\n   The 405 (Method Not Allowed) status code indicates that the method\n   received in the request-line is known by the origin server but not\n   supported by the target resource.  The origin server MUST generate an\n   Allow header field in a 405 response containing a list of the target\n   resource's currently supported methods.\n\n   A 405 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-6.5.6\">6.5.6.  406 Not Acceptable</h4>\n   The 406 (Not Acceptable) status code indicates that the target\n   resource does not have a current representation that would be\n   acceptable to the user agent, according to the proactive negotiation\n   header fields received in the request (<a href=\"#section-5.3\">Section 5.3</a>), and the server\n   is unwilling to supply a default representation.\n\n   The server SHOULD generate a payload containing a list of available\n   representation characteristics and corresponding resource identifiers\n   from which the user or user agent can choose the one most\n   appropriate.  A user agent MAY automatically select the most\n   appropriate choice from that list.  However, this specification does\n   not define any standard for such automatic selection, as described in\n   <a href=\"#section-6.4.1\">Section 6.4.1</a>.\n\n<h4 class=\"h4\" id=\"section-6.5.7\">6.5.7.  408 Request Timeout</h4>\n   The 408 (Request Timeout) status code indicates that the server did\n   not receive a complete request message within the time that it was\n   prepared to wait.  A server SHOULD send the \"close\" connection option\n   (<a href=\"https://tools.ietf.org/html/rfc7230#section-6.1\">Section 6.1 of [RFC7230]</a>) in the response, since 408 implies that\n   the server has decided to close the connection rather than continue\n   waiting.  If the client has an outstanding request in transit, the\n   client MAY repeat that request on a new connection.\n\n<h4 class=\"h4\" id=\"section-6.5.8\">6.5.8.  409 Conflict</h4>\n   The 409 (Conflict) status code indicates that the request could not\n   be completed due to a conflict with the current state of the target\n   resource.  This code is used in situations where the user might be\n   able to resolve the conflict and resubmit the request.  The server\n   SHOULD generate a payload that includes enough information for a user\n   to recognize the source of the conflict.\n\n   Conflicts are most likely to occur in response to a PUT request.  For\n   example, if versioning were being used and the representation being\n   PUT included changes to a resource that conflict with those made by\n   an earlier (third-party) request, the origin server might use a 409\n   response to indicate that it can't complete the request.  In this\n   case, the response representation would likely contain information\n   useful for merging the differences based on the revision history.\n\n<h4 class=\"h4\" id=\"section-6.5.9\">6.5.9.  410 Gone</h4>\n   The 410 (Gone) status code indicates that access to the target\n   resource is no longer available at the origin server and that this\n   condition is likely to be permanent.  If the origin server does not\n\n   know, or has no facility to determine, whether or not the condition\n   is permanent, the status code 404 (Not Found) ought to be used\n   instead.\n\n   The 410 response is primarily intended to assist the task of web\n   maintenance by notifying the recipient that the resource is\n   intentionally unavailable and that the server owners desire that\n   remote links to that resource be removed.  Such an event is common\n   for limited-time, promotional services and for resources belonging to\n   individuals no longer associated with the origin server's site.  It\n   is not necessary to mark all permanently unavailable resources as\n   \"gone\" or to keep the mark for any length of time -- that is left to\n   the discretion of the server owner.\n\n   A 410 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-6.5.10\">6.5.10.  411 Length Required</h4>\n   The 411 (Length Required) status code indicates that the server\n   refuses to accept the request without a defined Content-Length\n   (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.2\">Section 3.3.2 of [RFC7230]</a>).  The client MAY repeat the request if\n   it adds a valid Content-Length header field containing the length of\n   the message body in the request message.\n\n<h4 class=\"h4\" id=\"section-6.5.11\">6.5.11.  413 Payload Too Large</h4>\n   The 413 (Payload Too Large) status code indicates that the server is\n   refusing to process a request because the request payload is larger\n   than the server is willing or able to process.  The server MAY close\n   the connection to prevent the client from continuing the request.\n\n   If the condition is temporary, the server SHOULD generate a\n   Retry-After header field to indicate that it is temporary and after\n   what time the client MAY try again.\n\n<h4 class=\"h4\" id=\"section-6.5.12\">6.5.12.  414 URI Too Long</h4>\n   The 414 (URI Too Long) status code indicates that the server is\n   refusing to service the request because the request-target (<a href=\"#section-5.3\">Section</a>\n   <a href=\"#section-5.3\">5.3</a> of [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>]) is longer than the server is willing to interpret.\n   This rare condition is only likely to occur when a client has\n   improperly converted a POST request to a GET request with long query\n   information, when the client has descended into a \"black hole\" of\n   redirection (e.g., a redirected URI prefix that points to a suffix of\n   itself) or when the server is under attack by a client attempting to\n   exploit potential security holes.\n\n   A 414 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-6.5.13\">6.5.13.  415 Unsupported Media Type</h4>\n   The 415 (Unsupported Media Type) status code indicates that the\n   origin server is refusing to service the request because the payload\n   is in a format not supported by this method on the target resource.\n   The format problem might be due to the request's indicated\n   Content-Type or Content-Encoding, or as a result of inspecting the\n   data directly.\n\n<h4 class=\"h4\" id=\"section-6.5.14\">6.5.14.  417 Expectation Failed</h4>\n   The 417 (Expectation Failed) status code indicates that the\n   expectation given in the request's Expect header field\n   (<a href=\"#section-5.1.1\">Section 5.1.1</a>) could not be met by at least one of the inbound\n   servers.\n\n<h4 class=\"h4\" id=\"section-6.5.15\">6.5.15.  426 Upgrade Required</h4>\n   The 426 (Upgrade Required) status code indicates that the server\n   refuses to perform the request using the current protocol but might\n   be willing to do so after the client upgrades to a different\n   protocol.  The server MUST send an Upgrade header field in a 426\n   response to indicate the required protocol(s) (<a href=\"https://tools.ietf.org/html/rfc7230#section-6.7\">Section 6.7 of\n   [RFC7230]</a>).\n\n   Example:\n\n     HTTP/1.1 426 Upgrade Required\n     Upgrade: HTTP/3.0\n     Connection: Upgrade\n     Content-Length: 53\n     Content-Type: text/plain\n\n     This service requires use of the HTTP/3.0 protocol.\n\n<h3 class=\"h3\" id=\"section-6.6\">6.6.  Server Error 5xx</h3>\n   The 5xx (Server Error) class of status code indicates that the server\n   is aware that it has erred or is incapable of performing the\n   requested method.  Except when responding to a HEAD request, the\n   server SHOULD send a representation containing an explanation of the\n   error situation, and whether it is a temporary or permanent\n\n   condition.  A user agent SHOULD display any included representation\n   to the user.  These response codes are applicable to any request\n   method.\n\n<h4 class=\"h4\" id=\"section-6.6.1\">6.6.1.  500 Internal Server Error</h4>\n   The 500 (Internal Server Error) status code indicates that the server\n   encountered an unexpected condition that prevented it from fulfilling\n   the request.\n\n<h4 class=\"h4\" id=\"section-6.6.2\">6.6.2.  501 Not Implemented</h4>\n   The 501 (Not Implemented) status code indicates that the server does\n   not support the functionality required to fulfill the request.  This\n   is the appropriate response when the server does not recognize the\n   request method and is not capable of supporting it for any resource.\n\n   A 501 response is cacheable by default; i.e., unless otherwise\n   indicated by the method definition or explicit cache controls (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2.2\">Section 4.2.2 of [RFC7234]</a>).\n\n<h4 class=\"h4\" id=\"section-6.6.3\">6.6.3.  502 Bad Gateway</h4>\n   The 502 (Bad Gateway) status code indicates that the server, while\n   acting as a gateway or proxy, received an invalid response from an\n   inbound server it accessed while attempting to fulfill the request.\n\n<h4 class=\"h4\" id=\"section-6.6.4\">6.6.4.  503 Service Unavailable</h4>\n   The 503 (Service Unavailable) status code indicates that the server\n   is currently unable to handle the request due to a temporary overload\n   or scheduled maintenance, which will likely be alleviated after some\n   delay.  The server MAY send a Retry-After header field\n   (<a href=\"#section-7.1.3\">Section 7.1.3</a>) to suggest an appropriate amount of time for the\n   client to wait before retrying the request.\n\n      Note: The existence of the 503 status code does not imply that a\n      server has to use it when becoming overloaded.  Some servers might\n      simply refuse the connection.\n\n<h4 class=\"h4\" id=\"section-6.6.5\">6.6.5.  504 Gateway Timeout</h4>\n   The 504 (Gateway Timeout) status code indicates that the server,\n   while acting as a gateway or proxy, did not receive a timely response\n   from an upstream server it needed to access in order to complete the\n   request.\n\n<h4 class=\"h4\" id=\"section-6.6.6\">6.6.6.  505 HTTP Version Not Supported</h4>\n   The 505 (HTTP Version Not Supported) status code indicates that the\n   server does not support, or refuses to support, the major version of\n   HTTP that was used in the request message.  The server is indicating\n   that it is unable or unwilling to complete the request using the same\n   major version as the client, as described in <a href=\"https://tools.ietf.org/html/rfc7230#section-2.6\">Section 2.6 of\n   [RFC7230]</a>, other than with this error message.  The server SHOULD\n   generate a representation for the 505 response that describes why\n   that version is not supported and what other protocols are supported\n   by that server.\n\n<h2 class=\"h2\" id=\"section-7\">7.  Response Header Fields</h2>\n   The response header fields allow the server to pass additional\n   information about the response beyond what is placed in the\n   status-line.  These header fields give information about the server,\n   about further access to the target resource, or about related\n   resources.\n\n   Although each response header field has a defined meaning, in\n   general, the precise semantics might be further refined by the\n   semantics of the request method and/or response status code.\n\n<h3 class=\"h3\" id=\"section-7.1\">7.1.  Control Data</h3>\n   Response header fields can supply control data that supplements the\n   status code, directs caching, or instructs the client where to go\n   next.\n\n   +-------------------+--------------------------+\n   | Header Field Name | Defined in...            |\n   +-------------------+--------------------------+\n   | Age               | <a href=\"https://tools.ietf.org/html/rfc7234#section-5.1\">Section 5.1 of [RFC7234]</a> |\n   | Cache-Control     | <a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Section 5.2 of [RFC7234]</a> |\n   | Expires           | <a href=\"https://tools.ietf.org/html/rfc7234#section-5.3\">Section 5.3 of [RFC7234]</a> |\n   | Date              | <a href=\"#section-7.1.1.2\">Section 7.1.1.2</a>          |\n   | Location          | <a href=\"#section-7.1.2\">Section 7.1.2</a>            |\n   | Retry-After       | <a href=\"#section-7.1.3\">Section 7.1.3</a>            |\n   | Vary              | <a href=\"#section-7.1.4\">Section 7.1.4</a>            |\n   | Warning           | <a href=\"https://tools.ietf.org/html/rfc7234#section-5.5\">Section 5.5 of [RFC7234]</a> |\n   +-------------------+--------------------------+\n\n<h4 class=\"h4\" id=\"section-7.1.1\">7.1.1.  Origination Date</h4>\n<h5 class=\"h5\" id=\"section-7.1.1.1\">7.1.1.1.  Date/Time Formats</h5>\n   Prior to 1995, there were three different formats commonly used by\n   servers to communicate timestamps.  For compatibility with old\n   implementations, all three are defined here.  The preferred format is\n   a fixed-length and single-zone subset of the date and time\n   specification used by the Internet Message Format [<a href=\"https://tools.ietf.org/html/rfc5322\" title='\"Internet Message Format\"'>RFC5322</a>].\n\n     HTTP-date    = IMF-fixdate / obs-date\n\n   An example of the preferred format is\n\n     Sun, 06 Nov 1994 08:49:37 GMT    ; IMF-fixdate\n\n   Examples of the two obsolete formats are\n\n     Sunday, 06-Nov-94 08:49:37 GMT   ; obsolete <a href=\"https://tools.ietf.org/html/rfc850\">RFC 850</a> format\n     Sun Nov  6 08:49:37 1994         ; ANSI C's asctime() format\n\n   A recipient that parses a timestamp value in an HTTP header field\n   MUST accept all three HTTP-date formats.  When a sender generates a\n   header field that contains one or more timestamps defined as\n   HTTP-date, the sender MUST generate those timestamps in the\n   IMF-fixdate format.\n\n   An HTTP-date value represents time as an instance of Coordinated\n   Universal Time (UTC).  The first two formats indicate UTC by the\n   three-letter abbreviation for Greenwich Mean Time, \"GMT\", a\n   predecessor of the UTC name; values in the asctime format are assumed\n   to be in UTC.  A sender that generates HTTP-date values from a local\n   clock ought to use NTP ([<a href=\"https://tools.ietf.org/html/rfc5905\" title='\"Network Time Protocol Version 4: Protocol and Algorithms Specification\"'>RFC5905</a>]) or some similar protocol to\n   synchronize its clock to UTC.\n\n   Preferred format:\n\n     IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n     ; fixed length/zone/capitalization subset of the format\n     ; see <a href=\"https://tools.ietf.org/html/rfc5322#section-3.3\">Section 3.3 of [RFC5322]</a>\n\n     day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n                  / %x54.75.65 ; \"Tue\", case-sensitive\n                  / %x57.65.64 ; \"Wed\", case-sensitive\n                  / %x54.68.75 ; \"Thu\", case-sensitive\n                  / %x46.72.69 ; \"Fri\", case-sensitive\n                  / %x53.61.74 ; \"Sat\", case-sensitive\n                  / %x53.75.6E ; \"Sun\", case-sensitive\n\n     date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n     day          = 2DIGIT\n     month        = %x4A.61.6E ; \"Jan\", case-sensitive\n                  / %x46.65.62 ; \"Feb\", case-sensitive\n                  / %x4D.61.72 ; \"Mar\", case-sensitive\n                  / %x41.70.72 ; \"Apr\", case-sensitive\n                  / %x4D.61.79 ; \"May\", case-sensitive\n                  / %x4A.75.6E ; \"Jun\", case-sensitive\n                  / %x4A.75.6C ; \"Jul\", case-sensitive\n                  / %x41.75.67 ; \"Aug\", case-sensitive\n                  / %x53.65.70 ; \"Sep\", case-sensitive\n                  / %x4F.63.74 ; \"Oct\", case-sensitive\n                  / %x4E.6F.76 ; \"Nov\", case-sensitive\n                  / %x44.65.63 ; \"Dec\", case-sensitive\n     year         = 4DIGIT\n\n     GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n     time-of-day  = hour \":\" minute \":\" second\n                  ; 00:00:00 - 23:59:60 (leap second)\n\n     hour         = 2DIGIT\n     minute       = 2DIGIT\n     second       = 2DIGIT\n\n   Obsolete formats:\n\n     obs-date     = <a href=\"https://tools.ietf.org/html/rfc850\">rfc850</a>-date / asctime-date\n\n     <a href=\"https://tools.ietf.org/html/rfc850\">rfc850</a>-date  = day-name-l \",\" SP date2 SP time-of-day SP GMT\n     date2        = day \"-\" month \"-\" 2DIGIT\n                  ; e.g., 02-Jun-82\n\n     day-name-l   = %x4D.6F.6E.64.61.79    ; \"Monday\", case-sensitive\n            / %x54.75.65.73.64.61.79       ; \"Tuesday\", case-sensitive\n            / %x57.65.64.6E.65.73.64.61.79 ; \"Wednesday\", case-sensitive\n            / %x54.68.75.72.73.64.61.79    ; \"Thursday\", case-sensitive\n            / %x46.72.69.64.61.79          ; \"Friday\", case-sensitive\n            / %x53.61.74.75.72.64.61.79    ; \"Saturday\", case-sensitive\n            / %x53.75.6E.64.61.79          ; \"Sunday\", case-sensitive\n\n\n     asctime-date = day-name SP date3 SP time-of-day SP year\n     date3        = month SP ( 2DIGIT / ( SP 1DIGIT ))\n                  ; e.g., Jun  2\n\n   HTTP-date is case sensitive.  A sender MUST NOT generate additional\n   whitespace in an HTTP-date beyond that specifically included as SP in\n   the grammar.  The semantics of day-name, day, month, year, and\n   time-of-day are the same as those defined for the Internet Message\n   Format constructs with the corresponding name ([<a href=\"https://tools.ietf.org/html/rfc5322\" title='\"Internet Message Format\"'>RFC5322</a>], <a href=\"#section-3.3\">Section</a>\n   <a href=\"#section-3.3\">3.3</a>).\n\n   Recipients of a timestamp value in <a href=\"https://tools.ietf.org/html/rfc850\">rfc850</a>-date format, which uses a\n   two-digit year, MUST interpret a timestamp that appears to be more\n   than 50 years in the future as representing the most recent year in\n   the past that had the same last two digits.\n\n   Recipients of timestamp values are encouraged to be robust in parsing\n   timestamps unless otherwise restricted by the field definition.  For\n   example, messages are occasionally forwarded over HTTP from a\n   non-HTTP source that might generate any of the date and time\n   specifications defined by the Internet Message Format.\n\n      Note: HTTP requirements for the date/time stamp format apply only\n      to their usage within the protocol stream.  Implementations are\n      not required to use these formats for user presentation, request\n      logging, etc.\n\n<h5 class=\"h5\" id=\"section-7.1.1.2\">7.1.1.2.  Date</h5>\n   The \"Date\" header field represents the date and time at which the\n   message was originated, having the same semantics as the Origination\n   Date Field (orig-date) defined in <a href=\"https://tools.ietf.org/html/rfc5322#section-3.6.1\">Section 3.6.1 of [RFC5322]</a>.  The\n   field value is an HTTP-date, as defined in <a href=\"#section-7.1.1.1\">Section 7.1.1.1</a>.\n\n     Date = HTTP-date\n\n   An example is\n\n     Date: Tue, 15 Nov 1994 08:12:31 GMT\n\n   When a Date header field is generated, the sender SHOULD generate its\n   field value as the best available approximation of the date and time\n   of message generation.  In theory, the date ought to represent the\n   moment just before the payload is generated.  In practice, the date\n   can be generated at any time during message origination.\n\n   An origin server MUST NOT send a Date header field if it does not\n   have a clock capable of providing a reasonable approximation of the\n   current instance in Coordinated Universal Time.  An origin server MAY\n   send a Date header field if the response is in the 1xx\n   (Informational) or 5xx (Server Error) class of status codes.  An\n   origin server MUST send a Date header field in all other cases.\n\n   A recipient with a clock that receives a response message without a\n   Date header field MUST record the time it was received and append a\n   corresponding Date header field to the message's header section if it\n   is cached or forwarded downstream.\n\n   A user agent MAY send a Date header field in a request, though\n   generally will not do so unless it is believed to convey useful\n   information to the server.  For example, custom applications of HTTP\n   might convey a Date if the server is expected to adjust its\n   interpretation of the user's request based on differences between the\n   user agent and server clocks.\n\n<h4 class=\"h4\" id=\"section-7.1.2\">7.1.2.  Location</h4>\n   The \"Location\" header field is used in some responses to refer to a\n   specific resource in relation to the response.  The type of\n   relationship is defined by the combination of request method and\n   status code semantics.\n\n     Location = URI-reference\n\n   The field value consists of a single URI-reference.  When it has the\n   form of a relative reference (<a href=\"https://tools.ietf.org/html/rfc3986#section-4.2\">[RFC3986], Section 4.2</a>), the final\n   value is computed by resolving it against the effective request URI\n   (<a href=\"https://tools.ietf.org/html/rfc3986#section-5\">[RFC3986], Section 5</a>).\n\n   For 201 (Created) responses, the Location value refers to the primary\n   resource created by the request.  For 3xx (Redirection) responses,\n   the Location value refers to the preferred target resource for\n   automatically redirecting the request.\n\n   If the Location value provided in a 3xx (Redirection) response does\n   not have a fragment component, a user agent MUST process the\n   redirection as if the value inherits the fragment component of the\n   URI reference used to generate the request target (i.e., the\n   redirection inherits the original reference's fragment, if any).\n\n   For example, a GET request generated for the URI reference\n   \"http://www.example.org/~tim\" might result in a 303 (See Other)\n   response containing the header field:\n\n     Location: /People.html#tim\n\n   which suggests that the user agent redirect to\n   \"http://www.example.org/People.html#tim\"\n\n   Likewise, a GET request generated for the URI reference\n   \"http://www.example.org/index.html#larry\" might result in a 301\n   (Moved Permanently) response containing the header field:\n\n     Location: http://www.example.net/index.html\n\n   which suggests that the user agent redirect to\n   \"http://www.example.net/index.html#larry\", preserving the original\n   fragment identifier.\n\n   There are circumstances in which a fragment identifier in a Location\n   value would not be appropriate.  For example, the Location header\n   field in a 201 (Created) response is supposed to provide a URI that\n   is specific to the created resource.\n\n      Note: Some recipients attempt to recover from Location fields that\n      are not valid URI references.  This specification does not mandate\n      or define such processing, but does allow it for the sake of\n      robustness.\n\n      Note: The Content-Location header field (<a href=\"#section-3.1.4.2\">Section 3.1.4.2</a>) differs\n      from Location in that the Content-Location refers to the most\n      specific resource corresponding to the enclosed representation.\n      It is therefore possible for a response to contain both the\n      Location and Content-Location header fields.\n\n<h4 class=\"h4\" id=\"section-7.1.3\">7.1.3.  Retry-After</h4>\n   Servers send the \"Retry-After\" header field to indicate how long the\n   user agent ought to wait before making a follow-up request.  When\n   sent with a 503 (Service Unavailable) response, Retry-After indicates\n   how long the service is expected to be unavailable to the client.\n   When sent with any 3xx (Redirection) response, Retry-After indicates\n   the minimum time that the user agent is asked to wait before issuing\n   the redirected request.\n\n   The value of this field can be either an HTTP-date or a number of\n   seconds to delay after the response is received.\n\n     Retry-After = HTTP-date / delay-seconds\n\n   A delay-seconds value is a non-negative decimal integer, representing\n   time in seconds.\n\n     delay-seconds  = 1*DIGIT\n\n   Two examples of its use are\n\n     Retry-After: Fri, 31 Dec 1999 23:59:59 GMT\n     Retry-After: 120\n\n   In the latter example, the delay is 2 minutes.\n\n<h4 class=\"h4\" id=\"section-7.1.4\">7.1.4.  Vary</h4>\n   The \"Vary\" header field in a response describes what parts of a\n   request message, aside from the method, Host header field, and\n   request target, might influence the origin server's process for\n   selecting and representing this response.  The value consists of\n   either a single asterisk (\"*\") or a list of header field names\n   (case-insensitive).\n\n     Vary = \"*\" / 1#field-name\n\n   A Vary field value of \"*\" signals that anything about the request\n   might play a role in selecting the response representation, possibly\n   including elements outside the message syntax (e.g., the client's\n   network address).  A recipient will not be able to determine whether\n   this response is appropriate for a later request without forwarding\n   the request to the origin server.  A proxy MUST NOT generate a Vary\n   field with a \"*\" value.\n\n   A Vary field value consisting of a comma-separated list of names\n   indicates that the named request header fields, known as the\n   selecting header fields, might have a role in selecting the\n   representation.  The potential selecting header fields are not\n   limited to those defined by this specification.\n\n   For example, a response that contains\n\n     Vary: accept-encoding, accept-language\n\n   indicates that the origin server might have used the request's\n   Accept-Encoding and Accept-Language fields (or lack thereof) as\n   determining factors while choosing the content for this response.\n\n   An origin server might send Vary with a list of fields for two\n   purposes:\n\n   1.  To inform cache recipients that they MUST NOT use this response\n       to satisfy a later request unless the later request has the same\n       values for the listed fields as the original request (<a href=\"https://tools.ietf.org/html/rfc7234#section-4.1\">Section 4.1\n       of [RFC7234]</a>).  In other words, Vary expands the cache key\n       required to match a new request to the stored cache entry.\n\n   2.  To inform user agent recipients that this response is subject to\n       content negotiation (<a href=\"#section-5.3\">Section 5.3</a>) and that a different\n       representation might be sent in a subsequent request if\n       additional parameters are provided in the listed header fields\n       (proactive negotiation).\n\n   An origin server SHOULD send a Vary header field when its algorithm\n   for selecting a representation varies based on aspects of the request\n   message other than the method and request target, unless the variance\n   cannot be crossed or the origin server has been deliberately\n   configured to prevent cache transparency.  For example, there is no\n   need to send the Authorization field name in Vary because reuse\n   across users is constrained by the field definition (<a href=\"https://tools.ietf.org/html/rfc7235#section-4.2\">Section 4.2 of\n   [RFC7235]</a>).  Likewise, an origin server might use Cache-Control\n   directives (<a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Section 5.2 of [RFC7234]</a>) to supplant Vary if it\n   considers the variance less significant than the performance cost of\n   Vary's impact on caching.\n\n<h3 class=\"h3\" id=\"section-7.2\">7.2.  Validator Header Fields</h3>\n   Validator header fields convey metadata about the selected\n   representation (<a href=\"#section-3\">Section 3</a>).  In responses to safe requests, validator\n   fields describe the selected representation chosen by the origin\n   server while handling the response.  Note that, depending on the\n   status code semantics, the selected representation for a given\n   response is not necessarily the same as the representation enclosed\n   as response payload.\n\n   In a successful response to a state-changing request, validator\n   fields describe the new representation that has replaced the prior\n   selected representation as a result of processing the request.\n\n   For example, an ETag header field in a 201 (Created) response\n   communicates the entity-tag of the newly created resource's\n   representation, so that it can be used in later conditional requests\n   to prevent the \"lost update\" problem [<a href=\"https://tools.ietf.org/html/rfc7232\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\"'>RFC7232</a>].\n\n   +-------------------+--------------------------+\n   | Header Field Name | Defined in...            |\n   +-------------------+--------------------------+\n   | ETag              | <a href=\"https://tools.ietf.org/html/rfc7232#section-2.3\">Section 2.3 of [RFC7232]</a> |\n   | Last-Modified     | <a href=\"https://tools.ietf.org/html/rfc7232#section-2.2\">Section 2.2 of [RFC7232]</a> |\n   +-------------------+--------------------------+\n\n<h3 class=\"h3\" id=\"section-7.3\">7.3.  Authentication Challenges</h3>\n   Authentication challenges indicate what mechanisms are available for\n   the client to provide authentication credentials in future requests.\n\n   +--------------------+--------------------------+\n   | Header Field Name  | Defined in...            |\n   +--------------------+--------------------------+\n   | WWW-Authenticate   | <a href=\"https://tools.ietf.org/html/rfc7235#section-4.1\">Section 4.1 of [RFC7235]</a> |\n   | Proxy-Authenticate | <a href=\"https://tools.ietf.org/html/rfc7235#section-4.3\">Section 4.3 of [RFC7235]</a> |\n   +--------------------+--------------------------+\n\n<h3 class=\"h3\" id=\"section-7.4\">7.4.  Response Context</h3>\n   The remaining response header fields provide more information about\n   the target resource for potential use in later requests.\n\n   +-------------------+--------------------------+\n   | Header Field Name | Defined in...            |\n   +-------------------+--------------------------+\n   | Accept-Ranges     | <a href=\"https://tools.ietf.org/html/rfc7233#section-2.3\">Section 2.3 of [RFC7233]</a> |\n   | Allow             | <a href=\"#section-7.4.1\">Section 7.4.1</a>            |\n   | Server            | <a href=\"#section-7.4.2\">Section 7.4.2</a>            |\n   +-------------------+--------------------------+\n\n<h4 class=\"h4\" id=\"section-7.4.1\">7.4.1.  Allow</h4>\n   The \"Allow\" header field lists the set of methods advertised as\n   supported by the target resource.  The purpose of this field is\n   strictly to inform the recipient of valid request methods associated\n   with the resource.\n\n     Allow = #method\n\n   Example of use:\n\n     Allow: GET, HEAD, PUT\n\n   The actual set of allowed methods is defined by the origin server at\n   the time of each request.  An origin server MUST generate an Allow\n   field in a 405 (Method Not Allowed) response and MAY do so in any\n   other response.  An empty Allow field value indicates that the\n   resource allows no methods, which might occur in a 405 response if\n   the resource has been temporarily disabled by configuration.\n\n   A proxy MUST NOT modify the Allow header field -- it does not need to\n   understand all of the indicated methods in order to handle them\n   according to the generic message handling rules.\n\n<h4 class=\"h4\" id=\"section-7.4.2\">7.4.2.  Server</h4>\n   The \"Server\" header field contains information about the software\n   used by the origin server to handle the request, which is often used\n   by clients to help identify the scope of reported interoperability\n   problems, to work around or tailor requests to avoid particular\n   server limitations, and for analytics regarding server or operating\n   system use.  An origin server MAY generate a Server field in its\n   responses.\n\n     Server = product *( RWS ( product / comment ) )\n\n   The Server field-value consists of one or more product identifiers,\n   each followed by zero or more comments (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">Section 3.2 of [RFC7230]</a>),\n   which together identify the origin server software and its\n   significant subproducts.  By convention, the product identifiers are\n   listed in decreasing order of their significance for identifying the\n   origin server software.  Each product identifier consists of a name\n   and optional version, as defined in <a href=\"#section-5.5.3\">Section 5.5.3</a>.\n\n   Example:\n\n     Server: CERN/3.0 libwww/2.17\n\n   An origin server SHOULD NOT generate a Server field containing\n   needlessly fine-grained detail and SHOULD limit the addition of\n   subproducts by third parties.  Overly long and detailed Server field\n   values increase response latency and potentially reveal internal\n   implementation details that might make it (slightly) easier for\n   attackers to find and exploit known security holes.\n\n<h2 class=\"h2\" id=\"section-8\">8.  IANA Considerations</h2>\n<h3 class=\"h3\" id=\"section-8.1\">8.1.  Method Registry</h3>\n   The \"Hypertext Transfer Protocol (HTTP) Method Registry\" defines the\n   namespace for the request method token (<a href=\"#section-4\">Section 4</a>).  The method\n   registry has been created and is now maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/http-methods\">http://www.iana.org/assignments/http-methods</a>&gt;.\n\n<h4 class=\"h4\" id=\"section-8.1.1\">8.1.1.  Procedure</h4>\n   HTTP method registrations MUST include the following fields:\n\n   o  Method Name (see <a href=\"#section-4\">Section 4</a>)\n\n   o  Safe (\"yes\" or \"no\", see <a href=\"#section-4.2.1\">Section 4.2.1</a>)\n\n   o  Idempotent (\"yes\" or \"no\", see <a href=\"#section-4.2.2\">Section 4.2.2</a>)\n\n   o  Pointer to specification text\n\n   Values to be added to this namespace require IETF Review (see\n   <a href=\"https://tools.ietf.org/html/rfc5226#section-4.1\">[RFC5226], Section 4.1</a>).\n\n<h4 class=\"h4\" id=\"section-8.1.2\">8.1.2.  Considerations for New Methods</h4>\n   Standardized methods are generic; that is, they are potentially\n   applicable to any resource, not just one particular media type, kind\n   of resource, or application.  As such, it is preferred that new\n   methods be registered in a document that isn't specific to a single\n   application or data format, since orthogonal technologies deserve\n   orthogonal specification.\n\n   Since message parsing (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.3\">Section 3.3 of [RFC7230]</a>) needs to be\n   independent of method semantics (aside from responses to HEAD),\n   definitions of new methods cannot change the parsing algorithm or\n   prohibit the presence of a message body on either the request or the\n   response message.  Definitions of new methods can specify that only a\n   zero-length message body is allowed by requiring a Content-Length\n   header field with a value of \"0\".\n\n   A new method definition needs to indicate whether it is safe\n   (<a href=\"#section-4.2.1\">Section 4.2.1</a>), idempotent (<a href=\"#section-4.2.2\">Section 4.2.2</a>), cacheable\n   (<a href=\"#section-4.2.3\">Section 4.2.3</a>), what semantics are to be associated with the payload\n   body if any is present in the request and what refinements the method\n   makes to header field or status code semantics.  If the new method is\n   cacheable, its definition ought to describe how, and under what\n   conditions, a cache can store a response and use it to satisfy a\n   subsequent request.  The new method ought to describe whether it can\n   be made conditional (<a href=\"#section-5.2\">Section 5.2</a>) and, if so, how a server responds\n   when the condition is false.  Likewise, if the new method might have\n   some use for partial response semantics ([<a href=\"https://tools.ietf.org/html/rfc7233\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\"'>RFC7233</a>]), it ought to\n   document this, too.\n\n      Note: Avoid defining a method name that starts with \"M-\", since\n      that prefix might be misinterpreted as having the semantics\n      assigned to it by [<a href=\"https://tools.ietf.org/html/rfc2774\" title='\"An HTTP Extension Framework\"'>RFC2774</a>].\n\n<h4 class=\"h4\" id=\"section-8.1.3\">8.1.3.  Registrations</h4>\n   The \"Hypertext Transfer Protocol (HTTP) Method Registry\" has been\n   populated with the registrations below:\n\n   +---------+------+------------+---------------+\n   | Method  | Safe | Idempotent | Reference     |\n   +---------+------+------------+---------------+\n   | CONNECT | no   | no         | <a href=\"#section-4.3.6\">Section 4.3.6</a> |\n   | DELETE  | no   | yes        | <a href=\"#section-4.3.5\">Section 4.3.5</a> |\n   | GET     | yes  | yes        | <a href=\"#section-4.3.1\">Section 4.3.1</a> |\n   | HEAD    | yes  | yes        | <a href=\"#section-4.3.2\">Section 4.3.2</a> |\n   | OPTIONS | yes  | yes        | <a href=\"#section-4.3.7\">Section 4.3.7</a> |\n   | POST    | no   | no         | <a href=\"#section-4.3.3\">Section 4.3.3</a> |\n   | PUT     | no   | yes        | <a href=\"#section-4.3.4\">Section 4.3.4</a> |\n   | TRACE   | yes  | yes        | <a href=\"#section-4.3.8\">Section 4.3.8</a> |\n   +---------+------+------------+---------------+\n\n<h3 class=\"h3\" id=\"section-8.2\">8.2.  Status Code Registry</h3>\n   The \"Hypertext Transfer Protocol (HTTP) Status Code Registry\" defines\n   the namespace for the response status-code token (<a href=\"#section-6\">Section 6</a>).  The\n   status code registry is maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/http-status-codes\">http://www.iana.org/assignments/http-status-codes</a>&gt;.\n\n   This section replaces the registration procedure for HTTP Status\n   Codes previously defined in <a href=\"https://tools.ietf.org/html/rfc2817#section-7.1\">Section 7.1 of [RFC2817]</a>.\n\n<h4 class=\"h4\" id=\"section-8.2.1\">8.2.1.  Procedure</h4>\n   A registration MUST include the following fields:\n\n   o  Status Code (3 digits)\n\n   o  Short Description\n\n   o  Pointer to specification text\n\n   Values to be added to the HTTP status code namespace require IETF\n   Review (see <a href=\"https://tools.ietf.org/html/rfc5226#section-4.1\">[RFC5226], Section 4.1</a>).\n\n<h4 class=\"h4\" id=\"section-8.2.2\">8.2.2.  Considerations for New Status Codes</h4>\n   When it is necessary to express semantics for a response that are not\n   defined by current status codes, a new status code can be registered.\n   Status codes are generic; they are potentially applicable to any\n   resource, not just one particular media type, kind of resource, or\n   application of HTTP.  As such, it is preferred that new status codes\n   be registered in a document that isn't specific to a single\n   application.\n\n   New status codes are required to fall under one of the categories\n   defined in <a href=\"#section-6\">Section 6</a>.  To allow existing parsers to process the\n   response message, new status codes cannot disallow a payload,\n   although they can mandate a zero-length payload body.\n\n   Proposals for new status codes that are not yet widely deployed ought\n   to avoid allocating a specific number for the code until there is\n   clear consensus that it will be registered; instead, early drafts can\n   use a notation such as \"4NN\", or \"3N0\" .. \"3N9\", to indicate the\n   class of the proposed status code(s) without consuming a number\n   prematurely.\n\n   The definition of a new status code ought to explain the request\n   conditions that would cause a response containing that status code\n   (e.g., combinations of request header fields and/or method(s)) along\n   with any dependencies on response header fields (e.g., what fields\n   are required, what fields can modify the semantics, and what header\n   field semantics are further refined when used with the new status\n   code).\n\n   The definition of a new status code ought to specify whether or not\n   it is cacheable.  Note that all status codes can be cached if the\n   response they occur in has explicit freshness information; however,\n   status codes that are defined as being cacheable are allowed to be\n   cached without explicit freshness information.  Likewise, the\n   definition of a status code can place constraints upon cache\n   behavior.  See [<a href=\"https://tools.ietf.org/html/rfc7234\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Caching\"'>RFC7234</a>] for more information.\n\n   Finally, the definition of a new status code ought to indicate\n   whether the payload has any implied association with an identified\n   resource (<a href=\"#section-3.1.4.1\">Section 3.1.4.1</a>).\n\n<h4 class=\"h4\" id=\"section-8.2.3\">8.2.3.  Registrations</h4>\n   The status code registry has been updated with the registrations\n   below:\n\n   +-------+-------------------------------+----------------+\n   | Value | Description                   | Reference      |\n   +-------+-------------------------------+----------------+\n   | 100   | Continue                      | <a href=\"#section-6.2.1\">Section 6.2.1</a>  |\n   | 101   | Switching Protocols           | <a href=\"#section-6.2.2\">Section 6.2.2</a>  |\n   | 200   | OK                            | <a href=\"#section-6.3.1\">Section 6.3.1</a>  |\n   | 201   | Created                       | <a href=\"#section-6.3.2\">Section 6.3.2</a>  |\n   | 202   | Accepted                      | <a href=\"#section-6.3.3\">Section 6.3.3</a>  |\n   | 203   | Non-Authoritative Information | <a href=\"#section-6.3.4\">Section 6.3.4</a>  |\n   | 204   | No Content                    | <a href=\"#section-6.3.5\">Section 6.3.5</a>  |\n   | 205   | Reset Content                 | <a href=\"#section-6.3.6\">Section 6.3.6</a>  |\n   | 300   | Multiple Choices              | <a href=\"#section-6.4.1\">Section 6.4.1</a>  |\n   | 301   | Moved Permanently             | <a href=\"#section-6.4.2\">Section 6.4.2</a>  |\n   | 302   | Found                         | <a href=\"#section-6.4.3\">Section 6.4.3</a>  |\n   | 303   | See Other                     | <a href=\"#section-6.4.4\">Section 6.4.4</a>  |\n   | 305   | Use Proxy                     | <a href=\"#section-6.4.5\">Section 6.4.5</a>  |\n   | 306   | (Unused)                      | <a href=\"#section-6.4.6\">Section 6.4.6</a>  |\n   | 307   | Temporary Redirect            | <a href=\"#section-6.4.7\">Section 6.4.7</a>  |\n   | 400   | Bad Request                   | <a href=\"#section-6.5.1\">Section 6.5.1</a>  |\n   | 402   | Payment Required              | <a href=\"#section-6.5.2\">Section 6.5.2</a>  |\n   | 403   | Forbidden                     | <a href=\"#section-6.5.3\">Section 6.5.3</a>  |\n   | 404   | Not Found                     | <a href=\"#section-6.5.4\">Section 6.5.4</a>  |\n   | 405   | Method Not Allowed            | <a href=\"#section-6.5.5\">Section 6.5.5</a>  |\n   | 406   | Not Acceptable                | <a href=\"#section-6.5.6\">Section 6.5.6</a>  |\n   | 408   | Request Timeout               | <a href=\"#section-6.5.7\">Section 6.5.7</a>  |\n   | 409   | Conflict                      | <a href=\"#section-6.5.8\">Section 6.5.8</a>  |\n   | 410   | Gone                          | <a href=\"#section-6.5.9\">Section 6.5.9</a>  |\n   | 411   | Length Required               | <a href=\"#section-6.5.10\">Section 6.5.10</a> |\n   | 413   | Payload Too Large             | <a href=\"#section-6.5.11\">Section 6.5.11</a> |\n   | 414   | URI Too Long                  | <a href=\"#section-6.5.12\">Section 6.5.12</a> |\n   | 415   | Unsupported Media Type        | <a href=\"#section-6.5.13\">Section 6.5.13</a> |\n   | 417   | Expectation Failed            | <a href=\"#section-6.5.14\">Section 6.5.14</a> |\n   | 426   | Upgrade Required              | <a href=\"#section-6.5.15\">Section 6.5.15</a> |\n   | 500   | Internal Server Error         | <a href=\"#section-6.6.1\">Section 6.6.1</a>  |\n   | 501   | Not Implemented               | <a href=\"#section-6.6.2\">Section 6.6.2</a>  |\n   | 502   | Bad Gateway                   | <a href=\"#section-6.6.3\">Section 6.6.3</a>  |\n   | 503   | Service Unavailable           | <a href=\"#section-6.6.4\">Section 6.6.4</a>  |\n   | 504   | Gateway Timeout               | <a href=\"#section-6.6.5\">Section 6.6.5</a>  |\n   | 505   | HTTP Version Not Supported    | <a href=\"#section-6.6.6\">Section 6.6.6</a>  |\n   +-------+-------------------------------+----------------+\n\n<h3 class=\"h3\" id=\"section-8.3\">8.3.  Header Field Registry</h3>\n   HTTP header fields are registered within the \"Message Headers\"\n   registry located at\n   &lt;<a href=\"http://www.iana.org/assignments/message-headers\">http://www.iana.org/assignments/message-headers</a>&gt;, as defined by\n   [<a href=\"#ref-BCP90\" title='\"Registration Procedures for Message Header Fields\"'>BCP90</a>].\n\n<h4 class=\"h4\" id=\"section-8.3.1\">8.3.1.  Considerations for New Header Fields</h4>\n   Header fields are key:value pairs that can be used to communicate\n   data about the message, its payload, the target resource, or the\n   connection (i.e., control data).  See <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">Section 3.2 of [RFC7230]</a> for a\n   general definition of header field syntax in HTTP messages.\n\n   The requirements for header field names are defined in [<a href=\"#ref-BCP90\" title='\"Registration Procedures for Message Header Fields\"'>BCP90</a>].\n\n   Authors of specifications defining new fields are advised to keep the\n   name as short as practical and not to prefix the name with \"X-\"\n   unless the header field will never be used on the Internet.  (The\n   \"X-\" prefix idiom has been extensively misused in practice; it was\n   intended to only be used as a mechanism for avoiding name collisions\n   inside proprietary software or intranet processing, since the prefix\n   would ensure that private names never collide with a newly registered\n   Internet name; see [<a href=\"#ref-BCP178\" title='\"Deprecating the \"'>BCP178</a>] for further information).\n\n   New header field values typically have their syntax defined using\n   ABNF ([<a href=\"https://tools.ietf.org/html/rfc5234\" title='\"Augmented BNF for Syntax Specifications: ABNF\"'>RFC5234</a>]), using the extension defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-7\">Section 7 of\n   [RFC7230]</a> as necessary, and are usually constrained to the range of\n   US-ASCII characters.  Header fields needing a greater range of\n   characters can use an encoding such as the one defined in [<a href=\"https://tools.ietf.org/html/rfc5987\" title='\"Character Set and Language Encoding for Hypertext Transfer Protocol (HTTP) Header Field Parameters\"'>RFC5987</a>].\n\n   Leading and trailing whitespace in raw field values is removed upon\n   field parsing (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.4\">Section 3.2.4 of [RFC7230]</a>).  Field definitions where\n   leading or trailing whitespace in values is significant will have to\n   use a container syntax such as quoted-string (<a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">Section 3.2.6 of\n   [RFC7230]</a>).\n\n   Because commas (\",\") are used as a generic delimiter between\n   field-values, they need to be treated with care if they are allowed\n   in the field-value.  Typically, components that might contain a comma\n   are protected with double-quotes using the quoted-string ABNF\n   production.\n\n   For example, a textual date and a URI (either of which might contain\n   a comma) could be safely carried in field-values like these:\n\n     Example-URI-Field: \"http://example.com/a.html,foo\",\n                        \"http://without-a-comma.example.com/\"\n     Example-Date-Field: \"Sat, 04 May 1996\", \"Wed, 14 Sep 2005\"\n\n   Note that double-quote delimiters almost always are used with the\n   quoted-string production; using a different syntax inside\n   double-quotes will likely cause unnecessary confusion.\n\n   Many header fields use a format including (case-insensitively) named\n   parameters (for instance, Content-Type, defined in <a href=\"#section-3.1.1.5\">Section 3.1.1.5</a>).\n   Allowing both unquoted (token) and quoted (quoted-string) syntax for\n   the parameter value enables recipients to use existing parser\n   components.  When allowing both forms, the meaning of a parameter\n   value ought to be independent of the syntax used for it (for an\n   example, see the notes on parameter handling for media types in\n   <a href=\"#section-3.1.1.1\">Section 3.1.1.1</a>).\n\n   Authors of specifications defining new header fields are advised to\n   consider documenting:\n\n   o  Whether the field is a single value or whether it can be a list\n      (delimited by commas; see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">Section 3.2 of [RFC7230]</a>).\n\n      If it does not use the list syntax, document how to treat messages\n      where the field occurs multiple times (a sensible default would be\n      to ignore the field, but this might not always be the right\n      choice).\n\n      Note that intermediaries and software libraries might combine\n      multiple header field instances into a single one, despite the\n      field's definition not allowing the list syntax.  A robust format\n      enables recipients to discover these situations (good example:\n      \"Content-Type\", as the comma can only appear inside quoted\n      strings; bad example: \"Location\", as a comma can occur inside a\n      URI).\n\n   o  Under what conditions the header field can be used; e.g., only in\n      responses or requests, in all messages, only on responses to a\n      particular request method, etc.\n\n   o  Whether the field should be stored by origin servers that\n      understand it upon a PUT request.\n\n   o  Whether the field semantics are further refined by the context,\n      such as by existing request methods or status codes.\n\n   o  Whether it is appropriate to list the field-name in the Connection\n      header field (i.e., if the header field is to be hop-by-hop; see\n      <a href=\"https://tools.ietf.org/html/rfc7230#section-6.1\">Section 6.1 of [RFC7230]</a>).\n\n   o  Under what conditions intermediaries are allowed to insert,\n      delete, or modify the field's value.\n\n   o  Whether it is appropriate to list the field-name in a Vary\n      response header field (e.g., when the request header field is used\n      by an origin server's content selection algorithm; see\n      <a href=\"#section-7.1.4\">Section 7.1.4</a>).\n\n   o  Whether the header field is useful or allowable in trailers (see\n      <a href=\"https://tools.ietf.org/html/rfc7230#section-4.1\">Section 4.1 of [RFC7230]</a>).\n\n   o  Whether the header field ought to be preserved across redirects.\n\n   o  Whether it introduces any additional security considerations, such\n      as disclosure of privacy-related data.\n\n<h4 class=\"h4\" id=\"section-8.3.2\">8.3.2.  Registrations</h4>\n   The \"Message Headers\" registry has been updated with the following\n   permanent registrations:\n\n   +-------------------+----------+----------+-----------------+\n   | Header Field Name | Protocol | Status   | Reference       |\n   +-------------------+----------+----------+-----------------+\n   | Accept            | http     | standard | <a href=\"#section-5.3.2\">Section 5.3.2</a>   |\n   | Accept-Charset    | http     | standard | <a href=\"#section-5.3.3\">Section 5.3.3</a>   |\n   | Accept-Encoding   | http     | standard | <a href=\"#section-5.3.4\">Section 5.3.4</a>   |\n   | Accept-Language   | http     | standard | <a href=\"#section-5.3.5\">Section 5.3.5</a>   |\n   | Allow             | http     | standard | <a href=\"#section-7.4.1\">Section 7.4.1</a>   |\n   | Content-Encoding  | http     | standard | <a href=\"#section-3.1.2.2\">Section 3.1.2.2</a> |\n   | Content-Language  | http     | standard | <a href=\"#section-3.1.3.2\">Section 3.1.3.2</a> |\n   | Content-Location  | http     | standard | <a href=\"#section-3.1.4.2\">Section 3.1.4.2</a> |\n   | Content-Type      | http     | standard | <a href=\"#section-3.1.1.5\">Section 3.1.1.5</a> |\n   | Date              | http     | standard | <a href=\"#section-7.1.1.2\">Section 7.1.1.2</a> |\n   | Expect            | http     | standard | <a href=\"#section-5.1.1\">Section 5.1.1</a>   |\n   | From              | http     | standard | <a href=\"#section-5.5.1\">Section 5.5.1</a>   |\n   | Location          | http     | standard | <a href=\"#section-7.1.2\">Section 7.1.2</a>   |\n   | Max-Forwards      | http     | standard | <a href=\"#section-5.1.2\">Section 5.1.2</a>   |\n   | MIME-Version      | http     | standard | <a href=\"#appendix-A.1\">Appendix A.1</a>    |\n   | Referer           | http     | standard | <a href=\"#section-5.5.2\">Section 5.5.2</a>   |\n   | Retry-After       | http     | standard | <a href=\"#section-7.1.3\">Section 7.1.3</a>   |\n   | Server            | http     | standard | <a href=\"#section-7.4.2\">Section 7.4.2</a>   |\n   | User-Agent        | http     | standard | <a href=\"#section-5.5.3\">Section 5.5.3</a>   |\n   | Vary              | http     | standard | <a href=\"#section-7.1.4\">Section 7.1.4</a>   |\n   +-------------------+----------+----------+-----------------+\n\n   The change controller for the above registrations is: \"IETF\n   (iesg@ietf.org) - Internet Engineering Task Force\".\n\n<h3 class=\"h3\" id=\"section-8.4\">8.4.  Content Coding Registry</h3>\n   The \"HTTP Content Coding Registry\" defines the namespace for content\n   coding names (<a href=\"https://tools.ietf.org/html/rfc7230#section-4.2\">Section 4.2 of [RFC7230]</a>).  The content coding registry\n   is maintained at &lt;<a href=\"http://www.iana.org/assignments/http-parameters\">http://www.iana.org/assignments/http-parameters</a>&gt;.\n\n<h4 class=\"h4\" id=\"section-8.4.1\">8.4.1.  Procedure</h4>\n   Content coding registrations MUST include the following fields:\n\n   o  Name\n\n   o  Description\n\n   o  Pointer to specification text\n\n   Names of content codings MUST NOT overlap with names of transfer\n   codings (<a href=\"https://tools.ietf.org/html/rfc7230#section-4\">Section 4 of [RFC7230]</a>), unless the encoding transformation\n   is identical (as is the case for the compression codings defined in\n   <a href=\"https://tools.ietf.org/html/rfc7230#section-4.2\">Section 4.2 of [RFC7230]</a>).\n\n   Values to be added to this namespace require IETF Review (see <a href=\"#section-4.1\">Section</a>\n   <a href=\"#section-4.1\">4.1</a> of [<a href=\"https://tools.ietf.org/html/rfc5226\" title='\"Guidelines for Writing an IANA Considerations Section in RFCs\"'>RFC5226</a>]) and MUST conform to the purpose of content coding\n   defined in this section.\n\n<h4 class=\"h4\" id=\"section-8.4.2\">8.4.2.  Registrations</h4>\n   The \"HTTP Content Coding Registry\" has been updated with the\n   registrations below:\n\n   +----------+----------------------------------------+---------------+\n   | Name     | Description                            | Reference     |\n   +----------+----------------------------------------+---------------+\n   | identity | Reserved (synonym for \"no encoding\" in | <a href=\"#section-5.3.4\">Section 5.3.4</a> |\n   |          | Accept-Encoding)                       |               |\n   +----------+----------------------------------------+---------------+\n\n<h2 class=\"h2\" id=\"section-9\">9.  Security Considerations</h2>\n   This section is meant to inform developers, information providers,\n   and users of known security concerns relevant to HTTP semantics and\n   its use for transferring information over the Internet.\n   Considerations related to message syntax, parsing, and routing are\n   discussed in <a href=\"https://tools.ietf.org/html/rfc7230#section-9\">Section 9 of [RFC7230]</a>.\n\n   The list of considerations below is not exhaustive.  Most security\n   concerns related to HTTP semantics are about securing server-side\n   applications (code behind the HTTP interface), securing user agent\n\n   processing of payloads received via HTTP, or secure use of the\n   Internet in general, rather than security of the protocol.  Various\n   organizations maintain topical information and links to current\n   research on Web application security (e.g., [<a href=\"#ref-OWASP\" title='\"A Guide to Building Secure Web Applications and Web Services\"'>OWASP</a>]).\n\n<h3 class=\"h3\" id=\"section-9.1\">9.1.  Attacks Based on File and Path Names</h3>\n   Origin servers frequently make use of their local file system to\n   manage the mapping from effective request URI to resource\n   representations.  Most file systems are not designed to protect\n   against malicious file or path names.  Therefore, an origin server\n   needs to avoid accessing names that have a special significance to\n   the system when mapping the request target to files, folders, or\n   directories.\n\n   For example, UNIX, Microsoft Windows, and other operating systems use\n   \"..\" as a path component to indicate a directory level above the\n   current one, and they use specially named paths or file names to send\n   data to system devices.  Similar naming conventions might exist\n   within other types of storage systems.  Likewise, local storage\n   systems have an annoying tendency to prefer user-friendliness over\n   security when handling invalid or unexpected characters,\n   recomposition of decomposed characters, and case-normalization of\n   case-insensitive names.\n\n   Attacks based on such special names tend to focus on either denial-\n   of-service (e.g., telling the server to read from a COM port) or\n   disclosure of configuration and source files that are not meant to be\n   served.\n\n<h3 class=\"h3\" id=\"section-9.2\">9.2.  Attacks Based on Command, Code, or Query Injection</h3>\n   Origin servers often use parameters within the URI as a means of\n   identifying system services, selecting database entries, or choosing\n   a data source.  However, data received in a request cannot be\n   trusted.  An attacker could construct any of the request data\n   elements (method, request-target, header fields, or body) to contain\n   data that might be misinterpreted as a command, code, or query when\n   passed through a command invocation, language interpreter, or\n   database interface.\n\n   For example, SQL injection is a common attack wherein additional\n   query language is inserted within some part of the request-target or\n   header fields (e.g., Host, Referer, etc.).  If the received data is\n   used directly within a SELECT statement, the query language might be\n   interpreted as a database command instead of a simple string value.\n   This type of implementation vulnerability is extremely common, in\n   spite of being easy to prevent.\n\n   In general, resource implementations ought to avoid use of request\n   data in contexts that are processed or interpreted as instructions.\n   Parameters ought to be compared to fixed strings and acted upon as a\n   result of that comparison, rather than passed through an interface\n   that is not prepared for untrusted data.  Received data that isn't\n   based on fixed parameters ought to be carefully filtered or encoded\n   to avoid being misinterpreted.\n\n   Similar considerations apply to request data when it is stored and\n   later processed, such as within log files, monitoring tools, or when\n   included within a data format that allows embedded scripts.\n\n<h3 class=\"h3\" id=\"section-9.3\">9.3.  Disclosure of Personal Information</h3>\n   Clients are often privy to large amounts of personal information,\n   including both information provided by the user to interact with\n   resources (e.g., the user's name, location, mail address, passwords,\n   encryption keys, etc.) and information about the user's browsing\n   activity over time (e.g., history, bookmarks, etc.).  Implementations\n   need to prevent unintentional disclosure of personal information.\n\n<h3 class=\"h3\" id=\"section-9.4\">9.4.  Disclosure of Sensitive Information in URIs</h3>\n   URIs are intended to be shared, not secured, even when they identify\n   secure resources.  URIs are often shown on displays, added to\n   templates when a page is printed, and stored in a variety of\n   unprotected bookmark lists.  It is therefore unwise to include\n   information within a URI that is sensitive, personally identifiable,\n   or a risk to disclose.\n\n   Authors of services ought to avoid GET-based forms for the submission\n   of sensitive data because that data will be placed in the\n   request-target.  Many existing servers, proxies, and user agents log\n   or display the request-target in places where it might be visible to\n   third parties.  Such services ought to use POST-based form submission\n   instead.\n\n   Since the Referer header field tells a target site about the context\n   that resulted in a request, it has the potential to reveal\n   information about the user's immediate browsing history and any\n   personal information that might be found in the referring resource's\n   URI.  Limitations on the Referer header field are described in\n   <a href=\"#section-5.5.2\">Section 5.5.2</a> to address some of its security considerations.\n\n<h3 class=\"h3\" id=\"section-9.5\">9.5.  Disclosure of Fragment after Redirects</h3>\n   Although fragment identifiers used within URI references are not sent\n   in requests, implementers ought to be aware that they will be visible\n   to the user agent and any extensions or scripts running as a result\n   of the response.  In particular, when a redirect occurs and the\n   original request's fragment identifier is inherited by the new\n   reference in Location (<a href=\"#section-7.1.2\">Section 7.1.2</a>), this might have the effect of\n   disclosing one site's fragment to another site.  If the first site\n   uses personal information in fragments, it ought to ensure that\n   redirects to other sites include a (possibly empty) fragment\n   component in order to block that inheritance.\n\n<h3 class=\"h3\" id=\"section-9.6\">9.6.  Disclosure of Product Information</h3>\n   The User-Agent (<a href=\"#section-5.5.3\">Section 5.5.3</a>), Via (<a href=\"https://tools.ietf.org/html/rfc7230#section-5.7.1\">Section 5.7.1 of [RFC7230]</a>), and\n   Server (<a href=\"#section-7.4.2\">Section 7.4.2</a>) header fields often reveal information about\n   the respective sender's software systems.  In theory, this can make\n   it easier for an attacker to exploit known security holes; in\n   practice, attackers tend to try all potential holes regardless of the\n   apparent software versions being used.\n\n   Proxies that serve as a portal through a network firewall ought to\n   take special precautions regarding the transfer of header information\n   that might identify hosts behind the firewall.  The Via header field\n   allows intermediaries to replace sensitive machine names with\n   pseudonyms.\n\n<h3 class=\"h3\" id=\"section-9.7\">9.7.  Browser Fingerprinting</h3>\n   Browser fingerprinting is a set of techniques for identifying a\n   specific user agent over time through its unique set of\n   characteristics.  These characteristics might include information\n   related to its TCP behavior, feature capabilities, and scripting\n   environment, though of particular interest here is the set of unique\n   characteristics that might be communicated via HTTP.  Fingerprinting\n   is considered a privacy concern because it enables tracking of a user\n   agent's behavior over time without the corresponding controls that\n   the user might have over other forms of data collection (e.g.,\n   cookies).  Many general-purpose user agents (i.e., Web browsers) have\n   taken steps to reduce their fingerprints.\n\n   There are a number of request header fields that might reveal\n   information to servers that is sufficiently unique to enable\n   fingerprinting.  The From header field is the most obvious, though it\n   is expected that From will only be sent when self-identification is\n   desired by the user.  Likewise, Cookie header fields are deliberately\n\n   designed to enable re-identification, so fingerprinting concerns only\n   apply to situations where cookies are disabled or restricted by the\n   user agent's configuration.\n\n   The User-Agent header field might contain enough information to\n   uniquely identify a specific device, usually when combined with other\n   characteristics, particularly if the user agent sends excessive\n   details about the user's system or extensions.  However, the source\n   of unique information that is least expected by users is proactive\n   negotiation (<a href=\"#section-5.3\">Section 5.3</a>), including the Accept, Accept-Charset,\n   Accept-Encoding, and Accept-Language header fields.\n\n   In addition to the fingerprinting concern, detailed use of the\n   Accept-Language header field can reveal information the user might\n   consider to be of a private nature.  For example, understanding a\n   given language set might be strongly correlated to membership in a\n   particular ethnic group.  An approach that limits such loss of\n   privacy would be for a user agent to omit the sending of\n   Accept-Language except for sites that have been whitelisted, perhaps\n   via interaction after detecting a Vary header field that indicates\n   language negotiation might be useful.\n\n   In environments where proxies are used to enhance privacy, user\n   agents ought to be conservative in sending proactive negotiation\n   header fields.  General-purpose user agents that provide a high\n   degree of header field configurability ought to inform users about\n   the loss of privacy that might result if too much detail is provided.\n   As an extreme privacy measure, proxies could filter the proactive\n   negotiation header fields in relayed requests.\n\n<h2 class=\"h2\" id=\"section-10\">10.  Acknowledgments</h2>\n   See <a href=\"https://tools.ietf.org/html/rfc7230#section-10\">Section 10 of [RFC7230]</a>.\n\n<h2 class=\"h2\" id=\"section-11\">11.  References</h2>\n<h3 class=\"h3\" id=\"section-11.1\">11.1.  Normative References</h3>\n   [<a name=\"ref-RFC2045\" id=\"ref-RFC2045\">RFC2045</a>]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions (MIME) Part One: Format of Internet Message\n              Bodies\", <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a>, November 1996.\n\n   [<a name=\"ref-RFC2046\" id=\"ref-RFC2046\">RFC2046</a>]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions (MIME) Part Two: Media Types\", <a href=\"https://tools.ietf.org/html/rfc2046\">RFC 2046</a>,\n              November 1996.\n\n   [<a name=\"ref-RFC2119\" id=\"ref-RFC2119\">RFC2119</a>]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\", <a href=\"https://tools.ietf.org/html/bcp14\">BCP 14</a>, <a href=\"https://tools.ietf.org/html/rfc2119\">RFC 2119</a>, March 1997.\n\n   [<a name=\"ref-RFC3986\" id=\"ref-RFC3986\">RFC3986</a>]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic Syntax\", STD 66,\n              <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>, January 2005.\n\n   [<a name=\"ref-RFC4647\" id=\"ref-RFC4647\">RFC4647</a>]  Phillips, A., Ed. and M. Davis, Ed., \"Matching of Language\n              Tags\", <a href=\"https://tools.ietf.org/html/bcp47\">BCP 47</a>, <a href=\"https://tools.ietf.org/html/rfc4647\">RFC 4647</a>, September 2006.\n\n   [<a name=\"ref-RFC5234\" id=\"ref-RFC5234\">RFC5234</a>]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications: ABNF\", STD 68, <a href=\"https://tools.ietf.org/html/rfc5234\">RFC 5234</a>, January 2008.\n\n   [<a name=\"ref-RFC5646\" id=\"ref-RFC5646\">RFC5646</a>]  Phillips, A., Ed. and M. Davis, Ed., \"Tags for Identifying\n              Languages\", <a href=\"https://tools.ietf.org/html/bcp47\">BCP 47</a>, <a href=\"https://tools.ietf.org/html/rfc5646\">RFC 5646</a>, September 2009.\n\n   [<a name=\"ref-RFC6365\" id=\"ref-RFC6365\">RFC6365</a>]  Hoffman, P. and J. Klensin, \"Terminology Used in\n              Internationalization in the IETF\", <a href=\"https://tools.ietf.org/html/bcp166\">BCP 166</a>, <a href=\"https://tools.ietf.org/html/rfc6365\">RFC 6365</a>,\n              September 2011.\n\n   [<a name=\"ref-RFC7230\" id=\"ref-RFC7230\">RFC7230</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Message Syntax and Routing\",\n              <a href=\"https://tools.ietf.org/html/rfc7230\">RFC 7230</a>, June 2014.\n\n   [<a name=\"ref-RFC7232\" id=\"ref-RFC7232\">RFC7232</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Conditional Requests\", <a href=\"https://tools.ietf.org/html/rfc7232\">RFC 7232</a>,\n              June 2014.\n\n   [<a name=\"ref-RFC7233\" id=\"ref-RFC7233\">RFC7233</a>]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,\n              \"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\",\n              <a href=\"https://tools.ietf.org/html/rfc7233\">RFC 7233</a>, June 2014.\n\n   [<a name=\"ref-RFC7234\" id=\"ref-RFC7234\">RFC7234</a>]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              <a href=\"https://tools.ietf.org/html/rfc7234\">RFC 7234</a>, June 2014.\n\n   [<a name=\"ref-RFC7235\" id=\"ref-RFC7235\">RFC7235</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Authentication\", <a href=\"https://tools.ietf.org/html/rfc7235\">RFC 7235</a>, June 2014.\n\n<h3 class=\"h3\" id=\"section-11.2\">11.2.  Informative References</h3>\n   [<a name=\"ref-BCP13\" id=\"ref-BCP13\">BCP13</a>]    Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications and Registration Procedures\", <a href=\"https://tools.ietf.org/html/bcp13\">BCP 13</a>,\n              <a href=\"https://tools.ietf.org/html/rfc6838\">RFC 6838</a>, January 2013.\n\n   [<a name=\"ref-BCP178\" id=\"ref-BCP178\">BCP178</a>]   Saint-Andre, P., Crocker, D., and M. Nottingham,\n              \"Deprecating the \"X-\" Prefix and Similar Constructs in\n              Application Protocols\", <a href=\"https://tools.ietf.org/html/bcp178\">BCP 178</a>, <a href=\"https://tools.ietf.org/html/rfc6648\">RFC 6648</a>, June 2012.\n\n   [<a name=\"ref-BCP90\" id=\"ref-BCP90\">BCP90</a>]    Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures for Message Header Fields\", <a href=\"https://tools.ietf.org/html/bcp90\">BCP 90</a>, <a href=\"https://tools.ietf.org/html/rfc3864\">RFC 3864</a>,\n              September 2004.\n\n   [<a name=\"ref-OWASP\" id=\"ref-OWASP\">OWASP</a>]    van der Stock, A., Ed., \"A Guide to Building Secure Web\n              Applications and Web Services\", The Open Web Application\n              Security Project (OWASP) 2.0.1, July 2005,\n              &lt;<a href=\"https://www.owasp.org/\">https://www.owasp.org/</a>&gt;.\n\n   [<a name=\"ref-REST\" id=\"ref-REST\">REST</a>]     Fielding, R., \"Architectural Styles and the Design of\n              Network-based Software Architectures\",\n              Doctoral Dissertation, University of California, Irvine,\n              September 2000,\n              &lt;<a href=\"http://roy.gbiv.com/pubs/dissertation/top.htm\">http://roy.gbiv.com/pubs/dissertation/top.htm</a>&gt;.\n\n   [<a name=\"ref-RFC1945\" id=\"ref-RFC1945\">RFC1945</a>]  Berners-Lee, T., Fielding, R., and H. Nielsen, \"Hypertext\n              Transfer Protocol -- HTTP/1.0\", <a href=\"https://tools.ietf.org/html/rfc1945\">RFC 1945</a>, May 1996.\n\n   [<a name=\"ref-RFC2049\" id=\"ref-RFC2049\">RFC2049</a>]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions (MIME) Part Five: Conformance Criteria and\n              Examples\", <a href=\"https://tools.ietf.org/html/rfc2049\">RFC 2049</a>, November 1996.\n\n   [<a name=\"ref-RFC2068\" id=\"ref-RFC2068\">RFC2068</a>]  Fielding, R., Gettys, J., Mogul, J., Nielsen, H., and T.\n              Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\",\n              <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a>, January 1997.\n\n   [<a name=\"ref-RFC2295\" id=\"ref-RFC2295\">RFC2295</a>]  Holtman, K. and A. Mutz, \"Transparent Content Negotiation\n              in HTTP\", <a href=\"https://tools.ietf.org/html/rfc2295\">RFC 2295</a>, March 1998.\n\n   [<a name=\"ref-RFC2388\" id=\"ref-RFC2388\">RFC2388</a>]  Masinter, L., \"Returning Values from Forms:  multipart/\n              form-data\", <a href=\"https://tools.ietf.org/html/rfc2388\">RFC 2388</a>, August 1998.\n\n   [<a name=\"ref-RFC2557\" id=\"ref-RFC2557\">RFC2557</a>]  Palme, F., Hopmann, A., Shelness, N., and E. Stefferud,\n              \"MIME Encapsulation of Aggregate Documents, such as HTML\n              (MHTML)\", <a href=\"https://tools.ietf.org/html/rfc2557\">RFC 2557</a>, March 1999.\n\n   [<a name=\"ref-RFC2616\" id=\"ref-RFC2616\">RFC2616</a>]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>, June 1999.\n\n   [<a name=\"ref-RFC2774\" id=\"ref-RFC2774\">RFC2774</a>]  Frystyk, H., Leach, P., and S. Lawrence, \"An HTTP\n              Extension Framework\", <a href=\"https://tools.ietf.org/html/rfc2774\">RFC 2774</a>, February 2000.\n\n   [<a name=\"ref-RFC2817\" id=\"ref-RFC2817\">RFC2817</a>]  Khare, R. and S. Lawrence, \"Upgrading to TLS Within\n              HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2817\">RFC 2817</a>, May 2000.\n\n   [<a name=\"ref-RFC2978\" id=\"ref-RFC2978\">RFC2978</a>]  Freed, N. and J. Postel, \"IANA Charset Registration\n              Procedures\", <a href=\"https://tools.ietf.org/html/bcp19\">BCP 19</a>, <a href=\"https://tools.ietf.org/html/rfc2978\">RFC 2978</a>, October 2000.\n\n   [<a name=\"ref-RFC5226\" id=\"ref-RFC5226\">RFC5226</a>]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\", <a href=\"https://tools.ietf.org/html/bcp26\">BCP 26</a>, <a href=\"https://tools.ietf.org/html/rfc5226\">RFC 5226</a>,\n              May 2008.\n\n   [<a name=\"ref-RFC5246\" id=\"ref-RFC5246\">RFC5246</a>]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\", <a href=\"https://tools.ietf.org/html/rfc5246\">RFC 5246</a>, August 2008.\n\n   [<a name=\"ref-RFC5322\" id=\"ref-RFC5322\">RFC5322</a>]  Resnick, P., \"Internet Message Format\", <a href=\"https://tools.ietf.org/html/rfc5322\">RFC 5322</a>,\n              October 2008.\n\n   [<a name=\"ref-RFC5789\" id=\"ref-RFC5789\">RFC5789</a>]  Dusseault, L. and J. Snell, \"PATCH Method for HTTP\",\n              <a href=\"https://tools.ietf.org/html/rfc5789\">RFC 5789</a>, March 2010.\n\n   [<a name=\"ref-RFC5905\" id=\"ref-RFC5905\">RFC5905</a>]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n              \"Network Time Protocol Version 4: Protocol and Algorithms\n              Specification\", <a href=\"https://tools.ietf.org/html/rfc5905\">RFC 5905</a>, June 2010.\n\n   [<a name=\"ref-RFC5987\" id=\"ref-RFC5987\">RFC5987</a>]  Reschke, J., \"Character Set and Language Encoding for\n              Hypertext Transfer Protocol (HTTP) Header Field\n              Parameters\", <a href=\"https://tools.ietf.org/html/rfc5987\">RFC 5987</a>, August 2010.\n\n   [<a name=\"ref-RFC5988\" id=\"ref-RFC5988\">RFC5988</a>]  Nottingham, M., \"Web Linking\", <a href=\"https://tools.ietf.org/html/rfc5988\">RFC 5988</a>, October 2010.\n\n   [<a name=\"ref-RFC6265\" id=\"ref-RFC6265\">RFC6265</a>]  Barth, A., \"HTTP State Management Mechanism\", <a href=\"https://tools.ietf.org/html/rfc6265\">RFC 6265</a>,\n              April 2011.\n\n   [<a name=\"ref-RFC6266\" id=\"ref-RFC6266\">RFC6266</a>]  Reschke, J., \"Use of the Content-Disposition Header Field\n              in the Hypertext Transfer Protocol (HTTP)\", <a href=\"https://tools.ietf.org/html/rfc6266\">RFC 6266</a>,\n              June 2011.\n\n   [<a name=\"ref-RFC7238\" id=\"ref-RFC7238\">RFC7238</a>]  Reschke, J., \"The Hypertext Transfer Protocol (HTTP)\n              Status Code 308 (Permanent Redirect)\", <a href=\"https://tools.ietf.org/html/rfc7238\">RFC 7238</a>,\n              June 2014.\n\n<h2 class=\"h2\" id=\"appendix-A\">Appendix A.  Differences between HTTP and MIME</h2>\n   HTTP/1.1 uses many of the constructs defined for the Internet Message\n   Format [<a href=\"https://tools.ietf.org/html/rfc5322\" title='\"Internet Message Format\"'>RFC5322</a>] and the Multipurpose Internet Mail Extensions (MIME)\n   [<a href=\"https://tools.ietf.org/html/rfc2045\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>RFC2045</a>] to allow a message body to be transmitted in an open\n   variety of representations and with extensible header fields.\n   However, <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a> is focused only on email; applications of HTTP have\n   many characteristics that differ from email; hence, HTTP has features\n   that differ from MIME.  These differences were carefully chosen to\n   optimize performance over binary connections, to allow greater\n   freedom in the use of new media types, to make date comparisons\n   easier, and to acknowledge the practice of some early HTTP servers\n   and clients.\n\n   This appendix describes specific areas where HTTP differs from MIME.\n   Proxies and gateways to and from strict MIME environments need to be\n   aware of these differences and provide the appropriate conversions\n   where necessary.\n\n<h3 class=\"h3\" id=\"appendix-A.1\">A.1.  MIME-Version</h3>\n   HTTP is not a MIME-compliant protocol.  However, messages can include\n   a single MIME-Version header field to indicate what version of the\n   MIME protocol was used to construct the message.  Use of the\n   MIME-Version header field indicates that the message is in full\n   conformance with the MIME protocol (as defined in [<a href=\"https://tools.ietf.org/html/rfc2045\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>RFC2045</a>]).\n   Senders are responsible for ensuring full conformance (where\n   possible) when exporting HTTP messages to strict MIME environments.\n\n<h3 class=\"h3\" id=\"appendix-A.2\">A.2.  Conversion to Canonical Form</h3>\n   MIME requires that an Internet mail body part be converted to\n   canonical form prior to being transferred, as described in <a href=\"https://tools.ietf.org/html/rfc2049#section-4\">Section 4\n   of [RFC2049]</a>.  <a href=\"#section-3.1.1.3\">Section 3.1.1.3</a> of this document describes the forms\n   allowed for subtypes of the \"text\" media type when transmitted over\n   HTTP.  [<a href=\"https://tools.ietf.org/html/rfc2046\" title='\"Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types\"'>RFC2046</a>] requires that content with a type of \"text\"\n   represent line breaks as CRLF and forbids the use of CR or LF outside\n   of line break sequences.  HTTP allows CRLF, bare CR, and bare LF to\n   indicate a line break within text content.\n\n   A proxy or gateway from HTTP to a strict MIME environment ought to\n   translate all line breaks within the text media types described in\n   <a href=\"#section-3.1.1.3\">Section 3.1.1.3</a> of this document to the <a href=\"https://tools.ietf.org/html/rfc2049\">RFC 2049</a> canonical form of\n   CRLF.  Note, however, this might be complicated by the presence of a\n   Content-Encoding and by the fact that HTTP allows the use of some\n   charsets that do not use octets 13 and 10 to represent CR and LF,\n   respectively.\n\n   Conversion will break any cryptographic checksums applied to the\n   original content unless the original content is already in canonical\n   form.  Therefore, the canonical form is recommended for any content\n   that uses such checksums in HTTP.\n\n<h3 class=\"h3\" id=\"appendix-A.3\">A.3.  Conversion of Date Formats</h3>\n   HTTP/1.1 uses a restricted set of date formats (<a href=\"#section-7.1.1.1\">Section 7.1.1.1</a>) to\n   simplify the process of date comparison.  Proxies and gateways from\n   other protocols ought to ensure that any Date header field present in\n   a message conforms to one of the HTTP/1.1 formats and rewrite the\n   date if necessary.\n\n<h3 class=\"h3\" id=\"appendix-A.4\">A.4.  Conversion of Content-Encoding</h3>\n   MIME does not include any concept equivalent to HTTP/1.1's\n   Content-Encoding header field.  Since this acts as a modifier on the\n   media type, proxies and gateways from HTTP to MIME-compliant\n   protocols ought to either change the value of the Content-Type header\n   field or decode the representation before forwarding the message.\n   (Some experimental applications of Content-Type for Internet mail\n   have used a media-type parameter of \";conversions=&lt;content-coding&gt;\"\n   to perform a function equivalent to Content-Encoding.  However, this\n   parameter is not part of the MIME standards).\n\n<h3 class=\"h3\" id=\"appendix-A.5\">A.5.  Conversion of Content-Transfer-Encoding</h3>\n   HTTP does not use the Content-Transfer-Encoding field of MIME.\n   Proxies and gateways from MIME-compliant protocols to HTTP need to\n   remove any Content-Transfer-Encoding prior to delivering the response\n   message to an HTTP client.\n\n   Proxies and gateways from HTTP to MIME-compliant protocols are\n   responsible for ensuring that the message is in the correct format\n   and encoding for safe transport on that protocol, where \"safe\n   transport\" is defined by the limitations of the protocol being used.\n   Such a proxy or gateway ought to transform and label the data with an\n   appropriate Content-Transfer-Encoding if doing so will improve the\n   likelihood of safe transport over the destination protocol.\n\n<h3 class=\"h3\" id=\"appendix-A.6\">A.6.  MHTML and Line Length Limitations</h3>\n   HTTP implementations that share code with MHTML [<a href=\"https://tools.ietf.org/html/rfc2557\" title='\"MIME Encapsulation of Aggregate Documents, such as HTML (MHTML)\"'>RFC2557</a>]\n   implementations need to be aware of MIME line length limitations.\n   Since HTTP does not have this limitation, HTTP does not fold long\n   lines.  MHTML messages being transported by HTTP follow all\n   conventions of MHTML, including line length limitations and folding,\n   canonicalization, etc., since HTTP transfers message-bodies as\n\n   payload and, aside from the \"multipart/byteranges\" type (Appendix A\n   of [<a href=\"https://tools.ietf.org/html/rfc7233\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\"'>RFC7233</a>]), does not interpret the content or any MIME header\n   lines that might be contained therein.\n\n<h2 class=\"h2\" id=\"appendix-B\">Appendix B.  Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>\n</h2>\n   The primary changes in this revision have been editorial in nature:\n   extracting the messaging syntax and partitioning HTTP semantics into\n   separate documents for the core features, conditional requests,\n   partial requests, caching, and authentication.  The conformance\n   language has been revised to clearly target requirements and the\n   terminology has been improved to distinguish payload from\n   representations and representations from resources.\n\n   A new requirement has been added that semantics embedded in a URI be\n   disabled when those semantics are inconsistent with the request\n   method, since this is a common cause of interoperability failure.\n   (<a href=\"#section-2\">Section 2</a>)\n\n   An algorithm has been added for determining if a payload is\n   associated with a specific identifier.  (<a href=\"#section-3.1.4.1\">Section 3.1.4.1</a>)\n\n   The default charset of ISO-8859-1 for text media types has been\n   removed; the default is now whatever the media type definition says.\n   Likewise, special treatment of ISO-8859-1 has been removed from the\n   Accept-Charset header field.  (<a href=\"#section-3.1.1.3\">Section 3.1.1.3</a> and <a href=\"#section-5.3.3\">Section 5.3.3</a>)\n\n   The definition of Content-Location has been changed to no longer\n   affect the base URI for resolving relative URI references, due to\n   poor implementation support and the undesirable effect of potentially\n   breaking relative links in content-negotiated resources.\n   (<a href=\"#section-3.1.4.2\">Section 3.1.4.2</a>)\n\n   To be consistent with the method-neutral parsing algorithm of\n   [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>], the definition of GET has been relaxed so that requests\n   can have a body, even though a body has no meaning for GET.\n   (<a href=\"#section-4.3.1\">Section 4.3.1</a>)\n\n   Servers are no longer required to handle all Content-* header fields\n   and use of Content-Range has been explicitly banned in PUT requests.\n   (<a href=\"#section-4.3.4\">Section 4.3.4</a>)\n\n   Definition of the CONNECT method has been moved from [<a href=\"https://tools.ietf.org/html/rfc2817\" title='\"Upgrading to TLS Within HTTP/1.1\"'>RFC2817</a>] to\n   this specification.  (<a href=\"#section-4.3.6\">Section 4.3.6</a>)\n\n   The OPTIONS and TRACE request methods have been defined as being\n   safe.  (<a href=\"#section-4.3.7\">Section 4.3.7</a> and <a href=\"#section-4.3.8\">Section 4.3.8</a>)\n\n   The Expect header field's extension mechanism has been removed due to\n   widely-deployed broken implementations.  (<a href=\"#section-5.1.1\">Section 5.1.1</a>)\n\n   The Max-Forwards header field has been restricted to the OPTIONS and\n   TRACE methods; previously, extension methods could have used it as\n   well.  (<a href=\"#section-5.1.2\">Section 5.1.2</a>)\n\n   The \"about:blank\" URI has been suggested as a value for the Referer\n   header field when no referring URI is applicable, which distinguishes\n   that case from others where the Referer field is not sent or has been\n   removed.  (<a href=\"#section-5.5.2\">Section 5.5.2</a>)\n\n   The following status codes are now cacheable (that is, they can be\n   stored and reused by a cache without explicit freshness information\n   present): 204, 404, 405, 414, 501.  (<a href=\"#section-6\">Section 6</a>)\n\n   The 201 (Created) status description has been changed to allow for\n   the possibility that more than one resource has been created.\n   (<a href=\"#section-6.3.2\">Section 6.3.2</a>)\n\n   The definition of 203 (Non-Authoritative Information) has been\n   broadened to include cases of payload transformations as well.\n   (<a href=\"#section-6.3.4\">Section 6.3.4</a>)\n\n   The set of request methods that are safe to automatically redirect is\n   no longer closed; user agents are able to make that determination\n   based upon the request method semantics.  The redirect status codes\n   301, 302, and 307 no longer have normative requirements on response\n   payloads and user interaction.  (<a href=\"#section-6.4\">Section 6.4</a>)\n\n   The status codes 301 and 302 have been changed to allow user agents\n   to rewrite the method from POST to GET.  (Sections <a href=\"#section-6.4.2\">6.4.2</a> and <a href=\"#section-6.4.3\">6.4.3</a>)\n\n   The description of the 303 (See Other) status code has been changed\n   to allow it to be cached if explicit freshness information is given,\n   and a specific definition has been added for a 303 response to GET.\n   (<a href=\"#section-6.4.4\">Section 6.4.4</a>)\n\n   The 305 (Use Proxy) status code has been deprecated due to security\n   concerns regarding in-band configuration of a proxy.  (<a href=\"#section-6.4.5\">Section 6.4.5</a>)\n\n   The 400 (Bad Request) status code has been relaxed so that it isn't\n   limited to syntax errors.  (<a href=\"#section-6.5.1\">Section 6.5.1</a>)\n\n   The 426 (Upgrade Required) status code has been incorporated from\n   [<a href=\"https://tools.ietf.org/html/rfc2817\" title='\"Upgrading to TLS Within HTTP/1.1\"'>RFC2817</a>].  (<a href=\"#section-6.5.15\">Section 6.5.15</a>)\n\n   The target of requirements on HTTP-date and the Date header field\n   have been reduced to those systems generating the date, rather than\n   all systems sending a date.  (<a href=\"#section-7.1.1\">Section 7.1.1</a>)\n\n   The syntax of the Location header field has been changed to allow all\n   URI references, including relative references and fragments, along\n   with some clarifications as to when use of fragments would not be\n   appropriate.  (<a href=\"#section-7.1.2\">Section 7.1.2</a>)\n\n   Allow has been reclassified as a response header field, removing the\n   option to specify it in a PUT request.  Requirements relating to the\n   content of Allow have been relaxed; correspondingly, clients are not\n   required to always trust its value.  (<a href=\"#section-7.4.1\">Section 7.4.1</a>)\n\n   A Method Registry has been defined.  (<a href=\"#section-8.1\">Section 8.1</a>)\n\n   The Status Code Registry has been redefined by this specification;\n   previously, it was defined in <a href=\"https://tools.ietf.org/html/rfc2817#section-7.1\">Section 7.1 of [RFC2817]</a>.\n   (<a href=\"#section-8.2\">Section 8.2</a>)\n\n   Registration of content codings has been changed to require IETF\n   Review.  (<a href=\"#section-8.4\">Section 8.4</a>)\n\n   The Content-Disposition header field has been removed since it is now\n   defined by [<a href=\"https://tools.ietf.org/html/rfc6266\" title='\"Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)\"'>RFC6266</a>].\n\n   The Content-MD5 header field has been removed because it was\n   inconsistently implemented with respect to partial responses.\n\n<h2 class=\"h2\" id=\"appendix-C\">Appendix C.  Imported ABNF</h2>\n   The following core rules are included by reference, as defined in\n   <a href=\"https://tools.ietf.org/html/rfc5234#appendix-B.1\">Appendix B.1 of [RFC5234]</a>: ALPHA (letters), CR (carriage return),\n   CRLF (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double\n   quote), HEXDIG (hexadecimal 0-9/A-F/a-f), HTAB (horizontal tab), LF\n   (line feed), OCTET (any 8-bit sequence of data), SP (space), and\n   VCHAR (any visible US-ASCII character).\n\n   The rules below are defined in [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>]:\n\n     BWS           = &lt;BWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n     OWS           = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n     RWS           = &lt;RWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n     URI-reference = &lt;URI-reference, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n     absolute-URI  = &lt;absolute-URI, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n     comment       = &lt;comment, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n     field-name    = &lt;comment, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">[RFC7230], Section 3.2</a>&gt;\n     partial-URI   = &lt;partial-URI, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n\n     quoted-string = &lt;quoted-string, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n     token         = &lt;token, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n\n<h2 class=\"h2\" id=\"appendix-D\">Appendix D.  Collected ABNF</h2>\n   In the collected ABNF below, list rules are expanded as per <a href=\"#section-1.2\">Section</a>\n   <a href=\"#section-1.2\">1.2</a> of [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>].\n\n   Accept = [ ( \",\" / ( media-range [ accept-params ] ) ) *( OWS \",\" [\n    OWS ( media-range [ accept-params ] ) ] ) ]\n   Accept-Charset = *( \",\" OWS ) ( ( charset / \"*\" ) [ weight ] ) *( OWS\n    \",\" [ OWS ( ( charset / \"*\" ) [ weight ] ) ] )\n   Accept-Encoding = [ ( \",\" / ( codings [ weight ] ) ) *( OWS \",\" [ OWS\n    ( codings [ weight ] ) ] ) ]\n   Accept-Language = *( \",\" OWS ) ( language-range [ weight ] ) *( OWS\n    \",\" [ OWS ( language-range [ weight ] ) ] )\n   Allow = [ ( \",\" / method ) *( OWS \",\" [ OWS method ] ) ]\n\n   BWS = &lt;BWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n\n   Content-Encoding = *( \",\" OWS ) content-coding *( OWS \",\" [ OWS\n    content-coding ] )\n   Content-Language = *( \",\" OWS ) language-tag *( OWS \",\" [ OWS\n    language-tag ] )\n   Content-Location = absolute-URI / partial-URI\n   Content-Type = media-type\n\n   Date = HTTP-date\n\n   Expect = \"100-continue\"\n\n   From = mailbox\n\n   GMT = %x47.4D.54 ; GMT\n\n   HTTP-date = IMF-fixdate / obs-date\n\n   IMF-fixdate = day-name \",\" SP date1 SP time-of-day SP GMT\n\n   Location = URI-reference\n\n   Max-Forwards = 1*DIGIT\n\n   OWS = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n\n   RWS = &lt;RWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n   Referer = absolute-URI / partial-URI\n   Retry-After = HTTP-date / delay-seconds\n\n   Server = product *( RWS ( product / comment ) )\n\n   URI-reference = &lt;URI-reference, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n   User-Agent = product *( RWS ( product / comment ) )\n\n   Vary = \"*\" / ( *( \",\" OWS ) field-name *( OWS \",\" [ OWS field-name ]\n    ) )\n\n   absolute-URI = &lt;absolute-URI, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n   accept-ext = OWS \";\" OWS token [ \"=\" ( token / quoted-string ) ]\n   accept-params = weight *accept-ext\n   asctime-date = day-name SP date3 SP time-of-day SP year\n\n   charset = token\n   codings = content-coding / \"identity\" / \"*\"\n   comment = &lt;comment, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n   content-coding = token\n\n   date1 = day SP month SP year\n   date2 = day \"-\" month \"-\" 2DIGIT\n   date3 = month SP ( 2DIGIT / ( SP DIGIT ) )\n   day = 2DIGIT\n   day-name = %x4D.6F.6E ; Mon\n    / %x54.75.65 ; Tue\n    / %x57.65.64 ; Wed\n    / %x54.68.75 ; Thu\n    / %x46.72.69 ; Fri\n    / %x53.61.74 ; Sat\n    / %x53.75.6E ; Sun\n   day-name-l = %x4D.6F.6E.64.61.79 ; Monday\n    / %x54.75.65.73.64.61.79 ; Tuesday\n    / %x57.65.64.6E.65.73.64.61.79 ; Wednesday\n    / %x54.68.75.72.73.64.61.79 ; Thursday\n    / %x46.72.69.64.61.79 ; Friday\n    / %x53.61.74.75.72.64.61.79 ; Saturday\n    / %x53.75.6E.64.61.79 ; Sunday\n   delay-seconds = 1*DIGIT\n\n   field-name = &lt;comment, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2\">[RFC7230], Section 3.2</a>&gt;\n\n   hour = 2DIGIT\n\n   language-range = &lt;language-range, see <a href=\"https://tools.ietf.org/html/rfc4647#section-2.1\">[RFC4647], Section 2.1</a>&gt;\n   language-tag = &lt;Language-Tag, see <a href=\"https://tools.ietf.org/html/rfc5646#section-2.1\">[RFC5646], Section 2.1</a>&gt;\n\n   mailbox = &lt;mailbox, see <a href=\"https://tools.ietf.org/html/rfc5322#section-3.4\">[RFC5322], Section 3.4</a>&gt;\n   media-range = ( \"*/*\" / ( type \"/*\" ) / ( type \"/\" subtype ) ) *( OWS\n    \";\" OWS parameter )\n\n   media-type = type \"/\" subtype *( OWS \";\" OWS parameter )\n   method = token\n   minute = 2DIGIT\n   month = %x4A.61.6E ; Jan\n    / %x46.65.62 ; Feb\n    / %x4D.61.72 ; Mar\n    / %x41.70.72 ; Apr\n    / %x4D.61.79 ; May\n    / %x4A.75.6E ; Jun\n    / %x4A.75.6C ; Jul\n    / %x41.75.67 ; Aug\n    / %x53.65.70 ; Sep\n    / %x4F.63.74 ; Oct\n    / %x4E.6F.76 ; Nov\n    / %x44.65.63 ; Dec\n\n   obs-date = <a href=\"https://tools.ietf.org/html/rfc850\">rfc850</a>-date / asctime-date\n\n   parameter = token \"=\" ( token / quoted-string )\n   partial-URI = &lt;partial-URI, see <a href=\"https://tools.ietf.org/html/rfc7230#section-2.7\">[RFC7230], Section 2.7</a>&gt;\n   product = token [ \"/\" product-version ]\n   product-version = token\n   quoted-string = &lt;quoted-string, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n   qvalue = ( \"0\" [ \".\" *3DIGIT ] ) / ( \"1\" [ \".\" *3\"0\" ] )\n\n   <a href=\"https://tools.ietf.org/html/rfc850\">rfc850</a>-date = day-name-l \",\" SP date2 SP time-of-day SP GMT\n\n   second = 2DIGIT\n   subtype = token\n\n   time-of-day = hour \":\" minute \":\" second\n   token = &lt;token, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n   type = token\n\n   weight = OWS \";\" OWS \"q=\" qvalue\n\n   year = 4DIGIT\n\nIndex\n\n   1\n      1xx Informational (status code class)  50\n\n   2\n      2xx Successful (status code class)  51\n\n   3\n      3xx Redirection (status code class)  54\n\n   4\n      4xx Client Error (status code class)  58\n\n   5\n      5xx Server Error (status code class)  62\n\n   1\n      100 Continue (status code)  50\n      100-continue (expect value)  34\n      101 Switching Protocols (status code)  50\n\n   2\n      200 OK (status code)  51\n      201 Created (status code)  52\n      202 Accepted (status code)  52\n      203 Non-Authoritative Information (status code)  52\n      204 No Content (status code)  53\n      205 Reset Content (status code)  53\n\n   3\n      300 Multiple Choices (status code)  55\n      301 Moved Permanently (status code)  56\n      302 Found (status code)  56\n      303 See Other (status code)  57\n      305 Use Proxy (status code)  58\n      306 (Unused) (status code)  58\n      307 Temporary Redirect (status code)  58\n\n   4\n      400 Bad Request (status code)  58\n      402 Payment Required (status code)  59\n      403 Forbidden (status code)  59\n      404 Not Found (status code)  59\n      405 Method Not Allowed (status code)  59\n      406 Not Acceptable (status code)  59\n      408 Request Timeout (status code)  60\n      409 Conflict (status code)  60\n\n      410 Gone (status code)  60\n      411 Length Required (status code)  61\n      413 Payload Too Large (status code)  61\n      414 URI Too Long (status code)  61\n      415 Unsupported Media Type (status code)  62\n      417 Expectation Failed (status code)  62\n      426 Upgrade Required (status code)  62\n\n   5\n      500 Internal Server Error (status code)  63\n      501 Not Implemented (status code)  63\n      502 Bad Gateway (status code)  63\n      503 Service Unavailable (status code)  63\n      504 Gateway Timeout (status code)  63\n      505 HTTP Version Not Supported (status code)  64\n\n   A\n      Accept header field  38\n      Accept-Charset header field  40\n      Accept-Encoding header field  41\n      Accept-Language header field  42\n      Allow header field  72\n\n   C\n      cacheable  24\n      compress (content coding)  11\n      conditional request  36\n      CONNECT method  30\n      content coding  11\n      content negotiation  6\n      Content-Encoding header field  12\n      Content-Language header field  13\n      Content-Location header field  15\n      Content-Transfer-Encoding header field  89\n      Content-Type header field  10\n\n   D\n      Date header field  67\n      deflate (content coding)  11\n      DELETE method  29\n\n   E\n      Expect header field  34\n\n   F\n      From header field  44\n\n   G\n      GET method  24\n      Grammar\n         Accept  38\n         Accept-Charset  40\n         Accept-Encoding  41\n         accept-ext  38\n         Accept-Language  42\n         accept-params  38\n         Allow  72\n         asctime-date  66\n         charset  9\n         codings  41\n         content-coding  11\n         Content-Encoding  12\n         Content-Language  13\n         Content-Location  15\n         Content-Type  10\n         Date  67\n         date1  65\n         day  65\n         day-name  65\n         day-name-l  65\n         delay-seconds  69\n         Expect  34\n         From  44\n         GMT  65\n         hour  65\n         HTTP-date  65\n         IMF-fixdate  65\n         language-range  42\n         language-tag  13\n         Location  68\n         Max-Forwards  36\n         media-range  38\n         media-type  8\n         method  21\n         minute  65\n         month  65\n         obs-date  66\n         parameter  8\n         product  46\n         product-version  46\n         qvalue  38\n         Referer  45\n         Retry-After  69\n         <a href=\"https://tools.ietf.org/html/rfc850\">rfc850</a>-date  66\n         second  65\n\n         Server  73\n         subtype  8\n         time-of-day  65\n         type  8\n         User-Agent  46\n         Vary  70\n         weight  38\n         year  65\n      gzip (content coding)  11\n\n   H\n      HEAD method  25\n\n   I\n      idempotent  23\n\n   L\n      Location header field  68\n\n   M\n      Max-Forwards header field  36\n      MIME-Version header field  89\n\n   O\n      OPTIONS method  31\n\n   P\n      payload  17\n      POST method  25\n      PUT method  26\n\n   R\n      Referer header field  45\n      representation  7\n      Retry-After header field  69\n\n   S\n      safe  22\n      selected representation  7, 71\n      Server header field  73\n      Status Codes Classes\n         1xx Informational  50\n         2xx Successful  51\n         3xx Redirection  54\n         4xx Client Error  58\n         5xx Server Error  62\n\n   T\n      TRACE method  32\n\n   U\n      User-Agent header field  46\n\n   V\n      Vary header field  70\n\n   X\n      x-compress (content coding)  11\n      x-gzip (content coding)  11\n\nAuthors' Addresses\n\n   Roy T. Fielding (editor)\n   Adobe Systems Incorporated\n   345 Park Ave\n   San Jose, CA  95110\n   USA\n\n   EMail: fielding@gbiv.com\n   URI:   <a href=\"http://roy.gbiv.com/\">http://roy.gbiv.com/</a>\n\n\n   Julian F. Reschke (editor)\n   greenbytes GmbH\n   Hafenweg 16\n   Muenster, NW  48155\n   Germany\n\n   EMail: julian.reschke@greenbytes.de\n   URI:   <a href=\"http://greenbytes.de/tech/webdav/\">http://greenbytes.de/tech/webdav/</a>\n\n\nFielding &amp; Reschke           Standards Track                  [Page 101]<br>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; document authors. All rights reserved.<br>\n    <a href=\"https://tools.ietf.org/html/rfc7231\" class=\"_attribution-link\">https://tools.ietf.org/html/rfc7231</a>\n  </p>\n</div>\n","rfc7230":"<div class=\"_rfc-pre\">Internet Engineering Task Force (IETF)                  R. Fielding, Ed.\nRequest for Comments: 7230                                         Adobe\nObsoletes: <a href=\"https://tools.ietf.org/html/rfc2145\">2145</a>, <a href=\"https://tools.ietf.org/html/rfc2616\">2616</a>                                    J. Reschke, Ed.\nUpdates: <a href=\"https://tools.ietf.org/html/rfc2817\">2817</a>, <a href=\"https://tools.ietf.org/html/rfc2818\">2818</a>                                           greenbytes\nCategory: Standards Track                                      June 2014\nISSN: 2070-1721\n\n\n   <h1 class=\"h1\">Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</h1>\nAbstract\n\n   The Hypertext Transfer Protocol (HTTP) is a stateless application-\n   level protocol for distributed, collaborative, hypertext information\n   systems.  This document provides an overview of HTTP architecture and\n   its associated terminology, defines the \"http\" and \"https\" Uniform\n   Resource Identifier (URI) schemes, defines the HTTP/1.1 message\n   syntax and parsing requirements, and describes related security\n   concerns for implementations.\n\nStatus of This Memo\n\n   This is an Internet Standards Track document.\n\n   This document is a product of the Internet Engineering Task Force\n   (IETF).  It represents the consensus of the IETF community.  It has\n   received public review and has been approved for publication by the\n   Internet Engineering Steering Group (IESG).  Further information on\n   Internet Standards is available in <a href=\"https://tools.ietf.org/html/rfc5741#section-2\">Section 2 of RFC 5741</a>.\n\n   Information about the current status of this document, any errata,\n   and how to provide feedback on it may be obtained at\n   <a href=\"http://www.rfc-editor.org/info/rfc7230\">http://www.rfc-editor.org/info/rfc7230</a>.\n\nCopyright Notice\n\n   Copyright (c) 2014 IETF Trust and the persons identified as the\n   document authors.  All rights reserved.\n\n   This document is subject to <a href=\"https://tools.ietf.org/html/bcp78\">BCP 78</a> and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n   (<a href=\"http://trustee.ietf.org/license-info\">http://trustee.ietf.org/license-info</a>) in effect on the date of\n   publication of this document.  Please review these documents\n   carefully, as they describe your rights and restrictions with respect\n   to this document.  Code Components extracted from this document must\n   include Simplified BSD License text as described in <a href=\"#section-4\">Section 4</a>.e of\n   the Trust Legal Provisions and are provided without warranty as\n   described in the Simplified BSD License.\n\n   This document may contain material from IETF Documents or IETF\n   Contributions published or made publicly available before November\n   10, 2008.  The person(s) controlling the copyright in some of this\n   material may not have granted the IETF Trust the right to allow\n   modifications of such material outside the IETF Standards Process.\n   Without obtaining an adequate license from the person(s) controlling\n   the copyright in such materials, this document may not be modified\n   outside the IETF Standards Process, and derivative works of it may\n   not be created outside the IETF Standards Process, except to format\n   it for publication as an RFC or to translate it into languages other\n   than English.\n\nTable of Contents\n\n   <a href=\"#section-1\">1</a>. Introduction \n      <a href=\"#section-1.1\">1.1</a>. Requirements Notation \n      <a href=\"#section-1.2\">1.2</a>. Syntax Notation \n   <a href=\"#section-2\">2</a>. Architecture \n      <a href=\"#section-2.1\">2.1</a>. Client/Server Messaging \n      <a href=\"#section-2.2\">2.2</a>. Implementation Diversity \n      <a href=\"#section-2.3\">2.3</a>. Intermediaries \n      <a href=\"#section-2.4\">2.4</a>. Caches \n      <a href=\"#section-2.5\">2.5</a>. Conformance and Error Handling \n      <a href=\"#section-2.6\">2.6</a>. Protocol Versioning \n      <a href=\"#section-2.7\">2.7</a>. Uniform Resource Identifiers \n           <a href=\"#section-2.7.1\">2.7.1</a>. http URI Scheme \n           <a href=\"#section-2.7.2\">2.7.2</a>. https URI Scheme \n           <a href=\"#section-2.7.3\">2.7.3</a>. http and https URI Normalization and Comparison \n   <a href=\"#section-3\">3</a>. Message Format \n      <a href=\"#section-3.1\">3.1</a>. Start Line \n           <a href=\"#section-3.1.1\">3.1.1</a>. Request Line \n           <a href=\"#section-3.1.2\">3.1.2</a>. Status Line \n      <a href=\"#section-3.2\">3.2</a>. Header Fields \n\n           <a href=\"#section-3.2.1\">3.2.1</a>. Field Extensibility \n           <a href=\"#section-3.2.2\">3.2.2</a>. Field Order \n           <a href=\"#section-3.2.3\">3.2.3</a>. Whitespace \n           <a href=\"#section-3.2.4\">3.2.4</a>. Field Parsing \n           <a href=\"#section-3.2.5\">3.2.5</a>. Field Limits \n           <a href=\"#section-3.2.6\">3.2.6</a>. Field Value Components \n      <a href=\"#section-3.3\">3.3</a>. Message Body \n           <a href=\"#section-3.3.1\">3.3.1</a>. Transfer-Encoding \n           <a href=\"#section-3.3.2\">3.3.2</a>. Content-Length \n           <a href=\"#section-3.3.3\">3.3.3</a>. Message Body Length \n      <a href=\"#section-3.4\">3.4</a>. Handling Incomplete Messages \n      <a href=\"#section-3.5\">3.5</a>. Message Parsing Robustness \n   <a href=\"#section-4\">4</a>. Transfer Codings \n      <a href=\"#section-4.1\">4.1</a>. Chunked Transfer Coding \n           <a href=\"#section-4.1.1\">4.1.1</a>. Chunk Extensions \n           <a href=\"#section-4.1.2\">4.1.2</a>. Chunked Trailer Part \n           <a href=\"#section-4.1.3\">4.1.3</a>. Decoding Chunked \n      <a href=\"#section-4.2\">4.2</a>. Compression Codings \n           <a href=\"#section-4.2.1\">4.2.1</a>. Compress Coding \n           <a href=\"#section-4.2.2\">4.2.2</a>. Deflate Coding \n           <a href=\"#section-4.2.3\">4.2.3</a>. Gzip Coding \n      <a href=\"#section-4.3\">4.3</a>. TE \n      <a href=\"#section-4.4\">4.4</a>. Trailer \n   <a href=\"#section-5\">5</a>. Message Routing \n      <a href=\"#section-5.1\">5.1</a>. Identifying a Target Resource \n      <a href=\"#section-5.2\">5.2</a>. Connecting Inbound \n      <a href=\"#section-5.3\">5.3</a>. Request Target \n           <a href=\"#section-5.3.1\">5.3.1</a>. origin-form \n           <a href=\"#section-5.3.2\">5.3.2</a>. absolute-form \n           <a href=\"#section-5.3.3\">5.3.3</a>. authority-form \n           <a href=\"#section-5.3.4\">5.3.4</a>. asterisk-form \n      <a href=\"#section-5.4\">5.4</a>. Host \n      <a href=\"#section-5.5\">5.5</a>. Effective Request URI \n      <a href=\"#section-5.6\">5.6</a>. Associating a Response to a Request \n      <a href=\"#section-5.7\">5.7</a>. Message Forwarding \n           <a href=\"#section-5.7.1\">5.7.1</a>. Via \n           <a href=\"#section-5.7.2\">5.7.2</a>. Transformations \n   <a href=\"#section-6\">6</a>. Connection Management \n      <a href=\"#section-6.1\">6.1</a>. Connection \n      <a href=\"#section-6.2\">6.2</a>. Establishment \n      <a href=\"#section-6.3\">6.3</a>. Persistence \n           <a href=\"#section-6.3.1\">6.3.1</a>. Retrying Requests \n           <a href=\"#section-6.3.2\">6.3.2</a>. Pipelining \n      <a href=\"#section-6.4\">6.4</a>. Concurrency \n      <a href=\"#section-6.5\">6.5</a>. Failures and Timeouts \n      <a href=\"#section-6.6\">6.6</a>. Tear-down \n      <a href=\"#section-6.7\">6.7</a>. Upgrade \n   <a href=\"#section-7\">7</a>. ABNF List Extension: #rule \n\n   <a href=\"#section-8\">8</a>. IANA Considerations \n      <a href=\"#section-8.1\">8.1</a>. Header Field Registration \n      <a href=\"#section-8.2\">8.2</a>. URI Scheme Registration \n      <a href=\"#section-8.3\">8.3</a>. Internet Media Type Registration \n           <a href=\"#section-8.3.1\">8.3.1</a>. Internet Media Type message/http \n           <a href=\"#section-8.3.2\">8.3.2</a>. Internet Media Type application/http \n      <a href=\"#section-8.4\">8.4</a>. Transfer Coding Registry \n           <a href=\"#section-8.4.1\">8.4.1</a>. Procedure \n           <a href=\"#section-8.4.2\">8.4.2</a>. Registration \n      <a href=\"#section-8.5\">8.5</a>. Content Coding Registration \n      <a href=\"#section-8.6\">8.6</a>. Upgrade Token Registry \n           <a href=\"#section-8.6.1\">8.6.1</a>. Procedure \n           <a href=\"#section-8.6.2\">8.6.2</a>. Upgrade Token Registration \n   <a href=\"#section-9\">9</a>. Security Considerations \n      <a href=\"#section-9.1\">9.1</a>. Establishing Authority \n      <a href=\"#section-9.2\">9.2</a>. Risks of Intermediaries \n      <a href=\"#section-9.3\">9.3</a>. Attacks via Protocol Element Length \n      <a href=\"#section-9.4\">9.4</a>. Response Splitting \n      <a href=\"#section-9.5\">9.5</a>. Request Smuggling \n      <a href=\"#section-9.6\">9.6</a>. Message Integrity \n      <a href=\"#section-9.7\">9.7</a>. Message Confidentiality \n      <a href=\"#section-9.8\">9.8</a>. Privacy of Server Log Information \n   <a href=\"#section-10\">10</a>. Acknowledgments \n   <a href=\"#section-11\">11</a>. References \n      <a href=\"#section-11.1\">11.1</a>. Normative References \n      <a href=\"#section-11.2\">11.2</a>. Informative References \n   <a href=\"#appendix-A\">Appendix A</a>. HTTP Version History \n      <a href=\"#appendix-A.1\">A.1</a>. Changes from HTTP/1.0  \n           <a href=\"#appendix-A.1.1\">A.1.1</a>.  Multihomed Web Servers \n           <a href=\"#appendix-A.1.2\">A.1.2</a>.  Keep-Alive Connections \n           <a href=\"#appendix-A.1.3\">A.1.3</a>.  Introduction of Transfer-Encoding \n      <a href=\"#appendix-A.2\">A.2</a>.  Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a> \n   <a href=\"#appendix-B\">Appendix B</a>. Collected ABNF \n   Index \n\n<h2 class=\"h2\" id=\"section-1\">1.  Introduction</h2>\n   The Hypertext Transfer Protocol (HTTP) is a stateless application-\n   level request/response protocol that uses extensible semantics and\n   self-descriptive message payloads for flexible interaction with\n   network-based hypertext information systems.  This document is the\n   first in a series of documents that collectively form the HTTP/1.1\n   specification:\n\n   1.  \"Message Syntax and Routing\" (this document)\n\n   2.  \"Semantics and Content\" [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>]\n\n   3.  \"Conditional Requests\" [<a href=\"https://tools.ietf.org/html/rfc7232\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\"'>RFC7232</a>]\n\n   4.  \"Range Requests\" [<a href=\"https://tools.ietf.org/html/rfc7233\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\"'>RFC7233</a>]\n\n   5.  \"Caching\" [<a href=\"https://tools.ietf.org/html/rfc7234\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Caching\"'>RFC7234</a>]\n\n   6.  \"Authentication\" [<a href=\"https://tools.ietf.org/html/rfc7235\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Authentication\"'>RFC7235</a>]\n\n   This HTTP/1.1 specification obsoletes <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a> and <a href=\"https://tools.ietf.org/html/rfc2145\">RFC 2145</a> (on HTTP\n   versioning).  This specification also updates the use of CONNECT to\n   establish a tunnel, previously defined in <a href=\"https://tools.ietf.org/html/rfc2817\">RFC 2817</a>, and defines the\n   \"https\" URI scheme that was described informally in <a href=\"https://tools.ietf.org/html/rfc2818\">RFC 2818</a>.\n\n   HTTP is a generic interface protocol for information systems.  It is\n   designed to hide the details of how a service is implemented by\n   presenting a uniform interface to clients that is independent of the\n   types of resources provided.  Likewise, servers do not need to be\n   aware of each client's purpose: an HTTP request can be considered in\n   isolation rather than being associated with a specific type of client\n   or a predetermined sequence of application steps.  The result is a\n   protocol that can be used effectively in many different contexts and\n   for which implementations can evolve independently over time.\n\n   HTTP is also designed for use as an intermediation protocol for\n   translating communication to and from non-HTTP information systems.\n   HTTP proxies and gateways can provide access to alternative\n   information services by translating their diverse protocols into a\n   hypertext format that can be viewed and manipulated by clients in the\n   same way as HTTP services.\n\n   One consequence of this flexibility is that the protocol cannot be\n   defined in terms of what occurs behind the interface.  Instead, we\n   are limited to defining the syntax of communication, the intent of\n   received communication, and the expected behavior of recipients.  If\n   the communication is considered in isolation, then successful actions\n\n   ought to be reflected in corresponding changes to the observable\n   interface provided by servers.  However, since multiple clients might\n   act in parallel and perhaps at cross-purposes, we cannot require that\n   such changes be observable beyond the scope of a single response.\n\n   This document describes the architectural elements that are used or\n   referred to in HTTP, defines the \"http\" and \"https\" URI schemes,\n   describes overall network operation and connection management, and\n   defines HTTP message framing and forwarding requirements.  Our goal\n   is to define all of the mechanisms necessary for HTTP message\n   handling that are independent of message semantics, thereby defining\n   the complete set of requirements for message parsers and message-\n   forwarding intermediaries.\n\n<h3 class=\"h3\" id=\"section-1.1\">1.1.  Requirements Notation</h3>\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described in [<a href=\"https://tools.ietf.org/html/rfc2119\" title='\"Key words for use in RFCs to Indicate Requirement Levels\"'>RFC2119</a>].\n\n   Conformance criteria and considerations regarding error handling are\n   defined in <a href=\"#section-2.5\">Section 2.5</a>.\n\n<h3 class=\"h3\" id=\"section-1.2\">1.2.  Syntax Notation</h3>\n   This specification uses the Augmented Backus-Naur Form (ABNF)\n   notation of [<a href=\"https://tools.ietf.org/html/rfc5234\" title='\"Augmented BNF for Syntax Specifications: ABNF\"'>RFC5234</a>] with a list extension, defined in <a href=\"#section-7\">Section 7</a>,\n   that allows for compact definition of comma-separated lists using a\n   '#' operator (similar to how the '*' operator indicates repetition).\n   <a href=\"#appendix-B\">Appendix B</a> shows the collected grammar with all list operators\n   expanded to standard ABNF notation.\n\n   The following core rules are included by reference, as defined in\n   <a href=\"https://tools.ietf.org/html/rfc5234#appendix-B.1\">[RFC5234], Appendix B.1</a>: ALPHA (letters), CR (carriage return), CRLF\n   (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double quote),\n   HEXDIG (hexadecimal 0-9/A-F/a-f), HTAB (horizontal tab), LF (line\n   feed), OCTET (any 8-bit sequence of data), SP (space), and VCHAR (any\n   visible [<a href=\"#ref-USASCII\" title='\"Coded Character Set -- 7-bit American Standard Code for Information Interchange\"'>USASCII</a>] character).\n\n   As a convention, ABNF rule names prefixed with \"obs-\" denote\n   \"obsolete\" grammar rules that appear for historical reasons.\n\n<h2 class=\"h2\" id=\"section-2\">2.  Architecture</h2>\n   HTTP was created for the World Wide Web (WWW) architecture and has\n   evolved over time to support the scalability needs of a worldwide\n   hypertext system.  Much of that architecture is reflected in the\n   terminology and syntax productions used to define HTTP.\n\n<h3 class=\"h3\" id=\"section-2.1\">2.1.  Client/Server Messaging</h3>\n   HTTP is a stateless request/response protocol that operates by\n   exchanging messages (<a href=\"#section-3\">Section 3</a>) across a reliable transport- or\n   session-layer \"connection\" (<a href=\"#section-6\">Section 6</a>).  An HTTP \"client\" is a\n   program that establishes a connection to a server for the purpose of\n   sending one or more HTTP requests.  An HTTP \"server\" is a program\n   that accepts connections in order to service HTTP requests by sending\n   HTTP responses.\n\n   The terms \"client\" and \"server\" refer only to the roles that these\n   programs perform for a particular connection.  The same program might\n   act as a client on some connections and a server on others.  The term\n   \"user agent\" refers to any of the various client programs that\n   initiate a request, including (but not limited to) browsers, spiders\n   (web-based robots), command-line tools, custom applications, and\n   mobile apps.  The term \"origin server\" refers to the program that can\n   originate authoritative responses for a given target resource.  The\n   terms \"sender\" and \"recipient\" refer to any implementation that sends\n   or receives a given message, respectively.\n\n   HTTP relies upon the Uniform Resource Identifier (URI) standard\n   [<a href=\"https://tools.ietf.org/html/rfc3986\" title='\"Uniform Resource Identifier (URI): Generic Syntax\"'>RFC3986</a>] to indicate the target resource (<a href=\"#section-5.1\">Section 5.1</a>) and\n   relationships between resources.  Messages are passed in a format\n   similar to that used by Internet mail [<a href=\"https://tools.ietf.org/html/rfc5322\" title='\"Internet Message Format\"'>RFC5322</a>] and the Multipurpose\n   Internet Mail Extensions (MIME) [<a href=\"https://tools.ietf.org/html/rfc2045\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>RFC2045</a>] (see <a href=\"https://tools.ietf.org/html/rfc7231#appendix-A\">Appendix A of\n   [RFC7231]</a> for the differences between HTTP and MIME messages).\n\n   Most HTTP communication consists of a retrieval request (GET) for a\n   representation of some resource identified by a URI.  In the simplest\n   case, this might be accomplished via a single bidirectional\n   connection (===) between the user agent (UA) and the origin\n   server (O).\n\n            request   &gt;\n       UA ======================================= O\n                                   &lt;   response\n\n   A client sends an HTTP request to a server in the form of a request\n   message, beginning with a request-line that includes a method, URI,\n   and protocol version (<a href=\"#section-3.1.1\">Section 3.1.1</a>), followed by header fields\n   containing request modifiers, client information, and representation\n   metadata (<a href=\"#section-3.2\">Section 3.2</a>), an empty line to indicate the end of the\n   header section, and finally a message body containing the payload\n   body (if any, <a href=\"#section-3.3\">Section 3.3</a>).\n\n   A server responds to a client's request by sending one or more HTTP\n   response messages, each beginning with a status line that includes\n   the protocol version, a success or error code, and textual reason\n   phrase (<a href=\"#section-3.1.2\">Section 3.1.2</a>), possibly followed by header fields containing\n   server information, resource metadata, and representation metadata\n   (<a href=\"#section-3.2\">Section 3.2</a>), an empty line to indicate the end of the header\n   section, and finally a message body containing the payload body (if\n   any, <a href=\"#section-3.3\">Section 3.3</a>).\n\n   A connection might be used for multiple request/response exchanges,\n   as defined in <a href=\"#section-6.3\">Section 6.3</a>.\n\n   The following example illustrates a typical message exchange for a\n   GET request (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\">Section 4.3.1 of [RFC7231]</a>) on the URI\n   \"http://www.example.com/hello.txt\":\n\n   Client request:\n\n     GET /hello.txt HTTP/1.1\n     User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3\n     Host: www.example.com\n     Accept-Language: en, mi\n\n\n   Server response:\n\n     HTTP/1.1 200 OK\n     Date: Mon, 27 Jul 2009 12:28:53 GMT\n     Server: Apache\n     Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT\n     ETag: \"34aa387-d-1568eb00\"\n     Accept-Ranges: bytes\n     Content-Length: 51\n     Vary: Accept-Encoding\n     Content-Type: text/plain\n\n     Hello World! My payload includes a trailing CRLF.\n\n<h3 class=\"h3\" id=\"section-2.2\">2.2.  Implementation Diversity</h3>\n   When considering the design of HTTP, it is easy to fall into a trap\n   of thinking that all user agents are general-purpose browsers and all\n   origin servers are large public websites.  That is not the case in\n   practice.  Common HTTP user agents include household appliances,\n   stereos, scales, firmware update scripts, command-line programs,\n   mobile apps, and communication devices in a multitude of shapes and\n   sizes.  Likewise, common HTTP origin servers include home automation\n\n   units, configurable networking components, office machines,\n   autonomous robots, news feeds, traffic cameras, ad selectors, and\n   video-delivery platforms.\n\n   The term \"user agent\" does not imply that there is a human user\n   directly interacting with the software agent at the time of a\n   request.  In many cases, a user agent is installed or configured to\n   run in the background and save its results for later inspection (or\n   save only a subset of those results that might be interesting or\n   erroneous).  Spiders, for example, are typically given a start URI\n   and configured to follow certain behavior while crawling the Web as a\n   hypertext graph.\n\n   The implementation diversity of HTTP means that not all user agents\n   can make interactive suggestions to their user or provide adequate\n   warning for security or privacy concerns.  In the few cases where\n   this specification requires reporting of errors to the user, it is\n   acceptable for such reporting to only be observable in an error\n   console or log file.  Likewise, requirements that an automated action\n   be confirmed by the user before proceeding might be met via advance\n   configuration choices, run-time options, or simple avoidance of the\n   unsafe action; confirmation does not imply any specific user\n   interface or interruption of normal processing if the user has\n   already made that choice.\n\n<h3 class=\"h3\" id=\"section-2.3\">2.3.  Intermediaries</h3>\n   HTTP enables the use of intermediaries to satisfy requests through a\n   chain of connections.  There are three common forms of HTTP\n   intermediary: proxy, gateway, and tunnel.  In some cases, a single\n   intermediary might act as an origin server, proxy, gateway, or\n   tunnel, switching behavior based on the nature of each request.\n\n            &gt;             &gt;             &gt;             &gt;\n       UA =========== A =========== B =========== C =========== O\n                  &lt;             &lt;             &lt;             &lt;\n\n   The figure above shows three intermediaries (A, B, and C) between the\n   user agent and origin server.  A request or response message that\n   travels the whole chain will pass through four separate connections.\n   Some HTTP communication options might apply only to the connection\n   with the nearest, non-tunnel neighbor, only to the endpoints of the\n   chain, or to all connections along the chain.  Although the diagram\n   is linear, each participant might be engaged in multiple,\n   simultaneous communications.  For example, B might be receiving\n   requests from many clients other than A, and/or forwarding requests\n   to servers other than C, at the same time that it is handling A's\n\n   request.  Likewise, later requests might be sent through a different\n   path of connections, often based on dynamic configuration for load\n   balancing.\n\n   The terms \"upstream\" and \"downstream\" are used to describe\n   directional requirements in relation to the message flow: all\n   messages flow from upstream to downstream.  The terms \"inbound\" and\n   \"outbound\" are used to describe directional requirements in relation\n   to the request route: \"inbound\" means toward the origin server and\n   \"outbound\" means toward the user agent.\n\n   A \"proxy\" is a message-forwarding agent that is selected by the\n   client, usually via local configuration rules, to receive requests\n   for some type(s) of absolute URI and attempt to satisfy those\n   requests via translation through the HTTP interface.  Some\n   translations are minimal, such as for proxy requests for \"http\" URIs,\n   whereas other requests might require translation to and from entirely\n   different application-level protocols.  Proxies are often used to\n   group an organization's HTTP requests through a common intermediary\n   for the sake of security, annotation services, or shared caching.\n   Some proxies are designed to apply transformations to selected\n   messages or payloads while they are being forwarded, as described in\n   <a href=\"#section-5.7.2\">Section 5.7.2</a>.\n\n   A \"gateway\" (a.k.a. \"reverse proxy\") is an intermediary that acts as\n   an origin server for the outbound connection but translates received\n   requests and forwards them inbound to another server or servers.\n   Gateways are often used to encapsulate legacy or untrusted\n   information services, to improve server performance through\n   \"accelerator\" caching, and to enable partitioning or load balancing\n   of HTTP services across multiple machines.\n\n   All HTTP requirements applicable to an origin server also apply to\n   the outbound communication of a gateway.  A gateway communicates with\n   inbound servers using any protocol that it desires, including private\n   extensions to HTTP that are outside the scope of this specification.\n   However, an HTTP-to-HTTP gateway that wishes to interoperate with\n   third-party HTTP servers ought to conform to user agent requirements\n   on the gateway's inbound connection.\n\n   A \"tunnel\" acts as a blind relay between two connections without\n   changing the messages.  Once active, a tunnel is not considered a\n   party to the HTTP communication, though the tunnel might have been\n   initiated by an HTTP request.  A tunnel ceases to exist when both\n   ends of the relayed connection are closed.  Tunnels are used to\n   extend a virtual connection through an intermediary, such as when\n   Transport Layer Security (TLS, [<a href=\"https://tools.ietf.org/html/rfc5246\" title='\"The Transport Layer Security (TLS) Protocol Version 1.2\"'>RFC5246</a>]) is used to establish\n   confidential communication through a shared firewall proxy.\n\n   The above categories for intermediary only consider those acting as\n   participants in the HTTP communication.  There are also\n   intermediaries that can act on lower layers of the network protocol\n   stack, filtering or redirecting HTTP traffic without the knowledge or\n   permission of message senders.  Network intermediaries are\n   indistinguishable (at a protocol level) from a man-in-the-middle\n   attack, often introducing security flaws or interoperability problems\n   due to mistakenly violating HTTP semantics.\n\n   For example, an \"interception proxy\" [<a href=\"https://tools.ietf.org/html/rfc3040\" title='\"Internet Web Replication and Caching Taxonomy\"'>RFC3040</a>] (also commonly known\n   as a \"transparent proxy\" [<a href=\"https://tools.ietf.org/html/rfc1919\" title='\"Classical versus Transparent IP Proxies\"'>RFC1919</a>] or \"captive portal\") differs from\n   an HTTP proxy because it is not selected by the client.  Instead, an\n   interception proxy filters or redirects outgoing TCP port 80 packets\n   (and occasionally other common port traffic).  Interception proxies\n   are commonly found on public network access points, as a means of\n   enforcing account subscription prior to allowing use of non-local\n   Internet services, and within corporate firewalls to enforce network\n   usage policies.\n\n   HTTP is defined as a stateless protocol, meaning that each request\n   message can be understood in isolation.  Many implementations depend\n   on HTTP's stateless design in order to reuse proxied connections or\n   dynamically load balance requests across multiple servers.  Hence, a\n   server MUST NOT assume that two requests on the same connection are\n   from the same user agent unless the connection is secured and\n   specific to that agent.  Some non-standard HTTP extensions (e.g.,\n   [<a href=\"https://tools.ietf.org/html/rfc4559\" title='\"SPNEGO-based Kerberos and NTLM HTTP Authentication in Microsoft Windows\"'>RFC4559</a>]) have been known to violate this requirement, resulting in\n   security and interoperability problems.\n\n<h3 class=\"h3\" id=\"section-2.4\">2.4.  Caches</h3>\n   A \"cache\" is a local store of previous response messages and the\n   subsystem that controls its message storage, retrieval, and deletion.\n   A cache stores cacheable responses in order to reduce the response\n   time and network bandwidth consumption on future, equivalent\n   requests.  Any client or server MAY employ a cache, though a cache\n   cannot be used by a server while it is acting as a tunnel.\n\n   The effect of a cache is that the request/response chain is shortened\n   if one of the participants along the chain has a cached response\n   applicable to that request.  The following illustrates the resulting\n   chain if B has a cached copy of an earlier response from O (via C)\n   for a request that has not been cached by UA or A.\n\n               &gt;             &gt;\n          UA =========== A =========== B - - - - - - C - - - - - - O\n                     &lt;             &lt;\n\n   A response is \"cacheable\" if a cache is allowed to store a copy of\n   the response message for use in answering subsequent requests.  Even\n   when a response is cacheable, there might be additional constraints\n   placed by the client or by the origin server on when that cached\n   response can be used for a particular request.  HTTP requirements for\n   cache behavior and cacheable responses are defined in <a href=\"https://tools.ietf.org/html/rfc7234#section-2\">Section 2 of\n   [RFC7234]</a>.\n\n   There is a wide variety of architectures and configurations of caches\n   deployed across the World Wide Web and inside large organizations.\n   These include national hierarchies of proxy caches to save\n   transoceanic bandwidth, collaborative systems that broadcast or\n   multicast cache entries, archives of pre-fetched cache entries for\n   use in off-line or high-latency environments, and so on.\n\n<h3 class=\"h3\" id=\"section-2.5\">2.5.  Conformance and Error Handling</h3>\n   This specification targets conformance criteria according to the role\n   of a participant in HTTP communication.  Hence, HTTP requirements are\n   placed on senders, recipients, clients, servers, user agents,\n   intermediaries, origin servers, proxies, gateways, or caches,\n   depending on what behavior is being constrained by the requirement.\n   Additional (social) requirements are placed on implementations,\n   resource owners, and protocol element registrations when they apply\n   beyond the scope of a single communication.\n\n   The verb \"generate\" is used instead of \"send\" where a requirement\n   differentiates between creating a protocol element and merely\n   forwarding a received element downstream.\n\n   An implementation is considered conformant if it complies with all of\n   the requirements associated with the roles it partakes in HTTP.\n\n   Conformance includes both the syntax and semantics of protocol\n   elements.  A sender MUST NOT generate protocol elements that convey a\n   meaning that is known by that sender to be false.  A sender MUST NOT\n   generate protocol elements that do not match the grammar defined by\n   the corresponding ABNF rules.  Within a given message, a sender MUST\n   NOT generate protocol elements or syntax alternatives that are only\n   allowed to be generated by participants in other roles (i.e., a role\n   that the sender does not have for that message).\n\n   When a received protocol element is parsed, the recipient MUST be\n   able to parse any value of reasonable length that is applicable to\n   the recipient's role and that matches the grammar defined by the\n   corresponding ABNF rules.  Note, however, that some received protocol\n   elements might not be parsed.  For example, an intermediary\n\n   forwarding a message might parse a header-field into generic\n   field-name and field-value components, but then forward the header\n   field without further parsing inside the field-value.\n\n   HTTP does not have specific length limitations for many of its\n   protocol elements because the lengths that might be appropriate will\n   vary widely, depending on the deployment context and purpose of the\n   implementation.  Hence, interoperability between senders and\n   recipients depends on shared expectations regarding what is a\n   reasonable length for each protocol element.  Furthermore, what is\n   commonly understood to be a reasonable length for some protocol\n   elements has changed over the course of the past two decades of HTTP\n   use and is expected to continue changing in the future.\n\n   At a minimum, a recipient MUST be able to parse and process protocol\n   element lengths that are at least as long as the values that it\n   generates for those same protocol elements in other messages.  For\n   example, an origin server that publishes very long URI references to\n   its own resources needs to be able to parse and process those same\n   references when received as a request target.\n\n   A recipient MUST interpret a received protocol element according to\n   the semantics defined for it by this specification, including\n   extensions to this specification, unless the recipient has determined\n   (through experience or configuration) that the sender incorrectly\n   implements what is implied by those semantics.  For example, an\n   origin server might disregard the contents of a received\n   Accept-Encoding header field if inspection of the User-Agent header\n   field indicates a specific implementation version that is known to\n   fail on receipt of certain content codings.\n\n   Unless noted otherwise, a recipient MAY attempt to recover a usable\n   protocol element from an invalid construct.  HTTP does not define\n   specific error handling mechanisms except when they have a direct\n   impact on security, since different applications of the protocol\n   require different error handling strategies.  For example, a Web\n   browser might wish to transparently recover from a response where the\n   Location header field doesn't parse according to the ABNF, whereas a\n   systems control client might consider any form of error recovery to\n   be dangerous.\n\n<h3 class=\"h3\" id=\"section-2.6\">2.6.  Protocol Versioning</h3>\n   HTTP uses a \"&lt;major&gt;.&lt;minor&gt;\" numbering scheme to indicate versions\n   of the protocol.  This specification defines version \"1.1\".  The\n   protocol version as a whole indicates the sender's conformance with\n   the set of requirements laid out in that version's corresponding\n   specification of HTTP.\n\n   The version of an HTTP message is indicated by an HTTP-version field\n   in the first line of the message.  HTTP-version is case-sensitive.\n\n     HTTP-version  = HTTP-name \"/\" DIGIT \".\" DIGIT\n     HTTP-name     = %x48.54.54.50 ; \"HTTP\", case-sensitive\n\n   The HTTP version number consists of two decimal digits separated by a\n   \".\" (period or decimal point).  The first digit (\"major version\")\n   indicates the HTTP messaging syntax, whereas the second digit (\"minor\n   version\") indicates the highest minor version within that major\n   version to which the sender is conformant and able to understand for\n   future communication.  The minor version advertises the sender's\n   communication capabilities even when the sender is only using a\n   backwards-compatible subset of the protocol, thereby letting the\n   recipient know that more advanced features can be used in response\n   (by servers) or in future requests (by clients).\n\n   When an HTTP/1.1 message is sent to an HTTP/1.0 recipient [<a href=\"https://tools.ietf.org/html/rfc1945\" title='\"Hypertext Transfer Protocol -- HTTP/1.0\"'>RFC1945</a>]\n   or a recipient whose version is unknown, the HTTP/1.1 message is\n   constructed such that it can be interpreted as a valid HTTP/1.0\n   message if all of the newer features are ignored.  This specification\n   places recipient-version requirements on some new features so that a\n   conformant sender will only use compatible features until it has\n   determined, through configuration or the receipt of a message, that\n   the recipient supports HTTP/1.1.\n\n   The interpretation of a header field does not change between minor\n   versions of the same major HTTP version, though the default behavior\n   of a recipient in the absence of such a field can change.  Unless\n   specified otherwise, header fields defined in HTTP/1.1 are defined\n   for all versions of HTTP/1.x.  In particular, the Host and Connection\n   header fields ought to be implemented by all HTTP/1.x implementations\n   whether or not they advertise conformance with HTTP/1.1.\n\n   New header fields can be introduced without changing the protocol\n   version if their defined semantics allow them to be safely ignored by\n   recipients that do not recognize them.  Header field extensibility is\n   discussed in <a href=\"#section-3.2.1\">Section 3.2.1</a>.\n\n   Intermediaries that process HTTP messages (i.e., all intermediaries\n   other than those acting as tunnels) MUST send their own HTTP-version\n   in forwarded messages.  In other words, they are not allowed to\n   blindly forward the first line of an HTTP message without ensuring\n   that the protocol version in that message matches a version to which\n   that intermediary is conformant for both the receiving and sending of\n   messages.  Forwarding an HTTP message without rewriting the\n\n   HTTP-version might result in communication errors when downstream\n   recipients use the message sender's version to determine what\n   features are safe to use for later communication with that sender.\n\n   A client SHOULD send a request version equal to the highest version\n   to which the client is conformant and whose major version is no\n   higher than the highest version supported by the server, if this is\n   known.  A client MUST NOT send a version to which it is not\n   conformant.\n\n   A client MAY send a lower request version if it is known that the\n   server incorrectly implements the HTTP specification, but only after\n   the client has attempted at least one normal request and determined\n   from the response status code or header fields (e.g., Server) that\n   the server improperly handles higher request versions.\n\n   A server SHOULD send a response version equal to the highest version\n   to which the server is conformant that has a major version less than\n   or equal to the one received in the request.  A server MUST NOT send\n   a version to which it is not conformant.  A server can send a 505\n   (HTTP Version Not Supported) response if it wishes, for any reason,\n   to refuse service of the client's major protocol version.\n\n   A server MAY send an HTTP/1.0 response to a request if it is known or\n   suspected that the client incorrectly implements the HTTP\n   specification and is incapable of correctly processing later version\n   responses, such as when a client fails to parse the version number\n   correctly or when an intermediary is known to blindly forward the\n   HTTP-version even when it doesn't conform to the given minor version\n   of the protocol.  Such protocol downgrades SHOULD NOT be performed\n   unless triggered by specific client attributes, such as when one or\n   more of the request header fields (e.g., User-Agent) uniquely match\n   the values sent by a client known to be in error.\n\n   The intention of HTTP's versioning design is that the major number\n   will only be incremented if an incompatible message syntax is\n   introduced, and that the minor number will only be incremented when\n   changes made to the protocol have the effect of adding to the message\n   semantics or implying additional capabilities of the sender.\n   However, the minor version was not incremented for the changes\n   introduced between [<a href=\"https://tools.ietf.org/html/rfc2068\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>RFC2068</a>] and [<a href=\"https://tools.ietf.org/html/rfc2616\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>RFC2616</a>], and this revision has\n   specifically avoided any such changes to the protocol.\n\n   When an HTTP message is received with a major version number that the\n   recipient implements, but a higher minor version number than what the\n   recipient implements, the recipient SHOULD process the message as if\n   it were in the highest minor version within that major version to\n   which the recipient is conformant.  A recipient can assume that a\n\n   message with a higher minor version, when sent to a recipient that\n   has not yet indicated support for that higher version, is\n   sufficiently backwards-compatible to be safely processed by any\n   implementation of the same major version.\n\n<h3 class=\"h3\" id=\"section-2.7\">2.7.  Uniform Resource Identifiers</h3>\n   Uniform Resource Identifiers (URIs) [<a href=\"https://tools.ietf.org/html/rfc3986\" title='\"Uniform Resource Identifier (URI): Generic Syntax\"'>RFC3986</a>] are used throughout\n   HTTP as the means for identifying resources (<a href=\"https://tools.ietf.org/html/rfc7231#section-2\">Section 2 of [RFC7231]</a>).\n   URI references are used to target requests, indicate redirects, and\n   define relationships.\n\n   The definitions of \"URI-reference\", \"absolute-URI\", \"relative-part\",\n   \"scheme\", \"authority\", \"port\", \"host\", \"path-abempty\", \"segment\",\n   \"query\", and \"fragment\" are adopted from the URI generic syntax.  An\n   \"absolute-path\" rule is defined for protocol elements that can\n   contain a non-empty path component.  (This rule differs slightly from\n   the path-abempty rule of <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>, which allows for an empty path to\n   be used in references, and path-absolute rule, which does not allow\n   paths that begin with \"//\".)  A \"partial-URI\" rule is defined for\n   protocol elements that can contain a relative URI but not a fragment\n   component.\n\n     URI-reference = &lt;URI-reference, see <a href=\"https://tools.ietf.org/html/rfc3986#section-4.1\">[RFC3986], Section 4.1</a>&gt;\n     absolute-URI  = &lt;absolute-URI, see <a href=\"https://tools.ietf.org/html/rfc3986#section-4.3\">[RFC3986], Section 4.3</a>&gt;\n     relative-part = &lt;relative-part, see <a href=\"https://tools.ietf.org/html/rfc3986#section-4.2\">[RFC3986], Section 4.2</a>&gt;\n     scheme        = &lt;scheme, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.1\">[RFC3986], Section 3.1</a>&gt;\n     authority     = &lt;authority, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2\">[RFC3986], Section 3.2</a>&gt;\n     uri-host      = &lt;host, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">[RFC3986], Section 3.2.2</a>&gt;\n     port          = &lt;port, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.3\">[RFC3986], Section 3.2.3</a>&gt;\n     path-abempty  = &lt;path-abempty, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.3\">[RFC3986], Section 3.3</a>&gt;\n     segment       = &lt;segment, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.3\">[RFC3986], Section 3.3</a>&gt;\n     query         = &lt;query, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.4\">[RFC3986], Section 3.4</a>&gt;\n     fragment      = &lt;fragment, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.5\">[RFC3986], Section 3.5</a>&gt;\n\n     absolute-path = 1*( \"/\" segment )\n     partial-URI   = relative-part [ \"?\" query ]\n\n   Each protocol element in HTTP that allows a URI reference will\n   indicate in its ABNF production whether the element allows any form\n   of reference (URI-reference), only a URI in absolute form\n   (absolute-URI), only the path and optional query components, or some\n   combination of the above.  Unless otherwise indicated, URI references\n   are parsed relative to the effective request URI (<a href=\"#section-5.5\">Section 5.5</a>).\n\n<h4 class=\"h4\" id=\"section-2.7.1\">2.7.1.  http URI Scheme</h4>\n   The \"http\" URI scheme is hereby defined for the purpose of minting\n   identifiers according to their association with the hierarchical\n   namespace governed by a potential HTTP origin server listening for\n   TCP ([<a href=\"https://tools.ietf.org/html/rfc0793\" title='\"Transmission Control Protocol\"'>RFC0793</a>]) connections on a given port.\n\n     http-URI = \"http:\" \"//\" authority path-abempty [ \"?\" query ]\n                [ \"#\" fragment ]\n\n   The origin server for an \"http\" URI is identified by the authority\n   component, which includes a host identifier and optional TCP port\n   (<a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">[RFC3986], Section 3.2.2</a>).  The hierarchical path component and\n   optional query component serve as an identifier for a potential\n   target resource within that origin server's name space.  The optional\n   fragment component allows for indirect identification of a secondary\n   resource, independent of the URI scheme, as defined in <a href=\"https://tools.ietf.org/html/rfc3986#section-3.5\">Section 3.5 of\n   [RFC3986]</a>.\n\n   A sender MUST NOT generate an \"http\" URI with an empty host\n   identifier.  A recipient that processes such a URI reference MUST\n   reject it as invalid.\n\n   If the host identifier is provided as an IP address, the origin\n   server is the listener (if any) on the indicated TCP port at that IP\n   address.  If host is a registered name, the registered name is an\n   indirect identifier for use with a name resolution service, such as\n   DNS, to find an address for that origin server.  If the port\n   subcomponent is empty or not given, TCP port 80 (the reserved port\n   for WWW services) is the default.\n\n   Note that the presence of a URI with a given authority component does\n   not imply that there is always an HTTP server listening for\n   connections on that host and port.  Anyone can mint a URI.  What the\n   authority component determines is who has the right to respond\n   authoritatively to requests that target the identified resource.  The\n   delegated nature of registered names and IP addresses creates a\n   federated namespace, based on control over the indicated host and\n   port, whether or not an HTTP server is present.  See <a href=\"#section-9.1\">Section 9.1</a> for\n   security considerations related to establishing authority.\n\n   When an \"http\" URI is used within a context that calls for access to\n   the indicated resource, a client MAY attempt access by resolving the\n   host to an IP address, establishing a TCP connection to that address\n   on the indicated port, and sending an HTTP request message\n   (<a href=\"#section-3\">Section 3</a>) containing the URI's identifying data (<a href=\"#section-5\">Section 5</a>) to the\n   server.  If the server responds to that request with a non-interim\n\n   HTTP response message, as described in <a href=\"https://tools.ietf.org/html/rfc7231#section-6\">Section 6 of [RFC7231]</a>, then\n   that response is considered an authoritative answer to the client's\n   request.\n\n   Although HTTP is independent of the transport protocol, the \"http\"\n   scheme is specific to TCP-based services because the name delegation\n   process depends on TCP for establishing authority.  An HTTP service\n   based on some other underlying connection protocol would presumably\n   be identified using a different URI scheme, just as the \"https\"\n   scheme (below) is used for resources that require an end-to-end\n   secured connection.  Other protocols might also be used to provide\n   access to \"http\" identified resources -- it is only the authoritative\n   interface that is specific to TCP.\n\n   The URI generic syntax for authority also includes a deprecated\n   userinfo subcomponent (<a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.1\">[RFC3986], Section 3.2.1</a>) for including user\n   authentication information in the URI.  Some implementations make use\n   of the userinfo component for internal configuration of\n   authentication information, such as within command invocation\n   options, configuration files, or bookmark lists, even though such\n   usage might expose a user identifier or password.  A sender MUST NOT\n   generate the userinfo subcomponent (and its \"@\" delimiter) when an\n   \"http\" URI reference is generated within a message as a request\n   target or header field value.  Before making use of an \"http\" URI\n   reference received from an untrusted source, a recipient SHOULD parse\n   for userinfo and treat its presence as an error; it is likely being\n   used to obscure the authority for the sake of phishing attacks.\n\n<h4 class=\"h4\" id=\"section-2.7.2\">2.7.2.  https URI Scheme</h4>\n   The \"https\" URI scheme is hereby defined for the purpose of minting\n   identifiers according to their association with the hierarchical\n   namespace governed by a potential HTTP origin server listening to a\n   given TCP port for TLS-secured connections ([<a href=\"https://tools.ietf.org/html/rfc5246\" title='\"The Transport Layer Security (TLS) Protocol Version 1.2\"'>RFC5246</a>]).\n\n   All of the requirements listed above for the \"http\" scheme are also\n   requirements for the \"https\" scheme, except that TCP port 443 is the\n   default if the port subcomponent is empty or not given, and the user\n   agent MUST ensure that its connection to the origin server is secured\n   through the use of strong encryption, end-to-end, prior to sending\n   the first HTTP request.\n\n     https-URI = \"https:\" \"//\" authority path-abempty [ \"?\" query ]\n                 [ \"#\" fragment ]\n\n   Note that the \"https\" URI scheme depends on both TLS and TCP for\n   establishing authority.  Resources made available via the \"https\"\n   scheme have no shared identity with the \"http\" scheme even if their\n\n   resource identifiers indicate the same authority (the same host\n   listening to the same TCP port).  They are distinct namespaces and\n   are considered to be distinct origin servers.  However, an extension\n   to HTTP that is defined to apply to entire host domains, such as the\n   Cookie protocol [<a href=\"https://tools.ietf.org/html/rfc6265\" title='\"HTTP State Management Mechanism\"'>RFC6265</a>], can allow information set by one service\n   to impact communication with other services within a matching group\n   of host domains.\n\n   The process for authoritative access to an \"https\" identified\n   resource is defined in [<a href=\"https://tools.ietf.org/html/rfc2818\" title='\"HTTP Over TLS\"'>RFC2818</a>].\n\n<h4 class=\"h4\" id=\"section-2.7.3\">2.7.3.  http and https URI Normalization and Comparison</h4>\n   Since the \"http\" and \"https\" schemes conform to the URI generic\n   syntax, such URIs are normalized and compared according to the\n   algorithm defined in <a href=\"https://tools.ietf.org/html/rfc3986#section-6\">Section 6 of [RFC3986]</a>, using the defaults\n   described above for each scheme.\n\n   If the port is equal to the default port for a scheme, the normal\n   form is to omit the port subcomponent.  When not being used in\n   absolute form as the request target of an OPTIONS request, an empty\n   path component is equivalent to an absolute path of \"/\", so the\n   normal form is to provide a path of \"/\" instead.  The scheme and host\n   are case-insensitive and normally provided in lowercase; all other\n   components are compared in a case-sensitive manner.  Characters other\n   than those in the \"reserved\" set are equivalent to their\n   percent-encoded octets: the normal form is to not encode them (see\n   Sections <a href=\"#section-2.1\">2.1</a> and <a href=\"#section-2.2\">2.2</a> of [<a href=\"https://tools.ietf.org/html/rfc3986\" title='\"Uniform Resource Identifier (URI): Generic Syntax\"'>RFC3986</a>]).\n\n   For example, the following three URIs are equivalent:\n\n      <a href=\"http://example.com:80/~smith/home.html\">http://example.com:80/~smith/home.html</a>\n      http://EXAMPLE.com/%7Esmith/home.html\n      <a href=\"http://EXAMPLE.com/%7esmith/home.html\">http://EXAMPLE.com:/%7esmith/home.html</a>\n\n<h2 class=\"h2\" id=\"section-3\">3.  Message Format</h2>\n   All HTTP/1.1 messages consist of a start-line followed by a sequence\n   of octets in a format similar to the Internet Message Format\n   [<a href=\"https://tools.ietf.org/html/rfc5322\" title='\"Internet Message Format\"'>RFC5322</a>]: zero or more header fields (collectively referred to as\n   the \"headers\" or the \"header section\"), an empty line indicating the\n   end of the header section, and an optional message body.\n\n     HTTP-message   = start-line\n                      *( header-field CRLF )\n                      CRLF\n                      [ message-body ]\n\n   The normal procedure for parsing an HTTP message is to read the\n   start-line into a structure, read each header field into a hash table\n   by field name until the empty line, and then use the parsed data to\n   determine if a message body is expected.  If a message body has been\n   indicated, then it is read as a stream until an amount of octets\n   equal to the message body length is read or the connection is closed.\n\n   A recipient MUST parse an HTTP message as a sequence of octets in an\n   encoding that is a superset of US-ASCII [<a href=\"#ref-USASCII\" title='\"Coded Character Set -- 7-bit American Standard Code for Information Interchange\"'>USASCII</a>].  Parsing an HTTP\n   message as a stream of Unicode characters, without regard for the\n   specific encoding, creates security vulnerabilities due to the\n   varying ways that string processing libraries handle invalid\n   multibyte character sequences that contain the octet LF (%x0A).\n   String-based parsers can only be safely used within protocol elements\n   after the element has been extracted from the message, such as within\n   a header field-value after message parsing has delineated the\n   individual fields.\n\n   An HTTP message can be parsed as a stream for incremental processing\n   or forwarding downstream.  However, recipients cannot rely on\n   incremental delivery of partial messages, since some implementations\n   will buffer or delay message forwarding for the sake of network\n   efficiency, security checks, or payload transformations.\n\n   A sender MUST NOT send whitespace between the start-line and the\n   first header field.  A recipient that receives whitespace between the\n   start-line and the first header field MUST either reject the message\n   as invalid or consume each whitespace-preceded line without further\n   processing of it (i.e., ignore the entire line, along with any\n   subsequent lines preceded by whitespace, until a properly formed\n   header field is received or the header section is terminated).\n\n   The presence of such whitespace in a request might be an attempt to\n   trick a server into ignoring that field or processing the line after\n   it as a new request, either of which might result in a security\n   vulnerability if other implementations within the request chain\n   interpret the same message differently.  Likewise, the presence of\n   such whitespace in a response might be ignored by some clients or\n   cause others to cease parsing.\n\n<h3 class=\"h3\" id=\"section-3.1\">3.1.  Start Line</h3>\n   An HTTP message can be either a request from client to server or a\n   response from server to client.  Syntactically, the two types of\n   message differ only in the start-line, which is either a request-line\n   (for requests) or a status-line (for responses), and in the algorithm\n   for determining the length of the message body (<a href=\"#section-3.3\">Section 3.3</a>).\n\n   In theory, a client could receive requests and a server could receive\n   responses, distinguishing them by their different start-line formats,\n   but, in practice, servers are implemented to only expect a request (a\n   response is interpreted as an unknown or invalid request method) and\n   clients are implemented to only expect a response.\n\n     start-line     = request-line / status-line\n\n<h4 class=\"h4\" id=\"section-3.1.1\">3.1.1.  Request Line</h4>\n   A request-line begins with a method token, followed by a single space\n   (SP), the request-target, another single space (SP), the protocol\n   version, and ends with CRLF.\n\n     request-line   = method SP request-target SP HTTP-version CRLF\n\n   The method token indicates the request method to be performed on the\n   target resource.  The request method is case-sensitive.\n\n     method         = token\n\n   The request methods defined by this specification can be found in\n   <a href=\"https://tools.ietf.org/html/rfc7231#section-4\">Section 4 of [RFC7231]</a>, along with information regarding the HTTP\n   method registry and considerations for defining new methods.\n\n   The request-target identifies the target resource upon which to apply\n   the request, as defined in <a href=\"#section-5.3\">Section 5.3</a>.\n\n   Recipients typically parse the request-line into its component parts\n   by splitting on whitespace (see <a href=\"#section-3.5\">Section 3.5</a>), since no whitespace is\n   allowed in the three components.  Unfortunately, some user agents\n   fail to properly encode or exclude whitespace found in hypertext\n   references, resulting in those disallowed characters being sent in a\n   request-target.\n\n   Recipients of an invalid request-line SHOULD respond with either a\n   400 (Bad Request) error or a 301 (Moved Permanently) redirect with\n   the request-target properly encoded.  A recipient SHOULD NOT attempt\n   to autocorrect and then process the request without a redirect, since\n   the invalid request-line might be deliberately crafted to bypass\n   security filters along the request chain.\n\n   HTTP does not place a predefined limit on the length of a\n   request-line, as described in <a href=\"#section-2.5\">Section 2.5</a>.  A server that receives a\n   method longer than any that it implements SHOULD respond with a 501\n   (Not Implemented) status code.  A server that receives a\n\n   request-target longer than any URI it wishes to parse MUST respond\n   with a 414 (URI Too Long) status code (see <a href=\"https://tools.ietf.org/html/rfc7231#section-6.5.12\">Section 6.5.12 of\n   [RFC7231]</a>).\n\n   Various ad hoc limitations on request-line length are found in\n   practice.  It is RECOMMENDED that all HTTP senders and recipients\n   support, at a minimum, request-line lengths of 8000 octets.\n\n<h4 class=\"h4\" id=\"section-3.1.2\">3.1.2.  Status Line</h4>\n   The first line of a response message is the status-line, consisting\n   of the protocol version, a space (SP), the status code, another\n   space, a possibly empty textual phrase describing the status code,\n   and ending with CRLF.\n\n     status-line = HTTP-version SP status-code SP reason-phrase CRLF\n\n   The status-code element is a 3-digit integer code describing the\n   result of the server's attempt to understand and satisfy the client's\n   corresponding request.  The rest of the response message is to be\n   interpreted in light of the semantics defined for that status code.\n   See <a href=\"https://tools.ietf.org/html/rfc7231#section-6\">Section 6 of [RFC7231]</a> for information about the semantics of\n   status codes, including the classes of status code (indicated by the\n   first digit), the status codes defined by this specification,\n   considerations for the definition of new status codes, and the IANA\n   registry.\n\n     status-code    = 3DIGIT\n\n   The reason-phrase element exists for the sole purpose of providing a\n   textual description associated with the numeric status code, mostly\n   out of deference to earlier Internet application protocols that were\n   more frequently used with interactive text clients.  A client SHOULD\n   ignore the reason-phrase content.\n\n     reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n\n<h3 class=\"h3\" id=\"section-3.2\">3.2.  Header Fields</h3>\n   Each header field consists of a case-insensitive field name followed\n   by a colon (\":\"), optional leading whitespace, the field value, and\n   optional trailing whitespace.\n\n     header-field   = field-name \":\" OWS field-value OWS\n\n     field-name     = token\n     field-value    = *( field-content / obs-fold )\n     field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n     field-vchar    = VCHAR / obs-text\n\n     obs-fold       = CRLF 1*( SP / HTAB )\n                    ; obsolete line folding\n                    ; see <a href=\"#section-3.2.4\">Section 3.2.4</a>\n\n   The field-name token labels the corresponding field-value as having\n   the semantics defined by that header field.  For example, the Date\n   header field is defined in <a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.1.2\">Section 7.1.1.2 of [RFC7231]</a> as containing\n   the origination timestamp for the message in which it appears.\n\n<h4 class=\"h4\" id=\"section-3.2.1\">3.2.1.  Field Extensibility</h4>\n   Header fields are fully extensible: there is no limit on the\n   introduction of new field names, each presumably defining new\n   semantics, nor on the number of header fields used in a given\n   message.  Existing fields are defined in each part of this\n   specification and in many other specifications outside this document\n   set.\n\n   New header fields can be defined such that, when they are understood\n   by a recipient, they might override or enhance the interpretation of\n   previously defined header fields, define preconditions on request\n   evaluation, or refine the meaning of responses.\n\n   A proxy MUST forward unrecognized header fields unless the field-name\n   is listed in the Connection header field (<a href=\"#section-6.1\">Section 6.1</a>) or the proxy\n   is specifically configured to block, or otherwise transform, such\n   fields.  Other recipients SHOULD ignore unrecognized header fields.\n   These requirements allow HTTP's functionality to be enhanced without\n   requiring prior update of deployed intermediaries.\n\n   All defined header fields ought to be registered with IANA in the\n   \"Message Headers\" registry, as described in <a href=\"https://tools.ietf.org/html/rfc7231#section-8.3\">Section 8.3 of [RFC7231]</a>.\n\n<h4 class=\"h4\" id=\"section-3.2.2\">3.2.2.  Field Order</h4>\n   The order in which header fields with differing field names are\n   received is not significant.  However, it is good practice to send\n   header fields that contain control data first, such as Host on\n   requests and Date on responses, so that implementations can decide\n   when not to handle a message as early as possible.  A server MUST NOT\n   apply a request to the target resource until the entire request\n\n   header section is received, since later header fields might include\n   conditionals, authentication credentials, or deliberately misleading\n   duplicate header fields that would impact request processing.\n\n   A sender MUST NOT generate multiple header fields with the same field\n   name in a message unless either the entire field value for that\n   header field is defined as a comma-separated list [i.e., #(values)]\n   or the header field is a well-known exception (as noted below).\n\n   A recipient MAY combine multiple header fields with the same field\n   name into one \"field-name: field-value\" pair, without changing the\n   semantics of the message, by appending each subsequent field value to\n   the combined field value in order, separated by a comma.  The order\n   in which header fields with the same field name are received is\n   therefore significant to the interpretation of the combined field\n   value; a proxy MUST NOT change the order of these field values when\n   forwarding a message.\n\n      Note: In practice, the \"Set-Cookie\" header field ([<a href=\"https://tools.ietf.org/html/rfc6265\" title='\"HTTP State Management Mechanism\"'>RFC6265</a>]) often\n      appears multiple times in a response message and does not use the\n      list syntax, violating the above requirements on multiple header\n      fields with the same name.  Since it cannot be combined into a\n      single field-value, recipients ought to handle \"Set-Cookie\" as a\n      special case while processing header fields.  (See <a href=\"#appendix-A.2.3\">Appendix A.2.3</a>\n      of [<a href=\"#ref-Kri2001\" title='\"HTTP Cookies: Standards, Privacy, and Politics\"'>Kri2001</a>] for details.)\n\n<h4 class=\"h4\" id=\"section-3.2.3\">3.2.3.  Whitespace</h4>\n   This specification uses three rules to denote the use of linear\n   whitespace: OWS (optional whitespace), RWS (required whitespace), and\n   BWS (\"bad\" whitespace).\n\n   The OWS rule is used where zero or more linear whitespace octets\n   might appear.  For protocol elements where optional whitespace is\n   preferred to improve readability, a sender SHOULD generate the\n   optional whitespace as a single SP; otherwise, a sender SHOULD NOT\n   generate optional whitespace except as needed to white out invalid or\n   unwanted protocol elements during in-place message filtering.\n\n   The RWS rule is used when at least one linear whitespace octet is\n   required to separate field tokens.  A sender SHOULD generate RWS as a\n   single SP.\n\n   The BWS rule is used where the grammar allows optional whitespace\n   only for historical reasons.  A sender MUST NOT generate BWS in\n   messages.  A recipient MUST parse for such bad whitespace and remove\n   it before interpreting the protocol element.\n\n     OWS            = *( SP / HTAB )\n                    ; optional whitespace\n     RWS            = 1*( SP / HTAB )\n                    ; required whitespace\n     BWS            = OWS\n                    ; \"bad\" whitespace\n\n<h4 class=\"h4\" id=\"section-3.2.4\">3.2.4.  Field Parsing</h4>\n   Messages are parsed using a generic algorithm, independent of the\n   individual header field names.  The contents within a given field\n   value are not parsed until a later stage of message interpretation\n   (usually after the message's entire header section has been\n   processed).  Consequently, this specification does not use ABNF rules\n   to define each \"Field-Name: Field Value\" pair, as was done in\n   previous editions.  Instead, this specification uses ABNF rules that\n   are named according to each registered field name, wherein the rule\n   defines the valid grammar for that field's corresponding field values\n   (i.e., after the field-value has been extracted from the header\n   section by a generic field parser).\n\n   No whitespace is allowed between the header field-name and colon.  In\n   the past, differences in the handling of such whitespace have led to\n   security vulnerabilities in request routing and response handling.  A\n   server MUST reject any received request message that contains\n   whitespace between a header field-name and colon with a response code\n   of 400 (Bad Request).  A proxy MUST remove any such whitespace from a\n   response message before forwarding the message downstream.\n\n   A field value might be preceded and/or followed by optional\n   whitespace (OWS); a single SP preceding the field-value is preferred\n   for consistent readability by humans.  The field value does not\n   include any leading or trailing whitespace: OWS occurring before the\n   first non-whitespace octet of the field value or after the last\n   non-whitespace octet of the field value ought to be excluded by\n   parsers when extracting the field value from a header field.\n\n   Historically, HTTP header field values could be extended over\n   multiple lines by preceding each extra line with at least one space\n   or horizontal tab (obs-fold).  This specification deprecates such\n   line folding except within the message/http media type\n   (<a href=\"#section-8.3.1\">Section 8.3.1</a>).  A sender MUST NOT generate a message that includes\n   line folding (i.e., that has any field-value that contains a match to\n   the obs-fold rule) unless the message is intended for packaging\n   within the message/http media type.\n\n   A server that receives an obs-fold in a request message that is not\n   within a message/http container MUST either reject the message by\n   sending a 400 (Bad Request), preferably with a representation\n   explaining that obsolete line folding is unacceptable, or replace\n   each received obs-fold with one or more SP octets prior to\n   interpreting the field value or forwarding the message downstream.\n\n   A proxy or gateway that receives an obs-fold in a response message\n   that is not within a message/http container MUST either discard the\n   message and replace it with a 502 (Bad Gateway) response, preferably\n   with a representation explaining that unacceptable line folding was\n   received, or replace each received obs-fold with one or more SP\n   octets prior to interpreting the field value or forwarding the\n   message downstream.\n\n   A user agent that receives an obs-fold in a response message that is\n   not within a message/http container MUST replace each received\n   obs-fold with one or more SP octets prior to interpreting the field\n   value.\n\n   Historically, HTTP has allowed field content with text in the\n   ISO-8859-1 charset [<a href=\"#ref-ISO-8859-1\" title='\"Information technology -- 8-bit single-byte coded graphic character sets -- Part 1: Latin alphabet No. 1\"'>ISO-8859-1</a>], supporting other charsets only\n   through use of [<a href=\"https://tools.ietf.org/html/rfc2047\" title='\"MIME (Multipurpose Internet Mail Extensions) Part Three: Message Header Extensions for Non-ASCII Text\"'>RFC2047</a>] encoding.  In practice, most HTTP header\n   field values use only a subset of the US-ASCII charset [<a href=\"#ref-USASCII\" title='\"Coded Character Set -- 7-bit American Standard Code for Information Interchange\"'>USASCII</a>].\n   Newly defined header fields SHOULD limit their field values to\n   US-ASCII octets.  A recipient SHOULD treat other octets in field\n   content (obs-text) as opaque data.\n\n<h4 class=\"h4\" id=\"section-3.2.5\">3.2.5.  Field Limits</h4>\n   HTTP does not place a predefined limit on the length of each header\n   field or on the length of the header section as a whole, as described\n   in <a href=\"#section-2.5\">Section 2.5</a>.  Various ad hoc limitations on individual header\n   field length are found in practice, often depending on the specific\n   field semantics.\n\n   A server that receives a request header field, or set of fields,\n   larger than it wishes to process MUST respond with an appropriate 4xx\n   (Client Error) status code.  Ignoring such header fields would\n   increase the server's vulnerability to request smuggling attacks\n   (<a href=\"#section-9.5\">Section 9.5</a>).\n\n   A client MAY discard or truncate received header fields that are\n   larger than the client wishes to process if the field semantics are\n   such that the dropped value(s) can be safely ignored without changing\n   the message framing or response semantics.\n\n<h4 class=\"h4\" id=\"section-3.2.6\">3.2.6.  Field Value Components</h4>\n   Most HTTP header field values are defined using common syntax\n   components (token, quoted-string, and comment) separated by\n   whitespace or specific delimiting characters.  Delimiters are chosen\n   from the set of US-ASCII visual characters not allowed in a token\n   (DQUOTE and \"(),/:;&lt;=&gt;?@[\\]{}\").\n\n     token          = 1*tchar\n\n     tchar          = \"!\" / \"#\" / \"$\" / \"%\" / \"&amp;\" / \"'\" / \"*\"\n                    / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n                    / DIGIT / ALPHA\n                    ; any VCHAR, except delimiters\n\n   A string of text is parsed as a single value if it is quoted using\n   double-quote marks.\n\n     quoted-string  = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n     qdtext         = HTAB / SP /%x21 / %x23-5B / %x5D-7E / obs-text\n     obs-text       = %x80-FF\n\n   Comments can be included in some HTTP header fields by surrounding\n   the comment text with parentheses.  Comments are only allowed in\n   fields containing \"comment\" as part of their field value definition.\n\n     comment        = \"(\" *( ctext / quoted-pair / comment ) \")\"\n     ctext          = HTAB / SP / %x21-27 / %x2A-5B / %x5D-7E / obs-text\n\n   The backslash octet (\"\\\") can be used as a single-octet quoting\n   mechanism within quoted-string and comment constructs.  Recipients\n   that process the value of a quoted-string MUST handle a quoted-pair\n   as if it were replaced by the octet following the backslash.\n\n     quoted-pair    = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n\n   A sender SHOULD NOT generate a quoted-pair in a quoted-string except\n   where necessary to quote DQUOTE and backslash octets occurring within\n   that string.  A sender SHOULD NOT generate a quoted-pair in a comment\n   except where necessary to quote parentheses [\"(\" and \")\"] and\n   backslash octets occurring within that comment.\n\n<h3 class=\"h3\" id=\"section-3.3\">3.3.  Message Body</h3>\n   The message body (if any) of an HTTP message is used to carry the\n   payload body of that request or response.  The message body is\n   identical to the payload body unless a transfer coding has been\n   applied, as described in <a href=\"#section-3.3.1\">Section 3.3.1</a>.\n\n     message-body = *OCTET\n\n   The rules for when a message body is allowed in a message differ for\n   requests and responses.\n\n   The presence of a message body in a request is signaled by a\n   Content-Length or Transfer-Encoding header field.  Request message\n   framing is independent of method semantics, even if the method does\n   not define any use for a message body.\n\n   The presence of a message body in a response depends on both the\n   request method to which it is responding and the response status code\n   (<a href=\"#section-3.1.2\">Section 3.1.2</a>).  Responses to the HEAD request method (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.2\">Section 4.3.2\n   of [RFC7231]</a>) never include a message body because the associated\n   response header fields (e.g., Transfer-Encoding, Content-Length,\n   etc.), if present, indicate only what their values would have been if\n   the request method had been GET (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\">Section 4.3.1 of [RFC7231]</a>). 2xx\n   (Successful) responses to a CONNECT request method (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.6\">Section 4.3.6 of\n   [RFC7231]</a>) switch to tunnel mode instead of having a message body.\n   All 1xx (Informational), 204 (No Content), and 304 (Not Modified)\n   responses do not include a message body.  All other responses do\n   include a message body, although the body might be of zero length.\n\n<h4 class=\"h4\" id=\"section-3.3.1\">3.3.1.  Transfer-Encoding</h4>\n   The Transfer-Encoding header field lists the transfer coding names\n   corresponding to the sequence of transfer codings that have been (or\n   will be) applied to the payload body in order to form the message\n   body.  Transfer codings are defined in <a href=\"#section-4\">Section 4</a>.\n\n     Transfer-Encoding = 1#transfer-coding\n\n   Transfer-Encoding is analogous to the Content-Transfer-Encoding field\n   of MIME, which was designed to enable safe transport of binary data\n   over a 7-bit transport service (<a href=\"https://tools.ietf.org/html/rfc2045#section-6\">[RFC2045], Section 6</a>).  However, safe\n   transport has a different focus for an 8bit-clean transfer protocol.\n   In HTTP's case, Transfer-Encoding is primarily intended to accurately\n   delimit a dynamically generated payload and to distinguish payload\n   encodings that are only applied for transport efficiency or security\n   from those that are characteristics of the selected resource.\n\n   A recipient MUST be able to parse the chunked transfer coding\n   (<a href=\"#section-4.1\">Section 4.1</a>) because it plays a crucial role in framing messages\n   when the payload body size is not known in advance.  A sender MUST\n   NOT apply chunked more than once to a message body (i.e., chunking an\n   already chunked message is not allowed).  If any transfer coding\n   other than chunked is applied to a request payload body, the sender\n   MUST apply chunked as the final transfer coding to ensure that the\n   message is properly framed.  If any transfer coding other than\n   chunked is applied to a response payload body, the sender MUST either\n   apply chunked as the final transfer coding or terminate the message\n   by closing the connection.\n\n   For example,\n\n     Transfer-Encoding: gzip, chunked\n\n   indicates that the payload body has been compressed using the gzip\n   coding and then chunked using the chunked coding while forming the\n   message body.\n\n   Unlike Content-Encoding (<a href=\"https://tools.ietf.org/html/rfc7231#section-3.1.2.1\">Section 3.1.2.1 of [RFC7231]</a>),\n   Transfer-Encoding is a property of the message, not of the\n   representation, and any recipient along the request/response chain\n   MAY decode the received transfer coding(s) or apply additional\n   transfer coding(s) to the message body, assuming that corresponding\n   changes are made to the Transfer-Encoding field-value.  Additional\n   information about the encoding parameters can be provided by other\n   header fields not defined by this specification.\n\n   Transfer-Encoding MAY be sent in a response to a HEAD request or in a\n   304 (Not Modified) response (<a href=\"https://tools.ietf.org/html/rfc7232#section-4.1\">Section 4.1 of [RFC7232]</a>) to a GET\n   request, neither of which includes a message body, to indicate that\n   the origin server would have applied a transfer coding to the message\n   body if the request had been an unconditional GET.  This indication\n   is not required, however, because any recipient on the response chain\n   (including the origin server) can remove transfer codings when they\n   are not needed.\n\n   A server MUST NOT send a Transfer-Encoding header field in any\n   response with a status code of 1xx (Informational) or 204 (No\n   Content).  A server MUST NOT send a Transfer-Encoding header field in\n   any 2xx (Successful) response to a CONNECT request (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.6\">Section 4.3.6 of\n   [RFC7231]</a>).\n\n   Transfer-Encoding was added in HTTP/1.1.  It is generally assumed\n   that implementations advertising only HTTP/1.0 support will not\n   understand how to process a transfer-encoded payload.  A client MUST\n   NOT send a request containing Transfer-Encoding unless it knows the\n\n   server will handle HTTP/1.1 (or later) requests; such knowledge might\n   be in the form of specific user configuration or by remembering the\n   version of a prior received response.  A server MUST NOT send a\n   response containing Transfer-Encoding unless the corresponding\n   request indicates HTTP/1.1 (or later).\n\n   A server that receives a request message with a transfer coding it\n   does not understand SHOULD respond with 501 (Not Implemented).\n\n<h4 class=\"h4\" id=\"section-3.3.2\">3.3.2.  Content-Length</h4>\n   When a message does not have a Transfer-Encoding header field, a\n   Content-Length header field can provide the anticipated size, as a\n   decimal number of octets, for a potential payload body.  For messages\n   that do include a payload body, the Content-Length field-value\n   provides the framing information necessary for determining where the\n   body (and message) ends.  For messages that do not include a payload\n   body, the Content-Length indicates the size of the selected\n   representation (<a href=\"https://tools.ietf.org/html/rfc7231#section-3\">Section 3 of [RFC7231]</a>).\n\n     Content-Length = 1*DIGIT\n\n   An example is\n\n     Content-Length: 3495\n\n   A sender MUST NOT send a Content-Length header field in any message\n   that contains a Transfer-Encoding header field.\n\n   A user agent SHOULD send a Content-Length in a request message when\n   no Transfer-Encoding is sent and the request method defines a meaning\n   for an enclosed payload body.  For example, a Content-Length header\n   field is normally sent in a POST request even when the value is 0\n   (indicating an empty payload body).  A user agent SHOULD NOT send a\n   Content-Length header field when the request message does not contain\n   a payload body and the method semantics do not anticipate such a\n   body.\n\n   A server MAY send a Content-Length header field in a response to a\n   HEAD request (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.2\">Section 4.3.2 of [RFC7231]</a>); a server MUST NOT send\n   Content-Length in such a response unless its field-value equals the\n   decimal number of octets that would have been sent in the payload\n   body of a response if the same request had used the GET method.\n\n   A server MAY send a Content-Length header field in a 304 (Not\n   Modified) response to a conditional GET request (<a href=\"https://tools.ietf.org/html/rfc7232#section-4.1\">Section 4.1 of\n   [RFC7232]</a>); a server MUST NOT send Content-Length in such a response\n\n   unless its field-value equals the decimal number of octets that would\n   have been sent in the payload body of a 200 (OK) response to the same\n   request.\n\n   A server MUST NOT send a Content-Length header field in any response\n   with a status code of 1xx (Informational) or 204 (No Content).  A\n   server MUST NOT send a Content-Length header field in any 2xx\n   (Successful) response to a CONNECT request (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.6\">Section 4.3.6 of\n   [RFC7231]</a>).\n\n   Aside from the cases defined above, in the absence of\n   Transfer-Encoding, an origin server SHOULD send a Content-Length\n   header field when the payload body size is known prior to sending the\n   complete header section.  This will allow downstream recipients to\n   measure transfer progress, know when a received message is complete,\n   and potentially reuse the connection for additional requests.\n\n   Any Content-Length field value greater than or equal to zero is\n   valid.  Since there is no predefined limit to the length of a\n   payload, a recipient MUST anticipate potentially large decimal\n   numerals and prevent parsing errors due to integer conversion\n   overflows (<a href=\"#section-9.3\">Section 9.3</a>).\n\n   If a message is received that has multiple Content-Length header\n   fields with field-values consisting of the same decimal value, or a\n   single Content-Length header field with a field value containing a\n   list of identical decimal values (e.g., \"Content-Length: 42, 42\"),\n   indicating that duplicate Content-Length header fields have been\n   generated or combined by an upstream message processor, then the\n   recipient MUST either reject the message as invalid or replace the\n   duplicated field-values with a single valid Content-Length field\n   containing that decimal value prior to determining the message body\n   length or forwarding the message.\n\n      Note: HTTP's use of Content-Length for message framing differs\n      significantly from the same field's use in MIME, where it is an\n      optional field used only within the \"message/external-body\"\n      media-type.\n\n<h4 class=\"h4\" id=\"section-3.3.3\">3.3.3.  Message Body Length</h4>\n   The length of a message body is determined by one of the following\n   (in order of precedence):\n\n   1.  Any response to a HEAD request and any response with a 1xx\n       (Informational), 204 (No Content), or 304 (Not Modified) status\n       code is always terminated by the first empty line after the\n       header fields, regardless of the header fields present in the\n       message, and thus cannot contain a message body.\n\n   2.  Any 2xx (Successful) response to a CONNECT request implies that\n       the connection will become a tunnel immediately after the empty\n       line that concludes the header fields.  A client MUST ignore any\n       Content-Length or Transfer-Encoding header fields received in\n       such a message.\n\n   3.  If a Transfer-Encoding header field is present and the chunked\n       transfer coding (<a href=\"#section-4.1\">Section 4.1</a>) is the final encoding, the message\n       body length is determined by reading and decoding the chunked\n       data until the transfer coding indicates the data is complete.\n\n       If a Transfer-Encoding header field is present in a response and\n       the chunked transfer coding is not the final encoding, the\n       message body length is determined by reading the connection until\n       it is closed by the server.  If a Transfer-Encoding header field\n       is present in a request and the chunked transfer coding is not\n       the final encoding, the message body length cannot be determined\n       reliably; the server MUST respond with the 400 (Bad Request)\n       status code and then close the connection.\n\n       If a message is received with both a Transfer-Encoding and a\n       Content-Length header field, the Transfer-Encoding overrides the\n       Content-Length.  Such a message might indicate an attempt to\n       perform request smuggling (<a href=\"#section-9.5\">Section 9.5</a>) or response splitting\n       (<a href=\"#section-9.4\">Section 9.4</a>) and ought to be handled as an error.  A sender MUST\n       remove the received Content-Length field prior to forwarding such\n       a message downstream.\n\n   4.  If a message is received without Transfer-Encoding and with\n       either multiple Content-Length header fields having differing\n       field-values or a single Content-Length header field having an\n       invalid value, then the message framing is invalid and the\n       recipient MUST treat it as an unrecoverable error.  If this is a\n       request message, the server MUST respond with a 400 (Bad Request)\n       status code and then close the connection.  If this is a response\n       message received by a proxy, the proxy MUST close the connection\n       to the server, discard the received response, and send a 502 (Bad\n\n       Gateway) response to the client.  If this is a response message\n       received by a user agent, the user agent MUST close the\n       connection to the server and discard the received response.\n\n   5.  If a valid Content-Length header field is present without\n       Transfer-Encoding, its decimal value defines the expected message\n       body length in octets.  If the sender closes the connection or\n       the recipient times out before the indicated number of octets are\n       received, the recipient MUST consider the message to be\n       incomplete and close the connection.\n\n   6.  If this is a request message and none of the above are true, then\n       the message body length is zero (no message body is present).\n\n   7.  Otherwise, this is a response message without a declared message\n       body length, so the message body length is determined by the\n       number of octets received prior to the server closing the\n       connection.\n\n   Since there is no way to distinguish a successfully completed,\n   close-delimited message from a partially received message interrupted\n   by network failure, a server SHOULD generate encoding or\n   length-delimited messages whenever possible.  The close-delimiting\n   feature exists primarily for backwards compatibility with HTTP/1.0.\n\n   A server MAY reject a request that contains a message body but not a\n   Content-Length by responding with 411 (Length Required).\n\n   Unless a transfer coding other than chunked has been applied, a\n   client that sends a request containing a message body SHOULD use a\n   valid Content-Length header field if the message body length is known\n   in advance, rather than the chunked transfer coding, since some\n   existing services respond to chunked with a 411 (Length Required)\n   status code even though they understand the chunked transfer coding.\n   This is typically because such services are implemented via a gateway\n   that requires a content-length in advance of being called and the\n   server is unable or unwilling to buffer the entire request before\n   processing.\n\n   A user agent that sends a request containing a message body MUST send\n   a valid Content-Length header field if it does not know the server\n   will handle HTTP/1.1 (or later) requests; such knowledge can be in\n   the form of specific user configuration or by remembering the version\n   of a prior received response.\n\n   If the final response to the last request on a connection has been\n   completely received and there remains additional data to read, a user\n   agent MAY discard the remaining data or attempt to determine if that\n\n   data belongs as part of the prior response body, which might be the\n   case if the prior message's Content-Length value is incorrect.  A\n   client MUST NOT process, cache, or forward such extra data as a\n   separate response, since such behavior would be vulnerable to cache\n   poisoning.\n\n<h3 class=\"h3\" id=\"section-3.4\">3.4.  Handling Incomplete Messages</h3>\n   A server that receives an incomplete request message, usually due to\n   a canceled request or a triggered timeout exception, MAY send an\n   error response prior to closing the connection.\n\n   A client that receives an incomplete response message, which can\n   occur when a connection is closed prematurely or when decoding a\n   supposedly chunked transfer coding fails, MUST record the message as\n   incomplete.  Cache requirements for incomplete responses are defined\n   in <a href=\"https://tools.ietf.org/html/rfc7234#section-3\">Section 3 of [RFC7234]</a>.\n\n   If a response terminates in the middle of the header section (before\n   the empty line is received) and the status code might rely on header\n   fields to convey the full meaning of the response, then the client\n   cannot assume that meaning has been conveyed; the client might need\n   to repeat the request in order to determine what action to take next.\n\n   A message body that uses the chunked transfer coding is incomplete if\n   the zero-sized chunk that terminates the encoding has not been\n   received.  A message that uses a valid Content-Length is incomplete\n   if the size of the message body received (in octets) is less than the\n   value given by Content-Length.  A response that has neither chunked\n   transfer coding nor Content-Length is terminated by closure of the\n   connection and, thus, is considered complete regardless of the number\n   of message body octets received, provided that the header section was\n   received intact.\n\n<h3 class=\"h3\" id=\"section-3.5\">3.5.  Message Parsing Robustness</h3>\n   Older HTTP/1.0 user agent implementations might send an extra CRLF\n   after a POST request as a workaround for some early server\n   applications that failed to read message body content that was not\n   terminated by a line-ending.  An HTTP/1.1 user agent MUST NOT preface\n   or follow a request with an extra CRLF.  If terminating the request\n   message body with a line-ending is desired, then the user agent MUST\n   count the terminating CRLF octets as part of the message body length.\n\n   In the interest of robustness, a server that is expecting to receive\n   and parse a request-line SHOULD ignore at least one empty line (CRLF)\n   received prior to the request-line.\n\n   Although the line terminator for the start-line and header fields is\n   the sequence CRLF, a recipient MAY recognize a single LF as a line\n   terminator and ignore any preceding CR.\n\n   Although the request-line and status-line grammar rules require that\n   each of the component elements be separated by a single SP octet,\n   recipients MAY instead parse on whitespace-delimited word boundaries\n   and, aside from the CRLF terminator, treat any form of whitespace as\n   the SP separator while ignoring preceding or trailing whitespace;\n   such whitespace includes one or more of the following octets: SP,\n   HTAB, VT (%x0B), FF (%x0C), or bare CR.  However, lenient parsing can\n   result in security vulnerabilities if there are multiple recipients\n   of the message and each has its own unique interpretation of\n   robustness (see <a href=\"#section-9.5\">Section 9.5</a>).\n\n   When a server listening only for HTTP request messages, or processing\n   what appears from the start-line to be an HTTP request message,\n   receives a sequence of octets that does not match the HTTP-message\n   grammar aside from the robustness exceptions listed above, the server\n   SHOULD respond with a 400 (Bad Request) response.\n\n<h2 class=\"h2\" id=\"section-4\">4.  Transfer Codings</h2>\n   Transfer coding names are used to indicate an encoding transformation\n   that has been, can be, or might need to be applied to a payload body\n   in order to ensure \"safe transport\" through the network.  This\n   differs from a content coding in that the transfer coding is a\n   property of the message rather than a property of the representation\n   that is being transferred.\n\n     transfer-coding    = \"chunked\" ; <a href=\"#section-4.1\">Section 4.1</a>\n                        / \"compress\" ; <a href=\"#section-4.2.1\">Section 4.2.1</a>\n                        / \"deflate\" ; <a href=\"#section-4.2.2\">Section 4.2.2</a>\n                        / \"gzip\" ; <a href=\"#section-4.2.3\">Section 4.2.3</a>\n                        / transfer-extension\n     transfer-extension = token *( OWS \";\" OWS transfer-parameter )\n\n   Parameters are in the form of a name or name=value pair.\n\n     transfer-parameter = token BWS \"=\" BWS ( token / quoted-string )\n\n   All transfer-coding names are case-insensitive and ought to be\n   registered within the HTTP Transfer Coding registry, as defined in\n   <a href=\"#section-8.4\">Section 8.4</a>.  They are used in the TE (<a href=\"#section-4.3\">Section 4.3</a>) and\n   Transfer-Encoding (<a href=\"#section-3.3.1\">Section 3.3.1</a>) header fields.\n\n<h3 class=\"h3\" id=\"section-4.1\">4.1.  Chunked Transfer Coding</h3>\n   The chunked transfer coding wraps the payload body in order to\n   transfer it as a series of chunks, each with its own size indicator,\n   followed by an OPTIONAL trailer containing header fields.  Chunked\n   enables content streams of unknown size to be transferred as a\n   sequence of length-delimited buffers, which enables the sender to\n   retain connection persistence and the recipient to know when it has\n   received the entire message.\n\n     chunked-body   = *chunk\n                      last-chunk\n                      trailer-part\n                      CRLF\n\n     chunk          = chunk-size [ chunk-ext ] CRLF\n                      chunk-data CRLF\n     chunk-size     = 1*HEXDIG\n     last-chunk     = 1*(\"0\") [ chunk-ext ] CRLF\n\n     chunk-data     = 1*OCTET ; a sequence of chunk-size octets\n\n   The chunk-size field is a string of hex digits indicating the size of\n   the chunk-data in octets.  The chunked transfer coding is complete\n   when a chunk with a chunk-size of zero is received, possibly followed\n   by a trailer, and finally terminated by an empty line.\n\n   A recipient MUST be able to parse and decode the chunked transfer\n   coding.\n\n<h4 class=\"h4\" id=\"section-4.1.1\">4.1.1.  Chunk Extensions</h4>\n   The chunked encoding allows each chunk to include zero or more chunk\n   extensions, immediately following the chunk-size, for the sake of\n   supplying per-chunk metadata (such as a signature or hash),\n   mid-message control information, or randomization of message body\n   size.\n\n     chunk-ext      = *( \";\" chunk-ext-name [ \"=\" chunk-ext-val ] )\n\n     chunk-ext-name = token\n     chunk-ext-val  = token / quoted-string\n\n   The chunked encoding is specific to each connection and is likely to\n   be removed or recoded by each recipient (including intermediaries)\n   before any higher-level application would have a chance to inspect\n   the extensions.  Hence, use of chunk extensions is generally limited\n\n   to specialized HTTP services such as \"long polling\" (where client and\n   server can have shared expectations regarding the use of chunk\n   extensions) or for padding within an end-to-end secured connection.\n\n   A recipient MUST ignore unrecognized chunk extensions.  A server\n   ought to limit the total length of chunk extensions received in a\n   request to an amount reasonable for the services provided, in the\n   same way that it applies length limitations and timeouts for other\n   parts of a message, and generate an appropriate 4xx (Client Error)\n   response if that amount is exceeded.\n\n<h4 class=\"h4\" id=\"section-4.1.2\">4.1.2.  Chunked Trailer Part</h4>\n   A trailer allows the sender to include additional fields at the end\n   of a chunked message in order to supply metadata that might be\n   dynamically generated while the message body is sent, such as a\n   message integrity check, digital signature, or post-processing\n   status.  The trailer fields are identical to header fields, except\n   they are sent in a chunked trailer instead of the message's header\n   section.\n\n     trailer-part   = *( header-field CRLF )\n\n   A sender MUST NOT generate a trailer that contains a field necessary\n   for message framing (e.g., Transfer-Encoding and Content-Length),\n   routing (e.g., Host), request modifiers (e.g., controls and\n   conditionals in <a href=\"https://tools.ietf.org/html/rfc7231#section-5\">Section 5 of [RFC7231]</a>), authentication (e.g., see\n   [<a href=\"https://tools.ietf.org/html/rfc7235\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Authentication\"'>RFC7235</a>] and [<a href=\"https://tools.ietf.org/html/rfc6265\" title='\"HTTP State Management Mechanism\"'>RFC6265</a>]), response control data (e.g., see <a href=\"#section-7.1\">Section</a>\n   <a href=\"#section-7.1\">7.1</a> of [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>]), or determining how to process the payload (e.g.,\n   Content-Encoding, Content-Type, Content-Range, and Trailer).\n\n   When a chunked message containing a non-empty trailer is received,\n   the recipient MAY process the fields (aside from those forbidden\n   above) as if they were appended to the message's header section.  A\n   recipient MUST ignore (or consider as an error) any fields that are\n   forbidden to be sent in a trailer, since processing them as if they\n   were present in the header section might bypass external security\n   filters.\n\n   Unless the request includes a TE header field indicating \"trailers\"\n   is acceptable, as described in <a href=\"#section-4.3\">Section 4.3</a>, a server SHOULD NOT\n   generate trailer fields that it believes are necessary for the user\n   agent to receive.  Without a TE containing \"trailers\", the server\n   ought to assume that the trailer fields might be silently discarded\n   along the path to the user agent.  This requirement allows\n   intermediaries to forward a de-chunked message to an HTTP/1.0\n   recipient without buffering the entire response.\n\n<h4 class=\"h4\" id=\"section-4.1.3\">4.1.3.  Decoding Chunked</h4>\n   A process for decoding the chunked transfer coding can be represented\n   in pseudo-code as:\n\n     length := 0\n     read chunk-size, chunk-ext (if any), and CRLF\n     while (chunk-size &gt; 0) {\n        read chunk-data and CRLF\n        append chunk-data to decoded-body\n        length := length + chunk-size\n        read chunk-size, chunk-ext (if any), and CRLF\n     }\n     read trailer field\n     while (trailer field is not empty) {\n        if (trailer field is allowed to be sent in a trailer) {\n            append trailer field to existing header fields\n        }\n        read trailer-field\n     }\n     Content-Length := length\n     Remove \"chunked\" from Transfer-Encoding\n     Remove Trailer from existing header fields\n\n<h3 class=\"h3\" id=\"section-4.2\">4.2.  Compression Codings</h3>\n   The codings defined below can be used to compress the payload of a\n   message.\n\n<h4 class=\"h4\" id=\"section-4.2.1\">4.2.1.  Compress Coding</h4>\n   The \"compress\" coding is an adaptive Lempel-Ziv-Welch (LZW) coding\n   [<a href=\"#ref-Welch\" title='\"A Technique for High-Performance Data Compression\"'>Welch</a>] that is commonly produced by the UNIX file compression\n   program \"compress\".  A recipient SHOULD consider \"x-compress\" to be\n   equivalent to \"compress\".\n\n<h4 class=\"h4\" id=\"section-4.2.2\">4.2.2.  Deflate Coding</h4>\n   The \"deflate\" coding is a \"zlib\" data format [<a href=\"https://tools.ietf.org/html/rfc1950\" title='\"ZLIB Compressed Data Format Specification version 3.3\"'>RFC1950</a>] containing a\n   \"deflate\" compressed data stream [<a href=\"https://tools.ietf.org/html/rfc1951\" title='\"DEFLATE Compressed Data Format Specification version 1.3\"'>RFC1951</a>] that uses a combination of\n   the Lempel-Ziv (LZ77) compression algorithm and Huffman coding.\n\n      Note: Some non-conformant implementations send the \"deflate\"\n      compressed data without the zlib wrapper.\n\n<h4 class=\"h4\" id=\"section-4.2.3\">4.2.3.  Gzip Coding</h4>\n   The \"gzip\" coding is an LZ77 coding with a 32-bit Cyclic Redundancy\n   Check (CRC) that is commonly produced by the gzip file compression\n   program [<a href=\"https://tools.ietf.org/html/rfc1952\" title='\"GZIP file format specification version 4.3\"'>RFC1952</a>].  A recipient SHOULD consider \"x-gzip\" to be\n   equivalent to \"gzip\".\n\n<h3 class=\"h3\" id=\"section-4.3\">4.3.  TE</h3>\n   The \"TE\" header field in a request indicates what transfer codings,\n   besides chunked, the client is willing to accept in response, and\n   whether or not the client is willing to accept trailer fields in a\n   chunked transfer coding.\n\n   The TE field-value consists of a comma-separated list of transfer\n   coding names, each allowing for optional parameters (as described in\n   <a href=\"#section-4\">Section 4</a>), and/or the keyword \"trailers\".  A client MUST NOT send\n   the chunked transfer coding name in TE; chunked is always acceptable\n   for HTTP/1.1 recipients.\n\n     TE        = #t-codings\n     t-codings = \"trailers\" / ( transfer-coding [ t-ranking ] )\n     t-ranking = OWS \";\" OWS \"q=\" rank\n     rank      = ( \"0\" [ \".\" 0*3DIGIT ] )\n                / ( \"1\" [ \".\" 0*3(\"0\") ] )\n\n   Three examples of TE use are below.\n\n     TE: deflate\n     TE:\n     TE: trailers, deflate;q=0.5\n\n   The presence of the keyword \"trailers\" indicates that the client is\n   willing to accept trailer fields in a chunked transfer coding, as\n   defined in <a href=\"#section-4.1.2\">Section 4.1.2</a>, on behalf of itself and any downstream\n   clients.  For requests from an intermediary, this implies that\n   either: (a) all downstream clients are willing to accept trailer\n   fields in the forwarded response; or, (b) the intermediary will\n   attempt to buffer the response on behalf of downstream recipients.\n   Note that HTTP/1.1 does not define any means to limit the size of a\n   chunked response such that an intermediary can be assured of\n   buffering the entire response.\n\n   When multiple transfer codings are acceptable, the client MAY rank\n   the codings by preference using a case-insensitive \"q\" parameter\n   (similar to the qvalues used in content negotiation fields, Section\n\n   5.3.1 of [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>]).  The rank value is a real number in the range 0\n   through 1, where 0.001 is the least preferred and 1 is the most\n   preferred; a value of 0 means \"not acceptable\".\n\n   If the TE field-value is empty or if no TE field is present, the only\n   acceptable transfer coding is chunked.  A message with no transfer\n   coding is always acceptable.\n\n   Since the TE header field only applies to the immediate connection, a\n   sender of TE MUST also send a \"TE\" connection option within the\n   Connection header field (<a href=\"#section-6.1\">Section 6.1</a>) in order to prevent the TE\n   field from being forwarded by intermediaries that do not support its\n   semantics.\n\n<h3 class=\"h3\" id=\"section-4.4\">4.4.  Trailer</h3>\n   When a message includes a message body encoded with the chunked\n   transfer coding and the sender desires to send metadata in the form\n   of trailer fields at the end of the message, the sender SHOULD\n   generate a Trailer header field before the message body to indicate\n   which fields will be present in the trailers.  This allows the\n   recipient to prepare for receipt of that metadata before it starts\n   processing the body, which is useful if the message is being streamed\n   and the recipient wishes to confirm an integrity check on the fly.\n\n     Trailer = 1#field-name\n\n<h2 class=\"h2\" id=\"section-5\">5.  Message Routing</h2>\n   HTTP request message routing is determined by each client based on\n   the target resource, the client's proxy configuration, and\n   establishment or reuse of an inbound connection.  The corresponding\n   response routing follows the same connection chain back to the\n   client.\n\n<h3 class=\"h3\" id=\"section-5.1\">5.1.  Identifying a Target Resource</h3>\n   HTTP is used in a wide variety of applications, ranging from\n   general-purpose computers to home appliances.  In some cases,\n   communication options are hard-coded in a client's configuration.\n   However, most HTTP clients rely on the same resource identification\n   mechanism and configuration techniques as general-purpose Web\n   browsers.\n\n   HTTP communication is initiated by a user agent for some purpose.\n   The purpose is a combination of request semantics, which are defined\n   in [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>], and a target resource upon which to apply those\n   semantics.  A URI reference (<a href=\"#section-2.7\">Section 2.7</a>) is typically used as an\n\n   identifier for the \"target resource\", which a user agent would\n   resolve to its absolute form in order to obtain the \"target URI\".\n   The target URI excludes the reference's fragment component, if any,\n   since fragment identifiers are reserved for client-side processing\n   (<a href=\"https://tools.ietf.org/html/rfc3986#section-3.5\">[RFC3986], Section 3.5</a>).\n\n<h3 class=\"h3\" id=\"section-5.2\">5.2.  Connecting Inbound</h3>\n   Once the target URI is determined, a client needs to decide whether a\n   network request is necessary to accomplish the desired semantics and,\n   if so, where that request is to be directed.\n\n   If the client has a cache [<a href=\"https://tools.ietf.org/html/rfc7234\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Caching\"'>RFC7234</a>] and the request can be satisfied\n   by it, then the request is usually directed there first.\n\n   If the request is not satisfied by a cache, then a typical client\n   will check its configuration to determine whether a proxy is to be\n   used to satisfy the request.  Proxy configuration is implementation-\n   dependent, but is often based on URI prefix matching, selective\n   authority matching, or both, and the proxy itself is usually\n   identified by an \"http\" or \"https\" URI.  If a proxy is applicable,\n   the client connects inbound by establishing (or reusing) a connection\n   to that proxy.\n\n   If no proxy is applicable, a typical client will invoke a handler\n   routine, usually specific to the target URI's scheme, to connect\n   directly to an authority for the target resource.  How that is\n   accomplished is dependent on the target URI scheme and defined by its\n   associated specification, similar to how this specification defines\n   origin server access for resolution of the \"http\" (<a href=\"#section-2.7.1\">Section 2.7.1</a>) and\n   \"https\" (<a href=\"#section-2.7.2\">Section 2.7.2</a>) schemes.\n\n   HTTP requirements regarding connection management are defined in\n   <a href=\"#section-6\">Section 6</a>.\n\n<h3 class=\"h3\" id=\"section-5.3\">5.3.  Request Target</h3>\n   Once an inbound connection is obtained, the client sends an HTTP\n   request message (<a href=\"#section-3\">Section 3</a>) with a request-target derived from the\n   target URI.  There are four distinct formats for the request-target,\n   depending on both the method being requested and whether the request\n   is to a proxy.\n\n     request-target = origin-form\n                    / absolute-form\n                    / authority-form\n                    / asterisk-form\n\n<h4 class=\"h4\" id=\"section-5.3.1\">5.3.1.  origin-form</h4>\n   The most common form of request-target is the origin-form.\n\n     origin-form    = absolute-path [ \"?\" query ]\n\n   When making a request directly to an origin server, other than a\n   CONNECT or server-wide OPTIONS request (as detailed below), a client\n   MUST send only the absolute path and query components of the target\n   URI as the request-target.  If the target URI's path component is\n   empty, the client MUST send \"/\" as the path within the origin-form of\n   request-target.  A Host header field is also sent, as defined in\n   <a href=\"#section-5.4\">Section 5.4</a>.\n\n   For example, a client wishing to retrieve a representation of the\n   resource identified as\n\n     http://www.example.org/where?q=now\n\n   directly from the origin server would open (or reuse) a TCP\n   connection to port 80 of the host \"www.example.org\" and send the\n   lines:\n\n     GET /where?q=now HTTP/1.1\n     Host: www.example.org\n\n   followed by the remainder of the request message.\n\n<h4 class=\"h4\" id=\"section-5.3.2\">5.3.2.  absolute-form</h4>\n   When making a request to a proxy, other than a CONNECT or server-wide\n   OPTIONS request (as detailed below), a client MUST send the target\n   URI in absolute-form as the request-target.\n\n     absolute-form  = absolute-URI\n\n   The proxy is requested to either service that request from a valid\n   cache, if possible, or make the same request on the client's behalf\n   to either the next inbound proxy server or directly to the origin\n   server indicated by the request-target.  Requirements on such\n   \"forwarding\" of messages are defined in <a href=\"#section-5.7\">Section 5.7</a>.\n\n   An example absolute-form of request-line would be:\n\n     GET http://www.example.org/pub/WWW/TheProject.html HTTP/1.1\n\n   To allow for transition to the absolute-form for all requests in some\n   future version of HTTP, a server MUST accept the absolute-form in\n   requests, even though HTTP/1.1 clients will only send them in\n   requests to proxies.\n\n<h4 class=\"h4\" id=\"section-5.3.3\">5.3.3.  authority-form</h4>\n   The authority-form of request-target is only used for CONNECT\n   requests (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.6\">Section 4.3.6 of [RFC7231]</a>).\n\n     authority-form = authority\n\n   When making a CONNECT request to establish a tunnel through one or\n   more proxies, a client MUST send only the target URI's authority\n   component (excluding any userinfo and its \"@\" delimiter) as the\n   request-target.  For example,\n\n     CONNECT www.example.com:80 HTTP/1.1\n\n<h4 class=\"h4\" id=\"section-5.3.4\">5.3.4.  asterisk-form</h4>\n   The asterisk-form of request-target is only used for a server-wide\n   OPTIONS request (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\">Section 4.3.7 of [RFC7231]</a>).\n\n     asterisk-form  = \"*\"\n\n   When a client wishes to request OPTIONS for the server as a whole, as\n   opposed to a specific named resource of that server, the client MUST\n   send only \"*\" (%x2A) as the request-target.  For example,\n\n     OPTIONS * HTTP/1.1\n\n   If a proxy receives an OPTIONS request with an absolute-form of\n   request-target in which the URI has an empty path and no query\n   component, then the last proxy on the request chain MUST send a\n   request-target of \"*\" when it forwards the request to the indicated\n   origin server.\n\n   For example, the request\n\n     OPTIONS <a href=\"http://www.example.org:8001\">http://www.example.org:8001</a> HTTP/1.1\n\n   would be forwarded by the final proxy as\n\n     OPTIONS * HTTP/1.1\n     Host: www.example.org:8001\n\n   after connecting to port 8001 of host \"www.example.org\".\n\n<h3 class=\"h3\" id=\"section-5.4\">5.4.  Host</h3>\n   The \"Host\" header field in a request provides the host and port\n   information from the target URI, enabling the origin server to\n   distinguish among resources while servicing requests for multiple\n   host names on a single IP address.\n\n     Host = uri-host [ \":\" port ] ; <a href=\"#section-2.7.1\">Section 2.7.1</a>\n\n   A client MUST send a Host header field in all HTTP/1.1 request\n   messages.  If the target URI includes an authority component, then a\n   client MUST send a field-value for Host that is identical to that\n   authority component, excluding any userinfo subcomponent and its \"@\"\n   delimiter (<a href=\"#section-2.7.1\">Section 2.7.1</a>).  If the authority component is missing or\n   undefined for the target URI, then a client MUST send a Host header\n   field with an empty field-value.\n\n   Since the Host field-value is critical information for handling a\n   request, a user agent SHOULD generate Host as the first header field\n   following the request-line.\n\n   For example, a GET request to the origin server for\n   &lt;http://www.example.org/pub/WWW/&gt; would begin with:\n\n     GET /pub/WWW/ HTTP/1.1\n     Host: www.example.org\n\n   A client MUST send a Host header field in an HTTP/1.1 request even if\n   the request-target is in the absolute-form, since this allows the\n   Host information to be forwarded through ancient HTTP/1.0 proxies\n   that might not have implemented Host.\n\n   When a proxy receives a request with an absolute-form of\n   request-target, the proxy MUST ignore the received Host header field\n   (if any) and instead replace it with the host information of the\n   request-target.  A proxy that forwards such a request MUST generate a\n   new Host field-value based on the received request-target rather than\n   forward the received Host field-value.\n\n   Since the Host header field acts as an application-level routing\n   mechanism, it is a frequent target for malware seeking to poison a\n   shared cache or redirect a request to an unintended server.  An\n   interception proxy is particularly vulnerable if it relies on the\n   Host field-value for redirecting requests to internal servers, or for\n   use as a cache key in a shared cache, without first verifying that\n   the intercepted connection is targeting a valid IP address for that\n   host.\n\n   A server MUST respond with a 400 (Bad Request) status code to any\n   HTTP/1.1 request message that lacks a Host header field and to any\n   request message that contains more than one Host header field or a\n   Host header field with an invalid field-value.\n\n<h3 class=\"h3\" id=\"section-5.5\">5.5.  Effective Request URI</h3>\n   Since the request-target often contains only part of the user agent's\n   target URI, a server reconstructs the intended target as an\n   \"effective request URI\" to properly service the request.  This\n   reconstruction involves both the server's local configuration and\n   information communicated in the request-target, Host header field,\n   and connection context.\n\n   For a user agent, the effective request URI is the target URI.\n\n   If the request-target is in absolute-form, the effective request URI\n   is the same as the request-target.  Otherwise, the effective request\n   URI is constructed as follows:\n\n      If the server's configuration (or outbound gateway) provides a\n      fixed URI scheme, that scheme is used for the effective request\n      URI.  Otherwise, if the request is received over a TLS-secured TCP\n      connection, the effective request URI's scheme is \"https\"; if not,\n      the scheme is \"http\".\n\n      If the server's configuration (or outbound gateway) provides a\n      fixed URI authority component, that authority is used for the\n      effective request URI.  If not, then if the request-target is in\n      authority-form, the effective request URI's authority component is\n      the same as the request-target.  If not, then if a Host header\n      field is supplied with a non-empty field-value, the authority\n      component is the same as the Host field-value.  Otherwise, the\n      authority component is assigned the default name configured for\n      the server and, if the connection's incoming TCP port number\n      differs from the default port for the effective request URI's\n      scheme, then a colon (\":\") and the incoming port number (in\n      decimal form) are appended to the authority component.\n\n      If the request-target is in authority-form or asterisk-form, the\n      effective request URI's combined path and query component is\n      empty.  Otherwise, the combined path and query component is the\n      same as the request-target.\n\n      The components of the effective request URI, once determined as\n      above, can be combined into absolute-URI form by concatenating the\n      scheme, \"://\", authority, and combined path and query component.\n\n   Example 1: the following message received over an insecure TCP\n   connection\n\n     GET /pub/WWW/TheProject.html HTTP/1.1\n     Host: www.example.org:8080\n\n   has an effective request URI of\n\n     <a href=\"http://www.example.org:8080/pub/WWW/TheProject.html\">http://www.example.org:8080/pub/WWW/TheProject.html</a>\n\n   Example 2: the following message received over a TLS-secured TCP\n   connection\n\n     OPTIONS * HTTP/1.1\n     Host: www.example.org\n\n   has an effective request URI of\n\n     https://www.example.org\n\n   Recipients of an HTTP/1.0 request that lacks a Host header field\n   might need to use heuristics (e.g., examination of the URI path for\n   something unique to a particular host) in order to guess the\n   effective request URI's authority component.\n\n   Once the effective request URI has been constructed, an origin server\n   needs to decide whether or not to provide service for that URI via\n   the connection in which the request was received.  For example, the\n   request might have been misdirected, deliberately or accidentally,\n   such that the information within a received request-target or Host\n   header field differs from the host or port upon which the connection\n   has been made.  If the connection is from a trusted gateway, that\n   inconsistency might be expected; otherwise, it might indicate an\n   attempt to bypass security filters, trick the server into delivering\n   non-public content, or poison a cache.  See <a href=\"#section-9\">Section 9</a> for security\n   considerations regarding message routing.\n\n<h3 class=\"h3\" id=\"section-5.6\">5.6.  Associating a Response to a Request</h3>\n   HTTP does not include a request identifier for associating a given\n   request message with its corresponding one or more response messages.\n   Hence, it relies on the order of response arrival to correspond\n   exactly to the order in which requests are made on the same\n   connection.  More than one response message per request only occurs\n   when one or more informational responses (1xx, see <a href=\"https://tools.ietf.org/html/rfc7231#section-6.2\">Section 6.2 of\n   [RFC7231]</a>) precede a final response to the same request.\n\n   A client that has more than one outstanding request on a connection\n   MUST maintain a list of outstanding requests in the order sent and\n   MUST associate each received response message on that connection to\n   the highest ordered request that has not yet received a final\n   (non-1xx) response.\n\n<h3 class=\"h3\" id=\"section-5.7\">5.7.  Message Forwarding</h3>\n   As described in <a href=\"#section-2.3\">Section 2.3</a>, intermediaries can serve a variety of\n   roles in the processing of HTTP requests and responses.  Some\n   intermediaries are used to improve performance or availability.\n   Others are used for access control or to filter content.  Since an\n   HTTP stream has characteristics similar to a pipe-and-filter\n   architecture, there are no inherent limits to the extent an\n   intermediary can enhance (or interfere) with either direction of the\n   stream.\n\n   An intermediary not acting as a tunnel MUST implement the Connection\n   header field, as specified in <a href=\"#section-6.1\">Section 6.1</a>, and exclude fields from\n   being forwarded that are only intended for the incoming connection.\n\n   An intermediary MUST NOT forward a message to itself unless it is\n   protected from an infinite request loop.  In general, an intermediary\n   ought to recognize its own server names, including any aliases, local\n   variations, or literal IP addresses, and respond to such requests\n   directly.\n\n<h4 class=\"h4\" id=\"section-5.7.1\">5.7.1.  Via</h4>\n   The \"Via\" header field indicates the presence of intermediate\n   protocols and recipients between the user agent and the server (on\n   requests) or between the origin server and the client (on responses),\n   similar to the \"Received\" header field in email (<a href=\"https://tools.ietf.org/html/rfc5322#section-3.6.7\">Section 3.6.7 of\n   [RFC5322]</a>).  Via can be used for tracking message forwards, avoiding\n   request loops, and identifying the protocol capabilities of senders\n   along the request/response chain.\n\n     Via = 1#( received-protocol RWS received-by [ RWS comment ] )\n\n     received-protocol = [ protocol-name \"/\" ] protocol-version\n                         ; see <a href=\"#section-6.7\">Section 6.7</a>\n     received-by       = ( uri-host [ \":\" port ] ) / pseudonym\n     pseudonym         = token\n\n   Multiple Via field values represent each proxy or gateway that has\n   forwarded the message.  Each intermediary appends its own information\n   about how the message was received, such that the end result is\n   ordered according to the sequence of forwarding recipients.\n\n   A proxy MUST send an appropriate Via header field, as described\n   below, in each message that it forwards.  An HTTP-to-HTTP gateway\n   MUST send an appropriate Via header field in each inbound request\n   message and MAY send a Via header field in forwarded response\n   messages.\n\n   For each intermediary, the received-protocol indicates the protocol\n   and protocol version used by the upstream sender of the message.\n   Hence, the Via field value records the advertised protocol\n   capabilities of the request/response chain such that they remain\n   visible to downstream recipients; this can be useful for determining\n   what backwards-incompatible features might be safe to use in\n   response, or within a later request, as described in <a href=\"#section-2.6\">Section 2.6</a>.\n   For brevity, the protocol-name is omitted when the received protocol\n   is HTTP.\n\n   The received-by portion of the field value is normally the host and\n   optional port number of a recipient server or client that\n   subsequently forwarded the message.  However, if the real host is\n   considered to be sensitive information, a sender MAY replace it with\n   a pseudonym.  If a port is not provided, a recipient MAY interpret\n   that as meaning it was received on the default TCP port, if any, for\n   the received-protocol.\n\n   A sender MAY generate comments in the Via header field to identify\n   the software of each recipient, analogous to the User-Agent and\n   Server header fields.  However, all comments in the Via field are\n   optional, and a recipient MAY remove them prior to forwarding the\n   message.\n\n   For example, a request message could be sent from an HTTP/1.0 user\n   agent to an internal proxy code-named \"fred\", which uses HTTP/1.1 to\n   forward the request to a public proxy at p.example.net, which\n   completes the request by forwarding it to the origin server at\n   www.example.com.  The request received by www.example.com would then\n   have the following Via header field:\n\n     Via: 1.0 fred, 1.1 p.example.net\n\n   An intermediary used as a portal through a network firewall SHOULD\n   NOT forward the names and ports of hosts within the firewall region\n   unless it is explicitly enabled to do so.  If not enabled, such an\n   intermediary SHOULD replace each received-by host of any host behind\n   the firewall by an appropriate pseudonym for that host.\n\n   An intermediary MAY combine an ordered subsequence of Via header\n   field entries into a single such entry if the entries have identical\n   received-protocol values.  For example,\n\n     Via: 1.0 ricky, 1.1 ethel, 1.1 fred, 1.0 lucy\n\n   could be collapsed to\n\n     Via: 1.0 ricky, 1.1 mertz, 1.0 lucy\n\n   A sender SHOULD NOT combine multiple entries unless they are all\n   under the same organizational control and the hosts have already been\n   replaced by pseudonyms.  A sender MUST NOT combine entries that have\n   different received-protocol values.\n\n<h4 class=\"h4\" id=\"section-5.7.2\">5.7.2.  Transformations</h4>\n   Some intermediaries include features for transforming messages and\n   their payloads.  A proxy might, for example, convert between image\n   formats in order to save cache space or to reduce the amount of\n   traffic on a slow link.  However, operational problems might occur\n   when these transformations are applied to payloads intended for\n   critical applications, such as medical imaging or scientific data\n   analysis, particularly when integrity checks or digital signatures\n   are used to ensure that the payload received is identical to the\n   original.\n\n   An HTTP-to-HTTP proxy is called a \"transforming proxy\" if it is\n   designed or configured to modify messages in a semantically\n   meaningful way (i.e., modifications, beyond those required by normal\n   HTTP processing, that change the message in a way that would be\n   significant to the original sender or potentially significant to\n   downstream recipients).  For example, a transforming proxy might be\n   acting as a shared annotation server (modifying responses to include\n   references to a local annotation database), a malware filter, a\n   format transcoder, or a privacy filter.  Such transformations are\n   presumed to be desired by whichever client (or client organization)\n   selected the proxy.\n\n   If a proxy receives a request-target with a host name that is not a\n   fully qualified domain name, it MAY add its own domain to the host\n   name it received when forwarding the request.  A proxy MUST NOT\n   change the host name if the request-target contains a fully qualified\n   domain name.\n\n   A proxy MUST NOT modify the \"absolute-path\" and \"query\" parts of the\n   received request-target when forwarding it to the next inbound\n   server, except as noted above to replace an empty path with \"/\" or\n   \"*\".\n\n   A proxy MAY modify the message body through application or removal of\n   a transfer coding (<a href=\"#section-4\">Section 4</a>).\n\n   A proxy MUST NOT transform the payload (<a href=\"https://tools.ietf.org/html/rfc7231#section-3.3\">Section 3.3 of [RFC7231]</a>) of\n   a message that contains a no-transform cache-control directive\n   (<a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Section 5.2 of [RFC7234]</a>).\n\n   A proxy MAY transform the payload of a message that does not contain\n   a no-transform cache-control directive.  A proxy that transforms a\n   payload MUST add a Warning header field with the warn-code of 214\n   (\"Transformation Applied\") if one is not already in the message (see\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-5.5\">Section 5.5 of [RFC7234]</a>).  A proxy that transforms the payload of a\n   200 (OK) response can further inform downstream recipients that a\n   transformation has been applied by changing the response status code\n   to 203 (Non-Authoritative Information) (<a href=\"https://tools.ietf.org/html/rfc7231#section-6.3.4\">Section 6.3.4 of [RFC7231]</a>).\n\n   A proxy SHOULD NOT modify header fields that provide information\n   about the endpoints of the communication chain, the resource state,\n   or the selected representation (other than the payload) unless the\n   field's definition specifically allows such modification or the\n   modification is deemed necessary for privacy or security.\n\n<h2 class=\"h2\" id=\"section-6\">6.  Connection Management</h2>\n   HTTP messaging is independent of the underlying transport- or\n   session-layer connection protocol(s).  HTTP only presumes a reliable\n   transport with in-order delivery of requests and the corresponding\n   in-order delivery of responses.  The mapping of HTTP request and\n   response structures onto the data units of an underlying transport\n   protocol is outside the scope of this specification.\n\n   As described in <a href=\"#section-5.2\">Section 5.2</a>, the specific connection protocols to be\n   used for an HTTP interaction are determined by client configuration\n   and the target URI.  For example, the \"http\" URI scheme\n   (<a href=\"#section-2.7.1\">Section 2.7.1</a>) indicates a default connection of TCP over IP, with a\n   default TCP port of 80, but the client might be configured to use a\n   proxy via some other connection, port, or protocol.\n\n   HTTP implementations are expected to engage in connection management,\n   which includes maintaining the state of current connections,\n   establishing a new connection or reusing an existing connection,\n   processing messages received on a connection, detecting connection\n   failures, and closing each connection.  Most clients maintain\n   multiple connections in parallel, including more than one connection\n   per server endpoint.  Most servers are designed to maintain thousands\n   of concurrent connections, while controlling request queues to enable\n   fair use and detect denial-of-service attacks.\n\n<h3 class=\"h3\" id=\"section-6.1\">6.1.  Connection</h3>\n   The \"Connection\" header field allows the sender to indicate desired\n   control options for the current connection.  In order to avoid\n   confusing downstream recipients, a proxy or gateway MUST remove or\n   replace any received connection options before forwarding the\n   message.\n\n   When a header field aside from Connection is used to supply control\n   information for or about the current connection, the sender MUST list\n   the corresponding field-name within the Connection header field.  A\n   proxy or gateway MUST parse a received Connection header field before\n   a message is forwarded and, for each connection-option in this field,\n   remove any header field(s) from the message with the same name as the\n   connection-option, and then remove the Connection header field itself\n   (or replace it with the intermediary's own connection options for the\n   forwarded message).\n\n   Hence, the Connection header field provides a declarative way of\n   distinguishing header fields that are only intended for the immediate\n   recipient (\"hop-by-hop\") from those fields that are intended for all\n   recipients on the chain (\"end-to-end\"), enabling the message to be\n   self-descriptive and allowing future connection-specific extensions\n   to be deployed without fear that they will be blindly forwarded by\n   older intermediaries.\n\n   The Connection header field's value has the following grammar:\n\n     Connection        = 1#connection-option\n     connection-option = token\n\n   Connection options are case-insensitive.\n\n   A sender MUST NOT send a connection option corresponding to a header\n   field that is intended for all recipients of the payload.  For\n   example, Cache-Control is never appropriate as a connection option\n   (<a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Section 5.2 of [RFC7234]</a>).\n\n   The connection options do not always correspond to a header field\n   present in the message, since a connection-specific header field\n   might not be needed if there are no parameters associated with a\n   connection option.  In contrast, a connection-specific header field\n   that is received without a corresponding connection option usually\n   indicates that the field has been improperly forwarded by an\n   intermediary and ought to be ignored by the recipient.\n\n   When defining new connection options, specification authors ought to\n   survey existing header field names and ensure that the new connection\n   option does not share the same name as an already deployed header\n   field.  Defining a new connection option essentially reserves that\n   potential field-name for carrying additional information related to\n   the connection option, since it would be unwise for senders to use\n   that field-name for anything else.\n\n   The \"close\" connection option is defined for a sender to signal that\n   this connection will be closed after completion of the response.  For\n   example,\n\n     Connection: close\n\n   in either the request or the response header fields indicates that\n   the sender is going to close the connection after the current\n   request/response is complete (<a href=\"#section-6.6\">Section 6.6</a>).\n\n   A client that does not support persistent connections MUST send the\n   \"close\" connection option in every request message.\n\n   A server that does not support persistent connections MUST send the\n   \"close\" connection option in every response message that does not\n   have a 1xx (Informational) status code.\n\n<h3 class=\"h3\" id=\"section-6.2\">6.2.  Establishment</h3>\n   It is beyond the scope of this specification to describe how\n   connections are established via various transport- or session-layer\n   protocols.  Each connection applies to only one transport link.\n\n<h3 class=\"h3\" id=\"section-6.3\">6.3.  Persistence</h3>\n   HTTP/1.1 defaults to the use of \"persistent connections\", allowing\n   multiple requests and responses to be carried over a single\n   connection.  The \"close\" connection option is used to signal that a\n   connection will not persist after the current request/response.  HTTP\n   implementations SHOULD support persistent connections.\n\n   A recipient determines whether a connection is persistent or not\n   based on the most recently received message's protocol version and\n   Connection header field (if any):\n\n   o  If the \"close\" connection option is present, the connection will\n      not persist after the current response; else,\n\n   o  If the received protocol is HTTP/1.1 (or later), the connection\n      will persist after the current response; else,\n\n   o  If the received protocol is HTTP/1.0, the \"keep-alive\" connection\n      option is present, the recipient is not a proxy, and the recipient\n      wishes to honor the HTTP/1.0 \"keep-alive\" mechanism, the\n      connection will persist after the current response; otherwise,\n\n   o  The connection will close after the current response.\n\n   A client MAY send additional requests on a persistent connection\n   until it sends or receives a \"close\" connection option or receives an\n   HTTP/1.0 response without a \"keep-alive\" connection option.\n\n   In order to remain persistent, all messages on a connection need to\n   have a self-defined message length (i.e., one not defined by closure\n   of the connection), as described in <a href=\"#section-3.3\">Section 3.3</a>.  A server MUST read\n   the entire request message body or close the connection after sending\n   its response, since otherwise the remaining data on a persistent\n   connection would be misinterpreted as the next request.  Likewise, a\n   client MUST read the entire response message body if it intends to\n   reuse the same connection for a subsequent request.\n\n   A proxy server MUST NOT maintain a persistent connection with an\n   HTTP/1.0 client (see <a href=\"https://tools.ietf.org/html/rfc2068#section-19.7.1\">Section 19.7.1 of [RFC2068]</a> for information and\n   discussion of the problems with the Keep-Alive header field\n   implemented by many HTTP/1.0 clients).\n\n   See <a href=\"#appendix-A.1.2\">Appendix A.1.2</a> for more information on backwards compatibility\n   with HTTP/1.0 clients.\n\n<h4 class=\"h4\" id=\"section-6.3.1\">6.3.1.  Retrying Requests</h4>\n   Connections can be closed at any time, with or without intention.\n   Implementations ought to anticipate the need to recover from\n   asynchronous close events.\n\n   When an inbound connection is closed prematurely, a client MAY open a\n   new connection and automatically retransmit an aborted sequence of\n   requests if all of those requests have idempotent methods (<a href=\"#section-4.2.2\">Section</a>\n   <a href=\"#section-4.2.2\">4.2.2</a> of [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>]).  A proxy MUST NOT automatically retry\n   non-idempotent requests.\n\n   A user agent MUST NOT automatically retry a request with a non-\n   idempotent method unless it has some means to know that the request\n   semantics are actually idempotent, regardless of the method, or some\n   means to detect that the original request was never applied.  For\n   example, a user agent that knows (through design or configuration)\n   that a POST request to a given resource is safe can repeat that\n   request automatically.  Likewise, a user agent designed specifically\n   to operate on a version control repository might be able to recover\n   from partial failure conditions by checking the target resource\n   revision(s) after a failed connection, reverting or fixing any\n   changes that were partially applied, and then automatically retrying\n   the requests that failed.\n\n   A client SHOULD NOT automatically retry a failed automatic retry.\n\n<h4 class=\"h4\" id=\"section-6.3.2\">6.3.2.  Pipelining</h4>\n   A client that supports persistent connections MAY \"pipeline\" its\n   requests (i.e., send multiple requests without waiting for each\n   response).  A server MAY process a sequence of pipelined requests in\n   parallel if they all have safe methods (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.2.1\">Section 4.2.1 of [RFC7231]</a>),\n   but it MUST send the corresponding responses in the same order that\n   the requests were received.\n\n   A client that pipelines requests SHOULD retry unanswered requests if\n   the connection closes before it receives all of the corresponding\n   responses.  When retrying pipelined requests after a failed\n   connection (a connection not explicitly closed by the server in its\n   last complete response), a client MUST NOT pipeline immediately after\n   connection establishment, since the first remaining request in the\n   prior pipeline might have caused an error response that can be lost\n   again if multiple requests are sent on a prematurely closed\n   connection (see the TCP reset problem described in <a href=\"#section-6.6\">Section 6.6</a>).\n\n   Idempotent methods (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.2.2\">Section 4.2.2 of [RFC7231]</a>) are significant to\n   pipelining because they can be automatically retried after a\n   connection failure.  A user agent SHOULD NOT pipeline requests after\n   a non-idempotent method, until the final response status code for\n   that method has been received, unless the user agent has a means to\n   detect and recover from partial failure conditions involving the\n   pipelined sequence.\n\n   An intermediary that receives pipelined requests MAY pipeline those\n   requests when forwarding them inbound, since it can rely on the\n   outbound user agent(s) to determine what requests can be safely\n   pipelined.  If the inbound connection fails before receiving a\n   response, the pipelining intermediary MAY attempt to retry a sequence\n   of requests that have yet to receive a response if the requests all\n   have idempotent methods; otherwise, the pipelining intermediary\n   SHOULD forward any received responses and then close the\n   corresponding outbound connection(s) so that the outbound user\n   agent(s) can recover accordingly.\n\n<h3 class=\"h3\" id=\"section-6.4\">6.4.  Concurrency</h3>\n   A client ought to limit the number of simultaneous open connections\n   that it maintains to a given server.\n\n   Previous revisions of HTTP gave a specific number of connections as a\n   ceiling, but this was found to be impractical for many applications.\n   As a result, this specification does not mandate a particular maximum\n   number of connections but, instead, encourages clients to be\n   conservative when opening multiple connections.\n\n   Multiple connections are typically used to avoid the \"head-of-line\n   blocking\" problem, wherein a request that takes significant\n   server-side processing and/or has a large payload blocks subsequent\n   requests on the same connection.  However, each connection consumes\n   server resources.  Furthermore, using multiple connections can cause\n   undesirable side effects in congested networks.\n\n   Note that a server might reject traffic that it deems abusive or\n   characteristic of a denial-of-service attack, such as an excessive\n   number of open connections from a single client.\n\n<h3 class=\"h3\" id=\"section-6.5\">6.5.  Failures and Timeouts</h3>\n   Servers will usually have some timeout value beyond which they will\n   no longer maintain an inactive connection.  Proxy servers might make\n   this a higher value since it is likely that the client will be making\n   more connections through the same proxy server.  The use of\n   persistent connections places no requirements on the length (or\n   existence) of this timeout for either the client or the server.\n\n   A client or server that wishes to time out SHOULD issue a graceful\n   close on the connection.  Implementations SHOULD constantly monitor\n   open connections for a received closure signal and respond to it as\n   appropriate, since prompt closure of both sides of a connection\n   enables allocated system resources to be reclaimed.\n\n   A client, server, or proxy MAY close the transport connection at any\n   time.  For example, a client might have started to send a new request\n   at the same time that the server has decided to close the \"idle\"\n   connection.  From the server's point of view, the connection is being\n   closed while it was idle, but from the client's point of view, a\n   request is in progress.\n\n   A server SHOULD sustain persistent connections, when possible, and\n   allow the underlying transport's flow-control mechanisms to resolve\n   temporary overloads, rather than terminate connections with the\n   expectation that clients will retry.  The latter technique can\n   exacerbate network congestion.\n\n   A client sending a message body SHOULD monitor the network connection\n   for an error response while it is transmitting the request.  If the\n   client sees a response that indicates the server does not wish to\n   receive the message body and is closing the connection, the client\n   SHOULD immediately cease transmitting the body and close its side of\n   the connection.\n\n<h3 class=\"h3\" id=\"section-6.6\">6.6.  Tear-down</h3>\n   The Connection header field (<a href=\"#section-6.1\">Section 6.1</a>) provides a \"close\"\n   connection option that a sender SHOULD send when it wishes to close\n   the connection after the current request/response pair.\n\n   A client that sends a \"close\" connection option MUST NOT send further\n   requests on that connection (after the one containing \"close\") and\n   MUST close the connection after reading the final response message\n   corresponding to this request.\n\n   A server that receives a \"close\" connection option MUST initiate a\n   close of the connection (see below) after it sends the final response\n   to the request that contained \"close\".  The server SHOULD send a\n   \"close\" connection option in its final response on that connection.\n   The server MUST NOT process any further requests received on that\n   connection.\n\n   A server that sends a \"close\" connection option MUST initiate a close\n   of the connection (see below) after it sends the response containing\n   \"close\".  The server MUST NOT process any further requests received\n   on that connection.\n\n   A client that receives a \"close\" connection option MUST cease sending\n   requests on that connection and close the connection after reading\n   the response message containing the \"close\"; if additional pipelined\n   requests had been sent on the connection, the client SHOULD NOT\n   assume that they will be processed by the server.\n\n   If a server performs an immediate close of a TCP connection, there is\n   a significant risk that the client will not be able to read the last\n   HTTP response.  If the server receives additional data from the\n   client on a fully closed connection, such as another request that was\n   sent by the client before receiving the server's response, the\n   server's TCP stack will send a reset packet to the client;\n   unfortunately, the reset packet might erase the client's\n   unacknowledged input buffers before they can be read and interpreted\n   by the client's HTTP parser.\n\n   To avoid the TCP reset problem, servers typically close a connection\n   in stages.  First, the server performs a half-close by closing only\n   the write side of the read/write connection.  The server then\n   continues to read from the connection until it receives a\n   corresponding close by the client, or until the server is reasonably\n   certain that its own TCP stack has received the client's\n   acknowledgement of the packet(s) containing the server's last\n   response.  Finally, the server fully closes the connection.\n\n   It is unknown whether the reset problem is exclusive to TCP or might\n   also be found in other transport connection protocols.\n\n<h3 class=\"h3\" id=\"section-6.7\">6.7.  Upgrade</h3>\n   The \"Upgrade\" header field is intended to provide a simple mechanism\n   for transitioning from HTTP/1.1 to some other protocol on the same\n   connection.  A client MAY send a list of protocols in the Upgrade\n   header field of a request to invite the server to switch to one or\n   more of those protocols, in order of descending preference, before\n   sending the final response.  A server MAY ignore a received Upgrade\n   header field if it wishes to continue using the current protocol on\n   that connection.  Upgrade cannot be used to insist on a protocol\n   change.\n\n     Upgrade          = 1#protocol\n\n     protocol         = protocol-name [\"/\" protocol-version]\n     protocol-name    = token\n     protocol-version = token\n\n   A server that sends a 101 (Switching Protocols) response MUST send an\n   Upgrade header field to indicate the new protocol(s) to which the\n   connection is being switched; if multiple protocol layers are being\n   switched, the sender MUST list the protocols in layer-ascending\n   order.  A server MUST NOT switch to a protocol that was not indicated\n   by the client in the corresponding request's Upgrade header field.  A\n\n   server MAY choose to ignore the order of preference indicated by the\n   client and select the new protocol(s) based on other factors, such as\n   the nature of the request or the current load on the server.\n\n   A server that sends a 426 (Upgrade Required) response MUST send an\n   Upgrade header field to indicate the acceptable protocols, in order\n   of descending preference.\n\n   A server MAY send an Upgrade header field in any other response to\n   advertise that it implements support for upgrading to the listed\n   protocols, in order of descending preference, when appropriate for a\n   future request.\n\n   The following is a hypothetical example sent by a client:\n\n     GET /hello.txt HTTP/1.1\n     Host: www.example.com\n     Connection: upgrade\n     Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11\n\n\n   The capabilities and nature of the application-level communication\n   after the protocol change is entirely dependent upon the new\n   protocol(s) chosen.  However, immediately after sending the 101\n   (Switching Protocols) response, the server is expected to continue\n   responding to the original request as if it had received its\n   equivalent within the new protocol (i.e., the server still has an\n   outstanding request to satisfy after the protocol has been changed,\n   and is expected to do so without requiring the request to be\n   repeated).\n\n   For example, if the Upgrade header field is received in a GET request\n   and the server decides to switch protocols, it first responds with a\n   101 (Switching Protocols) message in HTTP/1.1 and then immediately\n   follows that with the new protocol's equivalent of a response to a\n   GET on the target resource.  This allows a connection to be upgraded\n   to protocols with the same semantics as HTTP without the latency cost\n   of an additional round trip.  A server MUST NOT switch protocols\n   unless the received message semantics can be honored by the new\n   protocol; an OPTIONS request can be honored by any protocol.\n\n   The following is an example response to the above hypothetical\n   request:\n\n     HTTP/1.1 101 Switching Protocols\n     Connection: upgrade\n     Upgrade: HTTP/2.0\n\n     [... data stream switches to HTTP/2.0 with an appropriate response\n     (as defined by new protocol) to the \"GET /hello.txt\" request ...]\n\n   When Upgrade is sent, the sender MUST also send a Connection header\n   field (<a href=\"#section-6.1\">Section 6.1</a>) that contains an \"upgrade\" connection option, in\n   order to prevent Upgrade from being accidentally forwarded by\n   intermediaries that might not implement the listed protocols.  A\n   server MUST ignore an Upgrade header field that is received in an\n   HTTP/1.0 request.\n\n   A client cannot begin using an upgraded protocol on the connection\n   until it has completely sent the request message (i.e., the client\n   can't change the protocol it is sending in the middle of a message).\n   If a server receives both an Upgrade and an Expect header field with\n   the \"100-continue\" expectation (<a href=\"https://tools.ietf.org/html/rfc7231#section-5.1.1\">Section 5.1.1 of [RFC7231]</a>), the\n   server MUST send a 100 (Continue) response before sending a 101\n   (Switching Protocols) response.\n\n   The Upgrade header field only applies to switching protocols on top\n   of the existing connection; it cannot be used to switch the\n   underlying connection (transport) protocol, nor to switch the\n   existing communication to a different connection.  For those\n   purposes, it is more appropriate to use a 3xx (Redirection) response\n   (<a href=\"https://tools.ietf.org/html/rfc7231#section-6.4\">Section 6.4 of [RFC7231]</a>).\n\n   This specification only defines the protocol name \"HTTP\" for use by\n   the family of Hypertext Transfer Protocols, as defined by the HTTP\n   version rules of <a href=\"#section-2.6\">Section 2.6</a> and future updates to this\n   specification.  Additional tokens ought to be registered with IANA\n   using the registration procedure defined in <a href=\"#section-8.6\">Section 8.6</a>.\n\n<h2 class=\"h2\" id=\"section-7\">7.  ABNF List Extension: #rule</h2>\n   A #rule extension to the ABNF rules of [<a href=\"https://tools.ietf.org/html/rfc5234\" title='\"Augmented BNF for Syntax Specifications: ABNF\"'>RFC5234</a>] is used to improve\n   readability in the definitions of some header field values.\n\n   A construct \"#\" is defined, similar to \"*\", for defining\n   comma-delimited lists of elements.  The full form is \"&lt;n&gt;#&lt;m&gt;element\"\n   indicating at least &lt;n&gt; and at most &lt;m&gt; elements, each separated by a\n   single comma (\",\") and optional whitespace (OWS).\n\n   In any production that uses the list construct, a sender MUST NOT\n   generate empty list elements.  In other words, a sender MUST generate\n   lists that satisfy the following syntax:\n\n     1#element =&gt; element *( OWS \",\" OWS element )\n\n   and:\n\n     #element =&gt; [ 1#element ]\n\n   and for n &gt;= 1 and m &gt; 1:\n\n     &lt;n&gt;#&lt;m&gt;element =&gt; element &lt;n-1&gt;*&lt;m-1&gt;( OWS \",\" OWS element )\n\n   For compatibility with legacy list rules, a recipient MUST parse and\n   ignore a reasonable number of empty list elements: enough to handle\n   common mistakes by senders that merge values, but not so much that\n   they could be used as a denial-of-service mechanism.  In other words,\n   a recipient MUST accept lists that satisfy the following syntax:\n\n     #element =&gt; [ ( \",\" / element ) *( OWS \",\" [ OWS element ] ) ]\n\n     1#element =&gt; *( \",\" OWS ) element *( OWS \",\" [ OWS element ] )\n\n   Empty elements do not contribute to the count of elements present.\n   For example, given these ABNF productions:\n\n     example-list      = 1#example-list-elmt\n     example-list-elmt = token ; see <a href=\"#section-3.2.6\">Section 3.2.6</a>\n\n   Then the following are valid values for example-list (not including\n   the double quotes, which are present for delimitation only):\n\n     \"foo,bar\"\n     \"foo ,bar,\"\n     \"foo , ,bar,charlie   \"\n\n   In contrast, the following values would be invalid, since at least\n   one non-empty element is required by the example-list production:\n\n     \"\"\n     \",\"\n     \",   ,\"\n\n   <a href=\"#appendix-B\">Appendix B</a> shows the collected ABNF for recipients after the list\n   constructs have been expanded.\n\n<h2 class=\"h2\" id=\"section-8\">8.  IANA Considerations</h2>\n<h3 class=\"h3\" id=\"section-8.1\">8.1.  Header Field Registration</h3>\n   HTTP header fields are registered within the \"Message Headers\"\n   registry maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/message-headers/\">http://www.iana.org/assignments/message-headers/</a>&gt;.\n\n   This document defines the following HTTP header fields, so the\n   \"Permanent Message Header Field Names\" registry has been updated\n   accordingly (see [<a href=\"#ref-BCP90\" title='\"Registration Procedures for Message Header Fields\"'>BCP90</a>]).\n\n   +-------------------+----------+----------+---------------+\n   | Header Field Name | Protocol | Status   | Reference     |\n   +-------------------+----------+----------+---------------+\n   | Connection        | http     | standard | <a href=\"#section-6.1\">Section 6.1</a>   |\n   | Content-Length    | http     | standard | <a href=\"#section-3.3.2\">Section 3.3.2</a> |\n   | Host              | http     | standard | <a href=\"#section-5.4\">Section 5.4</a>   |\n   | TE                | http     | standard | <a href=\"#section-4.3\">Section 4.3</a>   |\n   | Trailer           | http     | standard | <a href=\"#section-4.4\">Section 4.4</a>   |\n   | Transfer-Encoding | http     | standard | <a href=\"#section-3.3.1\">Section 3.3.1</a> |\n   | Upgrade           | http     | standard | <a href=\"#section-6.7\">Section 6.7</a>   |\n   | Via               | http     | standard | <a href=\"#section-5.7.1\">Section 5.7.1</a> |\n   +-------------------+----------+----------+---------------+\n\n   Furthermore, the header field-name \"Close\" has been registered as\n   \"reserved\", since using that name as an HTTP header field might\n   conflict with the \"close\" connection option of the Connection header\n   field (<a href=\"#section-6.1\">Section 6.1</a>).\n\n   +-------------------+----------+----------+-------------+\n   | Header Field Name | Protocol | Status   | Reference   |\n   +-------------------+----------+----------+-------------+\n   | Close             | http     | reserved | <a href=\"#section-8.1\">Section 8.1</a> |\n   +-------------------+----------+----------+-------------+\n\n   The change controller is: \"IETF (iesg@ietf.org) - Internet\n   Engineering Task Force\".\n\n<h3 class=\"h3\" id=\"section-8.2\">8.2.  URI Scheme Registration</h3>\n   IANA maintains the registry of URI Schemes [<a href=\"#ref-BCP115\" title='\"Guidelines and Registration Procedures for New URI Schemes\"'>BCP115</a>] at\n   &lt;<a href=\"http://www.iana.org/assignments/uri-schemes/\">http://www.iana.org/assignments/uri-schemes/</a>&gt;.\n\n   This document defines the following URI schemes, so the \"Permanent\n   URI Schemes\" registry has been updated accordingly.\n\n   +------------+------------------------------------+---------------+\n   | URI Scheme | Description                        | Reference     |\n   +------------+------------------------------------+---------------+\n   | http       | Hypertext Transfer Protocol        | <a href=\"#section-2.7.1\">Section 2.7.1</a> |\n   | https      | Hypertext Transfer Protocol Secure | <a href=\"#section-2.7.2\">Section 2.7.2</a> |\n   +------------+------------------------------------+---------------+\n\n<h3 class=\"h3\" id=\"section-8.3\">8.3.  Internet Media Type Registration</h3>\n   IANA maintains the registry of Internet media types [<a href=\"#ref-BCP13\" title='\"Media Type Specifications and Registration Procedures\"'>BCP13</a>] at\n   &lt;<a href=\"http://www.iana.org/assignments/media-types\">http://www.iana.org/assignments/media-types</a>&gt;.\n\n   This document serves as the specification for the Internet media\n   types \"message/http\" and \"application/http\".  The following has been\n   registered with IANA.\n\n<h4 class=\"h4\" id=\"section-8.3.1\">8.3.1.  Internet Media Type message/http</h4>\n   The message/http type can be used to enclose a single HTTP request or\n   response message, provided that it obeys the MIME restrictions for\n   all \"message\" types regarding line length and encodings.\n\n   Type name:  message\n\n   Subtype name:  http\n\n   Required parameters:  N/A\n\n   Optional parameters:  version, msgtype\n\n      version:  The HTTP-version number of the enclosed message (e.g.,\n         \"1.1\").  If not present, the version can be determined from the\n         first line of the body.\n\n      msgtype:  The message type -- \"request\" or \"response\".  If not\n         present, the type can be determined from the first line of the\n         body.\n\n   Encoding considerations:  only \"7bit\", \"8bit\", or \"binary\" are\n      permitted\n\n   Security considerations:  see <a href=\"#section-9\">Section 9</a>\n\n   Interoperability considerations:  N/A\n\n   Published specification:  This specification (see <a href=\"#section-8.3.1\">Section 8.3.1</a>).\n\n   Applications that use this media type:  N/A\n\n   Fragment identifier considerations:  N/A\n\n   Additional information:\n\n      Magic number(s):  N/A\n\n      Deprecated alias names for this type:  N/A\n\n      File extension(s):  N/A\n\n      Macintosh file type code(s):  N/A\n\n   Person and email address to contact for further information:\n      See Authors' Addresses section.\n\n   Intended usage:  COMMON\n\n   Restrictions on usage:  N/A\n\n   Author:  See Authors' Addresses section.\n\n   Change controller:  IESG\n\n<h4 class=\"h4\" id=\"section-8.3.2\">8.3.2.  Internet Media Type application/http</h4>\n   The application/http type can be used to enclose a pipeline of one or\n   more HTTP request or response messages (not intermixed).\n\n   Type name:  application\n\n   Subtype name:  http\n\n   Required parameters:  N/A\n\n   Optional parameters:  version, msgtype\n\n      version:  The HTTP-version number of the enclosed messages (e.g.,\n         \"1.1\").  If not present, the version can be determined from the\n         first line of the body.\n\n      msgtype:  The message type -- \"request\" or \"response\".  If not\n         present, the type can be determined from the first line of the\n         body.\n\n   Encoding considerations:  HTTP messages enclosed by this type are in\n      \"binary\" format; use of an appropriate Content-Transfer-Encoding\n      is required when transmitted via email.\n\n   Security considerations:  see <a href=\"#section-9\">Section 9</a>\n\n   Interoperability considerations:  N/A\n\n   Published specification:  This specification (see <a href=\"#section-8.3.2\">Section 8.3.2</a>).\n\n   Applications that use this media type:  N/A\n\n   Fragment identifier considerations:  N/A\n\n   Additional information:\n\n      Deprecated alias names for this type:  N/A\n\n      Magic number(s):  N/A\n\n      File extension(s):  N/A\n\n      Macintosh file type code(s):  N/A\n\n   Person and email address to contact for further information:\n      See Authors' Addresses section.\n\n   Intended usage:  COMMON\n\n   Restrictions on usage:  N/A\n\n   Author:  See Authors' Addresses section.\n\n   Change controller:  IESG\n\n<h3 class=\"h3\" id=\"section-8.4\">8.4.  Transfer Coding Registry</h3>\n   The \"HTTP Transfer Coding Registry\" defines the namespace for\n   transfer coding names.  It is maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/http-parameters\">http://www.iana.org/assignments/http-parameters</a>&gt;.\n\n<h4 class=\"h4\" id=\"section-8.4.1\">8.4.1.  Procedure</h4>\n   Registrations MUST include the following fields:\n\n   o  Name\n\n   o  Description\n\n   o  Pointer to specification text\n\n   Names of transfer codings MUST NOT overlap with names of content\n   codings (<a href=\"https://tools.ietf.org/html/rfc7231#section-3.1.2.1\">Section 3.1.2.1 of [RFC7231]</a>) unless the encoding\n   transformation is identical, as is the case for the compression\n   codings defined in <a href=\"#section-4.2\">Section 4.2</a>.\n\n   Values to be added to this namespace require IETF Review (see <a href=\"#section-4.1\">Section</a>\n   <a href=\"#section-4.1\">4.1</a> of [<a href=\"https://tools.ietf.org/html/rfc5226\" title='\"Guidelines for Writing an IANA Considerations Section in RFCs\"'>RFC5226</a>]), and MUST conform to the purpose of transfer coding\n   defined in this specification.\n\n   Use of program names for the identification of encoding formats is\n   not desirable and is discouraged for future encodings.\n\n<h4 class=\"h4\" id=\"section-8.4.2\">8.4.2.  Registration</h4>\n   The \"HTTP Transfer Coding Registry\" has been updated with the\n   registrations below:\n\n   +------------+--------------------------------------+---------------+\n   | Name       | Description                          | Reference     |\n   +------------+--------------------------------------+---------------+\n   | chunked    | Transfer in a series of chunks       | <a href=\"#section-4.1\">Section 4.1</a>   |\n   | compress   | UNIX \"compress\" data format [<a href=\"#ref-Welch\" title='\"A Technique for High-Performance Data Compression\"'>Welch</a>]  | <a href=\"#section-4.2.1\">Section 4.2.1</a> |\n   | deflate    | \"deflate\" compressed data            | <a href=\"#section-4.2.2\">Section 4.2.2</a> |\n   |            | ([<a href=\"https://tools.ietf.org/html/rfc1951\" title='\"DEFLATE Compressed Data Format Specification version 1.3\"'>RFC1951</a>]) inside the \"zlib\" data   |               |\n   |            | format ([<a href=\"https://tools.ietf.org/html/rfc1950\" title='\"ZLIB Compressed Data Format Specification version 3.3\"'>RFC1950</a>])                   |               |\n   | gzip       | GZIP file format [<a href=\"https://tools.ietf.org/html/rfc1952\" title='\"GZIP file format specification version 4.3\"'>RFC1952</a>]           | <a href=\"#section-4.2.3\">Section 4.2.3</a> |\n   | x-compress | Deprecated (alias for compress)      | <a href=\"#section-4.2.1\">Section 4.2.1</a> |\n   | x-gzip     | Deprecated (alias for gzip)          | <a href=\"#section-4.2.3\">Section 4.2.3</a> |\n   +------------+--------------------------------------+---------------+\n\n<h3 class=\"h3\" id=\"section-8.5\">8.5.  Content Coding Registration</h3>\n   IANA maintains the \"HTTP Content Coding Registry\" at\n   &lt;<a href=\"http://www.iana.org/assignments/http-parameters\">http://www.iana.org/assignments/http-parameters</a>&gt;.\n\n   The \"HTTP Content Coding Registry\" has been updated with the\n   registrations below:\n\n   +------------+--------------------------------------+---------------+\n   | Name       | Description                          | Reference     |\n   +------------+--------------------------------------+---------------+\n   | compress   | UNIX \"compress\" data format [<a href=\"#ref-Welch\" title='\"A Technique for High-Performance Data Compression\"'>Welch</a>]  | <a href=\"#section-4.2.1\">Section 4.2.1</a> |\n   | deflate    | \"deflate\" compressed data            | <a href=\"#section-4.2.2\">Section 4.2.2</a> |\n   |            | ([<a href=\"https://tools.ietf.org/html/rfc1951\" title='\"DEFLATE Compressed Data Format Specification version 1.3\"'>RFC1951</a>]) inside the \"zlib\" data   |               |\n   |            | format ([<a href=\"https://tools.ietf.org/html/rfc1950\" title='\"ZLIB Compressed Data Format Specification version 3.3\"'>RFC1950</a>])                   |               |\n   | gzip       | GZIP file format [<a href=\"https://tools.ietf.org/html/rfc1952\" title='\"GZIP file format specification version 4.3\"'>RFC1952</a>]           | <a href=\"#section-4.2.3\">Section 4.2.3</a> |\n   | x-compress | Deprecated (alias for compress)      | <a href=\"#section-4.2.1\">Section 4.2.1</a> |\n   | x-gzip     | Deprecated (alias for gzip)          | <a href=\"#section-4.2.3\">Section 4.2.3</a> |\n   +------------+--------------------------------------+---------------+\n\n<h3 class=\"h3\" id=\"section-8.6\">8.6.  Upgrade Token Registry</h3>\n   The \"Hypertext Transfer Protocol (HTTP) Upgrade Token Registry\"\n   defines the namespace for protocol-name tokens used to identify\n   protocols in the Upgrade header field.  The registry is maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/http-upgrade-tokens\">http://www.iana.org/assignments/http-upgrade-tokens</a>&gt;.\n\n<h4 class=\"h4\" id=\"section-8.6.1\">8.6.1.  Procedure</h4>\n   Each registered protocol name is associated with contact information\n   and an optional set of specifications that details how the connection\n   will be processed after it has been upgraded.\n\n   Registrations happen on a \"First Come First Served\" basis (see\n   <a href=\"https://tools.ietf.org/html/rfc5226#section-4.1\">Section 4.1 of [RFC5226]</a>) and are subject to the following rules:\n\n   1.  A protocol-name token, once registered, stays registered forever.\n\n   2.  The registration MUST name a responsible party for the\n       registration.\n\n   3.  The registration MUST name a point of contact.\n\n   4.  The registration MAY name a set of specifications associated with\n       that token.  Such specifications need not be publicly available.\n\n   5.  The registration SHOULD name a set of expected \"protocol-version\"\n       tokens associated with that token at the time of registration.\n\n   6.  The responsible party MAY change the registration at any time.\n       The IANA will keep a record of all such changes, and make them\n       available upon request.\n\n   7.  The IESG MAY reassign responsibility for a protocol token.  This\n       will normally only be used in the case when a responsible party\n       cannot be contacted.\n\n   This registration procedure for HTTP Upgrade Tokens replaces that\n   previously defined in <a href=\"https://tools.ietf.org/html/rfc2817#section-7.2\">Section 7.2 of [RFC2817]</a>.\n\n<h4 class=\"h4\" id=\"section-8.6.2\">8.6.2.  Upgrade Token Registration</h4>\n   The \"HTTP\" entry in the upgrade token registry has been updated with\n   the registration below:\n\n   +-------+----------------------+----------------------+-------------+\n   | Value | Description          | Expected Version     | Reference   |\n   |       |                      | Tokens               |             |\n   +-------+----------------------+----------------------+-------------+\n   | HTTP  | Hypertext Transfer   | any DIGIT.DIGIT      | <a href=\"#section-2.6\">Section 2.6</a> |\n   |       | Protocol             | (e.g, \"2.0\")         |             |\n   +-------+----------------------+----------------------+-------------+\n\n   The responsible party is: \"IETF (iesg@ietf.org) - Internet\n   Engineering Task Force\".\n\n<h2 class=\"h2\" id=\"section-9\">9.  Security Considerations</h2>\n   This section is meant to inform developers, information providers,\n   and users of known security considerations relevant to HTTP message\n   syntax, parsing, and routing.  Security considerations about HTTP\n   semantics and payloads are addressed in [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>].\n\n<h3 class=\"h3\" id=\"section-9.1\">9.1.  Establishing Authority</h3>\n   HTTP relies on the notion of an authoritative response: a response\n   that has been determined by (or at the direction of) the authority\n   identified within the target URI to be the most appropriate response\n   for that request given the state of the target resource at the time\n   of response message origination.  Providing a response from a\n   non-authoritative source, such as a shared cache, is often useful to\n   improve performance and availability, but only to the extent that the\n   source can be trusted or the distrusted response can be safely used.\n\n   Unfortunately, establishing authority can be difficult.  For example,\n   phishing is an attack on the user's perception of authority, where\n   that perception can be misled by presenting similar branding in\n\n   hypertext, possibly aided by userinfo obfuscating the authority\n   component (see <a href=\"#section-2.7.1\">Section 2.7.1</a>).  User agents can reduce the impact of\n   phishing attacks by enabling users to easily inspect a target URI\n   prior to making an action, by prominently distinguishing (or\n   rejecting) userinfo when present, and by not sending stored\n   credentials and cookies when the referring document is from an\n   unknown or untrusted source.\n\n   When a registered name is used in the authority component, the \"http\"\n   URI scheme (<a href=\"#section-2.7.1\">Section 2.7.1</a>) relies on the user's local name resolution\n   service to determine where it can find authoritative responses.  This\n   means that any attack on a user's network host table, cached names,\n   or name resolution libraries becomes an avenue for attack on\n   establishing authority.  Likewise, the user's choice of server for\n   Domain Name Service (DNS), and the hierarchy of servers from which it\n   obtains resolution results, could impact the authenticity of address\n   mappings; DNS Security Extensions (DNSSEC, [<a href=\"https://tools.ietf.org/html/rfc4033\" title='\"DNS Security Introduction and Requirements\"'>RFC4033</a>]) are one way to\n   improve authenticity.\n\n   Furthermore, after an IP address is obtained, establishing authority\n   for an \"http\" URI is vulnerable to attacks on Internet Protocol\n   routing.\n\n   The \"https\" scheme (<a href=\"#section-2.7.2\">Section 2.7.2</a>) is intended to prevent (or at\n   least reveal) many of these potential attacks on establishing\n   authority, provided that the negotiated TLS connection is secured and\n   the client properly verifies that the communicating server's identity\n   matches the target URI's authority component (see [<a href=\"https://tools.ietf.org/html/rfc2818\" title='\"HTTP Over TLS\"'>RFC2818</a>]).\n   Correctly implementing such verification can be difficult (see\n   [<a href=\"#ref-Georgiev\" title='\"The Most Dangerous Code in the World: Validating SSL Certificates in Non- browser Software\"'>Georgiev</a>]).\n\n<h3 class=\"h3\" id=\"section-9.2\">9.2.  Risks of Intermediaries</h3>\n   By their very nature, HTTP intermediaries are men-in-the-middle and,\n   thus, represent an opportunity for man-in-the-middle attacks.\n   Compromise of the systems on which the intermediaries run can result\n   in serious security and privacy problems.  Intermediaries might have\n   access to security-related information, personal information about\n   individual users and organizations, and proprietary information\n   belonging to users and content providers.  A compromised\n   intermediary, or an intermediary implemented or configured without\n   regard to security and privacy considerations, might be used in the\n   commission of a wide range of potential attacks.\n\n   Intermediaries that contain a shared cache are especially vulnerable\n   to cache poisoning attacks, as described in <a href=\"https://tools.ietf.org/html/rfc7234#section-8\">Section 8 of [RFC7234]</a>.\n\n   Implementers need to consider the privacy and security implications\n   of their design and coding decisions, and of the configuration\n   options they provide to operators (especially the default\n   configuration).\n\n   Users need to be aware that intermediaries are no more trustworthy\n   than the people who run them; HTTP itself cannot solve this problem.\n\n<h3 class=\"h3\" id=\"section-9.3\">9.3.  Attacks via Protocol Element Length</h3>\n   Because HTTP uses mostly textual, character-delimited fields, parsers\n   are often vulnerable to attacks based on sending very long (or very\n   slow) streams of data, particularly where an implementation is\n   expecting a protocol element with no predefined length.\n\n   To promote interoperability, specific recommendations are made for\n   minimum size limits on request-line (<a href=\"#section-3.1.1\">Section 3.1.1</a>) and header fields\n   (<a href=\"#section-3.2\">Section 3.2</a>).  These are minimum recommendations, chosen to be\n   supportable even by implementations with limited resources; it is\n   expected that most implementations will choose substantially higher\n   limits.\n\n   A server can reject a message that has a request-target that is too\n   long (<a href=\"https://tools.ietf.org/html/rfc7231#section-6.5.12\">Section 6.5.12 of [RFC7231]</a>) or a request payload that is too\n   large (<a href=\"https://tools.ietf.org/html/rfc7231#section-6.5.11\">Section 6.5.11 of [RFC7231]</a>).  Additional status codes related\n   to capacity limits have been defined by extensions to HTTP [<a href=\"https://tools.ietf.org/html/rfc6585\" title='\"Additional HTTP Status Codes\"'>RFC6585</a>].\n\n   Recipients ought to carefully limit the extent to which they process\n   other protocol elements, including (but not limited to) request\n   methods, response status phrases, header field-names, numeric values,\n   and body chunks.  Failure to limit such processing can result in\n   buffer overflows, arithmetic overflows, or increased vulnerability to\n   denial-of-service attacks.\n\n<h3 class=\"h3\" id=\"section-9.4\">9.4.  Response Splitting</h3>\n   Response splitting (a.k.a, CRLF injection) is a common technique,\n   used in various attacks on Web usage, that exploits the line-based\n   nature of HTTP message framing and the ordered association of\n   requests to responses on persistent connections [<a href=\"#ref-Klein\" title='\"Divide and Conquer - HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics\"'>Klein</a>].  This\n   technique can be particularly damaging when the requests pass through\n   a shared cache.\n\n   Response splitting exploits a vulnerability in servers (usually\n   within an application server) where an attacker can send encoded data\n   within some parameter of the request that is later decoded and echoed\n   within any of the response header fields of the response.  If the\n   decoded data is crafted to look like the response has ended and a\n\n   subsequent response has begun, the response has been split and the\n   content within the apparent second response is controlled by the\n   attacker.  The attacker can then make any other request on the same\n   persistent connection and trick the recipients (including\n   intermediaries) into believing that the second half of the split is\n   an authoritative answer to the second request.\n\n   For example, a parameter within the request-target might be read by\n   an application server and reused within a redirect, resulting in the\n   same parameter being echoed in the Location header field of the\n   response.  If the parameter is decoded by the application and not\n   properly encoded when placed in the response field, the attacker can\n   send encoded CRLF octets and other content that will make the\n   application's single response look like two or more responses.\n\n   A common defense against response splitting is to filter requests for\n   data that looks like encoded CR and LF (e.g., \"%0D\" and \"%0A\").\n   However, that assumes the application server is only performing URI\n   decoding, rather than more obscure data transformations like charset\n   transcoding, XML entity translation, base64 decoding, sprintf\n   reformatting, etc.  A more effective mitigation is to prevent\n   anything other than the server's core protocol libraries from sending\n   a CR or LF within the header section, which means restricting the\n   output of header fields to APIs that filter for bad octets and not\n   allowing application servers to write directly to the protocol\n   stream.\n\n<h3 class=\"h3\" id=\"section-9.5\">9.5.  Request Smuggling</h3>\n   Request smuggling ([<a href=\"#ref-Linhart\" title='\"HTTP Request Smuggling\"'>Linhart</a>]) is a technique that exploits\n   differences in protocol parsing among various recipients to hide\n   additional requests (which might otherwise be blocked or disabled by\n   policy) within an apparently harmless request.  Like response\n   splitting, request smuggling can lead to a variety of attacks on HTTP\n   usage.\n\n   This specification has introduced new requirements on request\n   parsing, particularly with regard to message framing in\n   <a href=\"#section-3.3.3\">Section 3.3.3</a>, to reduce the effectiveness of request smuggling.\n\n<h3 class=\"h3\" id=\"section-9.6\">9.6.  Message Integrity</h3>\n   HTTP does not define a specific mechanism for ensuring message\n   integrity, instead relying on the error-detection ability of\n   underlying transport protocols and the use of length or\n   chunk-delimited framing to detect completeness.  Additional integrity\n   mechanisms, such as hash functions or digital signatures applied to\n   the content, can be selectively added to messages via extensible\n\n   metadata header fields.  Historically, the lack of a single integrity\n   mechanism has been justified by the informal nature of most HTTP\n   communication.  However, the prevalence of HTTP as an information\n   access mechanism has resulted in its increasing use within\n   environments where verification of message integrity is crucial.\n\n   User agents are encouraged to implement configurable means for\n   detecting and reporting failures of message integrity such that those\n   means can be enabled within environments for which integrity is\n   necessary.  For example, a browser being used to view medical history\n   or drug interaction information needs to indicate to the user when\n   such information is detected by the protocol to be incomplete,\n   expired, or corrupted during transfer.  Such mechanisms might be\n   selectively enabled via user agent extensions or the presence of\n   message integrity metadata in a response.  At a minimum, user agents\n   ought to provide some indication that allows a user to distinguish\n   between a complete and incomplete response message (<a href=\"#section-3.4\">Section 3.4</a>) when\n   such verification is desired.\n\n<h3 class=\"h3\" id=\"section-9.7\">9.7.  Message Confidentiality</h3>\n   HTTP relies on underlying transport protocols to provide message\n   confidentiality when that is desired.  HTTP has been specifically\n   designed to be independent of the transport protocol, such that it\n   can be used over many different forms of encrypted connection, with\n   the selection of such transports being identified by the choice of\n   URI scheme or within user agent configuration.\n\n   The \"https\" scheme can be used to identify resources that require a\n   confidential connection, as described in <a href=\"#section-2.7.2\">Section 2.7.2</a>.\n\n<h3 class=\"h3\" id=\"section-9.8\">9.8.  Privacy of Server Log Information</h3>\n   A server is in the position to save personal data about a user's\n   requests over time, which might identify their reading patterns or\n   subjects of interest.  In particular, log information gathered at an\n   intermediary often contains a history of user agent interaction,\n   across a multitude of sites, that can be traced to individual users.\n\n   HTTP log information is confidential in nature; its handling is often\n   constrained by laws and regulations.  Log information needs to be\n   securely stored and appropriate guidelines followed for its analysis.\n   Anonymization of personal information within individual entries\n   helps, but it is generally not sufficient to prevent real log traces\n   from being re-identified based on correlation with other access\n   characteristics.  As such, access traces that are keyed to a specific\n   client are unsafe to publish even if the key is pseudonymous.\n\n   To minimize the risk of theft or accidental publication, log\n   information ought to be purged of personally identifiable\n   information, including user identifiers, IP addresses, and\n   user-provided query parameters, as soon as that information is no\n   longer necessary to support operational needs for security, auditing,\n   or fraud control.\n\n<h2 class=\"h2\" id=\"section-10\">10.  Acknowledgments</h2>\n   This edition of HTTP/1.1 builds on the many contributions that went\n   into <a href=\"https://tools.ietf.org/html/rfc1945\">RFC 1945</a>, <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a>, <a href=\"https://tools.ietf.org/html/rfc2145\">RFC 2145</a>, and <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>, including\n   substantial contributions made by the previous authors, editors, and\n   Working Group Chairs: Tim Berners-Lee, Ari Luotonen, Roy T. Fielding,\n   Henrik Frystyk Nielsen, Jim Gettys, Jeffrey C. Mogul, Larry Masinter,\n   and Paul J. Leach.  Mark Nottingham oversaw this effort as Working\n   Group Chair.\n\n   Since 1999, the following contributors have helped improve the HTTP\n   specification by reporting bugs, asking smart questions, drafting or\n   reviewing text, and evaluating open issues:\n\n   Adam Barth, Adam Roach, Addison Phillips, Adrian Chadd, Adrian Cole,\n   Adrien W. de Croy, Alan Ford, Alan Ruttenberg, Albert Lunde, Alek\n   Storm, Alex Rousskov, Alexandre Morgaut, Alexey Melnikov, Alisha\n   Smith, Amichai Rothman, Amit Klein, Amos Jeffries, Andreas Maier,\n   Andreas Petersson, Andrei Popov, Anil Sharma, Anne van Kesteren,\n   Anthony Bryan, Asbjorn Ulsberg, Ashok Kumar, Balachander\n   Krishnamurthy, Barry Leiba, Ben Laurie, Benjamin Carlyle, Benjamin\n   Niven-Jenkins, Benoit Claise, Bil Corry, Bill Burke, Bjoern\n   Hoehrmann, Bob Scheifler, Boris Zbarsky, Brett Slatkin, Brian Kell,\n   Brian McBarron, Brian Pane, Brian Raymor, Brian Smith, Bruce Perens,\n   Bryce Nesbitt, Cameron Heavon-Jones, Carl Kugler, Carsten Bormann,\n   Charles Fry, Chris Burdess, Chris Newman, Christian Huitema, Cyrus\n   Daboo, Dale Robert Anderson, Dan Wing, Dan Winship, Daniel Stenberg,\n   Darrel Miller, Dave Cridland, Dave Crocker, Dave Kristol, Dave\n   Thaler, David Booth, David Singer, David W. Morris, Diwakar Shetty,\n   Dmitry Kurochkin, Drummond Reed, Duane Wessels, Edward Lee, Eitan\n   Adler, Eliot Lear, Emile Stephan, Eran Hammer-Lahav, Eric D.\n   Williams, Eric J. Bowman, Eric Lawrence, Eric Rescorla, Erik\n   Aronesty, EungJun Yi, Evan Prodromou, Felix Geisendoerfer, Florian\n   Weimer, Frank Ellermann, Fred Akalin, Fred Bohle, Frederic Kayser,\n   Gabor Molnar, Gabriel Montenegro, Geoffrey Sneddon, Gervase Markham,\n   Gili Tzabari, Grahame Grieve, Greg Slepak, Greg Wilkins, Grzegorz\n   Calkowski, Harald Tveit Alvestrand, Harry Halpin, Helge Hess, Henrik\n   Nordstrom, Henry S. Thompson, Henry Story, Herbert van de Sompel,\n   Herve Ruellan, Howard Melman, Hugo Haas, Ian Fette, Ian Hickson, Ido\n   Safruti, Ilari Liusvaara, Ilya Grigorik, Ingo Struck, J. Ross Nicoll,\n   James Cloos, James H. Manger, James Lacey, James M. Snell, Jamie\n\n   Lokier, Jan Algermissen, Jari Arkko, Jeff Hodges (who came up with\n   the term 'effective Request-URI'), Jeff Pinner, Jeff Walden, Jim\n   Luther, Jitu Padhye, Joe D. Williams, Joe Gregorio, Joe Orton, Joel\n   Jaeggli, John C. Klensin, John C. Mallery, John Cowan, John Kemp,\n   John Panzer, John Schneider, John Stracke, John Sullivan, Jonas\n   Sicking, Jonathan A. Rees, Jonathan Billington, Jonathan Moore,\n   Jonathan Silvera, Jordi Ros, Joris Dobbelsteen, Josh Cohen, Julien\n   Pierre, Jungshik Shin, Justin Chapweske, Justin Erenkrantz, Justin\n   James, Kalvinder Singh, Karl Dubost, Kathleen Moriarty, Keith\n   Hoffman, Keith Moore, Ken Murchison, Koen Holtman, Konstantin\n   Voronkov, Kris Zyp, Leif Hedstrom, Lionel Morand, Lisa Dusseault,\n   Maciej Stachowiak, Manu Sporny, Marc Schneider, Marc Slemko, Mark\n   Baker, Mark Pauley, Mark Watson, Markus Isomaki, Markus Lanthaler,\n   Martin J. Duerst, Martin Musatov, Martin Nilsson, Martin Thomson,\n   Matt Lynch, Matthew Cox, Matthew Kerwin, Max Clark, Menachem Dodge,\n   Meral Shirazipour, Michael Burrows, Michael Hausenblas, Michael\n   Scharf, Michael Sweet, Michael Tuexen, Michael Welzl, Mike Amundsen,\n   Mike Belshe, Mike Bishop, Mike Kelly, Mike Schinkel, Miles Sabin,\n   Murray S. Kucherawy, Mykyta Yevstifeyev, Nathan Rixham, Nicholas\n   Shanks, Nico Williams, Nicolas Alvarez, Nicolas Mailhot, Noah Slater,\n   Osama Mazahir, Pablo Castro, Pat Hayes, Patrick R. McManus, Paul E.\n   Jones, Paul Hoffman, Paul Marquess, Pete Resnick, Peter Lepeska,\n   Peter Occil, Peter Saint-Andre, Peter Watkins, Phil Archer, Phil\n   Hunt, Philippe Mougin, Phillip Hallam-Baker, Piotr Dobrogost, Poul-\n   Henning Kamp, Preethi Natarajan, Rajeev Bector, Ray Polk, Reto\n   Bachmann-Gmuer, Richard Barnes, Richard Cyganiak, Rob Trace, Robby\n   Simpson, Robert Brewer, Robert Collins, Robert Mattson, Robert\n   O'Callahan, Robert Olofsson, Robert Sayre, Robert Siemer, Robert de\n   Wilde, Roberto Javier Godoy, Roberto Peon, Roland Zink, Ronny\n   Widjaja, Ryan Hamilton, S. Mike Dierken, Salvatore Loreto, Sam\n   Johnston, Sam Pullara, Sam Ruby, Saurabh Kulkarni, Scott Lawrence\n   (who maintained the original issues list), Sean B. Palmer, Sean\n   Turner, Sebastien Barnoud, Shane McCarron, Shigeki Ohtsu, Simon\n   Yarde, Stefan Eissing, Stefan Tilkov, Stefanos Harhalakis, Stephane\n   Bortzmeyer, Stephen Farrell, Stephen Kent, Stephen Ludin, Stuart\n   Williams, Subbu Allamaraju, Subramanian Moonesamy, Susan Hares,\n   Sylvain Hellegouarch, Tapan Divekar, Tatsuhiro Tsujikawa, Tatsuya\n   Hayashi, Ted Hardie, Ted Lemon, Thomas Broyer, Thomas Fossati, Thomas\n   Maslen, Thomas Nadeau, Thomas Nordin, Thomas Roessler, Tim Bray, Tim\n   Morgan, Tim Olsen, Tom Zhou, Travis Snoozy, Tyler Close, Vincent\n   Murphy, Wenbo Zhu, Werner Baumann, Wilbur Streett, Wilfredo Sanchez\n   Vega, William A. Rowe Jr., William Chan, Willy Tarreau, Xiaoshu Wang,\n   Yaron Goland, Yngve Nysaeter Pettersen, Yoav Nir, Yogesh Bang,\n   Yuchung Cheng, Yutaka Oiwa, Yves Lafon (long-time member of the\n   editor team), Zed A. Shaw, and Zhong Yu.\n\n   See <a href=\"https://tools.ietf.org/html/rfc2616#section-16\">Section 16 of [RFC2616]</a> for additional acknowledgements from\n   prior revisions.\n\n<h2 class=\"h2\" id=\"section-11\">11.  References</h2>\n<h3 class=\"h3\" id=\"section-11.1\">11.1.  Normative References</h3>\n   [<a name=\"ref-RFC0793\" id=\"ref-RFC0793\">RFC0793</a>]     Postel, J., \"Transmission Control Protocol\", STD 7,\n                 <a href=\"https://tools.ietf.org/html/rfc793\">RFC 793</a>, September 1981.\n\n   [<a name=\"ref-RFC1950\" id=\"ref-RFC1950\">RFC1950</a>]     Deutsch, L. and J-L. Gailly, \"ZLIB Compressed Data\n                 Format Specification version 3.3\", <a href=\"https://tools.ietf.org/html/rfc1950\">RFC 1950</a>, May 1996.\n\n   [<a name=\"ref-RFC1951\" id=\"ref-RFC1951\">RFC1951</a>]     Deutsch, P., \"DEFLATE Compressed Data Format\n                 Specification version 1.3\", <a href=\"https://tools.ietf.org/html/rfc1951\">RFC 1951</a>, May 1996.\n\n   [<a name=\"ref-RFC1952\" id=\"ref-RFC1952\">RFC1952</a>]     Deutsch, P., Gailly, J-L., Adler, M., Deutsch, L., and\n                 G. Randers-Pehrson, \"GZIP file format specification\n                 version 4.3\", <a href=\"https://tools.ietf.org/html/rfc1952\">RFC 1952</a>, May 1996.\n\n   [<a name=\"ref-RFC2119\" id=\"ref-RFC2119\">RFC2119</a>]     Bradner, S., \"Key words for use in RFCs to Indicate\n                 Requirement Levels\", <a href=\"https://tools.ietf.org/html/bcp14\">BCP 14</a>, <a href=\"https://tools.ietf.org/html/rfc2119\">RFC 2119</a>, March 1997.\n\n   [<a name=\"ref-RFC3986\" id=\"ref-RFC3986\">RFC3986</a>]     Berners-Lee, T., Fielding, R., and L. Masinter,\n                 \"Uniform Resource Identifier (URI): Generic Syntax\",\n                 STD 66, <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>, January 2005.\n\n   [<a name=\"ref-RFC5234\" id=\"ref-RFC5234\">RFC5234</a>]     Crocker, D., Ed. and P. Overell, \"Augmented BNF for\n                 Syntax Specifications: ABNF\", STD 68, <a href=\"https://tools.ietf.org/html/rfc5234\">RFC 5234</a>,\n                 January 2008.\n\n   [<a name=\"ref-RFC7231\" id=\"ref-RFC7231\">RFC7231</a>]     Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext\n                 Transfer Protocol (HTTP/1.1): Semantics and Content\",\n                 <a href=\"https://tools.ietf.org/html/rfc7231\">RFC 7231</a>, June 2014.\n\n   [<a name=\"ref-RFC7232\" id=\"ref-RFC7232\">RFC7232</a>]     Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext\n                 Transfer Protocol (HTTP/1.1): Conditional Requests\",\n                 <a href=\"https://tools.ietf.org/html/rfc7232\">RFC 7232</a>, June 2014.\n\n   [<a name=\"ref-RFC7233\" id=\"ref-RFC7233\">RFC7233</a>]     Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,\n                 \"Hypertext Transfer Protocol (HTTP/1.1): Range\n                 Requests\", <a href=\"https://tools.ietf.org/html/rfc7233\">RFC 7233</a>, June 2014.\n\n   [<a name=\"ref-RFC7234\" id=\"ref-RFC7234\">RFC7234</a>]     Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n                 Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n                 <a href=\"https://tools.ietf.org/html/rfc7234\">RFC 7234</a>, June 2014.\n\n   [<a name=\"ref-RFC7235\" id=\"ref-RFC7235\">RFC7235</a>]     Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext\n                 Transfer Protocol (HTTP/1.1): Authentication\",\n                 <a href=\"https://tools.ietf.org/html/rfc7235\">RFC 7235</a>, June 2014.\n\n   [<a name=\"ref-USASCII\" id=\"ref-USASCII\">USASCII</a>]     American National Standards Institute, \"Coded Character\n                 Set -- 7-bit American Standard Code for Information\n                 Interchange\", ANSI X3.4, 1986.\n\n   [<a name=\"ref-Welch\" id=\"ref-Welch\">Welch</a>]       Welch, T., \"A Technique for High-Performance Data\n                 Compression\", IEEE Computer 17(6), June 1984.\n\n<h3 class=\"h3\" id=\"section-11.2\">11.2.  Informative References</h3>\n   [<a name=\"ref-BCP115\" id=\"ref-BCP115\">BCP115</a>]      Hansen, T., Hardie, T., and L. Masinter, \"Guidelines\n                 and Registration Procedures for New URI Schemes\",\n                 <a href=\"https://tools.ietf.org/html/bcp115\">BCP 115</a>, <a href=\"https://tools.ietf.org/html/rfc4395\">RFC 4395</a>, February 2006.\n\n   [<a name=\"ref-BCP13\" id=\"ref-BCP13\">BCP13</a>]       Freed, N., Klensin, J., and T. Hansen, \"Media Type\n                 Specifications and Registration Procedures\", <a href=\"https://tools.ietf.org/html/bcp13\">BCP 13</a>,\n                 <a href=\"https://tools.ietf.org/html/rfc6838\">RFC 6838</a>, January 2013.\n\n   [<a name=\"ref-BCP90\" id=\"ref-BCP90\">BCP90</a>]       Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n                 Procedures for Message Header Fields\", <a href=\"https://tools.ietf.org/html/bcp90\">BCP 90</a>,\n                 <a href=\"https://tools.ietf.org/html/rfc3864\">RFC 3864</a>, September 2004.\n\n   [<a name=\"ref-Georgiev\" id=\"ref-Georgiev\">Georgiev</a>]    Georgiev, M., Iyengar, S., Jana, S., Anubhai, R.,\n                 Boneh, D., and V. Shmatikov, \"The Most Dangerous Code\n                 in the World: Validating SSL Certificates in Non-\n                 browser Software\", In Proceedings of the 2012 ACM\n                 Conference on Computer and Communications Security (CCS\n                 '12), pp. 38-49, October 2012,\n                 &lt;<a href=\"http://doi.acm.org/10.1145/2382196.2382204\">http://doi.acm.org/10.1145/2382196.2382204</a>&gt;.\n\n   [<a name=\"ref-ISO-8859-1\" id=\"ref-ISO-8859-1\">ISO-8859-1</a>]  International Organization for Standardization,\n                 \"Information technology -- 8-bit single-byte coded\n                 graphic character sets -- Part 1: Latin alphabet No.\n                 1\", ISO/IEC 8859-1:1998, 1998.\n\n   [<a name=\"ref-Klein\" id=\"ref-Klein\">Klein</a>]       Klein, A., \"Divide and Conquer - HTTP Response\n                 Splitting, Web Cache Poisoning Attacks, and Related\n                 Topics\", March 2004, &lt;<a href=\"http://packetstormsecurity.com/papers/general/whitepaper_httpresponse.pdf\">http://packetstormsecurity.com/</a>\n                 <a href=\"http://packetstormsecurity.com/papers/general/whitepaper_httpresponse.pdf\">papers/general/whitepaper_httpresponse.pdf</a>&gt;.\n\n   [<a name=\"ref-Kri2001\" id=\"ref-Kri2001\">Kri2001</a>]     Kristol, D., \"HTTP Cookies: Standards, Privacy, and\n                 Politics\", ACM Transactions on Internet\n                 Technology 1(2), November 2001,\n                 &lt;<a href=\"http://arxiv.org/abs/cs.SE/0105018\">http://arxiv.org/abs/cs.SE/0105018</a>&gt;.\n\n   [<a name=\"ref-Linhart\" id=\"ref-Linhart\">Linhart</a>]     Linhart, C., Klein, A., Heled, R., and S. Orrin, \"HTTP\n                 Request Smuggling\", June 2005,\n                 &lt;<a href=\"http://www.watchfire.com/news/whitepapers.aspx\">http://www.watchfire.com/news/whitepapers.aspx</a>&gt;.\n\n   [<a name=\"ref-RFC1919\" id=\"ref-RFC1919\">RFC1919</a>]     Chatel, M., \"Classical versus Transparent IP Proxies\",\n                 <a href=\"https://tools.ietf.org/html/rfc1919\">RFC 1919</a>, March 1996.\n\n   [<a name=\"ref-RFC1945\" id=\"ref-RFC1945\">RFC1945</a>]     Berners-Lee, T., Fielding, R., and H. Nielsen,\n                 \"Hypertext Transfer Protocol -- HTTP/1.0\", <a href=\"https://tools.ietf.org/html/rfc1945\">RFC 1945</a>,\n                 May 1996.\n\n   [<a name=\"ref-RFC2045\" id=\"ref-RFC2045\">RFC2045</a>]     Freed, N. and N. Borenstein, \"Multipurpose Internet\n                 Mail Extensions (MIME) Part One: Format of Internet\n                 Message Bodies\", <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a>, November 1996.\n\n   [<a name=\"ref-RFC2047\" id=\"ref-RFC2047\">RFC2047</a>]     Moore, K., \"MIME (Multipurpose Internet Mail\n                 Extensions) Part Three: Message Header Extensions for\n                 Non-ASCII Text\", <a href=\"https://tools.ietf.org/html/rfc2047\">RFC 2047</a>, November 1996.\n\n   [<a name=\"ref-RFC2068\" id=\"ref-RFC2068\">RFC2068</a>]     Fielding, R., Gettys, J., Mogul, J., Nielsen, H., and\n                 T. Berners-Lee, \"Hypertext Transfer Protocol --\n                 HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a>, January 1997.\n\n   [<a name=\"ref-RFC2145\" id=\"ref-RFC2145\">RFC2145</a>]     Mogul, J., Fielding, R., Gettys, J., and H. Nielsen,\n                 \"Use and Interpretation of HTTP Version Numbers\",\n                 <a href=\"https://tools.ietf.org/html/rfc2145\">RFC 2145</a>, May 1997.\n\n   [<a name=\"ref-RFC2616\" id=\"ref-RFC2616\">RFC2616</a>]     Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n                 Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n                 Transfer Protocol -- HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>, June 1999.\n\n   [<a name=\"ref-RFC2817\" id=\"ref-RFC2817\">RFC2817</a>]     Khare, R. and S. Lawrence, \"Upgrading to TLS Within\n                 HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2817\">RFC 2817</a>, May 2000.\n\n   [<a name=\"ref-RFC2818\" id=\"ref-RFC2818\">RFC2818</a>]     Rescorla, E., \"HTTP Over TLS\", <a href=\"https://tools.ietf.org/html/rfc2818\">RFC 2818</a>, May 2000.\n\n   [<a name=\"ref-RFC3040\" id=\"ref-RFC3040\">RFC3040</a>]     Cooper, I., Melve, I., and G. Tomlinson, \"Internet Web\n                 Replication and Caching Taxonomy\", <a href=\"https://tools.ietf.org/html/rfc3040\">RFC 3040</a>,\n                 January 2001.\n\n   [<a name=\"ref-RFC4033\" id=\"ref-RFC4033\">RFC4033</a>]     Arends, R., Austein, R., Larson, M., Massey, D., and S.\n                 Rose, \"DNS Security Introduction and Requirements\",\n                 <a href=\"https://tools.ietf.org/html/rfc4033\">RFC 4033</a>, March 2005.\n\n   [<a name=\"ref-RFC4559\" id=\"ref-RFC4559\">RFC4559</a>]     Jaganathan, K., Zhu, L., and J. Brezak, \"SPNEGO-based\n                 Kerberos and NTLM HTTP Authentication in Microsoft\n                 Windows\", <a href=\"https://tools.ietf.org/html/rfc4559\">RFC 4559</a>, June 2006.\n\n   [<a name=\"ref-RFC5226\" id=\"ref-RFC5226\">RFC5226</a>]     Narten, T. and H. Alvestrand, \"Guidelines for Writing\n                 an IANA Considerations Section in RFCs\", <a href=\"https://tools.ietf.org/html/bcp26\">BCP 26</a>,\n                 <a href=\"https://tools.ietf.org/html/rfc5226\">RFC 5226</a>, May 2008.\n\n   [<a name=\"ref-RFC5246\" id=\"ref-RFC5246\">RFC5246</a>]     Dierks, T. and E. Rescorla, \"The Transport Layer\n                 Security (TLS) Protocol Version 1.2\", <a href=\"https://tools.ietf.org/html/rfc5246\">RFC 5246</a>,\n                 August 2008.\n\n   [<a name=\"ref-RFC5322\" id=\"ref-RFC5322\">RFC5322</a>]     Resnick, P., \"Internet Message Format\", <a href=\"https://tools.ietf.org/html/rfc5322\">RFC 5322</a>,\n                 October 2008.\n\n   [<a name=\"ref-RFC6265\" id=\"ref-RFC6265\">RFC6265</a>]     Barth, A., \"HTTP State Management Mechanism\", <a href=\"https://tools.ietf.org/html/rfc6265\">RFC 6265</a>,\n                 April 2011.\n\n   [<a name=\"ref-RFC6585\" id=\"ref-RFC6585\">RFC6585</a>]     Nottingham, M. and R. Fielding, \"Additional HTTP Status\n                 Codes\", <a href=\"https://tools.ietf.org/html/rfc6585\">RFC 6585</a>, April 2012.\n\n<h2 class=\"h2\" id=\"appendix-A\">Appendix A.  HTTP Version History</h2>\n   HTTP has been in use since 1990.  The first version, later referred\n   to as HTTP/0.9, was a simple protocol for hypertext data transfer\n   across the Internet, using only a single request method (GET) and no\n   metadata.  HTTP/1.0, as defined by [<a href=\"https://tools.ietf.org/html/rfc1945\" title='\"Hypertext Transfer Protocol -- HTTP/1.0\"'>RFC1945</a>], added a range of\n   request methods and MIME-like messaging, allowing for metadata to be\n   transferred and modifiers placed on the request/response semantics.\n   However, HTTP/1.0 did not sufficiently take into consideration the\n   effects of hierarchical proxies, caching, the need for persistent\n   connections, or name-based virtual hosts.  The proliferation of\n   incompletely implemented applications calling themselves \"HTTP/1.0\"\n   further necessitated a protocol version change in order for two\n   communicating applications to determine each other's true\n   capabilities.\n\n   HTTP/1.1 remains compatible with HTTP/1.0 by including more stringent\n   requirements that enable reliable implementations, adding only those\n   features that can either be safely ignored by an HTTP/1.0 recipient\n   or only be sent when communicating with a party advertising\n   conformance with HTTP/1.1.\n\n   HTTP/1.1 has been designed to make supporting previous versions easy.\n   A general-purpose HTTP/1.1 server ought to be able to understand any\n   valid request in the format of HTTP/1.0, responding appropriately\n   with an HTTP/1.1 message that only uses features understood (or\n   safely ignored) by HTTP/1.0 clients.  Likewise, an HTTP/1.1 client\n   can be expected to understand any valid HTTP/1.0 response.\n\n   Since HTTP/0.9 did not support header fields in a request, there is\n   no mechanism for it to support name-based virtual hosts (selection of\n   resource by inspection of the Host header field).  Any server that\n   implements name-based virtual hosts ought to disable support for\n   HTTP/0.9.  Most requests that appear to be HTTP/0.9 are, in fact,\n   badly constructed HTTP/1.x requests caused by a client failing to\n   properly encode the request-target.\n\n<h3 class=\"h3\" id=\"appendix-A.1\">A.1.  Changes from HTTP/1.0</h3>\n   This section summarizes major differences between versions HTTP/1.0\n   and HTTP/1.1.\n\n<h4 class=\"h4\" id=\"appendix-A.1.1\">A.1.1.  Multihomed Web Servers</h4>\n   The requirements that clients and servers support the Host header\n   field (<a href=\"#section-5.4\">Section 5.4</a>), report an error if it is missing from an\n   HTTP/1.1 request, and accept absolute URIs (<a href=\"#section-5.3\">Section 5.3</a>) are among\n   the most important changes defined by HTTP/1.1.\n\n   Older HTTP/1.0 clients assumed a one-to-one relationship of IP\n   addresses and servers; there was no other established mechanism for\n   distinguishing the intended server of a request than the IP address\n   to which that request was directed.  The Host header field was\n   introduced during the development of HTTP/1.1 and, though it was\n   quickly implemented by most HTTP/1.0 browsers, additional\n   requirements were placed on all HTTP/1.1 requests in order to ensure\n   complete adoption.  At the time of this writing, most HTTP-based\n   services are dependent upon the Host header field for targeting\n   requests.\n\n<h4 class=\"h4\" id=\"appendix-A.1.2\">A.1.2.  Keep-Alive Connections</h4>\n   In HTTP/1.0, each connection is established by the client prior to\n   the request and closed by the server after sending the response.\n   However, some implementations implement the explicitly negotiated\n   (\"Keep-Alive\") version of persistent connections described in <a href=\"#section-19.7.1\">Section</a>\n   <a href=\"#section-19.7.1\">19.7.1</a> of [<a href=\"https://tools.ietf.org/html/rfc2068\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>RFC2068</a>].\n\n   Some clients and servers might wish to be compatible with these\n   previous approaches to persistent connections, by explicitly\n   negotiating for them with a \"Connection: keep-alive\" request header\n   field.  However, some experimental implementations of HTTP/1.0\n   persistent connections are faulty; for example, if an HTTP/1.0 proxy\n   server doesn't understand Connection, it will erroneously forward\n   that header field to the next inbound server, which would result in a\n   hung connection.\n\n   One attempted solution was the introduction of a Proxy-Connection\n   header field, targeted specifically at proxies.  In practice, this\n   was also unworkable, because proxies are often deployed in multiple\n   layers, bringing about the same problem discussed above.\n\n   As a result, clients are encouraged not to send the Proxy-Connection\n   header field in any requests.\n\n   Clients are also encouraged to consider the use of Connection:\n   keep-alive in requests carefully; while they can enable persistent\n   connections with HTTP/1.0 servers, clients using them will need to\n   monitor the connection for \"hung\" requests (which indicate that the\n   client ought stop sending the header field), and this mechanism ought\n   not be used by clients at all when a proxy is being used.\n\n<h4 class=\"h4\" id=\"appendix-A.1.3\">A.1.3.  Introduction of Transfer-Encoding</h4>\n   HTTP/1.1 introduces the Transfer-Encoding header field\n   (<a href=\"#section-3.3.1\">Section 3.3.1</a>).  Transfer codings need to be decoded prior to\n   forwarding an HTTP message over a MIME-compliant protocol.\n\n<h3 class=\"h3\" id=\"appendix-A.2\">A.2.  Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>\n</h3>\n   HTTP's approach to error handling has been explained.  (<a href=\"#section-2.5\">Section 2.5</a>)\n\n   The HTTP-version ABNF production has been clarified to be case-\n   sensitive.  Additionally, version numbers have been restricted to\n   single digits, due to the fact that implementations are known to\n   handle multi-digit version numbers incorrectly.  (<a href=\"#section-2.6\">Section 2.6</a>)\n\n   Userinfo (i.e., username and password) are now disallowed in HTTP and\n   HTTPS URIs, because of security issues related to their transmission\n   on the wire.  (<a href=\"#section-2.7.1\">Section 2.7.1</a>)\n\n   The HTTPS URI scheme is now defined by this specification;\n   previously, it was done in <a href=\"https://tools.ietf.org/html/rfc2818#section-2.4\">Section 2.4 of [RFC2818]</a>.  Furthermore, it\n   implies end-to-end security.  (<a href=\"#section-2.7.2\">Section 2.7.2</a>)\n\n   HTTP messages can be (and often are) buffered by implementations;\n   despite it sometimes being available as a stream, HTTP is\n   fundamentally a message-oriented protocol.  Minimum supported sizes\n   for various protocol elements have been suggested, to improve\n   interoperability.  (<a href=\"#section-3\">Section 3</a>)\n\n   Invalid whitespace around field-names is now required to be rejected,\n   because accepting it represents a security vulnerability.  The ABNF\n   productions defining header fields now only list the field value.\n   (<a href=\"#section-3.2\">Section 3.2</a>)\n\n   Rules about implicit linear whitespace between certain grammar\n   productions have been removed; now whitespace is only allowed where\n   specifically defined in the ABNF.  (<a href=\"#section-3.2.3\">Section 3.2.3</a>)\n\n   Header fields that span multiple lines (\"line folding\") are\n   deprecated.  (<a href=\"#section-3.2.4\">Section 3.2.4</a>)\n\n   The NUL octet is no longer allowed in comment and quoted-string text,\n   and handling of backslash-escaping in them has been clarified.  The\n   quoted-pair rule no longer allows escaping control characters other\n   than HTAB.  Non-US-ASCII content in header fields and the reason\n   phrase has been obsoleted and made opaque (the TEXT rule was\n   removed).  (<a href=\"#section-3.2.6\">Section 3.2.6</a>)\n\n   Bogus Content-Length header fields are now required to be handled as\n   errors by recipients.  (<a href=\"#section-3.3.2\">Section 3.3.2</a>)\n\n   The algorithm for determining the message body length has been\n   clarified to indicate all of the special cases (e.g., driven by\n   methods or status codes) that affect it, and that new protocol\n\n   elements cannot define such special cases.  CONNECT is a new, special\n   case in determining message body length. \"multipart/byteranges\" is no\n   longer a way of determining message body length detection.\n   (<a href=\"#section-3.3.3\">Section 3.3.3</a>)\n\n   The \"identity\" transfer coding token has been removed.  (Sections <a href=\"#section-3.3\">3.3</a>\n   and 4)\n\n   Chunk length does not include the count of the octets in the chunk\n   header and trailer.  Line folding in chunk extensions is disallowed.\n   (<a href=\"#section-4.1\">Section 4.1</a>)\n\n   The meaning of the \"deflate\" content coding has been clarified.\n   (<a href=\"#section-4.2.2\">Section 4.2.2</a>)\n\n   The segment + query components of <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a> have been used to define\n   the request-target, instead of abs_path from <a href=\"https://tools.ietf.org/html/rfc1808\">RFC 1808</a>.  The\n   asterisk-form of the request-target is only allowed with the OPTIONS\n   method.  (<a href=\"#section-5.3\">Section 5.3</a>)\n\n   The term \"Effective Request URI\" has been introduced.  (<a href=\"#section-5.5\">Section 5.5</a>)\n\n   Gateways do not need to generate Via header fields anymore.\n   (<a href=\"#section-5.7.1\">Section 5.7.1</a>)\n\n   Exactly when \"close\" connection options have to be sent has been\n   clarified.  Also, \"hop-by-hop\" header fields are required to appear\n   in the Connection header field; just because they're defined as hop-\n   by-hop in this specification doesn't exempt them.  (<a href=\"#section-6.1\">Section 6.1</a>)\n\n   The limit of two connections per server has been removed.  An\n   idempotent sequence of requests is no longer required to be retried.\n   The requirement to retry requests under certain circumstances when\n   the server prematurely closes the connection has been removed.  Also,\n   some extraneous requirements about when servers are allowed to close\n   connections prematurely have been removed.  (<a href=\"#section-6.3\">Section 6.3</a>)\n\n   The semantics of the Upgrade header field is now defined in responses\n   other than 101 (this was incorporated from [<a href=\"https://tools.ietf.org/html/rfc2817\" title='\"Upgrading to TLS Within HTTP/1.1\"'>RFC2817</a>]).  Furthermore,\n   the ordering in the field value is now significant.  (<a href=\"#section-6.7\">Section 6.7</a>)\n\n   Empty list elements in list productions (e.g., a list header field\n   containing \", ,\") have been deprecated.  (<a href=\"#section-7\">Section 7</a>)\n\n   Registration of Transfer Codings now requires IETF Review\n   (<a href=\"#section-8.4\">Section 8.4</a>)\n\n   This specification now defines the Upgrade Token Registry, previously\n   defined in <a href=\"https://tools.ietf.org/html/rfc2817#section-7.2\">Section 7.2 of [RFC2817]</a>.  (<a href=\"#section-8.6\">Section 8.6</a>)\n\n   The expectation to support HTTP/0.9 requests has been removed.\n   (Appendix A)\n\n   Issues with the Keep-Alive and Proxy-Connection header fields in\n   requests are pointed out, with use of the latter being discouraged\n   altogether.  (Appendix A.1.2)\n\n<h2 class=\"h2\" id=\"appendix-B\">Appendix B.  Collected ABNF</h2>\n   BWS = OWS\n\n   Connection = *( \",\" OWS ) connection-option *( OWS \",\" [ OWS\n    connection-option ] )\n\n   Content-Length = 1*DIGIT\n\n   HTTP-message = start-line *( header-field CRLF ) CRLF [ message-body\n    ]\n   HTTP-name = %x48.54.54.50 ; HTTP\n   HTTP-version = HTTP-name \"/\" DIGIT \".\" DIGIT\n   Host = uri-host [ \":\" port ]\n\n   OWS = *( SP / HTAB )\n\n   RWS = 1*( SP / HTAB )\n\n   TE = [ ( \",\" / t-codings ) *( OWS \",\" [ OWS t-codings ] ) ]\n   Trailer = *( \",\" OWS ) field-name *( OWS \",\" [ OWS field-name ] )\n   Transfer-Encoding = *( \",\" OWS ) transfer-coding *( OWS \",\" [ OWS\n    transfer-coding ] )\n\n   URI-reference = &lt;URI-reference, see <a href=\"https://tools.ietf.org/html/rfc3986#section-4.1\">[RFC3986], Section 4.1</a>&gt;\n   Upgrade = *( \",\" OWS ) protocol *( OWS \",\" [ OWS protocol ] )\n\n   Via = *( \",\" OWS ) ( received-protocol RWS received-by [ RWS comment\n    ] ) *( OWS \",\" [ OWS ( received-protocol RWS received-by [ RWS\n    comment ] ) ] )\n\n   absolute-URI = &lt;absolute-URI, see <a href=\"https://tools.ietf.org/html/rfc3986#section-4.3\">[RFC3986], Section 4.3</a>&gt;\n   absolute-form = absolute-URI\n   absolute-path = 1*( \"/\" segment )\n   asterisk-form = \"*\"\n   authority = &lt;authority, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2\">[RFC3986], Section 3.2</a>&gt;\n   authority-form = authority\n\n   chunk = chunk-size [ chunk-ext ] CRLF chunk-data CRLF\n   chunk-data = 1*OCTET\n   chunk-ext = *( \";\" chunk-ext-name [ \"=\" chunk-ext-val ] )\n   chunk-ext-name = token\n   chunk-ext-val = token / quoted-string\n   chunk-size = 1*HEXDIG\n   chunked-body = *chunk last-chunk trailer-part CRLF\n   comment = \"(\" *( ctext / quoted-pair / comment ) \")\"\n   connection-option = token\n   ctext = HTAB / SP / %x21-27 ; '!'-'''\n    / %x2A-5B ; '*'-'['\n    / %x5D-7E ; ']'-'~'\n    / obs-text\n\n   field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n   field-name = token\n   field-value = *( field-content / obs-fold )\n   field-vchar = VCHAR / obs-text\n   fragment = &lt;fragment, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.5\">[RFC3986], Section 3.5</a>&gt;\n\n   header-field = field-name \":\" OWS field-value OWS\n   http-URI = \"http://\" authority path-abempty [ \"?\" query ] [ \"#\"\n    fragment ]\n   https-URI = \"https://\" authority path-abempty [ \"?\" query ] [ \"#\"\n    fragment ]\n\n   last-chunk = 1*\"0\" [ chunk-ext ] CRLF\n\n   message-body = *OCTET\n   method = token\n\n   obs-fold = CRLF 1*( SP / HTAB )\n   obs-text = %x80-FF\n   origin-form = absolute-path [ \"?\" query ]\n\n   partial-URI = relative-part [ \"?\" query ]\n   path-abempty = &lt;path-abempty, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.3\">[RFC3986], Section 3.3</a>&gt;\n   port = &lt;port, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.3\">[RFC3986], Section 3.2.3</a>&gt;\n   protocol = protocol-name [ \"/\" protocol-version ]\n   protocol-name = token\n   protocol-version = token\n   pseudonym = token\n\n   qdtext = HTAB / SP / \"!\" / %x23-5B ; '#'-'['\n    / %x5D-7E ; ']'-'~'\n    / obs-text\n   query = &lt;query, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.4\">[RFC3986], Section 3.4</a>&gt;\n   quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n\n   quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n\n   rank = ( \"0\" [ \".\" *3DIGIT ] ) / ( \"1\" [ \".\" *3\"0\" ] )\n   reason-phrase = *( HTAB / SP / VCHAR / obs-text )\n   received-by = ( uri-host [ \":\" port ] ) / pseudonym\n   received-protocol = [ protocol-name \"/\" ] protocol-version\n   relative-part = &lt;relative-part, see <a href=\"https://tools.ietf.org/html/rfc3986#section-4.2\">[RFC3986], Section 4.2</a>&gt;\n   request-line = method SP request-target SP HTTP-version CRLF\n   request-target = origin-form / absolute-form / authority-form /\n    asterisk-form\n\n   scheme = &lt;scheme, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.1\">[RFC3986], Section 3.1</a>&gt;\n   segment = &lt;segment, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.3\">[RFC3986], Section 3.3</a>&gt;\n   start-line = request-line / status-line\n   status-code = 3DIGIT\n   status-line = HTTP-version SP status-code SP reason-phrase CRLF\n\n   t-codings = \"trailers\" / ( transfer-coding [ t-ranking ] )\n   t-ranking = OWS \";\" OWS \"q=\" rank\n   tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&amp;\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /\n    \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n   token = 1*tchar\n   trailer-part = *( header-field CRLF )\n   transfer-coding = \"chunked\" / \"compress\" / \"deflate\" / \"gzip\" /\n    transfer-extension\n   transfer-extension = token *( OWS \";\" OWS transfer-parameter )\n   transfer-parameter = token BWS \"=\" BWS ( token / quoted-string )\n\n   uri-host = &lt;host, see <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">[RFC3986], Section 3.2.2</a>&gt;\n\nIndex\n\n   A\n      absolute-form (of request-target)  42\n      accelerator  10\n      application/http Media Type  63\n      asterisk-form (of request-target)  43\n      authoritative response  67\n      authority-form (of request-target)  42-43\n\n   B\n      browser  7\n\n   C\n      cache  11\n      cacheable  12\n      captive portal  11\n      chunked (Coding Format)  28, 32, 36\n      client  7\n      close  51, 56\n      compress (Coding Format)  38\n      connection  7\n      Connection header field  51, 56\n      Content-Length header field  30\n\n   D\n      deflate (Coding Format)  38\n      Delimiters  27\n      downstream  10\n\n   E\n      effective request URI  45\n\n   G\n      gateway  10\n      Grammar\n         absolute-form  42\n         absolute-path  16\n         absolute-URI  16\n         ALPHA  6\n         asterisk-form  41, 43\n         authority  16\n         authority-form  42-43\n         BWS  25\n         chunk  36\n         chunk-data  36\n         chunk-ext  36\n         chunk-ext-name  36\n\n         chunk-ext-val  36\n         chunk-size  36\n         chunked-body  36\n         comment  27\n         Connection  51\n         connection-option  51\n         Content-Length  30\n         CR  6\n         CRLF  6\n         ctext  27\n         CTL  6\n         DIGIT  6\n         DQUOTE  6\n         field-content  23\n         field-name  23, 40\n         field-value  23\n         field-vchar  23\n         fragment  16\n         header-field  23, 37\n         HEXDIG  6\n         Host  44\n         HTAB  6\n         HTTP-message  19\n         HTTP-name  14\n         http-URI  17\n         HTTP-version  14\n         https-URI  18\n         last-chunk  36\n         LF  6\n         message-body  28\n         method  21\n         obs-fold  23\n         obs-text  27\n         OCTET  6\n         origin-form  42\n         OWS  25\n         partial-URI  16\n         port  16\n         protocol-name  47\n         protocol-version  47\n         pseudonym  47\n         qdtext  27\n         query  16\n         quoted-pair  27\n         quoted-string  27\n         rank  39\n         reason-phrase  22\n         received-by  47\n\n         received-protocol  47\n         request-line  21\n         request-target  41\n         RWS  25\n         scheme  16\n         segment  16\n         SP  6\n         start-line  21\n         status-code  22\n         status-line  22\n         t-codings  39\n         t-ranking  39\n         tchar  27\n         TE  39\n         token  27\n         Trailer  40\n         trailer-part  37\n         transfer-coding  35\n         Transfer-Encoding  28\n         transfer-extension  35\n         transfer-parameter  35\n         Upgrade  57\n         uri-host  16\n         URI-reference  16\n         VCHAR  6\n         Via  47\n      gzip (Coding Format)  39\n\n   H\n      header field  19\n      header section  19\n      headers  19\n      Host header field  44\n      http URI scheme  17\n      https URI scheme  17\n   I\n      inbound  9\n      interception proxy  11\n      intermediary  9\n\n   M\n      Media Type\n         application/http  63\n         message/http  62\n      message  7\n      message/http Media Type  62\n      method  21\n\n   N\n      non-transforming proxy  49\n\n   O\n      origin server  7\n      origin-form (of request-target)  42\n      outbound  10\n\n   P\n      phishing  67\n      proxy  10\n\n   R\n      recipient  7\n      request  7\n      request-target  21\n      resource  16\n      response  7\n      reverse proxy  10\n\n   S\n      sender  7\n      server  7\n      spider  7\n\n   T\n      target resource  40\n      target URI  40\n      TE header field  39\n      Trailer header field  40\n      Transfer-Encoding header field  28\n      transforming proxy  49\n      transparent proxy  11\n      tunnel  10\n\n   U\n      Upgrade header field  57\n      upstream  9\n      URI scheme\n         http  17\n         https  17\n      user agent  7\n\n   V\n      Via header field  47\n\nAuthors' Addresses\n\n   Roy T. Fielding (editor)\n   Adobe Systems Incorporated\n   345 Park Ave\n   San Jose, CA  95110\n   USA\n\n   EMail: fielding@gbiv.com\n   URI:   <a href=\"http://roy.gbiv.com/\">http://roy.gbiv.com/</a>\n\n\n   Julian F. Reschke (editor)\n   greenbytes GmbH\n   Hafenweg 16\n   Muenster, NW  48155\n   Germany\n\n   EMail: julian.reschke@greenbytes.de\n   URI:   <a href=\"http://greenbytes.de/tech/webdav/\">http://greenbytes.de/tech/webdav/</a>\n\n\nFielding &amp; Reschke           Standards Track                   [Page 89]<br>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; document authors. All rights reserved.<br>\n    <a href=\"https://tools.ietf.org/html/rfc7230\" class=\"_attribution-link\">https://tools.ietf.org/html/rfc7230</a>\n  </p>\n</div>\n","rfc7232":"<div class=\"_rfc-pre\">Internet Engineering Task Force (IETF)                  R. Fielding, Ed.\nRequest for Comments: 7232                                         Adobe\nObsoletes: <a href=\"https://tools.ietf.org/html/rfc2616\">2616</a>                                          J. Reschke, Ed.\nCategory: Standards Track                                     greenbytes\nISSN: 2070-1721                                                June 2014\n\n\n      <h1 class=\"h1\">Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests</h1>\nAbstract\n\n   The Hypertext Transfer Protocol (HTTP) is a stateless application-\n   level protocol for distributed, collaborative, hypertext information\n   systems.  This document defines HTTP/1.1 conditional requests,\n   including metadata header fields for indicating state changes,\n   request header fields for making preconditions on such state, and\n   rules for constructing the responses to a conditional request when\n   one or more preconditions evaluate to false.\n\nStatus of This Memo\n\n   This is an Internet Standards Track document.\n\n   This document is a product of the Internet Engineering Task Force\n   (IETF).  It represents the consensus of the IETF community.  It has\n   received public review and has been approved for publication by the\n   Internet Engineering Steering Group (IESG).  Further information on\n   Internet Standards is available in <a href=\"https://tools.ietf.org/html/rfc5741#section-2\">Section 2 of RFC 5741</a>.\n\n   Information about the current status of this document, any errata,\n   and how to provide feedback on it may be obtained at\n   <a href=\"http://www.rfc-editor.org/info/rfc7232\">http://www.rfc-editor.org/info/rfc7232</a>.\n\nCopyright Notice\n\n   Copyright (c) 2014 IETF Trust and the persons identified as the\n   document authors.  All rights reserved.\n\n   This document is subject to <a href=\"https://tools.ietf.org/html/bcp78\">BCP 78</a> and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n   (<a href=\"http://trustee.ietf.org/license-info\">http://trustee.ietf.org/license-info</a>) in effect on the date of\n   publication of this document.  Please review these documents\n   carefully, as they describe your rights and restrictions with respect\n   to this document.  Code Components extracted from this document must\n   include Simplified BSD License text as described in <a href=\"#section-4\">Section 4</a>.e of\n   the Trust Legal Provisions and are provided without warranty as\n   described in the Simplified BSD License.\n\n   This document may contain material from IETF Documents or IETF\n   Contributions published or made publicly available before November\n   10, 2008.  The person(s) controlling the copyright in some of this\n   material may not have granted the IETF Trust the right to allow\n   modifications of such material outside the IETF Standards Process.\n   Without obtaining an adequate license from the person(s) controlling\n   the copyright in such materials, this document may not be modified\n   outside the IETF Standards Process, and derivative works of it may\n   not be created outside the IETF Standards Process, except to format\n   it for publication as an RFC or to translate it into languages other\n   than English.\n\nTable of Contents\n\n   <a href=\"#section-1\">1</a>. Introduction \n      <a href=\"#section-1.1\">1.1</a>. Conformance and Error Handling \n      <a href=\"#section-1.2\">1.2</a>. Syntax Notation \n   <a href=\"#section-2\">2</a>. Validators \n      <a href=\"#section-2.1\">2.1</a>. Weak versus Strong \n      <a href=\"#section-2.2\">2.2</a>. Last-Modified \n           <a href=\"#section-2.2.1\">2.2.1</a>. Generation \n           <a href=\"#section-2.2.2\">2.2.2</a>. Comparison \n      <a href=\"#section-2.3\">2.3</a>. ETag \n           <a href=\"#section-2.3.1\">2.3.1</a>. Generation \n           <a href=\"#section-2.3.2\">2.3.2</a>. Comparison \n           2.3.3. Example: Entity-Tags Varying on\n                  Content-Negotiated Resources \n      <a href=\"#section-2.4\">2.4</a>. When to Use Entity-Tags and Last-Modified Dates \n   <a href=\"#section-3\">3</a>. Precondition Header Fields \n      <a href=\"#section-3.1\">3.1</a>. If-Match \n      <a href=\"#section-3.2\">3.2</a>. If-None-Match \n      <a href=\"#section-3.3\">3.3</a>. If-Modified-Since \n      <a href=\"#section-3.4\">3.4</a>. If-Unmodified-Since \n      <a href=\"#section-3.5\">3.5</a>. If-Range \n   <a href=\"#section-4\">4</a>. Status Code Definitions \n      <a href=\"#section-4.1\">4.1</a>. 304 Not Modified \n      <a href=\"#section-4.2\">4.2</a>. 412 Precondition Failed \n   <a href=\"#section-5\">5</a>. Evaluation \n   <a href=\"#section-6\">6</a>. Precedence \n   <a href=\"#section-7\">7</a>. IANA Considerations \n      <a href=\"#section-7.1\">7.1</a>. Status Code Registration \n      <a href=\"#section-7.2\">7.2</a>. Header Field Registration \n   <a href=\"#section-8\">8</a>. Security Considerations \n   <a href=\"#section-9\">9</a>. Acknowledgments \n   <a href=\"#section-10\">10</a>. References \n      <a href=\"#section-10.1\">10.1</a>. Normative References \n      <a href=\"#section-10.2\">10.2</a>. Informative References \n   <a href=\"#appendix-A\">Appendix A</a>. Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a> \n   <a href=\"#appendix-B\">Appendix B</a>. Imported ABNF \n   <a href=\"#appendix-C\">Appendix C</a>. Collected ABNF \n   Index \n\n<h2 class=\"h2\" id=\"section-1\">1.  Introduction</h2>\n   Conditional requests are HTTP requests [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>] that include one or\n   more header fields indicating a precondition to be tested before\n   applying the method semantics to the target resource.  This document\n   defines the HTTP/1.1 conditional request mechanisms in terms of the\n   architecture, syntax notation, and conformance criteria defined in\n   [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>].\n\n   Conditional GET requests are the most efficient mechanism for HTTP\n   cache updates [<a href=\"https://tools.ietf.org/html/rfc7234\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Caching\"'>RFC7234</a>].  Conditionals can also be applied to\n   state-changing methods, such as PUT and DELETE, to prevent the \"lost\n   update\" problem: one client accidentally overwriting the work of\n   another client that has been acting in parallel.\n\n   Conditional request preconditions are based on the state of the\n   target resource as a whole (its current value set) or the state as\n   observed in a previously obtained representation (one value in that\n   set).  A resource might have multiple current representations, each\n   with its own observable state.  The conditional request mechanisms\n   assume that the mapping of requests to a \"selected representation\"\n   (<a href=\"https://tools.ietf.org/html/rfc7231#section-3\">Section 3 of [RFC7231]</a>) will be consistent over time if the server\n   intends to take advantage of conditionals.  Regardless, if the\n   mapping is inconsistent and the server is unable to select the\n   appropriate representation, then no harm will result when the\n   precondition evaluates to false.\n\n   The conditional request preconditions defined by this specification\n   (<a href=\"#section-3\">Section 3</a>) are evaluated when applicable to the recipient\n   (<a href=\"#section-5\">Section 5</a>) according to their order of precedence (<a href=\"#section-6\">Section 6</a>).\n\n<h3 class=\"h3\" id=\"section-1.1\">1.1.  Conformance and Error Handling</h3>\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described in [<a href=\"https://tools.ietf.org/html/rfc2119\" title='\"Key words for use in RFCs to Indicate Requirement Levels\"'>RFC2119</a>].\n\n   Conformance criteria and considerations regarding error handling are\n   defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-2.5\">Section 2.5 of [RFC7230]</a>.\n\n<h3 class=\"h3\" id=\"section-1.2\">1.2.  Syntax Notation</h3>\n   This specification uses the Augmented Backus-Naur Form (ABNF)\n   notation of [<a href=\"https://tools.ietf.org/html/rfc5234\" title='\"Augmented BNF for Syntax Specifications: ABNF\"'>RFC5234</a>] with a list extension, defined in <a href=\"https://tools.ietf.org/html/rfc7230#section-7\">Section 7 of\n   [RFC7230]</a>, that allows for compact definition of comma-separated\n   lists using a '#' operator (similar to how the '*' operator indicates\n\n   repetition).  <a href=\"#appendix-B\">Appendix B</a> describes rules imported from other\n   documents.  <a href=\"#appendix-C\">Appendix C</a> shows the collected grammar with all list\n   operators expanded to standard ABNF notation.\n\n<h2 class=\"h2\" id=\"section-2\">2.  Validators</h2>\n   This specification defines two forms of metadata that are commonly\n   used to observe resource state and test for preconditions:\n   modification dates (<a href=\"#section-2.2\">Section 2.2</a>) and opaque entity tags\n   (<a href=\"#section-2.3\">Section 2.3</a>).  Additional metadata that reflects resource state has\n   been defined by various extensions of HTTP, such as Web Distributed\n   Authoring and Versioning (WebDAV, [<a href=\"https://tools.ietf.org/html/rfc4918\" title='\"HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)\"'>RFC4918</a>]), that are beyond the\n   scope of this specification.  A resource metadata value is referred\n   to as a \"validator\" when it is used within a precondition.\n\n<h3 class=\"h3\" id=\"section-2.1\">2.1.  Weak versus Strong</h3>\n   Validators come in two flavors: strong or weak.  Weak validators are\n   easy to generate but are far less useful for comparisons.  Strong\n   validators are ideal for comparisons but can be very difficult (and\n   occasionally impossible) to generate efficiently.  Rather than impose\n   that all forms of resource adhere to the same strength of validator,\n   HTTP exposes the type of validator in use and imposes restrictions on\n   when weak validators can be used as preconditions.\n\n   A \"strong validator\" is representation metadata that changes value\n   whenever a change occurs to the representation data that would be\n   observable in the payload body of a 200 (OK) response to GET.\n\n   A strong validator might change for reasons other than a change to\n   the representation data, such as when a semantically significant part\n   of the representation metadata is changed (e.g., Content-Type), but\n   it is in the best interests of the origin server to only change the\n   value when it is necessary to invalidate the stored responses held by\n   remote caches and authoring tools.\n\n   Cache entries might persist for arbitrarily long periods, regardless\n   of expiration times.  Thus, a cache might attempt to validate an\n   entry using a validator that it obtained in the distant past.  A\n   strong validator is unique across all versions of all representations\n   associated with a particular resource over time.  However, there is\n   no implication of uniqueness across representations of different\n   resources (i.e., the same strong validator might be in use for\n   representations of multiple resources at the same time and does not\n   imply that those representations are equivalent).\n\n   There are a variety of strong validators used in practice.  The best\n   are based on strict revision control, wherein each change to a\n   representation always results in a unique node name and revision\n   identifier being assigned before the representation is made\n   accessible to GET.  A collision-resistant hash function applied to\n   the representation data is also sufficient if the data is available\n   prior to the response header fields being sent and the digest does\n   not need to be recalculated every time a validation request is\n   received.  However, if a resource has distinct representations that\n   differ only in their metadata, such as might occur with content\n   negotiation over media types that happen to share the same data\n   format, then the origin server needs to incorporate additional\n   information in the validator to distinguish those representations.\n\n   In contrast, a \"weak validator\" is representation metadata that might\n   not change for every change to the representation data.  This\n   weakness might be due to limitations in how the value is calculated,\n   such as clock resolution, an inability to ensure uniqueness for all\n   possible representations of the resource, or a desire of the resource\n   owner to group representations by some self-determined set of\n   equivalency rather than unique sequences of data.  An origin server\n   SHOULD change a weak entity-tag whenever it considers prior\n   representations to be unacceptable as a substitute for the current\n   representation.  In other words, a weak entity-tag ought to change\n   whenever the origin server wants caches to invalidate old responses.\n\n   For example, the representation of a weather report that changes in\n   content every second, based on dynamic measurements, might be grouped\n   into sets of equivalent representations (from the origin server's\n   perspective) with the same weak validator in order to allow cached\n   representations to be valid for a reasonable period of time (perhaps\n   adjusted dynamically based on server load or weather quality).\n   Likewise, a representation's modification time, if defined with only\n   one-second resolution, might be a weak validator if it is possible\n   for the representation to be modified twice during a single second\n   and retrieved between those modifications.\n\n   Likewise, a validator is weak if it is shared by two or more\n   representations of a given resource at the same time, unless those\n   representations have identical representation data.  For example, if\n   the origin server sends the same validator for a representation with\n   a gzip content coding applied as it does for a representation with no\n   content coding, then that validator is weak.  However, two\n   simultaneous representations might share the same strong validator if\n   they differ only in the representation metadata, such as when two\n   different media types are available for the same representation data.\n\n   Strong validators are usable for all conditional requests, including\n   cache validation, partial content ranges, and \"lost update\"\n   avoidance.  Weak validators are only usable when the client does not\n   require exact equality with previously obtained representation data,\n   such as when validating a cache entry or limiting a web traversal to\n   recent changes.\n\n<h3 class=\"h3\" id=\"section-2.2\">2.2.  Last-Modified</h3>\n   The \"Last-Modified\" header field in a response provides a timestamp\n   indicating the date and time at which the origin server believes the\n   selected representation was last modified, as determined at the\n   conclusion of handling the request.\n\n     Last-Modified = HTTP-date\n\n   An example of its use is\n\n     Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT\n\n<h4 class=\"h4\" id=\"section-2.2.1\">2.2.1.  Generation</h4>\n   An origin server SHOULD send Last-Modified for any selected\n   representation for which a last modification date can be reasonably\n   and consistently determined, since its use in conditional requests\n   and evaluating cache freshness ([<a href=\"https://tools.ietf.org/html/rfc7234\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Caching\"'>RFC7234</a>]) results in a substantial\n   reduction of HTTP traffic on the Internet and can be a significant\n   factor in improving service scalability and reliability.\n\n   A representation is typically the sum of many parts behind the\n   resource interface.  The last-modified time would usually be the most\n   recent time that any of those parts were changed.  How that value is\n   determined for any given resource is an implementation detail beyond\n   the scope of this specification.  What matters to HTTP is how\n   recipients of the Last-Modified header field can use its value to\n   make conditional requests and test the validity of locally cached\n   responses.\n\n   An origin server SHOULD obtain the Last-Modified value of the\n   representation as close as possible to the time that it generates the\n   Date field value for its response.  This allows a recipient to make\n   an accurate assessment of the representation's modification time,\n   especially if the representation changes near the time that the\n   response is generated.\n\n   An origin server with a clock MUST NOT send a Last-Modified date that\n   is later than the server's time of message origination (Date).  If\n   the last modification time is derived from implementation-specific\n\n   metadata that evaluates to some time in the future, according to the\n   origin server's clock, then the origin server MUST replace that value\n   with the message origination date.  This prevents a future\n   modification date from having an adverse impact on cache validation.\n\n   An origin server without a clock MUST NOT assign Last-Modified values\n   to a response unless these values were associated with the resource\n   by some other system or user with a reliable clock.\n\n<h4 class=\"h4\" id=\"section-2.2.2\">2.2.2.  Comparison</h4>\n   A Last-Modified time, when used as a validator in a request, is\n   implicitly weak unless it is possible to deduce that it is strong,\n   using the following rules:\n\n   o  The validator is being compared by an origin server to the actual\n      current validator for the representation and,\n\n   o  That origin server reliably knows that the associated\n      representation did not change twice during the second covered by\n      the presented validator.\n\n   or\n\n   o  The validator is about to be used by a client in an\n      If-Modified-Since, If-Unmodified-Since, or If-Range header field,\n      because the client has a cache entry for the associated\n      representation, and\n\n   o  That cache entry includes a Date value, which gives the time when\n      the origin server sent the original response, and\n\n   o  The presented Last-Modified time is at least 60 seconds before the\n      Date value.\n\n   or\n\n   o  The validator is being compared by an intermediate cache to the\n      validator stored in its cache entry for the representation, and\n\n   o  That cache entry includes a Date value, which gives the time when\n      the origin server sent the original response, and\n\n   o  The presented Last-Modified time is at least 60 seconds before the\n      Date value.\n\n   This method relies on the fact that if two different responses were\n   sent by the origin server during the same second, but both had the\n   same Last-Modified time, then at least one of those responses would\n   have a Date value equal to its Last-Modified time.  The arbitrary\n   60-second limit guards against the possibility that the Date and\n   Last-Modified values are generated from different clocks or at\n   somewhat different times during the preparation of the response.  An\n   implementation MAY use a value larger than 60 seconds, if it is\n   believed that 60 seconds is too short.\n\n<h3 class=\"h3\" id=\"section-2.3\">2.3.  ETag</h3>\n   The \"ETag\" header field in a response provides the current entity-tag\n   for the selected representation, as determined at the conclusion of\n   handling the request.  An entity-tag is an opaque validator for\n   differentiating between multiple representations of the same\n   resource, regardless of whether those multiple representations are\n   due to resource state changes over time, content negotiation\n   resulting in multiple representations being valid at the same time,\n   or both.  An entity-tag consists of an opaque quoted string, possibly\n   prefixed by a weakness indicator.\n\n     ETag       = entity-tag\n\n     entity-tag = [ weak ] opaque-tag\n     weak       = %x57.2F ; \"W/\", case-sensitive\n     opaque-tag = DQUOTE *etagc DQUOTE\n     etagc      = %x21 / %x23-7E / obs-text\n                ; VCHAR except double quotes, plus obs-text\n\n      Note: Previously, opaque-tag was defined to be a quoted-string\n      (<a href=\"https://tools.ietf.org/html/rfc2616#section-3.11\">[RFC2616], Section 3.11</a>); thus, some recipients might perform\n      backslash unescaping.  Servers therefore ought to avoid backslash\n      characters in entity tags.\n\n   An entity-tag can be more reliable for validation than a modification\n   date in situations where it is inconvenient to store modification\n   dates, where the one-second resolution of HTTP date values is not\n   sufficient, or where modification dates are not consistently\n   maintained.\n\n   Examples:\n\n     ETag: \"xyzzy\"\n     ETag: W/\"xyzzy\"\n     ETag: \"\"\n\n   An entity-tag can be either a weak or strong validator, with strong\n   being the default.  If an origin server provides an entity-tag for a\n   representation and the generation of that entity-tag does not satisfy\n   all of the characteristics of a strong validator (<a href=\"#section-2.1\">Section 2.1</a>), then\n   the origin server MUST mark the entity-tag as weak by prefixing its\n   opaque value with \"W/\" (case-sensitive).\n\n<h4 class=\"h4\" id=\"section-2.3.1\">2.3.1.  Generation</h4>\n   The principle behind entity-tags is that only the service author\n   knows the implementation of a resource well enough to select the most\n   accurate and efficient validation mechanism for that resource, and\n   that any such mechanism can be mapped to a simple sequence of octets\n   for easy comparison.  Since the value is opaque, there is no need for\n   the client to be aware of how each entity-tag is constructed.\n\n   For example, a resource that has implementation-specific versioning\n   applied to all changes might use an internal revision number, perhaps\n   combined with a variance identifier for content negotiation, to\n   accurately differentiate between representations.  Other\n   implementations might use a collision-resistant hash of\n   representation content, a combination of various file attributes, or\n   a modification timestamp that has sub-second resolution.\n\n   An origin server SHOULD send an ETag for any selected representation\n   for which detection of changes can be reasonably and consistently\n   determined, since the entity-tag's use in conditional requests and\n   evaluating cache freshness ([<a href=\"https://tools.ietf.org/html/rfc7234\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Caching\"'>RFC7234</a>]) can result in a substantial\n   reduction of HTTP network traffic and can be a significant factor in\n   improving service scalability and reliability.\n\n<h4 class=\"h4\" id=\"section-2.3.2\">2.3.2.  Comparison</h4>\n   There are two entity-tag comparison functions, depending on whether\n   or not the comparison context allows the use of weak validators:\n\n   o  Strong comparison: two entity-tags are equivalent if both are not\n      weak and their opaque-tags match character-by-character.\n\n   o  Weak comparison: two entity-tags are equivalent if their\n      opaque-tags match character-by-character, regardless of either or\n      both being tagged as \"weak\".\n\n   The example below shows the results for a set of entity-tag pairs and\n   both the weak and strong comparison function results:\n\n   +--------+--------+-------------------+-----------------+\n   | ETag 1 | ETag 2 | Strong Comparison | Weak Comparison |\n   +--------+--------+-------------------+-----------------+\n   | W/\"1\"  | W/\"1\"  | no match          | match           |\n   | W/\"1\"  | W/\"2\"  | no match          | no match        |\n   | W/\"1\"  | \"1\"    | no match          | match           |\n   | \"1\"    | \"1\"    | match             | match           |\n   +--------+--------+-------------------+-----------------+\n\n<h4 class=\"h4\" id=\"section-2.3.3\">2.3.3.  Example: Entity-Tags Varying on Content-Negotiated Resources</h4>\n   Consider a resource that is subject to content negotiation (<a href=\"#section-3.4\">Section</a>\n   <a href=\"#section-3.4\">3.4</a> of [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>]), and where the representations sent in response to\n   a GET request vary based on the Accept-Encoding request header field\n   (<a href=\"https://tools.ietf.org/html/rfc7231#section-5.3.4\">Section 5.3.4 of [RFC7231]</a>):\n\n   &gt;&gt; Request:\n\n     GET /index HTTP/1.1\n     Host: www.example.com\n     Accept-Encoding: gzip\n\n\n   In this case, the response might or might not use the gzip content\n   coding.  If it does not, the response might look like:\n\n   &gt;&gt; Response:\n\n     HTTP/1.1 200 OK\n     Date: Fri, 26 Mar 2010 00:05:00 GMT\n     ETag: \"123-a\"\n     Content-Length: 70\n     Vary: Accept-Encoding\n     Content-Type: text/plain\n\n     Hello World!\n     Hello World!\n     Hello World!\n     Hello World!\n     Hello World!\n\n   An alternative representation that does use gzip content coding would\n   be:\n\n   &gt;&gt; Response:\n\n     HTTP/1.1 200 OK\n     Date: Fri, 26 Mar 2010 00:05:00 GMT\n     ETag: \"123-b\"\n     Content-Length: 43\n     Vary: Accept-Encoding\n     Content-Type: text/plain\n     Content-Encoding: gzip\n\n     ...binary data\n\n      Note: Content codings are a property of the representation data,\n      so a strong entity-tag for a content-encoded representation has to\n      be distinct from the entity tag of an unencoded representation to\n      prevent potential conflicts during cache updates and range\n      requests.  In contrast, transfer codings (<a href=\"https://tools.ietf.org/html/rfc7230#section-4\">Section 4 of [RFC7230]</a>)\n      apply only during message transfer and do not result in distinct\n      entity-tags.\n\n<h3 class=\"h3\" id=\"section-2.4\">2.4.  When to Use Entity-Tags and Last-Modified Dates</h3>\n   In 200 (OK) responses to GET or HEAD, an origin server:\n\n   o  SHOULD send an entity-tag validator unless it is not feasible to\n      generate one.\n\n   o  MAY send a weak entity-tag instead of a strong entity-tag, if\n      performance considerations support the use of weak entity-tags, or\n      if it is unfeasible to send a strong entity-tag.\n\n   o  SHOULD send a Last-Modified value if it is feasible to send one.\n\n   In other words, the preferred behavior for an origin server is to\n   send both a strong entity-tag and a Last-Modified value in successful\n   responses to a retrieval request.\n\n   A client:\n\n   o  MUST send that entity-tag in any cache validation request (using\n      If-Match or If-None-Match) if an entity-tag has been provided by\n      the origin server.\n\n   o  SHOULD send the Last-Modified value in non-subrange cache\n      validation requests (using If-Modified-Since) if only a\n      Last-Modified value has been provided by the origin server.\n\n   o  MAY send the Last-Modified value in subrange cache validation\n      requests (using If-Unmodified-Since) if only a Last-Modified value\n      has been provided by an HTTP/1.0 origin server.  The user agent\n      SHOULD provide a way to disable this, in case of difficulty.\n\n   o  SHOULD send both validators in cache validation requests if both\n      an entity-tag and a Last-Modified value have been provided by the\n      origin server.  This allows both HTTP/1.0 and HTTP/1.1 caches to\n      respond appropriately.\n\n<h2 class=\"h2\" id=\"section-3\">3.  Precondition Header Fields</h2>\n   This section defines the syntax and semantics of HTTP/1.1 header\n   fields for applying preconditions on requests.  <a href=\"#section-5\">Section 5</a> defines\n   when the preconditions are applied.  <a href=\"#section-6\">Section 6</a> defines the order of\n   evaluation when more than one precondition is present.\n\n<h3 class=\"h3\" id=\"section-3.1\">3.1.  If-Match</h3>\n   The \"If-Match\" header field makes the request method conditional on\n   the recipient origin server either having at least one current\n   representation of the target resource, when the field-value is \"*\",\n   or having a current representation of the target resource that has an\n   entity-tag matching a member of the list of entity-tags provided in\n   the field-value.\n\n   An origin server MUST use the strong comparison function when\n   comparing entity-tags for If-Match (<a href=\"#section-2.3.2\">Section 2.3.2</a>), since the client\n   intends this precondition to prevent the method from being applied if\n   there have been any changes to the representation data.\n\n     If-Match = \"*\" / 1#entity-tag\n\n   Examples:\n\n     If-Match: \"xyzzy\"\n     If-Match: \"xyzzy\", \"r2d2xxxx\", \"c3piozzzz\"\n     If-Match: *\n\n   If-Match is most often used with state-changing methods (e.g., POST,\n   PUT, DELETE) to prevent accidental overwrites when multiple user\n   agents might be acting in parallel on the same resource (i.e., to\n\n   prevent the \"lost update\" problem).  It can also be used with safe\n   methods to abort a request if the selected representation does not\n   match one already stored (or partially stored) from a prior request.\n\n   An origin server that receives an If-Match header field MUST evaluate\n   the condition prior to performing the method (<a href=\"#section-5\">Section 5</a>).  If the\n   field-value is \"*\", the condition is false if the origin server does\n   not have a current representation for the target resource.  If the\n   field-value is a list of entity-tags, the condition is false if none\n   of the listed tags match the entity-tag of the selected\n   representation.\n\n   An origin server MUST NOT perform the requested method if a received\n   If-Match condition evaluates to false; instead, the origin server\n   MUST respond with either a) the 412 (Precondition Failed) status code\n   or b) one of the 2xx (Successful) status codes if the origin server\n   has verified that a state change is being requested and the final\n   state is already reflected in the current state of the target\n   resource (i.e., the change requested by the user agent has already\n   succeeded, but the user agent might not be aware of it, perhaps\n   because the prior response was lost or a compatible change was made\n   by some other user agent).  In the latter case, the origin server\n   MUST NOT send a validator header field in the response unless it can\n   verify that the request is a duplicate of an immediately prior change\n   made by the same user agent.\n\n   The If-Match header field can be ignored by caches and intermediaries\n   because it is not applicable to a stored response.\n\n<h3 class=\"h3\" id=\"section-3.2\">3.2.  If-None-Match</h3>\n   The \"If-None-Match\" header field makes the request method conditional\n   on a recipient cache or origin server either not having any current\n   representation of the target resource, when the field-value is \"*\",\n   or having a selected representation with an entity-tag that does not\n   match any of those listed in the field-value.\n\n   A recipient MUST use the weak comparison function when comparing\n   entity-tags for If-None-Match (<a href=\"#section-2.3.2\">Section 2.3.2</a>), since weak entity-tags\n   can be used for cache validation even if there have been changes to\n   the representation data.\n\n     If-None-Match = \"*\" / 1#entity-tag\n\n   Examples:\n\n     If-None-Match: \"xyzzy\"\n     If-None-Match: W/\"xyzzy\"\n     If-None-Match: \"xyzzy\", \"r2d2xxxx\", \"c3piozzzz\"\n     If-None-Match: W/\"xyzzy\", W/\"r2d2xxxx\", W/\"c3piozzzz\"\n     If-None-Match: *\n\n   If-None-Match is primarily used in conditional GET requests to enable\n   efficient updates of cached information with a minimum amount of\n   transaction overhead.  When a client desires to update one or more\n   stored responses that have entity-tags, the client SHOULD generate an\n   If-None-Match header field containing a list of those entity-tags\n   when making a GET request; this allows recipient servers to send a\n   304 (Not Modified) response to indicate when one of those stored\n   responses matches the selected representation.\n\n   If-None-Match can also be used with a value of \"*\" to prevent an\n   unsafe request method (e.g., PUT) from inadvertently modifying an\n   existing representation of the target resource when the client\n   believes that the resource does not have a current representation\n   (<a href=\"https://tools.ietf.org/html/rfc7231#section-4.2.1\">Section 4.2.1 of [RFC7231]</a>).  This is a variation on the \"lost\n   update\" problem that might arise if more than one client attempts to\n   create an initial representation for the target resource.\n\n   An origin server that receives an If-None-Match header field MUST\n   evaluate the condition prior to performing the method (<a href=\"#section-5\">Section 5</a>).\n   If the field-value is \"*\", the condition is false if the origin\n   server has a current representation for the target resource.  If the\n   field-value is a list of entity-tags, the condition is false if one\n   of the listed tags match the entity-tag of the selected\n   representation.\n\n   An origin server MUST NOT perform the requested method if the\n   condition evaluates to false; instead, the origin server MUST respond\n   with either a) the 304 (Not Modified) status code if the request\n   method is GET or HEAD or b) the 412 (Precondition Failed) status code\n   for all other request methods.\n\n   Requirements on cache handling of a received If-None-Match header\n   field are defined in <a href=\"https://tools.ietf.org/html/rfc7234#section-4.3.2\">Section 4.3.2 of [RFC7234]</a>.\n\n<h3 class=\"h3\" id=\"section-3.3\">3.3.  If-Modified-Since</h3>\n   The \"If-Modified-Since\" header field makes a GET or HEAD request\n   method conditional on the selected representation's modification date\n   being more recent than the date provided in the field-value.\n   Transfer of the selected representation's data is avoided if that\n   data has not changed.\n\n     If-Modified-Since = HTTP-date\n\n   An example of the field is:\n\n     If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT\n\n   A recipient MUST ignore If-Modified-Since if the request contains an\n   If-None-Match header field; the condition in If-None-Match is\n   considered to be a more accurate replacement for the condition in\n   If-Modified-Since, and the two are only combined for the sake of\n   interoperating with older intermediaries that might not implement\n   If-None-Match.\n\n   A recipient MUST ignore the If-Modified-Since header field if the\n   received field-value is not a valid HTTP-date, or if the request\n   method is neither GET nor HEAD.\n\n   A recipient MUST interpret an If-Modified-Since field-value's\n   timestamp in terms of the origin server's clock.\n\n   If-Modified-Since is typically used for two distinct purposes: 1) to\n   allow efficient updates of a cached representation that does not have\n   an entity-tag and 2) to limit the scope of a web traversal to\n   resources that have recently changed.\n\n   When used for cache updates, a cache will typically use the value of\n   the cached message's Last-Modified field to generate the field value\n   of If-Modified-Since.  This behavior is most interoperable for cases\n   where clocks are poorly synchronized or when the server has chosen to\n   only honor exact timestamp matches (due to a problem with\n   Last-Modified dates that appear to go \"back in time\" when the origin\n   server's clock is corrected or a representation is restored from an\n   archived backup).  However, caches occasionally generate the field\n   value based on other data, such as the Date header field of the\n   cached message or the local clock time that the message was received,\n   particularly when the cached message does not contain a Last-Modified\n   field.\n\n   When used for limiting the scope of retrieval to a recent time\n   window, a user agent will generate an If-Modified-Since field value\n   based on either its own local clock or a Date header field received\n   from the server in a prior response.  Origin servers that choose an\n   exact timestamp match based on the selected representation's\n   Last-Modified field will not be able to help the user agent limit its\n   data transfers to only those changed during the specified window.\n\n   An origin server that receives an If-Modified-Since header field\n   SHOULD evaluate the condition prior to performing the method\n   (<a href=\"#section-5\">Section 5</a>).  The origin server SHOULD NOT perform the requested\n   method if the selected representation's last modification date is\n   earlier than or equal to the date provided in the field-value;\n   instead, the origin server SHOULD generate a 304 (Not Modified)\n   response, including only those metadata that are useful for\n   identifying or updating a previously cached response.\n\n   Requirements on cache handling of a received If-Modified-Since header\n   field are defined in <a href=\"https://tools.ietf.org/html/rfc7234#section-4.3.2\">Section 4.3.2 of [RFC7234]</a>.\n\n<h3 class=\"h3\" id=\"section-3.4\">3.4.  If-Unmodified-Since</h3>\n   The \"If-Unmodified-Since\" header field makes the request method\n   conditional on the selected representation's last modification date\n   being earlier than or equal to the date provided in the field-value.\n   This field accomplishes the same purpose as If-Match for cases where\n   the user agent does not have an entity-tag for the representation.\n\n     If-Unmodified-Since = HTTP-date\n\n   An example of the field is:\n\n     If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT\n\n   A recipient MUST ignore If-Unmodified-Since if the request contains\n   an If-Match header field; the condition in If-Match is considered to\n   be a more accurate replacement for the condition in\n   If-Unmodified-Since, and the two are only combined for the sake of\n   interoperating with older intermediaries that might not implement\n   If-Match.\n\n   A recipient MUST ignore the If-Unmodified-Since header field if the\n   received field-value is not a valid HTTP-date.\n\n   A recipient MUST interpret an If-Unmodified-Since field-value's\n   timestamp in terms of the origin server's clock.\n\n   If-Unmodified-Since is most often used with state-changing methods\n   (e.g., POST, PUT, DELETE) to prevent accidental overwrites when\n   multiple user agents might be acting in parallel on a resource that\n   does not supply entity-tags with its representations (i.e., to\n   prevent the \"lost update\" problem).  It can also be used with safe\n   methods to abort a request if the selected representation does not\n   match one already stored (or partially stored) from a prior request.\n\n   An origin server that receives an If-Unmodified-Since header field\n   MUST evaluate the condition prior to performing the method\n   (<a href=\"#section-5\">Section 5</a>).  The origin server MUST NOT perform the requested method\n   if the selected representation's last modification date is more\n   recent than the date provided in the field-value; instead the origin\n   server MUST respond with either a) the 412 (Precondition Failed)\n   status code or b) one of the 2xx (Successful) status codes if the\n   origin server has verified that a state change is being requested and\n   the final state is already reflected in the current state of the\n   target resource (i.e., the change requested by the user agent has\n   already succeeded, but the user agent might not be aware of that\n   because the prior response message was lost or a compatible change\n   was made by some other user agent).  In the latter case, the origin\n   server MUST NOT send a validator header field in the response unless\n   it can verify that the request is a duplicate of an immediately prior\n   change made by the same user agent.\n\n   The If-Unmodified-Since header field can be ignored by caches and\n   intermediaries because it is not applicable to a stored response.\n\n<h3 class=\"h3\" id=\"section-3.5\">3.5.  If-Range</h3>\n   The \"If-Range\" header field provides a special conditional request\n   mechanism that is similar to the If-Match and If-Unmodified-Since\n   header fields but that instructs the recipient to ignore the Range\n   header field if the validator doesn't match, resulting in transfer of\n   the new selected representation instead of a 412 (Precondition\n   Failed) response.  If-Range is defined in <a href=\"https://tools.ietf.org/html/rfc7233#section-3.2\">Section 3.2 of [RFC7233]</a>.\n\n<h2 class=\"h2\" id=\"section-4\">4.  Status Code Definitions</h2>\n<h3 class=\"h3\" id=\"section-4.1\">4.1.  304 Not Modified</h3>\n   The 304 (Not Modified) status code indicates that a conditional GET\n   or HEAD request has been received and would have resulted in a 200\n   (OK) response if it were not for the fact that the condition\n   evaluated to false.  In other words, there is no need for the server\n   to transfer a representation of the target resource because the\n   request indicates that the client, which made the request\n\n   conditional, already has a valid representation; the server is\n   therefore redirecting the client to make use of that stored\n   representation as if it were the payload of a 200 (OK) response.\n\n   The server generating a 304 response MUST generate any of the\n   following header fields that would have been sent in a 200 (OK)\n   response to the same request: Cache-Control, Content-Location, Date,\n   ETag, Expires, and Vary.\n\n   Since the goal of a 304 response is to minimize information transfer\n   when the recipient already has one or more cached representations, a\n   sender SHOULD NOT generate representation metadata other than the\n   above listed fields unless said metadata exists for the purpose of\n   guiding cache updates (e.g., Last-Modified might be useful if the\n   response does not have an ETag field).\n\n   Requirements on a cache that receives a 304 response are defined in\n   <a href=\"https://tools.ietf.org/html/rfc7234#section-4.3.4\">Section 4.3.4 of [RFC7234]</a>.  If the conditional request originated\n   with an outbound client, such as a user agent with its own cache\n   sending a conditional GET to a shared proxy, then the proxy SHOULD\n   forward the 304 response to that client.\n\n   A 304 response cannot contain a message-body; it is always terminated\n   by the first empty line after the header fields.\n\n<h3 class=\"h3\" id=\"section-4.2\">4.2.  412 Precondition Failed</h3>\n   The 412 (Precondition Failed) status code indicates that one or more\n   conditions given in the request header fields evaluated to false when\n   tested on the server.  This response code allows the client to place\n   preconditions on the current resource state (its current\n   representations and metadata) and, thus, prevent the request method\n   from being applied if the target resource is in an unexpected state.\n\n<h2 class=\"h2\" id=\"section-5\">5.  Evaluation</h2>\n   Except when excluded below, a recipient cache or origin server MUST\n   evaluate received request preconditions after it has successfully\n   performed its normal request checks and just before it would perform\n   the action associated with the request method.  A server MUST ignore\n   all received preconditions if its response to the same request\n   without those conditions would have been a status code other than a\n   2xx (Successful) or 412 (Precondition Failed).  In other words,\n   redirects and failures take precedence over the evaluation of\n   preconditions in conditional requests.\n\n   A server that is not the origin server for the target resource and\n   cannot act as a cache for requests on the target resource MUST NOT\n   evaluate the conditional request header fields defined by this\n   specification, and it MUST forward them if the request is forwarded,\n   since the generating client intends that they be evaluated by a\n   server that can provide a current representation.  Likewise, a server\n   MUST ignore the conditional request header fields defined by this\n   specification when received with a request method that does not\n   involve the selection or modification of a selected representation,\n   such as CONNECT, OPTIONS, or TRACE.\n\n   Conditional request header fields that are defined by extensions to\n   HTTP might place conditions on all recipients, on the state of the\n   target resource in general, or on a group of resources.  For\n   instance, the \"If\" header field in WebDAV can make a request\n   conditional on various aspects of multiple resources, such as locks,\n   if the recipient understands and implements that field (<a href=\"https://tools.ietf.org/html/rfc4918#section-10.4\">[RFC4918],\n   Section 10.4</a>).\n\n   Although conditional request header fields are defined as being\n   usable with the HEAD method (to keep HEAD's semantics consistent with\n   those of GET), there is no point in sending a conditional HEAD\n   because a successful response is around the same size as a 304 (Not\n   Modified) response and more useful than a 412 (Precondition Failed)\n   response.\n\n<h2 class=\"h2\" id=\"section-6\">6.  Precedence</h2>\n   When more than one conditional request header field is present in a\n   request, the order in which the fields are evaluated becomes\n   important.  In practice, the fields defined in this document are\n   consistently implemented in a single, logical order, since \"lost\n   update\" preconditions have more strict requirements than cache\n   validation, a validated cache is more efficient than a partial\n   response, and entity tags are presumed to be more accurate than date\n   validators.\n\n   A recipient cache or origin server MUST evaluate the request\n   preconditions defined by this specification in the following order:\n\n   1.  When recipient is the origin server and If-Match is present,\n       evaluate the If-Match precondition:\n\n       *  if true, continue to step 3\n\n       *  if false, respond 412 (Precondition Failed) unless it can be\n          determined that the state-changing request has already\n          succeeded (see <a href=\"#section-3.1\">Section 3.1</a>)\n\n   2.  When recipient is the origin server, If-Match is not present, and\n       If-Unmodified-Since is present, evaluate the If-Unmodified-Since\n       precondition:\n\n       *  if true, continue to step 3\n\n       *  if false, respond 412 (Precondition Failed) unless it can be\n          determined that the state-changing request has already\n          succeeded (see <a href=\"#section-3.4\">Section 3.4</a>)\n\n   3.  When If-None-Match is present, evaluate the If-None-Match\n       precondition:\n\n       *  if true, continue to step 5\n\n       *  if false for GET/HEAD, respond 304 (Not Modified)\n\n       *  if false for other methods, respond 412 (Precondition Failed)\n\n   4.  When the method is GET or HEAD, If-None-Match is not present, and\n       If-Modified-Since is present, evaluate the If-Modified-Since\n       precondition:\n\n       *  if true, continue to step 5\n\n       *  if false, respond 304 (Not Modified)\n\n   5.  When the method is GET and both Range and If-Range are present,\n       evaluate the If-Range precondition:\n\n       *  if the validator matches and the Range specification is\n          applicable to the selected representation, respond 206\n          (Partial Content) [<a href=\"https://tools.ietf.org/html/rfc7233\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\"'>RFC7233</a>]\n\n   6.  Otherwise,\n\n       *  all conditions are met, so perform the requested action and\n          respond according to its success or failure.\n\n   Any extension to HTTP/1.1 that defines additional conditional request\n   header fields ought to define its own expectations regarding the\n   order for evaluating such fields in relation to those defined in this\n   document and other conditionals that might be found in practice.\n\n<h2 class=\"h2\" id=\"section-7\">7.  IANA Considerations</h2>\n<h3 class=\"h3\" id=\"section-7.1\">7.1.  Status Code Registration</h3>\n   The \"Hypertext Transfer Protocol (HTTP) Status Code Registry\" located\n   at &lt;<a href=\"http://www.iana.org/assignments/http-status-codes\">http://www.iana.org/assignments/http-status-codes</a>&gt; has been\n   updated with the registrations below:\n\n   +-------+---------------------+-------------+\n   | Value | Description         | Reference   |\n   +-------+---------------------+-------------+\n   | 304   | Not Modified        | <a href=\"#section-4.1\">Section 4.1</a> |\n   | 412   | Precondition Failed | <a href=\"#section-4.2\">Section 4.2</a> |\n   +-------+---------------------+-------------+\n\n<h3 class=\"h3\" id=\"section-7.2\">7.2.  Header Field Registration</h3>\n   HTTP header fields are registered within the \"Message Headers\"\n   registry maintained at\n   &lt;<a href=\"http://www.iana.org/assignments/message-headers/\">http://www.iana.org/assignments/message-headers/</a>&gt;.\n\n   This document defines the following HTTP header fields, so their\n   associated registry entries have been updated according to the\n   permanent registrations below (see [<a href=\"#ref-BCP90\" title='\"Registration Procedures for Message Header Fields\"'>BCP90</a>]):\n\n   +---------------------+----------+----------+-------------+\n   | Header Field Name   | Protocol | Status   | Reference   |\n   +---------------------+----------+----------+-------------+\n   | ETag                | http     | standard | <a href=\"#section-2.3\">Section 2.3</a> |\n   | If-Match            | http     | standard | <a href=\"#section-3.1\">Section 3.1</a> |\n   | If-Modified-Since   | http     | standard | <a href=\"#section-3.3\">Section 3.3</a> |\n   | If-None-Match       | http     | standard | <a href=\"#section-3.2\">Section 3.2</a> |\n   | If-Unmodified-Since | http     | standard | <a href=\"#section-3.4\">Section 3.4</a> |\n   | Last-Modified       | http     | standard | <a href=\"#section-2.2\">Section 2.2</a> |\n   +---------------------+----------+----------+-------------+\n\n   The change controller is: \"IETF (iesg@ietf.org) - Internet\n   Engineering Task Force\".\n\n<h2 class=\"h2\" id=\"section-8\">8.  Security Considerations</h2>\n   This section is meant to inform developers, information providers,\n   and users of known security concerns specific to the HTTP conditional\n   request mechanisms.  More general security considerations are\n   addressed in HTTP \"Message Syntax and Routing\" [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>] and\n   \"Semantics and Content\" [<a href=\"https://tools.ietf.org/html/rfc7231\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\"'>RFC7231</a>].\n\n   The validators defined by this specification are not intended to\n   ensure the validity of a representation, guard against malicious\n   changes, or detect man-in-the-middle attacks.  At best, they enable\n   more efficient cache updates and optimistic concurrent writes when\n   all participants are behaving nicely.  At worst, the conditions will\n   fail and the client will receive a response that is no more harmful\n   than an HTTP exchange without conditional requests.\n\n   An entity-tag can be abused in ways that create privacy risks.  For\n   example, a site might deliberately construct a semantically invalid\n   entity-tag that is unique to the user or user agent, send it in a\n   cacheable response with a long freshness time, and then read that\n   entity-tag in later conditional requests as a means of re-identifying\n   that user or user agent.  Such an identifying tag would become a\n   persistent identifier for as long as the user agent retained the\n   original cache entry.  User agents that cache representations ought\n   to ensure that the cache is cleared or replaced whenever the user\n   performs privacy-maintaining actions, such as clearing stored cookies\n   or changing to a private browsing mode.\n\n<h2 class=\"h2\" id=\"section-9\">9.  Acknowledgments</h2>\n   See <a href=\"https://tools.ietf.org/html/rfc7230#section-10\">Section 10 of [RFC7230]</a>.\n\n<h2 class=\"h2\" id=\"section-10\">10.  References</h2>\n<h3 class=\"h3\" id=\"section-10.1\">10.1.  Normative References</h3>\n   [<a name=\"ref-RFC2119\" id=\"ref-RFC2119\">RFC2119</a>]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\", <a href=\"https://tools.ietf.org/html/bcp14\">BCP 14</a>, <a href=\"https://tools.ietf.org/html/rfc2119\">RFC 2119</a>, March 1997.\n\n   [<a name=\"ref-RFC5234\" id=\"ref-RFC5234\">RFC5234</a>]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications: ABNF\", STD 68, <a href=\"https://tools.ietf.org/html/rfc5234\">RFC 5234</a>, January 2008.\n\n   [<a name=\"ref-RFC7230\" id=\"ref-RFC7230\">RFC7230</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Message Syntax and Routing\",\n              <a href=\"https://tools.ietf.org/html/rfc7230\">RFC 7230</a>, June 2014.\n\n   [<a name=\"ref-RFC7231\" id=\"ref-RFC7231\">RFC7231</a>]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Semantics and Content\", <a href=\"https://tools.ietf.org/html/rfc7231\">RFC 7231</a>,\n              June 2014.\n\n   [<a name=\"ref-RFC7233\" id=\"ref-RFC7233\">RFC7233</a>]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,\n              \"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\",\n              <a href=\"https://tools.ietf.org/html/rfc7233\">RFC 7233</a>, June 2014.\n\n   [<a name=\"ref-RFC7234\" id=\"ref-RFC7234\">RFC7234</a>]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              <a href=\"https://tools.ietf.org/html/rfc7234\">RFC 7234</a>, June 2014.\n\n<h3 class=\"h3\" id=\"section-10.2\">10.2.  Informative References</h3>\n   [<a name=\"ref-BCP90\" id=\"ref-BCP90\">BCP90</a>]    Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures for Message Header Fields\", <a href=\"https://tools.ietf.org/html/bcp90\">BCP 90</a>, <a href=\"https://tools.ietf.org/html/rfc3864\">RFC 3864</a>,\n              September 2004.\n\n   [<a name=\"ref-RFC2616\" id=\"ref-RFC2616\">RFC2616</a>]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>, June 1999.\n\n   [<a name=\"ref-RFC4918\" id=\"ref-RFC4918\">RFC4918</a>]  Dusseault, L., Ed., \"HTTP Extensions for Web Distributed\n              Authoring and Versioning (WebDAV)\", <a href=\"https://tools.ietf.org/html/rfc4918\">RFC 4918</a>, June 2007.\n\n<h2 class=\"h2\" id=\"appendix-A\">Appendix A.  Changes from <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a>\n</h2>\n   The definition of validator weakness has been expanded and clarified.\n   (<a href=\"#section-2.1\">Section 2.1</a>)\n\n   Weak entity-tags are now allowed in all requests except range\n   requests.  (Sections <a href=\"#section-2.1\">2.1</a> and <a href=\"#section-3.2\">3.2</a>)\n\n   The ETag header field ABNF has been changed to not use quoted-string,\n   thus avoiding escaping issues.  (<a href=\"#section-2.3\">Section 2.3</a>)\n\n   ETag is defined to provide an entity tag for the selected\n   representation, thereby clarifying what it applies to in various\n   situations (such as a PUT response).  (<a href=\"#section-2.3\">Section 2.3</a>)\n\n   The precedence for evaluation of conditional requests has been\n   defined.  (<a href=\"#section-6\">Section 6</a>)\n\n<h2 class=\"h2\" id=\"appendix-B\">Appendix B.  Imported ABNF</h2>\n   The following core rules are included by reference, as defined in\n   <a href=\"https://tools.ietf.org/html/rfc5234#appendix-B.1\">Appendix B.1 of [RFC5234]</a>: ALPHA (letters), CR (carriage return),\n   CRLF (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double\n   quote), HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed), OCTET (any\n   8-bit sequence of data), SP (space), and VCHAR (any visible US-ASCII\n   character).\n\n   The rules below are defined in [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>]:\n\n     OWS           = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n     obs-text      = &lt;obs-text, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n\n   The rules below are defined in other parts:\n\n     HTTP-date     = &lt;HTTP-date, see <a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.1.1\">[RFC7231], Section 7.1.1.1</a>&gt;\n\n<h2 class=\"h2\" id=\"appendix-C\">Appendix C.  Collected ABNF</h2>\n   In the collected ABNF below, list rules are expanded as per <a href=\"#section-1.2\">Section</a>\n   <a href=\"#section-1.2\">1.2</a> of [<a href=\"https://tools.ietf.org/html/rfc7230\" title='\"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\"'>RFC7230</a>].\n\n   ETag = entity-tag\n\n   HTTP-date = &lt;HTTP-date, see <a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.1.1\">[RFC7231], Section 7.1.1.1</a>&gt;\n\n   If-Match = \"*\" / ( *( \",\" OWS ) entity-tag *( OWS \",\" [ OWS\n    entity-tag ] ) )\n   If-Modified-Since = HTTP-date\n   If-None-Match = \"*\" / ( *( \",\" OWS ) entity-tag *( OWS \",\" [ OWS\n    entity-tag ] ) )\n   If-Unmodified-Since = HTTP-date\n\n   Last-Modified = HTTP-date\n\n   OWS = &lt;OWS, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.3\">[RFC7230], Section 3.2.3</a>&gt;\n\n   entity-tag = [ weak ] opaque-tag\n   etagc = \"!\" / %x23-7E ; '#'-'~'\n    / obs-text\n\n   obs-text = &lt;obs-text, see <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">[RFC7230], Section 3.2.6</a>&gt;\n   opaque-tag = DQUOTE *etagc DQUOTE\n\n   weak = %x57.2F ; W/\n\nIndex\n\n   3\n      304 Not Modified (status code)  19\n\n   4\n      412 Precondition Failed (status code)  18\n\n   E\n      ETag header field  9\n\n   G\n      Grammar\n         entity-tag  9\n         ETag  9\n         etagc  9\n         If-Match  13\n         If-Modified-Since  15\n         If-None-Match  14\n         If-Unmodified-Since  17\n         Last-Modified  7\n         opaque-tag  9\n         weak  9\n\n   I\n      If-Match header field  13\n      If-Modified-Since header field  16\n      If-None-Match header field  14\n      If-Unmodified-Since header field  17\n\n   L\n      Last-Modified header field  7\n\n   M\n      metadata  5\n\n   S\n      selected representation  4\n\n   V\n      validator  5\n         strong  5\n         weak  5\n\nAuthors' Addresses\n\n   Roy T. Fielding (editor)\n   Adobe Systems Incorporated\n   345 Park Ave\n   San Jose, CA  95110\n   USA\n\n   EMail: fielding@gbiv.com\n   URI:   <a href=\"http://roy.gbiv.com/\">http://roy.gbiv.com/</a>\n\n\n   Julian F. Reschke (editor)\n   greenbytes GmbH\n   Hafenweg 16\n   Muenster, NW  48155\n   Germany\n\n   EMail: julian.reschke@greenbytes.de\n   URI:   <a href=\"http://greenbytes.de/tech/webdav/\">http://greenbytes.de/tech/webdav/</a>\n\n\nFielding &amp; Reschke           Standards Track                   [Page 28]<br>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; document authors. All rights reserved.<br>\n    <a href=\"https://tools.ietf.org/html/rfc7232\" class=\"_attribution-link\">https://tools.ietf.org/html/rfc7232</a>\n  </p>\n</div>\n","rfc2616":"<div class=\"_rfc-pre\">Network Working Group                                      R. Fielding\nRequest for Comments: 2616                                   UC Irvine\nObsoletes: <a href=\"https://tools.ietf.org/html/rfc2068\">2068</a>                                              J. Gettys\nCategory: Standards Track                                   Compaq/W3C\n                                                              J. Mogul\n                                                                Compaq\n                                                            H. Frystyk\n                                                               W3C/MIT\n                                                           L. Masinter\n                                                                 Xerox\n                                                              P. Leach\n                                                             Microsoft\n                                                        T. Berners-Lee\n                                                               W3C/MIT\n                                                             June 1999\n\n\n                <h1 class=\"h1\">Hypertext Transfer Protocol -- HTTP/1.1</h1>\nStatus of this Memo\n\n   This document specifies an Internet standards track protocol for the\n   Internet community, and requests discussion and suggestions for\n   improvements.  Please refer to the current edition of the \"Internet\n   Official Protocol Standards\" (STD 1) for the standardization state\n   and status of this protocol.  Distribution of this memo is unlimited.\n\nCopyright Notice\n\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n\nAbstract\n\n   The Hypertext Transfer Protocol (HTTP) is an application-level\n   protocol for distributed, collaborative, hypermedia information\n   systems. It is a generic, stateless, protocol which can be used for\n   many tasks beyond its use for hypertext, such as name servers and\n   distributed object management systems, through extension of its\n   request methods, error codes and headers [<a href=\"#ref-47\" title='\"Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)\"'>47</a>]. A feature of HTTP is\n   the typing and negotiation of data representation, allowing systems\n   to be built independently of the data being transferred.\n\n   HTTP has been in use by the World-Wide Web global information\n   initiative since 1990. This specification defines the protocol\n   referred to as \"HTTP/1.1\", and is an update to <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a> [<a href=\"#ref-33\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>33</a>].\n\nTable of Contents\n\n   <a href=\"#section-1\">1</a>   Introduction \n   <a href=\"#section-1.1\">1.1</a>    Purpose\n   <a href=\"#section-1.2\">1.2</a>   Requirements \n   <a href=\"#section-1.3\">1.3</a>   Terminology \n   <a href=\"#section-1.4\">1.4</a>   Overall Operation \n   <a href=\"#section-2\">2</a>   Notational Conventions and Generic Grammar \n   <a href=\"#section-2.1\">2.1</a>   Augmented BNF \n   <a href=\"#section-2.2\">2.2</a>   Basic Rules \n   <a href=\"#section-3\">3</a>   Protocol Parameters \n   <a href=\"#section-3.1\">3.1</a>   HTTP Version \n   <a href=\"#section-3.2\">3.2</a>   Uniform Resource Identifiers \n   <a href=\"#section-3.2.1\">3.2.1</a>    General Syntax \n   <a href=\"#section-3.2.2\">3.2.2</a>    http URL \n   <a href=\"#section-3.2.3\">3.2.3</a>    URI Comparison \n   <a href=\"#section-3.3\">3.3</a>   Date/Time Formats \n   <a href=\"#section-3.3.1\">3.3.1</a>    Full Date \n   <a href=\"#section-3.3.2\">3.3.2</a>    Delta Seconds \n   <a href=\"#section-3.4\">3.4</a>   Character Sets \n   <a href=\"#section-3.4.1\">3.4.1</a>    Missing Charset \n   <a href=\"#section-3.5\">3.5</a>   Content Codings \n   <a href=\"#section-3.6\">3.6</a>   Transfer Codings \n   <a href=\"#section-3.6.1\">3.6.1</a>    Chunked Transfer Coding \n   <a href=\"#section-3.7\">3.7</a>   Media Types \n   <a href=\"#section-3.7.1\">3.7.1</a>    Canonicalization and Text Defaults \n   <a href=\"#section-3.7.2\">3.7.2</a>    Multipart Types \n   <a href=\"#section-3.8\">3.8</a>   Product Tokens \n   <a href=\"#section-3.9\">3.9</a>   Quality Values \n   <a href=\"#section-3.10\">3.10</a>  Language Tags \n   <a href=\"#section-3.11\">3.11</a>  Entity Tags \n   <a href=\"#section-3.12\">3.12</a>  Range Units \n   <a href=\"#section-4\">4</a>   HTTP Message \n   <a href=\"#section-4.1\">4.1</a>   Message Types \n   <a href=\"#section-4.2\">4.2</a>   Message Headers \n   <a href=\"#section-4.3\">4.3</a>   Message Body \n   <a href=\"#section-4.4\">4.4</a>   Message Length \n   <a href=\"#section-4.5\">4.5</a>   General Header Fields \n   <a href=\"#section-5\">5</a>   Request \n   <a href=\"#section-5.1\">5.1</a>   Request-Line \n   <a href=\"#section-5.1.1\">5.1.1</a>    Method \n   <a href=\"#section-5.1.2\">5.1.2</a>    Request-URI \n   <a href=\"#section-5.2\">5.2</a>   The Resource Identified by a Request \n   <a href=\"#section-5.3\">5.3</a>   Request Header Fields \n   <a href=\"#section-6\">6</a>   Response \n   <a href=\"#section-6.1\">6.1</a>   Status-Line \n   <a href=\"#section-6.1.1\">6.1.1</a>    Status Code and Reason Phrase \n   <a href=\"#section-6.2\">6.2</a>   Response Header Fields \n\n   <a href=\"#section-7\">7</a>   Entity \n   <a href=\"#section-7.1\">7.1</a>   Entity Header Fields \n   <a href=\"#section-7.2\">7.2</a>   Entity Body \n   <a href=\"#section-7.2.1\">7.2.1</a>    Type \n   <a href=\"#section-7.2.2\">7.2.2</a>    Entity Length \n   <a href=\"#section-8\">8</a>   Connections \n   <a href=\"#section-8.1\">8.1</a>   Persistent Connections \n   <a href=\"#section-8.1.1\">8.1.1</a>    Purpose \n   <a href=\"#section-8.1.2\">8.1.2</a>    Overall Operation \n   <a href=\"#section-8.1.3\">8.1.3</a>    Proxy Servers \n   <a href=\"#section-8.1.4\">8.1.4</a>    Practical Considerations \n   <a href=\"#section-8.2\">8.2</a>   Message Transmission Requirements \n   <a href=\"#section-8.2.1\">8.2.1</a>    Persistent Connections and Flow Control \n   <a href=\"#section-8.2.2\">8.2.2</a>    Monitoring Connections for Error Status Messages \n   <a href=\"#section-8.2.3\">8.2.3</a>    Use of the 100 (Continue) Status \n   <a href=\"#section-8.2.4\">8.2.4</a>    Client Behavior if Server Prematurely Closes Connection \n   <a href=\"#section-9\">9</a>   Method Definitions \n   <a href=\"#section-9.1\">9.1</a>   Safe and Idempotent Methods \n   <a href=\"#section-9.1.1\">9.1.1</a>    Safe Methods \n   <a href=\"#section-9.1.2\">9.1.2</a>    Idempotent Methods \n   <a href=\"#section-9.2\">9.2</a>   OPTIONS \n   <a href=\"#section-9.3\">9.3</a>   GET \n   <a href=\"#section-9.4\">9.4</a>   HEAD \n   <a href=\"#section-9.5\">9.5</a>   POST \n   <a href=\"#section-9.6\">9.6</a>   PUT \n   <a href=\"#section-9.7\">9.7</a>   DELETE \n   <a href=\"#section-9.8\">9.8</a>   TRACE \n   <a href=\"#section-9.9\">9.9</a>   CONNECT \n   <a href=\"#section-10\">10</a>   Status Code Definitions \n   <a href=\"#section-10.1\">10.1</a>  Informational 1xx \n   <a href=\"#section-10.1.1\">10.1.1</a>   100 Continue \n   <a href=\"#section-10.1.2\">10.1.2</a>   101 Switching Protocols \n   <a href=\"#section-10.2\">10.2</a>  Successful 2xx \n   <a href=\"#section-10.2.1\">10.2.1</a>   200 OK \n   <a href=\"#section-10.2.2\">10.2.2</a>   201 Created \n   <a href=\"#section-10.2.3\">10.2.3</a>   202 Accepted \n   <a href=\"#section-10.2.4\">10.2.4</a>   203 Non-Authoritative Information \n   <a href=\"#section-10.2.5\">10.2.5</a>   204 No Content \n   <a href=\"#section-10.2.6\">10.2.6</a>   205 Reset Content \n   <a href=\"#section-10.2.7\">10.2.7</a>   206 Partial Content \n   <a href=\"#section-10.3\">10.3</a>  Redirection 3xx \n   <a href=\"#section-10.3.1\">10.3.1</a>   300 Multiple Choices \n   <a href=\"#section-10.3.2\">10.3.2</a>   301 Moved Permanently \n   <a href=\"#section-10.3.3\">10.3.3</a>   302 Found \n   <a href=\"#section-10.3.4\">10.3.4</a>   303 See Other \n   <a href=\"#section-10.3.5\">10.3.5</a>   304 Not Modified \n   <a href=\"#section-10.3.6\">10.3.6</a>   305 Use Proxy \n   <a href=\"#section-10.3.7\">10.3.7</a>   306 (Unused) \n\n   <a href=\"#section-10.3.8\">10.3.8</a>   307 Temporary Redirect \n   <a href=\"#section-10.4\">10.4</a>  Client Error 4xx \n   <a href=\"#section-10.4.1\">10.4.1</a>    400 Bad Request \n   <a href=\"#section-10.4.2\">10.4.2</a>    401 Unauthorized \n   <a href=\"#section-10.4.3\">10.4.3</a>    402 Payment Required \n   <a href=\"#section-10.4.4\">10.4.4</a>    403 Forbidden \n   <a href=\"#section-10.4.5\">10.4.5</a>    404 Not Found \n   <a href=\"#section-10.4.6\">10.4.6</a>    405 Method Not Allowed \n   <a href=\"#section-10.4.7\">10.4.7</a>    406 Not Acceptable \n   <a href=\"#section-10.4.8\">10.4.8</a>    407 Proxy Authentication Required \n   <a href=\"#section-10.4.9\">10.4.9</a>    408 Request Timeout \n   <a href=\"#section-10.4.10\">10.4.10</a>   409 Conflict \n   <a href=\"#section-10.4.11\">10.4.11</a>   410 Gone \n   <a href=\"#section-10.4.12\">10.4.12</a>   411 Length Required \n   <a href=\"#section-10.4.13\">10.4.13</a>   412 Precondition Failed \n   <a href=\"#section-10.4.14\">10.4.14</a>   413 Request Entity Too Large \n   <a href=\"#section-10.4.15\">10.4.15</a>   414 Request-URI Too Long \n   <a href=\"#section-10.4.16\">10.4.16</a>   415 Unsupported Media Type \n   <a href=\"#section-10.4.17\">10.4.17</a>   416 Requested Range Not Satisfiable \n   <a href=\"#section-10.4.18\">10.4.18</a>   417 Expectation Failed \n   <a href=\"#section-10.5\">10.5</a>  Server Error 5xx \n   <a href=\"#section-10.5.1\">10.5.1</a>   500 Internal Server Error \n   <a href=\"#section-10.5.2\">10.5.2</a>   501 Not Implemented \n   <a href=\"#section-10.5.3\">10.5.3</a>   502 Bad Gateway \n   <a href=\"#section-10.5.4\">10.5.4</a>   503 Service Unavailable \n   <a href=\"#section-10.5.5\">10.5.5</a>   504 Gateway Timeout \n   <a href=\"#section-10.5.6\">10.5.6</a>   505 HTTP Version Not Supported \n   <a href=\"#section-11\">11</a>   Access Authentication \n   <a href=\"#section-12\">12</a>   Content Negotiation \n   <a href=\"#section-12.1\">12.1</a>  Server-driven Negotiation \n   <a href=\"#section-12.2\">12.2</a>  Agent-driven Negotiation \n   <a href=\"#section-12.3\">12.3</a>  Transparent Negotiation \n   <a href=\"#section-13\">13</a>   Caching in HTTP \n   <a href=\"#section-13.1.1\">13.1.1</a>   Cache Correctness \n   <a href=\"#section-13.1.2\">13.1.2</a>   Warnings \n   <a href=\"#section-13.1.3\">13.1.3</a>   Cache-control Mechanisms \n   <a href=\"#section-13.1.4\">13.1.4</a>   Explicit User Agent Warnings \n   <a href=\"#section-13.1.5\">13.1.5</a>   Exceptions to the Rules and Warnings \n   <a href=\"#section-13.1.6\">13.1.6</a>   Client-controlled Behavior \n   <a href=\"#section-13.2\">13.2</a>  Expiration Model \n   <a href=\"#section-13.2.1\">13.2.1</a>   Server-Specified Expiration \n   <a href=\"#section-13.2.2\">13.2.2</a>   Heuristic Expiration \n   <a href=\"#section-13.2.3\">13.2.3</a>   Age Calculations \n   <a href=\"#section-13.2.4\">13.2.4</a>   Expiration Calculations \n   <a href=\"#section-13.2.5\">13.2.5</a>   Disambiguating Expiration Values \n   <a href=\"#section-13.2.6\">13.2.6</a>   Disambiguating Multiple Responses \n   <a href=\"#section-13.3\">13.3</a>  Validation Model \n   <a href=\"#section-13.3.1\">13.3.1</a>   Last-Modified Dates \n\n   <a href=\"#section-13.3.2\">13.3.2</a>   Entity Tag Cache Validators \n   <a href=\"#section-13.3.3\">13.3.3</a>   Weak and Strong Validators \n   13.3.4   Rules for When to Use Entity Tags and Last-Modified Dates.89\n   <a href=\"#section-13.3.5\">13.3.5</a>   Non-validating Conditionals \n   <a href=\"#section-13.4\">13.4</a>  Response Cacheability \n   <a href=\"#section-13.5\">13.5</a>  Constructing Responses From Caches \n   <a href=\"#section-13.5.1\">13.5.1</a>   End-to-end and Hop-by-hop Headers \n   <a href=\"#section-13.5.2\">13.5.2</a>   Non-modifiable Headers \n   <a href=\"#section-13.5.3\">13.5.3</a>   Combining Headers \n   <a href=\"#section-13.5.4\">13.5.4</a>   Combining Byte Ranges \n   <a href=\"#section-13.6\">13.6</a>  Caching Negotiated Responses \n   <a href=\"#section-13.7\">13.7</a>  Shared and Non-Shared Caches \n   <a href=\"#section-13.8\">13.8</a>  Errors or Incomplete Response Cache Behavior \n   <a href=\"#section-13.9\">13.9</a>  Side Effects of GET and HEAD \n   <a href=\"#section-13.10\">13.10</a>   Invalidation After Updates or Deletions \n   <a href=\"#section-13.11\">13.11</a>   Write-Through Mandatory \n   <a href=\"#section-13.12\">13.12</a>   Cache Replacement \n   <a href=\"#section-13.13\">13.13</a>   History Lists \n   <a href=\"#section-14\">14</a>   Header Field Definitions \n   <a href=\"#section-14.1\">14.1</a>  Accept \n   <a href=\"#section-14.2\">14.2</a>  Accept-Charset \n   <a href=\"#section-14.3\">14.3</a>  Accept-Encoding \n   <a href=\"#section-14.4\">14.4</a>  Accept-Language \n   <a href=\"#section-14.5\">14.5</a>  Accept-Ranges \n   <a href=\"#section-14.6\">14.6</a>  Age \n   <a href=\"#section-14.7\">14.7</a>  Allow \n   <a href=\"#section-14.8\">14.8</a>  Authorization \n   <a href=\"#section-14.9\">14.9</a>  Cache-Control \n   <a href=\"#section-14.9.1\">14.9.1</a>   What is Cacheable \n   <a href=\"#section-14.9.2\">14.9.2</a>   What May be Stored by Caches \n   <a href=\"#section-14.9.3\">14.9.3</a>   Modifications of the Basic Expiration Mechanism \n   <a href=\"#section-14.9.4\">14.9.4</a>   Cache Revalidation and Reload Controls \n   <a href=\"#section-14.9.5\">14.9.5</a>   No-Transform Directive \n   <a href=\"#section-14.9.6\">14.9.6</a>   Cache Control Extensions \n   <a href=\"#section-14.10\">14.10</a>   Connection \n   <a href=\"#section-14.11\">14.11</a>   Content-Encoding \n   <a href=\"#section-14.12\">14.12</a>   Content-Language \n   <a href=\"#section-14.13\">14.13</a>   Content-Length \n   <a href=\"#section-14.14\">14.14</a>   Content-Location \n   <a href=\"#section-14.15\">14.15</a>   Content-MD5 \n   <a href=\"#section-14.16\">14.16</a>   Content-Range \n   <a href=\"#section-14.17\">14.17</a>   Content-Type \n   <a href=\"#section-14.18\">14.18</a>   Date \n   <a href=\"#section-14.18.1\">14.18.1</a>   Clockless Origin Server Operation \n   <a href=\"#section-14.19\">14.19</a>   ETag \n   <a href=\"#section-14.20\">14.20</a>   Expect \n   <a href=\"#section-14.21\">14.21</a>   Expires \n   <a href=\"#section-14.22\">14.22</a>   From \n\n   <a href=\"#section-14.23\">14.23</a>   Host \n   <a href=\"#section-14.24\">14.24</a>   If-Match \n   <a href=\"#section-14.25\">14.25</a>   If-Modified-Since \n   <a href=\"#section-14.26\">14.26</a>   If-None-Match \n   <a href=\"#section-14.27\">14.27</a>   If-Range \n   <a href=\"#section-14.28\">14.28</a>   If-Unmodified-Since \n   <a href=\"#section-14.29\">14.29</a>   Last-Modified \n   <a href=\"#section-14.30\">14.30</a>   Location \n   <a href=\"#section-14.31\">14.31</a>   Max-Forwards \n   <a href=\"#section-14.32\">14.32</a>   Pragma \n   <a href=\"#section-14.33\">14.33</a>   Proxy-Authenticate \n   <a href=\"#section-14.34\">14.34</a>   Proxy-Authorization \n   <a href=\"#section-14.35\">14.35</a>   Range \n   <a href=\"#section-14.35.1\">14.35.1</a>    Byte Ranges \n   <a href=\"#section-14.35.2\">14.35.2</a>    Range Retrieval Requests \n   <a href=\"#section-14.36\">14.36</a>   Referer \n   <a href=\"#section-14.37\">14.37</a>   Retry-After \n   <a href=\"#section-14.38\">14.38</a>   Server \n   <a href=\"#section-14.39\">14.39</a>   TE \n   <a href=\"#section-14.40\">14.40</a>   Trailer \n   <a href=\"#section-14.41\">14.41</a>  Transfer-Encoding\n   <a href=\"#section-14.42\">14.42</a>   Upgrade \n   <a href=\"#section-14.43\">14.43</a>   User-Agent \n   <a href=\"#section-14.44\">14.44</a>   Vary \n   <a href=\"#section-14.45\">14.45</a>   Via \n   <a href=\"#section-14.46\">14.46</a>   Warning \n   <a href=\"#section-14.47\">14.47</a>   WWW-Authenticate \n   <a href=\"#section-15\">15</a> Security Considerations \n   <a href=\"#section-15.1\">15.1</a>      Personal Information\n   <a href=\"#section-15.1.1\">15.1.1</a>   Abuse of Server Log Information \n   <a href=\"#section-15.1.2\">15.1.2</a>   Transfer of Sensitive Information \n   <a href=\"#section-15.1.3\">15.1.3</a>   Encoding Sensitive Information in URI's \n   <a href=\"#section-15.1.4\">15.1.4</a>   Privacy Issues Connected to Accept Headers \n   <a href=\"#section-15.2\">15.2</a>  Attacks Based On File and Path Names \n   <a href=\"#section-15.3\">15.3</a>  DNS Spoofing \n   <a href=\"#section-15.4\">15.4</a>  Location Headers and Spoofing \n   <a href=\"#section-15.5\">15.5</a>  Content-Disposition Issues \n   <a href=\"#section-15.6\">15.6</a>  Authentication Credentials and Idle Clients \n   <a href=\"#section-15.7\">15.7</a>  Proxies and Caching \n   <a href=\"#section-15.7.1\">15.7.1</a>    Denial of Service Attacks on Proxies\n   <a href=\"#section-16\">16</a>   Acknowledgments \n   <a href=\"#section-17\">17</a>   References \n   <a href=\"#section-18\">18</a>   Authors' Addresses \n   <a href=\"#section-19\">19</a>   Appendices \n   <a href=\"#section-19.1\">19.1</a>  Internet Media Type message/http and application/http \n   <a href=\"#section-19.2\">19.2</a>  Internet Media Type multipart/byteranges \n   <a href=\"#section-19.3\">19.3</a>  Tolerant Applications \n   <a href=\"#section-19.4\">19.4</a>  Differences Between HTTP Entities and <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a> Entities \n\n   <a href=\"#section-19.4.1\">19.4.1</a>   MIME-Version \n   <a href=\"#section-19.4.2\">19.4.2</a>   Conversion to Canonical Form \n   <a href=\"#section-19.4.3\">19.4.3</a>   Conversion of Date Formats \n   <a href=\"#section-19.4.4\">19.4.4</a>   Introduction of Content-Encoding \n   <a href=\"#section-19.4.5\">19.4.5</a>   No Content-Transfer-Encoding \n   <a href=\"#section-19.4.6\">19.4.6</a>   Introduction of Transfer-Encoding \n   <a href=\"#section-19.4.7\">19.4.7</a>   MHTML and Line Length Limitations \n   <a href=\"#section-19.5\">19.5</a>  Additional Features \n   <a href=\"#section-19.5.1\">19.5.1</a>   Content-Disposition \n   <a href=\"#section-19.6\">19.6</a>  Compatibility with Previous Versions \n   <a href=\"#section-19.6.1\">19.6.1</a>   Changes from HTTP/1.0 \n   <a href=\"#section-19.6.2\">19.6.2</a>   Compatibility with HTTP/1.0 Persistent Connections \n   <a href=\"#section-19.6.3\">19.6.3</a>   Changes from <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a> \n   <a href=\"#section-20\">20</a>   Index \n   <a href=\"#section-21\">21</a>   Full Copyright Statement \n\n<h2 class=\"h2\" id=\"section-1\">1 Introduction</h2>\n<h3 class=\"h3\" id=\"section-1.1\">1.1 Purpose</h3>\n   The Hypertext Transfer Protocol (HTTP) is an application-level\n   protocol for distributed, collaborative, hypermedia information\n   systems. HTTP has been in use by the World-Wide Web global\n   information initiative since 1990. The first version of HTTP,\n   referred to as HTTP/0.9, was a simple protocol for raw data transfer\n   across the Internet. HTTP/1.0, as defined by <a href=\"https://tools.ietf.org/html/rfc1945\">RFC 1945</a> [<a href=\"#ref-6\" title='\"Hypertext Transfer Protocol -- HTTP/1.0\"'>6</a>], improved\n   the protocol by allowing messages to be in the format of MIME-like\n   messages, containing metainformation about the data transferred and\n   modifiers on the request/response semantics. However, HTTP/1.0 does\n   not sufficiently take into consideration the effects of hierarchical\n   proxies, caching, the need for persistent connections, or virtual\n   hosts. In addition, the proliferation of incompletely-implemented\n   applications calling themselves \"HTTP/1.0\" has necessitated a\n   protocol version change in order for two communicating applications\n   to determine each other's true capabilities.\n\n   This specification defines the protocol referred to as \"HTTP/1.1\".\n   This protocol includes more stringent requirements than HTTP/1.0 in\n   order to ensure reliable implementation of its features.\n\n   Practical information systems require more functionality than simple\n   retrieval, including search, front-end update, and annotation. HTTP\n   allows an open-ended set of methods and headers that indicate the\n   purpose of a request [<a href=\"#ref-47\" title='\"Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)\"'>47</a>]. It builds on the discipline of reference\n   provided by the Uniform Resource Identifier (URI) [<a href=\"#ref-3\" title='\"Universal Resource Identifiers in WWW\"'>3</a>], as a location\n   (URL) [<a href=\"#ref-4\" title='\"Uniform Resource Locators (URL)\"'>4</a>] or name (URN) [<a href=\"#ref-20\" title='\"Functional Requirements for Uniform Resource Names\"'>20</a>], for indicating the resource to which a\n\n   method is to be applied. Messages are passed in a format similar to\n   that used by Internet mail [<a href=\"#ref-9\" title='\"Standard for The Format of ARPA Internet Text Messages\"'>9</a>] as defined by the Multipurpose\n   Internet Mail Extensions (MIME) [<a href=\"#ref-7\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>7</a>].\n\n   HTTP is also used as a generic protocol for communication between\n   user agents and proxies/gateways to other Internet systems, including\n   those supported by the SMTP [<a href=\"#ref-16\" title='\"Simple Mail Transfer Protocol\"'>16</a>], NNTP [<a href=\"#ref-13\" title='\"Network News Transfer Protocol\"'>13</a>], FTP [<a href=\"#ref-18\" title='\"File Transfer Protocol\"'>18</a>], Gopher [<a href=\"#ref-2\" title='\"The Internet Gopher Protocol (a distributed document search and retrieval protocol)\"'>2</a>],\n   and WAIS [<a href=\"#ref-10\" title='\"WAIS Interface Protocol Prototype Functional Specification,\"'>10</a>] protocols. In this way, HTTP allows basic hypermedia\n   access to resources available from diverse applications.\n\n<h3 class=\"h3\" id=\"section-1.2\">1.2 Requirements</h3>\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described in <a href=\"https://tools.ietf.org/html/rfc2119\">RFC 2119</a> [<a href=\"#ref-34\" title='\"Key words for use in RFCs to Indicate Requirement Levels\"'>34</a>].\n\n   An implementation is not compliant if it fails to satisfy one or more\n   of the MUST or REQUIRED level requirements for the protocols it\n   implements. An implementation that satisfies all the MUST or REQUIRED\n   level and all the SHOULD level requirements for its protocols is said\n   to be \"unconditionally compliant\"; one that satisfies all the MUST\n   level requirements but not all the SHOULD level requirements for its\n   protocols is said to be \"conditionally compliant.\"\n\n<h3 class=\"h3\" id=\"section-1.3\">1.3 Terminology</h3>\n   This specification uses a number of terms to refer to the roles\n   played by participants in, and objects of, the HTTP communication.\n\n   connection\n      A transport layer virtual circuit established between two programs\n      for the purpose of communication.\n\n   message\n      The basic unit of HTTP communication, consisting of a structured\n      sequence of octets matching the syntax defined in <a href=\"#section-4\">section 4</a> and\n      transmitted via the connection.\n\n   request\n      An HTTP request message, as defined in <a href=\"#section-5\">section 5</a>.\n\n   response\n      An HTTP response message, as defined in <a href=\"#section-6\">section 6</a>.\n\n   resource\n      A network data object or service that can be identified by a URI,\n      as defined in <a href=\"#section-3.2\">section 3.2</a>. Resources may be available in multiple\n      representations (e.g. multiple languages, data formats, size, and\n      resolutions) or vary in other ways.\n\n   entity\n      The information transferred as the payload of a request or\n      response. An entity consists of metainformation in the form of\n      entity-header fields and content in the form of an entity-body, as\n      described in <a href=\"#section-7\">section 7</a>.\n\n   representation\n      An entity included with a response that is subject to content\n      negotiation, as described in <a href=\"#section-12\">section 12</a>. There may exist multiple\n      representations associated with a particular response status.\n\n   content negotiation\n      The mechanism for selecting the appropriate representation when\n      servicing a request, as described in <a href=\"#section-12\">section 12</a>. The\n      representation of entities in any response can be negotiated\n      (including error responses).\n\n   variant\n      A resource may have one, or more than one, representation(s)\n      associated with it at any given instant. Each of these\n      representations is termed a `varriant'.  Use of the term `variant'\n      does not necessarily imply that the resource is subject to content\n      negotiation.\n\n   client\n      A program that establishes connections for the purpose of sending\n      requests.\n\n   user agent\n      The client which initiates a request. These are often browsers,\n      editors, spiders (web-traversing robots), or other end user tools.\n\n   server\n      An application program that accepts connections in order to\n      service requests by sending back responses. Any given program may\n      be capable of being both a client and a server; our use of these\n      terms refers only to the role being performed by the program for a\n      particular connection, rather than to the program's capabilities\n      in general. Likewise, any server may act as an origin server,\n      proxy, gateway, or tunnel, switching behavior based on the nature\n      of each request.\n\n   origin server\n      The server on which a given resource resides or is to be created.\n\n   proxy\n      An intermediary program which acts as both a server and a client\n      for the purpose of making requests on behalf of other clients.\n      Requests are serviced internally or by passing them on, with\n      possible translation, to other servers. A proxy MUST implement\n      both the client and server requirements of this specification. A\n      \"transparent proxy\" is a proxy that does not modify the request or\n      response beyond what is required for proxy authentication and\n      identification. A \"non-transparent proxy\" is a proxy that modifies\n      the request or response in order to provide some added service to\n      the user agent, such as group annotation services, media type\n      transformation, protocol reduction, or anonymity filtering. Except\n      where either transparent or non-transparent behavior is explicitly\n      stated, the HTTP proxy requirements apply to both types of\n      proxies.\n\n   gateway\n      A server which acts as an intermediary for some other server.\n      Unlike a proxy, a gateway receives requests as if it were the\n      origin server for the requested resource; the requesting client\n      may not be aware that it is communicating with a gateway.\n\n   tunnel\n      An intermediary program which is acting as a blind relay between\n      two connections. Once active, a tunnel is not considered a party\n      to the HTTP communication, though the tunnel may have been\n      initiated by an HTTP request. The tunnel ceases to exist when both\n      ends of the relayed connections are closed.\n\n   cache\n      A program's local store of response messages and the subsystem\n      that controls its message storage, retrieval, and deletion. A\n      cache stores cacheable responses in order to reduce the response\n      time and network bandwidth consumption on future, equivalent\n      requests. Any client or server may include a cache, though a cache\n      cannot be used by a server that is acting as a tunnel.\n\n   cacheable\n      A response is cacheable if a cache is allowed to store a copy of\n      the response message for use in answering subsequent requests. The\n      rules for determining the cacheability of HTTP responses are\n      defined in <a href=\"#section-13\">section 13</a>. Even if a resource is cacheable, there may\n      be additional constraints on whether a cache can use the cached\n      copy for a particular request.\n\n   first-hand\n      A response is first-hand if it comes directly and without\n      unnecessary delay from the origin server, perhaps via one or more\n      proxies. A response is also first-hand if its validity has just\n      been checked directly with the origin server.\n\n   explicit expiration time\n      The time at which the origin server intends that an entity should\n      no longer be returned by a cache without further validation.\n\n   heuristic expiration time\n      An expiration time assigned by a cache when no explicit expiration\n      time is available.\n\n   age\n      The age of a response is the time since it was sent by, or\n      successfully validated with, the origin server.\n\n   freshness lifetime\n      The length of time between the generation of a response and its\n      expiration time.\n\n   fresh\n      A response is fresh if its age has not yet exceeded its freshness\n      lifetime.\n\n   stale\n      A response is stale if its age has passed its freshness lifetime.\n\n   semantically transparent\n      A cache behaves in a \"semantically transparent\" manner, with\n      respect to a particular response, when its use affects neither the\n      requesting client nor the origin server, except to improve\n      performance. When a cache is semantically transparent, the client\n      receives exactly the same response (except for hop-by-hop headers)\n      that it would have received had its request been handled directly\n      by the origin server.\n\n   validator\n      A protocol element (e.g., an entity tag or a Last-Modified time)\n      that is used to find out whether a cache entry is an equivalent\n      copy of an entity.\n\n   upstream/downstream\n      Upstream and downstream describe the flow of a message: all\n      messages flow from upstream to downstream.\n\n   inbound/outbound\n      Inbound and outbound refer to the request and response paths for\n      messages: \"inbound\" means \"traveling toward the origin server\",\n      and \"outbound\" means \"traveling toward the user agent\"\n\n<h3 class=\"h3\" id=\"section-1.4\">1.4 Overall Operation</h3>\n   The HTTP protocol is a request/response protocol. A client sends a\n   request to the server in the form of a request method, URI, and\n   protocol version, followed by a MIME-like message containing request\n   modifiers, client information, and possible body content over a\n   connection with a server. The server responds with a status line,\n   including the message's protocol version and a success or error code,\n   followed by a MIME-like message containing server information, entity\n   metainformation, and possible entity-body content. The relationship\n   between HTTP and MIME is described in appendix 19.4.\n\n   Most HTTP communication is initiated by a user agent and consists of\n   a request to be applied to a resource on some origin server. In the\n   simplest case, this may be accomplished via a single connection (v)\n   between the user agent (UA) and the origin server (O).\n\n          request chain ------------------------&gt;\n       UA -------------------v------------------- O\n          &lt;----------------------- response chain\n\n   A more complicated situation occurs when one or more intermediaries\n   are present in the request/response chain. There are three common\n   forms of intermediary: proxy, gateway, and tunnel. A proxy is a\n   forwarding agent, receiving requests for a URI in its absolute form,\n   rewriting all or part of the message, and forwarding the reformatted\n   request toward the server identified by the URI. A gateway is a\n   receiving agent, acting as a layer above some other server(s) and, if\n   necessary, translating the requests to the underlying server's\n   protocol. A tunnel acts as a relay point between two connections\n   without changing the messages; tunnels are used when the\n   communication needs to pass through an intermediary (such as a\n   firewall) even when the intermediary cannot understand the contents\n   of the messages.\n\n          request chain --------------------------------------&gt;\n       UA -----v----- A -----v----- B -----v----- C -----v----- O\n          &lt;------------------------------------- response chain\n\n   The figure above shows three intermediaries (A, B, and C) between the\n   user agent and origin server. A request or response message that\n   travels the whole chain will pass through four separate connections.\n   This distinction is important because some HTTP communication options\n\n   may apply only to the connection with the nearest, non-tunnel\n   neighbor, only to the end-points of the chain, or to all connections\n   along the chain. Although the diagram is linear, each participant may\n   be engaged in multiple, simultaneous communications. For example, B\n   may be receiving requests from many clients other than A, and/or\n   forwarding requests to servers other than C, at the same time that it\n   is handling A's request.\n\n   Any party to the communication which is not acting as a tunnel may\n   employ an internal cache for handling requests. The effect of a cache\n   is that the request/response chain is shortened if one of the\n   participants along the chain has a cached response applicable to that\n   request. The following illustrates the resulting chain if B has a\n   cached copy of an earlier response from O (via C) for a request which\n   has not been cached by UA or A.\n\n          request chain ----------&gt;\n       UA -----v----- A -----v----- B - - - - - - C - - - - - - O\n          &lt;--------- response chain\n\n   Not all responses are usefully cacheable, and some requests may\n   contain modifiers which place special requirements on cache behavior.\n   HTTP requirements for cache behavior and cacheable responses are\n   defined in <a href=\"#section-13\">section 13</a>.\n\n   In fact, there are a wide variety of architectures and configurations\n   of caches and proxies currently being experimented with or deployed\n   across the World Wide Web. These systems include national hierarchies\n   of proxy caches to save transoceanic bandwidth, systems that\n   broadcast or multicast cache entries, organizations that distribute\n   subsets of cached data via CD-ROM, and so on. HTTP systems are used\n   in corporate intranets over high-bandwidth links, and for access via\n   PDAs with low-power radio links and intermittent connectivity. The\n   goal of HTTP/1.1 is to support the wide diversity of configurations\n   already deployed while introducing protocol constructs that meet the\n   needs of those who build web applications that require high\n   reliability and, failing that, at least reliable indications of\n   failure.\n\n   HTTP communication usually takes place over TCP/IP connections. The\n   default port is TCP 80 [<a href=\"#ref-19\" title='\"Assigned Numbers\"'>19</a>], but other ports can be used. This does\n   not preclude HTTP from being implemented on top of any other protocol\n   on the Internet, or on other networks. HTTP only presumes a reliable\n   transport; any protocol that provides such guarantees can be used;\n   the mapping of the HTTP/1.1 request and response structures onto the\n   transport data units of the protocol in question is outside the scope\n   of this specification.\n\n   In HTTP/1.0, most implementations used a new connection for each\n   request/response exchange. In HTTP/1.1, a connection may be used for\n   one or more request/response exchanges, although connections may be\n   closed for a variety of reasons (see <a href=\"#section-8.1\">section 8.1</a>).\n\n<h2 class=\"h2\" id=\"section-2\">2 Notational Conventions and Generic Grammar</h2>\n<h3 class=\"h3\" id=\"section-2.1\">2.1 Augmented BNF</h3>\n   All of the mechanisms specified in this document are described in\n   both prose and an augmented Backus-Naur Form (BNF) similar to that\n   used by <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a> [<a href=\"#ref-9\" title='\"Standard for The Format of ARPA Internet Text Messages\"'>9</a>]. Implementors will need to be familiar with the\n   notation in order to understand this specification. The augmented BNF\n   includes the following constructs:\n\n   name = definition\n      The name of a rule is simply the name itself (without any\n      enclosing \"&lt;\" and \"&gt;\") and is separated from its definition by the\n      equal \"=\" character. White space is only significant in that\n      indentation of continuation lines is used to indicate a rule\n      definition that spans more than one line. Certain basic rules are\n      in uppercase, such as SP, LWS, HT, CRLF, DIGIT, ALPHA, etc. Angle\n      brackets are used within definitions whenever their presence will\n      facilitate discerning the use of rule names.\n\n   \"literal\"\n      Quotation marks surround literal text. Unless stated otherwise,\n      the text is case-insensitive.\n\n   rule1 | rule2\n      Elements separated by a bar (\"|\") are alternatives, e.g., \"yes |\n      no\" will accept yes or no.\n\n   (rule1 rule2)\n      Elements enclosed in parentheses are treated as a single element.\n      Thus, \"(elem (foo | bar) elem)\" allows the token sequences \"elem\n      foo elem\" and \"elem bar elem\".\n\n   *rule\n      The character \"*\" preceding an element indicates repetition. The\n      full form is \"&lt;n&gt;*&lt;m&gt;element\" indicating at least &lt;n&gt; and at most\n      &lt;m&gt; occurrences of element. Default values are 0 and infinity so\n      that \"*(element)\" allows any number, including zero; \"1*element\"\n      requires at least one; and \"1*2element\" allows one or two.\n\n   [<a name=\"ref-rule\" id=\"ref-rule\">rule</a>]\n      Square brackets enclose optional elements; \"[foo bar]\" is\n      equivalent to \"*1(foo bar)\".\n\n   N rule\n      Specific repetition: \"&lt;n&gt;(element)\" is equivalent to\n      \"&lt;n&gt;*&lt;n&gt;(element)\"; that is, exactly &lt;n&gt; occurrences of (element).\n      Thus 2DIGIT is a 2-digit number, and 3ALPHA is a string of three\n      alphabetic characters.\n\n   #rule\n      A construct \"#\" is defined, similar to \"*\", for defining lists of\n      elements. The full form is \"&lt;n&gt;#&lt;m&gt;element\" indicating at least\n      &lt;n&gt; and at most &lt;m&gt; elements, each separated by one or more commas\n      (\",\") and OPTIONAL linear white space (LWS). This makes the usual\n      form of lists very easy; a rule such as\n         ( *LWS element *( *LWS \",\" *LWS element ))\n      can be shown as\n         1#element\n      Wherever this construct is used, null elements are allowed, but do\n      not contribute to the count of elements present. That is,\n      \"(element), , (element) \" is permitted, but counts as only two\n      elements. Therefore, where at least one element is required, at\n      least one non-null element MUST be present. Default values are 0\n      and infinity so that \"#element\" allows any number, including zero;\n      \"1#element\" requires at least one; and \"1#2element\" allows one or\n      two.\n\n   ; comment\n      A semi-colon, set off some distance to the right of rule text,\n      starts a comment that continues to the end of line. This is a\n      simple way of including useful notes in parallel with the\n      specifications.\n\n   implied *LWS\n      The grammar described by this specification is word-based. Except\n      where noted otherwise, linear white space (LWS) can be included\n      between any two adjacent words (token or quoted-string), and\n      between adjacent words and separators, without changing the\n      interpretation of a field. At least one delimiter (LWS and/or\n\n      separators) MUST exist between any two tokens (for the definition\n      of \"token\" below), since they would otherwise be interpreted as a\n      single token.\n\n<h3 class=\"h3\" id=\"section-2.2\">2.2 Basic Rules</h3>\n   The following rules are used throughout this specification to\n   describe basic parsing constructs. The US-ASCII coded character set\n   is defined by ANSI X3.4-1986 [<a href=\"#ref-21\" title=\"ANSI\">21</a>].\n\n       OCTET          = &lt;any 8-bit sequence of data&gt;\n       CHAR           = &lt;any US-ASCII character (octets 0 - 127)&gt;\n       UPALPHA        = &lt;any US-ASCII uppercase letter \"A\"..\"Z\"&gt;\n       LOALPHA        = &lt;any US-ASCII lowercase letter \"a\"..\"z\"&gt;\n       ALPHA          = UPALPHA | LOALPHA\n       DIGIT          = &lt;any US-ASCII digit \"0\"..\"9\"&gt;\n       CTL            = &lt;any US-ASCII control character\n                        (octets 0 - 31) and DEL (127)&gt;\n       CR             = &lt;US-ASCII CR, carriage return (13)&gt;\n       LF             = &lt;US-ASCII LF, linefeed (10)&gt;\n       SP             = &lt;US-ASCII SP, space (32)&gt;\n       HT             = &lt;US-ASCII HT, horizontal-tab (9)&gt;\n       &lt;\"&gt;            = &lt;US-ASCII double-quote mark (34)&gt;\n\n   HTTP/1.1 defines the sequence CR LF as the end-of-line marker for all\n   protocol elements except the entity-body (see appendix 19.3 for\n   tolerant applications). The end-of-line marker within an entity-body\n   is defined by its associated media type, as described in <a href=\"#section-3.7\">section 3.7</a>.\n\n       CRLF           = CR LF\n\n   HTTP/1.1 header field values can be folded onto multiple lines if the\n   continuation line begins with a space or horizontal tab. All linear\n   white space, including folding, has the same semantics as SP. A\n   recipient MAY replace any linear white space with a single SP before\n   interpreting the field value or forwarding the message downstream.\n\n       LWS            = [CRLF] 1*( SP | HT )\n\n   The TEXT rule is only used for descriptive field contents and values\n   that are not intended to be interpreted by the message parser. Words\n   of *TEXT MAY contain characters from character sets other than ISO-\n   8859-1 [<a href=\"#ref-22\" title=\"ISO-8859-2\">22</a>] only when encoded according to the rules of <a href=\"https://tools.ietf.org/html/rfc2047\">RFC 2047</a>\n   [<a href=\"#ref-14\" title='\"MIME (Multipurpose Internet Mail Extensions) Part Three: Message Header Extensions for Non-ASCII Text\"'>14</a>].\n\n       TEXT           = &lt;any OCTET except CTLs,\n                        but including LWS&gt;\n\n   A CRLF is allowed in the definition of TEXT only as part of a header\n   field continuation. It is expected that the folding LWS will be\n   replaced with a single SP before interpretation of the TEXT value.\n\n   Hexadecimal numeric characters are used in several protocol elements.\n\n       HEX            = \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n                      | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | DIGIT\n\n   Many HTTP/1.1 header field values consist of words separated by LWS\n   or special characters. These special characters MUST be in a quoted\n   string to be used within a parameter value (as defined in <a href=\"#section-3.6\">section</a>\n   <a href=\"#section-3.6\">3.6</a>).\n\n       token          = 1*&lt;any CHAR except CTLs or separators&gt;\n       separators     = \"(\" | \")\" | \"&lt;\" | \"&gt;\" | \"@\"\n                      | \",\" | \";\" | \":\" | \"\\\" | &lt;\"&gt;\n                      | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                      | \"{\" | \"}\" | SP | HT\n\n   Comments can be included in some HTTP header fields by surrounding\n   the comment text with parentheses. Comments are only allowed in\n   fields containing \"comment\" as part of their field value definition.\n   In all other fields, parentheses are considered part of the field\n   value.\n\n       comment        = \"(\" *( ctext | quoted-pair | comment ) \")\"\n       ctext          = &lt;any TEXT excluding \"(\" and \")\"&gt;\n\n   A string of text is parsed as a single word if it is quoted using\n   double-quote marks.\n\n       quoted-string  = ( &lt;\"&gt; *(qdtext | quoted-pair ) &lt;\"&gt; )\n       qdtext         = &lt;any TEXT except &lt;\"&gt;&gt;\n\n   The backslash character (\"\\\") MAY be used as a single-character\n   quoting mechanism only within quoted-string and comment constructs.\n\n       quoted-pair    = \"\\\" CHAR\n\n<h2 class=\"h2\" id=\"section-3\">3 Protocol Parameters</h2>\n<h3 class=\"h3\" id=\"section-3.1\">3.1 HTTP Version</h3>\n   HTTP uses a \"&lt;major&gt;.&lt;minor&gt;\" numbering scheme to indicate versions\n   of the protocol. The protocol versioning policy is intended to allow\n   the sender to indicate the format of a message and its capacity for\n   understanding further HTTP communication, rather than the features\n   obtained via that communication. No change is made to the version\n   number for the addition of message components which do not affect\n   communication behavior or which only add to extensible field values.\n   The &lt;minor&gt; number is incremented when the changes made to the\n   protocol add features which do not change the general message parsing\n   algorithm, but which may add to the message semantics and imply\n   additional capabilities of the sender. The &lt;major&gt; number is\n   incremented when the format of a message within the protocol is\n   changed. See <a href=\"https://tools.ietf.org/html/rfc2145\">RFC 2145</a> [<a href=\"#ref-36\" title='\"Use and Interpretation of HTTP Version Numbers\"'>36</a>] for a fuller explanation.\n\n   The version of an HTTP message is indicated by an HTTP-Version field\n   in the first line of the message.\n\n       HTTP-Version   = \"HTTP\" \"/\" 1*DIGIT \".\" 1*DIGIT\n\n   Note that the major and minor numbers MUST be treated as separate\n   integers and that each MAY be incremented higher than a single digit.\n   Thus, HTTP/2.4 is a lower version than HTTP/2.13, which in turn is\n   lower than HTTP/12.3. Leading zeros MUST be ignored by recipients and\n   MUST NOT be sent.\n\n   An application that sends a request or response message that includes\n   HTTP-Version of \"HTTP/1.1\" MUST be at least conditionally compliant\n   with this specification. Applications that are at least conditionally\n   compliant with this specification SHOULD use an HTTP-Version of\n   \"HTTP/1.1\" in their messages, and MUST do so for any message that is\n   not compatible with HTTP/1.0. For more details on when to send\n   specific HTTP-Version values, see <a href=\"https://tools.ietf.org/html/rfc2145\">RFC 2145</a> [<a href=\"#ref-36\" title='\"Use and Interpretation of HTTP Version Numbers\"'>36</a>].\n\n   The HTTP version of an application is the highest HTTP version for\n   which the application is at least conditionally compliant.\n\n   Proxy and gateway applications need to be careful when forwarding\n   messages in protocol versions different from that of the application.\n   Since the protocol version indicates the protocol capability of the\n   sender, a proxy/gateway MUST NOT send a message with a version\n   indicator which is greater than its actual version. If a higher\n   version request is received, the proxy/gateway MUST either downgrade\n   the request version, or respond with an error, or switch to tunnel\n   behavior.\n\n   Due to interoperability problems with HTTP/1.0 proxies discovered\n   since the publication of <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a>[<a href=\"#ref-33\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>33</a>], caching proxies MUST, gateways\n   MAY, and tunnels MUST NOT upgrade the request to the highest version\n   they support. The proxy/gateway's response to that request MUST be in\n   the same major version as the request.\n\n      Note: Converting between versions of HTTP may involve modification\n      of header fields required or forbidden by the versions involved.\n\n<h3 class=\"h3\" id=\"section-3.2\">3.2 Uniform Resource Identifiers</h3>\n   URIs have been known by many names: WWW addresses, Universal Document\n   Identifiers, Universal Resource Identifiers [<a href=\"#ref-3\" title='\"Universal Resource Identifiers in WWW\"'>3</a>], and finally the\n   combination of Uniform Resource Locators (URL) [<a href=\"#ref-4\" title='\"Uniform Resource Locators (URL)\"'>4</a>] and Names (URN)\n   [<a href=\"#ref-20\" title='\"Functional Requirements for Uniform Resource Names\"'>20</a>]. As far as HTTP is concerned, Uniform Resource Identifiers are\n   simply formatted strings which identify--via name, location, or any\n   other characteristic--a resource.\n\n<h4 class=\"h4\" id=\"section-3.2.1\">3.2.1 General Syntax</h4>\n   URIs in HTTP can be represented in absolute form or relative to some\n   known base URI [<a href=\"#ref-11\" title='\"Relative Uniform Resource Locators\"'>11</a>], depending upon the context of their use. The two\n   forms are differentiated by the fact that absolute URIs always begin\n   with a scheme name followed by a colon. For definitive information on\n   URL syntax and semantics, see \"Uniform Resource Identifiers (URI):\n   Generic Syntax and Semantics,\" <a href=\"https://tools.ietf.org/html/rfc2396\">RFC 2396</a> [<a href=\"#ref-42\" title='\"Uniform Resource Identifiers (URI): Generic Syntax and Semantics\"'>42</a>] (which replaces RFCs\n   1738 [<a href=\"#ref-4\" title='\"Uniform Resource Locators (URL)\"'>4</a>] and <a href=\"https://tools.ietf.org/html/rfc1808\">RFC 1808</a> [<a href=\"#ref-11\" title='\"Relative Uniform Resource Locators\"'>11</a>]). This specification adopts the\n   definitions of \"URI-reference\", \"absoluteURI\", \"relativeURI\", \"port\",\n   \"host\",\"abs_path\", \"rel_path\", and \"authority\" from that\n   specification.\n\n   The HTTP protocol does not place any a priori limit on the length of\n   a URI. Servers MUST be able to handle the URI of any resource they\n   serve, and SHOULD be able to handle URIs of unbounded length if they\n   provide GET-based forms that could generate such URIs. A server\n   SHOULD return 414 (Request-URI Too Long) status if a URI is longer\n   than the server can handle (see <a href=\"#section-10.4.15\">section 10.4.15</a>).\n\n      Note: Servers ought to be cautious about depending on URI lengths\n      above 255 bytes, because some older client or proxy\n      implementations might not properly support these lengths.\n\n<h4 class=\"h4\" id=\"section-3.2.2\">3.2.2 http URL</h4>\n   The \"http\" scheme is used to locate network resources via the HTTP\n   protocol. This section defines the scheme-specific syntax and\n   semantics for http URLs.\n\n   http_URL = \"http:\" \"//\" host [ \":\" port ] [ abs_path [ \"?\" query ]]\n\n   If the port is empty or not given, port 80 is assumed. The semantics\n   are that the identified resource is located at the server listening\n   for TCP connections on that port of that host, and the Request-URI\n   for the resource is abs_path (<a href=\"#section-5.1.2\">section 5.1.2</a>). The use of IP addresses\n   in URLs SHOULD be avoided whenever possible (see <a href=\"https://tools.ietf.org/html/rfc1900\">RFC 1900</a> [<a href=\"#ref-24\" title='\"Renumbering Needs Work\"'>24</a>]). If\n   the abs_path is not present in the URL, it MUST be given as \"/\" when\n   used as a Request-URI for a resource (<a href=\"#section-5.1.2\">section 5.1.2</a>). If a proxy\n   receives a host name which is not a fully qualified domain name, it\n   MAY add its domain to the host name it received. If a proxy receives\n   a fully qualified domain name, the proxy MUST NOT change the host\n   name.\n\n<h4 class=\"h4\" id=\"section-3.2.3\">3.2.3 URI Comparison</h4>\n   When comparing two URIs to decide if they match or not, a client\n   SHOULD use a case-sensitive octet-by-octet comparison of the entire\n   URIs, with these exceptions:\n\n      - A port that is empty or not given is equivalent to the default\n        port for that URI-reference;\n\n        - Comparisons of host names MUST be case-insensitive;\n\n        - Comparisons of scheme names MUST be case-insensitive;\n\n        - An empty abs_path is equivalent to an abs_path of \"/\".\n\n   Characters other than those in the \"reserved\" and \"unsafe\" sets (see\n   <a href=\"https://tools.ietf.org/html/rfc2396\">RFC 2396</a> [<a href=\"#ref-42\" title='\"Uniform Resource Identifiers (URI): Generic Syntax and Semantics\"'>42</a>]) are equivalent to their \"\"%\" HEX HEX\" encoding.\n\n   For example, the following three URIs are equivalent:\n\n      <a href=\"http://abc.com:80/~smith/home.html\">http://abc.com:80/~smith/home.html</a>\n      <a href=\"http://ABC.com/%7Esmith/home.html\">http://ABC.com/%7Esmith/home.html</a>\n      <a href=\"http://ABC.com/%7esmith/home.html\">http://ABC.com:/%7esmith/home.html</a>\n\n<h3 class=\"h3\" id=\"section-3.3\">3.3 Date/Time Formats</h3>\n<h4 class=\"h4\" id=\"section-3.3.1\">3.3.1 Full Date</h4>\n   HTTP applications have historically allowed three different formats\n   for the representation of date/time stamps:\n\n      Sun, 06 Nov 1994 08:49:37 GMT  ; <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a>, updated by <a href=\"https://tools.ietf.org/html/rfc1123\">RFC 1123</a>\n      Sunday, 06-Nov-94 08:49:37 GMT ; <a href=\"https://tools.ietf.org/html/rfc850\">RFC 850</a>, obsoleted by <a href=\"https://tools.ietf.org/html/rfc1036\">RFC 1036</a>\n      Sun Nov  6 08:49:37 1994       ; ANSI C's asctime() format\n\n   The first format is preferred as an Internet standard and represents\n   a fixed-length subset of that defined by <a href=\"https://tools.ietf.org/html/rfc1123\">RFC 1123</a> [<a href=\"#ref-8\" title='\"Requirements for Internet Hosts -- Communication Layers\"'>8</a>] (an update to\n   <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a> [<a href=\"#ref-9\" title='\"Standard for The Format of ARPA Internet Text Messages\"'>9</a>]). The second format is in common use, but is based on the\n   obsolete <a href=\"https://tools.ietf.org/html/rfc850\">RFC 850</a> [<a href=\"#ref-12\" title='\"Standard for Interchange of USENET Messages\"'>12</a>] date format and lacks a four-digit year.\n   HTTP/1.1 clients and servers that parse the date value MUST accept\n   all three formats (for compatibility with HTTP/1.0), though they MUST\n   only generate the <a href=\"https://tools.ietf.org/html/rfc1123\">RFC 1123</a> format for representing HTTP-date values\n   in header fields. See <a href=\"#section-19.3\">section 19.3</a> for further information.\n\n      Note: Recipients of date values are encouraged to be robust in\n      accepting date values that may have been sent by non-HTTP\n      applications, as is sometimes the case when retrieving or posting\n      messages via proxies/gateways to SMTP or NNTP.\n\n   All HTTP date/time stamps MUST be represented in Greenwich Mean Time\n   (GMT), without exception. For the purposes of HTTP, GMT is exactly\n   equal to UTC (Coordinated Universal Time). This is indicated in the\n   first two formats by the inclusion of \"GMT\" as the three-letter\n   abbreviation for time zone, and MUST be assumed when reading the\n   asctime format. HTTP-date is case sensitive and MUST NOT include\n   additional LWS beyond that specifically included as SP in the\n   grammar.\n\n       HTTP-date    = <a href=\"https://tools.ietf.org/html/rfc1123\">rfc1123</a>-date | <a href=\"https://tools.ietf.org/html/rfc850\">rfc850</a>-date | asctime-date\n       <a href=\"https://tools.ietf.org/html/rfc1123\">rfc1123</a>-date = wkday \",\" SP date1 SP time SP \"GMT\"\n       <a href=\"https://tools.ietf.org/html/rfc850\">rfc850</a>-date  = weekday \",\" SP date2 SP time SP \"GMT\"\n       asctime-date = wkday SP date3 SP time SP 4DIGIT\n       date1        = 2DIGIT SP month SP 4DIGIT\n                      ; day month year (e.g., 02 Jun 1982)\n       date2        = 2DIGIT \"-\" month \"-\" 2DIGIT\n                      ; day-month-year (e.g., 02-Jun-82)\n       date3        = month SP ( 2DIGIT | ( SP 1DIGIT ))\n                      ; month day (e.g., Jun  2)\n       time         = 2DIGIT \":\" 2DIGIT \":\" 2DIGIT\n                      ; 00:00:00 - 23:59:59\n       wkday        = \"Mon\" | \"Tue\" | \"Wed\"\n                    | \"Thu\" | \"Fri\" | \"Sat\" | \"Sun\"\n       weekday      = \"Monday\" | \"Tuesday\" | \"Wednesday\"\n                    | \"Thursday\" | \"Friday\" | \"Saturday\" | \"Sunday\"\n       month        = \"Jan\" | \"Feb\" | \"Mar\" | \"Apr\"\n                    | \"May\" | \"Jun\" | \"Jul\" | \"Aug\"\n                    | \"Sep\" | \"Oct\" | \"Nov\" | \"Dec\"\n\n      Note: HTTP requirements for the date/time stamp format apply only\n      to their usage within the protocol stream. Clients and servers are\n      not required to use these formats for user presentation, request\n      logging, etc.\n\n<h4 class=\"h4\" id=\"section-3.3.2\">3.3.2 Delta Seconds</h4>\n   Some HTTP header fields allow a time value to be specified as an\n   integer number of seconds, represented in decimal, after the time\n   that the message was received.\n\n       delta-seconds  = 1*DIGIT\n\n<h3 class=\"h3\" id=\"section-3.4\">3.4 Character Sets</h3>\n   HTTP uses the same definition of the term \"character set\" as that\n   described for MIME:\n\n   The term \"character set\" is used in this document to refer to a\n   method used with one or more tables to convert a sequence of octets\n   into a sequence of characters. Note that unconditional conversion in\n   the other direction is not required, in that not all characters may\n   be available in a given character set and a character set may provide\n   more than one sequence of octets to represent a particular character.\n   This definition is intended to allow various kinds of character\n   encoding, from simple single-table mappings such as US-ASCII to\n   complex table switching methods such as those that use ISO-2022's\n   techniques. However, the definition associated with a MIME character\n   set name MUST fully specify the mapping to be performed from octets\n   to characters. In particular, use of external profiling information\n   to determine the exact mapping is not permitted.\n\n      Note: This use of the term \"character set\" is more commonly\n      referred to as a \"character encoding.\" However, since HTTP and\n      MIME share the same registry, it is important that the terminology\n      also be shared.\n\n   HTTP character sets are identified by case-insensitive tokens. The\n   complete set of tokens is defined by the IANA Character Set registry\n   [<a href=\"#ref-19\" title='\"Assigned Numbers\"'>19</a>].\n\n       charset = token\n\n   Although HTTP allows an arbitrary token to be used as a charset\n   value, any token that has a predefined value within the IANA\n   Character Set registry [<a href=\"#ref-19\" title='\"Assigned Numbers\"'>19</a>] MUST represent the character set defined\n   by that registry. Applications SHOULD limit their use of character\n   sets to those defined by the IANA registry.\n\n   Implementors should be aware of IETF character set requirements [<a href=\"#ref-38\" title='\"UTF-8, a transformation format of Unicode and ISO-10646\"'>38</a>]\n   [<a href=\"#ref-41\" title='\"IETF Policy on Character Sets and Languages\"'>41</a>].\n\n<h4 class=\"h4\" id=\"section-3.4.1\">3.4.1 Missing Charset</h4>\n   Some HTTP/1.0 software has interpreted a Content-Type header without\n   charset parameter incorrectly to mean \"recipient should guess.\"\n   Senders wishing to defeat this behavior MAY include a charset\n   parameter even when the charset is ISO-8859-1 and SHOULD do so when\n   it is known that it will not confuse the recipient.\n\n   Unfortunately, some older HTTP/1.0 clients did not deal properly with\n   an explicit charset parameter. HTTP/1.1 recipients MUST respect the\n   charset label provided by the sender; and those user agents that have\n   a provision to \"guess\" a charset MUST use the charset from the\n\n   content-type field if they support that charset, rather than the\n   recipient's preference, when initially displaying a document. See\n   <a href=\"#section-3.7.1\">section 3.7.1</a>.\n\n<h3 class=\"h3\" id=\"section-3.5\">3.5 Content Codings</h3>\n   Content coding values indicate an encoding transformation that has\n   been or can be applied to an entity. Content codings are primarily\n   used to allow a document to be compressed or otherwise usefully\n   transformed without losing the identity of its underlying media type\n   and without loss of information. Frequently, the entity is stored in\n   coded form, transmitted directly, and only decoded by the recipient.\n\n       content-coding   = token\n\n   All content-coding values are case-insensitive. HTTP/1.1 uses\n   content-coding values in the Accept-Encoding (<a href=\"#section-14.3\">section 14.3</a>) and\n   Content-Encoding (<a href=\"#section-14.11\">section 14.11</a>) header fields. Although the value\n   describes the content-coding, what is more important is that it\n   indicates what decoding mechanism will be required to remove the\n   encoding.\n\n   The Internet Assigned Numbers Authority (IANA) acts as a registry for\n   content-coding value tokens. Initially, the registry contains the\n   following tokens:\n\n   gzip An encoding format produced by the file compression program\n        \"gzip\" (GNU zip) as described in <a href=\"https://tools.ietf.org/html/rfc1952\">RFC 1952</a> [<a href=\"#ref-25\" title='\"GZIP file format specification version 4.3\"'>25</a>]. This format is a\n        Lempel-Ziv coding (LZ77) with a 32 bit CRC.\n\n   compress\n        The encoding format produced by the common UNIX file compression\n        program \"compress\". This format is an adaptive Lempel-Ziv-Welch\n        coding (LZW).\n\n        Use of program names for the identification of encoding formats\n        is not desirable and is discouraged for future encodings. Their\n        use here is representative of historical practice, not good\n        design. For compatibility with previous implementations of HTTP,\n        applications SHOULD consider \"x-gzip\" and \"x-compress\" to be\n        equivalent to \"gzip\" and \"compress\" respectively.\n\n   deflate\n        The \"zlib\" format defined in <a href=\"https://tools.ietf.org/html/rfc1950\">RFC 1950</a> [<a href=\"#ref-31\" title='\"ZLIB Compressed Data Format Specification version 3.3\"'>31</a>] in combination with\n        the \"deflate\" compression mechanism described in <a href=\"https://tools.ietf.org/html/rfc1951\">RFC 1951</a> [<a href=\"#ref-29\" title='\"DEFLATE Compressed Data Format Specification version 1.3\"'>29</a>].\n\n   identity\n        The default (identity) encoding; the use of no transformation\n        whatsoever. This content-coding is used only in the Accept-\n        Encoding header, and SHOULD NOT be used in the Content-Encoding\n        header.\n\n   New content-coding value tokens SHOULD be registered; to allow\n   interoperability between clients and servers, specifications of the\n   content coding algorithms needed to implement a new value SHOULD be\n   publicly available and adequate for independent implementation, and\n   conform to the purpose of content coding defined in this section.\n\n<h3 class=\"h3\" id=\"section-3.6\">3.6 Transfer Codings</h3>\n   Transfer-coding values are used to indicate an encoding\n   transformation that has been, can be, or may need to be applied to an\n   entity-body in order to ensure \"safe transport\" through the network.\n   This differs from a content coding in that the transfer-coding is a\n   property of the message, not of the original entity.\n\n       transfer-coding         = \"chunked\" | transfer-extension\n       transfer-extension      = token *( \";\" parameter )\n\n   Parameters are in  the form of attribute/value pairs.\n\n       parameter               = attribute \"=\" value\n       attribute               = token\n       value                   = token | quoted-string\n\n   All transfer-coding values are case-insensitive. HTTP/1.1 uses\n   transfer-coding values in the TE header field (<a href=\"#section-14.39\">section 14.39</a>) and in\n   the Transfer-Encoding header field (<a href=\"#section-14.41\">section 14.41</a>).\n\n   Whenever a transfer-coding is applied to a message-body, the set of\n   transfer-codings MUST include \"chunked\", unless the message is\n   terminated by closing the connection. When the \"chunked\" transfer-\n   coding is used, it MUST be the last transfer-coding applied to the\n   message-body. The \"chunked\" transfer-coding MUST NOT be applied more\n   than once to a message-body. These rules allow the recipient to\n   determine the transfer-length of the message (<a href=\"#section-4.4\">section 4.4</a>).\n\n   Transfer-codings are analogous to the Content-Transfer-Encoding\n   values of MIME [<a href=\"#ref-7\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>7</a>], which were designed to enable safe transport of\n   binary data over a 7-bit transport service. However, safe transport\n   has a different focus for an 8bit-clean transfer protocol. In HTTP,\n   the only unsafe characteristic of message-bodies is the difficulty in\n   determining the exact body length (<a href=\"#section-7.2.2\">section 7.2.2</a>), or the desire to\n   encrypt data over a shared transport.\n\n   The Internet Assigned Numbers Authority (IANA) acts as a registry for\n   transfer-coding value tokens. Initially, the registry contains the\n   following tokens: \"chunked\" (<a href=\"#section-3.6.1\">section 3.6.1</a>), \"identity\" (<a href=\"#section-3.6.2\">section</a>\n   <a href=\"#section-3.6.2\">3.6.2</a>), \"gzip\" (<a href=\"#section-3.5\">section 3.5</a>), \"compress\" (<a href=\"#section-3.5\">section 3.5</a>), and \"deflate\"\n   (<a href=\"#section-3.5\">section 3.5</a>).\n\n   New transfer-coding value tokens SHOULD be registered in the same way\n   as new content-coding value tokens (<a href=\"#section-3.5\">section 3.5</a>).\n\n   A server which receives an entity-body with a transfer-coding it does\n   not understand SHOULD return 501 (Unimplemented), and close the\n   connection. A server MUST NOT send transfer-codings to an HTTP/1.0\n   client.\n\n<h4 class=\"h4\" id=\"section-3.6.1\">3.6.1 Chunked Transfer Coding</h4>\n   The chunked encoding modifies the body of a message in order to\n   transfer it as a series of chunks, each with its own size indicator,\n   followed by an OPTIONAL trailer containing entity-header fields. This\n   allows dynamically produced content to be transferred along with the\n   information necessary for the recipient to verify that it has\n   received the full message.\n\n       Chunked-Body   = *chunk\n                        last-chunk\n                        trailer\n                        CRLF\n\n       chunk          = chunk-size [ chunk-extension ] CRLF\n                        chunk-data CRLF\n       chunk-size     = 1*HEX\n       last-chunk     = 1*(\"0\") [ chunk-extension ] CRLF\n\n       chunk-extension= *( \";\" chunk-ext-name [ \"=\" chunk-ext-val ] )\n       chunk-ext-name = token\n       chunk-ext-val  = token | quoted-string\n       chunk-data     = chunk-size(OCTET)\n       trailer        = *(entity-header CRLF)\n\n   The chunk-size field is a string of hex digits indicating the size of\n   the chunk. The chunked encoding is ended by any chunk whose size is\n   zero, followed by the trailer, which is terminated by an empty line.\n\n   The trailer allows the sender to include additional HTTP header\n   fields at the end of the message. The Trailer header field can be\n   used to indicate which header fields are included in a trailer (see\n   <a href=\"#section-14.40\">section 14.40</a>).\n\n   A server using chunked transfer-coding in a response MUST NOT use the\n   trailer for any header fields unless at least one of the following is\n   true:\n\n   a)the request included a TE header field that indicates \"trailers\" is\n     acceptable in the transfer-coding of the  response, as described in\n     <a href=\"#section-14.39\">section 14.39</a>; or,\n\n   b)the server is the origin server for the response, the trailer\n     fields consist entirely of optional metadata, and the recipient\n     could use the message (in a manner acceptable to the origin server)\n     without receiving this metadata.  In other words, the origin server\n     is willing to accept the possibility that the trailer fields might\n     be silently discarded along the path to the client.\n\n   This requirement prevents an interoperability failure when the\n   message is being received by an HTTP/1.1 (or later) proxy and\n   forwarded to an HTTP/1.0 recipient. It avoids a situation where\n   compliance with the protocol would have necessitated a possibly\n   infinite buffer on the proxy.\n\n   An example process for decoding a Chunked-Body is presented in\n   appendix 19.4.6.\n\n   All HTTP/1.1 applications MUST be able to receive and decode the\n   \"chunked\" transfer-coding, and MUST ignore chunk-extension extensions\n   they do not understand.\n\n<h3 class=\"h3\" id=\"section-3.7\">3.7 Media Types</h3>\n   HTTP uses Internet Media Types [<a href=\"#ref-17\" title='\"Media Type Registration Procedure\"'>17</a>] in the Content-Type (<a href=\"#section-14.17\">section</a>\n   <a href=\"#section-14.17\">14.17</a>) and Accept (<a href=\"#section-14.1\">section 14.1</a>) header fields in order to provide\n   open and extensible data typing and type negotiation.\n\n       media-type     = type \"/\" subtype *( \";\" parameter )\n       type           = token\n       subtype        = token\n\n   Parameters MAY follow the type/subtype in the form of attribute/value\n   pairs (as defined in <a href=\"#section-3.6\">section 3.6</a>).\n\n   The type, subtype, and parameter attribute names are case-\n   insensitive. Parameter values might or might not be case-sensitive,\n   depending on the semantics of the parameter name. Linear white space\n   (LWS) MUST NOT be used between the type and subtype, nor between an\n   attribute and its value. The presence or absence of a parameter might\n   be significant to the processing of a media-type, depending on its\n   definition within the media type registry.\n\n   Note that some older HTTP applications do not recognize media type\n   parameters. When sending data to older HTTP applications,\n   implementations SHOULD only use media type parameters when they are\n   required by that type/subtype definition.\n\n   Media-type values are registered with the Internet Assigned Number\n   Authority (IANA [<a href=\"#ref-19\" title='\"Assigned Numbers\"'>19</a>]). The media type registration process is\n   outlined in <a href=\"https://tools.ietf.org/html/rfc1590\">RFC 1590</a> [<a href=\"#ref-17\" title='\"Media Type Registration Procedure\"'>17</a>]. Use of non-registered media types is\n   discouraged.\n\n<h4 class=\"h4\" id=\"section-3.7.1\">3.7.1 Canonicalization and Text Defaults</h4>\n   Internet media types are registered with a canonical form. An\n   entity-body transferred via HTTP messages MUST be represented in the\n   appropriate canonical form prior to its transmission except for\n   \"text\" types, as defined in the next paragraph.\n\n   When in canonical form, media subtypes of the \"text\" type use CRLF as\n   the text line break. HTTP relaxes this requirement and allows the\n   transport of text media with plain CR or LF alone representing a line\n   break when it is done consistently for an entire entity-body. HTTP\n   applications MUST accept CRLF, bare CR, and bare LF as being\n   representative of a line break in text media received via HTTP. In\n   addition, if the text is represented in a character set that does not\n   use octets 13 and 10 for CR and LF respectively, as is the case for\n   some multi-byte character sets, HTTP allows the use of whatever octet\n   sequences are defined by that character set to represent the\n   equivalent of CR and LF for line breaks. This flexibility regarding\n   line breaks applies only to text media in the entity-body; a bare CR\n   or LF MUST NOT be substituted for CRLF within any of the HTTP control\n   structures (such as header fields and multipart boundaries).\n\n   If an entity-body is encoded with a content-coding, the underlying\n   data MUST be in a form defined above prior to being encoded.\n\n   The \"charset\" parameter is used with some media types to define the\n   character set (<a href=\"#section-3.4\">section 3.4</a>) of the data. When no explicit charset\n   parameter is provided by the sender, media subtypes of the \"text\"\n   type are defined to have a default charset value of \"ISO-8859-1\" when\n   received via HTTP. Data in character sets other than \"ISO-8859-1\" or\n   its subsets MUST be labeled with an appropriate charset value. See\n   <a href=\"#section-3.4.1\">section 3.4.1</a> for compatibility problems.\n\n<h4 class=\"h4\" id=\"section-3.7.2\">3.7.2 Multipart Types</h4>\n   MIME provides for a number of \"multipart\" types -- encapsulations of\n   one or more entities within a single message-body. All multipart\n   types share a common syntax, as defined in <a href=\"https://tools.ietf.org/html/rfc2046#section-5.1.1\">section 5.1.1 of RFC 2046</a>\n\n   [<a href=\"#ref-40\" title='\"Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types\"'>40</a>], and MUST include a boundary parameter as part of the media type\n   value. The message body is itself a protocol element and MUST\n   therefore use only CRLF to represent line breaks between body-parts.\n   Unlike in <a href=\"https://tools.ietf.org/html/rfc2046\">RFC 2046</a>, the epilogue of any multipart message MUST be\n   empty; HTTP applications MUST NOT transmit the epilogue (even if the\n   original multipart contains an epilogue). These restrictions exist in\n   order to preserve the self-delimiting nature of a multipart message-\n   body, wherein the \"end\" of the message-body is indicated by the\n   ending multipart boundary.\n\n   In general, HTTP treats a multipart message-body no differently than\n   any other media type: strictly as payload. The one exception is the\n   \"multipart/byteranges\" type (appendix 19.2) when it appears in a 206\n   (Partial Content) response, which will be interpreted by some HTTP\n   caching mechanisms as described in sections <a href=\"#section-13.5.4\">13.5.4</a> and <a href=\"#section-14.16\">14.16</a>. In all\n   other cases, an HTTP user agent SHOULD follow the same or similar\n   behavior as a MIME user agent would upon receipt of a multipart type.\n   The MIME header fields within each body-part of a multipart message-\n   body do not have any significance to HTTP beyond that defined by\n   their MIME semantics.\n\n   In general, an HTTP user agent SHOULD follow the same or similar\n   behavior as a MIME user agent would upon receipt of a multipart type.\n   If an application receives an unrecognized multipart subtype, the\n   application MUST treat it as being equivalent to \"multipart/mixed\".\n\n      Note: The \"multipart/form-data\" type has been specifically defined\n      for carrying form data suitable for processing via the POST\n      request method, as described in <a href=\"https://tools.ietf.org/html/rfc1867\">RFC 1867</a> [<a href=\"#ref-15\" title='\"Form-based File Upload in HTML\"'>15</a>].\n\n<h3 class=\"h3\" id=\"section-3.8\">3.8 Product Tokens</h3>\n   Product tokens are used to allow communicating applications to\n   identify themselves by software name and version. Most fields using\n   product tokens also allow sub-products which form a significant part\n   of the application to be listed, separated by white space. By\n   convention, the products are listed in order of their significance\n   for identifying the application.\n\n       product         = token [\"/\" product-version]\n       product-version = token\n\n   Examples:\n\n       User-Agent: CERN-LineMode/2.15 libwww/2.17b3\n       Server: Apache/0.8.4\n\n   Product tokens SHOULD be short and to the point. They MUST NOT be\n   used for advertising or other non-essential information. Although any\n   token character MAY appear in a product-version, this token SHOULD\n   only be used for a version identifier (i.e., successive versions of\n   the same product SHOULD only differ in the product-version portion of\n   the product value).\n\n<h3 class=\"h3\" id=\"section-3.9\">3.9 Quality Values</h3>\n   HTTP content negotiation (<a href=\"#section-12\">section 12</a>) uses short \"floating point\"\n   numbers to indicate the relative importance (\"weight\") of various\n   negotiable parameters.  A weight is normalized to a real number in\n   the range 0 through 1, where 0 is the minimum and 1 the maximum\n   value. If a parameter has a quality value of 0, then content with\n   this parameter is `not acceptable' for the client. HTTP/1.1\n   applications MUST NOT generate more than three digits after the\n   decimal point. User configuration of these values SHOULD also be\n   limited in this fashion.\n\n       qvalue         = ( \"0\" [ \".\" 0*3DIGIT ] )\n                      | ( \"1\" [ \".\" 0*3(\"0\") ] )\n\n   \"Quality values\" is a misnomer, since these values merely represent\n   relative degradation in desired quality.\n\n<h3 class=\"h3\" id=\"section-3.10\">3.10 Language Tags</h3>\n   A language tag identifies a natural language spoken, written, or\n   otherwise conveyed by human beings for communication of information\n   to other human beings. Computer languages are explicitly excluded.\n   HTTP uses language tags within the Accept-Language and Content-\n   Language fields.\n\n   The syntax and registry of HTTP language tags is the same as that\n   defined by <a href=\"https://tools.ietf.org/html/rfc1766\">RFC 1766</a> [<a href=\"#ref-1\" title='\"Tags for the Identification of Languages\"'>1</a>]. In summary, a language tag is composed of 1\n   or more parts: A primary language tag and a possibly empty series of\n   subtags:\n\n        language-tag  = primary-tag *( \"-\" subtag )\n        primary-tag   = 1*8ALPHA\n        subtag        = 1*8ALPHA\n\n   White space is not allowed within the tag and all tags are case-\n   insensitive. The name space of language tags is administered by the\n   IANA. Example tags include:\n\n       en, en-US, en-cockney, i-cherokee, x-pig-latin\n\n   where any two-letter primary-tag is an ISO-639 language abbreviation\n   and any two-letter initial subtag is an ISO-3166 country code. (The\n   last three tags above are not registered tags; all but the last are\n   examples of tags which could be registered in future.)\n\n<h3 class=\"h3\" id=\"section-3.11\">3.11 Entity Tags</h3>\n   Entity tags are used for comparing two or more entities from the same\n   requested resource. HTTP/1.1 uses entity tags in the ETag (<a href=\"#section-14.19\">section</a>\n   <a href=\"#section-14.19\">14.19</a>), If-Match (<a href=\"#section-14.24\">section 14.24</a>), If-None-Match (<a href=\"#section-14.26\">section 14.26</a>), and\n   If-Range (<a href=\"#section-14.27\">section 14.27</a>) header fields. The definition of how they\n   are used and compared as cache validators is in <a href=\"#section-13.3.3\">section 13.3.3</a>. An\n   entity tag consists of an opaque quoted string, possibly prefixed by\n   a weakness indicator.\n\n      entity-tag = [ weak ] opaque-tag\n      weak       = \"W/\"\n      opaque-tag = quoted-string\n\n   A \"strong entity tag\" MAY be shared by two entities of a resource\n   only if they are equivalent by octet equality.\n\n   A \"weak entity tag,\" indicated by the \"W/\" prefix, MAY be shared by\n   two entities of a resource only if the entities are equivalent and\n   could be substituted for each other with no significant change in\n   semantics. A weak entity tag can only be used for weak comparison.\n\n   An entity tag MUST be unique across all versions of all entities\n   associated with a particular resource. A given entity tag value MAY\n   be used for entities obtained by requests on different URIs. The use\n   of the same entity tag value in conjunction with entities obtained by\n   requests on different URIs does not imply the equivalence of those\n   entities.\n\n<h3 class=\"h3\" id=\"section-3.12\">3.12 Range Units</h3>\n   HTTP/1.1 allows a client to request that only part (a range of) the\n   response entity be included within the response. HTTP/1.1 uses range\n   units in the Range (<a href=\"#section-14.35\">section 14.35</a>) and Content-Range (<a href=\"#section-14.16\">section 14.16</a>)\n   header fields. An entity can be broken down into subranges according\n   to various structural units.\n\n      range-unit       = bytes-unit | other-range-unit\n      bytes-unit       = \"bytes\"\n      other-range-unit = token\n\n   The only range unit defined by HTTP/1.1 is \"bytes\". HTTP/1.1\n   implementations MAY ignore ranges specified using other units.\n\n   HTTP/1.1 has been designed to allow implementations of applications\n   that do not depend on knowledge of ranges.\n\n<h2 class=\"h2\" id=\"section-4\">4 HTTP Message</h2>\n<h3 class=\"h3\" id=\"section-4.1\">4.1 Message Types</h3>\n   HTTP messages consist of requests from client to server and responses\n   from server to client.\n\n       HTTP-message   = Request | Response     ; HTTP/1.1 messages\n\n   Request (<a href=\"#section-5\">section 5</a>) and Response (<a href=\"#section-6\">section 6</a>) messages use the generic\n   message format of <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a> [<a href=\"#ref-9\" title='\"Standard for The Format of ARPA Internet Text Messages\"'>9</a>] for transferring entities (the payload\n   of the message). Both types of message consist of a start-line, zero\n   or more header fields (also known as \"headers\"), an empty line (i.e.,\n   a line with nothing preceding the CRLF) indicating the end of the\n   header fields, and possibly a message-body.\n\n        generic-message = start-line\n                          *(message-header CRLF)\n                          CRLF\n                          [ message-body ]\n        start-line      = Request-Line | Status-Line\n\n   In the interest of robustness, servers SHOULD ignore any empty\n   line(s) received where a Request-Line is expected. In other words, if\n   the server is reading the protocol stream at the beginning of a\n   message and receives a CRLF first, it should ignore the CRLF.\n\n   Certain buggy HTTP/1.0 client implementations generate extra CRLF's\n   after a POST request. To restate what is explicitly forbidden by the\n   BNF, an HTTP/1.1 client MUST NOT preface or follow a request with an\n   extra CRLF.\n\n<h3 class=\"h3\" id=\"section-4.2\">4.2 Message Headers</h3>\n   HTTP header fields, which include general-header (<a href=\"#section-4.5\">section 4.5</a>),\n   request-header (<a href=\"#section-5.3\">section 5.3</a>), response-header (<a href=\"#section-6.2\">section 6.2</a>), and\n   entity-header (<a href=\"#section-7.1\">section 7.1</a>) fields, follow the same generic format as\n   that given in <a href=\"https://tools.ietf.org/html/rfc822#section-3.1\">Section 3.1 of RFC 822</a> [<a href=\"#ref-9\" title='\"Standard for The Format of ARPA Internet Text Messages\"'>9</a>]. Each header field consists\n   of a name followed by a colon (\":\") and the field value. Field names\n   are case-insensitive. The field value MAY be preceded by any amount\n   of LWS, though a single SP is preferred. Header fields can be\n   extended over multiple lines by preceding each extra line with at\n   least one SP or HT. Applications ought to follow \"common form\", where\n   one is known or indicated, when generating HTTP constructs, since\n   there might exist some implementations that fail to accept anything\n\n   beyond the common forms.\n\n       message-header = field-name \":\" [ field-value ]\n       field-name     = token\n       field-value    = *( field-content | LWS )\n       field-content  = &lt;the OCTETs making up the field-value\n                        and consisting of either *TEXT or combinations\n                        of token, separators, and quoted-string&gt;\n\n   The field-content does not include any leading or trailing LWS:\n   linear white space occurring before the first non-whitespace\n   character of the field-value or after the last non-whitespace\n   character of the field-value. Such leading or trailing LWS MAY be\n   removed without changing the semantics of the field value. Any LWS\n   that occurs between field-content MAY be replaced with a single SP\n   before interpreting the field value or forwarding the message\n   downstream.\n\n   The order in which header fields with differing field names are\n   received is not significant. However, it is \"good practice\" to send\n   general-header fields first, followed by request-header or response-\n   header fields, and ending with the entity-header fields.\n\n   Multiple message-header fields with the same field-name MAY be\n   present in a message if and only if the entire field-value for that\n   header field is defined as a comma-separated list [i.e., #(values)].\n   It MUST be possible to combine the multiple header fields into one\n   \"field-name: field-value\" pair, without changing the semantics of the\n   message, by appending each subsequent field-value to the first, each\n   separated by a comma. The order in which header fields with the same\n   field-name are received is therefore significant to the\n   interpretation of the combined field value, and thus a proxy MUST NOT\n   change the order of these field values when a message is forwarded.\n\n<h3 class=\"h3\" id=\"section-4.3\">4.3 Message Body</h3>\n   The message-body (if any) of an HTTP message is used to carry the\n   entity-body associated with the request or response. The message-body\n   differs from the entity-body only when a transfer-coding has been\n   applied, as indicated by the Transfer-Encoding header field (<a href=\"#section-14.41\">section</a>\n   <a href=\"#section-14.41\">14.41</a>).\n\n       message-body = entity-body\n                    | &lt;entity-body encoded as per Transfer-Encoding&gt;\n\n   Transfer-Encoding MUST be used to indicate any transfer-codings\n   applied by an application to ensure safe and proper transfer of the\n   message. Transfer-Encoding is a property of the message, not of the\n\n   entity, and thus MAY be added or removed by any application along the\n   request/response chain. (However, <a href=\"#section-3.6\">section 3.6</a> places restrictions on\n   when certain transfer-codings may be used.)\n\n   The rules for when a message-body is allowed in a message differ for\n   requests and responses.\n\n   The presence of a message-body in a request is signaled by the\n   inclusion of a Content-Length or Transfer-Encoding header field in\n   the request's message-headers. A message-body MUST NOT be included in\n   a request if the specification of the request method (<a href=\"#section-5.1.1\">section 5.1.1</a>)\n   does not allow sending an entity-body in requests. A server SHOULD\n   read and forward a message-body on any request; if the request method\n   does not include defined semantics for an entity-body, then the\n   message-body SHOULD be ignored when handling the request.\n\n   For response messages, whether or not a message-body is included with\n   a message is dependent on both the request method and the response\n   status code (<a href=\"#section-6.1.1\">section 6.1.1</a>). All responses to the HEAD request method\n   MUST NOT include a message-body, even though the presence of entity-\n   header fields might lead one to believe they do. All 1xx\n   (informational), 204 (no content), and 304 (not modified) responses\n   MUST NOT include a message-body. All other responses do include a\n   message-body, although it MAY be of zero length.\n\n<h3 class=\"h3\" id=\"section-4.4\">4.4 Message Length</h3>\n   The transfer-length of a message is the length of the message-body as\n   it appears in the message; that is, after any transfer-codings have\n   been applied. When a message-body is included with a message, the\n   transfer-length of that body is determined by one of the following\n   (in order of precedence):\n\n   1.Any response message which \"MUST NOT\" include a message-body (such\n     as the 1xx, 204, and 304 responses and any response to a HEAD\n     request) is always terminated by the first empty line after the\n     header fields, regardless of the entity-header fields present in\n     the message.\n\n   2.If a Transfer-Encoding header field (<a href=\"#section-14.41\">section 14.41</a>) is present and\n     has any value other than \"identity\", then the transfer-length is\n     defined by use of the \"chunked\" transfer-coding (<a href=\"#section-3.6\">section 3.6</a>),\n     unless the message is terminated by closing the connection.\n\n   3.If a Content-Length header field (<a href=\"#section-14.13\">section 14.13</a>) is present, its\n     decimal value in OCTETs represents both the entity-length and the\n     transfer-length. The Content-Length header field MUST NOT be sent\n     if these two lengths are different (i.e., if a Transfer-Encoding\n\n     header field is present). If a message is received with both a\n     Transfer-Encoding header field and a Content-Length header field,\n     the latter MUST be ignored.\n\n   4.If the message uses the media type \"multipart/byteranges\", and the\n     ransfer-length is not otherwise specified, then this self-\n     elimiting media type defines the transfer-length. This media type\n     UST NOT be used unless the sender knows that the recipient can arse\n     it; the presence in a request of a Range header with ultiple byte-\n     range specifiers from a 1.1 client implies that the lient can parse\n     multipart/byteranges responses.\n\n       A range header might be forwarded by a 1.0 proxy that does not\n       understand multipart/byteranges; in this case the server MUST\n       delimit the message using methods defined in items 1,3 or 5 of\n       this section.\n\n   5.By the server closing the connection. (Closing the connection\n     cannot be used to indicate the end of a request body, since that\n     would leave no possibility for the server to send back a response.)\n\n   For compatibility with HTTP/1.0 applications, HTTP/1.1 requests\n   containing a message-body MUST include a valid Content-Length header\n   field unless the server is known to be HTTP/1.1 compliant. If a\n   request contains a message-body and a Content-Length is not given,\n   the server SHOULD respond with 400 (bad request) if it cannot\n   determine the length of the message, or with 411 (length required) if\n   it wishes to insist on receiving a valid Content-Length.\n\n   All HTTP/1.1 applications that receive entities MUST accept the\n   \"chunked\" transfer-coding (<a href=\"#section-3.6\">section 3.6</a>), thus allowing this mechanism\n   to be used for messages when the message length cannot be determined\n   in advance.\n\n   Messages MUST NOT include both a Content-Length header field and a\n   non-identity transfer-coding. If the message does include a non-\n   identity transfer-coding, the Content-Length MUST be ignored.\n\n   When a Content-Length is given in a message where a message-body is\n   allowed, its field value MUST exactly match the number of OCTETs in\n   the message-body. HTTP/1.1 user agents MUST notify the user when an\n   invalid length is received and detected.\n\n<h3 class=\"h3\" id=\"section-4.5\">4.5 General Header Fields</h3>\n   There are a few header fields which have general applicability for\n   both request and response messages, but which do not apply to the\n   entity being transferred. These header fields apply only to the\n\n   message being transmitted.\n\n       general-header = Cache-Control            ; <a href=\"#section-14.9\">Section 14.9</a>\n                      | Connection               ; <a href=\"#section-14.10\">Section 14.10</a>\n                      | Date                     ; <a href=\"#section-14.18\">Section 14.18</a>\n                      | Pragma                   ; <a href=\"#section-14.32\">Section 14.32</a>\n                      | Trailer                  ; <a href=\"#section-14.40\">Section 14.40</a>\n                      | Transfer-Encoding        ; <a href=\"#section-14.41\">Section 14.41</a>\n                      | Upgrade                  ; <a href=\"#section-14.42\">Section 14.42</a>\n                      | Via                      ; <a href=\"#section-14.45\">Section 14.45</a>\n                      | Warning                  ; <a href=\"#section-14.46\">Section 14.46</a>\n\n   General-header field names can be extended reliably only in\n   combination with a change in the protocol version. However, new or\n   experimental header fields may be given the semantics of general\n   header fields if all parties in the communication recognize them to\n   be general-header fields. Unrecognized header fields are treated as\n   entity-header fields.\n\n<h2 class=\"h2\" id=\"section-5\">5 Request</h2>\n   A request message from a client to a server includes, within the\n   first line of that message, the method to be applied to the resource,\n   the identifier of the resource, and the protocol version in use.\n\n        Request       = Request-Line              ; <a href=\"#section-5.1\">Section 5.1</a>\n                        *(( general-header        ; <a href=\"#section-4.5\">Section 4.5</a>\n                         | request-header         ; <a href=\"#section-5.3\">Section 5.3</a>\n                         | entity-header ) CRLF)  ; <a href=\"#section-7.1\">Section 7.1</a>\n                        CRLF\n                        [ message-body ]          ; <a href=\"#section-4.3\">Section 4.3</a>\n\n<h3 class=\"h3\" id=\"section-5.1\">5.1 Request-Line</h3>\n   The Request-Line begins with a method token, followed by the\n   Request-URI and the protocol version, and ending with CRLF. The\n   elements are separated by SP characters. No CR or LF is allowed\n   except in the final CRLF sequence.\n\n        Request-Line   = Method SP Request-URI SP HTTP-Version CRLF\n\n<h4 class=\"h4\" id=\"section-5.1.1\">5.1.1 Method</h4>\n   The Method  token indicates the method to be performed on the\n   resource identified by the Request-URI. The method is case-sensitive.\n\n       Method         = \"OPTIONS\"                ; <a href=\"#section-9.2\">Section 9.2</a>\n                      | \"GET\"                    ; <a href=\"#section-9.3\">Section 9.3</a>\n                      | \"HEAD\"                   ; <a href=\"#section-9.4\">Section 9.4</a>\n                      | \"POST\"                   ; <a href=\"#section-9.5\">Section 9.5</a>\n                      | \"PUT\"                    ; <a href=\"#section-9.6\">Section 9.6</a>\n                      | \"DELETE\"                 ; <a href=\"#section-9.7\">Section 9.7</a>\n                      | \"TRACE\"                  ; <a href=\"#section-9.8\">Section 9.8</a>\n                      | \"CONNECT\"                ; <a href=\"#section-9.9\">Section 9.9</a>\n                      | extension-method\n       extension-method = token\n\n   The list of methods allowed by a resource can be specified in an\n   Allow header field (<a href=\"#section-14.7\">section 14.7</a>). The return code of the response\n   always notifies the client whether a method is currently allowed on a\n   resource, since the set of allowed methods can change dynamically. An\n   origin server SHOULD return the status code 405 (Method Not Allowed)\n   if the method is known by the origin server but not allowed for the\n   requested resource, and 501 (Not Implemented) if the method is\n   unrecognized or not implemented by the origin server. The methods GET\n   and HEAD MUST be supported by all general-purpose servers. All other\n   methods are OPTIONAL; however, if the above methods are implemented,\n   they MUST be implemented with the same semantics as those specified\n   in <a href=\"#section-9\">section 9</a>.\n\n<h4 class=\"h4\" id=\"section-5.1.2\">5.1.2 Request-URI</h4>\n   The Request-URI is a Uniform Resource Identifier (<a href=\"#section-3.2\">section 3.2</a>) and\n   identifies the resource upon which to apply the request.\n\n       Request-URI    = \"*\" | absoluteURI | abs_path | authority\n\n   The four options for Request-URI are dependent on the nature of the\n   request. The asterisk \"*\" means that the request does not apply to a\n   particular resource, but to the server itself, and is only allowed\n   when the method used does not necessarily apply to a resource. One\n   example would be\n\n       OPTIONS * HTTP/1.1\n\n   The absoluteURI form is REQUIRED when the request is being made to a\n   proxy. The proxy is requested to forward the request or service it\n   from a valid cache, and return the response. Note that the proxy MAY\n   forward the request on to another proxy or directly to the server\n\n   specified by the absoluteURI. In order to avoid request loops, a\n   proxy MUST be able to recognize all of its server names, including\n   any aliases, local variations, and the numeric IP address. An example\n   Request-Line would be:\n\n       GET <a href=\"http://www.w3.org/pub/WWW/TheProject.html\">http://www.w3.org/pub/WWW/TheProject.html</a> HTTP/1.1\n\n   To allow for transition to absoluteURIs in all requests in future\n   versions of HTTP, all HTTP/1.1 servers MUST accept the absoluteURI\n   form in requests, even though HTTP/1.1 clients will only generate\n   them in requests to proxies.\n\n   The authority form is only used by the CONNECT method (<a href=\"#section-9.9\">section 9.9</a>).\n\n   The most common form of Request-URI is that used to identify a\n   resource on an origin server or gateway. In this case the absolute\n   path of the URI MUST be transmitted (see <a href=\"#section-3.2.1\">section 3.2.1</a>, abs_path) as\n   the Request-URI, and the network location of the URI (authority) MUST\n   be transmitted in a Host header field. For example, a client wishing\n   to retrieve the resource above directly from the origin server would\n   create a TCP connection to port 80 of the host \"www.w3.org\" and send\n   the lines:\n\n       GET /pub/WWW/TheProject.html HTTP/1.1\n       Host: www.w3.org\n\n   followed by the remainder of the Request. Note that the absolute path\n   cannot be empty; if none is present in the original URI, it MUST be\n   given as \"/\" (the server root).\n\n   The Request-URI is transmitted in the format specified in <a href=\"#section-3.2.1\">section</a>\n   <a href=\"#section-3.2.1\">3.2.1</a>. If the Request-URI is encoded using the \"% HEX HEX\" encoding\n   [<a href=\"#ref-42\" title='\"Uniform Resource Identifiers (URI): Generic Syntax and Semantics\"'>42</a>], the origin server MUST decode the Request-URI in order to\n   properly interpret the request. Servers SHOULD respond to invalid\n   Request-URIs with an appropriate status code.\n\n   A transparent proxy MUST NOT rewrite the \"abs_path\" part of the\n   received Request-URI when forwarding it to the next inbound server,\n   except as noted above to replace a null abs_path with \"/\".\n\n      Note: The \"no rewrite\" rule prevents the proxy from changing the\n      meaning of the request when the origin server is improperly using\n      a non-reserved URI character for a reserved purpose.  Implementors\n      should be aware that some pre-HTTP/1.1 proxies have been known to\n      rewrite the Request-URI.\n\n<h3 class=\"h3\" id=\"section-5.2\">5.2 The Resource Identified by a Request</h3>\n   The exact resource identified by an Internet request is determined by\n   examining both the Request-URI and the Host header field.\n\n   An origin server that does not allow resources to differ by the\n   requested host MAY ignore the Host header field value when\n   determining the resource identified by an HTTP/1.1 request. (But see\n   <a href=\"#section-19.6.1.1\">section 19.6.1.1</a> for other requirements on Host support in HTTP/1.1.)\n\n   An origin server that does differentiate resources based on the host\n   requested (sometimes referred to as virtual hosts or vanity host\n   names) MUST use the following rules for determining the requested\n   resource on an HTTP/1.1 request:\n\n   1. If Request-URI is an absoluteURI, the host is part of the\n     Request-URI. Any Host header field value in the request MUST be\n     ignored.\n\n   2. If the Request-URI is not an absoluteURI, and the request includes\n     a Host header field, the host is determined by the Host header\n     field value.\n\n   3. If the host as determined by rule 1 or 2 is not a valid host on\n     the server, the response MUST be a 400 (Bad Request) error message.\n\n   Recipients of an HTTP/1.0 request that lacks a Host header field MAY\n   attempt to use heuristics (e.g., examination of the URI path for\n   something unique to a particular host) in order to determine what\n   exact resource is being requested.\n\n<h3 class=\"h3\" id=\"section-5.3\">5.3 Request Header Fields</h3>\n   The request-header fields allow the client to pass additional\n   information about the request, and about the client itself, to the\n   server. These fields act as request modifiers, with semantics\n   equivalent to the parameters on a programming language method\n   invocation.\n\n       request-header = Accept                   ; <a href=\"#section-14.1\">Section 14.1</a>\n                      | Accept-Charset           ; <a href=\"#section-14.2\">Section 14.2</a>\n                      | Accept-Encoding          ; <a href=\"#section-14.3\">Section 14.3</a>\n                      | Accept-Language          ; <a href=\"#section-14.4\">Section 14.4</a>\n                      | Authorization            ; <a href=\"#section-14.8\">Section 14.8</a>\n                      | Expect                   ; <a href=\"#section-14.20\">Section 14.20</a>\n                      | From                     ; <a href=\"#section-14.22\">Section 14.22</a>\n                      | Host                     ; <a href=\"#section-14.23\">Section 14.23</a>\n                      | If-Match                 ; <a href=\"#section-14.24\">Section 14.24</a>\n\n                      | If-Modified-Since        ; <a href=\"#section-14.25\">Section 14.25</a>\n                      | If-None-Match            ; <a href=\"#section-14.26\">Section 14.26</a>\n                      | If-Range                 ; <a href=\"#section-14.27\">Section 14.27</a>\n                      | If-Unmodified-Since      ; <a href=\"#section-14.28\">Section 14.28</a>\n                      | Max-Forwards             ; <a href=\"#section-14.31\">Section 14.31</a>\n                      | Proxy-Authorization      ; <a href=\"#section-14.34\">Section 14.34</a>\n                      | Range                    ; <a href=\"#section-14.35\">Section 14.35</a>\n                      | Referer                  ; <a href=\"#section-14.36\">Section 14.36</a>\n                      | TE                       ; <a href=\"#section-14.39\">Section 14.39</a>\n                      | User-Agent               ; <a href=\"#section-14.43\">Section 14.43</a>\n\n   Request-header field names can be extended reliably only in\n   combination with a change in the protocol version. However, new or\n   experimental header fields MAY be given the semantics of request-\n   header fields if all parties in the communication recognize them to\n   be request-header fields. Unrecognized header fields are treated as\n   entity-header fields.\n\n<h2 class=\"h2\" id=\"section-6\">6 Response</h2>\n   After receiving and interpreting a request message, a server responds\n   with an HTTP response message.\n\n       Response      = Status-Line               ; <a href=\"#section-6.1\">Section 6.1</a>\n                       *(( general-header        ; <a href=\"#section-4.5\">Section 4.5</a>\n                        | response-header        ; <a href=\"#section-6.2\">Section 6.2</a>\n                        | entity-header ) CRLF)  ; <a href=\"#section-7.1\">Section 7.1</a>\n                       CRLF\n                       [ message-body ]          ; <a href=\"#section-7.2\">Section 7.2</a>\n\n<h3 class=\"h3\" id=\"section-6.1\">6.1 Status-Line</h3>\n   The first line of a Response message is the Status-Line, consisting\n   of the protocol version followed by a numeric status code and its\n   associated textual phrase, with each element separated by SP\n   characters. No CR or LF is allowed except in the final CRLF sequence.\n\n       Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF\n\n<h4 class=\"h4\" id=\"section-6.1.1\">6.1.1 Status Code and Reason Phrase</h4>\n   The Status-Code element is a 3-digit integer result code of the\n   attempt to understand and satisfy the request. These codes are fully\n   defined in <a href=\"#section-10\">section 10</a>. The Reason-Phrase is intended to give a short\n   textual description of the Status-Code. The Status-Code is intended\n   for use by automata and the Reason-Phrase is intended for the human\n   user. The client is not required to examine or display the Reason-\n   Phrase.\n\n   The first digit of the Status-Code defines the class of response. The\n   last two digits do not have any categorization role. There are 5\n   values for the first digit:\n\n      - 1xx: Informational - Request received, continuing process\n\n      - 2xx: Success - The action was successfully received,\n        understood, and accepted\n\n      - 3xx: Redirection - Further action must be taken in order to\n        complete the request\n\n      - 4xx: Client Error - The request contains bad syntax or cannot\n        be fulfilled\n\n      - 5xx: Server Error - The server failed to fulfill an apparently\n        valid request\n\n   The individual values of the numeric status codes defined for\n   HTTP/1.1, and an example set of corresponding Reason-Phrase's, are\n   presented below. The reason phrases listed here are only\n   recommendations -- they MAY be replaced by local equivalents without\n   affecting the protocol.\n\n      Status-Code    =\n            \"100\"  ; <a href=\"#section-10.1.1\">Section 10.1.1</a>: Continue\n          | \"101\"  ; <a href=\"#section-10.1.2\">Section 10.1.2</a>: Switching Protocols\n          | \"200\"  ; <a href=\"#section-10.2.1\">Section 10.2.1</a>: OK\n          | \"201\"  ; <a href=\"#section-10.2.2\">Section 10.2.2</a>: Created\n          | \"202\"  ; <a href=\"#section-10.2.3\">Section 10.2.3</a>: Accepted\n          | \"203\"  ; <a href=\"#section-10.2.4\">Section 10.2.4</a>: Non-Authoritative Information\n          | \"204\"  ; <a href=\"#section-10.2.5\">Section 10.2.5</a>: No Content\n          | \"205\"  ; <a href=\"#section-10.2.6\">Section 10.2.6</a>: Reset Content\n          | \"206\"  ; <a href=\"#section-10.2.7\">Section 10.2.7</a>: Partial Content\n          | \"300\"  ; <a href=\"#section-10.3.1\">Section 10.3.1</a>: Multiple Choices\n          | \"301\"  ; <a href=\"#section-10.3.2\">Section 10.3.2</a>: Moved Permanently\n          | \"302\"  ; <a href=\"#section-10.3.3\">Section 10.3.3</a>: Found\n          | \"303\"  ; <a href=\"#section-10.3.4\">Section 10.3.4</a>: See Other\n          | \"304\"  ; <a href=\"#section-10.3.5\">Section 10.3.5</a>: Not Modified\n          | \"305\"  ; <a href=\"#section-10.3.6\">Section 10.3.6</a>: Use Proxy\n          | \"307\"  ; <a href=\"#section-10.3.8\">Section 10.3.8</a>: Temporary Redirect\n          | \"400\"  ; <a href=\"#section-10.4.1\">Section 10.4.1</a>: Bad Request\n          | \"401\"  ; <a href=\"#section-10.4.2\">Section 10.4.2</a>: Unauthorized\n          | \"402\"  ; <a href=\"#section-10.4.3\">Section 10.4.3</a>: Payment Required\n          | \"403\"  ; <a href=\"#section-10.4.4\">Section 10.4.4</a>: Forbidden\n          | \"404\"  ; <a href=\"#section-10.4.5\">Section 10.4.5</a>: Not Found\n          | \"405\"  ; <a href=\"#section-10.4.6\">Section 10.4.6</a>: Method Not Allowed\n          | \"406\"  ; <a href=\"#section-10.4.7\">Section 10.4.7</a>: Not Acceptable\n\n          | \"407\"  ; <a href=\"#section-10.4.8\">Section 10.4.8</a>: Proxy Authentication Required\n          | \"408\"  ; <a href=\"#section-10.4.9\">Section 10.4.9</a>: Request Time-out\n          | \"409\"  ; <a href=\"#section-10.4.10\">Section 10.4.10</a>: Conflict\n          | \"410\"  ; <a href=\"#section-10.4.11\">Section 10.4.11</a>: Gone\n          | \"411\"  ; <a href=\"#section-10.4.12\">Section 10.4.12</a>: Length Required\n          | \"412\"  ; <a href=\"#section-10.4.13\">Section 10.4.13</a>: Precondition Failed\n          | \"413\"  ; <a href=\"#section-10.4.14\">Section 10.4.14</a>: Request Entity Too Large\n          | \"414\"  ; <a href=\"#section-10.4.15\">Section 10.4.15</a>: Request-URI Too Large\n          | \"415\"  ; <a href=\"#section-10.4.16\">Section 10.4.16</a>: Unsupported Media Type\n          | \"416\"  ; <a href=\"#section-10.4.17\">Section 10.4.17</a>: Requested range not satisfiable\n          | \"417\"  ; <a href=\"#section-10.4.18\">Section 10.4.18</a>: Expectation Failed\n          | \"500\"  ; <a href=\"#section-10.5.1\">Section 10.5.1</a>: Internal Server Error\n          | \"501\"  ; <a href=\"#section-10.5.2\">Section 10.5.2</a>: Not Implemented\n          | \"502\"  ; <a href=\"#section-10.5.3\">Section 10.5.3</a>: Bad Gateway\n          | \"503\"  ; <a href=\"#section-10.5.4\">Section 10.5.4</a>: Service Unavailable\n          | \"504\"  ; <a href=\"#section-10.5.5\">Section 10.5.5</a>: Gateway Time-out\n          | \"505\"  ; <a href=\"#section-10.5.6\">Section 10.5.6</a>: HTTP Version not supported\n          | extension-code\n\n      extension-code = 3DIGIT\n      Reason-Phrase  = *&lt;TEXT, excluding CR, LF&gt;\n\n   HTTP status codes are extensible. HTTP applications are not required\n   to understand the meaning of all registered status codes, though such\n   understanding is obviously desirable. However, applications MUST\n   understand the class of any status code, as indicated by the first\n   digit, and treat any unrecognized response as being equivalent to the\n   x00 status code of that class, with the exception that an\n   unrecognized response MUST NOT be cached. For example, if an\n   unrecognized status code of 431 is received by the client, it can\n   safely assume that there was something wrong with its request and\n   treat the response as if it had received a 400 status code. In such\n   cases, user agents SHOULD present to the user the entity returned\n   with the response, since that entity is likely to include human-\n   readable information which will explain the unusual status.\n\n<h3 class=\"h3\" id=\"section-6.2\">6.2 Response Header Fields</h3>\n   The response-header fields allow the server to pass additional\n   information about the response which cannot be placed in the Status-\n   Line. These header fields give information about the server and about\n   further access to the resource identified by the Request-URI.\n\n       response-header = Accept-Ranges           ; <a href=\"#section-14.5\">Section 14.5</a>\n                       | Age                     ; <a href=\"#section-14.6\">Section 14.6</a>\n                       | ETag                    ; <a href=\"#section-14.19\">Section 14.19</a>\n                       | Location                ; <a href=\"#section-14.30\">Section 14.30</a>\n                       | Proxy-Authenticate      ; <a href=\"#section-14.33\">Section 14.33</a>\n\n                       | Retry-After             ; <a href=\"#section-14.37\">Section 14.37</a>\n                       | Server                  ; <a href=\"#section-14.38\">Section 14.38</a>\n                       | Vary                    ; <a href=\"#section-14.44\">Section 14.44</a>\n                       | WWW-Authenticate        ; <a href=\"#section-14.47\">Section 14.47</a>\n\n   Response-header field names can be extended reliably only in\n   combination with a change in the protocol version. However, new or\n   experimental header fields MAY be given the semantics of response-\n   header fields if all parties in the communication recognize them to\n   be response-header fields. Unrecognized header fields are treated as\n   entity-header fields.\n\n<h2 class=\"h2\" id=\"section-7\">7 Entity</h2>\n   Request and Response messages MAY transfer an entity if not otherwise\n   restricted by the request method or response status code. An entity\n   consists of entity-header fields and an entity-body, although some\n   responses will only include the entity-headers.\n\n   In this section, both sender and recipient refer to either the client\n   or the server, depending on who sends and who receives the entity.\n\n<h3 class=\"h3\" id=\"section-7.1\">7.1 Entity Header Fields</h3>\n   Entity-header fields define metainformation about the entity-body or,\n   if no body is present, about the resource identified by the request.\n   Some of this metainformation is OPTIONAL; some might be REQUIRED by\n   portions of this specification.\n\n       entity-header  = Allow                    ; <a href=\"#section-14.7\">Section 14.7</a>\n                      | Content-Encoding         ; <a href=\"#section-14.11\">Section 14.11</a>\n                      | Content-Language         ; <a href=\"#section-14.12\">Section 14.12</a>\n                      | Content-Length           ; <a href=\"#section-14.13\">Section 14.13</a>\n                      | Content-Location         ; <a href=\"#section-14.14\">Section 14.14</a>\n                      | Content-MD5              ; <a href=\"#section-14.15\">Section 14.15</a>\n                      | Content-Range            ; <a href=\"#section-14.16\">Section 14.16</a>\n                      | Content-Type             ; <a href=\"#section-14.17\">Section 14.17</a>\n                      | Expires                  ; <a href=\"#section-14.21\">Section 14.21</a>\n                      | Last-Modified            ; <a href=\"#section-14.29\">Section 14.29</a>\n                      | extension-header\n\n       extension-header = message-header\n\n   The extension-header mechanism allows additional entity-header fields\n   to be defined without changing the protocol, but these fields cannot\n   be assumed to be recognizable by the recipient. Unrecognized header\n   fields SHOULD be ignored by the recipient and MUST be forwarded by\n   transparent proxies.\n\n<h3 class=\"h3\" id=\"section-7.2\">7.2 Entity Body</h3>\n   The entity-body (if any) sent with an HTTP request or response is in\n   a format and encoding defined by the entity-header fields.\n\n       entity-body    = *OCTET\n\n   An entity-body is only present in a message when a message-body is\n   present, as described in <a href=\"#section-4.3\">section 4.3</a>. The entity-body is obtained\n   from the message-body by decoding any Transfer-Encoding that might\n   have been applied to ensure safe and proper transfer of the message.\n\n<h4 class=\"h4\" id=\"section-7.2.1\">7.2.1 Type</h4>\n   When an entity-body is included with a message, the data type of that\n   body is determined via the header fields Content-Type and Content-\n   Encoding. These define a two-layer, ordered encoding model:\n\n       entity-body := Content-Encoding( Content-Type( data ) )\n\n   Content-Type specifies the media type of the underlying data.\n   Content-Encoding may be used to indicate any additional content\n   codings applied to the data, usually for the purpose of data\n   compression, that are a property of the requested resource. There is\n   no default encoding.\n\n   Any HTTP/1.1 message containing an entity-body SHOULD include a\n   Content-Type header field defining the media type of that body. If\n   and only if the media type is not given by a Content-Type field, the\n   recipient MAY attempt to guess the media type via inspection of its\n   content and/or the name extension(s) of the URI used to identify the\n   resource. If the media type remains unknown, the recipient SHOULD\n   treat it as type \"application/octet-stream\".\n\n<h4 class=\"h4\" id=\"section-7.2.2\">7.2.2 Entity Length</h4>\n   The entity-length of a message is the length of the message-body\n   before any transfer-codings have been applied. <a href=\"#section-4.4\">Section 4.4</a> defines\n   how the transfer-length of a message-body is determined.\n\n<h2 class=\"h2\" id=\"section-8\">8 Connections</h2>\n<h3 class=\"h3\" id=\"section-8.1\">8.1 Persistent Connections</h3>\n<h4 class=\"h4\" id=\"section-8.1.1\">8.1.1 Purpose</h4>\n   Prior to persistent connections, a separate TCP connection was\n   established to fetch each URL, increasing the load on HTTP servers\n   and causing congestion on the Internet. The use of inline images and\n   other associated data often require a client to make multiple\n   requests of the same server in a short amount of time. Analysis of\n   these performance problems and results from a prototype\n   implementation are available [<a href=\"#ref-26\" title='\"Improving HTTP Latency\"'>26</a>] [<a href=\"#ref-30\" title='\"Analysis of HTTP Performance Problems,\"'>30</a>]. Implementation experience and\n   measurements of actual HTTP/1.1 (<a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a>) implementations show good\n   results [<a href=\"#ref-39\" title='\"Network Performance Effects of HTTP/1.1, CSS1, and PNG,\"'>39</a>]. Alternatives have also been explored, for example,\n   T/TCP [<a href=\"#ref-27\" title='\"Analysis of HTTP Performance\"'>27</a>].\n\n   Persistent HTTP connections have a number of advantages:\n\n      - By opening and closing fewer TCP connections, CPU time is saved\n        in routers and hosts (clients, servers, proxies, gateways,\n        tunnels, or caches), and memory used for TCP protocol control\n        blocks can be saved in hosts.\n\n      - HTTP requests and responses can be pipelined on a connection.\n        Pipelining allows a client to make multiple requests without\n        waiting for each response, allowing a single TCP connection to\n        be used much more efficiently, with much lower elapsed time.\n\n      - Network congestion is reduced by reducing the number of packets\n        caused by TCP opens, and by allowing TCP sufficient time to\n        determine the congestion state of the network.\n\n      - Latency on subsequent requests is reduced since there is no time\n        spent in TCP's connection opening handshake.\n\n      - HTTP can evolve more gracefully, since errors can be reported\n        without the penalty of closing the TCP connection. Clients using\n        future versions of HTTP might optimistically try a new feature,\n        but if communicating with an older server, retry with old\n        semantics after an error is reported.\n\n   HTTP implementations SHOULD implement persistent connections.\n\n<h4 class=\"h4\" id=\"section-8.1.2\">8.1.2 Overall Operation</h4>\n   A significant difference between HTTP/1.1 and earlier versions of\n   HTTP is that persistent connections are the default behavior of any\n   HTTP connection. That is, unless otherwise indicated, the client\n   SHOULD assume that the server will maintain a persistent connection,\n   even after error responses from the server.\n\n   Persistent connections provide a mechanism by which a client and a\n   server can signal the close of a TCP connection. This signaling takes\n   place using the Connection header field (<a href=\"#section-14.10\">section 14.10</a>). Once a close\n   has been signaled, the client MUST NOT send any more requests on that\n   connection.\n\n<h5 class=\"h5\" id=\"section-8.1.2.1\">8.1.2.1 Negotiation</h5>\n   An HTTP/1.1 server MAY assume that a HTTP/1.1 client intends to\n   maintain a persistent connection unless a Connection header including\n   the connection-token \"close\" was sent in the request. If the server\n   chooses to close the connection immediately after sending the\n   response, it SHOULD send a Connection header including the\n   connection-token close.\n\n   An HTTP/1.1 client MAY expect a connection to remain open, but would\n   decide to keep it open based on whether the response from a server\n   contains a Connection header with the connection-token close. In case\n   the client does not want to maintain a connection for more than that\n   request, it SHOULD send a Connection header including the\n   connection-token close.\n\n   If either the client or the server sends the close token in the\n   Connection header, that request becomes the last one for the\n   connection.\n\n   Clients and servers SHOULD NOT assume that a persistent connection is\n   maintained for HTTP versions less than 1.1 unless it is explicitly\n   signaled. See <a href=\"#section-19.6.2\">section 19.6.2</a> for more information on backward\n   compatibility with HTTP/1.0 clients.\n\n   In order to remain persistent, all messages on the connection MUST\n   have a self-defined message length (i.e., one not defined by closure\n   of the connection), as described in <a href=\"#section-4.4\">section 4.4</a>.\n\n<h5 class=\"h5\" id=\"section-8.1.2.2\">8.1.2.2 Pipelining</h5>\n   A client that supports persistent connections MAY \"pipeline\" its\n   requests (i.e., send multiple requests without waiting for each\n   response). A server MUST send its responses to those requests in the\n   same order that the requests were received.\n\n   Clients which assume persistent connections and pipeline immediately\n   after connection establishment SHOULD be prepared to retry their\n   connection if the first pipelined attempt fails. If a client does\n   such a retry, it MUST NOT pipeline before it knows the connection is\n   persistent. Clients MUST also be prepared to resend their requests if\n   the server closes the connection before sending all of the\n   corresponding responses.\n\n   Clients SHOULD NOT pipeline requests using non-idempotent methods or\n   non-idempotent sequences of methods (see <a href=\"#section-9.1.2\">section 9.1.2</a>). Otherwise, a\n   premature termination of the transport connection could lead to\n   indeterminate results. A client wishing to send a non-idempotent\n   request SHOULD wait to send that request until it has received the\n   response status for the previous request.\n\n<h4 class=\"h4\" id=\"section-8.1.3\">8.1.3 Proxy Servers</h4>\n   It is especially important that proxies correctly implement the\n   properties of the Connection header field as specified in <a href=\"#section-14.10\">section</a>\n   <a href=\"#section-14.10\">14.10</a>.\n\n   The proxy server MUST signal persistent connections separately with\n   its clients and the origin servers (or other proxy servers) that it\n   connects to. Each persistent connection applies to only one transport\n   link.\n\n   A proxy server MUST NOT establish a HTTP/1.1 persistent connection\n   with an HTTP/1.0 client (but see <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a> [<a href=\"#ref-33\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>33</a>] for information and\n   discussion of the problems with the Keep-Alive header implemented by\n   many HTTP/1.0 clients).\n\n<h4 class=\"h4\" id=\"section-8.1.4\">8.1.4 Practical Considerations</h4>\n   Servers will usually have some time-out value beyond which they will\n   no longer maintain an inactive connection. Proxy servers might make\n   this a higher value since it is likely that the client will be making\n   more connections through the same server. The use of persistent\n   connections places no requirements on the length (or existence) of\n   this time-out for either the client or the server.\n\n   When a client or server wishes to time-out it SHOULD issue a graceful\n   close on the transport connection. Clients and servers SHOULD both\n   constantly watch for the other side of the transport close, and\n   respond to it as appropriate. If a client or server does not detect\n   the other side's close promptly it could cause unnecessary resource\n   drain on the network.\n\n   A client, server, or proxy MAY close the transport connection at any\n   time. For example, a client might have started to send a new request\n   at the same time that the server has decided to close the \"idle\"\n   connection. From the server's point of view, the connection is being\n   closed while it was idle, but from the client's point of view, a\n   request is in progress.\n\n   This means that clients, servers, and proxies MUST be able to recover\n   from asynchronous close events. Client software SHOULD reopen the\n   transport connection and retransmit the aborted sequence of requests\n   without user interaction so long as the request sequence is\n   idempotent (see <a href=\"#section-9.1.2\">section 9.1.2</a>). Non-idempotent methods or sequences\n   MUST NOT be automatically retried, although user agents MAY offer a\n   human operator the choice of retrying the request(s). Confirmation by\n   user-agent software with semantic understanding of the application\n   MAY substitute for user confirmation. The automatic retry SHOULD NOT\n   be repeated if the second sequence of requests fails.\n\n   Servers SHOULD always respond to at least one request per connection,\n   if at all possible. Servers SHOULD NOT close a connection in the\n   middle of transmitting a response, unless a network or client failure\n   is suspected.\n\n   Clients that use persistent connections SHOULD limit the number of\n   simultaneous connections that they maintain to a given server. A\n   single-user client SHOULD NOT maintain more than 2 connections with\n   any server or proxy. A proxy SHOULD use up to 2*N connections to\n   another server or proxy, where N is the number of simultaneously\n   active users. These guidelines are intended to improve HTTP response\n   times and avoid congestion.\n\n<h3 class=\"h3\" id=\"section-8.2\">8.2 Message Transmission Requirements</h3>\n<h4 class=\"h4\" id=\"section-8.2.1\">8.2.1 Persistent Connections and Flow Control</h4>\n   HTTP/1.1 servers SHOULD maintain persistent connections and use TCP's\n   flow control mechanisms to resolve temporary overloads, rather than\n   terminating connections with the expectation that clients will retry.\n   The latter technique can exacerbate network congestion.\n\n<h4 class=\"h4\" id=\"section-8.2.2\">8.2.2 Monitoring Connections for Error Status Messages</h4>\n   An HTTP/1.1 (or later) client sending a message-body SHOULD monitor\n   the network connection for an error status while it is transmitting\n   the request. If the client sees an error status, it SHOULD\n   immediately cease transmitting the body. If the body is being sent\n   using a \"chunked\" encoding (<a href=\"#section-3.6\">section 3.6</a>), a zero length chunk and\n   empty trailer MAY be used to prematurely mark the end of the message.\n   If the body was preceded by a Content-Length header, the client MUST\n   close the connection.\n\n<h4 class=\"h4\" id=\"section-8.2.3\">8.2.3 Use of the 100 (Continue) Status</h4>\n   The purpose of the 100 (Continue) status (see <a href=\"#section-10.1.1\">section 10.1.1</a>) is to\n   allow a client that is sending a request message with a request body\n   to determine if the origin server is willing to accept the request\n   (based on the request headers) before the client sends the request\n   body. In some cases, it might either be inappropriate or highly\n   inefficient for the client to send the body if the server will reject\n   the message without looking at the body.\n\n   Requirements for HTTP/1.1 clients:\n\n      - If a client will wait for a 100 (Continue) response before\n        sending the request body, it MUST send an Expect request-header\n        field (<a href=\"#section-14.20\">section 14.20</a>) with the \"100-continue\" expectation.\n\n      - A client MUST NOT send an Expect request-header field (<a href=\"#section-14.20\">section</a>\n        <a href=\"#section-14.20\">14.20</a>) with the \"100-continue\" expectation if it does not intend\n        to send a request body.\n\n   Because of the presence of older implementations, the protocol allows\n   ambiguous situations in which a client may send \"Expect: 100-\n   continue\" without receiving either a 417 (Expectation Failed) status\n   or a 100 (Continue) status. Therefore, when a client sends this\n   header field to an origin server (possibly via a proxy) from which it\n   has never seen a 100 (Continue) status, the client SHOULD NOT wait\n   for an indefinite period before sending the request body.\n\n   Requirements for HTTP/1.1 origin servers:\n\n      - Upon receiving a request which includes an Expect request-header\n        field with the \"100-continue\" expectation, an origin server MUST\n        either respond with 100 (Continue) status and continue to read\n        from the input stream, or respond with a final status code. The\n        origin server MUST NOT wait for the request body before sending\n        the 100 (Continue) response. If it responds with a final status\n        code, it MAY close the transport connection or it MAY continue\n\n        to read and discard the rest of the request.  It MUST NOT\n        perform the requested method if it returns a final status code.\n\n      - An origin server SHOULD NOT send a 100 (Continue) response if\n        the request message does not include an Expect request-header\n        field with the \"100-continue\" expectation, and MUST NOT send a\n        100 (Continue) response if such a request comes from an HTTP/1.0\n        (or earlier) client. There is an exception to this rule: for\n        compatibility with <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a>, a server MAY send a 100 (Continue)\n        status in response to an HTTP/1.1 PUT or POST request that does\n        not include an Expect request-header field with the \"100-\n        continue\" expectation. This exception, the purpose of which is\n        to minimize any client processing delays associated with an\n        undeclared wait for 100 (Continue) status, applies only to\n        HTTP/1.1 requests, and not to requests with any other HTTP-\n        version value.\n\n      - An origin server MAY omit a 100 (Continue) response if it has\n        already received some or all of the request body for the\n        corresponding request.\n\n      - An origin server that sends a 100 (Continue) response MUST\n        ultimately send a final status code, once the request body is\n        received and processed, unless it terminates the transport\n        connection prematurely.\n\n      - If an origin server receives a request that does not include an\n        Expect request-header field with the \"100-continue\" expectation,\n        the request includes a request body, and the server responds\n        with a final status code before reading the entire request body\n        from the transport connection, then the server SHOULD NOT close\n        the transport connection until it has read the entire request,\n        or until the client closes the connection. Otherwise, the client\n        might not reliably receive the response message. However, this\n        requirement is not be construed as preventing a server from\n        defending itself against denial-of-service attacks, or from\n        badly broken client implementations.\n\n   Requirements for HTTP/1.1 proxies:\n\n      - If a proxy receives a request that includes an Expect request-\n        header field with the \"100-continue\" expectation, and the proxy\n        either knows that the next-hop server complies with HTTP/1.1 or\n        higher, or does not know the HTTP version of the next-hop\n        server, it MUST forward the request, including the Expect header\n        field.\n\n      - If the proxy knows that the version of the next-hop server is\n        HTTP/1.0 or lower, it MUST NOT forward the request, and it MUST\n        respond with a 417 (Expectation Failed) status.\n\n      - Proxies SHOULD maintain a cache recording the HTTP version\n        numbers received from recently-referenced next-hop servers.\n\n      - A proxy MUST NOT forward a 100 (Continue) response if the\n        request message was received from an HTTP/1.0 (or earlier)\n        client and did not include an Expect request-header field with\n        the \"100-continue\" expectation. This requirement overrides the\n        general rule for forwarding of 1xx responses (see <a href=\"#section-10.1\">section 10.1</a>).\n\n<h4 class=\"h4\" id=\"section-8.2.4\">8.2.4 Client Behavior if Server Prematurely Closes Connection</h4>\n   If an HTTP/1.1 client sends a request which includes a request body,\n   but which does not include an Expect request-header field with the\n   \"100-continue\" expectation, and if the client is not directly\n   connected to an HTTP/1.1 origin server, and if the client sees the\n   connection close before receiving any status from the server, the\n   client SHOULD retry the request.  If the client does retry this\n   request, it MAY use the following \"binary exponential backoff\"\n   algorithm to be assured of obtaining a reliable response:\n\n      1. Initiate a new connection to the server\n\n      2. Transmit the request-headers\n\n      3. Initialize a variable R to the estimated round-trip time to the\n         server (e.g., based on the time it took to establish the\n         connection), or to a constant value of 5 seconds if the round-\n         trip time is not available.\n\n      4. Compute T = R * (2**N), where N is the number of previous\n         retries of this request.\n\n      5. Wait either for an error response from the server, or for T\n         seconds (whichever comes first)\n\n      6. If no error response is received, after T seconds transmit the\n         body of the request.\n\n      7. If client sees that the connection is closed prematurely,\n         repeat from step 1 until the request is accepted, an error\n         response is received, or the user becomes impatient and\n         terminates the retry process.\n\n   If at any point an error status is received, the client\n\n      - SHOULD NOT continue and\n\n      - SHOULD close the connection if it has not completed sending the\n        request message.\n\n<h2 class=\"h2\" id=\"section-9\">9 Method Definitions</h2>\n   The set of common methods for HTTP/1.1 is defined below. Although\n   this set can be expanded, additional methods cannot be assumed to\n   share the same semantics for separately extended clients and servers.\n\n   The Host request-header field (<a href=\"#section-14.23\">section 14.23</a>) MUST accompany all\n   HTTP/1.1 requests.\n\n<h3 class=\"h3\" id=\"section-9.1\">9.1 Safe and Idempotent Methods</h3>\n<h4 class=\"h4\" id=\"section-9.1.1\">9.1.1 Safe Methods</h4>\n   Implementors should be aware that the software represents the user in\n   their interactions over the Internet, and should be careful to allow\n   the user to be aware of any actions they might take which may have an\n   unexpected significance to themselves or others.\n\n   In particular, the convention has been established that the GET and\n   HEAD methods SHOULD NOT have the significance of taking an action\n   other than retrieval. These methods ought to be considered \"safe\".\n   This allows user agents to represent other methods, such as POST, PUT\n   and DELETE, in a special way, so that the user is made aware of the\n   fact that a possibly unsafe action is being requested.\n\n   Naturally, it is not possible to ensure that the server does not\n   generate side-effects as a result of performing a GET request; in\n   fact, some dynamic resources consider that a feature. The important\n   distinction here is that the user did not request the side-effects,\n   so therefore cannot be held accountable for them.\n\n<h4 class=\"h4\" id=\"section-9.1.2\">9.1.2 Idempotent Methods</h4>\n   Methods can also have the property of \"idempotence\" in that (aside\n   from error or expiration issues) the side-effects of N &gt; 0 identical\n   requests is the same as for a single request. The methods GET, HEAD,\n   PUT and DELETE share this property. Also, the methods OPTIONS and\n   TRACE SHOULD NOT have side effects, and so are inherently idempotent.\n\n   However, it is possible that a sequence of several requests is non-\n   idempotent, even if all of the methods executed in that sequence are\n   idempotent. (A sequence is idempotent if a single execution of the\n   entire sequence always yields a result that is not changed by a\n   reexecution of all, or part, of that sequence.) For example, a\n   sequence is non-idempotent if its result depends on a value that is\n   later modified in the same sequence.\n\n   A sequence that never has side effects is idempotent, by definition\n   (provided that no concurrent operations are being executed on the\n   same set of resources).\n\n<h3 class=\"h3\" id=\"section-9.2\">9.2 OPTIONS</h3>\n   The OPTIONS method represents a request for information about the\n   communication options available on the request/response chain\n   identified by the Request-URI. This method allows the client to\n   determine the options and/or requirements associated with a resource,\n   or the capabilities of a server, without implying a resource action\n   or initiating a resource retrieval.\n\n   Responses to this method are not cacheable.\n\n   If the OPTIONS request includes an entity-body (as indicated by the\n   presence of Content-Length or Transfer-Encoding), then the media type\n   MUST be indicated by a Content-Type field. Although this\n   specification does not define any use for such a body, future\n   extensions to HTTP might use the OPTIONS body to make more detailed\n   queries on the server. A server that does not support such an\n   extension MAY discard the request body.\n\n   If the Request-URI is an asterisk (\"*\"), the OPTIONS request is\n   intended to apply to the server in general rather than to a specific\n   resource. Since a server's communication options typically depend on\n   the resource, the \"*\" request is only useful as a \"ping\" or \"no-op\"\n   type of method; it does nothing beyond allowing the client to test\n   the capabilities of the server. For example, this can be used to test\n   a proxy for HTTP/1.1 compliance (or lack thereof).\n\n   If the Request-URI is not an asterisk, the OPTIONS request applies\n   only to the options that are available when communicating with that\n   resource.\n\n   A 200 response SHOULD include any header fields that indicate\n   optional features implemented by the server and applicable to that\n   resource (e.g., Allow), possibly including extensions not defined by\n   this specification. The response body, if any, SHOULD also include\n   information about the communication options. The format for such a\n\n   body is not defined by this specification, but might be defined by\n   future extensions to HTTP. Content negotiation MAY be used to select\n   the appropriate response format. If no response body is included, the\n   response MUST include a Content-Length field with a field-value of\n   \"0\".\n\n   The Max-Forwards request-header field MAY be used to target a\n   specific proxy in the request chain. When a proxy receives an OPTIONS\n   request on an absoluteURI for which request forwarding is permitted,\n   the proxy MUST check for a Max-Forwards field. If the Max-Forwards\n   field-value is zero (\"0\"), the proxy MUST NOT forward the message;\n   instead, the proxy SHOULD respond with its own communication options.\n   If the Max-Forwards field-value is an integer greater than zero, the\n   proxy MUST decrement the field-value when it forwards the request. If\n   no Max-Forwards field is present in the request, then the forwarded\n   request MUST NOT include a Max-Forwards field.\n\n<h3 class=\"h3\" id=\"section-9.3\">9.3 GET</h3>\n   The GET method means retrieve whatever information (in the form of an\n   entity) is identified by the Request-URI. If the Request-URI refers\n   to a data-producing process, it is the produced data which shall be\n   returned as the entity in the response and not the source text of the\n   process, unless that text happens to be the output of the process.\n\n   The semantics of the GET method change to a \"conditional GET\" if the\n   request message includes an If-Modified-Since, If-Unmodified-Since,\n   If-Match, If-None-Match, or If-Range header field. A conditional GET\n   method requests that the entity be transferred only under the\n   circumstances described by the conditional header field(s). The\n   conditional GET method is intended to reduce unnecessary network\n   usage by allowing cached entities to be refreshed without requiring\n   multiple requests or transferring data already held by the client.\n\n   The semantics of the GET method change to a \"partial GET\" if the\n   request message includes a Range header field. A partial GET requests\n   that only part of the entity be transferred, as described in <a href=\"#section-14.35\">section</a>\n   <a href=\"#section-14.35\">14.35</a>. The partial GET method is intended to reduce unnecessary\n   network usage by allowing partially-retrieved entities to be\n   completed without transferring data already held by the client.\n\n   The response to a GET request is cacheable if and only if it meets\n   the requirements for HTTP caching described in <a href=\"#section-13\">section 13</a>.\n\n   See <a href=\"#section-15.1.3\">section 15.1.3</a> for security considerations when used for forms.\n\n<h3 class=\"h3\" id=\"section-9.4\">9.4 HEAD</h3>\n   The HEAD method is identical to GET except that the server MUST NOT\n   return a message-body in the response. The metainformation contained\n   in the HTTP headers in response to a HEAD request SHOULD be identical\n   to the information sent in response to a GET request. This method can\n   be used for obtaining metainformation about the entity implied by the\n   request without transferring the entity-body itself. This method is\n   often used for testing hypertext links for validity, accessibility,\n   and recent modification.\n\n   The response to a HEAD request MAY be cacheable in the sense that the\n   information contained in the response MAY be used to update a\n   previously cached entity from that resource. If the new field values\n   indicate that the cached entity differs from the current entity (as\n   would be indicated by a change in Content-Length, Content-MD5, ETag\n   or Last-Modified), then the cache MUST treat the cache entry as\n   stale.\n\n<h3 class=\"h3\" id=\"section-9.5\">9.5 POST</h3>\n   The POST method is used to request that the origin server accept the\n   entity enclosed in the request as a new subordinate of the resource\n   identified by the Request-URI in the Request-Line. POST is designed\n   to allow a uniform method to cover the following functions:\n\n      - Annotation of existing resources;\n\n      - Posting a message to a bulletin board, newsgroup, mailing list,\n        or similar group of articles;\n\n      - Providing a block of data, such as the result of submitting a\n        form, to a data-handling process;\n\n      - Extending a database through an append operation.\n\n   The actual function performed by the POST method is determined by the\n   server and is usually dependent on the Request-URI. The posted entity\n   is subordinate to that URI in the same way that a file is subordinate\n   to a directory containing it, a news article is subordinate to a\n   newsgroup to which it is posted, or a record is subordinate to a\n   database.\n\n   The action performed by the POST method might not result in a\n   resource that can be identified by a URI. In this case, either 200\n   (OK) or 204 (No Content) is the appropriate response status,\n   depending on whether or not the response includes an entity that\n   describes the result.\n\n   If a resource has been created on the origin server, the response\n   SHOULD be 201 (Created) and contain an entity which describes the\n   status of the request and refers to the new resource, and a Location\n   header (see <a href=\"#section-14.30\">section 14.30</a>).\n\n   Responses to this method are not cacheable, unless the response\n   includes appropriate Cache-Control or Expires header fields. However,\n   the 303 (See Other) response can be used to direct the user agent to\n   retrieve a cacheable resource.\n\n   POST requests MUST obey the message transmission requirements set out\n   in <a href=\"#section-8.2\">section 8.2</a>.\n\n   See <a href=\"#section-15.1.3\">section 15.1.3</a> for security considerations.\n\n<h3 class=\"h3\" id=\"section-9.6\">9.6 PUT</h3>\n   The PUT method requests that the enclosed entity be stored under the\n   supplied Request-URI. If the Request-URI refers to an already\n   existing resource, the enclosed entity SHOULD be considered as a\n   modified version of the one residing on the origin server. If the\n   Request-URI does not point to an existing resource, and that URI is\n   capable of being defined as a new resource by the requesting user\n   agent, the origin server can create the resource with that URI. If a\n   new resource is created, the origin server MUST inform the user agent\n   via the 201 (Created) response. If an existing resource is modified,\n   either the 200 (OK) or 204 (No Content) response codes SHOULD be sent\n   to indicate successful completion of the request. If the resource\n   could not be created or modified with the Request-URI, an appropriate\n   error response SHOULD be given that reflects the nature of the\n   problem. The recipient of the entity MUST NOT ignore any Content-*\n   (e.g. Content-Range) headers that it does not understand or implement\n   and MUST return a 501 (Not Implemented) response in such cases.\n\n   If the request passes through a cache and the Request-URI identifies\n   one or more currently cached entities, those entries SHOULD be\n   treated as stale. Responses to this method are not cacheable.\n\n   The fundamental difference between the POST and PUT requests is\n   reflected in the different meaning of the Request-URI. The URI in a\n   POST request identifies the resource that will handle the enclosed\n   entity. That resource might be a data-accepting process, a gateway to\n   some other protocol, or a separate entity that accepts annotations.\n   In contrast, the URI in a PUT request identifies the entity enclosed\n   with the request -- the user agent knows what URI is intended and the\n   server MUST NOT attempt to apply the request to some other resource.\n   If the server desires that the request be applied to a different URI,\n\n   it MUST send a 301 (Moved Permanently) response; the user agent MAY\n   then make its own decision regarding whether or not to redirect the\n   request.\n\n   A single resource MAY be identified by many different URIs. For\n   example, an article might have a URI for identifying \"the current\n   version\" which is separate from the URI identifying each particular\n   version. In this case, a PUT request on a general URI might result in\n   several other URIs being defined by the origin server.\n\n   HTTP/1.1 does not define how a PUT method affects the state of an\n   origin server.\n\n   PUT requests MUST obey the message transmission requirements set out\n   in <a href=\"#section-8.2\">section 8.2</a>.\n\n   Unless otherwise specified for a particular entity-header, the\n   entity-headers in the PUT request SHOULD be applied to the resource\n   created or modified by the PUT.\n\n<h3 class=\"h3\" id=\"section-9.7\">9.7 DELETE</h3>\n   The DELETE method requests that the origin server delete the resource\n   identified by the Request-URI. This method MAY be overridden by human\n   intervention (or other means) on the origin server. The client cannot\n   be guaranteed that the operation has been carried out, even if the\n   status code returned from the origin server indicates that the action\n   has been completed successfully. However, the server SHOULD NOT\n   indicate success unless, at the time the response is given, it\n   intends to delete the resource or move it to an inaccessible\n   location.\n\n   A successful response SHOULD be 200 (OK) if the response includes an\n   entity describing the status, 202 (Accepted) if the action has not\n   yet been enacted, or 204 (No Content) if the action has been enacted\n   but the response does not include an entity.\n\n   If the request passes through a cache and the Request-URI identifies\n   one or more currently cached entities, those entries SHOULD be\n   treated as stale. Responses to this method are not cacheable.\n\n<h3 class=\"h3\" id=\"section-9.8\">9.8 TRACE</h3>\n   The TRACE method is used to invoke a remote, application-layer loop-\n   back of the request message. The final recipient of the request\n   SHOULD reflect the message received back to the client as the\n   entity-body of a 200 (OK) response. The final recipient is either the\n\n   origin server or the first proxy or gateway to receive a Max-Forwards\n   value of zero (0) in the request (see <a href=\"#section-14.31\">section 14.31</a>). A TRACE request\n   MUST NOT include an entity.\n\n   TRACE allows the client to see what is being received at the other\n   end of the request chain and use that data for testing or diagnostic\n   information. The value of the Via header field (<a href=\"#section-14.45\">section 14.45</a>) is of\n   particular interest, since it acts as a trace of the request chain.\n   Use of the Max-Forwards header field allows the client to limit the\n   length of the request chain, which is useful for testing a chain of\n   proxies forwarding messages in an infinite loop.\n\n   If the request is valid, the response SHOULD contain the entire\n   request message in the entity-body, with a Content-Type of\n   \"message/http\". Responses to this method MUST NOT be cached.\n\n<h3 class=\"h3\" id=\"section-9.9\">9.9 CONNECT</h3>\n   This specification reserves the method name CONNECT for use with a\n   proxy that can dynamically switch to being a tunnel (e.g. SSL\n   tunneling [<a href=\"#ref-44\" title='\"Tunneling TCP based protocols through Web proxy servers,\"'>44</a>]).\n\n<h2 class=\"h2\" id=\"section-10\">10 Status Code Definitions</h2>\n   Each Status-Code is described below, including a description of which\n   method(s) it can follow and any metainformation required in the\n   response.\n\n<h3 class=\"h3\" id=\"section-10.1\">10.1 Informational 1xx</h3>\n   This class of status code indicates a provisional response,\n   consisting only of the Status-Line and optional headers, and is\n   terminated by an empty line. There are no required headers for this\n   class of status code. Since HTTP/1.0 did not define any 1xx status\n   codes, servers MUST NOT send a 1xx response to an HTTP/1.0 client\n   except under experimental conditions.\n\n   A client MUST be prepared to accept one or more 1xx status responses\n   prior to a regular response, even if the client does not expect a 100\n   (Continue) status message. Unexpected 1xx status responses MAY be\n   ignored by a user agent.\n\n   Proxies MUST forward 1xx responses, unless the connection between the\n   proxy and its client has been closed, or unless the proxy itself\n   requested the generation of the 1xx response. (For example, if a\n\n   proxy adds a \"Expect: 100-continue\" field when it forwards a request,\n   then it need not forward the corresponding 100 (Continue)\n   response(s).)\n\n<h4 class=\"h4\" id=\"section-10.1.1\">10.1.1 100 Continue</h4>\n   The client SHOULD continue with its request. This interim response is\n   used to inform the client that the initial part of the request has\n   been received and has not yet been rejected by the server. The client\n   SHOULD continue by sending the remainder of the request or, if the\n   request has already been completed, ignore this response. The server\n   MUST send a final response after the request has been completed. See\n   <a href=\"#section-8.2.3\">section 8.2.3</a> for detailed discussion of the use and handling of this\n   status code.\n\n<h4 class=\"h4\" id=\"section-10.1.2\">10.1.2 101 Switching Protocols</h4>\n   The server understands and is willing to comply with the client's\n   request, via the Upgrade message header field (<a href=\"#section-14.42\">section 14.42</a>), for a\n   change in the application protocol being used on this connection. The\n   server will switch protocols to those defined by the response's\n   Upgrade header field immediately after the empty line which\n   terminates the 101 response.\n\n   The protocol SHOULD be switched only when it is advantageous to do\n   so. For example, switching to a newer version of HTTP is advantageous\n   over older versions, and switching to a real-time, synchronous\n   protocol might be advantageous when delivering resources that use\n   such features.\n\n<h3 class=\"h3\" id=\"section-10.2\">10.2 Successful 2xx</h3>\n   This class of status code indicates that the client's request was\n   successfully received, understood, and accepted.\n\n<h4 class=\"h4\" id=\"section-10.2.1\">10.2.1 200 OK</h4>\n   The request has succeeded. The information returned with the response\n   is dependent on the method used in the request, for example:\n\n   GET    an entity corresponding to the requested resource is sent in\n          the response;\n\n   HEAD   the entity-header fields corresponding to the requested\n          resource are sent in the response without any message-body;\n\n   POST   an entity describing or containing the result of the action;\n\n   TRACE  an entity containing the request message as received by the\n          end server.\n\n<h4 class=\"h4\" id=\"section-10.2.2\">10.2.2 201 Created</h4>\n   The request has been fulfilled and resulted in a new resource being\n   created. The newly created resource can be referenced by the URI(s)\n   returned in the entity of the response, with the most specific URI\n   for the resource given by a Location header field. The response\n   SHOULD include an entity containing a list of resource\n   characteristics and location(s) from which the user or user agent can\n   choose the one most appropriate. The entity format is specified by\n   the media type given in the Content-Type header field. The origin\n   server MUST create the resource before returning the 201 status code.\n   If the action cannot be carried out immediately, the server SHOULD\n   respond with 202 (Accepted) response instead.\n\n   A 201 response MAY contain an ETag response header field indicating\n   the current value of the entity tag for the requested variant just\n   created, see <a href=\"#section-14.19\">section 14.19</a>.\n\n<h4 class=\"h4\" id=\"section-10.2.3\">10.2.3 202 Accepted</h4>\n   The request has been accepted for processing, but the processing has\n   not been completed.  The request might or might not eventually be\n   acted upon, as it might be disallowed when processing actually takes\n   place. There is no facility for re-sending a status code from an\n   asynchronous operation such as this.\n\n   The 202 response is intentionally non-committal. Its purpose is to\n   allow a server to accept a request for some other process (perhaps a\n   batch-oriented process that is only run once per day) without\n   requiring that the user agent's connection to the server persist\n   until the process is completed. The entity returned with this\n   response SHOULD include an indication of the request's current status\n   and either a pointer to a status monitor or some estimate of when the\n   user can expect the request to be fulfilled.\n\n<h4 class=\"h4\" id=\"section-10.2.4\">10.2.4 203 Non-Authoritative Information</h4>\n   The returned metainformation in the entity-header is not the\n   definitive set as available from the origin server, but is gathered\n   from a local or a third-party copy. The set presented MAY be a subset\n   or superset of the original version. For example, including local\n   annotation information about the resource might result in a superset\n   of the metainformation known by the origin server. Use of this\n   response code is not required and is only appropriate when the\n   response would otherwise be 200 (OK).\n\n<h4 class=\"h4\" id=\"section-10.2.5\">10.2.5 204 No Content</h4>\n   The server has fulfilled the request but does not need to return an\n   entity-body, and might want to return updated metainformation. The\n   response MAY include new or updated metainformation in the form of\n   entity-headers, which if present SHOULD be associated with the\n   requested variant.\n\n   If the client is a user agent, it SHOULD NOT change its document view\n   from that which caused the request to be sent. This response is\n   primarily intended to allow input for actions to take place without\n   causing a change to the user agent's active document view, although\n   any new or updated metainformation SHOULD be applied to the document\n   currently in the user agent's active view.\n\n   The 204 response MUST NOT include a message-body, and thus is always\n   terminated by the first empty line after the header fields.\n\n<h4 class=\"h4\" id=\"section-10.2.6\">10.2.6 205 Reset Content</h4>\n   The server has fulfilled the request and the user agent SHOULD reset\n   the document view which caused the request to be sent. This response\n   is primarily intended to allow input for actions to take place via\n   user input, followed by a clearing of the form in which the input is\n   given so that the user can easily initiate another input action. The\n   response MUST NOT include an entity.\n\n<h4 class=\"h4\" id=\"section-10.2.7\">10.2.7 206 Partial Content</h4>\n   The server has fulfilled the partial GET request for the resource.\n   The request MUST have included a Range header field (<a href=\"#section-14.35\">section 14.35</a>)\n   indicating the desired range, and MAY have included an If-Range\n   header field (<a href=\"#section-14.27\">section 14.27</a>) to make the request conditional.\n\n   The response MUST include the following header fields:\n\n      - Either a Content-Range header field (<a href=\"#section-14.16\">section 14.16</a>) indicating\n        the range included with this response, or a multipart/byteranges\n        Content-Type including Content-Range fields for each part. If a\n        Content-Length header field is present in the response, its\n        value MUST match the actual number of OCTETs transmitted in the\n        message-body.\n\n      - Date\n\n      - ETag and/or Content-Location, if the header would have been sent\n        in a 200 response to the same request\n\n      - Expires, Cache-Control, and/or Vary, if the field-value might\n        differ from that sent in any previous response for the same\n        variant\n\n   If the 206 response is the result of an If-Range request that used a\n   strong cache validator (see <a href=\"#section-13.3.3\">section 13.3.3</a>), the response SHOULD NOT\n   include other entity-headers. If the response is the result of an\n   If-Range request that used a weak validator, the response MUST NOT\n   include other entity-headers; this prevents inconsistencies between\n   cached entity-bodies and updated headers. Otherwise, the response\n   MUST include all of the entity-headers that would have been returned\n   with a 200 (OK) response to the same request.\n\n   A cache MUST NOT combine a 206 response with other previously cached\n   content if the ETag or Last-Modified headers do not match exactly,\n   see 13.5.4.\n\n   A cache that does not support the Range and Content-Range headers\n   MUST NOT cache 206 (Partial) responses.\n\n<h3 class=\"h3\" id=\"section-10.3\">10.3 Redirection 3xx</h3>\n   This class of status code indicates that further action needs to be\n   taken by the user agent in order to fulfill the request.  The action\n   required MAY be carried out by the user agent without interaction\n   with the user if and only if the method used in the second request is\n   GET or HEAD. A client SHOULD detect infinite redirection loops, since\n   such loops generate network traffic for each redirection.\n\n      Note: previous versions of this specification recommended a\n      maximum of five redirections. Content developers should be aware\n      that there might be clients that implement such a fixed\n      limitation.\n\n<h4 class=\"h4\" id=\"section-10.3.1\">10.3.1 300 Multiple Choices</h4>\n   The requested resource corresponds to any one of a set of\n   representations, each with its own specific location, and agent-\n   driven negotiation information (<a href=\"#section-12\">section 12</a>) is being provided so that\n   the user (or user agent) can select a preferred representation and\n   redirect its request to that location.\n\n   Unless it was a HEAD request, the response SHOULD include an entity\n   containing a list of resource characteristics and location(s) from\n   which the user or user agent can choose the one most appropriate. The\n   entity format is specified by the media type given in the Content-\n   Type header field. Depending upon the format and the capabilities of\n\n   the user agent, selection of the most appropriate choice MAY be\n   performed automatically. However, this specification does not define\n   any standard for such automatic selection.\n\n   If the server has a preferred choice of representation, it SHOULD\n   include the specific URI for that representation in the Location\n   field; user agents MAY use the Location field value for automatic\n   redirection. This response is cacheable unless indicated otherwise.\n\n<h4 class=\"h4\" id=\"section-10.3.2\">10.3.2 301 Moved Permanently</h4>\n   The requested resource has been assigned a new permanent URI and any\n   future references to this resource SHOULD use one of the returned\n   URIs.  Clients with link editing capabilities ought to automatically\n   re-link references to the Request-URI to one or more of the new\n   references returned by the server, where possible. This response is\n   cacheable unless indicated otherwise.\n\n   The new permanent URI SHOULD be given by the Location field in the\n   response. Unless the request method was HEAD, the entity of the\n   response SHOULD contain a short hypertext note with a hyperlink to\n   the new URI(s).\n\n   If the 301 status code is received in response to a request other\n   than GET or HEAD, the user agent MUST NOT automatically redirect the\n   request unless it can be confirmed by the user, since this might\n   change the conditions under which the request was issued.\n\n      Note: When automatically redirecting a POST request after\n      receiving a 301 status code, some existing HTTP/1.0 user agents\n      will erroneously change it into a GET request.\n\n<h4 class=\"h4\" id=\"section-10.3.3\">10.3.3 302 Found</h4>\n   The requested resource resides temporarily under a different URI.\n   Since the redirection might be altered on occasion, the client SHOULD\n   continue to use the Request-URI for future requests.  This response\n   is only cacheable if indicated by a Cache-Control or Expires header\n   field.\n\n   The temporary URI SHOULD be given by the Location field in the\n   response. Unless the request method was HEAD, the entity of the\n   response SHOULD contain a short hypertext note with a hyperlink to\n   the new URI(s).\n\n   If the 302 status code is received in response to a request other\n   than GET or HEAD, the user agent MUST NOT automatically redirect the\n   request unless it can be confirmed by the user, since this might\n   change the conditions under which the request was issued.\n\n      Note: <a href=\"https://tools.ietf.org/html/rfc1945\">RFC 1945</a> and <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a> specify that the client is not allowed\n      to change the method on the redirected request.  However, most\n      existing user agent implementations treat 302 as if it were a 303\n      response, performing a GET on the Location field-value regardless\n      of the original request method. The status codes 303 and 307 have\n      been added for servers that wish to make unambiguously clear which\n      kind of reaction is expected of the client.\n\n<h4 class=\"h4\" id=\"section-10.3.4\">10.3.4 303 See Other</h4>\n   The response to the request can be found under a different URI and\n   SHOULD be retrieved using a GET method on that resource. This method\n   exists primarily to allow the output of a POST-activated script to\n   redirect the user agent to a selected resource. The new URI is not a\n   substitute reference for the originally requested resource. The 303\n   response MUST NOT be cached, but the response to the second\n   (redirected) request might be cacheable.\n\n   The different URI SHOULD be given by the Location field in the\n   response. Unless the request method was HEAD, the entity of the\n   response SHOULD contain a short hypertext note with a hyperlink to\n   the new URI(s).\n\n      Note: Many pre-HTTP/1.1 user agents do not understand the 303\n      status. When interoperability with such clients is a concern, the\n      302 status code may be used instead, since most user agents react\n      to a 302 response as described here for 303.\n\n<h4 class=\"h4\" id=\"section-10.3.5\">10.3.5 304 Not Modified</h4>\n   If the client has performed a conditional GET request and access is\n   allowed, but the document has not been modified, the server SHOULD\n   respond with this status code. The 304 response MUST NOT contain a\n   message-body, and thus is always terminated by the first empty line\n   after the header fields.\n\n   The response MUST include the following header fields:\n\n      - Date, unless its omission is required by <a href=\"#section-14.18.1\">section 14.18.1</a>\n\n   If a clockless origin server obeys these rules, and proxies and\n   clients add their own Date to any response received without one (as\n   already specified by <a href=\"https://tools.ietf.org/html/rfc2068#section-14.19\">[RFC 2068], section 14.19</a>), caches will operate\n   correctly.\n\n      - ETag and/or Content-Location, if the header would have been sent\n        in a 200 response to the same request\n\n      - Expires, Cache-Control, and/or Vary, if the field-value might\n        differ from that sent in any previous response for the same\n        variant\n\n   If the conditional GET used a strong cache validator (see <a href=\"#section-13.3.3\">section</a>\n   <a href=\"#section-13.3.3\">13.3.3</a>), the response SHOULD NOT include other entity-headers.\n   Otherwise (i.e., the conditional GET used a weak validator), the\n   response MUST NOT include other entity-headers; this prevents\n   inconsistencies between cached entity-bodies and updated headers.\n\n   If a 304 response indicates an entity not currently cached, then the\n   cache MUST disregard the response and repeat the request without the\n   conditional.\n\n   If a cache uses a received 304 response to update a cache entry, the\n   cache MUST update the entry to reflect any new field values given in\n   the response.\n\n<h4 class=\"h4\" id=\"section-10.3.6\">10.3.6 305 Use Proxy</h4>\n   The requested resource MUST be accessed through the proxy given by\n   the Location field. The Location field gives the URI of the proxy.\n   The recipient is expected to repeat this single request via the\n   proxy. 305 responses MUST only be generated by origin servers.\n\n      Note: <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a> was not clear that 305 was intended to redirect a\n      single request, and to be generated by origin servers only.  Not\n      observing these limitations has significant security consequences.\n\n<h4 class=\"h4\" id=\"section-10.3.7\">10.3.7 306 (Unused)</h4>\n   The 306 status code was used in a previous version of the\n   specification, is no longer used, and the code is reserved.\n\n<h4 class=\"h4\" id=\"section-10.3.8\">10.3.8 307 Temporary Redirect</h4>\n   The requested resource resides temporarily under a different URI.\n   Since the redirection MAY be altered on occasion, the client SHOULD\n   continue to use the Request-URI for future requests.  This response\n   is only cacheable if indicated by a Cache-Control or Expires header\n   field.\n\n   The temporary URI SHOULD be given by the Location field in the\n   response. Unless the request method was HEAD, the entity of the\n   response SHOULD contain a short hypertext note with a hyperlink to\n   the new URI(s) , since many pre-HTTP/1.1 user agents do not\n   understand the 307 status. Therefore, the note SHOULD contain the\n   information necessary for a user to repeat the original request on\n   the new URI.\n\n   If the 307 status code is received in response to a request other\n   than GET or HEAD, the user agent MUST NOT automatically redirect the\n   request unless it can be confirmed by the user, since this might\n   change the conditions under which the request was issued.\n\n<h3 class=\"h3\" id=\"section-10.4\">10.4 Client Error 4xx</h3>\n   The 4xx class of status code is intended for cases in which the\n   client seems to have erred. Except when responding to a HEAD request,\n   the server SHOULD include an entity containing an explanation of the\n   error situation, and whether it is a temporary or permanent\n   condition. These status codes are applicable to any request method.\n   User agents SHOULD display any included entity to the user.\n\n   If the client is sending data, a server implementation using TCP\n   SHOULD be careful to ensure that the client acknowledges receipt of\n   the packet(s) containing the response, before the server closes the\n   input connection. If the client continues sending data to the server\n   after the close, the server's TCP stack will send a reset packet to\n   the client, which may erase the client's unacknowledged input buffers\n   before they can be read and interpreted by the HTTP application.\n\n<h4 class=\"h4\" id=\"section-10.4.1\">10.4.1 400 Bad Request</h4>\n   The request could not be understood by the server due to malformed\n   syntax. The client SHOULD NOT repeat the request without\n   modifications.\n\n<h4 class=\"h4\" id=\"section-10.4.2\">10.4.2 401 Unauthorized</h4>\n   The request requires user authentication. The response MUST include a\n   WWW-Authenticate header field (<a href=\"#section-14.47\">section 14.47</a>) containing a challenge\n   applicable to the requested resource. The client MAY repeat the\n   request with a suitable Authorization header field (<a href=\"#section-14.8\">section 14.8</a>). If\n   the request already included Authorization credentials, then the 401\n   response indicates that authorization has been refused for those\n   credentials. If the 401 response contains the same challenge as the\n   prior response, and the user agent has already attempted\n   authentication at least once, then the user SHOULD be presented the\n   entity that was given in the response, since that entity might\n   include relevant diagnostic information. HTTP access authentication\n   is explained in \"HTTP Authentication: Basic and Digest Access\n   Authentication\" [<a href=\"#ref-43\" title='\"HTTP Authentication: Basic and Digest Access Authentication\"'>43</a>].\n\n<h4 class=\"h4\" id=\"section-10.4.3\">10.4.3 402 Payment Required</h4>\n   This code is reserved for future use.\n\n<h4 class=\"h4\" id=\"section-10.4.4\">10.4.4 403 Forbidden</h4>\n   The server understood the request, but is refusing to fulfill it.\n   Authorization will not help and the request SHOULD NOT be repeated.\n   If the request method was not HEAD and the server wishes to make\n   public why the request has not been fulfilled, it SHOULD describe the\n   reason for the refusal in the entity.  If the server does not wish to\n   make this information available to the client, the status code 404\n   (Not Found) can be used instead.\n\n<h4 class=\"h4\" id=\"section-10.4.5\">10.4.5 404 Not Found</h4>\n   The server has not found anything matching the Request-URI. No\n   indication is given of whether the condition is temporary or\n   permanent. The 410 (Gone) status code SHOULD be used if the server\n   knows, through some internally configurable mechanism, that an old\n   resource is permanently unavailable and has no forwarding address.\n   This status code is commonly used when the server does not wish to\n   reveal exactly why the request has been refused, or when no other\n   response is applicable.\n\n<h4 class=\"h4\" id=\"section-10.4.6\">10.4.6 405 Method Not Allowed</h4>\n   The method specified in the Request-Line is not allowed for the\n   resource identified by the Request-URI. The response MUST include an\n   Allow header containing a list of valid methods for the requested\n   resource.\n\n<h4 class=\"h4\" id=\"section-10.4.7\">10.4.7 406 Not Acceptable</h4>\n   The resource identified by the request is only capable of generating\n   response entities which have content characteristics not acceptable\n   according to the accept headers sent in the request.\n\n   Unless it was a HEAD request, the response SHOULD include an entity\n   containing a list of available entity characteristics and location(s)\n   from which the user or user agent can choose the one most\n   appropriate. The entity format is specified by the media type given\n   in the Content-Type header field. Depending upon the format and the\n   capabilities of the user agent, selection of the most appropriate\n   choice MAY be performed automatically. However, this specification\n   does not define any standard for such automatic selection.\n\n      Note: HTTP/1.1 servers are allowed to return responses which are\n      not acceptable according to the accept headers sent in the\n      request. In some cases, this may even be preferable to sending a\n      406 response. User agents are encouraged to inspect the headers of\n      an incoming response to determine if it is acceptable.\n\n   If the response could be unacceptable, a user agent SHOULD\n   temporarily stop receipt of more data and query the user for a\n   decision on further actions.\n\n<h4 class=\"h4\" id=\"section-10.4.8\">10.4.8 407 Proxy Authentication Required</h4>\n   This code is similar to 401 (Unauthorized), but indicates that the\n   client must first authenticate itself with the proxy. The proxy MUST\n   return a Proxy-Authenticate header field (<a href=\"#section-14.33\">section 14.33</a>) containing a\n   challenge applicable to the proxy for the requested resource. The\n   client MAY repeat the request with a suitable Proxy-Authorization\n   header field (<a href=\"#section-14.34\">section 14.34</a>). HTTP access authentication is explained\n   in \"HTTP Authentication: Basic and Digest Access Authentication\"\n   [<a href=\"#ref-43\" title='\"HTTP Authentication: Basic and Digest Access Authentication\"'>43</a>].\n\n<h4 class=\"h4\" id=\"section-10.4.9\">10.4.9 408 Request Timeout</h4>\n   The client did not produce a request within the time that the server\n   was prepared to wait. The client MAY repeat the request without\n   modifications at any later time.\n\n<h4 class=\"h4\" id=\"section-10.4.10\">10.4.10 409 Conflict</h4>\n   The request could not be completed due to a conflict with the current\n   state of the resource. This code is only allowed in situations where\n   it is expected that the user might be able to resolve the conflict\n   and resubmit the request. The response body SHOULD include enough\n\n   information for the user to recognize the source of the conflict.\n   Ideally, the response entity would include enough information for the\n   user or user agent to fix the problem; however, that might not be\n   possible and is not required.\n\n   Conflicts are most likely to occur in response to a PUT request. For\n   example, if versioning were being used and the entity being PUT\n   included changes to a resource which conflict with those made by an\n   earlier (third-party) request, the server might use the 409 response\n   to indicate that it can't complete the request. In this case, the\n   response entity would likely contain a list of the differences\n   between the two versions in a format defined by the response\n   Content-Type.\n\n<h4 class=\"h4\" id=\"section-10.4.11\">10.4.11 410 Gone</h4>\n   The requested resource is no longer available at the server and no\n   forwarding address is known. This condition is expected to be\n   considered permanent. Clients with link editing capabilities SHOULD\n   delete references to the Request-URI after user approval. If the\n   server does not know, or has no facility to determine, whether or not\n   the condition is permanent, the status code 404 (Not Found) SHOULD be\n   used instead. This response is cacheable unless indicated otherwise.\n\n   The 410 response is primarily intended to assist the task of web\n   maintenance by notifying the recipient that the resource is\n   intentionally unavailable and that the server owners desire that\n   remote links to that resource be removed. Such an event is common for\n   limited-time, promotional services and for resources belonging to\n   individuals no longer working at the server's site. It is not\n   necessary to mark all permanently unavailable resources as \"gone\" or\n   to keep the mark for any length of time -- that is left to the\n   discretion of the server owner.\n\n<h4 class=\"h4\" id=\"section-10.4.12\">10.4.12 411 Length Required</h4>\n   The server refuses to accept the request without a defined Content-\n   Length. The client MAY repeat the request if it adds a valid\n   Content-Length header field containing the length of the message-body\n   in the request message.\n\n<h4 class=\"h4\" id=\"section-10.4.13\">10.4.13 412 Precondition Failed</h4>\n   The precondition given in one or more of the request-header fields\n   evaluated to false when it was tested on the server. This response\n   code allows the client to place preconditions on the current resource\n   metainformation (header field data) and thus prevent the requested\n   method from being applied to a resource other than the one intended.\n\n<h4 class=\"h4\" id=\"section-10.4.14\">10.4.14 413 Request Entity Too Large</h4>\n   The server is refusing to process a request because the request\n   entity is larger than the server is willing or able to process. The\n   server MAY close the connection to prevent the client from continuing\n   the request.\n\n   If the condition is temporary, the server SHOULD include a Retry-\n   After header field to indicate that it is temporary and after what\n   time the client MAY try again.\n\n<h4 class=\"h4\" id=\"section-10.4.15\">10.4.15 414 Request-URI Too Long</h4>\n   The server is refusing to service the request because the Request-URI\n   is longer than the server is willing to interpret. This rare\n   condition is only likely to occur when a client has improperly\n   converted a POST request to a GET request with long query\n   information, when the client has descended into a URI \"black hole\" of\n   redirection (e.g., a redirected URI prefix that points to a suffix of\n   itself), or when the server is under attack by a client attempting to\n   exploit security holes present in some servers using fixed-length\n   buffers for reading or manipulating the Request-URI.\n\n<h4 class=\"h4\" id=\"section-10.4.16\">10.4.16 415 Unsupported Media Type</h4>\n   The server is refusing to service the request because the entity of\n   the request is in a format not supported by the requested resource\n   for the requested method.\n\n<h4 class=\"h4\" id=\"section-10.4.17\">10.4.17 416 Requested Range Not Satisfiable</h4>\n   A server SHOULD return a response with this status code if a request\n   included a Range request-header field (<a href=\"#section-14.35\">section 14.35</a>), and none of\n   the range-specifier values in this field overlap the current extent\n   of the selected resource, and the request did not include an If-Range\n   request-header field. (For byte-ranges, this means that the first-\n   byte-pos of all of the byte-range-spec values were greater than the\n   current length of the selected resource.)\n\n   When this status code is returned for a byte-range request, the\n   response SHOULD include a Content-Range entity-header field\n   specifying the current length of the selected resource (see <a href=\"#section-14.16\">section</a>\n   <a href=\"#section-14.16\">14.16</a>). This response MUST NOT use the multipart/byteranges content-\n   type.\n\n<h4 class=\"h4\" id=\"section-10.4.18\">10.4.18 417 Expectation Failed</h4>\n   The expectation given in an Expect request-header field (see <a href=\"#section-14.20\">section</a>\n   <a href=\"#section-14.20\">14.20</a>) could not be met by this server, or, if the server is a proxy,\n   the server has unambiguous evidence that the request could not be met\n   by the next-hop server.\n\n<h3 class=\"h3\" id=\"section-10.5\">10.5 Server Error 5xx</h3>\n   Response status codes beginning with the digit \"5\" indicate cases in\n   which the server is aware that it has erred or is incapable of\n   performing the request. Except when responding to a HEAD request, the\n   server SHOULD include an entity containing an explanation of the\n   error situation, and whether it is a temporary or permanent\n   condition. User agents SHOULD display any included entity to the\n   user. These response codes are applicable to any request method.\n\n<h4 class=\"h4\" id=\"section-10.5.1\">10.5.1 500 Internal Server Error</h4>\n   The server encountered an unexpected condition which prevented it\n   from fulfilling the request.\n\n<h4 class=\"h4\" id=\"section-10.5.2\">10.5.2 501 Not Implemented</h4>\n   The server does not support the functionality required to fulfill the\n   request. This is the appropriate response when the server does not\n   recognize the request method and is not capable of supporting it for\n   any resource.\n\n<h4 class=\"h4\" id=\"section-10.5.3\">10.5.3 502 Bad Gateway</h4>\n   The server, while acting as a gateway or proxy, received an invalid\n   response from the upstream server it accessed in attempting to\n   fulfill the request.\n\n<h4 class=\"h4\" id=\"section-10.5.4\">10.5.4 503 Service Unavailable</h4>\n   The server is currently unable to handle the request due to a\n   temporary overloading or maintenance of the server. The implication\n   is that this is a temporary condition which will be alleviated after\n   some delay. If known, the length of the delay MAY be indicated in a\n   Retry-After header. If no Retry-After is given, the client SHOULD\n   handle the response as it would for a 500 response.\n\n      Note: The existence of the 503 status code does not imply that a\n      server must use it when becoming overloaded. Some servers may wish\n      to simply refuse the connection.\n\n<h4 class=\"h4\" id=\"section-10.5.5\">10.5.5 504 Gateway Timeout</h4>\n   The server, while acting as a gateway or proxy, did not receive a\n   timely response from the upstream server specified by the URI (e.g.\n   HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed\n   to access in attempting to complete the request.\n\n      Note: Note to implementors: some deployed proxies are known to\n      return 400 or 500 when DNS lookups time out.\n\n<h4 class=\"h4\" id=\"section-10.5.6\">10.5.6 505 HTTP Version Not Supported</h4>\n   The server does not support, or refuses to support, the HTTP protocol\n   version that was used in the request message. The server is\n   indicating that it is unable or unwilling to complete the request\n   using the same major version as the client, as described in <a href=\"#section-3.1\">section</a>\n   <a href=\"#section-3.1\">3.1</a>, other than with this error message. The response SHOULD contain\n   an entity describing why that version is not supported and what other\n   protocols are supported by that server.\n\n<h2 class=\"h2\" id=\"section-11\">11 Access Authentication</h2>\n   HTTP provides several OPTIONAL challenge-response authentication\n   mechanisms which can be used by a server to challenge a client\n   request and by a client to provide authentication information. The\n   general framework for access authentication, and the specification of\n   \"basic\" and \"digest\" authentication, are specified in \"HTTP\n   Authentication: Basic and Digest Access Authentication\" [<a href=\"#ref-43\" title='\"HTTP Authentication: Basic and Digest Access Authentication\"'>43</a>]. This\n   specification adopts the definitions of \"challenge\" and \"credentials\"\n   from that specification.\n\n<h2 class=\"h2\" id=\"section-12\">12 Content Negotiation</h2>\n   Most HTTP responses include an entity which contains information for\n   interpretation by a human user. Naturally, it is desirable to supply\n   the user with the \"best available\" entity corresponding to the\n   request. Unfortunately for servers and caches, not all users have the\n   same preferences for what is \"best,\" and not all user agents are\n   equally capable of rendering all entity types. For that reason, HTTP\n   has provisions for several mechanisms for \"content negotiation\" --\n   the process of selecting the best representation for a given response\n   when there are multiple representations available.\n\n      Note: This is not called \"format negotiation\" because the\n      alternate representations may be of the same media type, but use\n      different capabilities of that type, be in different languages,\n      etc.\n\n   Any response containing an entity-body MAY be subject to negotiation,\n   including error responses.\n\n   There are two kinds of content negotiation which are possible in\n   HTTP: server-driven and agent-driven negotiation. These two kinds of\n   negotiation are orthogonal and thus may be used separately or in\n   combination. One method of combination, referred to as transparent\n   negotiation, occurs when a cache uses the agent-driven negotiation\n   information provided by the origin server in order to provide\n   server-driven negotiation for subsequent requests.\n\n<h3 class=\"h3\" id=\"section-12.1\">12.1 Server-driven Negotiation</h3>\n   If the selection of the best representation for a response is made by\n   an algorithm located at the server, it is called server-driven\n   negotiation. Selection is based on the available representations of\n   the response (the dimensions over which it can vary; e.g. language,\n   content-coding, etc.) and the contents of particular header fields in\n   the request message or on other information pertaining to the request\n   (such as the network address of the client).\n\n   Server-driven negotiation is advantageous when the algorithm for\n   selecting from among the available representations is difficult to\n   describe to the user agent, or when the server desires to send its\n   \"best guess\" to the client along with the first response (hoping to\n   avoid the round-trip delay of a subsequent request if the \"best\n   guess\" is good enough for the user). In order to improve the server's\n   guess, the user agent MAY include request header fields (Accept,\n   Accept-Language, Accept-Encoding, etc.) which describe its\n   preferences for such a response.\n\n   Server-driven negotiation has disadvantages:\n\n      1. It is impossible for the server to accurately determine what\n         might be \"best\" for any given user, since that would require\n         complete knowledge of both the capabilities of the user agent\n         and the intended use for the response (e.g., does the user want\n         to view it on screen or print it on paper?).\n\n      2. Having the user agent describe its capabilities in every\n         request can be both very inefficient (given that only a small\n         percentage of responses have multiple representations) and a\n         potential violation of the user's privacy.\n\n      3. It complicates the implementation of an origin server and the\n         algorithms for generating responses to a request.\n\n      4. It may limit a public cache's ability to use the same response\n         for multiple user's requests.\n\n   HTTP/1.1 includes the following request-header fields for enabling\n   server-driven negotiation through description of user agent\n   capabilities and user preferences: Accept (<a href=\"#section-14.1\">section 14.1</a>), Accept-\n   Charset (<a href=\"#section-14.2\">section 14.2</a>), Accept-Encoding (<a href=\"#section-14.3\">section 14.3</a>), Accept-\n   Language (<a href=\"#section-14.4\">section 14.4</a>), and User-Agent (<a href=\"#section-14.43\">section 14.43</a>). However, an\n   origin server is not limited to these dimensions and MAY vary the\n   response based on any aspect of the request, including information\n   outside the request-header fields or within extension header fields\n   not defined by this specification.\n\n   The Vary  header field can be used to express the parameters the\n   server uses to select a representation that is subject to server-\n   driven negotiation. See <a href=\"#section-13.6\">section 13.6</a> for use of the Vary header field\n   by caches and <a href=\"#section-14.44\">section 14.44</a> for use of the Vary header field by\n   servers.\n\n<h3 class=\"h3\" id=\"section-12.2\">12.2 Agent-driven Negotiation</h3>\n   With agent-driven negotiation, selection of the best representation\n   for a response is performed by the user agent after receiving an\n   initial response from the origin server. Selection is based on a list\n   of the available representations of the response included within the\n   header fields or entity-body of the initial response, with each\n   representation identified by its own URI. Selection from among the\n   representations may be performed automatically (if the user agent is\n   capable of doing so) or manually by the user selecting from a\n   generated (possibly hypertext) menu.\n\n   Agent-driven negotiation is advantageous when the response would vary\n   over commonly-used dimensions (such as type, language, or encoding),\n   when the origin server is unable to determine a user agent's\n   capabilities from examining the request, and generally when public\n   caches are used to distribute server load and reduce network usage.\n\n   Agent-driven negotiation suffers from the disadvantage of needing a\n   second request to obtain the best alternate representation. This\n   second request is only efficient when caching is used. In addition,\n   this specification does not define any mechanism for supporting\n   automatic selection, though it also does not prevent any such\n   mechanism from being developed as an extension and used within\n   HTTP/1.1.\n\n   HTTP/1.1 defines the 300 (Multiple Choices) and 406 (Not Acceptable)\n   status codes for enabling agent-driven negotiation when the server is\n   unwilling or unable to provide a varying response using server-driven\n   negotiation.\n\n<h3 class=\"h3\" id=\"section-12.3\">12.3 Transparent Negotiation</h3>\n   Transparent negotiation is a combination of both server-driven and\n   agent-driven negotiation. When a cache is supplied with a form of the\n   list of available representations of the response (as in agent-driven\n   negotiation) and the dimensions of variance are completely understood\n   by the cache, then the cache becomes capable of performing server-\n   driven negotiation on behalf of the origin server for subsequent\n   requests on that resource.\n\n   Transparent negotiation has the advantage of distributing the\n   negotiation work that would otherwise be required of the origin\n   server and also removing the second request delay of agent-driven\n   negotiation when the cache is able to correctly guess the right\n   response.\n\n   This specification does not define any mechanism for transparent\n   negotiation, though it also does not prevent any such mechanism from\n   being developed as an extension that could be used within HTTP/1.1.\n\n<h2 class=\"h2\" id=\"section-13\">13 Caching in HTTP</h2>\n   HTTP is typically used for distributed information systems, where\n   performance can be improved by the use of response caches. The\n   HTTP/1.1 protocol includes a number of elements intended to make\n   caching work as well as possible. Because these elements are\n   inextricable from other aspects of the protocol, and because they\n   interact with each other, it is useful to describe the basic caching\n   design of HTTP separately from the detailed descriptions of methods,\n   headers, response codes, etc.\n\n   Caching would be useless if it did not significantly improve\n   performance. The goal of caching in HTTP/1.1 is to eliminate the need\n   to send requests in many cases, and to eliminate the need to send\n   full responses in many other cases. The former reduces the number of\n   network round-trips required for many operations; we use an\n   \"expiration\" mechanism for this purpose (see <a href=\"#section-13.2\">section 13.2</a>). The\n   latter reduces network bandwidth requirements; we use a \"validation\"\n   mechanism for this purpose (see <a href=\"#section-13.3\">section 13.3</a>).\n\n   Requirements for performance, availability, and disconnected\n   operation require us to be able to relax the goal of semantic\n   transparency. The HTTP/1.1 protocol allows origin servers, caches,\n\n   and clients to explicitly reduce transparency when necessary.\n   However, because non-transparent operation may confuse non-expert\n   users, and might be incompatible with certain server applications\n   (such as those for ordering merchandise), the protocol requires that\n   transparency be relaxed\n\n      - only by an explicit protocol-level request when relaxed by\n        client or origin server\n\n      - only with an explicit warning to the end user when relaxed by\n        cache or client\n\n   Therefore, the HTTP/1.1 protocol provides these important elements:\n\n      1. Protocol features that provide full semantic transparency when\n         this is required by all parties.\n\n      2. Protocol features that allow an origin server or user agent to\n         explicitly request and control non-transparent operation.\n\n      3. Protocol features that allow a cache to attach warnings to\n         responses that do not preserve the requested approximation of\n         semantic transparency.\n\n   A basic principle is that it must be possible for the clients to\n   detect any potential relaxation of semantic transparency.\n\n      Note: The server, cache, or client implementor might be faced with\n      design decisions not explicitly discussed in this specification.\n      If a decision might affect semantic transparency, the implementor\n      ought to err on the side of maintaining transparency unless a\n      careful and complete analysis shows significant benefits in\n      breaking transparency.\n\n<h4 class=\"h4\" id=\"section-13.1.1\">13.1.1 Cache Correctness</h4>\n   A correct cache MUST respond to a request with the most up-to-date\n   response held by the cache that is appropriate to the request (see\n   sections <a href=\"#section-13.2.5\">13.2.5</a>, <a href=\"#section-13.2.6\">13.2.6</a>, and <a href=\"#section-13.12\">13.12</a>) which meets one of the following\n   conditions:\n\n      1. It has been checked for equivalence with what the origin server\n         would have returned by revalidating the response with the\n         origin server (<a href=\"#section-13.3\">section 13.3</a>);\n\n      2. It is \"fresh enough\" (see <a href=\"#section-13.2\">section 13.2</a>). In the default case,\n         this means it meets the least restrictive freshness requirement\n         of the client, origin server, and cache (see <a href=\"#section-14.9\">section 14.9</a>); if\n         the origin server so specifies, it is the freshness requirement\n         of the origin server alone.\n\n         If a stored response is not \"fresh enough\" by the most\n         restrictive freshness requirement of both the client and the\n         origin server, in carefully considered circumstances the cache\n         MAY still return the response with the appropriate Warning\n         header (see <a href=\"#section-13.1.5\">section 13.1.5</a> and 14.46), unless such a response\n         is prohibited (e.g., by a \"no-store\" cache-directive, or by a\n         \"no-cache\" cache-request-directive; see <a href=\"#section-14.9\">section 14.9</a>).\n\n      3. It is an appropriate 304 (Not Modified), 305 (Proxy Redirect),\n         or error (4xx or 5xx) response message.\n\n   If the cache can not communicate with the origin server, then a\n   correct cache SHOULD respond as above if the response can be\n   correctly served from the cache; if not it MUST return an error or\n   warning indicating that there was a communication failure.\n\n   If a cache receives a response (either an entire response, or a 304\n   (Not Modified) response) that it would normally forward to the\n   requesting client, and the received response is no longer fresh, the\n   cache SHOULD forward it to the requesting client without adding a new\n   Warning (but without removing any existing Warning headers). A cache\n   SHOULD NOT attempt to revalidate a response simply because that\n   response became stale in transit; this might lead to an infinite\n   loop. A user agent that receives a stale response without a Warning\n   MAY display a warning indication to the user.\n\n<h4 class=\"h4\" id=\"section-13.1.2\">13.1.2 Warnings</h4>\n   Whenever a cache returns a response that is neither first-hand nor\n   \"fresh enough\" (in the sense of condition 2 in <a href=\"#section-13.1.1\">section 13.1.1</a>), it\n   MUST attach a warning to that effect, using a Warning general-header.\n   The Warning header and the currently defined warnings are described\n   in <a href=\"#section-14.46\">section 14.46</a>. The warning allows clients to take appropriate\n   action.\n\n   Warnings MAY be used for other purposes, both cache-related and\n   otherwise. The use of a warning, rather than an error status code,\n   distinguish these responses from true failures.\n\n   Warnings are assigned three digit warn-codes. The first digit\n   indicates whether the Warning MUST or MUST NOT be deleted from a\n   stored cache entry after a successful revalidation:\n\n   1xx  Warnings that describe the freshness or revalidation status of\n     the response, and so MUST be deleted after a successful\n     revalidation. 1XX warn-codes MAY be generated by a cache only when\n     validating a cached entry. It MUST NOT be generated by clients.\n\n   2xx  Warnings that describe some aspect of the entity body or entity\n     headers that is not rectified by a revalidation (for example, a\n     lossy compression of the entity bodies) and which MUST NOT be\n     deleted after a successful revalidation.\n\n   See <a href=\"#section-14.46\">section 14.46</a> for the definitions of the codes themselves.\n\n   HTTP/1.0 caches will cache all Warnings in responses, without\n   deleting the ones in the first category. Warnings in responses that\n   are passed to HTTP/1.0 caches carry an extra warning-date field,\n   which prevents a future HTTP/1.1 recipient from believing an\n   erroneously cached Warning.\n\n   Warnings also carry a warning text. The text MAY be in any\n   appropriate natural language (perhaps based on the client's Accept\n   headers), and include an OPTIONAL indication of what character set is\n   used.\n\n   Multiple warnings MAY be attached to a response (either by the origin\n   server or by a cache), including multiple warnings with the same code\n   number. For example, a server might provide the same warning with\n   texts in both English and Basque.\n\n   When multiple warnings are attached to a response, it might not be\n   practical or reasonable to display all of them to the user. This\n   version of HTTP does not specify strict priority rules for deciding\n   which warnings to display and in what order, but does suggest some\n   heuristics.\n\n<h4 class=\"h4\" id=\"section-13.1.3\">13.1.3 Cache-control Mechanisms</h4>\n   The basic cache mechanisms in HTTP/1.1 (server-specified expiration\n   times and validators) are implicit directives to caches. In some\n   cases, a server or client might need to provide explicit directives\n   to the HTTP caches. We use the Cache-Control header for this purpose.\n\n   The Cache-Control header allows a client or server to transmit a\n   variety of directives in either requests or responses. These\n   directives typically override the default caching algorithms. As a\n   general rule, if there is any apparent conflict between header\n   values, the most restrictive interpretation is applied (that is, the\n   one that is most likely to preserve semantic transparency). However,\n\n   in some cases, cache-control directives are explicitly specified as\n   weakening the approximation of semantic transparency (for example,\n   \"max-stale\" or \"public\").\n\n   The cache-control directives are described in detail in <a href=\"#section-14.9\">section 14.9</a>.\n\n<h4 class=\"h4\" id=\"section-13.1.4\">13.1.4 Explicit User Agent Warnings</h4>\n   Many user agents make it possible for users to override the basic\n   caching mechanisms. For example, the user agent might allow the user\n   to specify that cached entities (even explicitly stale ones) are\n   never validated. Or the user agent might habitually add \"Cache-\n   Control: max-stale=3600\" to every request. The user agent SHOULD NOT\n   default to either non-transparent behavior, or behavior that results\n   in abnormally ineffective caching, but MAY be explicitly configured\n   to do so by an explicit action of the user.\n\n   If the user has overridden the basic caching mechanisms, the user\n   agent SHOULD explicitly indicate to the user whenever this results in\n   the display of information that might not meet the server's\n   transparency requirements (in particular, if the displayed entity is\n   known to be stale). Since the protocol normally allows the user agent\n   to determine if responses are stale or not, this indication need only\n   be displayed when this actually happens. The indication need not be a\n   dialog box; it could be an icon (for example, a picture of a rotting\n   fish) or some other indicator.\n\n   If the user has overridden the caching mechanisms in a way that would\n   abnormally reduce the effectiveness of caches, the user agent SHOULD\n   continually indicate this state to the user (for example, by a\n   display of a picture of currency in flames) so that the user does not\n   inadvertently consume excess resources or suffer from excessive\n   latency.\n\n<h4 class=\"h4\" id=\"section-13.1.5\">13.1.5 Exceptions to the Rules and Warnings</h4>\n   In some cases, the operator of a cache MAY choose to configure it to\n   return stale responses even when not requested by clients. This\n   decision ought not be made lightly, but may be necessary for reasons\n   of availability or performance, especially when the cache is poorly\n   connected to the origin server. Whenever a cache returns a stale\n   response, it MUST mark it as such (using a Warning header) enabling\n   the client software to alert the user that there might be a potential\n   problem.\n\n   It also allows the user agent to take steps to obtain a first-hand or\n   fresh response. For this reason, a cache SHOULD NOT return a stale\n   response if the client explicitly requests a first-hand or fresh one,\n   unless it is impossible to comply for technical or policy reasons.\n\n<h4 class=\"h4\" id=\"section-13.1.6\">13.1.6 Client-controlled Behavior</h4>\n   While the origin server (and to a lesser extent, intermediate caches,\n   by their contribution to the age of a response) are the primary\n   source of expiration information, in some cases the client might need\n   to control a cache's decision about whether to return a cached\n   response without validating it. Clients do this using several\n   directives of the Cache-Control header.\n\n   A client's request MAY specify the maximum age it is willing to\n   accept of an unvalidated response; specifying a value of zero forces\n   the cache(s) to revalidate all responses. A client MAY also specify\n   the minimum time remaining before a response expires. Both of these\n   options increase constraints on the behavior of caches, and so cannot\n   further relax the cache's approximation of semantic transparency.\n\n   A client MAY also specify that it will accept stale responses, up to\n   some maximum amount of staleness. This loosens the constraints on the\n   caches, and so might violate the origin server's specified\n   constraints on semantic transparency, but might be necessary to\n   support disconnected operation, or high availability in the face of\n   poor connectivity.\n\n<h3 class=\"h3\" id=\"section-13.2\">13.2 Expiration Model</h3>\n<h4 class=\"h4\" id=\"section-13.2.1\">13.2.1 Server-Specified Expiration</h4>\n   HTTP caching works best when caches can entirely avoid making\n   requests to the origin server. The primary mechanism for avoiding\n   requests is for an origin server to provide an explicit expiration\n   time in the future, indicating that a response MAY be used to satisfy\n   subsequent requests. In other words, a cache can return a fresh\n   response without first contacting the server.\n\n   Our expectation is that servers will assign future explicit\n   expiration times to responses in the belief that the entity is not\n   likely to change, in a semantically significant way, before the\n   expiration time is reached. This normally preserves semantic\n   transparency, as long as the server's expiration times are carefully\n   chosen.\n\n   The expiration mechanism applies only to responses taken from a cache\n   and not to first-hand responses forwarded immediately to the\n   requesting client.\n\n   If an origin server wishes to force a semantically transparent cache\n   to validate every request, it MAY assign an explicit expiration time\n   in the past. This means that the response is always stale, and so the\n   cache SHOULD validate it before using it for subsequent requests. See\n   <a href=\"#section-14.9.4\">section 14.9.4</a> for a more restrictive way to force revalidation.\n\n   If an origin server wishes to force any HTTP/1.1 cache, no matter how\n   it is configured, to validate every request, it SHOULD use the \"must-\n   revalidate\" cache-control directive (see <a href=\"#section-14.9\">section 14.9</a>).\n\n   Servers specify explicit expiration times using either the Expires\n   header, or the max-age directive of the Cache-Control header.\n\n   An expiration time cannot be used to force a user agent to refresh\n   its display or reload a resource; its semantics apply only to caching\n   mechanisms, and such mechanisms need only check a resource's\n   expiration status when a new request for that resource is initiated.\n   See <a href=\"#section-13.13\">section 13.13</a> for an explanation of the difference between caches\n   and history mechanisms.\n\n<h4 class=\"h4\" id=\"section-13.2.2\">13.2.2 Heuristic Expiration</h4>\n   Since origin servers do not always provide explicit expiration times,\n   HTTP caches typically assign heuristic expiration times, employing\n   algorithms that use other header values (such as the Last-Modified\n   time) to estimate a plausible expiration time. The HTTP/1.1\n   specification does not provide specific algorithms, but does impose\n   worst-case constraints on their results. Since heuristic expiration\n   times might compromise semantic transparency, they ought to used\n   cautiously, and we encourage origin servers to provide explicit\n   expiration times as much as possible.\n\n<h4 class=\"h4\" id=\"section-13.2.3\">13.2.3 Age Calculations</h4>\n   In order to know if a cached entry is fresh, a cache needs to know if\n   its age exceeds its freshness lifetime. We discuss how to calculate\n   the latter in <a href=\"#section-13.2.4\">section 13.2.4</a>; this section describes how to calculate\n   the age of a response or cache entry.\n\n   In this discussion, we use the term \"now\" to mean \"the current value\n   of the clock at the host performing the calculation.\" Hosts that use\n   HTTP, but especially hosts running origin servers and caches, SHOULD\n   use NTP [<a href=\"#ref-28\" title='\"Network Time Protocol (Version 3) Specification, Implementation and Analysis\"'>28</a>] or some similar protocol to synchronize their clocks to\n   a globally accurate time standard.\n\n   HTTP/1.1 requires origin servers to send a Date header, if possible,\n   with every response, giving the time at which the response was\n   generated (see <a href=\"#section-14.18\">section 14.18</a>). We use the term \"date_value\" to denote\n   the value of the Date header, in a form appropriate for arithmetic\n   operations.\n\n   HTTP/1.1 uses the Age response-header to convey the estimated age of\n   the response message when obtained from a cache. The Age field value\n   is the cache's estimate of the amount of time since the response was\n   generated or revalidated by the origin server.\n\n   In essence, the Age value is the sum of the time that the response\n   has been resident in each of the caches along the path from the\n   origin server, plus the amount of time it has been in transit along\n   network paths.\n\n   We use the term \"age_value\" to denote the value of the Age header, in\n   a form appropriate for arithmetic operations.\n\n   A response's age can be calculated in two entirely independent ways:\n\n      1. now minus date_value, if the local clock is reasonably well\n         synchronized to the origin server's clock. If the result is\n         negative, the result is replaced by zero.\n\n      2. age_value, if all of the caches along the response path\n         implement HTTP/1.1.\n\n   Given that we have two independent ways to compute the age of a\n   response when it is received, we can combine these as\n\n       corrected_received_age = max(now - date_value, age_value)\n\n   and as long as we have either nearly synchronized clocks or all-\n   HTTP/1.1 paths, one gets a reliable (conservative) result.\n\n   Because of network-imposed delays, some significant interval might\n   pass between the time that a server generates a response and the time\n   it is received at the next outbound cache or client. If uncorrected,\n   this delay could result in improperly low ages.\n\n   Because the request that resulted in the returned Age value must have\n   been initiated prior to that Age value's generation, we can correct\n   for delays imposed by the network by recording the time at which the\n   request was initiated. Then, when an Age value is received, it MUST\n   be interpreted relative to the time the request was initiated, not\n\n   the time that the response was received. This algorithm results in\n   conservative behavior no matter how much delay is experienced. So, we\n   compute:\n\n      corrected_initial_age = corrected_received_age\n                            + (now - request_time)\n\n   where \"request_time\" is the time (according to the local clock) when\n   the request that elicited this response was sent.\n\n   Summary of age calculation algorithm, when a cache receives a\n   response:\n\n      /*\n       * age_value\n       *      is the value of Age: header received by the cache with\n       *              this response.\n       * date_value\n       *      is the value of the origin server's Date: header\n       * request_time\n       *      is the (local) time when the cache made the request\n       *              that resulted in this cached response\n       * response_time\n       *      is the (local) time when the cache received the\n       *              response\n       * now\n       *      is the current (local) time\n       */\n\n      apparent_age = max(0, response_time - date_value);\n      corrected_received_age = max(apparent_age, age_value);\n      response_delay = response_time - request_time;\n      corrected_initial_age = corrected_received_age + response_delay;\n      resident_time = now - response_time;\n      current_age   = corrected_initial_age + resident_time;\n\n   The current_age of a cache entry is calculated by adding the amount\n   of time (in seconds) since the cache entry was last validated by the\n   origin server to the corrected_initial_age. When a response is\n   generated from a cache entry, the cache MUST include a single Age\n   header field in the response with a value equal to the cache entry's\n   current_age.\n\n   The presence of an Age header field in a response implies that a\n   response is not first-hand. However, the converse is not true, since\n   the lack of an Age header field in a response does not imply that the\n\n   response is first-hand unless all caches along the request path are\n   compliant with HTTP/1.1 (i.e., older HTTP caches did not implement\n   the Age header field).\n\n<h4 class=\"h4\" id=\"section-13.2.4\">13.2.4 Expiration Calculations</h4>\n   In order to decide whether a response is fresh or stale, we need to\n   compare its freshness lifetime to its age. The age is calculated as\n   described in <a href=\"#section-13.2.3\">section 13.2.3</a>; this section describes how to calculate\n   the freshness lifetime, and to determine if a response has expired.\n   In the discussion below, the values can be represented in any form\n   appropriate for arithmetic operations.\n\n   We use the term \"expires_value\" to denote the value of the Expires\n   header. We use the term \"max_age_value\" to denote an appropriate\n   value of the number of seconds carried by the \"max-age\" directive of\n   the Cache-Control header in a response (see <a href=\"#section-14.9.3\">section 14.9.3</a>).\n\n   The max-age directive takes priority over Expires, so if max-age is\n   present in a response, the calculation is simply:\n\n      freshness_lifetime = max_age_value\n\n   Otherwise, if Expires is present in the response, the calculation is:\n\n      freshness_lifetime = expires_value - date_value\n\n   Note that neither of these calculations is vulnerable to clock skew,\n   since all of the information comes from the origin server.\n\n   If none of Expires, Cache-Control: max-age, or Cache-Control: s-\n   maxage (see <a href=\"#section-14.9.3\">section 14.9.3</a>) appears in the response, and the response\n   does not include other restrictions on caching, the cache MAY compute\n   a freshness lifetime using a heuristic. The cache MUST attach Warning\n   113 to any response whose age is more than 24 hours if such warning\n   has not already been added.\n\n   Also, if the response does have a Last-Modified time, the heuristic\n   expiration value SHOULD be no more than some fraction of the interval\n   since that time. A typical setting of this fraction might be 10%.\n\n   The calculation to determine if a response has expired is quite\n   simple:\n\n      response_is_fresh = (freshness_lifetime &gt; current_age)\n\n<h4 class=\"h4\" id=\"section-13.2.5\">13.2.5 Disambiguating Expiration Values</h4>\n   Because expiration values are assigned optimistically, it is possible\n   for two caches to contain fresh values for the same resource that are\n   different.\n\n   If a client performing a retrieval receives a non-first-hand response\n   for a request that was already fresh in its own cache, and the Date\n   header in its existing cache entry is newer than the Date on the new\n   response, then the client MAY ignore the response. If so, it MAY\n   retry the request with a \"Cache-Control: max-age=0\" directive (see\n   <a href=\"#section-14.9\">section 14.9</a>), to force a check with the origin server.\n\n   If a cache has two fresh responses for the same representation with\n   different validators, it MUST use the one with the more recent Date\n   header. This situation might arise because the cache is pooling\n   responses from other caches, or because a client has asked for a\n   reload or a revalidation of an apparently fresh cache entry.\n\n<h4 class=\"h4\" id=\"section-13.2.6\">13.2.6 Disambiguating Multiple Responses</h4>\n   Because a client might be receiving responses via multiple paths, so\n   that some responses flow through one set of caches and other\n   responses flow through a different set of caches, a client might\n   receive responses in an order different from that in which the origin\n   server sent them. We would like the client to use the most recently\n   generated response, even if older responses are still apparently\n   fresh.\n\n   Neither the entity tag nor the expiration value can impose an\n   ordering on responses, since it is possible that a later response\n   intentionally carries an earlier expiration time. The Date values are\n   ordered to a granularity of one second.\n\n   When a client tries to revalidate a cache entry, and the response it\n   receives contains a Date header that appears to be older than the one\n   for the existing entry, then the client SHOULD repeat the request\n   unconditionally, and include\n\n       Cache-Control: max-age=0\n\n   to force any intermediate caches to validate their copies directly\n   with the origin server, or\n\n       Cache-Control: no-cache\n\n   to force any intermediate caches to obtain a new copy from the origin\n   server.\n\n   If the Date values are equal, then the client MAY use either response\n   (or MAY, if it is being extremely prudent, request a new response).\n   Servers MUST NOT depend on clients being able to choose\n   deterministically between responses generated during the same second,\n   if their expiration times overlap.\n\n<h3 class=\"h3\" id=\"section-13.3\">13.3 Validation Model</h3>\n   When a cache has a stale entry that it would like to use as a\n   response to a client's request, it first has to check with the origin\n   server (or possibly an intermediate cache with a fresh response) to\n   see if its cached entry is still usable. We call this \"validating\"\n   the cache entry. Since we do not want to have to pay the overhead of\n   retransmitting the full response if the cached entry is good, and we\n   do not want to pay the overhead of an extra round trip if the cached\n   entry is invalid, the HTTP/1.1 protocol supports the use of\n   conditional methods.\n\n   The key protocol features for supporting conditional methods are\n   those concerned with \"cache validators.\" When an origin server\n   generates a full response, it attaches some sort of validator to it,\n   which is kept with the cache entry. When a client (user agent or\n   proxy cache) makes a conditional request for a resource for which it\n   has a cache entry, it includes the associated validator in the\n   request.\n\n   The server then checks that validator against the current validator\n   for the entity, and, if they match (see <a href=\"#section-13.3.3\">section 13.3.3</a>), it responds\n   with a special status code (usually, 304 (Not Modified)) and no\n   entity-body. Otherwise, it returns a full response (including\n   entity-body). Thus, we avoid transmitting the full response if the\n   validator matches, and we avoid an extra round trip if it does not\n   match.\n\n   In HTTP/1.1, a conditional request looks exactly the same as a normal\n   request for the same resource, except that it carries a special\n   header (which includes the validator) that implicitly turns the\n   method (usually, GET) into a conditional.\n\n   The protocol includes both positive and negative senses of cache-\n   validating conditions. That is, it is possible to request either that\n   a method be performed if and only if a validator matches or if and\n   only if no validators match.\n\n      Note: a response that lacks a validator may still be cached, and\n      served from cache until it expires, unless this is explicitly\n      prohibited by a cache-control directive. However, a cache cannot\n      do a conditional retrieval if it does not have a validator for the\n      entity, which means it will not be refreshable after it expires.\n\n<h4 class=\"h4\" id=\"section-13.3.1\">13.3.1 Last-Modified Dates</h4>\n   The Last-Modified entity-header field value is often used as a cache\n   validator. In simple terms, a cache entry is considered to be valid\n   if the entity has not been modified since the Last-Modified value.\n\n<h4 class=\"h4\" id=\"section-13.3.2\">13.3.2 Entity Tag Cache Validators</h4>\n   The ETag response-header field value, an entity tag, provides for an\n   \"opaque\" cache validator. This might allow more reliable validation\n   in situations where it is inconvenient to store modification dates,\n   where the one-second resolution of HTTP date values is not\n   sufficient, or where the origin server wishes to avoid certain\n   paradoxes that might arise from the use of modification dates.\n\n   Entity Tags are described in <a href=\"#section-3.11\">section 3.11</a>. The headers used with\n   entity tags are described in sections <a href=\"#section-14.19\">14.19</a>, <a href=\"#section-14.24\">14.24</a>, <a href=\"#section-14.26\">14.26</a> and <a href=\"#section-14.44\">14.44</a>.\n\n<h4 class=\"h4\" id=\"section-13.3.3\">13.3.3 Weak and Strong Validators</h4>\n   Since both origin servers and caches will compare two validators to\n   decide if they represent the same or different entities, one normally\n   would expect that if the entity (the entity-body or any entity-\n   headers) changes in any way, then the associated validator would\n   change as well. If this is true, then we call this validator a\n   \"strong validator.\"\n\n   However, there might be cases when a server prefers to change the\n   validator only on semantically significant changes, and not when\n   insignificant aspects of the entity change. A validator that does not\n   always change when the resource changes is a \"weak validator.\"\n\n   Entity tags are normally \"strong validators,\" but the protocol\n   provides a mechanism to tag an entity tag as \"weak.\" One can think of\n   a strong validator as one that changes whenever the bits of an entity\n   changes, while a weak value changes whenever the meaning of an entity\n   changes. Alternatively, one can think of a strong validator as part\n   of an identifier for a specific entity, while a weak validator is\n   part of an identifier for a set of semantically equivalent entities.\n\n      Note: One example of a strong validator is an integer that is\n      incremented in stable storage every time an entity is changed.\n\n      An entity's modification time, if represented with one-second\n      resolution, could be a weak validator, since it is possible that\n      the resource might be modified twice during a single second.\n\n      Support for weak validators is optional. However, weak validators\n      allow for more efficient caching of equivalent objects; for\n      example, a hit counter on a site is probably good enough if it is\n      updated every few days or weeks, and any value during that period\n      is likely \"good enough\" to be equivalent.\n\n   A \"use\" of a validator is either when a client generates a request\n   and includes the validator in a validating header field, or when a\n   server compares two validators.\n\n   Strong validators are usable in any context. Weak validators are only\n   usable in contexts that do not depend on exact equality of an entity.\n   For example, either kind is usable for a conditional GET of a full\n   entity. However, only a strong validator is usable for a sub-range\n   retrieval, since otherwise the client might end up with an internally\n   inconsistent entity.\n\n   Clients MAY issue simple (non-subrange) GET requests with either weak\n   validators or strong validators. Clients MUST NOT use weak validators\n   in other forms of request.\n\n   The only function that the HTTP/1.1 protocol defines on validators is\n   comparison. There are two validator comparison functions, depending\n   on whether the comparison context allows the use of weak validators\n   or not:\n\n      - The strong comparison function: in order to be considered equal,\n        both validators MUST be identical in every way, and both MUST\n        NOT be weak.\n\n      - The weak comparison function: in order to be considered equal,\n        both validators MUST be identical in every way, but either or\n        both of them MAY be tagged as \"weak\" without affecting the\n        result.\n\n   An entity tag is strong unless it is explicitly tagged as weak.\n   <a href=\"#section-3.11\">Section 3.11</a> gives the syntax for entity tags.\n\n   A Last-Modified time, when used as a validator in a request, is\n   implicitly weak unless it is possible to deduce that it is strong,\n   using the following rules:\n\n      - The validator is being compared by an origin server to the\n        actual current validator for the entity and,\n\n      - That origin server reliably knows that the associated entity did\n        not change twice during the second covered by the presented\n        validator.\n\n   or\n\n      - The validator is about to be used by a client in an If-\n        Modified-Since or If-Unmodified-Since header, because the client\n        has a cache entry for the associated entity, and\n\n      - That cache entry includes a Date value, which gives the time\n        when the origin server sent the original response, and\n\n      - The presented Last-Modified time is at least 60 seconds before\n        the Date value.\n\n   or\n\n      - The validator is being compared by an intermediate cache to the\n        validator stored in its cache entry for the entity, and\n\n      - That cache entry includes a Date value, which gives the time\n        when the origin server sent the original response, and\n\n      - The presented Last-Modified time is at least 60 seconds before\n        the Date value.\n\n   This method relies on the fact that if two different responses were\n   sent by the origin server during the same second, but both had the\n   same Last-Modified time, then at least one of those responses would\n   have a Date value equal to its Last-Modified time. The arbitrary 60-\n   second limit guards against the possibility that the Date and Last-\n   Modified values are generated from different clocks, or at somewhat\n   different times during the preparation of the response. An\n   implementation MAY use a value larger than 60 seconds, if it is\n   believed that 60 seconds is too short.\n\n   If a client wishes to perform a sub-range retrieval on a value for\n   which it has only a Last-Modified time and no opaque validator, it\n   MAY do this only if the Last-Modified time is strong in the sense\n   described here.\n\n   A cache or origin server receiving a conditional request, other than\n   a full-body GET request, MUST use the strong comparison function to\n   evaluate the condition.\n\n   These rules allow HTTP/1.1 caches and clients to safely perform sub-\n   range retrievals on values that have been obtained from HTTP/1.0\n\n   servers.\n\n<h4 class=\"h4\" id=\"section-13.3.4\">13.3.4 Rules for When to Use Entity Tags and Last-Modified Dates</h4>\n   We adopt a set of rules and recommendations for origin servers,\n   clients, and caches regarding when various validator types ought to\n   be used, and for what purposes.\n\n   HTTP/1.1 origin servers:\n\n      - SHOULD send an entity tag validator unless it is not feasible to\n        generate one.\n\n      - MAY send a weak entity tag instead of a strong entity tag, if\n        performance considerations support the use of weak entity tags,\n        or if it is unfeasible to send a strong entity tag.\n\n      - SHOULD send a Last-Modified value if it is feasible to send one,\n        unless the risk of a breakdown in semantic transparency that\n        could result from using this date in an If-Modified-Since header\n        would lead to serious problems.\n\n   In other words, the preferred behavior for an HTTP/1.1 origin server\n   is to send both a strong entity tag and a Last-Modified value.\n\n   In order to be legal, a strong entity tag MUST change whenever the\n   associated entity value changes in any way. A weak entity tag SHOULD\n   change whenever the associated entity changes in a semantically\n   significant way.\n\n      Note: in order to provide semantically transparent caching, an\n      origin server must avoid reusing a specific strong entity tag\n      value for two different entities, or reusing a specific weak\n      entity tag value for two semantically different entities. Cache\n      entries might persist for arbitrarily long periods, regardless of\n      expiration times, so it might be inappropriate to expect that a\n      cache will never again attempt to validate an entry using a\n      validator that it obtained at some point in the past.\n\n   HTTP/1.1 clients:\n\n      - If an entity tag has been provided by the origin server, MUST\n        use that entity tag in any cache-conditional request (using If-\n        Match or If-None-Match).\n\n      - If only a Last-Modified value has been provided by the origin\n        server, SHOULD use that value in non-subrange cache-conditional\n        requests (using If-Modified-Since).\n\n      - If only a Last-Modified value has been provided by an HTTP/1.0\n        origin server, MAY use that value in subrange cache-conditional\n        requests (using If-Unmodified-Since:). The user agent SHOULD\n        provide a way to disable this, in case of difficulty.\n\n      - If both an entity tag and a Last-Modified value have been\n        provided by the origin server, SHOULD use both validators in\n        cache-conditional requests. This allows both HTTP/1.0 and\n        HTTP/1.1 caches to respond appropriately.\n\n   An HTTP/1.1 origin server, upon receiving a conditional request that\n   includes both a Last-Modified date (e.g., in an If-Modified-Since or\n   If-Unmodified-Since header field) and one or more entity tags (e.g.,\n   in an If-Match, If-None-Match, or If-Range header field) as cache\n   validators, MUST NOT return a response status of 304 (Not Modified)\n   unless doing so is consistent with all of the conditional header\n   fields in the request.\n\n   An HTTP/1.1 caching proxy, upon receiving a conditional request that\n   includes both a Last-Modified date and one or more entity tags as\n   cache validators, MUST NOT return a locally cached response to the\n   client unless that cached response is consistent with all of the\n   conditional header fields in the request.\n\n      Note: The general principle behind these rules is that HTTP/1.1\n      servers and clients should transmit as much non-redundant\n      information as is available in their responses and requests.\n      HTTP/1.1 systems receiving this information will make the most\n      conservative assumptions about the validators they receive.\n\n      HTTP/1.0 clients and caches will ignore entity tags. Generally,\n      last-modified values received or used by these systems will\n      support transparent and efficient caching, and so HTTP/1.1 origin\n      servers should provide Last-Modified values. In those rare cases\n      where the use of a Last-Modified value as a validator by an\n      HTTP/1.0 system could result in a serious problem, then HTTP/1.1\n      origin servers should not provide one.\n\n<h4 class=\"h4\" id=\"section-13.3.5\">13.3.5 Non-validating Conditionals</h4>\n   The principle behind entity tags is that only the service author\n   knows the semantics of a resource well enough to select an\n   appropriate cache validation mechanism, and the specification of any\n   validator comparison function more complex than byte-equality would\n   open up a can of worms. Thus, comparisons of any other headers\n   (except Last-Modified, for compatibility with HTTP/1.0) are never\n   used for purposes of validating a cache entry.\n\n<h3 class=\"h3\" id=\"section-13.4\">13.4 Response Cacheability</h3>\n   Unless specifically constrained by a cache-control (<a href=\"#section-14.9\">section 14.9</a>)\n   directive, a caching system MAY always store a successful response\n   (see <a href=\"#section-13.8\">section 13.8</a>) as a cache entry, MAY return it without validation\n   if it is fresh, and MAY return it after successful validation. If\n   there is neither a cache validator nor an explicit expiration time\n   associated with a response, we do not expect it to be cached, but\n   certain caches MAY violate this expectation (for example, when little\n   or no network connectivity is available). A client can usually detect\n   that such a response was taken from a cache by comparing the Date\n   header to the current time.\n\n      Note: some HTTP/1.0 caches are known to violate this expectation\n      without providing any Warning.\n\n   However, in some cases it might be inappropriate for a cache to\n   retain an entity, or to return it in response to a subsequent\n   request. This might be because absolute semantic transparency is\n   deemed necessary by the service author, or because of security or\n   privacy considerations. Certain cache-control directives are\n   therefore provided so that the server can indicate that certain\n   resource entities, or portions thereof, are not to be cached\n   regardless of other considerations.\n\n   Note that <a href=\"#section-14.8\">section 14.8</a> normally prevents a shared cache from saving\n   and returning a response to a previous request if that request\n   included an Authorization header.\n\n   A response received with a status code of 200, 203, 206, 300, 301 or\n   410 MAY be stored by a cache and used in reply to a subsequent\n   request, subject to the expiration mechanism, unless a cache-control\n   directive prohibits caching. However, a cache that does not support\n   the Range and Content-Range headers MUST NOT cache 206 (Partial\n   Content) responses.\n\n   A response received with any other status code (e.g. status codes 302\n   and 307) MUST NOT be returned in a reply to a subsequent request\n   unless there are cache-control directives or another header(s) that\n   explicitly allow it. For example, these include the following: an\n   Expires header (<a href=\"#section-14.21\">section 14.21</a>); a \"max-age\", \"s-maxage\",  \"must-\n   revalidate\", \"proxy-revalidate\", \"public\" or \"private\" cache-control\n   directive (<a href=\"#section-14.9\">section 14.9</a>).\n\n<h3 class=\"h3\" id=\"section-13.5\">13.5 Constructing Responses From Caches</h3>\n   The purpose of an HTTP cache is to store information received in\n   response to requests for use in responding to future requests. In\n   many cases, a cache simply returns the appropriate parts of a\n   response to the requester. However, if the cache holds a cache entry\n   based on a previous response, it might have to combine parts of a new\n   response with what is held in the cache entry.\n\n<h4 class=\"h4\" id=\"section-13.5.1\">13.5.1 End-to-end and Hop-by-hop Headers</h4>\n   For the purpose of defining the behavior of caches and non-caching\n   proxies, we divide HTTP headers into two categories:\n\n      - End-to-end headers, which are  transmitted to the ultimate\n        recipient of a request or response. End-to-end headers in\n        responses MUST be stored as part of a cache entry and MUST be\n        transmitted in any response formed from a cache entry.\n\n      - Hop-by-hop headers, which are meaningful only for a single\n        transport-level connection, and are not stored by caches or\n        forwarded by proxies.\n\n   The following HTTP/1.1 headers are hop-by-hop headers:\n\n      - Connection\n      - Keep-Alive\n      - Proxy-Authenticate\n      - Proxy-Authorization\n      - TE\n      - Trailers\n      - Transfer-Encoding\n      - Upgrade\n\n   All other headers defined by HTTP/1.1 are end-to-end headers.\n\n   Other hop-by-hop headers MUST be listed in a Connection header,\n   (<a href=\"#section-14.10\">section 14.10</a>) to be introduced into HTTP/1.1 (or later).\n\n<h4 class=\"h4\" id=\"section-13.5.2\">13.5.2 Non-modifiable Headers</h4>\n   Some features of the HTTP/1.1 protocol, such as Digest\n   Authentication, depend on the value of certain end-to-end headers. A\n   transparent proxy SHOULD NOT modify an end-to-end header unless the\n   definition of that header requires or specifically allows that.\n\n   A transparent proxy MUST NOT modify any of the following fields in a\n   request or response, and it MUST NOT add any of these fields if not\n   already present:\n\n      - Content-Location\n\n      - Content-MD5\n\n      - ETag\n\n      - Last-Modified\n\n   A transparent proxy MUST NOT modify any of the following fields in a\n   response:\n\n      - Expires\n\n   but it MAY add any of these fields if not already present. If an\n   Expires header is added, it MUST be given a field-value identical to\n   that of the Date header in that response.\n\n   A  proxy MUST NOT modify or add any of the following fields in a\n   message that contains the no-transform cache-control directive, or in\n   any request:\n\n      - Content-Encoding\n\n      - Content-Range\n\n      - Content-Type\n\n   A non-transparent proxy MAY modify or add these fields to a message\n   that does not include no-transform, but if it does so, it MUST add a\n   Warning 214 (Transformation applied) if one does not already appear\n   in the message (see <a href=\"#section-14.46\">section 14.46</a>).\n\n      Warning: unnecessary modification of end-to-end headers might\n      cause authentication failures if stronger authentication\n      mechanisms are introduced in later versions of HTTP. Such\n      authentication mechanisms MAY rely on the values of header fields\n      not listed here.\n\n   The Content-Length field of a request or response is added or deleted\n   according to the rules in <a href=\"#section-4.4\">section 4.4</a>. A transparent proxy MUST\n   preserve the entity-length (<a href=\"#section-7.2.2\">section 7.2.2</a>) of the entity-body,\n   although it MAY change the transfer-length (<a href=\"#section-4.4\">section 4.4</a>).\n\n<h4 class=\"h4\" id=\"section-13.5.3\">13.5.3 Combining Headers</h4>\n   When a cache makes a validating request to a server, and the server\n   provides a 304 (Not Modified) response or a 206 (Partial Content)\n   response, the cache then constructs a response to send to the\n   requesting client.\n\n   If the status code is 304 (Not Modified), the cache uses the entity-\n   body stored in the cache entry as the entity-body of this outgoing\n   response. If the status code is 206 (Partial Content) and the ETag or\n   Last-Modified headers match exactly, the cache MAY combine the\n   contents stored in the cache entry with the new contents received in\n   the response and use the result as the entity-body of this outgoing\n   response, (see 13.5.4).\n\n   The end-to-end headers stored in the cache entry are used for the\n   constructed response, except that\n\n      - any stored Warning headers with warn-code 1xx (see <a href=\"#section-14.46\">section</a>\n        <a href=\"#section-14.46\">14.46</a>) MUST be deleted from the cache entry and the forwarded\n        response.\n\n      - any stored Warning headers with warn-code 2xx MUST be retained\n        in the cache entry and the forwarded response.\n\n      - any end-to-end headers provided in the 304 or 206 response MUST\n        replace the corresponding headers from the cache entry.\n\n   Unless the cache decides to remove the cache entry, it MUST also\n   replace the end-to-end headers stored with the cache entry with\n   corresponding headers received in the incoming response, except for\n   Warning headers as described immediately above. If a header field-\n   name in the incoming response matches more than one header in the\n   cache entry, all such old headers MUST be replaced.\n\n   In other words, the set of end-to-end headers received in the\n   incoming response overrides all corresponding end-to-end headers\n   stored with the cache entry (except for stored Warning headers with\n   warn-code 1xx, which are deleted even if not overridden).\n\n      Note: this rule allows an origin server to use a 304 (Not\n      Modified) or a 206 (Partial Content) response to update any header\n      associated with a previous response for the same entity or sub-\n      ranges thereof, although it might not always be meaningful or\n      correct to do so. This rule does not allow an origin server to use\n      a 304 (Not Modified) or a 206 (Partial Content) response to\n      entirely delete a header that it had provided with a previous\n      response.\n\n<h4 class=\"h4\" id=\"section-13.5.4\">13.5.4 Combining Byte Ranges</h4>\n   A response might transfer only a subrange of the bytes of an entity-\n   body, either because the request included one or more Range\n   specifications, or because a connection was broken prematurely. After\n   several such transfers, a cache might have received several ranges of\n   the same entity-body.\n\n   If a cache has a stored non-empty set of subranges for an entity, and\n   an incoming response transfers another subrange, the cache MAY\n   combine the new subrange with the existing set if both the following\n   conditions are met:\n\n      - Both the incoming response and the cache entry have a cache\n        validator.\n\n      - The two cache validators match using the strong comparison\n        function (see <a href=\"#section-13.3.3\">section 13.3.3</a>).\n\n   If either requirement is not met, the cache MUST use only the most\n   recent partial response (based on the Date values transmitted with\n   every response, and using the incoming response if these values are\n   equal or missing), and MUST discard the other partial information.\n\n<h3 class=\"h3\" id=\"section-13.6\">13.6 Caching Negotiated Responses</h3>\n   Use of server-driven content negotiation (<a href=\"#section-12.1\">section 12.1</a>), as indicated\n   by the presence of a Vary header field in a response, alters the\n   conditions and procedure by which a cache can use the response for\n   subsequent requests. See <a href=\"#section-14.44\">section 14.44</a> for use of the Vary header\n   field by servers.\n\n   A server SHOULD use the Vary header field to inform a cache of what\n   request-header fields were used to select among multiple\n   representations of a cacheable response subject to server-driven\n   negotiation. The set of header fields named by the Vary field value\n   is known as the \"selecting\" request-headers.\n\n   When the cache receives a subsequent request whose Request-URI\n   specifies one or more cache entries including a Vary header field,\n   the cache MUST NOT use such a cache entry to construct a response to\n   the new request unless all of the selecting request-headers present\n   in the new request match the corresponding stored request-headers in\n   the original request.\n\n   The selecting request-headers from two requests are defined to match\n   if and only if the selecting request-headers in the first request can\n   be transformed to the selecting request-headers in the second request\n\n   by adding or removing linear white space (LWS) at places where this\n   is allowed by the corresponding BNF, and/or combining multiple\n   message-header fields with the same field name following the rules\n   about message headers in <a href=\"#section-4.2\">section 4.2</a>.\n\n   A Vary header field-value of \"*\" always fails to match and subsequent\n   requests on that resource can only be properly interpreted by the\n   origin server.\n\n   If the selecting request header fields for the cached entry do not\n   match the selecting request header fields of the new request, then\n   the cache MUST NOT use a cached entry to satisfy the request unless\n   it first relays the new request to the origin server in a conditional\n   request and the server responds with 304 (Not Modified), including an\n   entity tag or Content-Location that indicates the entity to be used.\n\n   If an entity tag was assigned to a cached representation, the\n   forwarded request SHOULD be conditional and include the entity tags\n   in an If-None-Match header field from all its cache entries for the\n   resource. This conveys to the server the set of entities currently\n   held by the cache, so that if any one of these entities matches the\n   requested entity, the server can use the ETag header field in its 304\n   (Not Modified) response to tell the cache which entry is appropriate.\n   If the entity-tag of the new response matches that of an existing\n   entry, the new response SHOULD be used to update the header fields of\n   the existing entry, and the result MUST be returned to the client.\n\n   If any of the existing cache entries contains only partial content\n   for the associated entity, its entity-tag SHOULD NOT be included in\n   the If-None-Match header field unless the request is for a range that\n   would be fully satisfied by that entry.\n\n   If a cache receives a successful response whose Content-Location\n   field matches that of an existing cache entry for the same Request-\n   ]URI, whose entity-tag differs from that of the existing entry, and\n   whose Date is more recent than that of the existing entry, the\n   existing entry SHOULD NOT be returned in response to future requests\n   and SHOULD be deleted from the cache.\n\n<h3 class=\"h3\" id=\"section-13.7\">13.7 Shared and Non-Shared Caches</h3>\n   For reasons of security and privacy, it is necessary to make a\n   distinction between \"shared\" and \"non-shared\" caches. A non-shared\n   cache is one that is accessible only to a single user. Accessibility\n   in this case SHOULD be enforced by appropriate security mechanisms.\n   All other caches are considered to be \"shared.\" Other sections of\n\n   this specification place certain constraints on the operation of\n   shared caches in order to prevent loss of privacy or failure of\n   access controls.\n\n<h3 class=\"h3\" id=\"section-13.8\">13.8 Errors or Incomplete Response Cache Behavior</h3>\n   A cache that receives an incomplete response (for example, with fewer\n   bytes of data than specified in a Content-Length header) MAY store\n   the response. However, the cache MUST treat this as a partial\n   response. Partial responses MAY be combined as described in <a href=\"#section-13.5.4\">section</a>\n   <a href=\"#section-13.5.4\">13.5.4</a>; the result might be a full response or might still be\n   partial. A cache MUST NOT return a partial response to a client\n   without explicitly marking it as such, using the 206 (Partial\n   Content) status code. A cache MUST NOT return a partial response\n   using a status code of 200 (OK).\n\n   If a cache receives a 5xx response while attempting to revalidate an\n   entry, it MAY either forward this response to the requesting client,\n   or act as if the server failed to respond. In the latter case, it MAY\n   return a previously received response unless the cached entry\n   includes the \"must-revalidate\" cache-control directive (see <a href=\"#section-14.9\">section</a>\n   <a href=\"#section-14.9\">14.9</a>).\n\n<h3 class=\"h3\" id=\"section-13.9\">13.9 Side Effects of GET and HEAD</h3>\n   Unless the origin server explicitly prohibits the caching of their\n   responses, the application of GET and HEAD methods to any resources\n   SHOULD NOT have side effects that would lead to erroneous behavior if\n   these responses are taken from a cache. They MAY still have side\n   effects, but a cache is not required to consider such side effects in\n   its caching decisions. Caches are always expected to observe an\n   origin server's explicit restrictions on caching.\n\n   We note one exception to this rule: since some applications have\n   traditionally used GETs and HEADs with query URLs (those containing a\n   \"?\" in the rel_path part) to perform operations with significant side\n   effects, caches MUST NOT treat responses to such URIs as fresh unless\n   the server provides an explicit expiration time. This specifically\n   means that responses from HTTP/1.0 servers for such URIs SHOULD NOT\n   be taken from a cache. See <a href=\"#section-9.1.1\">section 9.1.1</a> for related information.\n\n<h3 class=\"h3\" id=\"section-13.10\">13.10 Invalidation After Updates or Deletions</h3>\n   The effect of certain methods performed on a resource at the origin\n   server might cause one or more existing cache entries to become non-\n   transparently invalid. That is, although they might continue to be\n   \"fresh,\" they do not accurately reflect what the origin server would\n   return for a new request on that resource.\n\n   There is no way for the HTTP protocol to guarantee that all such\n   cache entries are marked invalid. For example, the request that\n   caused the change at the origin server might not have gone through\n   the proxy where a cache entry is stored. However, several rules help\n   reduce the likelihood of erroneous behavior.\n\n   In this section, the phrase \"invalidate an entity\" means that the\n   cache will either remove all instances of that entity from its\n   storage, or will mark these as \"invalid\" and in need of a mandatory\n   revalidation before they can be returned in response to a subsequent\n   request.\n\n   Some HTTP methods MUST cause a cache to invalidate an entity. This is\n   either the entity referred to by the Request-URI, or by the Location\n   or Content-Location headers (if present). These methods are:\n\n      - PUT\n\n      - DELETE\n\n      - POST\n\n   In order to prevent denial of service attacks, an invalidation based\n   on the URI in a Location or Content-Location header MUST only be\n   performed if the host part is the same as in the Request-URI.\n\n   A cache that passes through requests for methods it does not\n   understand SHOULD invalidate any entities referred to by the\n   Request-URI.\n\n<h3 class=\"h3\" id=\"section-13.11\">13.11 Write-Through Mandatory</h3>\n   All methods that might be expected to cause modifications to the\n   origin server's resources MUST be written through to the origin\n   server. This currently includes all methods except for GET and HEAD.\n   A cache MUST NOT reply to such a request from a client before having\n   transmitted the request to the inbound server, and having received a\n   corresponding response from the inbound server. This does not prevent\n   a proxy cache from sending a 100 (Continue) response before the\n   inbound server has sent its final reply.\n\n   The alternative (known as \"write-back\" or \"copy-back\" caching) is not\n   allowed in HTTP/1.1, due to the difficulty of providing consistent\n   updates and the problems arising from server, cache, or network\n   failure prior to write-back.\n\n<h3 class=\"h3\" id=\"section-13.12\">13.12 Cache Replacement</h3>\n   If a new cacheable (see sections <a href=\"#section-14.9.2\">14.9.2</a>, <a href=\"#section-13.2.5\">13.2.5</a>, <a href=\"#section-13.2.6\">13.2.6</a> and <a href=\"#section-13.8\">13.8</a>)\n   response is received from a resource while any existing responses for\n   the same resource are cached, the cache SHOULD use the new response\n   to reply to the current request. It MAY insert it into cache storage\n   and MAY, if it meets all other requirements, use it to respond to any\n   future requests that would previously have caused the old response to\n   be returned. If it inserts the new response into cache storage  the\n   rules in <a href=\"#section-13.5.3\">section 13.5.3</a> apply.\n\n      Note: a new response that has an older Date header value than\n      existing cached responses is not cacheable.\n\n<h3 class=\"h3\" id=\"section-13.13\">13.13 History Lists</h3>\n   User agents often have history mechanisms, such as \"Back\" buttons and\n   history lists, which can be used to redisplay an entity retrieved\n   earlier in a session.\n\n   History mechanisms and caches are different. In particular history\n   mechanisms SHOULD NOT try to show a semantically transparent view of\n   the current state of a resource. Rather, a history mechanism is meant\n   to show exactly what the user saw at the time when the resource was\n   retrieved.\n\n   By default, an expiration time does not apply to history mechanisms.\n   If the entity is still in storage, a history mechanism SHOULD display\n   it even if the entity has expired, unless the user has specifically\n   configured the agent to refresh expired history documents.\n\n   This is not to be construed to prohibit the history mechanism from\n   telling the user that a view might be stale.\n\n      Note: if history list mechanisms unnecessarily prevent users from\n      viewing stale resources, this will tend to force service authors\n      to avoid using HTTP expiration controls and cache controls when\n      they would otherwise like to. Service authors may consider it\n      important that users not be presented with error messages or\n      warning messages when they use navigation controls (such as BACK)\n      to view previously fetched resources. Even though sometimes such\n      resources ought not to cached, or ought to expire quickly, user\n      interface considerations may force service authors to resort to\n      other means of preventing caching (e.g. \"once-only\" URLs) in order\n      not to suffer the effects of improperly functioning history\n      mechanisms.\n\n<h2 class=\"h2\" id=\"section-14\">14 Header Field Definitions</h2>\n   This section defines the syntax and semantics of all standard\n   HTTP/1.1 header fields. For entity-header fields, both sender and\n   recipient refer to either the client or the server, depending on who\n   sends and who receives the entity.\n\n<h3 class=\"h3\" id=\"section-14.1\">14.1 Accept</h3>\n   The Accept request-header field can be used to specify certain media\n   types which are acceptable for the response. Accept headers can be\n   used to indicate that the request is specifically limited to a small\n   set of desired types, as in the case of a request for an in-line\n   image.\n\n       Accept         = \"Accept\" \":\"\n                        #( media-range [ accept-params ] )\n\n       media-range    = ( \"*/*\"\n                        | ( type \"/\" \"*\" )\n                        | ( type \"/\" subtype )\n                        ) *( \";\" parameter )\n       accept-params  = \";\" \"q\" \"=\" qvalue *( accept-extension )\n       accept-extension = \";\" token [ \"=\" ( token | quoted-string ) ]\n\n   The asterisk \"*\" character is used to group media types into ranges,\n   with \"*/*\" indicating all media types and \"type/*\" indicating all\n   subtypes of that type. The media-range MAY include media type\n   parameters that are applicable to that range.\n\n   Each media-range MAY be followed by one or more accept-params,\n   beginning with the \"q\" parameter for indicating a relative quality\n   factor. The first \"q\" parameter (if any) separates the media-range\n   parameter(s) from the accept-params. Quality factors allow the user\n   or user agent to indicate the relative degree of preference for that\n   media-range, using the qvalue scale from 0 to 1 (<a href=\"#section-3.9\">section 3.9</a>). The\n   default value is q=1.\n\n      Note: Use of the \"q\" parameter name to separate media type\n      parameters from Accept extension parameters is due to historical\n      practice. Although this prevents any media type parameter named\n      \"q\" from being used with a media range, such an event is believed\n      to be unlikely given the lack of any \"q\" parameters in the IANA\n      media type registry and the rare usage of any media type\n      parameters in Accept. Future media types are discouraged from\n      registering any parameter named \"q\".\n\n   The example\n\n       Accept: audio/*; q=0.2, audio/basic\n\n   SHOULD be interpreted as \"I prefer audio/basic, but send me any audio\n   type if it is the best available after an 80% mark-down in quality.\"\n\n   If no Accept header field is present, then it is assumed that the\n   client accepts all media types. If an Accept header field is present,\n   and if the server cannot send a response which is acceptable\n   according to the combined Accept field value, then the server SHOULD\n   send a 406 (not acceptable) response.\n\n   A more elaborate example is\n\n       Accept: text/plain; q=0.5, text/html,\n               text/x-dvi; q=0.8, text/x-c\n\n   Verbally, this would be interpreted as \"text/html and text/x-c are\n   the preferred media types, but if they do not exist, then send the\n   text/x-dvi entity, and if that does not exist, send the text/plain\n   entity.\"\n\n   Media ranges can be overridden by more specific media ranges or\n   specific media types. If more than one media range applies to a given\n   type, the most specific reference has precedence. For example,\n\n       Accept: text/*, text/html, text/html;level=1, */*\n\n   have the following precedence:\n\n       1) text/html;level=1\n       2) text/html\n       3) text/*\n       4) */*\n\n   The media type quality factor associated with a given type is\n   determined by finding the media range with the highest precedence\n   which matches that type. For example,\n\n       Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,\n               text/html;level=2;q=0.4, */*;q=0.5\n\n   would cause the following values to be associated:\n\n       text/html;level=1         = 1\n       text/html                 = 0.7\n       text/plain                = 0.3\n\n       image/jpeg                = 0.5\n       text/html;level=2         = 0.4\n       text/html;level=3         = 0.7\n\n      Note: A user agent might be provided with a default set of quality\n      values for certain media ranges. However, unless the user agent is\n      a closed system which cannot interact with other rendering agents,\n      this default set ought to be configurable by the user.\n\n<h3 class=\"h3\" id=\"section-14.2\">14.2 Accept-Charset</h3>\n   The Accept-Charset request-header field can be used to indicate what\n   character sets are acceptable for the response. This field allows\n   clients capable of understanding more comprehensive or special-\n   purpose character sets to signal that capability to a server which is\n   capable of representing documents in those character sets.\n\n      Accept-Charset = \"Accept-Charset\" \":\"\n              1#( ( charset | \"*\" )[ \";\" \"q\" \"=\" qvalue ] )\n\n\n   Character set values are described in <a href=\"#section-3.4\">section 3.4</a>. Each charset MAY\n   be given an associated quality value which represents the user's\n   preference for that charset. The default value is q=1. An example is\n\n      Accept-Charset: iso-8859-5, unicode-1-1;q=0.8\n\n   The special value \"*\", if present in the Accept-Charset field,\n   matches every character set (including ISO-8859-1) which is not\n   mentioned elsewhere in the Accept-Charset field. If no \"*\" is present\n   in an Accept-Charset field, then all character sets not explicitly\n   mentioned get a quality value of 0, except for ISO-8859-1, which gets\n   a quality value of 1 if not explicitly mentioned.\n\n   If no Accept-Charset header is present, the default is that any\n   character set is acceptable. If an Accept-Charset header is present,\n   and if the server cannot send a response which is acceptable\n   according to the Accept-Charset header, then the server SHOULD send\n   an error response with the 406 (not acceptable) status code, though\n   the sending of an unacceptable response is also allowed.\n\n<h3 class=\"h3\" id=\"section-14.3\">14.3 Accept-Encoding</h3>\n   The Accept-Encoding request-header field is similar to Accept, but\n   restricts the content-codings (<a href=\"#section-3.5\">section 3.5</a>) that are acceptable in\n   the response.\n\n       Accept-Encoding  = \"Accept-Encoding\" \":\"\n\n                          1#( codings [ \";\" \"q\" \"=\" qvalue ] )\n       codings          = ( content-coding | \"*\" )\n\n   Examples of its use are:\n\n       Accept-Encoding: compress, gzip\n       Accept-Encoding:\n       Accept-Encoding: *\n       Accept-Encoding: compress;q=0.5, gzip;q=1.0\n       Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0\n\n   A server tests whether a content-coding is acceptable, according to\n   an Accept-Encoding field, using these rules:\n\n      1. If the content-coding is one of the content-codings listed in\n         the Accept-Encoding field, then it is acceptable, unless it is\n         accompanied by a qvalue of 0. (As defined in <a href=\"#section-3.9\">section 3.9</a>, a\n         qvalue of 0 means \"not acceptable.\")\n\n      2. The special \"*\" symbol in an Accept-Encoding field matches any\n         available content-coding not explicitly listed in the header\n         field.\n\n      3. If multiple content-codings are acceptable, then the acceptable\n         content-coding with the highest non-zero qvalue is preferred.\n\n      4. The \"identity\" content-coding is always acceptable, unless\n         specifically refused because the Accept-Encoding field includes\n         \"identity;q=0\", or because the field includes \"*;q=0\" and does\n         not explicitly include the \"identity\" content-coding. If the\n         Accept-Encoding field-value is empty, then only the \"identity\"\n         encoding is acceptable.\n\n   If an Accept-Encoding field is present in a request, and if the\n   server cannot send a response which is acceptable according to the\n   Accept-Encoding header, then the server SHOULD send an error response\n   with the 406 (Not Acceptable) status code.\n\n   If no Accept-Encoding field is present in a request, the server MAY\n   assume that the client will accept any content coding. In this case,\n   if \"identity\" is one of the available content-codings, then the\n   server SHOULD use the \"identity\" content-coding, unless it has\n   additional information that a different content-coding is meaningful\n   to the client.\n\n      Note: If the request does not include an Accept-Encoding field,\n      and if the \"identity\" content-coding is unavailable, then\n      content-codings commonly understood by HTTP/1.0 clients (i.e.,\n\n      \"gzip\" and \"compress\") are preferred; some older clients\n      improperly display messages sent with other content-codings.  The\n      server might also make this decision based on information about\n      the particular user-agent or client.\n\n      Note: Most HTTP/1.0 applications do not recognize or obey qvalues\n      associated with content-codings. This means that qvalues will not\n      work and are not permitted with x-gzip or x-compress.\n\n<h3 class=\"h3\" id=\"section-14.4\">14.4 Accept-Language</h3>\n   The Accept-Language request-header field is similar to Accept, but\n   restricts the set of natural languages that are preferred as a\n   response to the request. Language tags are defined in <a href=\"#section-3.10\">section 3.10</a>.\n\n       Accept-Language = \"Accept-Language\" \":\"\n                         1#( language-range [ \";\" \"q\" \"=\" qvalue ] )\n       language-range  = ( ( 1*8ALPHA *( \"-\" 1*8ALPHA ) ) | \"*\" )\n\n   Each language-range MAY be given an associated quality value which\n   represents an estimate of the user's preference for the languages\n   specified by that range. The quality value defaults to \"q=1\". For\n   example,\n\n       Accept-Language: da, en-gb;q=0.8, en;q=0.7\n\n   would mean: \"I prefer Danish, but will accept British English and\n   other types of English.\" A language-range matches a language-tag if\n   it exactly equals the tag, or if it exactly equals a prefix of the\n   tag such that the first tag character following the prefix is \"-\".\n   The special range \"*\", if present in the Accept-Language field,\n   matches every tag not matched by any other range present in the\n   Accept-Language field.\n\n      Note: This use of a prefix matching rule does not imply that\n      language tags are assigned to languages in such a way that it is\n      always true that if a user understands a language with a certain\n      tag, then this user will also understand all languages with tags\n      for which this tag is a prefix. The prefix rule simply allows the\n      use of prefix tags if this is the case.\n\n   The language quality factor assigned to a language-tag by the\n   Accept-Language field is the quality value of the longest language-\n   range in the field that matches the language-tag. If no language-\n   range in the field matches the tag, the language quality factor\n   assigned is 0. If no Accept-Language header is present in the\n   request, the server\n\n   SHOULD assume that all languages are equally acceptable. If an\n   Accept-Language header is present, then all languages which are\n   assigned a quality factor greater than 0 are acceptable.\n\n   It might be contrary to the privacy expectations of the user to send\n   an Accept-Language header with the complete linguistic preferences of\n   the user in every request. For a discussion of this issue, see\n   <a href=\"#section-15.1.4\">section 15.1.4</a>.\n\n   As intelligibility is highly dependent on the individual user, it is\n   recommended that client applications make the choice of linguistic\n   preference available to the user. If the choice is not made\n   available, then the Accept-Language header field MUST NOT be given in\n   the request.\n\n      Note: When making the choice of linguistic preference available to\n      the user, we remind implementors of  the fact that users are not\n      familiar with the details of language matching as described above,\n      and should provide appropriate guidance. As an example, users\n      might assume that on selecting \"en-gb\", they will be served any\n      kind of English document if British English is not available. A\n      user agent might suggest in such a case to add \"en\" to get the\n      best matching behavior.\n\n<h3 class=\"h3\" id=\"section-14.5\">14.5 Accept-Ranges</h3>\n      The Accept-Ranges response-header field allows the server to\n      indicate its acceptance of range requests for a resource:\n\n          Accept-Ranges     = \"Accept-Ranges\" \":\" acceptable-ranges\n          acceptable-ranges = 1#range-unit | \"none\"\n\n      Origin servers that accept byte-range requests MAY send\n\n          Accept-Ranges: bytes\n\n      but are not required to do so. Clients MAY generate byte-range\n      requests without having received this header for the resource\n      involved. Range units are defined in <a href=\"#section-3.12\">section 3.12</a>.\n\n      Servers that do not accept any kind of range request for a\n      resource MAY send\n\n          Accept-Ranges: none\n\n      to advise the client not to attempt a range request.\n\n<h3 class=\"h3\" id=\"section-14.6\">14.6 Age</h3>\n      The Age response-header field conveys the sender's estimate of the\n      amount of time since the response (or its revalidation) was\n      generated at the origin server. A cached response is \"fresh\" if\n      its age does not exceed its freshness lifetime. Age values are\n      calculated as specified in <a href=\"#section-13.2.3\">section 13.2.3</a>.\n\n           Age = \"Age\" \":\" age-value\n           age-value = delta-seconds\n\n      Age values are non-negative decimal integers, representing time in\n      seconds.\n\n      If a cache receives a value larger than the largest positive\n      integer it can represent, or if any of its age calculations\n      overflows, it MUST transmit an Age header with a value of\n      2147483648 (2^31). An HTTP/1.1 server that includes a cache MUST\n      include an Age header field in every response generated from its\n      own cache. Caches SHOULD use an arithmetic type of at least 31\n      bits of range.\n\n<h3 class=\"h3\" id=\"section-14.7\">14.7 Allow</h3>\n      The Allow entity-header field lists the set of methods supported\n      by the resource identified by the Request-URI. The purpose of this\n      field is strictly to inform the recipient of valid methods\n      associated with the resource. An Allow header field MUST be\n      present in a 405 (Method Not Allowed) response.\n\n          Allow   = \"Allow\" \":\" #Method\n\n      Example of use:\n\n          Allow: GET, HEAD, PUT\n\n      This field cannot prevent a client from trying other methods.\n      However, the indications given by the Allow header field value\n      SHOULD be followed. The actual set of allowed methods is defined\n      by the origin server at the time of each request.\n\n      The Allow header field MAY be provided with a PUT request to\n      recommend the methods to be supported by the new or modified\n      resource. The server is not required to support these methods and\n      SHOULD include an Allow header in the response giving the actual\n      supported methods.\n\n      A proxy MUST NOT modify the Allow header field even if it does not\n      understand all the methods specified, since the user agent might\n      have other means of communicating with the origin server.\n\n<h3 class=\"h3\" id=\"section-14.8\">14.8 Authorization</h3>\n      A user agent that wishes to authenticate itself with a server--\n      usually, but not necessarily, after receiving a 401 response--does\n      so by including an Authorization request-header field with the\n      request.  The Authorization field value consists of credentials\n      containing the authentication information of the user agent for\n      the realm of the resource being requested.\n\n          Authorization  = \"Authorization\" \":\" credentials\n\n      HTTP access authentication is described in \"HTTP Authentication:\n      Basic and Digest Access Authentication\" [<a href=\"#ref-43\" title='\"HTTP Authentication: Basic and Digest Access Authentication\"'>43</a>]. If a request is\n      authenticated and a realm specified, the same credentials SHOULD\n      be valid for all other requests within this realm (assuming that\n      the authentication scheme itself does not require otherwise, such\n      as credentials that vary according to a challenge value or using\n      synchronized clocks).\n\n      When a shared cache (see <a href=\"#section-13.7\">section 13.7</a>) receives a request\n      containing an Authorization field, it MUST NOT return the\n      corresponding response as a reply to any other request, unless one\n      of the following specific exceptions holds:\n\n      1. If the response includes the \"s-maxage\" cache-control\n         directive, the cache MAY use that response in replying to a\n         subsequent request. But (if the specified maximum age has\n         passed) a proxy cache MUST first revalidate it with the origin\n         server, using the request-headers from the new request to allow\n         the origin server to authenticate the new request. (This is the\n         defined behavior for s-maxage.) If the response includes \"s-\n         maxage=0\", the proxy MUST always revalidate it before re-using\n         it.\n\n      2. If the response includes the \"must-revalidate\" cache-control\n         directive, the cache MAY use that response in replying to a\n         subsequent request. But if the response is stale, all caches\n         MUST first revalidate it with the origin server, using the\n         request-headers from the new request to allow the origin server\n         to authenticate the new request.\n\n      3. If the response includes the \"public\" cache-control directive,\n         it MAY be returned in reply to any subsequent request.\n\n<h3 class=\"h3\" id=\"section-14.9\">14.9 Cache-Control</h3>\n   The Cache-Control general-header field is used to specify directives\n   that MUST be obeyed by all caching mechanisms along the\n   request/response chain. The directives specify behavior intended to\n   prevent caches from adversely interfering with the request or\n   response. These directives typically override the default caching\n   algorithms. Cache directives are unidirectional in that the presence\n   of a directive in a request does not imply that the same directive is\n   to be given in the response.\n\n      Note that HTTP/1.0 caches might not implement Cache-Control and\n      might only implement Pragma: no-cache (see <a href=\"#section-14.32\">section 14.32</a>).\n\n   Cache directives MUST be passed through by a proxy or gateway\n   application, regardless of their significance to that application,\n   since the directives might be applicable to all recipients along the\n   request/response chain. It is not possible to specify a cache-\n   directive for a specific cache.\n\n    Cache-Control   = \"Cache-Control\" \":\" 1#cache-directive\n\n    cache-directive = cache-request-directive\n         | cache-response-directive\n\n    cache-request-directive =\n           \"no-cache\"                          ; <a href=\"#section-14.9.1\">Section 14.9.1</a>\n         | \"no-store\"                          ; <a href=\"#section-14.9.2\">Section 14.9.2</a>\n         | \"max-age\" \"=\" delta-seconds         ; <a href=\"#section-14.9.3\">Section 14.9.3</a>, 14.9.4\n         | \"max-stale\" [ \"=\" delta-seconds ]   ; <a href=\"#section-14.9.3\">Section 14.9.3</a>\n         | \"min-fresh\" \"=\" delta-seconds       ; <a href=\"#section-14.9.3\">Section 14.9.3</a>\n         | \"no-transform\"                      ; <a href=\"#section-14.9.5\">Section 14.9.5</a>\n         | \"only-if-cached\"                    ; <a href=\"#section-14.9.4\">Section 14.9.4</a>\n         | cache-extension                     ; <a href=\"#section-14.9.6\">Section 14.9.6</a>\n\n     cache-response-directive =\n           \"public\"                               ; <a href=\"#section-14.9.1\">Section 14.9.1</a>\n         | \"private\" [ \"=\" &lt;\"&gt; 1#field-name &lt;\"&gt; ] ; <a href=\"#section-14.9.1\">Section 14.9.1</a>\n         | \"no-cache\" [ \"=\" &lt;\"&gt; 1#field-name &lt;\"&gt; ]; <a href=\"#section-14.9.1\">Section 14.9.1</a>\n         | \"no-store\"                             ; <a href=\"#section-14.9.2\">Section 14.9.2</a>\n         | \"no-transform\"                         ; <a href=\"#section-14.9.5\">Section 14.9.5</a>\n         | \"must-revalidate\"                      ; <a href=\"#section-14.9.4\">Section 14.9.4</a>\n         | \"proxy-revalidate\"                     ; <a href=\"#section-14.9.4\">Section 14.9.4</a>\n         | \"max-age\" \"=\" delta-seconds            ; <a href=\"#section-14.9.3\">Section 14.9.3</a>\n         | \"s-maxage\" \"=\" delta-seconds           ; <a href=\"#section-14.9.3\">Section 14.9.3</a>\n         | cache-extension                        ; <a href=\"#section-14.9.6\">Section 14.9.6</a>\n\n    cache-extension = token [ \"=\" ( token | quoted-string ) ]\n\n   When a directive appears without any 1#field-name parameter, the\n   directive applies to the entire request or response. When such a\n   directive appears with a 1#field-name parameter, it applies only to\n   the named field or fields, and not to the rest of the request or\n   response. This mechanism supports extensibility; implementations of\n   future versions of the HTTP protocol might apply these directives to\n   header fields not defined in HTTP/1.1.\n\n   The cache-control directives can be broken down into these general\n   categories:\n\n      - Restrictions on what are cacheable; these may only be imposed by\n        the origin server.\n\n      - Restrictions on what may be stored by a cache; these may be\n        imposed by either the origin server or the user agent.\n\n      - Modifications of the basic expiration mechanism; these may be\n        imposed by either the origin server or the user agent.\n\n      - Controls over cache revalidation and reload; these may only be\n        imposed by a user agent.\n\n      - Control over transformation of entities.\n\n      - Extensions to the caching system.\n\n<h4 class=\"h4\" id=\"section-14.9.1\">14.9.1 What is Cacheable</h4>\n   By default, a response is cacheable if the requirements of the\n   request method, request header fields, and the response status\n   indicate that it is cacheable. <a href=\"#section-13.4\">Section 13.4</a> summarizes these defaults\n   for cacheability. The following Cache-Control response directives\n   allow an origin server to override the default cacheability of a\n   response:\n\n   public\n      Indicates that the response MAY be cached by any cache, even if it\n      would normally be non-cacheable or cacheable only within a non-\n      shared cache. (See also Authorization, <a href=\"#section-14.8\">section 14.8</a>, for\n      additional details.)\n\n   private\n      Indicates that all or part of the response message is intended for\n      a single user and MUST NOT be cached by a shared cache. This\n      allows an origin server to state that the specified parts of the\n\n      response are intended for only one user and are not a valid\n      response for requests by other users. A private (non-shared) cache\n      MAY cache the response.\n\n       Note: This usage of the word private only controls where the\n       response may be cached, and cannot ensure the privacy of the\n       message content.\n\n   no-cache\n       If the no-cache directive does not specify a field-name, then a\n      cache MUST NOT use the response to satisfy a subsequent request\n      without successful revalidation with the origin server. This\n      allows an origin server to prevent caching even by caches that\n      have been configured to return stale responses to client requests.\n\n      If the no-cache directive does specify one or more field-names,\n      then a cache MAY use the response to satisfy a subsequent request,\n      subject to any other restrictions on caching. However, the\n      specified field-name(s) MUST NOT be sent in the response to a\n      subsequent request without successful revalidation with the origin\n      server. This allows an origin server to prevent the re-use of\n      certain header fields in a response, while still allowing caching\n      of the rest of the response.\n\n       Note: Most HTTP/1.0 caches will not recognize or obey this\n       directive.\n\n<h4 class=\"h4\" id=\"section-14.9.2\">14.9.2 What May be Stored by Caches</h4>\n   no-store\n      The purpose of the no-store directive is to prevent the\n      inadvertent release or retention of sensitive information (for\n      example, on backup tapes). The no-store directive applies to the\n      entire message, and MAY be sent either in a response or in a\n      request. If sent in a request, a cache MUST NOT store any part of\n      either this request or any response to it. If sent in a response,\n      a cache MUST NOT store any part of either this response or the\n      request that elicited it. This directive applies to both non-\n      shared and shared caches. \"MUST NOT store\" in this context means\n      that the cache MUST NOT intentionally store the information in\n      non-volatile storage, and MUST make a best-effort attempt to\n      remove the information from volatile storage as promptly as\n      possible after forwarding it.\n\n      Even when this directive is associated with a response, users\n      might explicitly store such a response outside of the caching\n      system (e.g., with a \"Save As\" dialog). History buffers MAY store\n      such responses as part of their normal operation.\n\n      The purpose of this directive is to meet the stated requirements\n      of certain users and service authors who are concerned about\n      accidental releases of information via unanticipated accesses to\n      cache data structures. While the use of this directive might\n      improve privacy in some cases, we caution that it is NOT in any\n      way a reliable or sufficient mechanism for ensuring privacy. In\n      particular, malicious or compromised caches might not recognize or\n      obey this directive, and communications networks might be\n      vulnerable to eavesdropping.\n\n<h4 class=\"h4\" id=\"section-14.9.3\">14.9.3 Modifications of the Basic Expiration Mechanism</h4>\n   The expiration time of an entity MAY be specified by the origin\n   server using the Expires header (see <a href=\"#section-14.21\">section 14.21</a>). Alternatively,\n   it MAY be specified using the max-age directive in a response. When\n   the max-age cache-control directive is present in a cached response,\n   the response is stale if its current age is greater than the age\n   value given (in seconds) at the time of a new request for that\n   resource. The max-age directive on a response implies that the\n   response is cacheable (i.e., \"public\") unless some other, more\n   restrictive cache directive is also present.\n\n   If a response includes both an Expires header and a max-age\n   directive, the max-age directive overrides the Expires header, even\n   if the Expires header is more restrictive. This rule allows an origin\n   server to provide, for a given response, a longer expiration time to\n   an HTTP/1.1 (or later) cache than to an HTTP/1.0 cache. This might be\n   useful if certain HTTP/1.0 caches improperly calculate ages or\n   expiration times, perhaps due to desynchronized clocks.\n\n   Many HTTP/1.0 cache implementations will treat an Expires value that\n   is less than or equal to the response Date value as being equivalent\n   to the Cache-Control response directive \"no-cache\". If an HTTP/1.1\n   cache receives such a response, and the response does not include a\n   Cache-Control header field, it SHOULD consider the response to be\n   non-cacheable in order to retain compatibility with HTTP/1.0 servers.\n\n       Note: An origin server might wish to use a relatively new HTTP\n       cache control feature, such as the \"private\" directive, on a\n       network including older caches that do not understand that\n       feature. The origin server will need to combine the new feature\n       with an Expires field whose value is less than or equal to the\n       Date value. This will prevent older caches from improperly\n       caching the response.\n\n   s-maxage\n       If a response includes an s-maxage directive, then for a shared\n       cache (but not for a private cache), the maximum age specified by\n       this directive overrides the maximum age specified by either the\n       max-age directive or the Expires header. The s-maxage directive\n       also implies the semantics of the proxy-revalidate directive (see\n       <a href=\"#section-14.9.4\">section 14.9.4</a>), i.e., that the shared cache must not use the\n       entry after it becomes stale to respond to a subsequent request\n       without first revalidating it with the origin server. The s-\n       maxage directive is always ignored by a private cache.\n\n   Note that most older caches, not compliant with this specification,\n   do not implement any cache-control directives. An origin server\n   wishing to use a cache-control directive that restricts, but does not\n   prevent, caching by an HTTP/1.1-compliant cache MAY exploit the\n   requirement that the max-age directive overrides the Expires header,\n   and the fact that pre-HTTP/1.1-compliant caches do not observe the\n   max-age directive.\n\n   Other directives allow a user agent to modify the basic expiration\n   mechanism. These directives MAY be specified on a request:\n\n   max-age\n      Indicates that the client is willing to accept a response whose\n      age is no greater than the specified time in seconds. Unless max-\n      stale directive is also included, the client is not willing to\n      accept a stale response.\n\n   min-fresh\n      Indicates that the client is willing to accept a response whose\n      freshness lifetime is no less than its current age plus the\n      specified time in seconds. That is, the client wants a response\n      that will still be fresh for at least the specified number of\n      seconds.\n\n   max-stale\n      Indicates that the client is willing to accept a response that has\n      exceeded its expiration time. If max-stale is assigned a value,\n      then the client is willing to accept a response that has exceeded\n      its expiration time by no more than the specified number of\n      seconds. If no value is assigned to max-stale, then the client is\n      willing to accept a stale response of any age.\n\n   If a cache returns a stale response, either because of a max-stale\n   directive on a request, or because the cache is configured to\n   override the expiration time of a response, the cache MUST attach a\n   Warning header to the stale response, using Warning 110 (Response is\n   stale).\n\n   A cache MAY be configured to return stale responses without\n   validation, but only if this does not conflict with any \"MUST\"-level\n   requirements concerning cache validation (e.g., a \"must-revalidate\"\n   cache-control directive).\n\n   If both the new request and the cached entry include \"max-age\"\n   directives, then the lesser of the two values is used for determining\n   the freshness of the cached entry for that request.\n\n<h4 class=\"h4\" id=\"section-14.9.4\">14.9.4 Cache Revalidation and Reload Controls</h4>\n   Sometimes a user agent might want or need to insist that a cache\n   revalidate its cache entry with the origin server (and not just with\n   the next cache along the path to the origin server), or to reload its\n   cache entry from the origin server. End-to-end revalidation might be\n   necessary if either the cache or the origin server has overestimated\n   the expiration time of the cached response. End-to-end reload may be\n   necessary if the cache entry has become corrupted for some reason.\n\n   End-to-end revalidation may be requested either when the client does\n   not have its own local cached copy, in which case we call it\n   \"unspecified end-to-end revalidation\", or when the client does have a\n   local cached copy, in which case we call it \"specific end-to-end\n   revalidation.\"\n\n   The client can specify these three kinds of action using Cache-\n   Control request directives:\n\n   End-to-end reload\n      The request includes a \"no-cache\" cache-control directive or, for\n      compatibility with HTTP/1.0 clients, \"Pragma: no-cache\". Field\n      names MUST NOT be included with the no-cache directive in a\n      request. The server MUST NOT use a cached copy when responding to\n      such a request.\n\n   Specific end-to-end revalidation\n      The request includes a \"max-age=0\" cache-control directive, which\n      forces each cache along the path to the origin server to\n      revalidate its own entry, if any, with the next cache or server.\n      The initial request includes a cache-validating conditional with\n      the client's current validator.\n\n   Unspecified end-to-end revalidation\n      The request includes \"max-age=0\" cache-control directive, which\n      forces each cache along the path to the origin server to\n      revalidate its own entry, if any, with the next cache or server.\n      The initial request does not include a cache-validating\n\n      conditional; the first cache along the path (if any) that holds a\n      cache entry for this resource includes a cache-validating\n      conditional with its current validator.\n\n   max-age\n      When an intermediate cache is forced, by means of a max-age=0\n      directive, to revalidate its own cache entry, and the client has\n      supplied its own validator in the request, the supplied validator\n      might differ from the validator currently stored with the cache\n      entry. In this case, the cache MAY use either validator in making\n      its own request without affecting semantic transparency.\n\n      However, the choice of validator might affect performance. The\n      best approach is for the intermediate cache to use its own\n      validator when making its request. If the server replies with 304\n      (Not Modified), then the cache can return its now validated copy\n      to the client with a 200 (OK) response. If the server replies with\n      a new entity and cache validator, however, the intermediate cache\n      can compare the returned validator with the one provided in the\n      client's request, using the strong comparison function. If the\n      client's validator is equal to the origin server's, then the\n      intermediate cache simply returns 304 (Not Modified). Otherwise,\n      it returns the new entity with a 200 (OK) response.\n\n      If a request includes the no-cache directive, it SHOULD NOT\n      include min-fresh, max-stale, or max-age.\n\n   only-if-cached\n      In some cases, such as times of extremely poor network\n      connectivity, a client may want a cache to return only those\n      responses that it currently has stored, and not to reload or\n      revalidate with the origin server. To do this, the client may\n      include the only-if-cached directive in a request. If it receives\n      this directive, a cache SHOULD either respond using a cached entry\n      that is consistent with the other constraints of the request, or\n      respond with a 504 (Gateway Timeout) status. However, if a group\n      of caches is being operated as a unified system with good internal\n      connectivity, such a request MAY be forwarded within that group of\n      caches.\n\n   must-revalidate\n      Because a cache MAY be configured to ignore a server's specified\n      expiration time, and because a client request MAY include a max-\n      stale directive (which has a similar effect), the protocol also\n      includes a mechanism for the origin server to require revalidation\n      of a cache entry on any subsequent use. When the must-revalidate\n      directive is present in a response received by a cache, that cache\n      MUST NOT use the entry after it becomes stale to respond to a\n\n      subsequent request without first revalidating it with the origin\n      server. (I.e., the cache MUST do an end-to-end revalidation every\n      time, if, based solely on the origin server's Expires or max-age\n      value, the cached response is stale.)\n\n      The must-revalidate directive is necessary to support reliable\n      operation for certain protocol features. In all circumstances an\n      HTTP/1.1 cache MUST obey the must-revalidate directive; in\n      particular, if the cache cannot reach the origin server for any\n      reason, it MUST generate a 504 (Gateway Timeout) response.\n\n      Servers SHOULD send the must-revalidate directive if and only if\n      failure to revalidate a request on the entity could result in\n      incorrect operation, such as a silently unexecuted financial\n      transaction. Recipients MUST NOT take any automated action that\n      violates this directive, and MUST NOT automatically provide an\n      unvalidated copy of the entity if revalidation fails.\n\n      Although this is not recommended, user agents operating under\n      severe connectivity constraints MAY violate this directive but, if\n      so, MUST explicitly warn the user that an unvalidated response has\n      been provided. The warning MUST be provided on each unvalidated\n      access, and SHOULD require explicit user confirmation.\n\n   proxy-revalidate\n      The proxy-revalidate directive has the same meaning as the must-\n      revalidate directive, except that it does not apply to non-shared\n      user agent caches. It can be used on a response to an\n      authenticated request to permit the user's cache to store and\n      later return the response without needing to revalidate it (since\n      it has already been authenticated once by that user), while still\n      requiring proxies that service many users to revalidate each time\n      (in order to make sure that each user has been authenticated).\n      Note that such authenticated responses also need the public cache\n      control directive in order to allow them to be cached at all.\n\n<h4 class=\"h4\" id=\"section-14.9.5\">14.9.5 No-Transform Directive</h4>\n   no-transform\n      Implementors of intermediate caches (proxies) have found it useful\n      to convert the media type of certain entity bodies. A non-\n      transparent proxy might, for example, convert between image\n      formats in order to save cache space or to reduce the amount of\n      traffic on a slow link.\n\n      Serious operational problems occur, however, when these\n      transformations are applied to entity bodies intended for certain\n      kinds of applications. For example, applications for medical\n\n      imaging, scientific data analysis and those using end-to-end\n      authentication, all depend on receiving an entity body that is bit\n      for bit identical to the original entity-body.\n\n      Therefore, if a message includes the no-transform directive, an\n      intermediate cache or proxy MUST NOT change those headers that are\n      listed in <a href=\"#section-13.5.2\">section 13.5.2</a> as being subject to the no-transform\n      directive. This implies that the cache or proxy MUST NOT change\n      any aspect of the entity-body that is specified by these headers,\n      including the value of the entity-body itself.\n\n<h4 class=\"h4\" id=\"section-14.9.6\">14.9.6 Cache Control Extensions</h4>\n   The Cache-Control header field can be extended through the use of one\n   or more cache-extension tokens, each with an optional assigned value.\n   Informational extensions (those which do not require a change in\n   cache behavior) MAY be added without changing the semantics of other\n   directives. Behavioral extensions are designed to work by acting as\n   modifiers to the existing base of cache directives. Both the new\n   directive and the standard directive are supplied, such that\n   applications which do not understand the new directive will default\n   to the behavior specified by the standard directive, and those that\n   understand the new directive will recognize it as modifying the\n   requirements associated with the standard directive. In this way,\n   extensions to the cache-control directives can be made without\n   requiring changes to the base protocol.\n\n   This extension mechanism depends on an HTTP cache obeying all of the\n   cache-control directives defined for its native HTTP-version, obeying\n   certain extensions, and ignoring all directives that it does not\n   understand.\n\n   For example, consider a hypothetical new response directive called\n   community which acts as a modifier to the private directive. We\n   define this new directive to mean that, in addition to any non-shared\n   cache, any cache which is shared only by members of the community\n   named within its value may cache the response. An origin server\n   wishing to allow the UCI community to use an otherwise private\n   response in their shared cache(s) could do so by including\n\n       Cache-Control: private, community=\"UCI\"\n\n   A cache seeing this header field will act correctly even if the cache\n   does not understand the community cache-extension, since it will also\n   see and understand the private directive and thus default to the safe\n   behavior.\n\n   Unrecognized cache-directives MUST be ignored; it is assumed that any\n   cache-directive likely to be unrecognized by an HTTP/1.1 cache will\n   be combined with standard directives (or the response's default\n   cacheability) such that the cache behavior will remain minimally\n   correct even if the cache does not understand the extension(s).\n\n<h3 class=\"h3\" id=\"section-14.10\">14.10 Connection</h3>\n   The Connection general-header field allows the sender to specify\n   options that are desired for that particular connection and MUST NOT\n   be communicated by proxies over further connections.\n\n   The Connection header has the following grammar:\n\n       Connection = \"Connection\" \":\" 1#(connection-token)\n       connection-token  = token\n\n   HTTP/1.1 proxies MUST parse the Connection header field before a\n   message is forwarded and, for each connection-token in this field,\n   remove any header field(s) from the message with the same name as the\n   connection-token. Connection options are signaled by the presence of\n   a connection-token in the Connection header field, not by any\n   corresponding additional header field(s), since the additional header\n   field may not be sent if there are no parameters associated with that\n   connection option.\n\n   Message headers listed in the Connection header MUST NOT include\n   end-to-end headers, such as Cache-Control.\n\n   HTTP/1.1 defines the \"close\" connection option for the sender to\n   signal that the connection will be closed after completion of the\n   response. For example,\n\n       Connection: close\n\n   in either the request or the response header fields indicates that\n   the connection SHOULD NOT be considered `persistent' (<a href=\"#section-8.1\">section 8.1</a>)\n   after the current request/response is complete.\n\n   HTTP/1.1 applications that do not support persistent connections MUST\n   include the \"close\" connection option in every message.\n\n   A system receiving an HTTP/1.0 (or lower-version) message that\n   includes a Connection header MUST, for each connection-token in this\n   field, remove and ignore any header field(s) from the message with\n   the same name as the connection-token. This protects against mistaken\n   forwarding of such header fields by pre-HTTP/1.1 proxies. See <a href=\"#section-19.6.2\">section</a>\n   <a href=\"#section-19.6.2\">19.6.2</a>.\n\n<h3 class=\"h3\" id=\"section-14.11\">14.11 Content-Encoding</h3>\n   The Content-Encoding entity-header field is used as a modifier to the\n   media-type. When present, its value indicates what additional content\n   codings have been applied to the entity-body, and thus what decoding\n   mechanisms must be applied in order to obtain the media-type\n   referenced by the Content-Type header field. Content-Encoding is\n   primarily used to allow a document to be compressed without losing\n   the identity of its underlying media type.\n\n       Content-Encoding  = \"Content-Encoding\" \":\" 1#content-coding\n\n   Content codings are defined in <a href=\"#section-3.5\">section 3.5</a>. An example of its use is\n\n       Content-Encoding: gzip\n\n   The content-coding is a characteristic of the entity identified by\n   the Request-URI. Typically, the entity-body is stored with this\n   encoding and is only decoded before rendering or analogous usage.\n   However, a non-transparent proxy MAY modify the content-coding if the\n   new coding is known to be acceptable to the recipient, unless the\n   \"no-transform\" cache-control directive is present in the message.\n\n   If the content-coding of an entity is not \"identity\", then the\n   response MUST include a Content-Encoding entity-header (<a href=\"#section-14.11\">section</a>\n   <a href=\"#section-14.11\">14.11</a>) that lists the non-identity content-coding(s) used.\n\n   If the content-coding of an entity in a request message is not\n   acceptable to the origin server, the server SHOULD respond with a\n   status code of 415 (Unsupported Media Type).\n\n   If multiple encodings have been applied to an entity, the content\n   codings MUST be listed in the order in which they were applied.\n   Additional information about the encoding parameters MAY be provided\n   by other entity-header fields not defined by this specification.\n\n<h3 class=\"h3\" id=\"section-14.12\">14.12 Content-Language</h3>\n   The Content-Language entity-header field describes the natural\n   language(s) of the intended audience for the enclosed entity. Note\n   that this might not be equivalent to all the languages used within\n   the entity-body.\n\n       Content-Language  = \"Content-Language\" \":\" 1#language-tag\n\n   Language tags are defined in <a href=\"#section-3.10\">section 3.10</a>. The primary purpose of\n   Content-Language is to allow a user to identify and differentiate\n   entities according to the user's own preferred language. Thus, if the\n   body content is intended only for a Danish-literate audience, the\n   appropriate field is\n\n       Content-Language: da\n\n   If no Content-Language is specified, the default is that the content\n   is intended for all language audiences. This might mean that the\n   sender does not consider it to be specific to any natural language,\n   or that the sender does not know for which language it is intended.\n\n   Multiple languages MAY be listed for content that is intended for\n   multiple audiences. For example, a rendition of the \"Treaty of\n   Waitangi,\" presented simultaneously in the original Maori and English\n   versions, would call for\n\n       Content-Language: mi, en\n\n   However, just because multiple languages are present within an entity\n   does not mean that it is intended for multiple linguistic audiences.\n   An example would be a beginner's language primer, such as \"A First\n   Lesson in Latin,\" which is clearly intended to be used by an\n   English-literate audience. In this case, the Content-Language would\n   properly only include \"en\".\n\n   Content-Language MAY be applied to any media type -- it is not\n   limited to textual documents.\n\n<h3 class=\"h3\" id=\"section-14.13\">14.13 Content-Length</h3>\n   The Content-Length entity-header field indicates the size of the\n   entity-body, in decimal number of OCTETs, sent to the recipient or,\n   in the case of the HEAD method, the size of the entity-body that\n   would have been sent had the request been a GET.\n\n       Content-Length    = \"Content-Length\" \":\" 1*DIGIT\n\n   An example is\n\n       Content-Length: 3495\n\n   Applications SHOULD use this field to indicate the transfer-length of\n   the message-body, unless this is prohibited by the rules in <a href=\"#section-4.4\">section</a>\n   <a href=\"#section-4.4\">4.4</a>.\n\n   Any Content-Length greater than or equal to zero is a valid value.\n   <a href=\"#section-4.4\">Section 4.4</a> describes how to determine the length of a message-body\n   if a Content-Length is not given.\n\n   Note that the meaning of this field is significantly different from\n   the corresponding definition in MIME, where it is an optional field\n   used within the \"message/external-body\" content-type. In HTTP, it\n   SHOULD be sent whenever the message's length can be determined prior\n   to being transferred, unless this is prohibited by the rules in\n   <a href=\"#section-4.4\">section 4.4</a>.\n\n<h3 class=\"h3\" id=\"section-14.14\">14.14 Content-Location</h3>\n   The Content-Location entity-header field MAY be used to supply the\n   resource location for the entity enclosed in the message when that\n   entity is accessible from a location separate from the requested\n   resource's URI. A server SHOULD provide a Content-Location for the\n   variant corresponding to the response entity; especially in the case\n   where a resource has multiple entities associated with it, and those\n   entities actually have separate locations by which they might be\n   individually accessed, the server SHOULD provide a Content-Location\n   for the particular variant which is returned.\n\n       Content-Location = \"Content-Location\" \":\"\n                         ( absoluteURI | relativeURI )\n\n   The value of Content-Location also defines the base URI for the\n   entity.\n\n   The Content-Location value is not a replacement for the original\n   requested URI; it is only a statement of the location of the resource\n   corresponding to this particular entity at the time of the request.\n   Future requests MAY specify the Content-Location URI as the request-\n   URI if the desire is to identify the source of that particular\n   entity.\n\n   A cache cannot assume that an entity with a Content-Location\n   different from the URI used to retrieve it can be used to respond to\n   later requests on that Content-Location URI. However, the Content-\n   Location can be used to differentiate between multiple entities\n   retrieved from a single requested resource, as described in <a href=\"#section-13.6\">section</a>\n   <a href=\"#section-13.6\">13.6</a>.\n\n   If the Content-Location is a relative URI, the relative URI is\n   interpreted relative to the Request-URI.\n\n   The meaning of the Content-Location header in PUT or POST requests is\n   undefined; servers are free to ignore it in those cases.\n\n<h3 class=\"h3\" id=\"section-14.15\">14.15 Content-MD5</h3>\n   The Content-MD5 entity-header field, as defined in <a href=\"https://tools.ietf.org/html/rfc1864\">RFC 1864</a> [<a href=\"#ref-23\" title='\"The Content-MD5 Header Field\"'>23</a>], is\n   an MD5 digest of the entity-body for the purpose of providing an\n   end-to-end message integrity check (MIC) of the entity-body. (Note: a\n   MIC is good for detecting accidental modification of the entity-body\n   in transit, but is not proof against malicious attacks.)\n\n        Content-MD5   = \"Content-MD5\" \":\" md5-digest\n        md5-digest   = &lt;base64 of 128 bit MD5 digest as per <a href=\"https://tools.ietf.org/html/rfc1864\">RFC 1864</a>&gt;\n\n   The Content-MD5 header field MAY be generated by an origin server or\n   client to function as an integrity check of the entity-body. Only\n   origin servers or clients MAY generate the Content-MD5 header field;\n   proxies and gateways MUST NOT generate it, as this would defeat its\n   value as an end-to-end integrity check. Any recipient of the entity-\n   body, including gateways and proxies, MAY check that the digest value\n   in this header field matches that of the entity-body as received.\n\n   The MD5 digest is computed based on the content of the entity-body,\n   including any content-coding that has been applied, but not including\n   any transfer-encoding applied to the message-body. If the message is\n   received with a transfer-encoding, that encoding MUST be removed\n   prior to checking the Content-MD5 value against the received entity.\n\n   This has the result that the digest is computed on the octets of the\n   entity-body exactly as, and in the order that, they would be sent if\n   no transfer-encoding were being applied.\n\n   HTTP extends <a href=\"https://tools.ietf.org/html/rfc1864\">RFC 1864</a> to permit the digest to be computed for MIME\n   composite media-types (e.g., multipart/* and message/rfc822), but\n   this does not change how the digest is computed as defined in the\n   preceding paragraph.\n\n   There are several consequences of this. The entity-body for composite\n   types MAY contain many body-parts, each with its own MIME and HTTP\n   headers (including Content-MD5, Content-Transfer-Encoding, and\n   Content-Encoding headers). If a body-part has a Content-Transfer-\n   Encoding or Content-Encoding header, it is assumed that the content\n   of the body-part has had the encoding applied, and the body-part is\n   included in the Content-MD5 digest as is -- i.e., after the\n   application. The Transfer-Encoding header field is not allowed within\n   body-parts.\n\n   Conversion of all line breaks to CRLF MUST NOT be done before\n   computing or checking the digest: the line break convention used in\n   the text actually transmitted MUST be left unaltered when computing\n   the digest.\n\n      Note: while the definition of Content-MD5 is exactly the same for\n      HTTP as in <a href=\"https://tools.ietf.org/html/rfc1864\">RFC 1864</a> for MIME entity-bodies, there are several ways\n      in which the application of Content-MD5 to HTTP entity-bodies\n      differs from its application to MIME entity-bodies. One is that\n      HTTP, unlike MIME, does not use Content-Transfer-Encoding, and\n      does use Transfer-Encoding and Content-Encoding. Another is that\n      HTTP more frequently uses binary content types than MIME, so it is\n      worth noting that, in such cases, the byte order used to compute\n      the digest is the transmission byte order defined for the type.\n      Lastly, HTTP allows transmission of text types with any of several\n      line break conventions and not just the canonical form using CRLF.\n\n<h3 class=\"h3\" id=\"section-14.16\">14.16 Content-Range</h3>\n   The Content-Range entity-header is sent with a partial entity-body to\n   specify where in the full entity-body the partial body should be\n   applied. Range units are defined in <a href=\"#section-3.12\">section 3.12</a>.\n\n       Content-Range = \"Content-Range\" \":\" content-range-spec\n\n       content-range-spec      = byte-content-range-spec\n       byte-content-range-spec = bytes-unit SP\n                                 byte-range-resp-spec \"/\"\n                                 ( instance-length | \"*\" )\n\n       byte-range-resp-spec = (first-byte-pos \"-\" last-byte-pos)\n                                      | \"*\"\n       instance-length           = 1*DIGIT\n\n   The header SHOULD indicate the total length of the full entity-body,\n   unless this length is unknown or difficult to determine. The asterisk\n   \"*\" character means that the instance-length is unknown at the time\n   when the response was generated.\n\n   Unlike byte-ranges-specifier values (see <a href=\"#section-14.35.1\">section 14.35.1</a>), a byte-\n   range-resp-spec MUST only specify one range, and MUST contain\n   absolute byte positions for both the first and last byte of the\n   range.\n\n   A byte-content-range-spec with a byte-range-resp-spec whose last-\n   byte-pos value is less than its first-byte-pos value, or whose\n   instance-length value is less than or equal to its last-byte-pos\n   value, is invalid. The recipient of an invalid byte-content-range-\n   spec MUST ignore it and any content transferred along with it.\n\n   A server sending a response with status code 416 (Requested range not\n   satisfiable) SHOULD include a Content-Range field with a byte-range-\n   resp-spec of \"*\". The instance-length specifies the current length of\n\n   the selected resource. A response with status code 206 (Partial\n   Content) MUST NOT include a Content-Range field with a byte-range-\n   resp-spec of \"*\".\n\n   Examples of byte-content-range-spec values, assuming that the entity\n   contains a total of 1234 bytes:\n\n      . The first 500 bytes:\n       bytes 0-499/1234\n\n      . The second 500 bytes:\n       bytes 500-999/1234\n\n      . All except for the first 500 bytes:\n       bytes 500-1233/1234\n\n      . The last 500 bytes:\n       bytes 734-1233/1234\n\n   When an HTTP message includes the content of a single range (for\n   example, a response to a request for a single range, or to a request\n   for a set of ranges that overlap without any holes), this content is\n   transmitted with a Content-Range header, and a Content-Length header\n   showing the number of bytes actually transferred. For example,\n\n       HTTP/1.1 206 Partial content\n       Date: Wed, 15 Nov 1995 06:25:24 GMT\n       Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT\n       Content-Range: bytes 21010-47021/47022\n       Content-Length: 26012\n       Content-Type: image/gif\n\n   When an HTTP message includes the content of multiple ranges (for\n   example, a response to a request for multiple non-overlapping\n   ranges), these are transmitted as a multipart message. The multipart\n   media type used for this purpose is \"multipart/byteranges\" as defined\n   in appendix 19.2. See appendix 19.6.3 for a compatibility issue.\n\n   A response to a request for a single range MUST NOT be sent using the\n   multipart/byteranges media type.  A response to a request for\n   multiple ranges, whose result is a single range, MAY be sent as a\n   multipart/byteranges media type with one part. A client that cannot\n   decode a multipart/byteranges message MUST NOT ask for multiple\n   byte-ranges in a single request.\n\n   When a client requests multiple byte-ranges in one request, the\n   server SHOULD return them in the order that they appeared in the\n   request.\n\n   If the server ignores a byte-range-spec because it is syntactically\n   invalid, the server SHOULD treat the request as if the invalid Range\n   header field did not exist. (Normally, this means return a 200\n   response containing the full entity).\n\n   If the server receives a request (other than one including an If-\n   Range request-header field) with an unsatisfiable Range request-\n   header field (that is, all of whose byte-range-spec values have a\n   first-byte-pos value greater than the current length of the selected\n   resource), it SHOULD return a response code of 416 (Requested range\n   not satisfiable) (<a href=\"#section-10.4.17\">section 10.4.17</a>).\n\n      Note: clients cannot depend on servers to send a 416 (Requested\n      range not satisfiable) response instead of a 200 (OK) response for\n      an unsatisfiable Range request-header, since not all servers\n      implement this request-header.\n\n<h3 class=\"h3\" id=\"section-14.17\">14.17 Content-Type</h3>\n   The Content-Type entity-header field indicates the media type of the\n   entity-body sent to the recipient or, in the case of the HEAD method,\n   the media type that would have been sent had the request been a GET.\n\n       Content-Type   = \"Content-Type\" \":\" media-type\n\n   Media types are defined in <a href=\"#section-3.7\">section 3.7</a>. An example of the field is\n\n       Content-Type: text/html; charset=ISO-8859-4\n\n   Further discussion of methods for identifying the media type of an\n   entity is provided in <a href=\"#section-7.2.1\">section 7.2.1</a>.\n\n<h3 class=\"h3\" id=\"section-14.18\">14.18 Date</h3>\n   The Date general-header field represents the date and time at which\n   the message was originated, having the same semantics as orig-date in\n   <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a>. The field value is an HTTP-date, as described in <a href=\"#section-3.3.1\">section</a>\n   <a href=\"#section-3.3.1\">3.3.1</a>; it MUST be sent in <a href=\"https://tools.ietf.org/html/rfc1123\">RFC 1123</a> [<a href=\"#ref-8\" title='\"Requirements for Internet Hosts -- Communication Layers\"'>8</a>]-date format.\n\n       Date  = \"Date\" \":\" HTTP-date\n\n   An example is\n\n       Date: Tue, 15 Nov 1994 08:12:31 GMT\n\n   Origin servers MUST include a Date header field in all responses,\n   except in these cases:\n\n      1. If the response status code is 100 (Continue) or 101 (Switching\n         Protocols), the response MAY include a Date header field, at\n         the server's option.\n\n      2. If the response status code conveys a server error, e.g. 500\n         (Internal Server Error) or 503 (Service Unavailable), and it is\n         inconvenient or impossible to generate a valid Date.\n\n      3. If the server does not have a clock that can provide a\n         reasonable approximation of the current time, its responses\n         MUST NOT include a Date header field. In this case, the rules\n         in <a href=\"#section-14.18.1\">section 14.18.1</a> MUST be followed.\n\n   A received message that does not have a Date header field MUST be\n   assigned one by the recipient if the message will be cached by that\n   recipient or gatewayed via a protocol which requires a Date. An HTTP\n   implementation without a clock MUST NOT cache responses without\n   revalidating them on every use. An HTTP cache, especially a shared\n   cache, SHOULD use a mechanism, such as NTP [<a href=\"#ref-28\" title='\"Network Time Protocol (Version 3) Specification, Implementation and Analysis\"'>28</a>], to synchronize its\n   clock with a reliable external standard.\n\n   Clients SHOULD only send a Date header field in messages that include\n   an entity-body, as in the case of the PUT and POST requests, and even\n   then it is optional. A client without a clock MUST NOT send a Date\n   header field in a request.\n\n   The HTTP-date sent in a Date header SHOULD NOT represent a date and\n   time subsequent to the generation of the message. It SHOULD represent\n   the best available approximation of the date and time of message\n   generation, unless the implementation has no means of generating a\n   reasonably accurate date and time. In theory, the date ought to\n   represent the moment just before the entity is generated. In\n   practice, the date can be generated at any time during the message\n   origination without affecting its semantic value.\n\n<h4 class=\"h4\" id=\"section-14.18.1\">14.18.1 Clockless Origin Server Operation</h4>\n   Some origin server implementations might not have a clock available.\n   An origin server without a clock MUST NOT assign Expires or Last-\n   Modified values to a response, unless these values were associated\n   with the resource by a system or user with a reliable clock. It MAY\n   assign an Expires value that is known, at or before server\n   configuration time, to be in the past (this allows \"pre-expiration\"\n   of responses without storing separate Expires values for each\n   resource).\n\n<h3 class=\"h3\" id=\"section-14.19\">14.19 ETag</h3>\n   The ETag response-header field provides the current value of the\n   entity tag for the requested variant. The headers used with entity\n   tags are described in sections <a href=\"#section-14.24\">14.24</a>, <a href=\"#section-14.26\">14.26</a> and <a href=\"#section-14.44\">14.44</a>. The entity tag\n   MAY be used for comparison with other entities from the same resource\n   (see <a href=\"#section-13.3.3\">section 13.3.3</a>).\n\n      ETag = \"ETag\" \":\" entity-tag\n\n   Examples:\n\n      ETag: \"xyzzy\"\n      ETag: W/\"xyzzy\"\n      ETag: \"\"\n\n<h3 class=\"h3\" id=\"section-14.20\">14.20 Expect</h3>\n   The Expect request-header field is used to indicate that particular\n   server behaviors are required by the client.\n\n      Expect       =  \"Expect\" \":\" 1#expectation\n\n      expectation  =  \"100-continue\" | expectation-extension\n      expectation-extension =  token [ \"=\" ( token | quoted-string )\n                               *expect-params ]\n      expect-params =  \";\" token [ \"=\" ( token | quoted-string ) ]\n\n\n   A server that does not understand or is unable to comply with any of\n   the expectation values in the Expect field of a request MUST respond\n   with appropriate error status. The server MUST respond with a 417\n   (Expectation Failed) status if any of the expectations cannot be met\n   or, if there are other problems with the request, some other 4xx\n   status.\n\n   This header field is defined with extensible syntax to allow for\n   future extensions. If a server receives a request containing an\n   Expect field that includes an expectation-extension that it does not\n   support, it MUST respond with a 417 (Expectation Failed) status.\n\n   Comparison of expectation values is case-insensitive for unquoted\n   tokens (including the 100-continue token), and is case-sensitive for\n   quoted-string expectation-extensions.\n\n   The Expect mechanism is hop-by-hop: that is, an HTTP/1.1 proxy MUST\n   return a 417 (Expectation Failed) status if it receives a request\n   with an expectation that it cannot meet. However, the Expect\n   request-header itself is end-to-end; it MUST be forwarded if the\n   request is forwarded.\n\n   Many older HTTP/1.0 and HTTP/1.1 applications do not understand the\n   Expect header.\n\n   See <a href=\"#section-8.2.3\">section 8.2.3</a> for the use of the 100 (continue) status.\n\n<h3 class=\"h3\" id=\"section-14.21\">14.21 Expires</h3>\n   The Expires entity-header field gives the date/time after which the\n   response is considered stale. A stale cache entry may not normally be\n   returned by a cache (either a proxy cache or a user agent cache)\n   unless it is first validated with the origin server (or with an\n   intermediate cache that has a fresh copy of the entity). See <a href=\"#section-13.2\">section</a>\n   <a href=\"#section-13.2\">13.2</a> for further discussion of the expiration model.\n\n   The presence of an Expires field does not imply that the original\n   resource will change or cease to exist at, before, or after that\n   time.\n\n   The format is an absolute date and time as defined by HTTP-date in\n   <a href=\"#section-3.3.1\">section 3.3.1</a>; it MUST be in <a href=\"https://tools.ietf.org/html/rfc1123\">RFC 1123</a> date format:\n\n      Expires = \"Expires\" \":\" HTTP-date\n\n   An example of its use is\n\n      Expires: Thu, 01 Dec 1994 16:00:00 GMT\n\n      Note: if a response includes a Cache-Control field with the max-\n      age directive (see <a href=\"#section-14.9.3\">section 14.9.3</a>), that directive overrides the\n      Expires field.\n\n   HTTP/1.1 clients and caches MUST treat other invalid date formats,\n   especially including the value \"0\", as in the past (i.e., \"already\n   expired\").\n\n   To mark a response as \"already expired,\" an origin server sends an\n   Expires date that is equal to the Date header value. (See the rules\n   for expiration calculations in <a href=\"#section-13.2.4\">section 13.2.4</a>.)\n\n   To mark a response as \"never expires,\" an origin server sends an\n   Expires date approximately one year from the time the response is\n   sent. HTTP/1.1 servers SHOULD NOT send Expires dates more than one\n   year in the future.\n\n   The presence of an Expires header field with a date value of some\n   time in the future on a response that otherwise would by default be\n   non-cacheable indicates that the response is cacheable, unless\n   indicated otherwise by a Cache-Control header field (<a href=\"#section-14.9\">section 14.9</a>).\n\n<h3 class=\"h3\" id=\"section-14.22\">14.22 From</h3>\n   The From request-header field, if given, SHOULD contain an Internet\n   e-mail address for the human user who controls the requesting user\n   agent. The address SHOULD be machine-usable, as defined by \"mailbox\"\n   in <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a> [<a href=\"#ref-9\" title='\"Standard for The Format of ARPA Internet Text Messages\"'>9</a>] as updated by <a href=\"https://tools.ietf.org/html/rfc1123\">RFC 1123</a> [<a href=\"#ref-8\" title='\"Requirements for Internet Hosts -- Communication Layers\"'>8</a>]:\n\n       From   = \"From\" \":\" mailbox\n\n   An example is:\n\n       From: webmaster@w3.org\n\n   This header field MAY be used for logging purposes and as a means for\n   identifying the source of invalid or unwanted requests. It SHOULD NOT\n   be used as an insecure form of access protection. The interpretation\n   of this field is that the request is being performed on behalf of the\n   person given, who accepts responsibility for the method performed. In\n   particular, robot agents SHOULD include this header so that the\n   person responsible for running the robot can be contacted if problems\n   occur on the receiving end.\n\n   The Internet e-mail address in this field MAY be separate from the\n   Internet host which issued the request. For example, when a request\n   is passed through a proxy the original issuer's address SHOULD be\n   used.\n\n   The client SHOULD NOT send the From header field without the user's\n   approval, as it might conflict with the user's privacy interests or\n   their site's security policy. It is strongly recommended that the\n   user be able to disable, enable, and modify the value of this field\n   at any time prior to a request.\n\n<h3 class=\"h3\" id=\"section-14.23\">14.23 Host</h3>\n   The Host request-header field specifies the Internet host and port\n   number of the resource being requested, as obtained from the original\n   URI given by the user or referring resource (generally an HTTP URL,\n\n   as described in <a href=\"#section-3.2.2\">section 3.2.2</a>). The Host field value MUST represent\n   the naming authority of the origin server or gateway given by the\n   original URL. This allows the origin server or gateway to\n   differentiate between internally-ambiguous URLs, such as the root \"/\"\n   URL of a server for multiple host names on a single IP address.\n\n       Host = \"Host\" \":\" host [ \":\" port ] ; <a href=\"#section-3.2.2\">Section 3.2.2</a>\n\n   A \"host\" without any trailing port information implies the default\n   port for the service requested (e.g., \"80\" for an HTTP URL). For\n   example, a request on the origin server for\n   &lt;<a href=\"http://www.w3.org/pub/WWW/\">http://www.w3.org/pub/WWW/</a>&gt; would properly include:\n\n       GET /pub/WWW/ HTTP/1.1\n       Host: www.w3.org\n\n   A client MUST include a Host header field in all HTTP/1.1 request\n   messages . If the requested URI does not include an Internet host\n   name for the service being requested, then the Host header field MUST\n   be given with an empty value. An HTTP/1.1 proxy MUST ensure that any\n   request message it forwards does contain an appropriate Host header\n   field that identifies the service being requested by the proxy. All\n   Internet-based HTTP/1.1 servers MUST respond with a 400 (Bad Request)\n   status code to any HTTP/1.1 request message which lacks a Host header\n   field.\n\n   See sections <a href=\"#section-5.2\">5.2</a> and <a href=\"#section-19.6.1.1\">19.6.1.1</a> for other requirements relating to\n   Host.\n\n<h3 class=\"h3\" id=\"section-14.24\">14.24 If-Match</h3>\n   The If-Match request-header field is used with a method to make it\n   conditional. A client that has one or more entities previously\n   obtained from the resource can verify that one of those entities is\n   current by including a list of their associated entity tags in the\n   If-Match header field. Entity tags are defined in <a href=\"#section-3.11\">section 3.11</a>. The\n   purpose of this feature is to allow efficient updates of cached\n   information with a minimum amount of transaction overhead. It is also\n   used, on updating requests, to prevent inadvertent modification of\n   the wrong version of a resource. As a special case, the value \"*\"\n   matches any current entity of the resource.\n\n       If-Match = \"If-Match\" \":\" ( \"*\" | 1#entity-tag )\n\n   If any of the entity tags match the entity tag of the entity that\n   would have been returned in the response to a similar GET request\n   (without the If-Match header) on that resource, or if \"*\" is given\n\n   and any current entity exists for that resource, then the server MAY\n   perform the requested method as if the If-Match header field did not\n   exist.\n\n   A server MUST use the strong comparison function (see <a href=\"#section-13.3.3\">section 13.3.3</a>)\n   to compare the entity tags in If-Match.\n\n   If none of the entity tags match, or if \"*\" is given and no current\n   entity exists, the server MUST NOT perform the requested method, and\n   MUST return a 412 (Precondition Failed) response. This behavior is\n   most useful when the client wants to prevent an updating method, such\n   as PUT, from modifying a resource that has changed since the client\n   last retrieved it.\n\n   If the request would, without the If-Match header field, result in\n   anything other than a 2xx or 412 status, then the If-Match header\n   MUST be ignored.\n\n   The meaning of \"If-Match: *\" is that the method SHOULD be performed\n   if the representation selected by the origin server (or by a cache,\n   possibly using the Vary mechanism, see <a href=\"#section-14.44\">section 14.44</a>) exists, and\n   MUST NOT be performed if the representation does not exist.\n\n   A request intended to update a resource (e.g., a PUT) MAY include an\n   If-Match header field to signal that the request method MUST NOT be\n   applied if the entity corresponding to the If-Match value (a single\n   entity tag) is no longer a representation of that resource. This\n   allows the user to indicate that they do not wish the request to be\n   successful if the resource has been changed without their knowledge.\n   Examples:\n\n       If-Match: \"xyzzy\"\n       If-Match: \"xyzzy\", \"r2d2xxxx\", \"c3piozzzz\"\n       If-Match: *\n\n   The result of a request having both an If-Match header field and\n   either an If-None-Match or an If-Modified-Since header fields is\n   undefined by this specification.\n\n<h3 class=\"h3\" id=\"section-14.25\">14.25 If-Modified-Since</h3>\n   The If-Modified-Since request-header field is used with a method to\n   make it conditional: if the requested variant has not been modified\n   since the time specified in this field, an entity will not be\n   returned from the server; instead, a 304 (not modified) response will\n   be returned without any message-body.\n\n       If-Modified-Since = \"If-Modified-Since\" \":\" HTTP-date\n\n   An example of the field is:\n\n       If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT\n\n   A GET method with an If-Modified-Since header and no Range header\n   requests that the identified entity be transferred only if it has\n   been modified since the date given by the If-Modified-Since header.\n   The algorithm for determining this includes the following cases:\n\n      a) If the request would normally result in anything other than a\n         200 (OK) status, or if the passed If-Modified-Since date is\n         invalid, the response is exactly the same as for a normal GET.\n         A date which is later than the server's current time is\n         invalid.\n\n      b) If the variant has been modified since the If-Modified-Since\n         date, the response is exactly the same as for a normal GET.\n\n      c) If the variant has not been modified since a valid If-\n         Modified-Since date, the server SHOULD return a 304 (Not\n         Modified) response.\n\n   The purpose of this feature is to allow efficient updates of cached\n   information with a minimum amount of transaction overhead.\n\n      Note: The Range request-header field modifies the meaning of If-\n      Modified-Since; see <a href=\"#section-14.35\">section 14.35</a> for full details.\n\n      Note: If-Modified-Since times are interpreted by the server, whose\n      clock might not be synchronized with the client.\n\n      Note: When handling an If-Modified-Since header field, some\n      servers will use an exact date comparison function, rather than a\n      less-than function, for deciding whether to send a 304 (Not\n      Modified) response. To get best results when sending an If-\n      Modified-Since header field for cache validation, clients are\n      advised to use the exact date string received in a previous Last-\n      Modified header field whenever possible.\n\n      Note: If a client uses an arbitrary date in the If-Modified-Since\n      header instead of a date taken from the Last-Modified header for\n      the same request, the client should be aware of the fact that this\n      date is interpreted in the server's understanding of time. The\n      client should consider unsynchronized clocks and rounding problems\n      due to the different encodings of time between the client and\n      server. This includes the possibility of race conditions if the\n      document has changed between the time it was first requested and\n      the If-Modified-Since date of a subsequent request, and the\n\n      possibility of clock-skew-related problems if the If-Modified-\n      Since date is derived from the client's clock without correction\n      to the server's clock. Corrections for different time bases\n      between client and server are at best approximate due to network\n      latency.\n\n   The result of a request having both an If-Modified-Since header field\n   and either an If-Match or an If-Unmodified-Since header fields is\n   undefined by this specification.\n\n<h3 class=\"h3\" id=\"section-14.26\">14.26 If-None-Match</h3>\n   The If-None-Match request-header field is used with a method to make\n   it conditional. A client that has one or more entities previously\n   obtained from the resource can verify that none of those entities is\n   current by including a list of their associated entity tags in the\n   If-None-Match header field. The purpose of this feature is to allow\n   efficient updates of cached information with a minimum amount of\n   transaction overhead. It is also used to prevent a method (e.g. PUT)\n   from inadvertently modifying an existing resource when the client\n   believes that the resource does not exist.\n\n   As a special case, the value \"*\" matches any current entity of the\n   resource.\n\n       If-None-Match = \"If-None-Match\" \":\" ( \"*\" | 1#entity-tag )\n\n   If any of the entity tags match the entity tag of the entity that\n   would have been returned in the response to a similar GET request\n   (without the If-None-Match header) on that resource, or if \"*\" is\n   given and any current entity exists for that resource, then the\n   server MUST NOT perform the requested method, unless required to do\n   so because the resource's modification date fails to match that\n   supplied in an If-Modified-Since header field in the request.\n   Instead, if the request method was GET or HEAD, the server SHOULD\n   respond with a 304 (Not Modified) response, including the cache-\n   related header fields (particularly ETag) of one of the entities that\n   matched. For all other request methods, the server MUST respond with\n   a status of 412 (Precondition Failed).\n\n   See <a href=\"#section-13.3.3\">section 13.3.3</a> for rules on how to determine if two entities tags\n   match. The weak comparison function can only be used with GET or HEAD\n   requests.\n\n   If none of the entity tags match, then the server MAY perform the\n   requested method as if the If-None-Match header field did not exist,\n   but MUST also ignore any If-Modified-Since header field(s) in the\n   request. That is, if no entity tags match, then the server MUST NOT\n   return a 304 (Not Modified) response.\n\n   If the request would, without the If-None-Match header field, result\n   in anything other than a 2xx or 304 status, then the If-None-Match\n   header MUST be ignored. (See <a href=\"#section-13.3.4\">section 13.3.4</a> for a discussion of\n   server behavior when both If-Modified-Since and If-None-Match appear\n   in the same request.)\n\n   The meaning of \"If-None-Match: *\" is that the method MUST NOT be\n   performed if the representation selected by the origin server (or by\n   a cache, possibly using the Vary mechanism, see <a href=\"#section-14.44\">section 14.44</a>)\n   exists, and SHOULD be performed if the representation does not exist.\n   This feature is intended to be useful in preventing races between PUT\n   operations.\n\n   Examples:\n\n       If-None-Match: \"xyzzy\"\n       If-None-Match: W/\"xyzzy\"\n       If-None-Match: \"xyzzy\", \"r2d2xxxx\", \"c3piozzzz\"\n       If-None-Match: W/\"xyzzy\", W/\"r2d2xxxx\", W/\"c3piozzzz\"\n       If-None-Match: *\n\n   The result of a request having both an If-None-Match header field and\n   either an If-Match or an If-Unmodified-Since header fields is\n   undefined by this specification.\n\n<h3 class=\"h3\" id=\"section-14.27\">14.27 If-Range</h3>\n   If a client has a partial copy of an entity in its cache, and wishes\n   to have an up-to-date copy of the entire entity in its cache, it\n   could use the Range request-header with a conditional GET (using\n   either or both of If-Unmodified-Since and If-Match.) However, if the\n   condition fails because the entity has been modified, the client\n   would then have to make a second request to obtain the entire current\n   entity-body.\n\n   The If-Range header allows a client to \"short-circuit\" the second\n   request. Informally, its meaning is `if the entity is unchanged, send\n   me the part(s) that I am missing; otherwise, send me the entire new\n   entity'.\n\n        If-Range = \"If-Range\" \":\" ( entity-tag | HTTP-date )\n\n   If the client has no entity tag for an entity, but does have a Last-\n   Modified date, it MAY use that date in an If-Range header. (The\n   server can distinguish between a valid HTTP-date and any form of\n   entity-tag by examining no more than two characters.) The If-Range\n   header SHOULD only be used together with a Range header, and MUST be\n   ignored if the request does not include a Range header, or if the\n   server does not support the sub-range operation.\n\n   If the entity tag given in the If-Range header matches the current\n   entity tag for the entity, then the server SHOULD provide the\n   specified sub-range of the entity using a 206 (Partial content)\n   response. If the entity tag does not match, then the server SHOULD\n   return the entire entity using a 200 (OK) response.\n\n<h3 class=\"h3\" id=\"section-14.28\">14.28 If-Unmodified-Since</h3>\n   The If-Unmodified-Since request-header field is used with a method to\n   make it conditional. If the requested resource has not been modified\n   since the time specified in this field, the server SHOULD perform the\n   requested operation as if the If-Unmodified-Since header were not\n   present.\n\n   If the requested variant has been modified since the specified time,\n   the server MUST NOT perform the requested operation, and MUST return\n   a 412 (Precondition Failed).\n\n      If-Unmodified-Since = \"If-Unmodified-Since\" \":\" HTTP-date\n\n   An example of the field is:\n\n       If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT\n\n   If the request normally (i.e., without the If-Unmodified-Since\n   header) would result in anything other than a 2xx or 412 status, the\n   If-Unmodified-Since header SHOULD be ignored.\n\n   If the specified date is invalid, the header is ignored.\n\n   The result of a request having both an If-Unmodified-Since header\n   field and either an If-None-Match or an If-Modified-Since header\n   fields is undefined by this specification.\n\n<h3 class=\"h3\" id=\"section-14.29\">14.29 Last-Modified</h3>\n   The Last-Modified entity-header field indicates the date and time at\n   which the origin server believes the variant was last modified.\n\n       Last-Modified  = \"Last-Modified\" \":\" HTTP-date\n\n   An example of its use is\n\n       Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT\n\n   The exact meaning of this header field depends on the implementation\n   of the origin server and the nature of the original resource. For\n   files, it may be just the file system last-modified time. For\n   entities with dynamically included parts, it may be the most recent\n   of the set of last-modify times for its component parts. For database\n   gateways, it may be the last-update time stamp of the record. For\n   virtual objects, it may be the last time the internal state changed.\n\n   An origin server MUST NOT send a Last-Modified date which is later\n   than the server's time of message origination. In such cases, where\n   the resource's last modification would indicate some time in the\n   future, the server MUST replace that date with the message\n   origination date.\n\n   An origin server SHOULD obtain the Last-Modified value of the entity\n   as close as possible to the time that it generates the Date value of\n   its response. This allows a recipient to make an accurate assessment\n   of the entity's modification time, especially if the entity changes\n   near the time that the response is generated.\n\n   HTTP/1.1 servers SHOULD send Last-Modified whenever feasible.\n\n<h3 class=\"h3\" id=\"section-14.30\">14.30 Location</h3>\n   The Location response-header field is used to redirect the recipient\n   to a location other than the Request-URI for completion of the\n   request or identification of a new resource. For 201 (Created)\n   responses, the Location is that of the new resource which was created\n   by the request. For 3xx responses, the location SHOULD indicate the\n   server's preferred URI for automatic redirection to the resource. The\n   field value consists of a single absolute URI.\n\n       Location       = \"Location\" \":\" absoluteURI\n\n   An example is:\n\n       Location: <a href=\"http://www.w3.org/pub/WWW/People.html\">http://www.w3.org/pub/WWW/People.html</a>\n\n      Note: The Content-Location header field (<a href=\"#section-14.14\">section 14.14</a>) differs\n      from Location in that the Content-Location identifies the original\n      location of the entity enclosed in the request. It is therefore\n      possible for a response to contain header fields for both Location\n      and Content-Location. Also see <a href=\"#section-13.10\">section 13.10</a> for cache\n      requirements of some methods.\n\n<h3 class=\"h3\" id=\"section-14.31\">14.31 Max-Forwards</h3>\n   The Max-Forwards request-header field provides a mechanism with the\n   TRACE (<a href=\"#section-9.8\">section 9.8</a>) and OPTIONS (<a href=\"#section-9.2\">section 9.2</a>) methods to limit the\n   number of proxies or gateways that can forward the request to the\n   next inbound server. This can be useful when the client is attempting\n   to trace a request chain which appears to be failing or looping in\n   mid-chain.\n\n       Max-Forwards   = \"Max-Forwards\" \":\" 1*DIGIT\n\n   The Max-Forwards value is a decimal integer indicating the remaining\n   number of times this request message may be forwarded.\n\n   Each proxy or gateway recipient of a TRACE or OPTIONS request\n   containing a Max-Forwards header field MUST check and update its\n   value prior to forwarding the request. If the received value is zero\n   (0), the recipient MUST NOT forward the request; instead, it MUST\n   respond as the final recipient. If the received Max-Forwards value is\n   greater than zero, then the forwarded message MUST contain an updated\n   Max-Forwards field with a value decremented by one (1).\n\n   The Max-Forwards header field MAY be ignored for all other methods\n   defined by this specification and for any extension methods for which\n   it is not explicitly referred to as part of that method definition.\n\n<h3 class=\"h3\" id=\"section-14.32\">14.32 Pragma</h3>\n   The Pragma general-header field is used to include implementation-\n   specific directives that might apply to any recipient along the\n   request/response chain. All pragma directives specify optional\n   behavior from the viewpoint of the protocol; however, some systems\n   MAY require that behavior be consistent with the directives.\n\n       Pragma            = \"Pragma\" \":\" 1#pragma-directive\n       pragma-directive  = \"no-cache\" | extension-pragma\n       extension-pragma  = token [ \"=\" ( token | quoted-string ) ]\n\n   When the no-cache directive is present in a request message, an\n   application SHOULD forward the request toward the origin server even\n   if it has a cached copy of what is being requested. This pragma\n   directive has the same semantics as the no-cache cache-directive (see\n   <a href=\"#section-14.9\">section 14.9</a>) and is defined here for backward compatibility with\n   HTTP/1.0. Clients SHOULD include both header fields when a no-cache\n   request is sent to a server not known to be HTTP/1.1 compliant.\n\n   Pragma directives MUST be passed through by a proxy or gateway\n   application, regardless of their significance to that application,\n   since the directives might be applicable to all recipients along the\n   request/response chain. It is not possible to specify a pragma for a\n   specific recipient; however, any pragma directive not relevant to a\n   recipient SHOULD be ignored by that recipient.\n\n   HTTP/1.1 caches SHOULD treat \"Pragma: no-cache\" as if the client had\n   sent \"Cache-Control: no-cache\". No new Pragma directives will be\n   defined in HTTP.\n\n      Note: because the meaning of \"Pragma: no-cache as a response\n      header field is not actually specified, it does not provide a\n      reliable replacement for \"Cache-Control: no-cache\" in a response\n\n<h3 class=\"h3\" id=\"section-14.33\">14.33 Proxy-Authenticate</h3>\n   The Proxy-Authenticate response-header field MUST be included as part\n   of a 407 (Proxy Authentication Required) response. The field value\n   consists of a challenge that indicates the authentication scheme and\n   parameters applicable to the proxy for this Request-URI.\n\n       Proxy-Authenticate  = \"Proxy-Authenticate\" \":\" 1#challenge\n\n   The HTTP access authentication process is described in \"HTTP\n   Authentication: Basic and Digest Access Authentication\" [<a href=\"#ref-43\" title='\"HTTP Authentication: Basic and Digest Access Authentication\"'>43</a>]. Unlike\n   WWW-Authenticate, the Proxy-Authenticate header field applies only to\n   the current connection and SHOULD NOT be passed on to downstream\n   clients. However, an intermediate proxy might need to obtain its own\n   credentials by requesting them from the downstream client, which in\n   some circumstances will appear as if the proxy is forwarding the\n   Proxy-Authenticate header field.\n\n<h3 class=\"h3\" id=\"section-14.34\">14.34 Proxy-Authorization</h3>\n   The Proxy-Authorization request-header field allows the client to\n   identify itself (or its user) to a proxy which requires\n   authentication. The Proxy-Authorization field value consists of\n   credentials containing the authentication information of the user\n   agent for the proxy and/or realm of the resource being requested.\n\n       Proxy-Authorization     = \"Proxy-Authorization\" \":\" credentials\n\n   The HTTP access authentication process is described in \"HTTP\n   Authentication: Basic and Digest Access Authentication\" [<a href=\"#ref-43\" title='\"HTTP Authentication: Basic and Digest Access Authentication\"'>43</a>] . Unlike\n   Authorization, the Proxy-Authorization header field applies only to\n   the next outbound proxy that demanded authentication using the Proxy-\n   Authenticate field. When multiple proxies are used in a chain, the\n\n   Proxy-Authorization header field is consumed by the first outbound\n   proxy that was expecting to receive credentials. A proxy MAY relay\n   the credentials from the client request to the next proxy if that is\n   the mechanism by which the proxies cooperatively authenticate a given\n   request.\n\n<h3 class=\"h3\" id=\"section-14.35\">14.35 Range</h3>\n<h4 class=\"h4\" id=\"section-14.35.1\">14.35.1 Byte Ranges</h4>\n   Since all HTTP entities are represented in HTTP messages as sequences\n   of bytes, the concept of a byte range is meaningful for any HTTP\n   entity. (However, not all clients and servers need to support byte-\n   range operations.)\n\n   Byte range specifications in HTTP apply to the sequence of bytes in\n   the entity-body (not necessarily the same as the message-body).\n\n   A byte range operation MAY specify a single range of bytes, or a set\n   of ranges within a single entity.\n\n       ranges-specifier = byte-ranges-specifier\n       byte-ranges-specifier = bytes-unit \"=\" byte-range-set\n       byte-range-set  = 1#( byte-range-spec | suffix-byte-range-spec )\n       byte-range-spec = first-byte-pos \"-\" [last-byte-pos]\n       first-byte-pos  = 1*DIGIT\n       last-byte-pos   = 1*DIGIT\n\n   The first-byte-pos value in a byte-range-spec gives the byte-offset\n   of the first byte in a range. The last-byte-pos value gives the\n   byte-offset of the last byte in the range; that is, the byte\n   positions specified are inclusive. Byte offsets start at zero.\n\n   If the last-byte-pos value is present, it MUST be greater than or\n   equal to the first-byte-pos in that byte-range-spec, or the byte-\n   range-spec is syntactically invalid. The recipient of a byte-range-\n   set that includes one or more syntactically invalid byte-range-spec\n   values MUST ignore the header field that includes that byte-range-\n   set.\n\n   If the last-byte-pos value is absent, or if the value is greater than\n   or equal to the current length of the entity-body, last-byte-pos is\n   taken to be equal to one less than the current length of the entity-\n   body in bytes.\n\n   By its choice of last-byte-pos, a client can limit the number of\n   bytes retrieved without knowing the size of the entity.\n\n       suffix-byte-range-spec = \"-\" suffix-length\n       suffix-length = 1*DIGIT\n\n   A suffix-byte-range-spec is used to specify the suffix of the\n   entity-body, of a length given by the suffix-length value. (That is,\n   this form specifies the last N bytes of an entity-body.) If the\n   entity is shorter than the specified suffix-length, the entire\n   entity-body is used.\n\n   If a syntactically valid byte-range-set includes at least one byte-\n   range-spec whose first-byte-pos is less than the current length of\n   the entity-body, or at least one suffix-byte-range-spec with a non-\n   zero suffix-length, then the byte-range-set is satisfiable.\n   Otherwise, the byte-range-set is unsatisfiable. If the byte-range-set\n   is unsatisfiable, the server SHOULD return a response with a status\n   of 416 (Requested range not satisfiable). Otherwise, the server\n   SHOULD return a response with a status of 206 (Partial Content)\n   containing the satisfiable ranges of the entity-body.\n\n   Examples of byte-ranges-specifier values (assuming an entity-body of\n   length 10000):\n\n      - The first 500 bytes (byte offsets 0-499, inclusive):  bytes=0-\n        499\n\n      - The second 500 bytes (byte offsets 500-999, inclusive):\n        bytes=500-999\n\n      - The final 500 bytes (byte offsets 9500-9999, inclusive):\n        bytes=-500\n\n      - Or bytes=9500-\n\n      - The first and last bytes only (bytes 0 and 9999):  bytes=0-0,-1\n\n      - Several legal but not canonical specifications of the second 500\n        bytes (byte offsets 500-999, inclusive):\n         bytes=500-600,601-999\n         bytes=500-700,601-999\n\n<h4 class=\"h4\" id=\"section-14.35.2\">14.35.2 Range Retrieval Requests</h4>\n   HTTP retrieval requests using conditional or unconditional GET\n   methods MAY request one or more sub-ranges of the entity, instead of\n   the entire entity, using the Range request header, which applies to\n   the entity returned as the result of the request:\n\n      Range = \"Range\" \":\" ranges-specifier\n\n   A server MAY ignore the Range header. However, HTTP/1.1 origin\n   servers and intermediate caches ought to support byte ranges when\n   possible, since Range supports efficient recovery from partially\n   failed transfers, and supports efficient partial retrieval of large\n   entities.\n\n   If the server supports the Range header and the specified range or\n   ranges are appropriate for the entity:\n\n      - The presence of a Range header in an unconditional GET modifies\n        what is returned if the GET is otherwise successful. In other\n        words, the response carries a status code of 206 (Partial\n        Content) instead of 200 (OK).\n\n      - The presence of a Range header in a conditional GET (a request\n        using one or both of If-Modified-Since and If-None-Match, or\n        one or both of If-Unmodified-Since and If-Match) modifies what\n        is returned if the GET is otherwise successful and the\n        condition is true. It does not affect the 304 (Not Modified)\n        response returned if the conditional is false.\n\n   In some cases, it might be more appropriate to use the If-Range\n   header (see <a href=\"#section-14.27\">section 14.27</a>) in addition to the Range header.\n\n   If a proxy that supports ranges receives a Range request, forwards\n   the request to an inbound server, and receives an entire entity in\n   reply, it SHOULD only return the requested range to its client. It\n   SHOULD store the entire received response in its cache if that is\n   consistent with its cache allocation policies.\n\n<h3 class=\"h3\" id=\"section-14.36\">14.36 Referer</h3>\n   The Referer[sic] request-header field allows the client to specify,\n   for the server's benefit, the address (URI) of the resource from\n   which the Request-URI was obtained (the \"referrer\", although the\n   header field is misspelled.) The Referer request-header allows a\n   server to generate lists of back-links to resources for interest,\n   logging, optimized caching, etc. It also allows obsolete or mistyped\n   links to be traced for maintenance. The Referer field MUST NOT be\n   sent if the Request-URI was obtained from a source that does not have\n   its own URI, such as input from the user keyboard.\n\n       Referer        = \"Referer\" \":\" ( absoluteURI | relativeURI )\n\n   Example:\n\n       Referer: <a href=\"http://www.w3.org/hypertext/DataSources/Overview.html\">http://www.w3.org/hypertext/DataSources/Overview.html</a>\n\n   If the field value is a relative URI, it SHOULD be interpreted\n   relative to the Request-URI. The URI MUST NOT include a fragment. See\n   <a href=\"#section-15.1.3\">section 15.1.3</a> for security considerations.\n\n<h3 class=\"h3\" id=\"section-14.37\">14.37 Retry-After</h3>\n   The Retry-After response-header field can be used with a 503 (Service\n   Unavailable) response to indicate how long the service is expected to\n   be unavailable to the requesting client. This field MAY also be used\n   with any 3xx (Redirection) response to indicate the minimum time the\n   user-agent is asked wait before issuing the redirected request. The\n   value of this field can be either an HTTP-date or an integer number\n   of seconds (in decimal) after the time of the response.\n\n       Retry-After  = \"Retry-After\" \":\" ( HTTP-date | delta-seconds )\n\n   Two examples of its use are\n\n       Retry-After: Fri, 31 Dec 1999 23:59:59 GMT\n       Retry-After: 120\n\n   In the latter example, the delay is 2 minutes.\n\n<h3 class=\"h3\" id=\"section-14.38\">14.38 Server</h3>\n   The Server response-header field contains information about the\n   software used by the origin server to handle the request. The field\n   can contain multiple product tokens (<a href=\"#section-3.8\">section 3.8</a>) and comments\n   identifying the server and any significant subproducts. The product\n   tokens are listed in order of their significance for identifying the\n   application.\n\n       Server         = \"Server\" \":\" 1*( product | comment )\n\n   Example:\n\n       Server: CERN/3.0 libwww/2.17\n\n   If the response is being forwarded through a proxy, the proxy\n   application MUST NOT modify the Server response-header. Instead, it\n   SHOULD include a Via field (as described in <a href=\"#section-14.45\">section 14.45</a>).\n\n      Note: Revealing the specific software version of the server might\n      allow the server machine to become more vulnerable to attacks\n      against software that is known to contain security holes. Server\n      implementors are encouraged to make this field a configurable\n      option.\n\n<h3 class=\"h3\" id=\"section-14.39\">14.39 TE</h3>\n   The TE request-header field indicates what extension transfer-codings\n   it is willing to accept in the response and whether or not it is\n   willing to accept trailer fields in a chunked transfer-coding. Its\n   value may consist of the keyword \"trailers\" and/or a comma-separated\n   list of extension transfer-coding names with optional accept\n   parameters (as described in <a href=\"#section-3.6\">section 3.6</a>).\n\n       TE        = \"TE\" \":\" #( t-codings )\n       t-codings = \"trailers\" | ( transfer-extension [ accept-params ] )\n\n   The presence of the keyword \"trailers\" indicates that the client is\n   willing to accept trailer fields in a chunked transfer-coding, as\n   defined in <a href=\"#section-3.6.1\">section 3.6.1</a>. This keyword is reserved for use with\n   transfer-coding values even though it does not itself represent a\n   transfer-coding.\n\n   Examples of its use are:\n\n       TE: deflate\n       TE:\n       TE: trailers, deflate;q=0.5\n\n   The TE header field only applies to the immediate connection.\n   Therefore, the keyword MUST be supplied within a Connection header\n   field (<a href=\"#section-14.10\">section 14.10</a>) whenever TE is present in an HTTP/1.1 message.\n\n   A server tests whether a transfer-coding is acceptable, according to\n   a TE field, using these rules:\n\n      1. The \"chunked\" transfer-coding is always acceptable. If the\n         keyword \"trailers\" is listed, the client indicates that it is\n         willing to accept trailer fields in the chunked response on\n         behalf of itself and any downstream clients. The implication is\n         that, if given, the client is stating that either all\n         downstream clients are willing to accept trailer fields in the\n         forwarded response, or that it will attempt to buffer the\n         response on behalf of downstream recipients.\n\n         Note: HTTP/1.1 does not define any means to limit the size of a\n         chunked response such that a client can be assured of buffering\n         the entire response.\n\n      2. If the transfer-coding being tested is one of the transfer-\n         codings listed in the TE field, then it is acceptable unless it\n         is accompanied by a qvalue of 0. (As defined in <a href=\"#section-3.9\">section 3.9</a>, a\n         qvalue of 0 means \"not acceptable.\")\n\n      3. If multiple transfer-codings are acceptable, then the\n         acceptable transfer-coding with the highest non-zero qvalue is\n         preferred.  The \"chunked\" transfer-coding always has a qvalue\n         of 1.\n\n   If the TE field-value is empty or if no TE field is present, the only\n   transfer-coding  is \"chunked\". A message with no transfer-coding is\n   always acceptable.\n\n<h3 class=\"h3\" id=\"section-14.40\">14.40 Trailer</h3>\n   The Trailer general field value indicates that the given set of\n   header fields is present in the trailer of a message encoded with\n   chunked transfer-coding.\n\n       Trailer  = \"Trailer\" \":\" 1#field-name\n\n   An HTTP/1.1 message SHOULD include a Trailer header field in a\n   message using chunked transfer-coding with a non-empty trailer. Doing\n   so allows the recipient to know which header fields to expect in the\n   trailer.\n\n   If no Trailer header field is present, the trailer SHOULD NOT include\n   any header fields. See <a href=\"#section-3.6.1\">section 3.6.1</a> for restrictions on the use of\n   trailer fields in a \"chunked\" transfer-coding.\n\n   Message header fields listed in the Trailer header field MUST NOT\n   include the following header fields:\n\n      . Transfer-Encoding\n\n      . Content-Length\n\n      . Trailer\n\n<h3 class=\"h3\" id=\"section-14.41\">14.41 Transfer-Encoding</h3>\n   The Transfer-Encoding general-header field indicates what (if any)\n   type of transformation has been applied to the message body in order\n   to safely transfer it between the sender and the recipient. This\n   differs from the content-coding in that the transfer-coding is a\n   property of the message, not of the entity.\n\n     Transfer-Encoding       = \"Transfer-Encoding\" \":\" 1#transfer-coding\n\n   Transfer-codings are defined in <a href=\"#section-3.6\">section 3.6</a>. An example is:\n\n     Transfer-Encoding: chunked\n\n   If multiple encodings have been applied to an entity, the transfer-\n   codings MUST be listed in the order in which they were applied.\n   Additional information about the encoding parameters MAY be provided\n   by other entity-header fields not defined by this specification.\n\n   Many older HTTP/1.0 applications do not understand the Transfer-\n   Encoding header.\n\n<h3 class=\"h3\" id=\"section-14.42\">14.42 Upgrade</h3>\n   The Upgrade general-header allows the client to specify what\n   additional communication protocols it supports and would like to use\n   if the server finds it appropriate to switch protocols. The server\n   MUST use the Upgrade header field within a 101 (Switching Protocols)\n   response to indicate which protocol(s) are being switched.\n\n       Upgrade        = \"Upgrade\" \":\" 1#product\n\n   For example,\n\n       Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11\n\n   The Upgrade header field is intended to provide a simple mechanism\n   for transition from HTTP/1.1 to some other, incompatible protocol. It\n   does so by allowing the client to advertise its desire to use another\n   protocol, such as a later version of HTTP with a higher major version\n   number, even though the current request has been made using HTTP/1.1.\n   This eases the difficult transition between incompatible protocols by\n   allowing the client to initiate a request in the more commonly\n   supported protocol while indicating to the server that it would like\n   to use a \"better\" protocol if available (where \"better\" is determined\n   by the server, possibly according to the nature of the method and/or\n   resource being requested).\n\n   The Upgrade header field only applies to switching application-layer\n   protocols upon the existing transport-layer connection. Upgrade\n   cannot be used to insist on a protocol change; its acceptance and use\n   by the server is optional. The capabilities and nature of the\n   application-layer communication after the protocol change is entirely\n   dependent upon the new protocol chosen, although the first action\n   after changing the protocol MUST be a response to the initial HTTP\n   request containing the Upgrade header field.\n\n   The Upgrade header field only applies to the immediate connection.\n   Therefore, the upgrade keyword MUST be supplied within a Connection\n   header field (<a href=\"#section-14.10\">section 14.10</a>) whenever Upgrade is present in an\n   HTTP/1.1 message.\n\n   The Upgrade header field cannot be used to indicate a switch to a\n   protocol on a different connection. For that purpose, it is more\n   appropriate to use a 301, 302, 303, or 305 redirection response.\n\n   This specification only defines the protocol name \"HTTP\" for use by\n   the family of Hypertext Transfer Protocols, as defined by the HTTP\n   version rules of <a href=\"#section-3.1\">section 3.1</a> and future updates to this\n   specification. Any token can be used as a protocol name; however, it\n   will only be useful if both the client and server associate the name\n   with the same protocol.\n\n<h3 class=\"h3\" id=\"section-14.43\">14.43 User-Agent</h3>\n   The User-Agent request-header field contains information about the\n   user agent originating the request. This is for statistical purposes,\n   the tracing of protocol violations, and automated recognition of user\n   agents for the sake of tailoring responses to avoid particular user\n   agent limitations. User agents SHOULD include this field with\n   requests. The field can contain multiple product tokens (<a href=\"#section-3.8\">section 3.8</a>)\n   and comments identifying the agent and any subproducts which form a\n   significant part of the user agent. By convention, the product tokens\n   are listed in order of their significance for identifying the\n   application.\n\n       User-Agent     = \"User-Agent\" \":\" 1*( product | comment )\n\n   Example:\n\n       User-Agent: CERN-LineMode/2.15 libwww/2.17b3\n\n<h3 class=\"h3\" id=\"section-14.44\">14.44 Vary</h3>\n   The Vary field value indicates the set of request-header fields that\n   fully determines, while the response is fresh, whether a cache is\n   permitted to use the response to reply to a subsequent request\n   without revalidation. For uncacheable or stale responses, the Vary\n   field value advises the user agent about the criteria that were used\n   to select the representation. A Vary field value of \"*\" implies that\n   a cache cannot determine from the request headers of a subsequent\n   request whether this response is the appropriate representation. See\n   <a href=\"#section-13.6\">section 13.6</a> for use of the Vary header field by caches.\n\n       Vary  = \"Vary\" \":\" ( \"*\" | 1#field-name )\n\n   An HTTP/1.1 server SHOULD include a Vary header field with any\n   cacheable response that is subject to server-driven negotiation.\n   Doing so allows a cache to properly interpret future requests on that\n   resource and informs the user agent about the presence of negotiation\n\n   on that resource. A server MAY include a Vary header field with a\n   non-cacheable response that is subject to server-driven negotiation,\n   since this might provide the user agent with useful information about\n   the dimensions over which the response varies at the time of the\n   response.\n\n   A Vary field value consisting of a list of field-names signals that\n   the representation selected for the response is based on a selection\n   algorithm which considers ONLY the listed request-header field values\n   in selecting the most appropriate representation. A cache MAY assume\n   that the same selection will be made for future requests with the\n   same values for the listed field names, for the duration of time for\n   which the response is fresh.\n\n   The field-names given are not limited to the set of standard\n   request-header fields defined by this specification. Field names are\n   case-insensitive.\n\n   A Vary field value of \"*\" signals that unspecified parameters not\n   limited to the request-headers (e.g., the network address of the\n   client), play a role in the selection of the response representation.\n   The \"*\" value MUST NOT be generated by a proxy server; it may only be\n   generated by an origin server.\n\n<h3 class=\"h3\" id=\"section-14.45\">14.45  Via</h3>\n   The Via general-header field MUST be used by gateways and proxies to\n   indicate the intermediate protocols and recipients between the user\n   agent and the server on requests, and between the origin server and\n   the client on responses. It is analogous to the \"Received\" field of\n   <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a> [<a href=\"#ref-9\" title='\"Standard for The Format of ARPA Internet Text Messages\"'>9</a>] and is intended to be used for tracking message forwards,\n   avoiding request loops, and identifying the protocol capabilities of\n   all senders along the request/response chain.\n\n      Via =  \"Via\" \":\" 1#( received-protocol received-by [ comment ] )\n      received-protocol = [ protocol-name \"/\" ] protocol-version\n      protocol-name     = token\n      protocol-version  = token\n      received-by       = ( host [ \":\" port ] ) | pseudonym\n      pseudonym         = token\n\n   The received-protocol indicates the protocol version of the message\n   received by the server or client along each segment of the\n   request/response chain. The received-protocol version is appended to\n   the Via field value when the message is forwarded so that information\n   about the protocol capabilities of upstream applications remains\n   visible to all recipients.\n\n   The protocol-name is optional if and only if it would be \"HTTP\". The\n   received-by field is normally the host and optional port number of a\n   recipient server or client that subsequently forwarded the message.\n   However, if the real host is considered to be sensitive information,\n   it MAY be replaced by a pseudonym. If the port is not given, it MAY\n   be assumed to be the default port of the received-protocol.\n\n   Multiple Via field values represents each proxy or gateway that has\n   forwarded the message. Each recipient MUST append its information\n   such that the end result is ordered according to the sequence of\n   forwarding applications.\n\n   Comments MAY be used in the Via header field to identify the software\n   of the recipient proxy or gateway, analogous to the User-Agent and\n   Server header fields. However, all comments in the Via field are\n   optional and MAY be removed by any recipient prior to forwarding the\n   message.\n\n   For example, a request message could be sent from an HTTP/1.0 user\n   agent to an internal proxy code-named \"fred\", which uses HTTP/1.1 to\n   forward the request to a public proxy at nowhere.com, which completes\n   the request by forwarding it to the origin server at www.ics.uci.edu.\n   The request received by www.ics.uci.edu would then have the following\n   Via header field:\n\n       Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)\n\n   Proxies and gateways used as a portal through a network firewall\n   SHOULD NOT, by default, forward the names and ports of hosts within\n   the firewall region. This information SHOULD only be propagated if\n   explicitly enabled. If not enabled, the received-by host of any host\n   behind the firewall SHOULD be replaced by an appropriate pseudonym\n   for that host.\n\n   For organizations that have strong privacy requirements for hiding\n   internal structures, a proxy MAY combine an ordered subsequence of\n   Via header field entries with identical received-protocol values into\n   a single such entry. For example,\n\n       Via: 1.0 ricky, 1.1 ethel, 1.1 fred, 1.0 lucy\n\n        could be collapsed to\n\n       Via: 1.0 ricky, 1.1 mertz, 1.0 lucy\n\n   Applications SHOULD NOT combine multiple entries unless they are all\n   under the same organizational control and the hosts have already been\n   replaced by pseudonyms. Applications MUST NOT combine entries which\n   have different received-protocol values.\n\n<h3 class=\"h3\" id=\"section-14.46\">14.46 Warning</h3>\n   The Warning general-header field is used to carry additional\n   information about the status or transformation of a message which\n   might not be reflected in the message. This information is typically\n   used to warn about a possible lack of semantic transparency from\n   caching operations or transformations applied to the entity body of\n   the message.\n\n   Warning headers are sent with responses using:\n\n       Warning    = \"Warning\" \":\" 1#warning-value\n\n       warning-value = warn-code SP warn-agent SP warn-text\n                                             [SP warn-date]\n\n       warn-code  = 3DIGIT\n       warn-agent = ( host [ \":\" port ] ) | pseudonym\n                       ; the name or pseudonym of the server adding\n                       ; the Warning header, for use in debugging\n       warn-text  = quoted-string\n       warn-date  = &lt;\"&gt; HTTP-date &lt;\"&gt;\n\n   A response MAY carry more than one Warning header.\n\n   The warn-text SHOULD be in a natural language and character set that\n   is most likely to be intelligible to the human user receiving the\n   response. This decision MAY be based on any available knowledge, such\n   as the location of the cache or user, the Accept-Language field in a\n   request, the Content-Language field in a response, etc. The default\n   language is English and the default character set is ISO-8859-1.\n\n   If a character set other than ISO-8859-1 is used, it MUST be encoded\n   in the warn-text using the method described in <a href=\"https://tools.ietf.org/html/rfc2047\">RFC 2047</a> [<a href=\"#ref-14\" title='\"MIME (Multipurpose Internet Mail Extensions) Part Three: Message Header Extensions for Non-ASCII Text\"'>14</a>].\n\n   Warning headers can in general be applied to any message, however\n   some specific warn-codes are specific to caches and can only be\n   applied to response messages. New Warning headers SHOULD be added\n   after any existing Warning headers. A cache MUST NOT delete any\n   Warning header that it received with a message. However, if a cache\n   successfully validates a cache entry, it SHOULD remove any Warning\n   headers previously attached to that entry except as specified for\n\n   specific Warning codes. It MUST then add any Warning headers received\n   in the validating response. In other words, Warning headers are those\n   that would be attached to the most recent relevant response.\n\n   When multiple Warning headers are attached to a response, the user\n   agent ought to inform the user of as many of them as possible, in the\n   order that they appear in the response. If it is not possible to\n   inform the user of all of the warnings, the user agent SHOULD follow\n   these heuristics:\n\n      - Warnings that appear early in the response take priority over\n        those appearing later in the response.\n\n      - Warnings in the user's preferred character set take priority\n        over warnings in other character sets but with identical warn-\n        codes and warn-agents.\n\n   Systems that generate multiple Warning headers SHOULD order them with\n   this user agent behavior in mind.\n\n   Requirements for the behavior of caches with respect to Warnings are\n   stated in <a href=\"#section-13.1.2\">section 13.1.2</a>.\n\n   This is a list of the currently-defined warn-codes, each with a\n   recommended warn-text in English, and a description of its meaning.\n\n   110 Response is stale\n     MUST be included whenever the returned response is stale.\n\n   111 Revalidation failed\n     MUST be included if a cache returns a stale response because an\n     attempt to revalidate the response failed, due to an inability to\n     reach the server.\n\n   112 Disconnected operation\n     SHOULD be included if the cache is intentionally disconnected from\n     the rest of the network for a period of time.\n\n   113 Heuristic expiration\n     MUST be included if the cache heuristically chose a freshness\n     lifetime greater than 24 hours and the response's age is greater\n     than 24 hours.\n\n   199 Miscellaneous warning\n     The warning text MAY include arbitrary information to be presented\n     to a human user, or logged. A system receiving this warning MUST\n     NOT take any automated action, besides presenting the warning to\n     the user.\n\n   214 Transformation applied\n     MUST be added by an intermediate cache or proxy if it applies any\n     transformation changing the content-coding (as specified in the\n     Content-Encoding header) or media-type (as specified in the\n     Content-Type header) of the response, or the entity-body of the\n     response, unless this Warning code already appears in the response.\n\n   299 Miscellaneous persistent warning\n     The warning text MAY include arbitrary information to be presented\n     to a human user, or logged. A system receiving this warning MUST\n     NOT take any automated action.\n\n   If an implementation sends a message with one or more Warning headers\n   whose version is HTTP/1.0 or lower, then the sender MUST include in\n   each warning-value a warn-date that matches the date in the response.\n\n   If an implementation receives a message with a warning-value that\n   includes a warn-date, and that warn-date is different from the Date\n   value in the response, then that warning-value MUST be deleted from\n   the message before storing, forwarding, or using it. (This prevents\n   bad consequences of naive caching of Warning header fields.) If all\n   of the warning-values are deleted for this reason, the Warning header\n   MUST be deleted as well.\n\n<h3 class=\"h3\" id=\"section-14.47\">14.47 WWW-Authenticate</h3>\n   The WWW-Authenticate response-header field MUST be included in 401\n   (Unauthorized) response messages. The field value consists of at\n   least one challenge that indicates the authentication scheme(s) and\n   parameters applicable to the Request-URI.\n\n       WWW-Authenticate  = \"WWW-Authenticate\" \":\" 1#challenge\n\n   The HTTP access authentication process is described in \"HTTP\n   Authentication: Basic and Digest Access Authentication\" [<a href=\"#ref-43\" title='\"HTTP Authentication: Basic and Digest Access Authentication\"'>43</a>]. User\n   agents are advised to take special care in parsing the WWW-\n   Authenticate field value as it might contain more than one challenge,\n   or if more than one WWW-Authenticate header field is provided, the\n   contents of a challenge itself can contain a comma-separated list of\n   authentication parameters.\n\n<h2 class=\"h2\" id=\"section-15\">15 Security Considerations</h2>\n   This section is meant to inform application developers, information\n   providers, and users of the security limitations in HTTP/1.1 as\n   described by this document. The discussion does not include\n   definitive solutions to the problems revealed, though it does make\n   some suggestions for reducing security risks.\n\n<h3 class=\"h3\" id=\"section-15.1\">15.1 Personal Information</h3>\n   HTTP clients are often privy to large amounts of personal information\n   (e.g. the user's name, location, mail address, passwords, encryption\n   keys, etc.), and SHOULD be very careful to prevent unintentional\n   leakage of this information via the HTTP protocol to other sources.\n   We very strongly recommend that a convenient interface be provided\n   for the user to control dissemination of such information, and that\n   designers and implementors be particularly careful in this area.\n   History shows that errors in this area often create serious security\n   and/or privacy problems and generate highly adverse publicity for the\n   implementor's company.\n\n<h4 class=\"h4\" id=\"section-15.1.1\">15.1.1 Abuse of Server Log Information</h4>\n   A server is in the position to save personal data about a user's\n   requests which might identify their reading patterns or subjects of\n   interest. This information is clearly confidential in nature and its\n   handling can be constrained by law in certain countries. People using\n   the HTTP protocol to provide data are responsible for ensuring that\n   such material is not distributed without the permission of any\n   individuals that are identifiable by the published results.\n\n<h4 class=\"h4\" id=\"section-15.1.2\">15.1.2 Transfer of Sensitive Information</h4>\n   Like any generic data transfer protocol, HTTP cannot regulate the\n   content of the data that is transferred, nor is there any a priori\n   method of determining the sensitivity of any particular piece of\n   information within the context of any given request. Therefore,\n   applications SHOULD supply as much control over this information as\n   possible to the provider of that information. Four header fields are\n   worth special mention in this context: Server, Via, Referer and From.\n\n   Revealing the specific software version of the server might allow the\n   server machine to become more vulnerable to attacks against software\n   that is known to contain security holes. Implementors SHOULD make the\n   Server header field a configurable option.\n\n   Proxies which serve as a portal through a network firewall SHOULD\n   take special precautions regarding the transfer of header information\n   that identifies the hosts behind the firewall. In particular, they\n   SHOULD remove, or replace with sanitized versions, any Via fields\n   generated behind the firewall.\n\n   The Referer header allows reading patterns to be studied and reverse\n   links drawn. Although it can be very useful, its power can be abused\n   if user details are not separated from the information contained in\n\n   the Referer. Even when the personal information has been removed, the\n   Referer header might indicate a private document's URI whose\n   publication would be inappropriate.\n\n   The information sent in the From field might conflict with the user's\n   privacy interests or their site's security policy, and hence it\n   SHOULD NOT be transmitted without the user being able to disable,\n   enable, and modify the contents of the field. The user MUST be able\n   to set the contents of this field within a user preference or\n   application defaults configuration.\n\n   We suggest, though do not require, that a convenient toggle interface\n   be provided for the user to enable or disable the sending of From and\n   Referer information.\n\n   The User-Agent (<a href=\"#section-14.43\">section 14.43</a>) or Server (<a href=\"#section-14.38\">section 14.38</a>) header\n   fields can sometimes be used to determine that a specific client or\n   server have a particular security hole which might be exploited.\n   Unfortunately, this same information is often used for other valuable\n   purposes for which HTTP currently has no better mechanism.\n\n<h4 class=\"h4\" id=\"section-15.1.3\">15.1.3 Encoding Sensitive Information in URI's</h4>\n   Because the source of a link might be private information or might\n   reveal an otherwise private information source, it is strongly\n   recommended that the user be able to select whether or not the\n   Referer field is sent. For example, a browser client could have a\n   toggle switch for browsing openly/anonymously, which would\n   respectively enable/disable the sending of Referer and From\n   information.\n\n   Clients SHOULD NOT include a Referer header field in a (non-secure)\n   HTTP request if the referring page was transferred with a secure\n   protocol.\n\n   Authors of services which use the HTTP protocol SHOULD NOT use GET\n   based forms for the submission of sensitive data, because this will\n   cause this data to be encoded in the Request-URI. Many existing\n   servers, proxies, and user agents will log the request URI in some\n   place where it might be visible to third parties. Servers can use\n   POST-based form submission instead\n\n<h4 class=\"h4\" id=\"section-15.1.4\">15.1.4 Privacy Issues Connected to Accept Headers</h4>\n   Accept request-headers can reveal information about the user to all\n   servers which are accessed. The Accept-Language header in particular\n   can reveal information the user would consider to be of a private\n   nature, because the understanding of particular languages is often\n\n   strongly correlated to the membership of a particular ethnic group.\n   User agents which offer the option to configure the contents of an\n   Accept-Language header to be sent in every request are strongly\n   encouraged to let the configuration process include a message which\n   makes the user aware of the loss of privacy involved.\n\n   An approach that limits the loss of privacy would be for a user agent\n   to omit the sending of Accept-Language headers by default, and to ask\n   the user whether or not to start sending Accept-Language headers to a\n   server if it detects, by looking for any Vary response-header fields\n   generated by the server, that such sending could improve the quality\n   of service.\n\n   Elaborate user-customized accept header fields sent in every request,\n   in particular if these include quality values, can be used by servers\n   as relatively reliable and long-lived user identifiers. Such user\n   identifiers would allow content providers to do click-trail tracking,\n   and would allow collaborating content providers to match cross-server\n   click-trails or form submissions of individual users. Note that for\n   many users not behind a proxy, the network address of the host\n   running the user agent will also serve as a long-lived user\n   identifier. In environments where proxies are used to enhance\n   privacy, user agents ought to be conservative in offering accept\n   header configuration options to end users. As an extreme privacy\n   measure, proxies could filter the accept headers in relayed requests.\n   General purpose user agents which provide a high degree of header\n   configurability SHOULD warn users about the loss of privacy which can\n   be involved.\n\n<h3 class=\"h3\" id=\"section-15.2\">15.2 Attacks Based On File and Path Names</h3>\n   Implementations of HTTP origin servers SHOULD be careful to restrict\n   the documents returned by HTTP requests to be only those that were\n   intended by the server administrators. If an HTTP server translates\n   HTTP URIs directly into file system calls, the server MUST take\n   special care not to serve files that were not intended to be\n   delivered to HTTP clients. For example, UNIX, Microsoft Windows, and\n   other operating systems use \"..\" as a path component to indicate a\n   directory level above the current one. On such a system, an HTTP\n   server MUST disallow any such construct in the Request-URI if it\n   would otherwise allow access to a resource outside those intended to\n   be accessible via the HTTP server. Similarly, files intended for\n   reference only internally to the server (such as access control\n   files, configuration files, and script code) MUST be protected from\n   inappropriate retrieval, since they might contain sensitive\n   information. Experience has shown that minor bugs in such HTTP server\n   implementations have turned into security risks.\n\n<h3 class=\"h3\" id=\"section-15.3\">15.3 DNS Spoofing</h3>\n   Clients using HTTP rely heavily on the Domain Name Service, and are\n   thus generally prone to security attacks based on the deliberate\n   mis-association of IP addresses and DNS names. Clients need to be\n   cautious in assuming the continuing validity of an IP number/DNS name\n   association.\n\n   In particular, HTTP clients SHOULD rely on their name resolver for\n   confirmation of an IP number/DNS name association, rather than\n   caching the result of previous host name lookups. Many platforms\n   already can cache host name lookups locally when appropriate, and\n   they SHOULD be configured to do so. It is proper for these lookups to\n   be cached, however, only when the TTL (Time To Live) information\n   reported by the name server makes it likely that the cached\n   information will remain useful.\n\n   If HTTP clients cache the results of host name lookups in order to\n   achieve a performance improvement, they MUST observe the TTL\n   information reported by DNS.\n\n   If HTTP clients do not observe this rule, they could be spoofed when\n   a previously-accessed server's IP address changes. As network\n   renumbering is expected to become increasingly common [<a href=\"#ref-24\" title='\"Renumbering Needs Work\"'>24</a>], the\n   possibility of this form of attack will grow. Observing this\n   requirement thus reduces this potential security vulnerability.\n\n   This requirement also improves the load-balancing behavior of clients\n   for replicated servers using the same DNS name and reduces the\n   likelihood of a user's experiencing failure in accessing sites which\n   use that strategy.\n\n<h3 class=\"h3\" id=\"section-15.4\">15.4 Location Headers and Spoofing</h3>\n   If a single server supports multiple organizations that do not trust\n   one another, then it MUST check the values of Location and Content-\n   Location headers in responses that are generated under control of\n   said organizations to make sure that they do not attempt to\n   invalidate resources over which they have no authority.\n\n<h3 class=\"h3\" id=\"section-15.5\">15.5 Content-Disposition Issues</h3>\n   <a href=\"https://tools.ietf.org/html/rfc1806\">RFC 1806</a> [<a href=\"#ref-35\" title='\"Communicating Presentation Information in Internet Messages: The Content-Disposition Header\"'>35</a>], from which the often implemented Content-Disposition\n   (see <a href=\"#section-19.5.1\">section 19.5.1</a>) header in HTTP is derived, has a number of very\n   serious security considerations. Content-Disposition is not part of\n   the HTTP standard, but since it is widely implemented, we are\n   documenting its use and risks for implementors. See <a href=\"https://tools.ietf.org/html/rfc2183\">RFC 2183</a> [<a href=\"#ref-49\" title='\"Communicating Presentation Information in Internet Messages: The Content-Disposition Header Field\"'>49</a>]\n   (which updates <a href=\"https://tools.ietf.org/html/rfc1806\">RFC 1806</a>) for details.\n\n<h3 class=\"h3\" id=\"section-15.6\">15.6 Authentication Credentials and Idle Clients</h3>\n   Existing HTTP clients and user agents typically retain authentication\n   information indefinitely. HTTP/1.1. does not provide a method for a\n   server to direct clients to discard these cached credentials. This is\n   a significant defect that requires further extensions to HTTP.\n   Circumstances under which credential caching can interfere with the\n   application's security model include but are not limited to:\n\n      - Clients which have been idle for an extended period following\n        which the server might wish to cause the client to reprompt the\n        user for credentials.\n\n      - Applications which include a session termination indication\n        (such as a `logout' or `commit' button on a page) after which\n        the server side of the application `knows' that there is no\n        further reason for the client to retain the credentials.\n\n   This is currently under separate study. There are a number of work-\n   arounds to parts of this problem, and we encourage the use of\n   password protection in screen savers, idle time-outs, and other\n   methods which mitigate the security problems inherent in this\n   problem. In particular, user agents which cache credentials are\n   encouraged to provide a readily accessible mechanism for discarding\n   cached credentials under user control.\n\n<h3 class=\"h3\" id=\"section-15.7\">15.7 Proxies and Caching</h3>\n   By their very nature, HTTP proxies are men-in-the-middle, and\n   represent an opportunity for man-in-the-middle attacks. Compromise of\n   the systems on which the proxies run can result in serious security\n   and privacy problems. Proxies have access to security-related\n   information, personal information about individual users and\n   organizations, and proprietary information belonging to users and\n   content providers. A compromised proxy, or a proxy implemented or\n   configured without regard to security and privacy considerations,\n   might be used in the commission of a wide range of potential attacks.\n\n   Proxy operators should protect the systems on which proxies run as\n   they would protect any system that contains or transports sensitive\n   information. In particular, log information gathered at proxies often\n   contains highly sensitive personal information, and/or information\n   about organizations. Log information should be carefully guarded, and\n   appropriate guidelines for use developed and followed. (<a href=\"#section-15.1.1\">Section</a>\n   <a href=\"#section-15.1.1\">15.1.1</a>).\n\n   Caching proxies provide additional potential vulnerabilities, since\n   the contents of the cache represent an attractive target for\n   malicious exploitation. Because cache contents persist after an HTTP\n   request is complete, an attack on the cache can reveal information\n   long after a user believes that the information has been removed from\n   the network. Therefore, cache contents should be protected as\n   sensitive information.\n\n   Proxy implementors should consider the privacy and security\n   implications of their design and coding decisions, and of the\n   configuration options they provide to proxy operators (especially the\n   default configuration).\n\n   Users of a proxy need to be aware that they are no trustworthier than\n   the people who run the proxy; HTTP itself cannot solve this problem.\n\n   The judicious use of cryptography, when appropriate, may suffice to\n   protect against a broad range of security and privacy attacks. Such\n   cryptography is beyond the scope of the HTTP/1.1 specification.\n\n<h4 class=\"h4\" id=\"section-15.7.1\">15.7.1 Denial of Service Attacks on Proxies</h4>\n   They exist. They are hard to defend against. Research continues.\n   Beware.\n\n<h2 class=\"h2\" id=\"section-16\">16 Acknowledgments</h2>\n   This specification makes heavy use of the augmented BNF and generic\n   constructs defined by David H. Crocker for <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a> [<a href=\"#ref-9\" title='\"Standard for The Format of ARPA Internet Text Messages\"'>9</a>]. Similarly, it\n   reuses many of the definitions provided by Nathaniel Borenstein and\n   Ned Freed for MIME [<a href=\"#ref-7\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>7</a>]. We hope that their inclusion in this\n   specification will help reduce past confusion over the relationship\n   between HTTP and Internet mail message formats.\n\n   The HTTP protocol has evolved considerably over the years. It has\n   benefited from a large and active developer community--the many\n   people who have participated on the www-talk mailing list--and it is\n   that community which has been most responsible for the success of\n   HTTP and of the World-Wide Web in general. Marc Andreessen, Robert\n   Cailliau, Daniel W. Connolly, Bob Denny, John Franks, Jean-Francois\n   Groff, Phillip M. Hallam-Baker, Hakon W. Lie, Ari Luotonen, Rob\n   McCool, Lou Montulli, Dave Raggett, Tony Sanders, and Marc\n   VanHeyningen deserve special recognition for their efforts in\n   defining early aspects of the protocol.\n\n   This document has benefited greatly from the comments of all those\n   participating in the HTTP-WG. In addition to those already mentioned,\n   the following individuals have contributed to this specification:\n\n       Gary Adams                  Ross Patterson\n       Harald Tveit Alvestrand     Albert Lunde\n       Keith Ball                  John C. Mallery\n       Brian Behlendorf            Jean-Philippe Martin-Flatin\n       Paul Burchard               Mitra\n       Maurizio Codogno            David Morris\n       Mike Cowlishaw              Gavin Nicol\n       Roman Czyborra              Bill Perry\n       Michael A. Dolan            Jeffrey Perry\n       David J. Fiander            Scott Powers\n       Alan Freier                 Owen Rees\n       Marc Hedlund                Luigi Rizzo\n       Greg Herlihy                David Robinson\n       Koen Holtman                Marc Salomon\n       Alex Hopmann                Rich Salz\n       Bob Jernigan                Allan M. Schiffman\n       Shel Kaphan                 Jim Seidman\n       Rohit Khare                 Chuck Shotton\n       John Klensin                Eric W. Sink\n       Martijn Koster              Simon E. Spero\n       Alexei Kosut                Richard N. Taylor\n       David M. Kristol            Robert S. Thau\n       Daniel LaLiberte            Bill (BearHeart) Weinman\n       Ben Laurie                  Francois Yergeau\n       Paul J. Leach               Mary Ellen Zurko\n       Daniel DuBois               Josh Cohen\n\n\n   Much of the content and presentation of the caching design is due to\n   suggestions and comments from individuals including: Shel Kaphan,\n   Paul Leach, Koen Holtman, David Morris, and Larry Masinter.\n\n   Most of the specification of ranges is based on work originally done\n   by Ari Luotonen and John Franks, with additional input from Steve\n   Zilles.\n\n   Thanks to the \"cave men\" of Palo Alto. You know who you are.\n\n   Jim Gettys (the current editor of this document) wishes particularly\n   to thank Roy Fielding, the previous editor of this document, along\n   with John Klensin, Jeff Mogul, Paul Leach, Dave Kristol, Koen\n   Holtman, John Franks, Josh Cohen, Alex Hopmann, Scott Lawrence, and\n   Larry Masinter for their help. And thanks go particularly to Jeff\n   Mogul and Scott Lawrence for performing the \"MUST/MAY/SHOULD\" audit.\n\n   The Apache Group, Anselm Baird-Smith, author of Jigsaw, and Henrik\n   Frystyk implemented <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a> early, and we wish to thank them for the\n   discovery of many of the problems that this document attempts to\n   rectify.\n\n<h2 class=\"h2\" id=\"section-17\">17 References</h2>\n   [<a name=\"ref-1\" id=\"ref-1\">1</a>] Alvestrand, H., \"Tags for the Identification of Languages\", <a href=\"https://tools.ietf.org/html/rfc1766\">RFC</a>\n       <a href=\"https://tools.ietf.org/html/rfc1766\">1766</a>, March 1995.\n\n   [<a name=\"ref-2\" id=\"ref-2\">2</a>] Anklesaria, F., McCahill, M., Lindner, P., Johnson, D., Torrey,\n       D. and B. Alberti, \"The Internet Gopher Protocol (a distributed\n       document search and retrieval protocol)\", <a href=\"https://tools.ietf.org/html/rfc1436\">RFC 1436</a>, March 1993.\n\n   [<a name=\"ref-3\" id=\"ref-3\">3</a>] Berners-Lee, T., \"Universal Resource Identifiers in WWW\", <a href=\"https://tools.ietf.org/html/rfc1630\">RFC</a>\n       <a href=\"https://tools.ietf.org/html/rfc1630\">1630</a>, June 1994.\n\n   [<a name=\"ref-4\" id=\"ref-4\">4</a>] Berners-Lee, T., Masinter, L. and M. McCahill, \"Uniform Resource\n       Locators (URL)\", <a href=\"https://tools.ietf.org/html/rfc1738\">RFC 1738</a>, December 1994.\n\n   [<a name=\"ref-5\" id=\"ref-5\">5</a>] Berners-Lee, T. and D. Connolly, \"Hypertext Markup Language -\n       2.0\", <a href=\"https://tools.ietf.org/html/rfc1866\">RFC 1866</a>, November 1995.\n\n   [<a name=\"ref-6\" id=\"ref-6\">6</a>] Berners-Lee, T., Fielding, R. and H. Frystyk, \"Hypertext Transfer\n       Protocol -- HTTP/1.0\", <a href=\"https://tools.ietf.org/html/rfc1945\">RFC 1945</a>, May 1996.\n\n   [<a name=\"ref-7\" id=\"ref-7\">7</a>] Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n       Extensions (MIME) Part One: Format of Internet Message Bodies\",\n       <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a>, November 1996.\n\n   [<a name=\"ref-8\" id=\"ref-8\">8</a>] Braden, R., \"Requirements for Internet Hosts -- Communication\n       Layers\", STD 3, <a href=\"https://tools.ietf.org/html/rfc1123\">RFC 1123</a>, October 1989.\n\n   [<a name=\"ref-9\" id=\"ref-9\">9</a>] Crocker, D., \"Standard for The Format of ARPA Internet Text\n       Messages\", STD 11, <a href=\"https://tools.ietf.org/html/rfc822\">RFC 822</a>, August 1982.\n\n   [<a name=\"ref-10\" id=\"ref-10\">10</a>] Davis, F., Kahle, B., Morris, H., Salem, J., Shen, T., Wang, R.,\n        Sui, J., and M. Grinbaum, \"WAIS Interface Protocol Prototype\n        Functional Specification,\" (v1.5), Thinking Machines\n        Corporation, April 1990.\n\n   [<a name=\"ref-11\" id=\"ref-11\">11</a>] Fielding, R., \"Relative Uniform Resource Locators\", <a href=\"https://tools.ietf.org/html/rfc1808\">RFC 1808</a>,\n        June 1995.\n\n   [<a name=\"ref-12\" id=\"ref-12\">12</a>] Horton, M. and R. Adams, \"Standard for Interchange of USENET\n        Messages\", <a href=\"https://tools.ietf.org/html/rfc1036\">RFC 1036</a>, December 1987.\n\n   [<a name=\"ref-13\" id=\"ref-13\">13</a>] Kantor, B. and P. Lapsley, \"Network News Transfer Protocol\", <a href=\"https://tools.ietf.org/html/rfc977\">RFC</a>\n        <a href=\"https://tools.ietf.org/html/rfc977\">977</a>, February 1986.\n\n   [<a name=\"ref-14\" id=\"ref-14\">14</a>] Moore, K., \"MIME (Multipurpose Internet Mail Extensions) Part\n        Three: Message Header Extensions for Non-ASCII Text\", <a href=\"https://tools.ietf.org/html/rfc2047\">RFC 2047</a>,\n        November 1996.\n\n   [<a name=\"ref-15\" id=\"ref-15\">15</a>] Nebel, E. and L. Masinter, \"Form-based File Upload in HTML\", <a href=\"https://tools.ietf.org/html/rfc1867\">RFC</a>\n        <a href=\"https://tools.ietf.org/html/rfc1867\">1867</a>, November 1995.\n\n   [<a name=\"ref-16\" id=\"ref-16\">16</a>] Postel, J., \"Simple Mail Transfer Protocol\", STD 10, <a href=\"https://tools.ietf.org/html/rfc821\">RFC 821</a>,\n        August 1982.\n\n   [<a name=\"ref-17\" id=\"ref-17\">17</a>] Postel, J., \"Media Type Registration Procedure\", <a href=\"https://tools.ietf.org/html/rfc1590\">RFC 1590</a>,\n        November 1996.\n\n   [<a name=\"ref-18\" id=\"ref-18\">18</a>] Postel, J. and J. Reynolds, \"File Transfer Protocol\", STD 9, <a href=\"https://tools.ietf.org/html/rfc959\">RFC</a>\n        <a href=\"https://tools.ietf.org/html/rfc959\">959</a>, October 1985.\n\n   [<a name=\"ref-19\" id=\"ref-19\">19</a>] Reynolds, J. and J. Postel, \"Assigned Numbers\", STD 2, <a href=\"https://tools.ietf.org/html/rfc1700\">RFC 1700</a>,\n        October 1994.\n\n   [<a name=\"ref-20\" id=\"ref-20\">20</a>] Sollins, K. and L. Masinter, \"Functional Requirements for\n        Uniform Resource Names\", <a href=\"https://tools.ietf.org/html/rfc1737\">RFC 1737</a>, December 1994.\n\n   [<a name=\"ref-21\" id=\"ref-21\">21</a>] US-ASCII. Coded Character Set - 7-Bit American Standard Code for\n        Information Interchange. Standard ANSI X3.4-1986, ANSI, 1986.\n\n   [<a name=\"ref-22\" id=\"ref-22\">22</a>] ISO-8859. International Standard -- Information Processing --\n        8-bit Single-Byte Coded Graphic Character Sets --\n        Part 1: Latin alphabet No. 1, ISO-8859-1:1987.\n        Part 2: Latin alphabet No. 2, ISO-8859-2, 1987.\n        Part 3: Latin alphabet No. 3, ISO-8859-3, 1988.\n        Part 4: Latin alphabet No. 4, ISO-8859-4, 1988.\n        Part 5: Latin/Cyrillic alphabet, ISO-8859-5, 1988.\n        Part 6: Latin/Arabic alphabet, ISO-8859-6, 1987.\n        Part 7: Latin/Greek alphabet, ISO-8859-7, 1987.\n        Part 8: Latin/Hebrew alphabet, ISO-8859-8, 1988.\n        Part 9: Latin alphabet No. 5, ISO-8859-9, 1990.\n\n   [<a name=\"ref-23\" id=\"ref-23\">23</a>] Meyers, J. and M. Rose, \"The Content-MD5 Header Field\", <a href=\"https://tools.ietf.org/html/rfc1864\">RFC</a>\n        <a href=\"https://tools.ietf.org/html/rfc1864\">1864</a>, October 1995.\n\n   [<a name=\"ref-24\" id=\"ref-24\">24</a>] Carpenter, B. and Y. Rekhter, \"Renumbering Needs Work\", <a href=\"https://tools.ietf.org/html/rfc1900\">RFC</a>\n        <a href=\"https://tools.ietf.org/html/rfc1900\">1900</a>, February 1996.\n\n   [<a name=\"ref-25\" id=\"ref-25\">25</a>] Deutsch, P., \"GZIP file format specification version 4.3\", <a href=\"https://tools.ietf.org/html/rfc1952\">RFC</a>\n        <a href=\"https://tools.ietf.org/html/rfc1952\">1952</a>, May 1996.\n\n   [<a name=\"ref-26\" id=\"ref-26\">26</a>] Venkata N. Padmanabhan, and Jeffrey C. Mogul. \"Improving HTTP\n        Latency\", Computer Networks and ISDN Systems, v. 28, pp. 25-35,\n        Dec. 1995. Slightly revised version of paper in Proc. 2nd\n        International WWW Conference '94: Mosaic and the Web, Oct. 1994,\n        which is available at\n        <a href=\"http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/DDay/mogul/HTTPLatency.html\">http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/DDay/mogul/HTTPLat</a>\n        <a href=\"http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/DDay/mogul/HTTPLatency.html\">ency.html</a>.\n\n   [<a name=\"ref-27\" id=\"ref-27\">27</a>] Joe Touch, John Heidemann, and Katia Obraczka. \"Analysis of HTTP\n        Performance\", &lt;URL: <a href=\"http://www.isi.edu/touch/pubs/http-perf96/\">http://www.isi.edu/touch/pubs/http-perf96/</a>&gt;,\n        ISI Research Report ISI/RR-98-463, (original report dated Aug.\n        1996), USC/Information Sciences Institute, August 1998.\n\n   [<a name=\"ref-28\" id=\"ref-28\">28</a>] Mills, D., \"Network Time Protocol (Version 3) Specification,\n        Implementation and Analysis\", <a href=\"https://tools.ietf.org/html/rfc1305\">RFC 1305</a>, March 1992.\n\n   [<a name=\"ref-29\" id=\"ref-29\">29</a>] Deutsch, P., \"DEFLATE Compressed Data Format Specification\n        version 1.3\", <a href=\"https://tools.ietf.org/html/rfc1951\">RFC 1951</a>, May 1996.\n\n   [<a name=\"ref-30\" id=\"ref-30\">30</a>] S. Spero, \"Analysis of HTTP Performance Problems,\"\n        <a href=\"http://sunsite.unc.edu/mdma-release/http-prob.html\">http://sunsite.unc.edu/mdma-release/http-prob.html</a>.\n\n   [<a name=\"ref-31\" id=\"ref-31\">31</a>] Deutsch, P. and J. Gailly, \"ZLIB Compressed Data Format\n        Specification version 3.3\", <a href=\"https://tools.ietf.org/html/rfc1950\">RFC 1950</a>, May 1996.\n\n   [<a name=\"ref-32\" id=\"ref-32\">32</a>] Franks, J., Hallam-Baker, P., Hostetler, J., Leach, P.,\n        Luotonen, A., Sink, E. and L. Stewart, \"An Extension to HTTP:\n        Digest Access Authentication\", <a href=\"https://tools.ietf.org/html/rfc2069\">RFC 2069</a>, January 1997.\n\n   [<a name=\"ref-33\" id=\"ref-33\">33</a>] Fielding, R., Gettys, J., Mogul, J., Frystyk, H. and T.\n        Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", <a href=\"https://tools.ietf.org/html/rfc2068\">RFC</a>\n        <a href=\"https://tools.ietf.org/html/rfc2068\">2068</a>, January 1997.\n\n   [<a name=\"ref-34\" id=\"ref-34\">34</a>] Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\", <a href=\"https://tools.ietf.org/html/bcp14\">BCP 14</a>, <a href=\"https://tools.ietf.org/html/rfc2119\">RFC 2119</a>, March 1997.\n\n   [<a name=\"ref-35\" id=\"ref-35\">35</a>] Troost, R. and Dorner, S., \"Communicating Presentation\n        Information in Internet Messages: The Content-Disposition\n        Header\", <a href=\"https://tools.ietf.org/html/rfc1806\">RFC 1806</a>, June 1995.\n\n   [<a name=\"ref-36\" id=\"ref-36\">36</a>] Mogul, J., Fielding, R., Gettys, J. and H. Frystyk, \"Use and\n        Interpretation of HTTP Version Numbers\", <a href=\"https://tools.ietf.org/html/rfc2145\">RFC 2145</a>, May 1997.\n        [jg639]\n\n   [<a name=\"ref-37\" id=\"ref-37\">37</a>] Palme, J., \"Common Internet Message Headers\", <a href=\"https://tools.ietf.org/html/rfc2076\">RFC 2076</a>, February\n        1997. [jg640]\n\n   [<a name=\"ref-38\" id=\"ref-38\">38</a>] Yergeau, F., \"UTF-8, a transformation format of Unicode and\n        ISO-10646\", <a href=\"https://tools.ietf.org/html/rfc2279\">RFC 2279</a>, January 1998. [jg641]\n\n   [<a name=\"ref-39\" id=\"ref-39\">39</a>] Nielsen, H.F., Gettys, J., Baird-Smith, A., Prud'hommeaux, E.,\n        Lie, H., and C. Lilley. \"Network Performance Effects of\n        HTTP/1.1, CSS1, and PNG,\" Proceedings of ACM SIGCOMM '97, Cannes\n        France, September 1997.[jg642]\n\n   [<a name=\"ref-40\" id=\"ref-40\">40</a>] Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions (MIME) Part Two: Media Types\", <a href=\"https://tools.ietf.org/html/rfc2046\">RFC 2046</a>, November\n        1996. [jg643]\n\n   [<a name=\"ref-41\" id=\"ref-41\">41</a>] Alvestrand, H., \"IETF Policy on Character Sets and Languages\",\n        <a href=\"https://tools.ietf.org/html/bcp18\">BCP 18</a>, <a href=\"https://tools.ietf.org/html/rfc2277\">RFC 2277</a>, January 1998. [jg644]\n\n   [<a name=\"ref-42\" id=\"ref-42\">42</a>] Berners-Lee, T., Fielding, R. and L. Masinter, \"Uniform Resource\n        Identifiers (URI): Generic Syntax and Semantics\", <a href=\"https://tools.ietf.org/html/rfc2396\">RFC 2396</a>,\n        August 1998. [jg645]\n\n   [<a name=\"ref-43\" id=\"ref-43\">43</a>] Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n        Leach, P., Luotonen, A., Sink, E. and L. Stewart, \"HTTP\n        Authentication: Basic and Digest Access Authentication\", <a href=\"https://tools.ietf.org/html/rfc2617\">RFC</a>\n        <a href=\"https://tools.ietf.org/html/rfc2617\">2617</a>, June 1999. [jg646]\n\n   [<a name=\"ref-44\" id=\"ref-44\">44</a>] Luotonen, A., \"Tunneling TCP based protocols through Web proxy\n        servers,\" Work in Progress. [jg647]\n\n   [<a name=\"ref-45\" id=\"ref-45\">45</a>] Palme, J. and A. Hopmann, \"MIME E-mail Encapsulation of\n        Aggregate Documents, such as HTML (MHTML)\", <a href=\"https://tools.ietf.org/html/rfc2110\">RFC 2110</a>, March\n        1997.\n\n   [<a name=\"ref-46\" id=\"ref-46\">46</a>] Bradner, S., \"The Internet Standards Process -- Revision 3\", <a href=\"https://tools.ietf.org/html/bcp9\">BCP</a>\n        <a href=\"https://tools.ietf.org/html/bcp9\">9</a>, <a href=\"https://tools.ietf.org/html/rfc2026\">RFC 2026</a>, October 1996.\n\n   [<a name=\"ref-47\" id=\"ref-47\">47</a>] Masinter, L., \"Hyper Text Coffee Pot Control Protocol\n        (HTCPCP/1.0)\", <a href=\"https://tools.ietf.org/html/rfc2324\">RFC 2324</a>, 1 April 1998.\n\n   [<a name=\"ref-48\" id=\"ref-48\">48</a>] Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions (MIME) Part Five: Conformance Criteria and Examples\",\n        <a href=\"https://tools.ietf.org/html/rfc2049\">RFC 2049</a>, November 1996.\n\n   [<a name=\"ref-49\" id=\"ref-49\">49</a>] Troost, R., Dorner, S. and K. Moore, \"Communicating Presentation\n        Information in Internet Messages: The Content-Disposition Header\n        Field\", <a href=\"https://tools.ietf.org/html/rfc2183\">RFC 2183</a>, August 1997.\n\n<h2 class=\"h2\" id=\"section-18\">18 Authors' Addresses</h2>\n   Roy T. Fielding\n   Information and Computer Science\n   University of California, Irvine\n   Irvine, CA 92697-3425, USA\n\n   Fax: +1 (949) 824-1715\n   EMail: fielding@ics.uci.edu\n\n\n   James Gettys\n   World Wide Web Consortium\n   MIT Laboratory for Computer Science\n   545 Technology Square\n   Cambridge, MA 02139, USA\n\n   Fax: +1 (617) 258 8682\n   EMail: jg@w3.org\n\n\n   Jeffrey C. Mogul\n   Western Research Laboratory\n   Compaq Computer Corporation\n   250 University Avenue\n   Palo Alto, California, 94305, USA\n\n   EMail: mogul@wrl.dec.com\n\n\n   Henrik Frystyk Nielsen\n   World Wide Web Consortium\n   MIT Laboratory for Computer Science\n   545 Technology Square\n   Cambridge, MA 02139, USA\n\n   Fax: +1 (617) 258 8682\n   EMail: frystyk@w3.org\n\n\n   Larry Masinter\n   Xerox Corporation\n   3333 Coyote Hill Road\n   Palo Alto, CA 94034, USA\n\n   EMail: masinter@parc.xerox.com\n\n   Paul J. Leach\n   Microsoft Corporation\n   1 Microsoft Way\n   Redmond, WA 98052, USA\n\n   EMail: paulle@microsoft.com\n\n\n   Tim Berners-Lee\n   Director, World Wide Web Consortium\n   MIT Laboratory for Computer Science\n   545 Technology Square\n   Cambridge, MA 02139, USA\n\n   Fax: +1 (617) 258 8682\n   EMail: timbl@w3.org\n\n<h2 class=\"h2\" id=\"section-19\">19 Appendices</h2>\n<h3 class=\"h3\" id=\"section-19.1\">19.1 Internet Media Type message/http and application/http</h3>\n   In addition to defining the HTTP/1.1 protocol, this document serves\n   as the specification for the Internet media type \"message/http\" and\n   \"application/http\". The message/http type can be used to enclose a\n   single HTTP request or response message, provided that it obeys the\n   MIME restrictions for all \"message\" types regarding line length and\n   encodings. The application/http type can be used to enclose a\n   pipeline of one or more HTTP request or response messages (not\n   intermixed). The following is to be registered with IANA [<a href=\"#ref-17\" title='\"Media Type Registration Procedure\"'>17</a>].\n\n       Media Type name:         message\n       Media subtype name:      http\n       Required parameters:     none\n       Optional parameters:     version, msgtype\n        version: The HTTP-Version number of the enclosed message\n                 (e.g., \"1.1\"). If not present, the version can be\n                 determined from the first line of the body.\n        msgtype: The message type -- \"request\" or \"response\". If not\n                 present, the type can be determined from the first\n                 line of the body.\n       Encoding considerations: only \"7bit\", \"8bit\", or \"binary\" are\n                                permitted\n       Security considerations: none\n\n       Media Type name:         application\n       Media subtype name:      http\n       Required parameters:     none\n       Optional parameters:     version, msgtype\n        version: The HTTP-Version number of the enclosed messages\n                 (e.g., \"1.1\"). If not present, the version can be\n                 determined from the first line of the body.\n        msgtype: The message type -- \"request\" or \"response\". If not\n                 present, the type can be determined from the first\n                 line of the body.\n       Encoding considerations: HTTP messages enclosed by this type\n                 are in \"binary\" format; use of an appropriate\n                 Content-Transfer-Encoding is required when\n                 transmitted via E-mail.\n       Security considerations: none\n\n<h3 class=\"h3\" id=\"section-19.2\">19.2 Internet Media Type multipart/byteranges</h3>\n   When an HTTP 206 (Partial Content) response message includes the\n   content of multiple ranges (a response to a request for multiple\n   non-overlapping ranges), these are transmitted as a multipart\n   message-body. The media type for this purpose is called\n   \"multipart/byteranges\".\n\n   The multipart/byteranges media type includes two or more parts, each\n   with its own Content-Type and Content-Range fields. The required\n   boundary parameter specifies the boundary string used to separate\n   each body-part.\n\n       Media Type name:         multipart\n       Media subtype name:      byteranges\n       Required parameters:     boundary\n       Optional parameters:     none\n       Encoding considerations: only \"7bit\", \"8bit\", or \"binary\" are\n                                permitted\n       Security considerations: none\n\n\n   For example:\n\n   HTTP/1.1 206 Partial Content\n   Date: Wed, 15 Nov 1995 06:25:24 GMT\n   Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT\n   Content-type: multipart/byteranges; boundary=THIS_STRING_SEPARATES\n\n   --THIS_STRING_SEPARATES\n   Content-type: application/pdf\n   Content-range: bytes 500-999/8000\n\n   ...the first range\n   --THIS_STRING_SEPARATES\n   Content-type: application/pdf\n   Content-range: bytes 7000-7999/8000\n\n   ...the second range\n   --THIS_STRING_SEPARATES--\n\n      Notes:\n\n      1) Additional CRLFs may precede the first boundary string in the\n         entity.\n\n      2) Although <a href=\"https://tools.ietf.org/html/rfc2046\">RFC 2046</a> [<a href=\"#ref-40\" title='\"Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types\"'>40</a>] permits the boundary string to be\n         quoted, some existing implementations handle a quoted boundary\n         string incorrectly.\n\n      3) A number of browsers and servers were coded to an early draft\n         of the byteranges specification to use a media type of\n         multipart/x-byteranges, which is almost, but not quite\n         compatible with the version documented in HTTP/1.1.\n\n<h3 class=\"h3\" id=\"section-19.3\">19.3 Tolerant Applications</h3>\n   Although this document specifies the requirements for the generation\n   of HTTP/1.1 messages, not all applications will be correct in their\n   implementation. We therefore recommend that operational applications\n   be tolerant of deviations whenever those deviations can be\n   interpreted unambiguously.\n\n   Clients SHOULD be tolerant in parsing the Status-Line and servers\n   tolerant when parsing the Request-Line. In particular, they SHOULD\n   accept any amount of SP or HT characters between fields, even though\n   only a single SP is required.\n\n   The line terminator for message-header fields is the sequence CRLF.\n   However, we recommend that applications, when parsing such headers,\n   recognize a single LF as a line terminator and ignore the leading CR.\n\n   The character set of an entity-body SHOULD be labeled as the lowest\n   common denominator of the character codes used within that body, with\n   the exception that not labeling the entity is preferred over labeling\n   the entity with the labels US-ASCII or ISO-8859-1. See <a href=\"#section-3.7.1\">section 3.7.1</a>\n   and 3.4.1.\n\n   Additional rules for requirements on parsing and encoding of dates\n   and other potential problems with date encodings include:\n\n      - HTTP/1.1 clients and caches SHOULD assume that an <a href=\"https://tools.ietf.org/html/rfc850\">RFC-850</a> date\n        which appears to be more than 50 years in the future is in fact\n        in the past (this helps solve the \"year 2000\" problem).\n\n      - An HTTP/1.1 implementation MAY internally represent a parsed\n        Expires date as earlier than the proper value, but MUST NOT\n        internally represent a parsed Expires date as later than the\n        proper value.\n\n      - All expiration-related calculations MUST be done in GMT. The\n        local time zone MUST NOT influence the calculation or comparison\n        of an age or expiration time.\n\n      - If an HTTP header incorrectly carries a date value with a time\n        zone other than GMT, it MUST be converted into GMT using the\n        most conservative possible conversion.\n\n<h3 class=\"h3\" id=\"section-19.4\">19.4 Differences Between HTTP Entities and <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a> Entities</h3>\n   HTTP/1.1 uses many of the constructs defined for Internet Mail (<a href=\"https://tools.ietf.org/html/rfc822\">RFC</a>\n   <a href=\"https://tools.ietf.org/html/rfc822\">822</a> [<a href=\"#ref-9\" title='\"Standard for The Format of ARPA Internet Text Messages\"'>9</a>]) and the Multipurpose Internet Mail Extensions (MIME [<a href=\"#ref-7\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>7</a>]) to\n   allow entities to be transmitted in an open variety of\n   representations and with extensible mechanisms. However, <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a>\n   discusses mail, and HTTP has a few features that are different from\n   those described in <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a>. These differences were carefully chosen\n   to optimize performance over binary connections, to allow greater\n   freedom in the use of new media types, to make date comparisons\n   easier, and to acknowledge the practice of some early HTTP servers\n   and clients.\n\n   This appendix describes specific areas where HTTP differs from <a href=\"https://tools.ietf.org/html/rfc2045\">RFC</a>\n   <a href=\"https://tools.ietf.org/html/rfc2045\">2045</a>. Proxies and gateways to strict MIME environments SHOULD be\n   aware of these differences and provide the appropriate conversions\n   where necessary. Proxies and gateways from MIME environments to HTTP\n   also need to be aware of the differences because some conversions\n   might be required.\n\n<h4 class=\"h4\" id=\"section-19.4.1\">19.4.1 MIME-Version</h4>\n   HTTP is not a MIME-compliant protocol. However, HTTP/1.1 messages MAY\n   include a single MIME-Version general-header field to indicate what\n   version of the MIME protocol was used to construct the message. Use\n   of the MIME-Version header field indicates that the message is in\n   full compliance with the MIME protocol (as defined in <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a>[<a href=\"#ref-7\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>7</a>]).\n   Proxies/gateways are responsible for ensuring full compliance (where\n   possible) when exporting HTTP messages to strict MIME environments.\n\n       MIME-Version   = \"MIME-Version\" \":\" 1*DIGIT \".\" 1*DIGIT\n\n   MIME version \"1.0\" is the default for use in HTTP/1.1. However,\n   HTTP/1.1 message parsing and semantics are defined by this document\n   and not the MIME specification.\n\n<h4 class=\"h4\" id=\"section-19.4.2\">19.4.2 Conversion to Canonical Form</h4>\n   <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a> [<a href=\"#ref-7\" title='\"Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies\"'>7</a>] requires that an Internet mail entity be converted to\n   canonical form prior to being transferred, as described in <a href=\"https://tools.ietf.org/html/rfc2049#section-4\">section 4\n   of RFC 2049</a> [<a href=\"#ref-48\" title='\"Multipurpose Internet Mail Extensions (MIME) Part Five: Conformance Criteria and Examples\"'>48</a>]. <a href=\"#section-3.7.1\">Section 3.7.1</a> of this document describes the forms\n   allowed for subtypes of the \"text\" media type when transmitted over\n   HTTP. <a href=\"https://tools.ietf.org/html/rfc2046\">RFC 2046</a> requires that content with a type of \"text\" represent\n   line breaks as CRLF and forbids the use of CR or LF outside of line\n\n   break sequences. HTTP allows CRLF, bare CR, and bare LF to indicate a\n   line break within text content when a message is transmitted over\n   HTTP.\n\n   Where it is possible, a proxy or gateway from HTTP to a strict MIME\n   environment SHOULD translate all line breaks within the text media\n   types described in <a href=\"#section-3.7.1\">section 3.7.1</a> of this document to the <a href=\"https://tools.ietf.org/html/rfc2049\">RFC 2049</a>\n   canonical form of CRLF. Note, however, that this might be complicated\n   by the presence of a Content-Encoding and by the fact that HTTP\n   allows the use of some character sets which do not use octets 13 and\n   10 to represent CR and LF, as is the case for some multi-byte\n   character sets.\n\n   Implementors should note that conversion will break any cryptographic\n   checksums applied to the original content unless the original content\n   is already in canonical form. Therefore, the canonical form is\n   recommended for any content that uses such checksums in HTTP.\n\n<h4 class=\"h4\" id=\"section-19.4.3\">19.4.3 Conversion of Date Formats</h4>\n   HTTP/1.1 uses a restricted set of date formats (<a href=\"#section-3.3.1\">section 3.3.1</a>) to\n   simplify the process of date comparison. Proxies and gateways from\n   other protocols SHOULD ensure that any Date header field present in a\n   message conforms to one of the HTTP/1.1 formats and rewrite the date\n   if necessary.\n\n<h4 class=\"h4\" id=\"section-19.4.4\">19.4.4 Introduction of Content-Encoding</h4>\n   <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a> does not include any concept equivalent to HTTP/1.1's\n   Content-Encoding header field. Since this acts as a modifier on the\n   media type, proxies and gateways from HTTP to MIME-compliant\n   protocols MUST either change the value of the Content-Type header\n   field or decode the entity-body before forwarding the message. (Some\n   experimental applications of Content-Type for Internet mail have used\n   a media-type parameter of \";conversions=&lt;content-coding&gt;\" to perform\n   a function equivalent to Content-Encoding. However, this parameter is\n   not part of <a href=\"https://tools.ietf.org/html/rfc2045\">RFC 2045</a>.)\n\n<h4 class=\"h4\" id=\"section-19.4.5\">19.4.5 No Content-Transfer-Encoding</h4>\n   HTTP does not use the Content-Transfer-Encoding (CTE) field of <a href=\"https://tools.ietf.org/html/rfc2045\">RFC</a>\n   <a href=\"https://tools.ietf.org/html/rfc2045\">2045</a>. Proxies and gateways from MIME-compliant protocols to HTTP MUST\n   remove any non-identity CTE (\"quoted-printable\" or \"base64\") encoding\n   prior to delivering the response message to an HTTP client.\n\n   Proxies and gateways from HTTP to MIME-compliant protocols are\n   responsible for ensuring that the message is in the correct format\n   and encoding for safe transport on that protocol, where \"safe\n\n   transport\" is defined by the limitations of the protocol being used.\n   Such a proxy or gateway SHOULD label the data with an appropriate\n   Content-Transfer-Encoding if doing so will improve the likelihood of\n   safe transport over the destination protocol.\n\n<h4 class=\"h4\" id=\"section-19.4.6\">19.4.6 Introduction of Transfer-Encoding</h4>\n   HTTP/1.1 introduces the Transfer-Encoding header field (<a href=\"#section-14.41\">section</a>\n   <a href=\"#section-14.41\">14.41</a>). Proxies/gateways MUST remove any transfer-coding prior to\n   forwarding a message via a MIME-compliant protocol.\n\n   A process for decoding the \"chunked\" transfer-coding (<a href=\"#section-3.6\">section 3.6</a>)\n   can be represented in pseudo-code as:\n\n       length := 0\n       read chunk-size, chunk-extension (if any) and CRLF\n       while (chunk-size &gt; 0) {\n          read chunk-data and CRLF\n          append chunk-data to entity-body\n          length := length + chunk-size\n          read chunk-size and CRLF\n       }\n       read entity-header\n       while (entity-header not empty) {\n          append entity-header to existing header fields\n          read entity-header\n       }\n       Content-Length := length\n       Remove \"chunked\" from Transfer-Encoding\n\n<h4 class=\"h4\" id=\"section-19.4.7\">19.4.7 MHTML and Line Length Limitations</h4>\n   HTTP implementations which share code with MHTML [<a href=\"#ref-45\" title='\"MIME E-mail Encapsulation of Aggregate Documents, such as HTML (MHTML)\"'>45</a>] implementations\n   need to be aware of MIME line length limitations. Since HTTP does not\n   have this limitation, HTTP does not fold long lines. MHTML messages\n   being transported by HTTP follow all conventions of MHTML, including\n   line length limitations and folding, canonicalization, etc., since\n   HTTP transports all message-bodies as payload (see <a href=\"#section-3.7.2\">section 3.7.2</a>) and\n   does not interpret the content or any MIME header lines that might be\n   contained therein.\n\n<h3 class=\"h3\" id=\"section-19.5\">19.5 Additional Features</h3>\n   <a href=\"https://tools.ietf.org/html/rfc1945\">RFC 1945</a> and <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a> document protocol elements used by some\n   existing HTTP implementations, but not consistently and correctly\n   across most HTTP/1.1 applications. Implementors are advised to be\n   aware of these features, but cannot rely upon their presence in, or\n   interoperability with, other HTTP/1.1 applications. Some of these\n\n   describe proposed experimental features, and some describe features\n   that experimental deployment found lacking that are now addressed in\n   the base HTTP/1.1 specification.\n\n   A number of other headers, such as Content-Disposition and Title,\n   from SMTP and MIME are also often implemented (see <a href=\"https://tools.ietf.org/html/rfc2076\">RFC 2076</a> [<a href=\"#ref-37\" title='\"Common Internet Message Headers\"'>37</a>]).\n\n<h4 class=\"h4\" id=\"section-19.5.1\">19.5.1 Content-Disposition</h4>\n   The Content-Disposition response-header field has been proposed as a\n   means for the origin server to suggest a default filename if the user\n   requests that the content is saved to a file. This usage is derived\n   from the definition of Content-Disposition in <a href=\"https://tools.ietf.org/html/rfc1806\">RFC 1806</a> [<a href=\"#ref-35\" title='\"Communicating Presentation Information in Internet Messages: The Content-Disposition Header\"'>35</a>].\n\n        content-disposition = \"Content-Disposition\" \":\"\n                              disposition-type *( \";\" disposition-parm )\n        disposition-type = \"attachment\" | disp-extension-token\n        disposition-parm = filename-parm | disp-extension-parm\n        filename-parm = \"filename\" \"=\" quoted-string\n        disp-extension-token = token\n        disp-extension-parm = token \"=\" ( token | quoted-string )\n\n   An example is\n\n        Content-Disposition: attachment; filename=\"fname.ext\"\n\n   The receiving user agent SHOULD NOT respect any directory path\n   information present in the filename-parm parameter, which is the only\n   parameter believed to apply to HTTP implementations at this time. The\n   filename SHOULD be treated as a terminal component only.\n\n   If this header is used in a response with the application/octet-\n   stream content-type, the implied suggestion is that the user agent\n   should not display the response, but directly enter a `save response\n   as...' dialog.\n\n   See <a href=\"#section-15.5\">section 15.5</a> for Content-Disposition security issues.\n\n<h3 class=\"h3\" id=\"section-19.6\">19.6 Compatibility with Previous Versions</h3>\n   It is beyond the scope of a protocol specification to mandate\n   compliance with previous versions. HTTP/1.1 was deliberately\n   designed, however, to make supporting previous versions easy. It is\n   worth noting that, at the time of composing this specification\n   (1996), we would expect commercial HTTP/1.1 servers to:\n\n      - recognize the format of the Request-Line for HTTP/0.9, 1.0, and\n        1.1 requests;\n\n      - understand any valid request in the format of HTTP/0.9, 1.0, or\n        1.1;\n\n      - respond appropriately with a message in the same major version\n        used by the client.\n\n   And we would expect HTTP/1.1 clients to:\n\n      - recognize the format of the Status-Line for HTTP/1.0 and 1.1\n        responses;\n\n      - understand any valid response in the format of HTTP/0.9, 1.0, or\n        1.1.\n\n   For most implementations of HTTP/1.0, each connection is established\n   by the client prior to the request and closed by the server after\n   sending the response. Some implementations implement the Keep-Alive\n   version of persistent connections described in section 19.7.1 of <a href=\"https://tools.ietf.org/html/rfc2068\">RFC</a>\n   <a href=\"https://tools.ietf.org/html/rfc2068\">2068</a> [<a href=\"#ref-33\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>33</a>].\n\n<h4 class=\"h4\" id=\"section-19.6.1\">19.6.1 Changes from HTTP/1.0</h4>\n   This section summarizes major differences between versions HTTP/1.0\n   and HTTP/1.1.\n\n<h5 class=\"h5\" id=\"section-19.6.1.1\">19.6.1.1 Changes to Simplify Multi-homed Web Servers and Conserve IP</h5>\n<h5 class=\"h5\">Addresses</h5>\n   The requirements that clients and servers support the Host request-\n   header, report an error if the Host request-header (<a href=\"#section-14.23\">section 14.23</a>) is\n   missing from an HTTP/1.1 request, and accept absolute URIs (<a href=\"#section-5.1.2\">section</a>\n   <a href=\"#section-5.1.2\">5.1.2</a>) are among the most important changes defined by this\n   specification.\n\n   Older HTTP/1.0 clients assumed a one-to-one relationship of IP\n   addresses and servers; there was no other established mechanism for\n   distinguishing the intended server of a request than the IP address\n   to which that request was directed. The changes outlined above will\n   allow the Internet, once older HTTP clients are no longer common, to\n   support multiple Web sites from a single IP address, greatly\n   simplifying large operational Web servers, where allocation of many\n   IP addresses to a single host has created serious problems. The\n   Internet will also be able to recover the IP addresses that have been\n   allocated for the sole purpose of allowing special-purpose domain\n   names to be used in root-level HTTP URLs. Given the rate of growth of\n   the Web, and the number of servers already deployed, it is extremely\n\n   important that all implementations of HTTP (including updates to\n   existing HTTP/1.0 applications) correctly implement these\n   requirements:\n\n      - Both clients and servers MUST support the Host request-header.\n\n      - A client that sends an HTTP/1.1 request MUST send a Host header.\n\n      - Servers MUST report a 400 (Bad Request) error if an HTTP/1.1\n        request does not include a Host request-header.\n\n      - Servers MUST accept absolute URIs.\n\n<h4 class=\"h4\" id=\"section-19.6.2\">19.6.2 Compatibility with HTTP/1.0 Persistent Connections</h4>\n   Some clients and servers might wish to be compatible with some\n   previous implementations of persistent connections in HTTP/1.0\n   clients and servers. Persistent connections in HTTP/1.0 are\n   explicitly negotiated as they are not the default behavior. HTTP/1.0\n   experimental implementations of persistent connections are faulty,\n   and the new facilities in HTTP/1.1 are designed to rectify these\n   problems. The problem was that some existing 1.0 clients may be\n   sending Keep-Alive to a proxy server that doesn't understand\n   Connection, which would then erroneously forward it to the next\n   inbound server, which would establish the Keep-Alive connection and\n   result in a hung HTTP/1.0 proxy waiting for the close on the\n   response. The result is that HTTP/1.0 clients must be prevented from\n   using Keep-Alive when talking to proxies.\n\n   However, talking to proxies is the most important use of persistent\n   connections, so that prohibition is clearly unacceptable. Therefore,\n   we need some other mechanism for indicating a persistent connection\n   is desired, which is safe to use even when talking to an old proxy\n   that ignores Connection. Persistent connections are the default for\n   HTTP/1.1 messages; we introduce a new keyword (Connection: close) for\n   declaring non-persistence. See <a href=\"#section-14.10\">section 14.10</a>.\n\n   The original HTTP/1.0 form of persistent connections (the Connection:\n   Keep-Alive and Keep-Alive header) is documented in <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a>. [<a href=\"#ref-33\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>33</a>]\n\n<h4 class=\"h4\" id=\"section-19.6.3\">19.6.3 Changes from <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a>\n</h4>\n   This specification has been carefully audited to correct and\n   disambiguate key word usage; <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a> had many problems in respect to\n   the conventions laid out in <a href=\"https://tools.ietf.org/html/rfc2119\">RFC 2119</a> [<a href=\"#ref-34\" title='\"Key words for use in RFCs to Indicate Requirement Levels\"'>34</a>].\n\n   Clarified which error code should be used for inbound server failures\n   (e.g. DNS failures). (<a href=\"#section-10.5.5\">Section 10.5.5</a>).\n\n   CREATE had a race that required an Etag be sent when a resource is\n   first created. (<a href=\"#section-10.2.2\">Section 10.2.2</a>).\n\n   Content-Base was deleted from the specification: it was not\n   implemented widely, and there is no simple, safe way to introduce it\n   without a robust extension mechanism. In addition, it is used in a\n   similar, but not identical fashion in MHTML [<a href=\"#ref-45\" title='\"MIME E-mail Encapsulation of Aggregate Documents, such as HTML (MHTML)\"'>45</a>].\n\n   Transfer-coding and message lengths all interact in ways that\n   required fixing exactly when chunked encoding is used (to allow for\n   transfer encoding that may not be self delimiting); it was important\n   to straighten out exactly how message lengths are computed. (Sections\n   3.6, 4.4, 7.2.2, 13.5.2, 14.13, 14.16)\n\n   A content-coding of \"identity\" was introduced, to solve problems\n   discovered in caching. (<a href=\"#section-3.5\">section 3.5</a>)\n\n   Quality Values of zero should indicate that \"I don't want something\"\n   to allow clients to refuse a representation. (<a href=\"#section-3.9\">Section 3.9</a>)\n\n   The use and interpretation of HTTP version numbers has been clarified\n   by <a href=\"https://tools.ietf.org/html/rfc2145\">RFC 2145</a>. Require proxies to upgrade requests to highest protocol\n   version they support to deal with problems discovered in HTTP/1.0\n   implementations (<a href=\"#section-3.1\">Section 3.1</a>)\n\n   Charset wildcarding is introduced to avoid explosion of character set\n   names in accept headers. (<a href=\"#section-14.2\">Section 14.2</a>)\n\n   A case was missed in the Cache-Control model of HTTP/1.1; s-maxage\n   was introduced to add this missing case. (Sections <a href=\"#section-13.4\">13.4</a>, <a href=\"#section-14.8\">14.8</a>, <a href=\"#section-14.9\">14.9</a>,\n   14.9.3)\n\n   The Cache-Control: max-age directive was not properly defined for\n   responses. (<a href=\"#section-14.9.3\">Section 14.9.3</a>)\n\n   There are situations where a server (especially a proxy) does not\n   know the full length of a response but is capable of serving a\n   byterange request. We therefore need a mechanism to allow byteranges\n   with a content-range not indicating the full length of the message.\n   (<a href=\"#section-14.16\">Section 14.16</a>)\n\n   Range request responses would become very verbose if all meta-data\n   were always returned; by allowing the server to only send needed\n   headers in a 206 response, this problem can be avoided. (<a href=\"#section-10.2.7\">Section</a>\n   <a href=\"#section-10.2.7\">10.2.7</a>, 13.5.3, and 14.27)\n\n   Fix problem with unsatisfiable range requests; there are two cases:\n   syntactic problems, and range doesn't exist in the document. The 416\n   status code was needed to resolve this ambiguity needed to indicate\n   an error for a byte range request that falls outside of the actual\n   contents of a document. (<a href=\"#section-10.4.17\">Section 10.4.17</a>, 14.16)\n\n   Rewrite of message transmission requirements to make it much harder\n   for implementors to get it wrong, as the consequences of errors here\n   can have significant impact on the Internet, and to deal with the\n   following problems:\n\n      1. Changing \"HTTP/1.1 or later\" to \"HTTP/1.1\", in contexts where\n         this was incorrectly placing a requirement on the behavior of\n         an implementation of a future version of HTTP/1.x\n\n      2. Made it clear that user-agents should retry requests, not\n         \"clients\" in general.\n\n      3. Converted requirements for clients to ignore unexpected 100\n         (Continue) responses, and for proxies to forward 100 responses,\n         into a general requirement for 1xx responses.\n\n      4. Modified some TCP-specific language, to make it clearer that\n         non-TCP transports are possible for HTTP.\n\n      5. Require that the origin server MUST NOT wait for the request\n         body before it sends a required 100 (Continue) response.\n\n      6. Allow, rather than require, a server to omit 100 (Continue) if\n         it has already seen some of the request body.\n\n      7. Allow servers to defend against denial-of-service attacks and\n         broken clients.\n\n   This change adds the Expect header and 417 status code. The message\n   transmission requirements fixes are in sections <a href=\"#section-8.2\">8.2</a>, <a href=\"#section-10.4.18\">10.4.18</a>,\n   8.1.2.2, 13.11, and 14.20.\n\n   Proxies should be able to add Content-Length when appropriate.\n   (<a href=\"#section-13.5.2\">Section 13.5.2</a>)\n\n   Clean up confusion between 403 and 404 responses. (<a href=\"#section-10.4.4\">Section 10.4.4</a>,\n   10.4.5, and 10.4.11)\n\n   Warnings could be cached incorrectly, or not updated appropriately.\n   (<a href=\"#section-13.1.2\">Section 13.1.2</a>, 13.2.4, 13.5.2, 13.5.3, 14.9.3, and 14.46) Warning\n   also needed to be a general header, as PUT or other methods may have\n   need for it in requests.\n\n   Transfer-coding had significant problems, particularly with\n   interactions with chunked encoding. The solution is that transfer-\n   codings become as full fledged as content-codings. This involves\n   adding an IANA registry for transfer-codings (separate from content\n   codings), a new header field (TE) and enabling trailer headers in the\n   future. Transfer encoding is a major performance benefit, so it was\n   worth fixing [<a href=\"#ref-39\" title='\"Network Performance Effects of HTTP/1.1, CSS1, and PNG,\"'>39</a>]. TE also solves another, obscure, downward\n   interoperability problem that could have occurred due to interactions\n   between authentication trailers, chunked encoding and HTTP/1.0\n   clients.(<a href=\"#section-3.6\">Section 3.6</a>, 3.6.1, and 14.39)\n\n   The PATCH, LINK, UNLINK methods were defined but not commonly\n   implemented in previous versions of this specification. See <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a>\n   [<a href=\"#ref-33\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>33</a>].\n\n   The Alternates, Content-Version, Derived-From, Link, URI, Public and\n   Content-Base header fields were defined in previous versions of this\n   specification, but not commonly implemented. See <a href=\"https://tools.ietf.org/html/rfc2068\">RFC 2068</a> [<a href=\"#ref-33\" title='\"Hypertext Transfer Protocol -- HTTP/1.1\"'>33</a>].\n\n<h2 class=\"h2\" id=\"section-20\">20 Index</h2>\n   Please see the PostScript version of this RFC for the INDEX.\n\n<h2 class=\"h2\" id=\"section-21\">21.  Full Copyright Statement</h2>\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n\n   This document and translations of it may be copied and furnished to\n   others, and derivative works that comment on or otherwise explain it\n   or assist in its implementation may be prepared, copied, published\n   and distributed, in whole or in part, without restriction of any\n   kind, provided that the above copyright notice and this paragraph are\n   included on all such copies and derivative works.  However, this\n   document itself may not be modified in any way, such as by removing\n   the copyright notice or references to the Internet Society or other\n   Internet organizations, except as needed for the purpose of\n   developing Internet standards in which case the procedures for\n   copyrights defined in the Internet Standards process must be\n   followed, or as required to translate it into languages other than\n   English.\n\n   The limited permissions granted above are perpetual and will not be\n   revoked by the Internet Society or its successors or assigns.\n\n   This document and the information contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n\nAcknowledgement\n\n   Funding for the RFC Editor function is currently provided by the\n   Internet Society.\n\n\nFielding, et al.            Standards Track                   [Page 176]<br>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; document authors. All rights reserved.<br>\n    <a href=\"https://tools.ietf.org/html/rfc2616\" class=\"_attribution-link\">https://tools.ietf.org/html/rfc2616</a>\n  </p>\n</div>\n"}
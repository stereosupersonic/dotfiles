{"index":"<h1>Ruby on Rails</h1>   <ul>        <li class=\"file\"> <a href=\"railties/rdoc_main_rdoc\">RDOC_MAIN</a>  </li>  </ul>  <ul> <li class=\"module\"> <a href=\"abstractcontroller\">AbstractController</a> </li> <li class=\"class\"> <a href=\"abstractcontroller/actionnotfound\">AbstractController::ActionNotFound</a> </li> <li class=\"class\"> <a href=\"abstractcontroller/base\">AbstractController::Base</a> </li>  <li class=\"module\"> <a href=\"abstractcontroller/callbacks/classmethods\">AbstractController::Callbacks::ClassMethods</a> </li> <li class=\"module\"> <a href=\"abstractcontroller/collector\">AbstractController::Collector</a> </li> <li class=\"module\"> <a href=\"abstractcontroller/collector/mime\">AbstractController::Collector::Mime</a> </li> <li class=\"class\"> <a href=\"abstractcontroller/doublerendererror\">AbstractController::DoubleRenderError</a> </li> <li class=\"module\"> <a href=\"abstractcontroller/helpers\">AbstractController::Helpers</a> </li> <li class=\"module\"> <a href=\"abstractcontroller/helpers/classmethods\">AbstractController::Helpers::ClassMethods</a> </li> <li class=\"class\"> <a href=\"abstractcontroller/helpers/missinghelpererror\">AbstractController::Helpers::MissingHelperError</a> </li> <li class=\"module\"> <a href=\"abstractcontroller/railties\">AbstractController::Railties</a> </li> <li class=\"module\"> <a href=\"abstractcontroller/railties/routeshelpers\">AbstractController::Railties::RoutesHelpers</a> </li> <li class=\"module\"> <a href=\"abstractcontroller/rendering\">AbstractController::Rendering</a> </li> <li class=\"module\"> <a href=\"abstractcontroller/translation\">AbstractController::Translation</a> </li>  <li class=\"module\"> <a href=\"abstractcontroller/urlfor/classmethods\">AbstractController::UrlFor::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller\">ActionController</a> </li> <li class=\"module\"> <a href=\"actioncontroller/actioncontroller\">ActionController::ActionController</a> </li> <li class=\"module\"> <a href=\"actioncontroller/actioncontroller/actioncontroller\">ActionController::ActionController::ActionController</a> </li> <li class=\"class\"> <a href=\"actioncontroller/base\">ActionController::Base</a>  </li> <li class=\"module\"> <a href=\"actioncontroller/caching\">ActionController::Caching</a>  </li>   <li class=\"module\"> <a href=\"actioncontroller/caching/fragments\">ActionController::Caching::Fragments</a> </li> <li class=\"module\"> <a href=\"actioncontroller/conditionalget\">ActionController::ConditionalGet</a> </li> <li class=\"module\"> <a href=\"actioncontroller/conditionalget/classmethods\">ActionController::ConditionalGet::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/cookies\">ActionController::Cookies</a> </li> <li class=\"module\"> <a href=\"actioncontroller/datastreaming\">ActionController::DataStreaming</a> </li> <li class=\"module\"> <a href=\"actioncontroller/etagwithtemplatedigest\">ActionController::EtagWithTemplateDigest</a> </li> <li class=\"module\"> <a href=\"actioncontroller/flash\">ActionController::Flash</a> </li> <li class=\"module\"> <a href=\"actioncontroller/flash/classmethods\">ActionController::Flash::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/forcessl\">ActionController::ForceSSL</a> </li> <li class=\"module\"> <a href=\"actioncontroller/forcessl/classmethods\">ActionController::ForceSSL::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/head\">ActionController::Head</a> </li> <li class=\"module\"> <a href=\"actioncontroller/helpers\">ActionController::Helpers</a> </li> <li class=\"module\"> <a href=\"actioncontroller/helpers/classmethods\">ActionController::Helpers::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/hideactions\">ActionController::HideActions</a> </li> <li class=\"module\"> <a href=\"actioncontroller/hideactions/classmethods\">ActionController::HideActions::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/httpauthentication\">ActionController::HttpAuthentication</a> </li> <li class=\"module\"> <a href=\"actioncontroller/httpauthentication/basic\">ActionController::HttpAuthentication::Basic</a>  </li> <li class=\"module\"> <a href=\"actioncontroller/httpauthentication/basic/controllermethods\">ActionController::HttpAuthentication::Basic::ControllerMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/httpauthentication/basic/controllermethods/classmethods\">ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/httpauthentication/digest\">ActionController::HttpAuthentication::Digest</a>  </li> <li class=\"module\"> <a href=\"actioncontroller/httpauthentication/digest/controllermethods\">ActionController::HttpAuthentication::Digest::ControllerMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/httpauthentication/token\">ActionController::HttpAuthentication::Token</a> </li> <li class=\"module\"> <a href=\"actioncontroller/httpauthentication/token/controllermethods\">ActionController::HttpAuthentication::Token::ControllerMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/implicitrender\">ActionController::ImplicitRender</a> </li>  <li class=\"module\"> <a href=\"actioncontroller/instrumentation/classmethods\">ActionController::Instrumentation::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/live\">ActionController::Live</a> </li> <li class=\"class\"> <a href=\"actioncontroller/live/clientdisconnected\">ActionController::Live::ClientDisconnected</a> </li> <li class=\"class\"> <a href=\"actioncontroller/live/sse\">ActionController::Live::SSE</a> </li> <li class=\"class\"> <a href=\"actioncontroller/livetestresponse\">ActionController::LiveTestResponse</a> </li> <li class=\"class\"> <a href=\"actioncontroller/logsubscriber\">ActionController::LogSubscriber</a> </li> <li class=\"class\"> <a href=\"actioncontroller/metal\">ActionController::Metal</a>  </li> <li class=\"class\"> <a href=\"actioncontroller/middleware\">ActionController::Middleware</a> </li> <li class=\"class\"> <a href=\"actioncontroller/middleware/actionmiddleware\">ActionController::Middleware::ActionMiddleware</a> </li> <li class=\"module\"> <a href=\"actioncontroller/mimeresponds\">ActionController::MimeResponds</a> </li> <li class=\"module\"> <a href=\"actioncontroller/mimeresponds/classmethods\">ActionController::MimeResponds::ClassMethods</a> </li> <li class=\"class\"> <a href=\"actioncontroller/mimeresponds/collector\">ActionController::MimeResponds::Collector</a> </li> <li class=\"class\"> <a href=\"actioncontroller/missingrenderer\">ActionController::MissingRenderer</a> </li> <li class=\"module\"> <a href=\"actioncontroller/modelnaming\">ActionController::ModelNaming</a> </li> <li class=\"class\"> <a href=\"actioncontroller/parametermissing\">ActionController::ParameterMissing</a> </li> <li class=\"class\"> <a href=\"actioncontroller/parameters\">ActionController::Parameters</a>  </li> <li class=\"module\"> <a href=\"actioncontroller/paramswrapper\">ActionController::ParamsWrapper</a> </li> <li class=\"module\"> <a href=\"actioncontroller/paramswrapper/classmethods\">ActionController::ParamsWrapper::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/rackdelegation\">ActionController::RackDelegation</a> </li> <li class=\"class\"> <a href=\"actioncontroller/railtie\">ActionController::Railtie</a> </li> <li class=\"module\"> <a href=\"actioncontroller/railtie/activesupport\">ActionController::Railtie::ActiveSupport</a> </li> <li class=\"module\"> <a href=\"actioncontroller/railties\">ActionController::Railties</a> </li> <li class=\"module\"> <a href=\"actioncontroller/railties/helpers\">ActionController::Railties::Helpers</a> </li> <li class=\"module\"> <a href=\"actioncontroller/redirecting\">ActionController::Redirecting</a> </li> <li class=\"module\"> <a href=\"actioncontroller/renderers\">ActionController::Renderers</a> </li> <li class=\"module\"> <a href=\"actioncontroller/renderers/all\">ActionController::Renderers::All</a> </li> <li class=\"module\"> <a href=\"actioncontroller/renderers/classmethods\">ActionController::Renderers::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actioncontroller/renderers/mime\">ActionController::Renderers::Mime</a> </li>  <li class=\"module\"> <a href=\"actioncontroller/requestforgeryprotection\">ActionController::RequestForgeryProtection</a> </li> <li class=\"module\"> <a href=\"actioncontroller/requestforgeryprotection/classmethods\">ActionController::RequestForgeryProtection::ClassMethods</a> </li>     <li class=\"module\"> <a href=\"actioncontroller/rescue\">ActionController::Rescue</a> </li> <li class=\"module\"> <a href=\"actioncontroller/streaming\">ActionController::Streaming</a>  </li> <li class=\"module\"> <a href=\"actioncontroller/strongparameters\">ActionController::StrongParameters</a>  </li> <li class=\"module\"> <a href=\"actioncontroller/templateassertions\">ActionController::TemplateAssertions</a> </li> <li class=\"class\"> <a href=\"actioncontroller/testcase\">ActionController::TestCase</a>  </li> <li class=\"module\"> <a href=\"actioncontroller/testcase/behavior\">ActionController::TestCase::Behavior</a> </li> <li class=\"module\"> <a href=\"actioncontroller/testcase/behavior/classmethods\">ActionController::TestCase::Behavior::ClassMethods</a> </li> <li class=\"class\"> <a href=\"actioncontroller/testresponse\">ActionController::TestResponse</a> </li>   <li class=\"class\"> <a href=\"actioncontroller/unpermittedparameters\">ActionController::UnpermittedParameters</a> </li> <li class=\"module\"> <a href=\"actioncontroller/urlfor\">ActionController::UrlFor</a> </li> <li class=\"module\"> <a href=\"actiondispatch\">ActionDispatch</a> </li> <li class=\"module\"> <a href=\"actiondispatch/assertions\">ActionDispatch::Assertions</a> </li> <li class=\"module\"> <a href=\"actiondispatch/assertions/responseassertions\">ActionDispatch::Assertions::ResponseAssertions</a> </li> <li class=\"module\"> <a href=\"actiondispatch/assertions/routingassertions\">ActionDispatch::Assertions::RoutingAssertions</a> </li> <li class=\"class\"> <a href=\"actiondispatch/callbacks\">ActionDispatch::Callbacks</a> </li> <li class=\"class\"> <a href=\"actiondispatch/cookies\">ActionDispatch::Cookies</a> </li> <li class=\"module\"> <a href=\"actiondispatch/cookies/chainedcookiejars\">ActionDispatch::Cookies::ChainedCookieJars</a> </li>  <li class=\"class\"> <a href=\"actiondispatch/exceptionwrapper\">ActionDispatch::ExceptionWrapper</a> </li> <li class=\"class\"> <a href=\"actiondispatch/filehandler\">ActionDispatch::FileHandler</a> </li> <li class=\"class\"> <a href=\"actiondispatch/flash\">ActionDispatch::Flash</a> </li> <li class=\"class\"> <a href=\"actiondispatch/flash/flashhash\">ActionDispatch::Flash::FlashHash</a> </li> <li class=\"module\"> <a href=\"actiondispatch/http\">ActionDispatch::Http</a> </li> <li class=\"module\"> <a href=\"actiondispatch/http/cache\">ActionDispatch::Http::Cache</a> </li> <li class=\"module\"> <a href=\"actiondispatch/http/cache/request\">ActionDispatch::Http::Cache::Request</a> </li> <li class=\"module\"> <a href=\"actiondispatch/http/cache/response\">ActionDispatch::Http::Cache::Response</a> </li> <li class=\"module\"> <a href=\"actiondispatch/http/filterparameters\">ActionDispatch::Http::FilterParameters</a> </li> <li class=\"module\"> <a href=\"actiondispatch/http/filterredirect\">ActionDispatch::Http::FilterRedirect</a> </li> <li class=\"class\"> <a href=\"actiondispatch/http/headers\">ActionDispatch::Http::Headers</a> </li> <li class=\"module\"> <a href=\"actiondispatch/http/mimenegotiation\">ActionDispatch::Http::MimeNegotiation</a> </li> <li class=\"class\"> <a href=\"actiondispatch/http/parameterfilter\">ActionDispatch::Http::ParameterFilter</a> </li> <li class=\"module\"> <a href=\"actiondispatch/http/parameters\">ActionDispatch::Http::Parameters</a> </li>  <li class=\"class\"> <a href=\"actiondispatch/http/uploadedfile\">ActionDispatch::Http::UploadedFile</a> </li> <li class=\"module\"> <a href=\"actiondispatch/integration\">ActionDispatch::Integration</a> </li> <li class=\"module\"> <a href=\"actiondispatch/integration/requesthelpers\">ActionDispatch::Integration::RequestHelpers</a> </li> <li class=\"module\"> <a href=\"actiondispatch/integration/runner\">ActionDispatch::Integration::Runner</a> </li> <li class=\"class\"> <a href=\"actiondispatch/integration/session\">ActionDispatch::Integration::Session</a> </li> <li class=\"class\"> <a href=\"actiondispatch/integrationtest\">ActionDispatch::IntegrationTest</a> </li> <li class=\"module\"> <a href=\"actiondispatch/journey\">ActionDispatch::Journey</a> </li> <li class=\"class\"> <a href=\"actiondispatch/journey/format\">ActionDispatch::Journey::Format</a> </li> <li class=\"class\"> <a href=\"actiondispatch/journey/format/parameter\">ActionDispatch::Journey::Format::Parameter</a> </li>  <li class=\"class\"> <a href=\"actiondispatch/middlewarestack\">ActionDispatch::MiddlewareStack</a> </li> <li class=\"class\"> <a href=\"actiondispatch/middlewarestack/middleware\">ActionDispatch::MiddlewareStack::Middleware</a> </li> <li class=\"class\"> <a href=\"actiondispatch/paramsparser\">ActionDispatch::ParamsParser</a> </li> <li class=\"class\"> <a href=\"actiondispatch/paramsparser/parseerror\">ActionDispatch::ParamsParser::ParseError</a> </li> <li class=\"class\"> <a href=\"actiondispatch/publicexceptions\">ActionDispatch::PublicExceptions</a> </li> <li class=\"class\"> <a href=\"actiondispatch/railsentitystore\">ActionDispatch::RailsEntityStore</a> </li> <li class=\"module\"> <a href=\"actiondispatch/railsentitystore/rack\">ActionDispatch::RailsEntityStore::Rack</a> </li> <li class=\"module\"> <a href=\"actiondispatch/railsentitystore/rack/cache\">ActionDispatch::RailsEntityStore::Rack::Cache</a> </li> <li class=\"module\"> <a href=\"actiondispatch/railsentitystore/rack/cache/entitystore\">ActionDispatch::RailsEntityStore::Rack::Cache::EntityStore</a> </li> <li class=\"class\"> <a href=\"actiondispatch/railsmetastore\">ActionDispatch::RailsMetaStore</a> </li> <li class=\"module\"> <a href=\"actiondispatch/railsmetastore/rack\">ActionDispatch::RailsMetaStore::Rack</a> </li> <li class=\"module\"> <a href=\"actiondispatch/railsmetastore/rack/cache\">ActionDispatch::RailsMetaStore::Rack::Cache</a> </li> <li class=\"module\"> <a href=\"actiondispatch/railsmetastore/rack/cache/metastore\">ActionDispatch::RailsMetaStore::Rack::Cache::MetaStore</a> </li> <li class=\"class\"> <a href=\"actiondispatch/railtie\">ActionDispatch::Railtie</a> </li> <li class=\"module\"> <a href=\"actiondispatch/railtie/activesupport\">ActionDispatch::Railtie::ActiveSupport</a> </li>     <li class=\"class\"> <a href=\"actiondispatch/request\">ActionDispatch::Request</a> </li>  <li class=\"class\"> <a href=\"actiondispatch/response\">ActionDispatch::Response</a> </li> <li class=\"class\"> <a href=\"actiondispatch/response/rackbody\">ActionDispatch::Response::RackBody</a> </li> <li class=\"module\"> <a href=\"actiondispatch/routing\">ActionDispatch::Routing</a>  </li> <li class=\"class\"> <a href=\"actiondispatch/routing/consoleformatter\">ActionDispatch::Routing::ConsoleFormatter</a> </li>   <li class=\"module\"> <a href=\"actiondispatch/routing/mapper/base\">ActionDispatch::Routing::Mapper::Base</a> </li> <li class=\"module\"> <a href=\"actiondispatch/routing/mapper/concerns\">ActionDispatch::Routing::Mapper::Concerns</a> </li> <li class=\"module\"> <a href=\"actiondispatch/routing/mapper/httphelpers\">ActionDispatch::Routing::Mapper::HttpHelpers</a> </li> <li class=\"module\"> <a href=\"actiondispatch/routing/mapper/resources\">ActionDispatch::Routing::Mapper::Resources</a> </li> <li class=\"module\"> <a href=\"actiondispatch/routing/mapper/scoping\">ActionDispatch::Routing::Mapper::Scoping</a> </li> <li class=\"class\"> <a href=\"actiondispatch/routing/pathredirect\">ActionDispatch::Routing::PathRedirect</a> </li> <li class=\"module\"> <a href=\"actiondispatch/routing/polymorphicroutes\">ActionDispatch::Routing::PolymorphicRoutes</a>  </li> <li class=\"module\"> <a href=\"actiondispatch/routing/redirection\">ActionDispatch::Routing::Redirection</a> </li> <li class=\"class\"> <a href=\"actiondispatch/routing/routewrapper\">ActionDispatch::Routing::RouteWrapper</a> </li> <li class=\"module\"> <a href=\"actiondispatch/routing/urlfor\">ActionDispatch::Routing::UrlFor</a>  </li> <li class=\"class\"> <a href=\"actiondispatch/ssl\">ActionDispatch::SSL</a> </li> <li class=\"module\"> <a href=\"actiondispatch/session\">ActionDispatch::Session</a> </li> <li class=\"class\"> <a href=\"actiondispatch/session/abstractstore\">ActionDispatch::Session::AbstractStore</a> </li> <li class=\"class\"> <a href=\"actiondispatch/session/cachestore\">ActionDispatch::Session::CacheStore</a> </li> <li class=\"module\"> <a href=\"actiondispatch/session/compatibility\">ActionDispatch::Session::Compatibility</a> </li> <li class=\"class\"> <a href=\"actiondispatch/session/cookiestore\">ActionDispatch::Session::CookieStore</a> </li> <li class=\"class\"> <a href=\"actiondispatch/session/memcachestore\">ActionDispatch::Session::MemCacheStore</a> </li> <li class=\"module\"> <a href=\"actiondispatch/session/stalesessioncheck\">ActionDispatch::Session::StaleSessionCheck</a> </li>  <li class=\"class\"> <a href=\"actiondispatch/static\">ActionDispatch::Static</a> </li> <li class=\"module\"> <a href=\"actiondispatch/testprocess\">ActionDispatch::TestProcess</a> </li> <li class=\"class\"> <a href=\"actiondispatch/testrequest\">ActionDispatch::TestRequest</a> </li> <li class=\"class\"> <a href=\"actiondispatch/testresponse\">ActionDispatch::TestResponse</a> </li> <li class=\"module\"> <a href=\"actionmailer\">ActionMailer</a> </li> <li class=\"class\"> <a href=\"actionmailer/base\">ActionMailer::Base</a>  </li> <li class=\"class\"> <a href=\"actionmailer/base/lateattachmentsproxy\">ActionMailer::Base::LateAttachmentsProxy</a> </li> <li class=\"class\"> <a href=\"actionmailer/collector\">ActionMailer::Collector</a> </li> <li class=\"module\"> <a href=\"actionmailer/deliverymethods\">ActionMailer::DeliveryMethods</a> </li> <li class=\"module\"> <a href=\"actionmailer/deliverymethods/classmethods\">ActionMailer::DeliveryMethods::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actionmailer/deliverymethods/mail\">ActionMailer::DeliveryMethods::Mail</a> </li> <li class=\"class\"> <a href=\"actionmailer/inlinepreviewinterceptor\">ActionMailer::InlinePreviewInterceptor</a> </li> <li class=\"class\"> <a href=\"actionmailer/logsubscriber\">ActionMailer::LogSubscriber</a> </li> <li class=\"module\"> <a href=\"actionmailer/mailhelper\">ActionMailer::MailHelper</a> </li> <li class=\"class\"> <a href=\"actionmailer/messagedelivery\">ActionMailer::MessageDelivery</a> </li> <li class=\"class\"> <a href=\"actionmailer/noninferrablemailererror\">ActionMailer::NonInferrableMailerError</a> </li> <li class=\"class\"> <a href=\"actionmailer/preview\">ActionMailer::Preview</a> </li> <li class=\"module\"> <a href=\"actionmailer/previews\">ActionMailer::Previews</a> </li> <li class=\"module\"> <a href=\"actionmailer/previews/classmethods\">ActionMailer::Previews::ClassMethods</a> </li> <li class=\"class\"> <a href=\"actionmailer/railtie\">ActionMailer::Railtie</a> </li> <li class=\"module\"> <a href=\"actionmailer/railtie/activesupport\">ActionMailer::Railtie::ActiveSupport</a> </li> <li class=\"class\"> <a href=\"actionmailer/testcase\">ActionMailer::TestCase</a> </li> <li class=\"module\"> <a href=\"actionmailer/testcase/behavior\">ActionMailer::TestCase::Behavior</a> </li> <li class=\"module\"> <a href=\"actionmailer/testcase/behavior/classmethods\">ActionMailer::TestCase::Behavior::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actionmailer/testhelper\">ActionMailer::TestHelper</a> </li> <li class=\"module\"> <a href=\"actionmailer/version\">ActionMailer::VERSION</a> </li> <li class=\"module\"> <a href=\"actionview\">ActionView</a> </li> <li class=\"class\"> <a href=\"actionview/base\">ActionView::Base</a>  </li> <li class=\"module\"> <a href=\"actionview/context\">ActionView::Context</a>  </li> <li class=\"class\"> <a href=\"actionview/dependencytracker\">ActionView::DependencyTracker</a> </li> <li class=\"module\"> <a href=\"actionview/dependencytracker/threadsafe\">ActionView::DependencyTracker::ThreadSafe</a> </li> <li class=\"class\"> <a href=\"actionview/digestor\">ActionView::Digestor</a> </li> <li class=\"module\"> <a href=\"actionview/digestor/threadsafe\">ActionView::Digestor::ThreadSafe</a> </li>   <li class=\"module\"> <a href=\"actionview/helpers\">ActionView::Helpers</a>  </li> <li class=\"module\"> <a href=\"actionview/helpers/activemodelhelper\">ActionView::Helpers::ActiveModelHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/activemodelinstancetag\">ActionView::Helpers::ActiveModelInstanceTag</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/assettaghelper\">ActionView::Helpers::AssetTagHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/asseturlhelper\">ActionView::Helpers::AssetUrlHelper</a>  </li> <li class=\"module\"> <a href=\"actionview/helpers/atomfeedhelper\">ActionView::Helpers::AtomFeedHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/cachehelper\">ActionView::Helpers::CacheHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/capturehelper\">ActionView::Helpers::CaptureHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/csrfhelper\">ActionView::Helpers::CsrfHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/datehelper\">ActionView::Helpers::DateHelper</a>  </li> <li class=\"module\"> <a href=\"actionview/helpers/debughelper\">ActionView::Helpers::DebugHelper</a> </li> <li class=\"class\"> <a href=\"actionview/helpers/formbuilder\">ActionView::Helpers::FormBuilder</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/formhelper\">ActionView::Helpers::FormHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/formoptionshelper\">ActionView::Helpers::FormOptionsHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/formtaghelper\">ActionView::Helpers::FormTagHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/javascripthelper\">ActionView::Helpers::JavaScriptHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/javascripthelper/encoding\">ActionView::Helpers::JavaScriptHelper::Encoding</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/numberhelper\">ActionView::Helpers::NumberHelper</a> </li> <li class=\"class\"> <a href=\"actionview/helpers/numberhelper/invalidnumbererror\">ActionView::Helpers::NumberHelper::InvalidNumberError</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/outputsafetyhelper\">ActionView::Helpers::OutputSafetyHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/recordtaghelper\">ActionView::Helpers::RecordTagHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/renderinghelper\">ActionView::Helpers::RenderingHelper</a>  </li> <li class=\"module\"> <a href=\"actionview/helpers/sanitizehelper\">ActionView::Helpers::SanitizeHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/taghelper\">ActionView::Helpers::TagHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/texthelper\">ActionView::Helpers::TextHelper</a>  </li> <li class=\"module\"> <a href=\"actionview/helpers/translationhelper\">ActionView::Helpers::TranslationHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/urlhelper\">ActionView::Helpers::UrlHelper</a> </li> <li class=\"module\"> <a href=\"actionview/helpers/urlhelper/classmethods\">ActionView::Helpers::UrlHelper::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actionview/layouts\">ActionView::Layouts</a>  </li> <li class=\"module\"> <a href=\"actionview/layouts/classmethods\">ActionView::Layouts::ClassMethods</a> </li>        <li class=\"module\"> <a href=\"actionview/modelnaming\">ActionView::ModelNaming</a> </li> <li class=\"class\"> <a href=\"actionview/nullresolver\">ActionView::NullResolver</a> </li> <li class=\"class\"> <a href=\"actionview/partialiteration\">ActionView::PartialIteration</a> </li> <li class=\"class\"> <a href=\"actionview/partialrenderer\">ActionView::PartialRenderer</a>  </li> <li class=\"module\"> <a href=\"actionview/recordidentifier\">ActionView::RecordIdentifier</a> </li> <li class=\"class\"> <a href=\"actionview/renderer\">ActionView::Renderer</a> </li> <li class=\"module\"> <a href=\"actionview/rendering\">ActionView::Rendering</a> </li> <li class=\"module\"> <a href=\"actionview/rendering/classmethods\">ActionView::Rendering::ClassMethods</a> </li>     <li class=\"module\"> <a href=\"actionview/routingurlfor\">ActionView::RoutingUrlFor</a> </li> <li class=\"class\"> <a href=\"actionview/template\">ActionView::Template</a>  </li> <li class=\"module\"> <a href=\"actionview/template/handlers\">ActionView::Template::Handlers</a> </li> <li class=\"class\"> <a href=\"actionview/template/handlers/builder\">ActionView::Template::Handlers::Builder</a> </li> <li class=\"class\"> <a href=\"actionview/template/handlers/erb\">ActionView::Template::Handlers::ERB</a> </li>  <li class=\"class\"> <a href=\"actionview/template/handlers/raw\">ActionView::Template::Handlers::Raw</a> </li> <li class=\"class\"> <a href=\"actionview/template/types\">ActionView::Template::Types</a> </li> <li class=\"class\"> <a href=\"actionview/template/types/type\">ActionView::Template::Types::Type</a> </li> <li class=\"class\"> <a href=\"actionview/testcase\">ActionView::TestCase</a>  </li> <li class=\"module\"> <a href=\"actionview/testcase/behavior\">ActionView::TestCase::Behavior</a> </li> <li class=\"module\"> <a href=\"actionview/testcase/behavior/classmethods\">ActionView::TestCase::Behavior::ClassMethods</a> </li> <li class=\"module\"> <a href=\"actionview/testcase/behavior/locals\">ActionView::TestCase::Behavior::Locals</a> </li>  <li class=\"class\"> <a href=\"actionview/testcase/testcontroller\">ActionView::TestCase::TestController</a> </li> <li class=\"module\"> <a href=\"actionview/version\">ActionView::VERSION</a> </li> <li class=\"module\"> <a href=\"actionview/viewpaths\">ActionView::ViewPaths</a> </li> <li class=\"module\"> <a href=\"actionview/viewpaths/classmethods\">ActionView::ViewPaths::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activejob\">ActiveJob</a> </li> <li class=\"module\"> <a href=\"activejob/arguments\">ActiveJob::Arguments</a> </li> <li class=\"class\"> <a href=\"activejob/base\">ActiveJob::Base</a>  </li> <li class=\"module\"> <a href=\"activejob/callbacks\">ActiveJob::Callbacks</a>  </li> <li class=\"module\"> <a href=\"activejob/callbacks/classmethods\">ActiveJob::Callbacks::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activejob/core\">ActiveJob::Core</a> </li> <li class=\"module\"> <a href=\"activejob/core/classmethods\">ActiveJob::Core::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activejob/deserializationerror\">ActiveJob::DeserializationError</a> </li> <li class=\"module\"> <a href=\"activejob/enqueuing\">ActiveJob::Enqueuing</a> </li> <li class=\"module\"> <a href=\"activejob/enqueuing/classmethods\">ActiveJob::Enqueuing::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activejob/execution\">ActiveJob::Execution</a> </li> <li class=\"module\"> <a href=\"activejob/execution/classmethods\">ActiveJob::Execution::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activejob/queueadapter\">ActiveJob::QueueAdapter</a> </li> <li class=\"module\"> <a href=\"activejob/queueadapter/classmethods\">ActiveJob::QueueAdapter::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activejob/queueadapters\">ActiveJob::QueueAdapters</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/backburneradapter\">ActiveJob::QueueAdapters::BackburnerAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/delayedjobadapter\">ActiveJob::QueueAdapters::DelayedJobAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/inlineadapter\">ActiveJob::QueueAdapters::InlineAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/quadapter\">ActiveJob::QueueAdapters::QuAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/queadapter\">ActiveJob::QueueAdapters::QueAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/queueclassicadapter\">ActiveJob::QueueAdapters::QueueClassicAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/resqueadapter\">ActiveJob::QueueAdapters::ResqueAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/sidekiqadapter\">ActiveJob::QueueAdapters::SidekiqAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/sneakersadapter\">ActiveJob::QueueAdapters::SneakersAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/suckerpunchadapter\">ActiveJob::QueueAdapters::SuckerPunchAdapter</a>  </li> <li class=\"class\"> <a href=\"activejob/queueadapters/testadapter\">ActiveJob::QueueAdapters::TestAdapter</a>  </li> <li class=\"module\"> <a href=\"activejob/queuename\">ActiveJob::QueueName</a> </li> <li class=\"module\"> <a href=\"activejob/queuename/classmethods\">ActiveJob::QueueName::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activejob/serializationerror\">ActiveJob::SerializationError</a> </li> <li class=\"class\"> <a href=\"activejob/testcase\">ActiveJob::TestCase</a> </li> <li class=\"module\"> <a href=\"activejob/testhelper\">ActiveJob::TestHelper</a> </li> <li class=\"module\"> <a href=\"activejob/version\">ActiveJob::VERSION</a> </li> <li class=\"module\"> <a href=\"activemodel\">ActiveModel</a> </li> <li class=\"module\"> <a href=\"activemodel/attributemethods\">ActiveModel::AttributeMethods</a>  </li> <li class=\"module\"> <a href=\"activemodel/attributemethods/classmethods\">ActiveModel::AttributeMethods::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activemodel/callbacks\">ActiveModel::Callbacks</a>  </li> <li class=\"module\"> <a href=\"activemodel/conversion\">ActiveModel::Conversion</a>  </li> <li class=\"module\"> <a href=\"activemodel/dirty\">ActiveModel::Dirty</a>  </li> <li class=\"class\"> <a href=\"activemodel/errors\">ActiveModel::Errors</a>  </li> <li class=\"class\"> <a href=\"activemodel/forbiddenattributeserror\">ActiveModel::ForbiddenAttributesError</a> </li> <li class=\"module\"> <a href=\"activemodel/lint\">ActiveModel::Lint</a> </li> <li class=\"module\"> <a href=\"activemodel/lint/tests\">ActiveModel::Lint::Tests</a>  </li> <li class=\"class\"> <a href=\"activemodel/missingattributeerror\">ActiveModel::MissingAttributeError</a> </li> <li class=\"module\"> <a href=\"activemodel/model\">ActiveModel::Model</a>  </li> <li class=\"class\"> <a href=\"activemodel/name\">ActiveModel::Name</a> </li> <li class=\"module\"> <a href=\"activemodel/naming\">ActiveModel::Naming</a>  </li> <li class=\"module\"> <a href=\"activemodel/securepassword\">ActiveModel::SecurePassword</a> </li> <li class=\"module\"> <a href=\"activemodel/securepassword/classmethods\">ActiveModel::SecurePassword::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activemodel/securepassword/instancemethodsonactivation\">ActiveModel::SecurePassword::InstanceMethodsOnActivation</a> </li> <li class=\"module\"> <a href=\"activemodel/serialization\">ActiveModel::Serialization</a>  </li> <li class=\"module\"> <a href=\"activemodel/serializers\">ActiveModel::Serializers</a> </li> <li class=\"module\"> <a href=\"activemodel/serializers/json\">ActiveModel::Serializers::JSON</a>  </li> <li class=\"module\"> <a href=\"activemodel/serializers/xml\">ActiveModel::Serializers::Xml</a>  </li> <li class=\"class\"> <a href=\"activemodel/strictvalidationfailed\">ActiveModel::StrictValidationFailed</a> </li> <li class=\"module\"> <a href=\"activemodel/translation\">ActiveModel::Translation</a>  </li> <li class=\"module\"> <a href=\"activemodel/version\">ActiveModel::VERSION</a> </li> <li class=\"module\"> <a href=\"activemodel/validations\">ActiveModel::Validations</a>  </li> <li class=\"module\"> <a href=\"activemodel/validations/callbacks\">ActiveModel::Validations::Callbacks</a>  </li> <li class=\"module\"> <a href=\"activemodel/validations/callbacks/classmethods\">ActiveModel::Validations::Callbacks::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activemodel/validations/classmethods\">ActiveModel::Validations::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activemodel/validations/helpermethods\">ActiveModel::Validations::HelperMethods</a> </li> <li class=\"class\"> <a href=\"activemodel/validator\">ActiveModel::Validator</a>  </li> <li class=\"module\"> <a href=\"activerecord\">ActiveRecord</a> </li> <li class=\"class\"> <a href=\"activerecord/activerecorderror\">ActiveRecord::ActiveRecordError</a>  </li> <li class=\"class\"> <a href=\"activerecord/adapternotfound\">ActiveRecord::AdapterNotFound</a> </li> <li class=\"class\"> <a href=\"activerecord/adapternotspecified\">ActiveRecord::AdapterNotSpecified</a> </li> <li class=\"module\"> <a href=\"activerecord/aggregations\">ActiveRecord::Aggregations</a> </li> <li class=\"module\"> <a href=\"activerecord/aggregations/classmethods\">ActiveRecord::Aggregations::ClassMethods</a>  </li> <li class=\"class\"> <a href=\"activerecord/associationrelation\">ActiveRecord::AssociationRelation</a> </li> <li class=\"class\"> <a href=\"activerecord/associationtypemismatch\">ActiveRecord::AssociationTypeMismatch</a> </li> <li class=\"module\"> <a href=\"activerecord/associations\">ActiveRecord::Associations</a>  </li> <li class=\"class\"> <a href=\"activerecord/associations/associationscope\">ActiveRecord::Associations::AssociationScope</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/associationscope/bindsubstitution\">ActiveRecord::Associations::AssociationScope::BindSubstitution</a> </li> <li class=\"module\"> <a href=\"activerecord/associations/builder\">ActiveRecord::Associations::Builder</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/builder/hasandbelongstomany\">ActiveRecord::Associations::Builder::HasAndBelongsToMany</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/builder/hasandbelongstomany/jointableresolver\">ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/builder/hasandbelongstomany/jointableresolver/knownclass\">ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass</a> </li> <li class=\"module\"> <a href=\"activerecord/associations/classmethods\">ActiveRecord::Associations::ClassMethods</a>  </li> <li class=\"class\"> <a href=\"activerecord/associations/collectionproxy\">ActiveRecord::Associations::CollectionProxy</a> </li> <li class=\"module\"> <a href=\"activerecord/associations/foreignassociation\">ActiveRecord::Associations::ForeignAssociation</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/joindependency\">ActiveRecord::Associations::JoinDependency</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/joindependency/aliases\">ActiveRecord::Associations::JoinDependency::Aliases</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/joindependency/aliases/table\">ActiveRecord::Associations::JoinDependency::Aliases::Table</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/preloader\">ActiveRecord::Associations::Preloader</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/preloader/alreadyloaded\">ActiveRecord::Associations::Preloader::AlreadyLoaded</a> </li> <li class=\"class\"> <a href=\"activerecord/associations/preloader/nullpreloader\">ActiveRecord::Associations::Preloader::NullPreloader</a> </li> <li class=\"module\"> <a href=\"activerecord/attributeassignment\">ActiveRecord::AttributeAssignment</a> </li> <li class=\"class\"> <a href=\"activerecord/attributeassignmenterror\">ActiveRecord::AttributeAssignmentError</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods\">ActiveRecord::AttributeMethods</a>  </li> <li class=\"class\"> <a href=\"activerecord/attributemethods/attributemethodcache\">ActiveRecord::AttributeMethods::AttributeMethodCache</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/beforetypecast\">ActiveRecord::AttributeMethods::BeforeTypeCast</a>  </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/classmethods\">ActiveRecord::AttributeMethods::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/primarykey\">ActiveRecord::AttributeMethods::PrimaryKey</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/primarykey/classmethods\">ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/query\">ActiveRecord::AttributeMethods::Query</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/read\">ActiveRecord::AttributeMethods::Read</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/read/classmethods\">ActiveRecord::AttributeMethods::Read::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/serialization\">ActiveRecord::AttributeMethods::Serialization</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/serialization/classmethods\">ActiveRecord::AttributeMethods::Serialization::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/timezoneconversion\">ActiveRecord::AttributeMethods::TimeZoneConversion</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/timezoneconversion/classmethods\">ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/write\">ActiveRecord::AttributeMethods::Write</a> </li> <li class=\"module\"> <a href=\"activerecord/attributemethods/write/classmethods\">ActiveRecord::AttributeMethods::Write::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/autosaveassociation\">ActiveRecord::AutosaveAssociation</a>  </li> <li class=\"module\"> <a href=\"activerecord/autosaveassociation/classmethods\">ActiveRecord::AutosaveAssociation::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/base\">ActiveRecord::Base</a>  </li> <li class=\"module\"> <a href=\"activerecord/batches\">ActiveRecord::Batches</a> </li> <li class=\"module\"> <a href=\"activerecord/calculations\">ActiveRecord::Calculations</a> </li> <li class=\"module\"> <a href=\"activerecord/callbacks\">ActiveRecord::Callbacks</a>  </li> <li class=\"module\"> <a href=\"activerecord/callbacks/classmethods\">ActiveRecord::Callbacks::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/configurationerror\">ActiveRecord::ConfigurationError</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/abstractadapter\">ActiveRecord::ConnectionAdapters::AbstractAdapter</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/abstractadapter/bindcollector\">ActiveRecord::ConnectionAdapters::AbstractAdapter::BindCollector</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/abstractadapter/sqlstring\">ActiveRecord::ConnectionAdapters::AbstractAdapter::SQLString</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/abstractmysqladapter\">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/abstractmysqladapter/schemacreation\">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::SchemaCreation</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/columndumper\">ActiveRecord::ConnectionAdapters::ColumnDumper</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/connectionhandler\">ActiveRecord::ConnectionAdapters::ConnectionHandler</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/connectionmanagement\">ActiveRecord::ConnectionAdapters::ConnectionManagement</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/connectionpool\">ActiveRecord::ConnectionAdapters::ConnectionPool</a>  </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/connectionpool/queue\">ActiveRecord::ConnectionAdapters::ConnectionPool::Queue</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/connectionpool/reaper\">ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/databaselimits\">ActiveRecord::ConnectionAdapters::DatabaseLimits</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/databasestatements\">ActiveRecord::ConnectionAdapters::DatabaseStatements</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/mysql2adapter\">ActiveRecord::ConnectionAdapters::Mysql2Adapter</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/mysqladapter\">ActiveRecord::ConnectionAdapters::MysqlAdapter</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/mysqladapter/fields\">ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/mysqladapter/fields/type\">ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/mysqladapter/statementpool\">ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/postgresql\">ActiveRecord::ConnectionAdapters::PostgreSQL</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/postgresql/columndefinition\">ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDefinition</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/postgresql/columnmethods\">ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/postgresql/databasestatements\">ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/postgresql/oid\">ActiveRecord::ConnectionAdapters::PostgreSQL::OID</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/postgresql/oid/bit\">ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/postgresql/oid/bit/data\">ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/postgresql/quoting\">ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/postgresql/schemacreation\">ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/postgresql/schemastatements\">ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/postgresql/table\">ActiveRecord::ConnectionAdapters::PostgreSQL::Table</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/postgresql/tabledefinition\">ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/postgresqladapter\">ActiveRecord::ConnectionAdapters::PostgreSQLAdapter</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/postgresqladapter/statementpool\">ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/querycache\">ActiveRecord::ConnectionAdapters::QueryCache</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/quoting\">ActiveRecord::ConnectionAdapters::Quoting</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/realtransaction\">ActiveRecord::ConnectionAdapters::RealTransaction</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/sqlite3adapter\">ActiveRecord::ConnectionAdapters::SQLite3Adapter</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/sqlite3adapter/explainprettyprinter\">ActiveRecord::ConnectionAdapters::SQLite3Adapter::ExplainPrettyPrinter</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/sqlite3adapter/statementpool\">ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/sqlite3adapter/version\">ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/savepointtransaction\">ActiveRecord::ConnectionAdapters::SavepointTransaction</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/schemacache\">ActiveRecord::ConnectionAdapters::SchemaCache</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionadapters/schemastatements\">ActiveRecord::ConnectionAdapters::SchemaStatements</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/statementpool\">ActiveRecord::ConnectionAdapters::StatementPool</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/table\">ActiveRecord::ConnectionAdapters::Table</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/tabledefinition\">ActiveRecord::ConnectionAdapters::TableDefinition</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionadapters/transactionstate\">ActiveRecord::ConnectionAdapters::TransactionState</a> </li> <li class=\"module\"> <a href=\"activerecord/connectionhandling\">ActiveRecord::ConnectionHandling</a> </li> <li class=\"class\"> <a href=\"activerecord/connectionnotestablished\">ActiveRecord::ConnectionNotEstablished</a> </li> <li class=\"class\"> <a href=\"activerecord/connectiontimeouterror\">ActiveRecord::ConnectionTimeoutError</a> </li> <li class=\"module\"> <a href=\"activerecord/core\">ActiveRecord::Core</a> </li> <li class=\"module\"> <a href=\"activerecord/core/classmethods\">ActiveRecord::Core::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/countercache\">ActiveRecord::CounterCache</a>  </li> <li class=\"module\"> <a href=\"activerecord/countercache/classmethods\">ActiveRecord::CounterCache::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/dangerousattributeerror\">ActiveRecord::DangerousAttributeError</a> </li> <li class=\"module\"> <a href=\"activerecord/delegation\">ActiveRecord::Delegation</a> </li> <li class=\"module\"> <a href=\"activerecord/delegation/delegatecache\">ActiveRecord::Delegation::DelegateCache</a> </li> <li class=\"module\"> <a href=\"activerecord/dynamicmatchers\">ActiveRecord::DynamicMatchers</a> </li> <li class=\"class\"> <a href=\"activerecord/dynamicmatchers/findby\">ActiveRecord::DynamicMatchers::FindBy</a> </li> <li class=\"class\"> <a href=\"activerecord/dynamicmatchers/findbybang\">ActiveRecord::DynamicMatchers::FindByBang</a> </li>  <li class=\"class\"> <a href=\"activerecord/dynamicmatchers/method\">ActiveRecord::DynamicMatchers::Method</a> </li> <li class=\"module\"> <a href=\"activerecord/enum\">ActiveRecord::Enum</a> </li> <li class=\"module\"> <a href=\"activerecord/explain\">ActiveRecord::Explain</a> </li> <li class=\"module\"> <a href=\"activerecord/findermethods\">ActiveRecord::FinderMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/fixtureset\">ActiveRecord::FixtureSet</a>  </li> <li class=\"class\"> <a href=\"activerecord/fixtureset/classcache\">ActiveRecord::FixtureSet::ClassCache</a> </li> <li class=\"class\"> <a href=\"activerecord/immutablerelation\">ActiveRecord::ImmutableRelation</a> </li> <li class=\"module\"> <a href=\"activerecord/inheritance\">ActiveRecord::Inheritance</a>  </li> <li class=\"module\"> <a href=\"activerecord/inheritance/classmethods\">ActiveRecord::Inheritance::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/integration\">ActiveRecord::Integration</a> </li> <li class=\"module\"> <a href=\"activerecord/integration/classmethods\">ActiveRecord::Integration::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/invalidforeignkey\">ActiveRecord::InvalidForeignKey</a> </li> <li class=\"class\"> <a href=\"activerecord/irreversiblemigration\">ActiveRecord::IrreversibleMigration</a> </li> <li class=\"module\"> <a href=\"activerecord/locking\">ActiveRecord::Locking</a> </li> <li class=\"module\"> <a href=\"activerecord/locking/optimistic\">ActiveRecord::Locking::Optimistic</a>  </li> <li class=\"module\"> <a href=\"activerecord/locking/optimistic/classmethods\">ActiveRecord::Locking::Optimistic::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/locking/pessimistic\">ActiveRecord::Locking::Pessimistic</a> </li> <li class=\"class\"> <a href=\"activerecord/logsubscriber\">ActiveRecord::LogSubscriber</a> </li> <li class=\"class\"> <a href=\"activerecord/migration\">ActiveRecord::Migration</a>  </li> <li class=\"class\"> <a href=\"activerecord/migration/checkpending\">ActiveRecord::Migration::CheckPending</a> </li> <li class=\"class\"> <a href=\"activerecord/migration/commandrecorder\">ActiveRecord::Migration::CommandRecorder</a> </li> <li class=\"module\"> <a href=\"activerecord/migration/commandrecorder/straightreversions\">ActiveRecord::Migration::CommandRecorder::StraightReversions</a> </li> <li class=\"class\"> <a href=\"activerecord/migrationproxy\">ActiveRecord::MigrationProxy</a> </li> <li class=\"module\"> <a href=\"activerecord/modelschema\">ActiveRecord::ModelSchema</a> </li> <li class=\"module\"> <a href=\"activerecord/modelschema/classmethods\">ActiveRecord::ModelSchema::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/multiparameterassignmenterrors\">ActiveRecord::MultiparameterAssignmentErrors</a> </li> <li class=\"module\"> <a href=\"activerecord/nestedattributes\">ActiveRecord::NestedAttributes</a> </li> <li class=\"module\"> <a href=\"activerecord/nestedattributes/classmethods\">ActiveRecord::NestedAttributes::ClassMethods</a>  </li> <li class=\"class\"> <a href=\"activerecord/nestedattributes/toomanyrecords\">ActiveRecord::NestedAttributes::TooManyRecords</a> </li> <li class=\"class\"> <a href=\"activerecord/nodatabaseerror\">ActiveRecord::NoDatabaseError</a> </li> <li class=\"module\"> <a href=\"activerecord/notouching\">ActiveRecord::NoTouching</a>  </li> <li class=\"module\"> <a href=\"activerecord/notouching/classmethods\">ActiveRecord::NoTouching::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/persistence\">ActiveRecord::Persistence</a>  </li> <li class=\"module\"> <a href=\"activerecord/persistence/classmethods\">ActiveRecord::Persistence::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/preparedstatementinvalid\">ActiveRecord::PreparedStatementInvalid</a> </li> <li class=\"class\"> <a href=\"activerecord/querycache\">ActiveRecord::QueryCache</a>  </li> <li class=\"module\"> <a href=\"activerecord/querycache/classmethods\">ActiveRecord::QueryCache::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/querymethods\">ActiveRecord::QueryMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/querymethods/wherechain\">ActiveRecord::QueryMethods::WhereChain</a> </li> <li class=\"module\"> <a href=\"activerecord/querying\">ActiveRecord::Querying</a> </li> <li class=\"class\"> <a href=\"activerecord/railtie\">ActiveRecord::Railtie</a> </li> <li class=\"module\"> <a href=\"activerecord/railtie/rails\">ActiveRecord::Railtie::Rails</a> </li> <li class=\"class\"> <a href=\"activerecord/readonlyrecord\">ActiveRecord::ReadOnlyRecord</a> </li> <li class=\"module\"> <a href=\"activerecord/readonlyattributes\">ActiveRecord::ReadonlyAttributes</a> </li> <li class=\"module\"> <a href=\"activerecord/readonlyattributes/classmethods\">ActiveRecord::ReadonlyAttributes::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/recordinvalid\">ActiveRecord::RecordInvalid</a>  </li> <li class=\"class\"> <a href=\"activerecord/recordnotdestroyed\">ActiveRecord::RecordNotDestroyed</a> </li> <li class=\"class\"> <a href=\"activerecord/recordnotfound\">ActiveRecord::RecordNotFound</a> </li> <li class=\"class\"> <a href=\"activerecord/recordnotsaved\">ActiveRecord::RecordNotSaved</a> </li> <li class=\"class\"> <a href=\"activerecord/recordnotunique\">ActiveRecord::RecordNotUnique</a> </li> <li class=\"module\"> <a href=\"activerecord/reflection\">ActiveRecord::Reflection</a> </li> <li class=\"module\"> <a href=\"activerecord/reflection/classmethods\">ActiveRecord::Reflection::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/reflection/macroreflection\">ActiveRecord::Reflection::MacroReflection</a> </li> <li class=\"class\"> <a href=\"activerecord/relation\">ActiveRecord::Relation</a>  </li> <li class=\"class\"> <a href=\"activerecord/result\">ActiveRecord::Result</a> </li> <li class=\"class\"> <a href=\"activerecord/rollback\">ActiveRecord::Rollback</a> </li>  <li class=\"module\"> <a href=\"activerecord/sanitization/classmethods\">ActiveRecord::Sanitization::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/schema\">ActiveRecord::Schema</a>  </li> <li class=\"class\"> <a href=\"activerecord/schemamigration\">ActiveRecord::SchemaMigration</a> </li> <li class=\"module\"> <a href=\"activerecord/scoping\">ActiveRecord::Scoping</a>  </li> <li class=\"module\"> <a href=\"activerecord/scoping/classmethods\">ActiveRecord::Scoping::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/scoping/default\">ActiveRecord::Scoping::Default</a> </li> <li class=\"module\"> <a href=\"activerecord/scoping/default/classmethods\">ActiveRecord::Scoping::Default::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/scoping/named\">ActiveRecord::Scoping::Named</a> </li> <li class=\"module\"> <a href=\"activerecord/scoping/named/classmethods\">ActiveRecord::Scoping::Named::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/serialization\">ActiveRecord::Serialization</a>  </li> <li class=\"class\"> <a href=\"activerecord/serializationtypemismatch\">ActiveRecord::SerializationTypeMismatch</a> </li> <li class=\"module\"> <a href=\"activerecord/spawnmethods\">ActiveRecord::SpawnMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/staleobjecterror\">ActiveRecord::StaleObjectError</a> </li> <li class=\"class\"> <a href=\"activerecord/statementinvalid\">ActiveRecord::StatementInvalid</a> </li> <li class=\"module\"> <a href=\"activerecord/store\">ActiveRecord::Store</a>  </li> <li class=\"module\"> <a href=\"activerecord/store/classmethods\">ActiveRecord::Store::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/tasks\">ActiveRecord::Tasks</a> </li>  <li class=\"module\"> <a href=\"activerecord/testfixtures\">ActiveRecord::TestFixtures</a> </li> <li class=\"module\"> <a href=\"activerecord/testfixtures/classmethods\">ActiveRecord::TestFixtures::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activerecord/timestamp\">ActiveRecord::Timestamp</a>  </li> <li class=\"class\"> <a href=\"activerecord/transactionisolationerror\">ActiveRecord::TransactionIsolationError</a> </li> <li class=\"module\"> <a href=\"activerecord/transactions\">ActiveRecord::Transactions</a> </li> <li class=\"module\"> <a href=\"activerecord/transactions/classmethods\">ActiveRecord::Transactions::ClassMethods</a>  </li> <li class=\"module\"> <a href=\"activerecord/translation\">ActiveRecord::Translation</a> </li> <li class=\"module\"> <a href=\"activerecord/type\">ActiveRecord::Type</a> </li> <li class=\"class\"> <a href=\"activerecord/unknownattributeerror\">ActiveRecord::UnknownAttributeError</a> </li> <li class=\"class\"> <a href=\"activerecord/unknownprimarykey\">ActiveRecord::UnknownPrimaryKey</a> </li> <li class=\"module\"> <a href=\"activerecord/version\">ActiveRecord::VERSION</a> </li> <li class=\"module\"> <a href=\"activerecord/validations\">ActiveRecord::Validations</a>  </li> <li class=\"module\"> <a href=\"activerecord/validations/classmethods\">ActiveRecord::Validations::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activerecord/wrappeddatabaseexception\">ActiveRecord::WrappedDatabaseException</a> </li> <li class=\"module\"> <a href=\"activesupport\">ActiveSupport</a> </li> <li class=\"module\"> <a href=\"activesupport/autoload\">ActiveSupport::Autoload</a> </li> <li class=\"class\"> <a href=\"activesupport/backtracecleaner\">ActiveSupport::BacktraceCleaner</a> </li> <li class=\"module\"> <a href=\"activesupport/benchmarkable\">ActiveSupport::Benchmarkable</a> </li> <li class=\"module\"> <a href=\"activesupport/cache\">ActiveSupport::Cache</a> </li> <li class=\"class\"> <a href=\"activesupport/cache/filestore\">ActiveSupport::Cache::FileStore</a> </li> <li class=\"class\"> <a href=\"activesupport/cache/memcachestore\">ActiveSupport::Cache::MemCacheStore</a> </li> <li class=\"class\"> <a href=\"activesupport/cache/memorystore\">ActiveSupport::Cache::MemoryStore</a> </li> <li class=\"class\"> <a href=\"activesupport/cache/nullstore\">ActiveSupport::Cache::NullStore</a> </li> <li class=\"class\"> <a href=\"activesupport/cache/store\">ActiveSupport::Cache::Store</a> </li> <li class=\"module\"> <a href=\"activesupport/cache/strategy\">ActiveSupport::Cache::Strategy</a> </li> <li class=\"module\"> <a href=\"activesupport/cache/strategy/localcache\">ActiveSupport::Cache::Strategy::LocalCache</a> </li> <li class=\"class\"> <a href=\"activesupport/cache/strategy/localcache/localstore\">ActiveSupport::Cache::Strategy::LocalCache::LocalStore</a> </li> <li class=\"class\"> <a href=\"activesupport/cachingkeygenerator\">ActiveSupport::CachingKeyGenerator</a> </li> <li class=\"module\"> <a href=\"activesupport/callbacks\">ActiveSupport::Callbacks</a> </li> <li class=\"class\"> <a href=\"activesupport/callbacks/callbacksequence\">ActiveSupport::Callbacks::CallbackSequence</a> </li> <li class=\"module\"> <a href=\"activesupport/callbacks/classmethods\">ActiveSupport::Callbacks::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activesupport/callbacks/conditionals\">ActiveSupport::Callbacks::Conditionals</a> </li> <li class=\"class\"> <a href=\"activesupport/callbacks/conditionals/value\">ActiveSupport::Callbacks::Conditionals::Value</a> </li> <li class=\"module\"> <a href=\"activesupport/callbacks/filters\">ActiveSupport::Callbacks::Filters</a> </li> <li class=\"class\"> <a href=\"activesupport/callbacks/filters/after\">ActiveSupport::Callbacks::Filters::After</a> </li> <li class=\"class\"> <a href=\"activesupport/callbacks/filters/around\">ActiveSupport::Callbacks::Filters::Around</a> </li> <li class=\"class\"> <a href=\"activesupport/callbacks/filters/before\">ActiveSupport::Callbacks::Filters::Before</a> </li> <li class=\"class\"> <a href=\"activesupport/callbacks/filters/end\">ActiveSupport::Callbacks::Filters::End</a> </li> <li class=\"module\"> <a href=\"activesupport/concern\">ActiveSupport::Concern</a> </li> <li class=\"module\"> <a href=\"activesupport/concurrency\">ActiveSupport::Concurrency</a> </li> <li class=\"class\"> <a href=\"activesupport/concurrency/latch\">ActiveSupport::Concurrency::Latch</a> </li> <li class=\"module\"> <a href=\"activesupport/configurable\">ActiveSupport::Configurable</a> </li> <li class=\"module\"> <a href=\"activesupport/configurable/classmethods\">ActiveSupport::Configurable::ClassMethods</a> </li>  <li class=\"module\"> <a href=\"activesupport/dependencies\">ActiveSupport::Dependencies</a> </li> <li class=\"class\"> <a href=\"activesupport/dependencies/classcache\">ActiveSupport::Dependencies::ClassCache</a> </li>  <li class=\"class\"> <a href=\"activesupport/deprecation\">ActiveSupport::Deprecation</a> </li> <li class=\"module\"> <a href=\"activesupport/deprecation/behavior\">ActiveSupport::Deprecation::Behavior</a> </li> <li class=\"class\"> <a href=\"activesupport/deprecation/deprecatedconstantproxy\">ActiveSupport::Deprecation::DeprecatedConstantProxy</a> </li> <li class=\"class\"> <a href=\"activesupport/deprecation/deprecatedinstancevariableproxy\">ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy</a> </li> <li class=\"class\"> <a href=\"activesupport/deprecation/deprecatedobjectproxy\">ActiveSupport::Deprecation::DeprecatedObjectProxy</a> </li> <li class=\"module\"> <a href=\"activesupport/deprecation/methodwrapper\">ActiveSupport::Deprecation::MethodWrapper</a> </li> <li class=\"module\"> <a href=\"activesupport/deprecation/reporting\">ActiveSupport::Deprecation::Reporting</a> </li> <li class=\"class\"> <a href=\"activesupport/deprecationexception\">ActiveSupport::DeprecationException</a> </li>  <li class=\"class\"> <a href=\"activesupport/duration\">ActiveSupport::Duration</a> </li>  <li class=\"module\"> <a href=\"activesupport/gzip\">ActiveSupport::Gzip</a> </li> <li class=\"class\"> <a href=\"activesupport/gzip/stream\">ActiveSupport::Gzip::Stream</a> </li> <li class=\"class\"> <a href=\"activesupport/hashwithindifferentaccess\">ActiveSupport::HashWithIndifferentAccess</a> </li> <li class=\"class\"> <a href=\"activesupport/hashwithindifferentaccess\">ActiveSupport::HashWithIndifferentAccess</a> </li> <li class=\"module\"> <a href=\"activesupport/inflector\">ActiveSupport::Inflector</a> </li> <li class=\"class\"> <a href=\"activesupport/inflector/inflections\">ActiveSupport::Inflector::Inflections</a> </li> <li class=\"module\"> <a href=\"activesupport/inflector/inflections/threadsafe\">ActiveSupport::Inflector::Inflections::ThreadSafe</a> </li> <li class=\"class\"> <a href=\"activesupport/inheritableoptions\">ActiveSupport::InheritableOptions</a> </li> <li class=\"module\"> <a href=\"activesupport/json\">ActiveSupport::JSON</a> </li> <li class=\"class\"> <a href=\"activesupport/keygenerator\">ActiveSupport::KeyGenerator</a> </li> <li class=\"class\"> <a href=\"activesupport/logsubscriber\">ActiveSupport::LogSubscriber</a> </li> <li class=\"module\"> <a href=\"activesupport/logsubscriber/testhelper\">ActiveSupport::LogSubscriber::TestHelper</a> </li> <li class=\"class\"> <a href=\"activesupport/logsubscriber/testhelper/mocklogger\">ActiveSupport::LogSubscriber::TestHelper::MockLogger</a> </li> <li class=\"class\"> <a href=\"activesupport/logger\">ActiveSupport::Logger</a> </li> <li class=\"class\"> <a href=\"activesupport/logger/simpleformatter\">ActiveSupport::Logger::SimpleFormatter</a> </li> <li class=\"class\"> <a href=\"activesupport/messageencryptor\">ActiveSupport::MessageEncryptor</a> </li> <li class=\"class\"> <a href=\"activesupport/messageencryptor/invalidmessage\">ActiveSupport::MessageEncryptor::InvalidMessage</a> </li> <li class=\"class\"> <a href=\"activesupport/messageverifier\">ActiveSupport::MessageVerifier</a> </li> <li class=\"class\"> <a href=\"activesupport/messageverifier/invalidsignature\">ActiveSupport::MessageVerifier::InvalidSignature</a> </li> <li class=\"module\"> <a href=\"activesupport/multibyte\">ActiveSupport::Multibyte</a> </li> <li class=\"class\"> <a href=\"activesupport/multibyte/chars\">ActiveSupport::Multibyte::Chars</a> </li> <li class=\"module\"> <a href=\"activesupport/multibyte/unicode\">ActiveSupport::Multibyte::Unicode</a> </li>   <li class=\"module\"> <a href=\"activesupport/notifications\">ActiveSupport::Notifications</a>  </li> <li class=\"class\"> <a href=\"activesupport/notifications/event\">ActiveSupport::Notifications::Event</a> </li>  <li class=\"module\"> <a href=\"activesupport/notifications/fanout/subscribers\">ActiveSupport::Notifications::Fanout::Subscribers</a> </li> <li class=\"class\"> <a href=\"activesupport/notifications/fanout/subscribers/timed\">ActiveSupport::Notifications::Fanout::Subscribers::Timed</a> </li> <li class=\"class\"> <a href=\"activesupport/notifications/instrumenter\">ActiveSupport::Notifications::Instrumenter</a> </li> <li class=\"module\"> <a href=\"activesupport/numberhelper\">ActiveSupport::NumberHelper</a> </li> <li class=\"class\"> <a href=\"activesupport/orderedhash\">ActiveSupport::OrderedHash</a> </li> <li class=\"class\"> <a href=\"activesupport/orderedoptions\">ActiveSupport::OrderedOptions</a> </li> <li class=\"module\"> <a href=\"activesupport/perthreadregistry\">ActiveSupport::PerThreadRegistry</a> </li> <li class=\"class\"> <a href=\"activesupport/proxyobject\">ActiveSupport::ProxyObject</a> </li> <li class=\"module\"> <a href=\"activesupport/rescuable\">ActiveSupport::Rescuable</a> </li> <li class=\"module\"> <a href=\"activesupport/rescuable/classmethods\">ActiveSupport::Rescuable::ClassMethods</a> </li> <li class=\"class\"> <a href=\"activesupport/safebuffer\">ActiveSupport::SafeBuffer</a> </li> <li class=\"class\"> <a href=\"activesupport/safebuffer/safeconcaterror\">ActiveSupport::SafeBuffer::SafeConcatError</a> </li> <li class=\"module\"> <a href=\"activesupport/securityutils\">ActiveSupport::SecurityUtils</a> </li> <li class=\"class\"> <a href=\"activesupport/stringinquirer\">ActiveSupport::StringInquirer</a> </li> <li class=\"class\"> <a href=\"activesupport/subscriber\">ActiveSupport::Subscriber</a> </li> <li class=\"module\"> <a href=\"activesupport/taggedlogging\">ActiveSupport::TaggedLogging</a> </li> <li class=\"class\"> <a href=\"activesupport/testcase\">ActiveSupport::TestCase</a> </li> <li class=\"module\"> <a href=\"activesupport/testing\">ActiveSupport::Testing</a> </li> <li class=\"module\"> <a href=\"activesupport/testing/assertions\">ActiveSupport::Testing::Assertions</a> </li> <li class=\"module\"> <a href=\"activesupport/testing/constantlookup\">ActiveSupport::Testing::ConstantLookup</a> </li> <li class=\"module\"> <a href=\"activesupport/testing/declarative\">ActiveSupport::Testing::Declarative</a> </li> <li class=\"module\"> <a href=\"activesupport/testing/isolation\">ActiveSupport::Testing::Isolation</a> </li> <li class=\"module\"> <a href=\"activesupport/testing/isolation/forking\">ActiveSupport::Testing::Isolation::Forking</a> </li>  <li class=\"module\"> <a href=\"activesupport/testing/setupandteardown\">ActiveSupport::Testing::SetupAndTeardown</a> </li> <li class=\"module\"> <a href=\"activesupport/testing/setupandteardown/classmethods\">ActiveSupport::Testing::SetupAndTeardown::ClassMethods</a> </li> <li class=\"module\"> <a href=\"activesupport/testing/timehelpers\">ActiveSupport::Testing::TimeHelpers</a> </li> <li class=\"class\"> <a href=\"activesupport/timewithzone\">ActiveSupport::TimeWithZone</a> </li> <li class=\"class\"> <a href=\"activesupport/timezone\">ActiveSupport::TimeZone</a> </li> <li class=\"module\"> <a href=\"activesupport/timezone/threadsafe\">ActiveSupport::TimeZone::ThreadSafe</a> </li> <li class=\"module\"> <a href=\"activesupport/version\">ActiveSupport::VERSION</a> </li>           <li class=\"class\"> <a href=\"array\">Array</a> </li> <li class=\"module\"> <a href=\"benchmark\">Benchmark</a> </li> <li class=\"class\"> <a href=\"bigdecimal\">BigDecimal</a> </li> <li class=\"class\"> <a href=\"class\">Class</a> </li> <li class=\"class\"> <a href=\"date\">Date</a> </li> <li class=\"module\"> <a href=\"dateandtime\">DateAndTime</a> </li> <li class=\"module\"> <a href=\"dateandtime/calculations\">DateAndTime::Calculations</a> </li> <li class=\"module\"> <a href=\"dateandtime/zones\">DateAndTime::Zones</a> </li> <li class=\"class\"> <a href=\"datetime\">DateTime</a> </li> <li class=\"module\"> <a href=\"digest\">Digest</a> </li> <li class=\"module\"> <a href=\"digest/uuid\">Digest::UUID</a> </li> <li class=\"class\"> <a href=\"erb\">ERB</a> </li> <li class=\"module\"> <a href=\"erb/util\">ERB::Util</a> </li> <li class=\"module\"> <a href=\"encoding\">Encoding</a> </li> <li class=\"module\"> <a href=\"enumerable\">Enumerable</a> </li> <li class=\"class\"> <a href=\"falseclass\">FalseClass</a> </li> <li class=\"class\"> <a href=\"file\">File</a> </li> <li class=\"class\"> <a href=\"float\">Float</a> </li> <li class=\"class\"> <a href=\"hash\">Hash</a> </li> <li class=\"module\"> <a href=\"i18n\">I18n</a> </li>  <li class=\"class\"> <a href=\"integer\">Integer</a> </li> <li class=\"module\"> <a href=\"kernel\">Kernel</a> </li> <li class=\"module\"> <a href=\"libxml\">LibXML</a> </li> <li class=\"module\"> <a href=\"libxml/xml\">LibXML::XML</a> </li> <li class=\"class\"> <a href=\"loaderror\">LoadError</a> </li> <li class=\"module\"> <a href=\"loggersilence\">LoggerSilence</a> </li> <li class=\"module\"> <a href=\"marshal\">Marshal</a> </li> <li class=\"class\"> <a href=\"method\">Method</a> </li> <li class=\"module\"> <a href=\"mime\">Mime</a> </li> <li class=\"class\"> <a href=\"mime/mimes\">Mime::Mimes</a> </li> <li class=\"class\"> <a href=\"mime/nulltype\">Mime::NullType</a> </li> <li class=\"class\"> <a href=\"mime/type\">Mime::Type</a> </li> <li class=\"class\"> <a href=\"missingsourcefile\">MissingSourceFile</a> </li> <li class=\"class\"> <a href=\"module\">Module</a> </li> <li class=\"module\"> <a href=\"module/concerning\">Module::Concerning</a>  </li> <li class=\"class\"> <a href=\"module/delegationerror\">Module::DelegationError</a> </li> <li class=\"class\"> <a href=\"mysql\">Mysql</a> </li> <li class=\"module\"> <a href=\"mysql/field\">Mysql::Field</a> </li> <li class=\"class\"> <a href=\"mysql/result\">Mysql::Result</a> </li> <li class=\"class\"> <a href=\"mysql/stmt\">Mysql::Stmt</a> </li> <li class=\"class\"> <a href=\"mysql/time\">Mysql::Time</a> </li> <li class=\"class\"> <a href=\"nameerror\">NameError</a> </li> <li class=\"class\"> <a href=\"nilclass\">NilClass</a> </li> <li class=\"class\"> <a href=\"numeric\">Numeric</a> </li> <li class=\"class\"> <a href=\"object\">Object</a> </li> <li class=\"class\"> <a href=\"activesupport/hashwithindifferentaccess\">Object::HashWithIndifferentAccess</a> </li> <li class=\"module\"> <a href=\"qualifiedconstutils\">QualifiedConstUtils</a> </li> <li class=\"module\"> <a href=\"rack\">Rack</a> </li> <li class=\"module\"> <a href=\"rack/mount\">Rack::Mount</a> </li> <li class=\"module\"> <a href=\"rails/api\">Rails::API</a> </li> <li class=\"class\"> <a href=\"rails/api/apptask\">Rails::API::AppTask</a> </li> <li class=\"class\"> <a href=\"rails/api/edgetask\">Rails::API::EdgeTask</a> </li> <li class=\"class\"> <a href=\"rails/api/repotask\">Rails::API::RepoTask</a> </li> <li class=\"class\"> <a href=\"rails/api/stabletask\">Rails::API::StableTask</a> </li>   <li class=\"class\"> <a href=\"rails/application\">Rails::Application</a>  </li> <li class=\"module\"> <a href=\"rails/application/bootstrap\">Rails::Application::Bootstrap</a> </li> <li class=\"class\"> <a href=\"rails/application/configuration\">Rails::Application::Configuration</a> </li> <li class=\"class\"> <a href=\"rails/application/defaultmiddlewarestack\">Rails::Application::DefaultMiddlewareStack</a> </li> <li class=\"module\"> <a href=\"rails/application/finisher\">Rails::Application::Finisher</a> </li> <li class=\"class\"> <a href=\"rails/application/routesreloader\">Rails::Application::RoutesReloader</a> </li> <li class=\"class\"> <a href=\"rails/backtracecleaner\">Rails::BacktraceCleaner</a> </li> <li class=\"module\"> <a href=\"rails/configuration\">Rails::Configuration</a> </li> <li class=\"class\"> <a href=\"rails/configuration/middlewarestackproxy\">Rails::Configuration::MiddlewareStackProxy</a> </li> <li class=\"class\"> <a href=\"rails/console\">Rails::Console</a> </li> <li class=\"module\"> <a href=\"rails/consolemethods\">Rails::ConsoleMethods</a> </li> <li class=\"class\"> <a href=\"rails/dbconsole\">Rails::DBConsole</a> </li> <li class=\"class\"> <a href=\"rails/deprecatedconstant\">Rails::DeprecatedConstant</a> </li> <li class=\"class\"> <a href=\"rails/engine\">Rails::Engine</a>  </li> <li class=\"class\"> <a href=\"rails/engine/configuration\">Rails::Engine::Configuration</a> </li> <li class=\"class\"> <a href=\"rails/engine/railties\">Rails::Engine::Railties</a> </li> <li class=\"module\"> <a href=\"rails/engine/rake\">Rails::Engine::Rake</a> </li> <li class=\"module\"> <a href=\"rails/generators\">Rails::Generators</a> </li> <li class=\"module\"> <a href=\"rails/generators/actions\">Rails::Generators::Actions</a> </li> <li class=\"class\"> <a href=\"rails/generators/actions/createmigration\">Rails::Generators::Actions::CreateMigration</a> </li> <li class=\"class\"> <a href=\"rails/generators/activemodel\">Rails::Generators::ActiveModel</a> </li> <li class=\"class\"> <a href=\"rails/generators/appbase\">Rails::Generators::AppBase</a> </li> <li class=\"class\"> <a href=\"rails/generators/appbase/gemfileentry\">Rails::Generators::AppBase::GemfileEntry</a> </li> <li class=\"class\"> <a href=\"rails/generators/base\">Rails::Generators::Base</a> </li> <li class=\"module\"> <a href=\"rails/generators/migration\">Rails::Generators::Migration</a> </li> <li class=\"module\"> <a href=\"rails/generators/migration/classmethods\">Rails::Generators::Migration::ClassMethods</a> </li> <li class=\"class\"> <a href=\"rails/generators/namedbase\">Rails::Generators::NamedBase</a> </li> <li class=\"class\"> <a href=\"rails/generators/testcase\">Rails::Generators::TestCase</a> </li> <li class=\"module\"> <a href=\"rails/generators/testing\">Rails::Generators::Testing</a> </li> <li class=\"module\"> <a href=\"rails/generators/testing/assertions\">Rails::Generators::Testing::Assertions</a> </li> <li class=\"module\"> <a href=\"rails/generators/testing/behaviour\">Rails::Generators::Testing::Behaviour</a> </li> <li class=\"module\"> <a href=\"rails/generators/testing/behaviour/classmethods\">Rails::Generators::Testing::Behaviour::ClassMethods</a> </li> <li class=\"module\"> <a href=\"rails/generators/testing/setupandteardown\">Rails::Generators::Testing::SetupAndTeardown</a> </li> <li class=\"module\"> <a href=\"rails/info\">Rails::Info</a> </li> <li class=\"module\"> <a href=\"rails/info/gem\">Rails::Info::Gem</a> </li> <li class=\"module\"> <a href=\"rails/initializable\">Rails::Initializable</a> </li> <li class=\"module\"> <a href=\"rails/initializable/classmethods\">Rails::Initializable::ClassMethods</a> </li> <li class=\"class\"> <a href=\"rails/initializable/collection\">Rails::Initializable::Collection</a> </li> <li class=\"class\"> <a href=\"rails/initializable/initializer\">Rails::Initializable::Initializer</a> </li> <li class=\"module\"> <a href=\"rails/paths\">Rails::Paths</a> </li> <li class=\"class\"> <a href=\"rails/paths/path\">Rails::Paths::Path</a> </li> <li class=\"class\"> <a href=\"rails/paths/root\">Rails::Paths::Root</a> </li>  <li class=\"module\"> <a href=\"rails/rack\">Rails::Rack</a> </li> <li class=\"class\"> <a href=\"rails/rack/debugger\">Rails::Rack::Debugger</a> </li> <li class=\"class\"> <a href=\"rails/rack/logtailer\">Rails::Rack::LogTailer</a> </li> <li class=\"class\"> <a href=\"rails/rack/logger\">Rails::Rack::Logger</a> </li> <li class=\"class\"> <a href=\"rails/railtie\">Rails::Railtie</a>  </li> <li class=\"module\"> <a href=\"rails/railtie/configurable\">Rails::Railtie::Configurable</a> </li> <li class=\"module\"> <a href=\"rails/railtie/configurable/classmethods\">Rails::Railtie::Configurable::ClassMethods</a> </li> <li class=\"class\"> <a href=\"rails/railtie/configuration\">Rails::Railtie::Configuration</a> </li> <li class=\"class\"> <a href=\"rails/server\">Rails::Server</a> </li> <li class=\"class\"> <a href=\"rails/server/options\">Rails::Server::Options</a> </li> <li class=\"class\"> <a href=\"rails/testunitrailtie\">Rails::TestUnitRailtie</a> </li> <li class=\"module\"> <a href=\"rails/version\">Rails::VERSION</a> </li> <li class=\"class\"> <a href=\"range\">Range</a> </li> <li class=\"module\"> <a href=\"rbconfig\">RbConfig</a> </li>   <li class=\"class\"> <a href=\"string\">String</a> </li> <li class=\"class\"> <a href=\"symbol\">Symbol</a> </li> <li class=\"class\"> <a href=\"thread\">Thread</a> </li> <li class=\"class\"> <a href=\"time\">Time</a> </li> <li class=\"class\"> <a href=\"trueclass\">TrueClass</a> </li> <li class=\"module\"> <a href=\"uri\">URI</a> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","abstractcontroller/actionnotfound":"<h1 id=\"class-AbstractController::ActionNotFound\" class=\"class\"> class AbstractController::ActionNotFound </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">StandardError</dd>\n</dl> <section class=\"description\"> <p>Raised when a non-existing controller action is triggered.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","abstractcontroller/base":"<h1 id=\"class-AbstractController::Base\" class=\"class\"> class AbstractController::Base </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../activesupport/configurable\">ActiveSupport::Configurable</a></dd>\n</dl> <section class=\"description\"> <p><code>AbstractController::Base</code> is a low-level API. Nobody should be using it directly, and subclasses (like <a href=\"../actioncontroller/base\">ActionController::Base</a>) are expected to provide their own <code>render</code> method, since rendering means different things depending on the context.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-abstract\"> <span class=\"method-name\">abstract</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-abstract-3F\"> <span class=\"method-name\">abstract?</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-abstract-21\"> <span class=\"method-name\">abstract!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define a controller as abstract. See <a href=\"base#method-c-internal_methods\">::internal_methods</a> for more details.</p> <div class=\"method-source-code\" id=\"abstract-21-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 34\ndef abstract!\n  @abstract = true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-action_methods\"> <span class=\"method-name\">action_methods</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A list of method names that should be considered actions. This includes all public instance methods on a controller, less any internal methods (see internal_methods), adding back in any methods that are internal, but still exist on the class itself. Finally, hidden_actions are removed.</p> <h4 id=\"method-c-action_methods-label-Returns\">Returns</h4> <ul><li> <p><code>Set</code> - A set of all methods that should be considered actions.</p> </li></ul> <div class=\"method-source-code\" id=\"action_methods-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 78\ndef action_methods\n  @action_methods ||= begin\n    # All public instance methods of this class, including ancestors\n    methods = (public_instance_methods(true) -\n      # Except for public instance methods of Base and its ancestors\n      internal_methods +\n      # Be sure to include shadowed public instance methods of this class\n      public_instance_methods(false)).uniq.map { |x| x.to_s } -\n      # And always exclude explicitly hidden actions\n      hidden_actions.to_a\n\n    # Clear out AS callback method pollution\n    Set.new(methods.reject { |method| method =~ /_one_time_conditions/ })\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-clear_action_methods-21\"> <span class=\"method-name\">clear_action_methods!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"base#method-c-action_methods\">::action_methods</a> are cached and there is sometimes need to refresh them. clear_action_methods! allows you to do that, so next time you run <a href=\"base#method-c-action_methods\">::action_methods</a>, they will be recalculated</p> <div class=\"method-source-code\" id=\"clear_action_methods-21-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 97\ndef clear_action_methods!\n  @action_methods = nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-controller_path\"> <span class=\"method-name\">controller_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the full controller name, underscored, without the ending Controller. For instance, MyApp::MyPostsController would return “my_app/my_posts” for controller_path.</p> <h4 id=\"method-c-controller_path-label-Returns\">Returns</h4> <ul><li> <p><code>String</code></p> </li></ul> <div class=\"method-source-code\" id=\"controller_path-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 107\ndef controller_path\n  @controller_path ||= name.sub(/Controller$/, '').underscore unless anonymous?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-hidden_actions\"> <span class=\"method-name\">hidden_actions</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The list of hidden actions. Defaults to an empty array. This can be modified by other modules or subclasses to specify particular actions as hidden.</p> <h4 id=\"method-c-hidden_actions-label-Returns\">Returns</h4> <ul><li> <p><code>Array</code> - An array of method names that should not be considered actions.</p> </li></ul> <div class=\"method-source-code\" id=\"hidden_actions-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 66\ndef hidden_actions\n  []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-internal_methods\"> <span class=\"method-name\">internal_methods</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A list of all internal methods for a controller. This finds the first abstract superclass of a controller, and gets a list of all public instance methods on that abstract class. Public instance methods of a controller would normally be considered action methods, so methods declared on abstract classes are being removed. (ActionController::Metal and <a href=\"../actioncontroller/base\">ActionController::Base</a> are defined as abstract)</p> <div class=\"method-source-code\" id=\"internal_methods-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 53\ndef internal_methods\n  controller = self\n\n  controller = controller.superclass until controller.abstract?\n  controller.public_instance_methods(true)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-method_added\"> <span class=\"method-name\">method_added</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Refresh the cached <a href=\"base#method-c-action_methods\">::action_methods</a> when a new action_method is added.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"method_added-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 112\ndef method_added(name)\n  super\n  clear_action_methods!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-supports_path-3F\"> <span class=\"method-name\">supports_path?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the given controller is capable of rendering a path. A subclass of <code>AbstractController::Base</code> may return false. An Email controller for example does not support paths, only full URLs.</p> <div class=\"method-source-code\" id=\"supports_path-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 171\ndef self.supports_path?\n  true\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-action_methods\"> <span class=\"method-name\">action_methods</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delegates to the class' <a href=\"base#method-i-action_methods\">action_methods</a></p> <div class=\"method-source-code\" id=\"action_methods-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 146\ndef action_methods\n  self.class.action_methods\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-available_action-3F\"> <span class=\"method-name\">available_action?</span><span class=\"method-args\">(action_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if a method for the action is available and can be dispatched, false otherwise.</p> <p>Notice that <code>action_methods.include?(\"foo\")</code> may return false and <code>available_action?(\"foo\")</code> returns true because this method considers actions that are also available through other means, for example, implicit render ones.</p> <h4 id=\"method-i-available_action-3F-label-Parameters\">Parameters</h4> <ul><li> <p><code>action_name</code> - The name of an action to be tested</p> </li></ul> <h4 id=\"method-i-available_action-3F-label-Returns\">Returns</h4> <ul><li> <p><code>TrueClass</code>, <code>FalseClass</code></p> </li></ul> <div class=\"method-source-code\" id=\"available_action-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 163\ndef available_action?(action_name)\n  _find_action_name(action_name).present?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-controller_path\"> <span class=\"method-name\">controller_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delegates to the class' <a href=\"base#method-i-controller_path\">controller_path</a></p> <div class=\"method-source-code\" id=\"controller_path-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 141\ndef controller_path\n  self.class.controller_path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-process\"> <span class=\"method-name\">process</span><span class=\"method-args\">(action, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calls the action going through the entire action dispatch stack.</p> <p>The actual method that is called is determined by calling method_for_action. If no method can handle the action, then an <a href=\"actionnotfound\">AbstractController::ActionNotFound</a> error is raised.</p> <h4 id=\"method-i-process-label-Returns\">Returns</h4> <ul><li> <p><code>self</code></p> </li></ul> <div class=\"method-source-code\" id=\"process-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/base.rb, line 128\ndef process(action, *args)\n  @_action_name = action.to_s\n\n  unless action_name = _find_action_name(@_action_name)\n    raise ActionNotFound, \"The action '#{action}' could not be found for #{self.class.name}\"\n  end\n\n  @_response_body = nil\n\n  process_action(action_name, *args)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","abstractcontroller/callbacks/classmethods":"<h1 id=\"module-AbstractController::Callbacks::ClassMethods\" class=\"module\"> module AbstractController::Callbacks::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_insert_callbacks\"> <span class=\"method-name\">_insert_callbacks</span><span class=\"method-args\">(callbacks, block = nil) { |callback, options| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Take callback names and an optional callback proc, normalize them, then call the block with each callback. This allows us to abstract the normalization across several methods that use it.</p> <h4 id=\"method-i-_insert_callbacks-label-Parameters\">Parameters</h4> <ul>\n<li> <p><code>callbacks</code> - An array of callbacks, with an optional options hash as the last parameter.</p> </li>\n<li> <p><code>block</code> - A proc that should be added to the callbacks.</p> </li>\n</ul> <h4 id=\"method-i-_insert_callbacks-label-Block+Parameters\">Block Parameters</h4> <ul>\n<li> <p><code>name</code> - The callback to be added</p> </li>\n<li> <p><code>options</code> - A hash of options to be used when adding the callback</p> </li>\n</ul> <div class=\"method-source-code\" id=\"_insert_callbacks-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/callbacks.rb, line 71\ndef _insert_callbacks(callbacks, block = nil)\n  options = callbacks.extract_options!\n  _normalize_callback_options(options)\n  callbacks.push(block) if block\n  callbacks.each do |callback|\n    yield callback, options\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_normalize_callback_options\"> <span class=\"method-name\">_normalize_callback_options</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If :only or :except are used, convert the options into the :unless and :if options of <a href=\"../../activesupport/callbacks\">ActiveSupport::Callbacks</a>. The basic idea is that :only =&gt; :index gets converted to :if =&gt; proc {|c| c.action_name == “index” }.</p> <h4 id=\"method-i-_normalize_callback_options-label-Options\">Options</h4> <ul>\n<li> <p><code>only</code> - The callback should be run only for this action</p> </li>\n<li> <p><code>except</code> - The callback should be run for all actions except this action</p> </li>\n</ul> <div class=\"method-source-code\" id=\"_normalize_callback_options-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/callbacks.rb, line 33\ndef _normalize_callback_options(options)\n  _normalize_callback_option(options, :only, :if)\n  _normalize_callback_option(options, :except, :unless)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_action\"> <span class=\"method-callseq\"> after_action(names, block) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append a callback after actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"after_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 115\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-append_after_action\"> <span class=\"method-callseq\"> append_after_action(names, block) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append a callback after actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"append_after_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 136\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-append_around_action\"> <span class=\"method-callseq\"> append_around_action(names, block) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append a callback around actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"append_around_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 164\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-append_before_action\"> <span class=\"method-callseq\"> append_before_action(names, block) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append a callback before actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"append_before_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 108\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-around_action\"> <span class=\"method-callseq\"> around_action(names, block) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append a callback around actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"around_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 143\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_action\"> <span class=\"method-callseq\"> before_action(names, block) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append a callback before actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"before_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 87\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prepend_after_action\"> <span class=\"method-callseq\"> prepend_after_action(names, block) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Prepend a callback after actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"prepend_after_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 122\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prepend_around_action\"> <span class=\"method-callseq\"> prepend_around_action(names, block) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Prepend a callback around actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"prepend_around_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 150\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prepend_before_action\"> <span class=\"method-callseq\"> prepend_before_action(names, block) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Prepend a callback before actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"prepend_before_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 94\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-skip_action_callback\"> <span class=\"method-name\">skip_action_callback</span><span class=\"method-args\">(*names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Skip before, after, and around action callbacks matching any of the names.</p> <h4 id=\"method-i-skip_action_callback-label-Parameters\">Parameters</h4> <ul><li> <p><code>names</code> - A list of valid names that could be used for callbacks. Note that skipping uses Ruby equality, so it's impossible to skip a callback defined using an anonymous proc using <a href=\"classmethods#method-i-skip_action_callback\">skip_action_callback</a></p> </li></ul> <div class=\"method-source-code\" id=\"skip_action_callback-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/callbacks.rb, line 52\ndef skip_action_callback(*names)\n  skip_before_action(*names)\n  skip_after_action(*names)\n  skip_around_action(*names)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"classmethods#method-i-skip_filter\">skip_filter</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-skip_after_action\"> <span class=\"method-callseq\"> skip_after_action(names) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Skip a callback after actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"skip_after_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 129\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-skip_around_action\"> <span class=\"method-callseq\"> skip_around_action(names) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Skip a callback around actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"skip_around_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 157\n      </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-skip_before_action\"> <span class=\"method-callseq\"> skip_before_action(names) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Skip a callback before actions. See <a href=\"classmethods#method-i-_insert_callbacks\">#_insert_callbacks</a> for parameter details.</p> <div class=\"method-source-code\" id=\"skip_before_action-source\"> <pre class=\"c\"># File actionpack/lib/abstract_controller/callbacks.rb, line 101\n      </pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-skip_filter\"> <span class=\"method-name\">skip_filter</span><span class=\"method-args\">(*names)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"classmethods#method-i-skip_action_callback\">skip_action_callback</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","abstractcontroller/helpers/classmethods":"<h1 id=\"module-AbstractController::Helpers::ClassMethods\" class=\"module\"> module AbstractController::Helpers::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_helpers\"> <span class=\"method-name\">clear_helpers</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears up all existing helpers in this class, only keeping the helper with the same name as this class.</p> <div class=\"method-source-code\" id=\"clear_helpers-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/helpers.rb, line 117\ndef clear_helpers\n  inherited_helper_methods = _helper_methods\n  self._helpers = Module.new\n  self._helper_methods = Array.new\n\n  inherited_helper_methods.each { |meth| helper_method meth }\n  default_helper_module! unless anonymous?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-helper\"> <span class=\"method-name\">helper</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The <code>helper</code> class method can take a series of helper module names, a block, or both.</p> <h4 id=\"method-i-helper-label-Options\">Options</h4> <ul>\n<li> <p><code>*args</code> - <a href=\"../../module\">Module</a>, <a href=\"../../symbol\">Symbol</a>, <a href=\"../../string\">String</a></p> </li>\n<li> <p><code>block</code> - A block defining helper methods</p> </li>\n</ul> <p>When the argument is a module it will be included directly in the template class.</p> <pre class=\"ruby\">helper FooHelper # =&gt; includes FooHelper\n</pre> <p>When the argument is a string or symbol, the method will provide the “_helper” suffix, require the file and include the module in the template class. The second form illustrates how to include custom helpers when working with namespaced controllers, or other cases where the file containing the helper definition is not in one of Rails' standard load paths:</p> <pre class=\"ruby\">helper :foo             # =&gt; requires 'foo_helper' and includes FooHelper\nhelper 'resources/foo'  # =&gt; requires 'resources/foo_helper' and includes Resources::FooHelper\n</pre> <p>Additionally, the <code>helper</code> class method can receive and evaluate a block, making the methods defined available to the template.</p> <pre class=\"ruby\"># One line\nhelper { def hello() \"Hello, world!\" end }\n\n# Multi-line\nhelper do\n  def foo(bar)\n    \"#{bar} is the very best\"\n  end\nend\n</pre> <p>Finally, all the above styles can be mixed together, and the <code>helper</code> method can be invoked with a mix of <code>symbols</code>, <code>strings</code>, <code>modules</code> and blocks.</p> <pre class=\"ruby\">helper(:three, BlindHelper) { def mice() 'mice' end }\n</pre> <div class=\"method-source-code\" id=\"helper-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/helpers.rb, line 107\ndef helper(*args, &amp;block)\n  modules_for_helpers(args).each do |mod|\n    add_template_helper(mod)\n  end\n\n  _helpers.module_eval(&amp;block) if block_given?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-helper_method\"> <span class=\"method-name\">helper_method</span><span class=\"method-args\">(*meths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declare a controller method as a helper. For example, the following makes the <code>current_user</code> controller method available to the view:</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  helper_method :current_user, :logged_in?\n\n  def current_user\n    @current_user ||= User.find_by(id: session[:user])\n  end\n\n  def logged_in?\n    current_user != nil\n  end\nend\n</pre> <p>In a view:</p> <pre>&lt;% if logged_in? -%&gt;Welcome, &lt;%= current_user.name %&gt;&lt;% end -%&gt;</pre> <h4 id=\"method-i-helper_method-label-Parameters\">Parameters</h4> <ul><li> <p><code>method[, method]</code> - A name or names of a method on the controller to be made available on the view.</p> </li></ul> <div class=\"method-source-code\" id=\"helper_method-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/helpers.rb, line 60\n      def helper_method(*meths)\n        meths.flatten!\n        self._helper_methods += meths\n\n        meths.each do |meth|\n          _helpers.class_eval \"            def #{meth}(*args, &amp;blk)                               # def current_user(*args, &amp;blk)\n              controller.send(%(#{meth}), *args, &amp;blk)             #   controller.send(:current_user, *args, &amp;blk)\n            end                                                    # end\n\", __FILE__, __LINE__ + 1\n        end\n      end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inherited\"> <span class=\"method-name\">inherited</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>When a class is inherited, wrap its helper module in a new module. This ensures that the parent class's module can be changed independently of the child class's.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"inherited-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/helpers.rb, line 33\ndef inherited(klass)\n  helpers = _helpers\n  klass._helpers = Module.new { include helpers }\n  klass.class_eval { default_helper_module! } unless klass.anonymous?\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-modules_for_helpers\"> <span class=\"method-name\">modules_for_helpers</span><span class=\"method-args\">(args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a list of modules, normalized from the acceptable kinds of helpers with the following behavior:</p> <dl class=\"rdoc-list note-list\">\n<dt>\n<a href=\"../../string\">String</a> or <a href=\"../../symbol\">Symbol</a> </dt>\n<dd> <p>:FooBar or “FooBar” becomes “foo_bar_helper”,</p> </dd>\n</dl> <p>and “foo_bar_helper.rb” is loaded using require_dependency.</p> <dl class=\"rdoc-list note-list\">\n<dt>\n<a href=\"../../module\">Module</a> </dt>\n<dd> <p>No further processing</p> </dd>\n</dl> <p>After loading the appropriate files, the corresponding modules are returned.</p> <h4 id=\"method-i-modules_for_helpers-label-Parameters\">Parameters</h4> <ul><li> <p><code>args</code> - An array of helpers</p> </li></ul> <h4 id=\"method-i-modules_for_helpers-label-Returns\">Returns</h4> <ul><li> <p><code>Array</code> - A normalized list of modules for the list of helpers provided.</p> </li></ul> <div class=\"method-source-code\" id=\"modules_for_helpers-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/helpers.rb, line 143\ndef modules_for_helpers(args)\n  args.flatten.map! do |arg|\n    case arg\n    when String, Symbol\n      file_name = \"#{arg.to_s.underscore}_helper\"\n      begin\n        require_dependency(file_name)\n      rescue LoadError =&gt; e\n        raise AbstractController::Helpers::MissingHelperError.new(e, file_name)\n      end\n\n      mod_name = file_name.camelize\n      begin\n        mod_name.constantize\n      rescue LoadError\n        # dependencies.rb gives a similar error message but its wording is\n        # not as clear because it mentions autoloading. To the user all it\n        # matters is that a helper module couldn't be loaded, autoloading\n        # is an internal mechanism that should not leak.\n        raise NameError, \"Couldn't find #{mod_name}, expected it to be defined in helpers/#{file_name}.rb\"\n      end\n    when Module\n      arg\n    else\n      raise ArgumentError, \"helper must be a String, Symbol, or Module\"\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","abstractcontroller/rendering":"<h1 id=\"module-AbstractController::Rendering\" class=\"module\"> module AbstractController::Rendering </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../actionview/viewpaths\">ActionView::ViewPaths</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DEFAULT_PROTECTED_INSTANCE_VARIABLES\">DEFAULT_PROTECTED_INSTANCE_VARIABLES </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_normalize_args\"> <span class=\"method-name\">_normalize_args</span><span class=\"method-args\">(action=nil, options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Normalize args by converting render “foo” to render :action =&gt; “foo” and render “foo/bar” to render :file =&gt; “foo/bar”. :api: plugin</p> <div class=\"method-source-code\" id=\"_normalize_args-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 79\ndef _normalize_args(action=nil, options={})\n  if action.is_a? Hash\n    action\n  else\n    options\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_normalize_options\"> <span class=\"method-name\">_normalize_options</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Normalize options. :api: plugin</p> <div class=\"method-source-code\" id=\"_normalize_options-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 89\ndef _normalize_options(options)\n  options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_normalize_render\"> <span class=\"method-name\">_normalize_render</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Normalize args and options. :api: private</p> <div class=\"method-source-code\" id=\"_normalize_render-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 106\ndef _normalize_render(*args, &amp;block)\n  options = _normalize_args(*args, &amp;block)\n  #TODO: remove defined? when we restore AP &lt;=&gt; AV dependency\n  if defined?(request) &amp;&amp; request &amp;&amp; request.variant.present?\n    options[:variant] = request.variant\n  end\n  _normalize_options(options)\n  options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_process_format\"> <span class=\"method-name\">_process_format</span><span class=\"method-args\">(format, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Process the rendered format. :api: private</p> <div class=\"method-source-code\" id=\"_process_format-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 101\ndef _process_format(format, options = {})\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_process_options\"> <span class=\"method-name\">_process_options</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Process extra options. :api: plugin</p> <div class=\"method-source-code\" id=\"_process_options-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 95\ndef _process_options(options)\n  options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render\"> <span class=\"method-name\">render</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Normalize arguments, options and then delegates <a href=\"rendering#method-i-render_to_body\">#render_to_body</a> and sticks the result in self.response_body. :api: public</p> <div class=\"method-source-code\" id=\"render-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 23\ndef render(*args, &amp;block)\n  options = _normalize_render(*args, &amp;block)\n  self.response_body = render_to_body(options)\n  _process_format(rendered_format, options) if rendered_format\n  self.response_body\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render_to_body\"> <span class=\"method-name\">render_to_body</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs the actual template rendering. :api: public</p> <div class=\"method-source-code\" id=\"render_to_body-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 48\ndef render_to_body(options = {})\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render_to_string\"> <span class=\"method-name\">render_to_string</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Raw rendering of a template to a string.</p> <p>It is similar to render, except that it does not set the response_body and it should be guaranteed to always return a string.</p> <p>If a component extends the semantics of response_body (as Action Controller extends it to be anything that responds to the method each), this method needs to be overridden in order to still return a string. :api: plugin</p> <div class=\"method-source-code\" id=\"render_to_string-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 41\ndef render_to_string(*args, &amp;block)\n  options = _normalize_render(*args, &amp;block)\n  render_to_body(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rendered_format\"> <span class=\"method-name\">rendered_format</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns Content-Type of rendered content :api: public</p> <div class=\"method-source-code\" id=\"rendered_format-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 53\ndef rendered_format\n  Mime::TEXT\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-view_assigns\"> <span class=\"method-name\">view_assigns</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method should return a hash with assigns. You can overwrite this configuration per controller. :api: public</p> <div class=\"method-source-code\" id=\"view_assigns-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/rendering.rb, line 66\ndef view_assigns\n  protected_vars = _protected_ivars\n  variables      = instance_variables\n\n  variables.reject! { |s| protected_vars.include? s }\n  variables.each_with_object({}) { |name, hash|\n    hash[name.slice(1, name.length)] = instance_variable_get(name)\n  }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","abstractcontroller/translation":"<h1 id=\"module-AbstractController::Translation\" class=\"module\"> module AbstractController::Translation </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-l\"> <span class=\"method-name\">l</span><span class=\"method-args\">(*args)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"translation#method-i-localize\">localize</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-localize\"> <span class=\"method-name\">localize</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delegates to <code>I18n.localize</code>. Also aliased as <code>l</code>.</p> <div class=\"method-source-code\" id=\"localize-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/translation.rb, line 23\ndef localize(*args)\n  I18n.localize(*args)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"translation#method-i-l\">l</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-t\"> <span class=\"method-name\">t</span><span class=\"method-args\">(*args)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"translation#method-i-translate\">translate</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-translate\"> <span class=\"method-name\">translate</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delegates to <code>I18n.translate</code>. Also aliased as <code>t</code>.</p> <p>When the given key starts with a period, it will be scoped by the current controller and action. So if you call <code>translate(\".foo\")</code> from <code>PeopleController#index</code>, it will convert the call to <code>I18n.translate(\"people.index.foo\")</code>. This makes it less repetitive to translate many keys within the same controller / action and gives you a simple framework for scoping them consistently.</p> <div class=\"method-source-code\" id=\"translate-source\"> <pre class=\"ruby\"># File actionpack/lib/abstract_controller/translation.rb, line 11\ndef translate(*args)\n  key = args.first\n  if key.is_a?(String) &amp;&amp; (key[0] == '.')\n    key = \"#{ controller_path.tr('/', '.') }.#{ action_name }#{ key }\"\n    args[0] = key\n  end\n\n  I18n.translate(*args)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"translation#method-i-t\">t</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller":"<h1 id=\"module-ActionController\" class=\"module\"> module ActionController </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-add_renderer\"> <span class=\"method-name\">add_renderer</span><span class=\"method-args\">(key, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <code>Renderers.add</code></p> <div class=\"method-source-code\" id=\"add_renderer-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/renderers.rb, line 5\ndef self.add_renderer(key, &amp;block)\n  Renderers.add(key, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-remove_renderer\"> <span class=\"method-name\">remove_renderer</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <code>Renderers.remove</code></p> <div class=\"method-source-code\" id=\"remove_renderer-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/renderers.rb, line 10\ndef self.remove_renderer(key)\n  Renderers.remove(key)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/base":"<h1 id=\"class-ActionController::Base\" class=\"class\"> class ActionController::Base </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Metal</dd>\n</dl> <section class=\"description\"> <p>Action Controllers are the core of a web request in Rails. They are made up of one or more actions that are executed on request and then either it renders a template or redirects to another action. An action is defined as a public method on the controller, which will automatically be made accessible to the web-server through Rails Routes.</p> <p>By default, only the ApplicationController in a Rails application inherits from <code>ActionController::Base</code>. All other controllers in turn inherit from ApplicationController. This gives you one class to configure things such as request forgery protection and filtering of sensitive request parameters.</p> <p>A sample controller could look like this:</p> <pre class=\"ruby\">class PostsController &lt; ApplicationController\n  def index\n    @posts = Post.all\n  end\n\n  def create\n    @post = Post.create params[:post]\n    redirect_to posts_path\n  end\nend\n</pre> <p>Actions, by default, render a template in the <code>app/views</code> directory corresponding to the name of the controller and action after executing code in the action. For example, the <code>index</code> action of the PostsController would render the template <code>app/views/posts/index.html.erb</code> by default after populating the <code>@posts</code> instance variable.</p> <p>Unlike index, the create action will not render a template. After performing its main purpose (creating a new post), it initiates a redirect instead. This redirect works by returning an external “302 Moved” HTTP response that takes the user to the index action.</p> <p>These two methods represent the two basic action archetypes used in Action Controllers. Get-and-show and do-and-redirect. Most actions are variations on these themes.</p> <h2 id=\"class-ActionController::Base-label-Requests\">Requests</h2> <p>For every request, the router determines the value of the <code>controller</code> and <code>action</code> keys. These determine which controller and action are called. The remaining request parameters, the session (if one is available), and the full request with all the HTTP headers are made available to the action through accessor methods. Then the action is performed.</p> <p>The full request object is available via the request accessor and is primarily used to query for HTTP headers:</p> <pre class=\"ruby\">def server_ip\n  location = request.env[\"REMOTE_ADDR\"]\n  render plain: \"This server hosted at #{location}\"\nend\n</pre> <h2 id=\"class-ActionController::Base-label-Parameters\"><a href=\"parameters\">Parameters</a></h2> <p>All request parameters, whether they come from a GET or POST request, or from the URL, are available through the params method which returns a hash. For example, an action that was performed through <code>/posts?category=All&amp;limit=5</code> will include <code>{\n\"category\" =&gt; \"All\", \"limit\" =&gt;\n\"5\" }</code> in params.</p> <p>It's also possible to construct multi-dimensional parameter hashes by specifying keys using brackets, such as:</p> <pre>&lt;input type=\"text\" name=\"post[name]\" value=\"david\"&gt;\n&lt;input type=\"text\" name=\"post[address]\" value=\"hyacintvej\"&gt;</pre> <p>A request stemming from a form holding these inputs will include <code>{\n\"post\" =&gt; { \"name\" =&gt; \"david\",\n\"address\" =&gt; \"hyacintvej\" } }</code>. If the address input had been named <code>post[address][street]</code>, the params would have included <code>{ \"post\" =&gt; { \"address\" =&gt; {\n\"street\" =&gt; \"hyacintvej\" } } }</code>. There's no limit to the depth of the nesting.</p> <h2 id=\"class-ActionController::Base-label-Sessions\">Sessions</h2> <p>Sessions allow you to store objects in between requests. This is useful for objects that are not yet ready to be persisted, such as a Signup object constructed in a multi-paged process, or objects that don't change much and are needed all the time, such as a User object for a system that requires login. The session should not be used, however, as a cache for objects where it's likely they could be changed unknowingly. It's usually too much work to keep it all synchronized – something databases already excel at.</p> <p>You can place objects in the session by using the <code>session</code> method, which accesses a hash:</p> <pre class=\"ruby\">session[:person] = Person.authenticate(user_name, password)\n</pre> <p>And retrieved again through the same hash:</p> <pre class=\"ruby\">Hello #{session[:person]}\n</pre> <p>For removing objects from the session, you can either assign a single key to <code>nil</code>:</p> <pre class=\"ruby\"># removes :person from session\nsession[:person] = nil\n</pre> <p>or you can remove the entire session with <code>reset_session</code>.</p> <p>Sessions are stored by default in a browser cookie that's cryptographically signed, but unencrypted. This prevents the user from tampering with the session but also allows them to see its contents.</p> <p>Do not put secret information in cookie-based sessions!</p> <h2 id=\"class-ActionController::Base-label-Responses\">Responses</h2> <p>Each action results in a response, which holds the headers and document to be sent to the user's browser. The actual response object is generated automatically through the use of renders and redirects and requires no user intervention.</p> <h2 id=\"class-ActionController::Base-label-Renders\">Renders</h2> <p>Action Controller sends content to the user by using one of five rendering methods. The most versatile and common is the rendering of a template. Included in the Action Pack is the Action View, which enables rendering of <a href=\"../erb\">ERB</a> templates. It's automatically configured. The controller passes objects to the view by assigning instance variables:</p> <pre class=\"ruby\">def show\n  @post = Post.find(params[:id])\nend\n</pre> <p>Which are then automatically available to the view:</p> <pre>Title: &lt;%= @post.title %&gt;</pre> <p>You don't have to rely on the automated rendering. For example, actions that could result in the rendering of different templates will use the manual rendering methods:</p> <pre class=\"ruby\">def search\n  @results = Search.find(params[:query])\n  case @results.count\n    when 0 then render action: \"no_results\"\n    when 1 then render action: \"show\"\n    when 2..10 then render action: \"show_many\"\n  end\nend\n</pre> <p>Read more about writing <a href=\"../erb\">ERB</a> and Builder templates in <a href=\"../actionview/base\">ActionView::Base</a>.</p> <h2 id=\"class-ActionController::Base-label-Redirects\">Redirects</h2> <p>Redirects are used to move from one action to another. For example, after a <code>create</code> action, which stores a blog entry to the database, we might like to show the user the new entry. Because we're following good DRY principles (Don't Repeat Yourself), we're going to reuse (and redirect to) a <code>show</code> action that we'll assume has already been created. The code might look like this:</p> <pre class=\"ruby\">def create\n  @entry = Entry.new(params[:entry])\n  if @entry.save\n    # The entry was saved correctly, redirect to show\n    redirect_to action: 'show', id: @entry.id\n  else\n    # things didn't go so well, do something else\n  end\nend\n</pre> <p>In this case, after saving our new entry to the database, the user is redirected to the <code>show</code> method, which is then executed. Note that this is an external HTTP-level redirection which will cause the browser to make a second request (a GET to the show action), and not some internal re-routing which calls both “create” and then “show” within one request.</p> <p>Learn more about <code>redirect_to</code> and what options you have in <a href=\"redirecting\">ActionController::Redirecting</a>.</p> <h2 id=\"class-ActionController::Base-label-Calling+multiple+redirects+or+renders\">Calling multiple redirects or renders</h2> <p>An action may contain only a single render or a single redirect. Attempting to try to do either again will result in a DoubleRenderError:</p> <pre class=\"ruby\">def do_something\n  redirect_to action: \"elsewhere\"\n  render action: \"overthere\" # raises DoubleRenderError\nend\n</pre> <p>If you need to redirect on the condition of something, then be sure to add “and return” to halt execution.</p> <pre class=\"ruby\">def do_something\n  redirect_to(action: \"elsewhere\") and return if monkeys.nil?\n  render action: \"overthere\" # won't be called if monkeys is nil\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"MODULES\">MODULES </dt>\n\n<dt id=\"PROTECTED_IVARS\">PROTECTED_IVARS </dt>\n<dd>\n<p>Define some internal variables that should not be propagated to the view.</p> </dd>\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-protected_instance_variables\"> <span class=\"method-name\">protected_instance_variables</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"protected_instance_variables-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/base.rb, line 262\ndef self.protected_instance_variables\n  PROTECTED_IVARS\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-without_modules\"> <span class=\"method-name\">without_modules</span><span class=\"method-args\">(*modules)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shortcut helper that returns all the modules included in <a href=\"base\">ActionController::Base</a> except the ones passed as arguments:</p> <pre class=\"ruby\">class MetalController\n  ActionController::Base.without_modules(:ParamsWrapper, :Streaming).each do |left|\n    include left\n  end\nend\n</pre> <p>This gives better control over what you want to exclude and makes it easier to create a bare controller class, instead of listing the modules required manually.</p> <div class=\"method-source-code\" id=\"without_modules-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/base.rb, line 195\ndef self.without_modules(*modules)\n  modules = modules.map do |m|\n    m.is_a?(Symbol) ? ActionController.const_get(m) : m\n  end\n\n  MODULES - modules\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-request\"> <span class=\"method-name\">request</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an <a href=\"../actiondispatch/request\">ActionDispatch::Request</a> instance that represents the current request.</p> <div class=\"method-source-code\" id=\"request-source\"> <pre class=\"c\"># File actionpack/lib/action_controller/base.rb, line 177\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-response\"> <span class=\"method-name\">response</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an <a href=\"../actiondispatch/response\">ActionDispatch::Response</a> that represents the current response.</p> <div class=\"method-source-code\" id=\"response-source\"> <pre class=\"c\"># File actionpack/lib/action_controller/base.rb, line 183\n    </pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/caching":"<h1 id=\"module-ActionController::Caching\" class=\"module\"> module ActionController::Caching </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"rackdelegation\">ActionController::RackDelegation</a>, <span class=\"include\">AbstractController::Callbacks</span>, <span class=\"include\">ActionController::Caching::ConfigMethods</span>, <a class=\"include\" href=\"caching/fragments\">ActionController::Caching::Fragments</a>\n</dd>\n</dl> <section class=\"description\"> <p>Caching is a cheap way of speeding up slow applications by keeping the result of calculations, renderings, and database calls around for subsequent requests.</p> <p>You can read more about each approach by clicking the modules below.</p> <p>Note: To turn off all caching, set</p> <pre class=\"ruby\">config.action_controller.perform_caching = false\n</pre> <h2 id=\"module-ActionController::Caching-label-Caching+stores\">Caching stores</h2> <p>All the caching stores from <a href=\"../activesupport/cache\">ActiveSupport::Cache</a> are available to be used as backends for Action Controller caching.</p> <p>Configuration examples (FileStore is the default):</p> <pre class=\"ruby\">config.action_controller.cache_store = :memory_store\nconfig.action_controller.cache_store = :file_store, '/path/to/cache/directory'\nconfig.action_controller.cache_store = :mem_cache_store, 'localhost'\nconfig.action_controller.cache_store = :mem_cache_store, Memcached::Rails.new('localhost:11211')\nconfig.action_controller.cache_store = MyOwnStore.new('parameter')\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-view_cache_dependencies\"> <span class=\"method-name\">view_cache_dependencies</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"view_cache_dependencies-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/caching.rb, line 75\ndef view_cache_dependencies\n  self.class._view_cache_dependencies.map { |dep| instance_exec(&amp;dep) }.compact\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cache\"> <span class=\"method-name\">cache</span><span class=\"method-args\">(key, options = {}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience accessor.</p> <div class=\"method-source-code\" id=\"cache-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/caching.rb, line 81\ndef cache(key, options = {}, &amp;block)\n  if cache_configured?\n    cache_store.fetch(ActiveSupport::Cache.expand_cache_key(key, :controller), options, &amp;block)\n  else\n    yield\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/caching/fragments":"<h1 id=\"module-ActionController::Caching::Fragments\" class=\"module\"> module ActionController::Caching::Fragments </h1> <section class=\"description\"> <p>Fragment caching is used for caching various blocks within views without caching the entire action as a whole. This is useful when certain elements of an action change frequently or depend on complicated state while other parts rarely change or can be shared amongst multiple parties. The caching is done using the <code>cache</code> helper available in the Action View. See <a href=\"../../actionview/helpers/cachehelper\">ActionView::Helpers::CacheHelper</a> for more information.</p> <p>While it's strongly recommended that you use key-based cache expiration (see links in CacheHelper for more information), it is also possible to manually expire caches. For example:</p> <pre class=\"ruby\">expire_fragment('name_of_cache')\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-expire_fragment\"> <span class=\"method-name\">expire_fragment</span><span class=\"method-args\">(key, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes fragments from the cache.</p> <p><code>key</code> can take one of three forms:</p> <ul>\n<li> <p><a href=\"../../string\">String</a> - This would normally take the form of a path, like <code>pages/45/notes</code>.</p> </li>\n<li> <p><a href=\"../../hash\">Hash</a> - Treated as an implicit call to <code>url_for</code>, like <code>{ controller: 'pages', action:\n'notes', id: 45}</code></p> </li>\n<li> <p>Regexp - Will remove any fragment that matches, so <code>%r{pages/\\d*/notes}</code> might remove all notes. Make sure you don't use anchors in the regex (<code>^</code> or <code>$</code>) because the actual filename matched looks like <code>./cache/filename/path.cache</code>. Note: Regexp expiration is only supported on caches that can iterate over all keys (unlike memcached).</p> </li>\n</ul> <p><code>options</code> is passed through to the cache store's <code>delete</code> method (or <code>delete_matched</code>, for Regexp keys).</p> <div class=\"method-source-code\" id=\"expire_fragment-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/caching/fragments.rb, line 79\ndef expire_fragment(key, options = nil)\n  return unless cache_configured?\n  key = fragment_cache_key(key) unless key.is_a?(Regexp)\n\n  instrument_fragment_cache :expire_fragment, key do\n    if key.is_a?(Regexp)\n      cache_store.delete_matched(key, options)\n    else\n      cache_store.delete(key, options)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fragment_cache_key\"> <span class=\"method-name\">fragment_cache_key</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Given a key (as described in <code>expire_fragment</code>), returns a key suitable for use in reading, writing, or expiring a cached fragment. All keys are prefixed with <code>views/</code> and uses <a href=\"../../activesupport/cache#method-c-expand_cache_key\">ActiveSupport::Cache.expand_cache_key</a> for the expansion.</p> <div class=\"method-source-code\" id=\"fragment_cache_key-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/caching/fragments.rb, line 21\ndef fragment_cache_key(key)\n  ActiveSupport::Cache.expand_cache_key(key.is_a?(Hash) ? url_for(key).split(\"://\").last : key, :views)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fragment_exist-3F\"> <span class=\"method-name\">fragment_exist?</span><span class=\"method-args\">(key, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Check if a cached fragment from the location signified by <code>key</code> exists (see <code>expire_fragment</code> for acceptable formats).</p> <div class=\"method-source-code\" id=\"fragment_exist-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/caching/fragments.rb, line 52\ndef fragment_exist?(key, options = nil)\n  return unless cache_configured?\n  key = fragment_cache_key(key)\n\n  instrument_fragment_cache :exist_fragment?, key do\n    cache_store.exist?(key, options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read_fragment\"> <span class=\"method-name\">read_fragment</span><span class=\"method-args\">(key, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reads a cached fragment from the location signified by <code>key</code> (see <code>expire_fragment</code> for acceptable formats).</p> <div class=\"method-source-code\" id=\"read_fragment-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/caching/fragments.rb, line 40\ndef read_fragment(key, options = nil)\n  return unless cache_configured?\n\n  key = fragment_cache_key(key)\n  instrument_fragment_cache :read_fragment, key do\n    result = cache_store.read(key, options)\n    result.respond_to?(:html_safe) ? result.html_safe : result\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write_fragment\"> <span class=\"method-name\">write_fragment</span><span class=\"method-args\">(key, content, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Writes <code>content</code> to the location signified by <code>key</code> (see <code>expire_fragment</code> for acceptable formats).</p> <div class=\"method-source-code\" id=\"write_fragment-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/caching/fragments.rb, line 27\ndef write_fragment(key, content, options = nil)\n  return content unless cache_configured?\n\n  key = fragment_cache_key(key)\n  instrument_fragment_cache :write_fragment, key do\n    content = content.to_str\n    cache_store.write(key, content, options)\n  end\n  content\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/conditionalget":"<h1 id=\"module-ActionController::ConditionalGet\" class=\"module\"> module ActionController::ConditionalGet </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"rackdelegation\">ActionController::RackDelegation</a>, <a class=\"include\" href=\"head\">ActionController::Head</a>\n</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-expires_in\"> <span class=\"method-name\">expires_in</span><span class=\"method-args\">(seconds, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets a HTTP 1.1 Cache-Control header. Defaults to issuing a <code>private</code> instruction, so that intermediate caches must not cache the response.</p> <pre class=\"ruby\">expires_in 20.minutes\nexpires_in 3.hours, public: true\nexpires_in 3.hours, public: true, must_revalidate: true\n</pre> <p>This method will overwrite an existing Cache-Control header. See <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\">www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</a> for more possibilities.</p> <p>The method will also ensure a HTTP <a href=\"../date\">Date</a> header for client compatibility.</p> <div class=\"method-source-code\" id=\"expires_in-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/conditional_get.rb, line 176\ndef expires_in(seconds, options = {})\n  response.cache_control.merge!(\n    :max_age         =&gt; seconds,\n    :public          =&gt; options.delete(:public),\n    :must_revalidate =&gt; options.delete(:must_revalidate)\n  )\n  options.delete(:private)\n\n  response.cache_control[:extras] = options.map {|k,v| \"#{k}=#{v}\"}\n  response.date = Time.now unless response.date?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-expires_now\"> <span class=\"method-name\">expires_now</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets a HTTP 1.1 Cache-Control header of <code>no-cache</code> so no caching should occur by the browser or intermediate caches (like caching proxy servers).</p> <div class=\"method-source-code\" id=\"expires_now-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/conditional_get.rb, line 190\ndef expires_now\n  response.cache_control.replace(:no_cache =&gt; true)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fresh_when\"> <span class=\"method-name\">fresh_when</span><span class=\"method-args\">(record_or_options, additional_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the <code>etag</code>, <code>last_modified</code>, or both on the response and renders a <code>304 Not Modified</code> response if the request is already fresh.</p> <h3 id=\"method-i-fresh_when-label-Parameters-3A\">Parameters:</h3> <ul>\n<li> <p><code>:etag</code>.</p> </li>\n<li> <p><code>:last_modified</code>.</p> </li>\n<li> <p><code>:public</code> By default the Cache-Control header is private, set this to <code>true</code> if you want your application to be cachable by other devices (proxy caches).</p> </li>\n<li> <p><code>:template</code> By default, the template digest for the current controller/action is included in ETags. If the action renders a different template, you can include its digest instead. If the action doesn't render a template at all, you can pass <code>template: false</code> to skip any attempt to check for a template digest.</p> </li>\n</ul> <h3 id=\"method-i-fresh_when-label-Example-3A\">Example:</h3> <pre class=\"ruby\">def show\n  @article = Article.find(params[:id])\n  fresh_when(etag: @article, last_modified: @article.created_at, public: true)\nend\n</pre> <p>This will render the show template if the request isn't sending a matching ETag or If-Modified-Since header and just a <code>304 Not\nModified</code> response if there's a match.</p> <p>You can also just pass a record where <code>last_modified</code> will be set by calling <code>updated_at</code> and the <code>etag</code> by passing the object itself.</p> <pre class=\"ruby\">def show\n  @article = Article.find(params[:id])\n  fresh_when(@article)\nend\n</pre> <p>When passing a record, you can still set whether the public header:</p> <pre class=\"ruby\">def show\n  @article = Article.find(params[:id])\n  fresh_when(@article, public: true)\nend\n</pre> <p>When rendering a different template than the default controller/action style, you can indicate which digest to include in the ETag:</p> <pre class=\"ruby\">before_action { fresh_when @article, template: 'widgets/show' }\n</pre> <div class=\"method-source-code\" id=\"fresh_when-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/conditional_get.rb, line 80\ndef fresh_when(record_or_options, additional_options = {})\n  if record_or_options.is_a? Hash\n    options = record_or_options\n    options.assert_valid_keys(:etag, :last_modified, :public, :template)\n  else\n    record  = record_or_options\n    options = { etag: record, last_modified: record.try(:updated_at) }.merge!(additional_options)\n  end\n\n  response.etag          = combine_etags(options)   if options[:etag] || options[:template]\n  response.last_modified = options[:last_modified]  if options[:last_modified]\n  response.cache_control[:public] = true            if options[:public]\n\n  head :not_modified if request.fresh?(response)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stale-3F\"> <span class=\"method-name\">stale?</span><span class=\"method-args\">(record_or_options, additional_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the <code>etag</code> and/or <code>last_modified</code> on the response and checks it against the client request. If the request doesn't match the options provided, the request is considered stale and should be generated from scratch. Otherwise, it's fresh and we don't need to generate anything and a reply of <code>304 Not\nModified</code> is sent.</p> <h3 id=\"method-i-stale-3F-label-Parameters-3A\">Parameters:</h3> <ul>\n<li> <p><code>:etag</code>.</p> </li>\n<li> <p><code>:last_modified</code>.</p> </li>\n<li> <p><code>:public</code> By default the Cache-Control header is private, set this to <code>true</code> if you want your application to be cachable by other devices (proxy caches).</p> </li>\n<li> <p><code>:template</code> By default, the template digest for the current controller/action is included in ETags. If the action renders a different template, you can include its digest instead. If the action doesn't render a template at all, you can pass <code>template: false</code> to skip any attempt to check for a template digest.</p> </li>\n</ul> <h3 id=\"method-i-stale-3F-label-Example-3A\">Example:</h3> <pre class=\"ruby\">def show\n  @article = Article.find(params[:id])\n\n  if stale?(etag: @article, last_modified: @article.created_at)\n    @statistics = @article.really_expensive_call\n    respond_to do |format|\n      # all the supported formats\n    end\n  end\nend\n</pre> <p>You can also just pass a record where <code>last_modified</code> will be set by calling <code>updated_at</code> and the <code>etag</code> by passing the object itself.</p> <pre class=\"ruby\">def show\n  @article = Article.find(params[:id])\n\n  if stale?(@article)\n    @statistics = @article.really_expensive_call\n    respond_to do |format|\n      # all the supported formats\n    end\n  end\nend\n</pre> <p>When passing a record, you can still set whether the public header:</p> <pre class=\"ruby\">def show\n  @article = Article.find(params[:id])\n\n  if stale?(@article, public: true)\n    @statistics = @article.really_expensive_call\n    respond_to do |format|\n      # all the supported formats\n    end\n  end\nend\n</pre> <p>When rendering a different template than the default controller/action style, you can indicate which digest to include in the ETag:</p> <pre class=\"ruby\">def show\n  super if stale? @article, template: 'widgets/show'\nend\n</pre> <div class=\"method-source-code\" id=\"stale-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/conditional_get.rb, line 160\ndef stale?(record_or_options, additional_options = {})\n  fresh_when(record_or_options, additional_options)\n  !request.fresh?(response)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/conditionalget/classmethods":"<h1 id=\"module-ActionController::ConditionalGet::ClassMethods\" class=\"module\"> module ActionController::ConditionalGet::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-etag\"> <span class=\"method-name\">etag</span><span class=\"method-args\">(&amp;etagger)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to consider additional controller-wide information when generating an ETag. For example, if you serve pages tailored depending on who's logged in at the moment, you may want to add the current user id to be part of the ETag to prevent authorized displaying of cached pages.</p> <pre class=\"ruby\">class InvoicesController &lt; ApplicationController\n  etag { current_user.try :id }\n\n  def show\n    # Etag will differ even for the same invoice when it's viewed by a different current_user\n    @invoice = Invoice.find(params[:id])\n    fresh_when(@invoice)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"etag-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/conditional_get.rb, line 30\ndef etag(&amp;etagger)\n  self.etaggers += [etagger]\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/datastreaming":"<h1 id=\"module-ActionController::DataStreaming\" class=\"module\"> module ActionController::DataStreaming </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><span class=\"include\">ActionController::Rendering</span></dd>\n</dl> <section class=\"description\"> <p>Methods for sending arbitrary data and for streaming files to the browser, instead of rendering.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-send_data\"> <span class=\"method-name\">send_data</span><span class=\"method-args\">(data, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sends the given binary data to the browser. This method is similar to <code>render plain: data</code>, but also allows you to specify whether the browser should display the response as a file attachment (i.e. in a download dialog) or as inline data. You may also set the content type, the apparent file name, and other things.</p> <p>Options:</p> <ul>\n<li> <p><code>:filename</code> - suggests a filename for the browser to use.</p> </li>\n<li> <p><code>:type</code> - specifies an HTTP content type. Defaults to 'application/octet-stream'. You can specify either a string or a symbol for a registered type register with <code>Mime::Type.register</code>, for example :json If omitted, type will be guessed from the file extension specified in <code>:filename</code>. If no content type is registered for the extension, default type 'application/octet-stream' will be used.</p> </li>\n<li> <p><code>:disposition</code> - specifies whether the file will be shown inline or downloaded. Valid values are 'inline' and 'attachment' (default).</p> </li>\n<li> <p><code>:status</code> - specifies the status code to send with the response. Defaults to 200.</p> </li>\n</ul> <p>Generic data download:</p> <pre class=\"ruby\">send_data buffer\n</pre> <p>Download a dynamically-generated tarball:</p> <pre class=\"ruby\">send_data generate_tgz('dir'), filename: 'dir.tgz'\n</pre> <p>Display an image Active Record in the browser:</p> <pre class=\"ruby\">send_data image.data, type: image.content_type, disposition: 'inline'\n</pre> <p>See <code>send_file</code> for more information on HTTP Content-* headers and caching.</p> <div class=\"method-source-code\" id=\"send_data-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/data_streaming.rb, line 127\ndef send_data(data, options = {}) #:doc:\n  send_file_headers! options\n  render options.slice(:status, :content_type).merge(:text =&gt; data)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-send_file\"> <span class=\"method-name\">send_file</span><span class=\"method-args\">(path, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sends the file. This uses a server-appropriate method (such as X-Sendfile) via the Rack::Sendfile middleware. The header to use is set via <code>config.action_dispatch.x_sendfile_header</code>. Your server can also configure this for you by setting the X-Sendfile-Type header.</p> <p>Be careful to sanitize the path parameter if it is coming from a web page. <code>send_file(params[:path])</code> allows a malicious user to download any file on your server.</p> <p>Options:</p> <ul>\n<li> <p><code>:filename</code> - suggests a filename for the browser to use. Defaults to <code>File.basename(path)</code>.</p> </li>\n<li> <p><code>:type</code> - specifies an HTTP content type. You can specify either a string or a symbol for a registered type register with <code>Mime::Type.register</code>, for example :json If omitted, type will be guessed from the file extension specified in <code>:filename</code>. If no content type is registered for the extension, default type 'application/octet-stream' will be used.</p> </li>\n<li> <p><code>:disposition</code> - specifies whether the file will be shown inline or downloaded. Valid values are 'inline' and 'attachment' (default).</p> </li>\n<li> <p><code>:status</code> - specifies the status code to send with the response. Defaults to 200.</p> </li>\n<li> <p><code>:url_based_filename</code> - set to <code>true</code> if you want the browser guess the filename from the URL, which is necessary for i18n filenames on certain browsers (setting <code>:filename</code> overrides this option).</p> </li>\n</ul> <p>The default Content-Type and Content-Disposition headers are set to download arbitrary binary files in as many browsers as possible. IE versions 4, 5, 5.5, and 6 are all known to have a variety of quirks (especially when downloading over SSL).</p> <p>Simple download:</p> <pre class=\"ruby\">send_file '/path/to.zip'\n</pre> <p>Show a JPEG in the browser:</p> <pre class=\"ruby\">send_file '/path/to.jpeg', type: 'image/jpeg', disposition: 'inline'\n</pre> <p>Show a 404 page in the browser:</p> <pre class=\"ruby\">send_file '/path/to/404.html', type: 'text/html; charset=utf-8', status: 404\n</pre> <p>Read about the other Content-* HTTP headers if you'd like to provide the user with more information (such as Content-Description) in <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\">www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11</a>.</p> <p>Also be aware that the document may be cached by proxies and browsers. The Pragma and Cache-Control headers declare how the file may be cached by intermediaries. They default to require clients to validate with the server before releasing cached responses. See <a href=\"http://www.mnot.net/cache_docs\">www.mnot.net/cache_docs</a>/ for an overview of web caching and <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a> for the Cache-Control header spec.</p> <div class=\"method-source-code\" id=\"send_file-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/data_streaming.rb, line 67\ndef send_file(path, options = {}) #:doc:\n  raise MissingFile, \"Cannot read file #{path}\" unless File.file?(path) and File.readable?(path)\n\n  options[:filename] ||= File.basename(path) unless options[:url_based_filename]\n  send_file_headers! options\n\n  self.status = options[:status] || 200\n  self.content_type = options[:content_type] if options.key?(:content_type)\n  self.response_body = FileBody.new(path)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/etagwithtemplatedigest":"<h1 id=\"module-ActionController::EtagWithTemplateDigest\" class=\"module\"> module ActionController::EtagWithTemplateDigest </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"conditionalget\">ActionController::ConditionalGet</a></dd>\n</dl> <section class=\"description\"> <p>When our views change, they should bubble up into HTTP cache freshness and bust browser caches. So the template digest for the current action is automatically included in the ETag.</p> <p>Enabled by default for apps that use Action View. Disable by setting</p> <pre class=\"ruby\">config.action_controller.etag_with_template_digest = false\n</pre> <p>Override the template to digest by passing <code>:template</code> to <code>fresh_when</code> and <code>stale?</code> calls. For example:</p> <pre class=\"ruby\"># We're going to render widgets/show, not posts/show\nfresh_when @post, template: 'widgets/show'\n\n# We're not going to render a template, so omit it from the ETag.\nfresh_when @post, template: false\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/flash/classmethods":"<h1 id=\"module-ActionController::Flash::ClassMethods\" class=\"module\"> module ActionController::Flash::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_flash_types\"> <span class=\"method-name\">add_flash_types</span><span class=\"method-args\">(*types)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates new flash types. You can pass as many types as you want to create flash types other than the default <code>alert</code> and <code>notice</code> in your controllers and views. For instance:</p> <pre># in application_controller.rb\nclass ApplicationController &lt; ActionController::Base\n  add_flash_types :warning\nend\n\n# in your controller\nredirect_to user_path(@user), warning: \"Incomplete profile\"\n\n# in your view\n&lt;%= warning %&gt;</pre> <p>This method will automatically define a new method for each of the given names, and it will be available in your views.</p> <div class=\"method-source-code\" id=\"add_flash_types-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/flash.rb, line 31\ndef add_flash_types(*types)\n  types.each do |type|\n    next if _flash_types.include?(type)\n\n    define_method(type) do\n      request.flash[type]\n    end\n    helper_method type\n\n    self._flash_types += [type]\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/forcessl":"<h1 id=\"module-ActionController::ForceSSL\" class=\"module\"> module ActionController::ForceSSL </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><span class=\"include\">AbstractController::Callbacks</span></dd>\n</dl> <section class=\"description\"> <p>This module provides a method which will redirect browser to use HTTPS protocol. This will ensure that user's sensitive information will be transferred safely over the internet. You <em>should</em> always force browser to use HTTPS when you're transferring sensitive information such as user authentication, account information, or credit card information.</p> <p>Note that if you are really concerned about your application security, you might consider using <code>config.force_ssl</code> in your config file instead. That will ensure all the data transferred via HTTPS protocol and prevent user from getting session hijacked when accessing the site under unsecured HTTP protocol.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ACTION_OPTIONS\">ACTION_OPTIONS </dt>\n\n<dt id=\"REDIRECT_OPTIONS\">REDIRECT_OPTIONS </dt>\n\n<dt id=\"URL_OPTIONS\">URL_OPTIONS </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-force_ssl_redirect\"> <span class=\"method-name\">force_ssl_redirect</span><span class=\"method-args\">(host_or_options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Redirect the existing request to use the HTTPS protocol.</p> <h4 id=\"method-i-force_ssl_redirect-label-Parameters\"><a href=\"parameters\">Parameters</a></h4> <ul><li> <p><code>host_or_options</code> - Either a host name or any of the url &amp; redirect options</p> <pre>available to the &lt;tt&gt;force_ssl&lt;/tt&gt; method.</pre> </li></ul> <div class=\"method-source-code\" id=\"force_ssl_redirect-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/force_ssl.rb, line 76\ndef force_ssl_redirect(host_or_options = nil)\n  unless request.ssl?\n    options = {\n      :protocol =&gt; 'https://',\n      :host     =&gt; request.host,\n      :path     =&gt; request.fullpath,\n      :status   =&gt; :moved_permanently\n    }\n\n    if host_or_options.is_a?(Hash)\n      options.merge!(host_or_options)\n    elsif host_or_options\n      options[:host] = host_or_options\n    end\n\n    secure_url = ActionDispatch::Http::URL.url_for(options.slice(*URL_OPTIONS))\n    flash.keep if respond_to?(:flash)\n    redirect_to secure_url, options.slice(*REDIRECT_OPTIONS)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/forcessl/classmethods":"<h1 id=\"module-ActionController::ForceSSL::ClassMethods\" class=\"module\"> module ActionController::ForceSSL::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-force_ssl\"> <span class=\"method-name\">force_ssl</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Force the request to this particular controller or specified actions to be under HTTPS protocol.</p> <p>If you need to disable this for any reason (e.g. development) then you can use an <code>:if</code> or <code>:unless</code> condition.</p> <pre class=\"ruby\">class AccountsController &lt; ApplicationController\n  force_ssl if: :ssl_configured?\n\n  def ssl_configured?\n    !Rails.env.development?\n  end\nend\n</pre> <h4 id=\"method-i-force_ssl-label-URL+Options\">URL Options</h4> <p>You can pass any of the following options to affect the redirect url</p> <ul>\n<li> <p><code>host</code> - Redirect to a different host name</p> </li>\n<li> <p><code>subdomain</code> - Redirect to a different subdomain</p> </li>\n<li> <p><code>domain</code> - Redirect to a different domain</p> </li>\n<li> <p><code>port</code> - Redirect to a non-standard port</p> </li>\n<li> <p><code>path</code> - Redirect to a different path</p> </li>\n</ul> <h4 id=\"method-i-force_ssl-label-Redirect+Options\">Redirect Options</h4> <p>You can pass any of the following options to affect the redirect status and response</p> <ul>\n<li> <p><code>status</code> - Redirect with a custom status (default is 301 Moved Permanently)</p> </li>\n<li> <p><code>flash</code> - Set a flash message when redirecting</p> </li>\n<li> <p><code>alert</code> - Set an alert message when redirecting</p> </li>\n<li> <p><code>notice</code> - Set a notice message when redirecting</p> </li>\n</ul> <h4 id=\"method-i-force_ssl-label-Action+Options\">Action Options</h4> <p>You can pass any of the following options to affect the before_action callback</p> <ul>\n<li> <p><code>only</code> - The callback should be run only for this action</p> </li>\n<li> <p><code>except</code> - The callback should be run for all actions except this action</p> </li>\n<li> <p><code>if</code> - A symbol naming an instance method or a proc; the callback</p> <pre>will be called only when it returns a true value.</pre> </li>\n<li> <p><code>unless</code> - A symbol naming an instance method or a proc; the callback</p> <pre>will be called only when it returns a false value.</pre> </li>\n</ul> <div class=\"method-source-code\" id=\"force_ssl-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/force_ssl.rb, line 62\ndef force_ssl(options = {})\n  action_options = options.slice(*ACTION_OPTIONS)\n  redirect_options = options.except(*ACTION_OPTIONS)\n  before_action(action_options) do\n    force_ssl_redirect(redirect_options)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/head":"<h1 id=\"module-ActionController::Head\" class=\"module\"> module ActionController::Head </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-head\"> <span class=\"method-name\">head</span><span class=\"method-args\">(status, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a response that has no content (merely headers). The options argument is interpreted to be a hash of header names and values. This allows you to easily return a response that consists only of significant headers:</p> <pre class=\"ruby\">head :created, location: person_path(@person)\n\nhead :created, location: @person\n</pre> <p>It can also be used to return exceptional conditions:</p> <pre class=\"ruby\">return head(:method_not_allowed) unless request.post?\nreturn head(:bad_request) unless valid_request?\nrender\n</pre> <p>See Rack::Utils::SYMBOL_TO_STATUS_CODE for a full list of valid <code>status</code> symbols.</p> <div class=\"method-source-code\" id=\"head-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/head.rb, line 19\ndef head(status, options = {})\n  options, status = status, nil if status.is_a?(Hash)\n  status ||= options.delete(:status) || :ok\n  location = options.delete(:location)\n  content_type = options.delete(:content_type)\n\n  options.each do |key, value|\n    headers[key.to_s.dasherize.split('-').each { |v| v[0] = v[0].chr.upcase }.join('-')] = value.to_s\n  end\n\n  self.status = status\n  self.location = url_for(location) if location\n\n  self.response_body = \"\"\n\n  if include_content?(self.response_code)\n    self.content_type = content_type || (Mime[formats.first] if formats)\n    self.response.charset = false if self.response\n  else\n    headers.delete('Content-Type')\n    headers.delete('Content-Length')\n  end\n  \n  true\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/helpers":"<h1 id=\"module-ActionController::Helpers\" class=\"module\"> module ActionController::Helpers </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../abstractcontroller/helpers\">AbstractController::Helpers</a></dd>\n</dl> <section class=\"description\"> <p>The Rails framework provides a large number of helpers for working with assets, dates, forms, numbers and model objects, to name a few. These helpers are available to all templates by default.</p> <p>In addition to using the standard template helpers provided, creating custom helpers to extract complicated logic or reusable functionality is strongly encouraged. By default, each controller will include all helpers. These helpers are only accessible on the controller through <code>.helpers</code></p> <p>In previous versions of Rails the controller will include a helper whose name matches that of the controller, e.g., <code>MyController</code> will automatically include <code>MyHelper</code>. To return old behavior set <code>config.action_controller.include_all_helpers</code> to <code>false</code>.</p> <p>Additional helpers can be specified using the <code>helper</code> class method in <a href=\"base\">ActionController::Base</a> or any controller which inherits from it.</p> <p>The <code>to_s</code> method from the Time class can be wrapped in a helper method to display a custom message if a Time object is blank:</p> <pre class=\"ruby\">module FormattedTimeHelper\n  def format_time(time, format=:long, blank_message=\"&amp;nbsp;\")\n    time.blank? ? blank_message : time.to_s(format)\n  end\nend\n</pre> <p>FormattedTimeHelper can now be included in a controller, using the <code>helper</code> class method:</p> <pre class=\"ruby\">class EventsController &lt; ActionController::Base\n  helper FormattedTimeHelper\n  def index\n    @events = Event.all\n  end\nend\n</pre> <p>Then, in any view rendered by <code>EventController</code>, the <code>format_time</code> method can be called:</p> <pre>&lt;% @events.each do |event| -%&gt;\n  &lt;p&gt;\n    &lt;%= format_time(event.time, :short, \"N/A\") %&gt; | &lt;%= event.name %&gt;\n  &lt;/p&gt;\n&lt;% end -%&gt;</pre> <p>Finally, assuming we have two event instances, one which has a time and one which does not, the output might look like this:</p> <pre>23 Aug 11:30 | Carolina Railhawks Soccer Match\nN/A | Carolina Railhaws Training Workshop</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-helpers_path\"> <span class=\"method-name\">helpers_path</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/helpers/classmethods":"<h1 id=\"module-ActionController::Helpers::ClassMethods\" class=\"module\"> module ActionController::Helpers::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-all_helpers_from_path\"> <span class=\"method-name\">all_helpers_from_path</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"all_helpers_from_path-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/helpers.rb, line 96\ndef all_helpers_from_path(path)\n  helpers = Array(path).flat_map do |_path|\n    extract = /^#{Regexp.quote(_path.to_s)}\\/?(.*)_helper.rb$/\n    names = Dir[\"#{_path}/**/*_helper.rb\"].map { |file| file.sub(extract, '\\1') }\n    names.sort!\n  end\n  helpers.uniq!\n  helpers\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-helper_attr\"> <span class=\"method-name\">helper_attr</span><span class=\"method-args\">(*attrs)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declares helper accessors for controller attributes. For example, the following adds new <code>name</code> and <code>name=</code> instance methods to a controller and makes them available to the view:</p> <pre class=\"ruby\">attr_accessor :name\nhelper_attr :name\n</pre> <h4 id=\"method-i-helper_attr-label-Parameters\"><a href=\"../parameters\">Parameters</a></h4> <ul><li> <p><code>attrs</code> - Names of attributes to be converted into helpers.</p> </li></ul> <div class=\"method-source-code\" id=\"helper_attr-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/helpers.rb, line 70\ndef helper_attr(*attrs)\n  attrs.flatten.each { |attr| helper_method(attr, \"#{attr}=\") }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-helpers\"> <span class=\"method-name\">helpers</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Provides a proxy to access helpers methods from outside the view.</p> <div class=\"method-source-code\" id=\"helpers-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/helpers.rb, line 75\ndef helpers\n  @helper_proxy ||= begin \n    proxy = ActionView::Base.new\n    proxy.config = config.inheritable_copy\n    proxy.extend(_helpers)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-modules_for_helpers\"> <span class=\"method-name\">modules_for_helpers</span><span class=\"method-args\">(args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Overwrite <a href=\"classmethods#method-i-modules_for_helpers\">#modules_for_helpers</a> to accept :all as argument, which loads all helpers in helpers_path.</p> <h4 id=\"method-i-modules_for_helpers-label-Parameters\"><a href=\"../parameters\">Parameters</a></h4> <ul><li> <p><code>args</code> - A list of helpers</p> </li></ul> <h4 id=\"method-i-modules_for_helpers-label-Returns\">Returns</h4> <ul><li> <p><code>array</code> - A normalized list of modules for the list of helpers provided.</p> </li></ul> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"modules_for_helpers-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/helpers.rb, line 91\ndef modules_for_helpers(args)\n  args += all_application_helpers if args.delete(:all)\n  super(args)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/hideactions":"<h1 id=\"module-ActionController::HideActions\" class=\"module\"> module ActionController::HideActions </h1> <section class=\"description\"> <p>Adds the ability to prevent public methods on a controller to be called as actions.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/hideactions/classmethods":"<h1 id=\"module-ActionController::HideActions::ClassMethods\" class=\"module\"> module ActionController::HideActions::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-action_methods\"> <span class=\"method-name\">action_methods</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Overrides <a href=\"../../abstractcontroller/base#method-i-action_methods\">AbstractController::Base#action_methods</a> to remove any methods that are listed as hidden methods.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"action_methods-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/hide_actions.rb, line 35\ndef action_methods\n  @action_methods ||= Set.new(super.reject { |name| hidden_actions.include?(name) }).freeze\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-hide_action\"> <span class=\"method-name\">hide_action</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets all of the actions passed in as hidden actions.</p> <h4 id=\"method-i-hide_action-label-Parameters\"><a href=\"../parameters\">Parameters</a></h4> <ul><li> <p><code>args</code> - A list of actions</p> </li></ul> <div class=\"method-source-code\" id=\"hide_action-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/hide_actions.rb, line 25\ndef hide_action(*args)\n  self.hidden_actions = hidden_actions.dup.merge(args.map(&amp;:to_s)).freeze\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-visible_action-3F\"> <span class=\"method-name\">visible_action?</span><span class=\"method-args\">(action_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"visible_action-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/hide_actions.rb, line 29\ndef visible_action?(action_name)\n  not hidden_actions.include?(action_name)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/httpauthentication":"<h1 id=\"module-ActionController::HttpAuthentication\" class=\"module\"> module ActionController::HttpAuthentication </h1> <section class=\"description\"> <p>Makes it dead easy to do HTTP <a href=\"httpauthentication/basic\">Basic</a>, <a href=\"httpauthentication/digest\">Digest</a> and <a href=\"httpauthentication/token\">Token</a> authentication.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/httpauthentication/basic":"<h1 id=\"module-ActionController::HttpAuthentication::Basic\" class=\"module\"> module ActionController::HttpAuthentication::Basic </h1> <section class=\"description\"> <p>Makes it dead easy to do HTTP Basic authentication.</p> <h3 id=\"module-ActionController::HttpAuthentication::Basic-label-Simple+Basic+example\">Simple Basic example</h3> <pre class=\"ruby\"> class PostsController &lt; ApplicationController\n   http_basic_authenticate_with name: \"dhh\", password: \"secret\", except: :index\n\n   def index\n     render plain: \"Everyone can see me!\"\n   end\n\n   def edit\n     render plain: \"I'm only accessible if you know the password\"\n   end\nend\n</pre> <h3 id=\"module-ActionController::HttpAuthentication::Basic-label-Advanced+Basic+example\">Advanced Basic example</h3> <p>Here is a more advanced Basic example where only Atom feeds and the XML API is protected by HTTP authentication, the regular HTML interface is protected by a session approach:</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  before_action :set_account, :authenticate\n\n  protected\n    def set_account\n      @account = Account.find_by(url_name: request.subdomains.first)\n    end\n\n    def authenticate\n      case request.format\n      when Mime::XML, Mime::ATOM\n        if user = authenticate_with_http_basic { |u, p| @account.users.authenticate(u, p) }\n          @current_user = user\n        else\n          request_http_basic_authentication\n        end\n      else\n        if session_authenticated?\n          @current_user = @account.users.find(session[:authenticated][:user_id])\n        else\n          redirect_to(login_url) and return false\n        end\n      end\n    end\nend\n</pre> <p>In your integration tests, you can do something like this:</p> <pre class=\"ruby\">def test_access_granted_from_xml\n  @request.env['HTTP_AUTHORIZATION'] = ActionController::HttpAuthentication::Basic.encode_credentials(users(:dhh).name, users(:dhh).password)\n  get \"/notes/1.xml\"\n\n  assert_equal 200, status\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-auth_param\"> <span class=\"method-name\">auth_param</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"auth_param-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 112\ndef auth_param(request)\n  request.authorization.split(' ', 2).second\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-auth_scheme\"> <span class=\"method-name\">auth_scheme</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"auth_scheme-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 108\ndef auth_scheme(request)\n  request.authorization.split(' ', 2).first\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authenticate\"> <span class=\"method-name\">authenticate</span><span class=\"method-args\">(request, &amp;login_procedure)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"authenticate-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 90\ndef authenticate(request, &amp;login_procedure)\n  if has_basic_credentials?(request)\n    login_procedure.call(*user_name_and_password(request))\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authentication_request\"> <span class=\"method-name\">authentication_request</span><span class=\"method-args\">(controller, realm)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"authentication_request-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 120\ndef authentication_request(controller, realm)\n  controller.headers[\"WWW-Authenticate\"] = %Q(Basic realm=\"#{realm.gsub(/\"/, \"\")}\")\n  controller.status = 401\n  controller.response_body = \"HTTP Basic: Access denied.\\n\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decode_credentials\"> <span class=\"method-name\">decode_credentials</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"decode_credentials-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 104\ndef decode_credentials(request)\n  ::Base64.decode64(auth_param(request) || '')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encode_credentials\"> <span class=\"method-name\">encode_credentials</span><span class=\"method-args\">(user_name, password)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"encode_credentials-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 116\ndef encode_credentials(user_name, password)\n  \"Basic #{::Base64.strict_encode64(\"#{user_name}:#{password}\")}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-has_basic_credentials-3F\"> <span class=\"method-name\">has_basic_credentials?</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"has_basic_credentials-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 96\ndef has_basic_credentials?(request)\n  request.authorization.present? &amp;&amp; (auth_scheme(request) == 'Basic')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-user_name_and_password\"> <span class=\"method-name\">user_name_and_password</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"user_name_and_password-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 100\ndef user_name_and_password(request)\n  decode_credentials(request).split(':', 2)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/httpauthentication/digest":"<h1 id=\"module-ActionController::HttpAuthentication::Digest\" class=\"module\"> module ActionController::HttpAuthentication::Digest </h1> <section class=\"description\"> <p>Makes it dead easy to do HTTP Digest authentication.</p> <h3 id=\"module-ActionController::HttpAuthentication::Digest-label-Simple+Digest+example\">Simple Digest example</h3> <pre class=\"ruby\">require 'digest/md5'\nclass PostsController &lt; ApplicationController\n  REALM = \"SuperSecret\"\n  USERS = {\"dhh\" =&gt; \"secret\", #plain text password\n           \"dap\" =&gt; Digest::MD5.hexdigest([\"dap\",REALM,\"secret\"].join(\":\"))}  #ha1 digest password\n\n  before_action :authenticate, except: [:index]\n\n  def index\n    render plain: \"Everyone can see me!\"\n  end\n\n  def edit\n    render plain: \"I'm only accessible if you know the password\"\n  end\n\n  private\n    def authenticate\n      authenticate_or_request_with_http_digest(REALM) do |username|\n        USERS[username]\n      end\n    end\nend\n</pre> <h3 id=\"module-ActionController::HttpAuthentication::Digest-label-Notes\">Notes</h3> <p>The <code>authenticate_or_request_with_http_digest</code> block must return the user's password or the ha1 digest hash so the framework can appropriately hash to check the user's credentials. Returning <code>nil</code> will cause authentication to fail.</p> <p>Storing the ha1 hash: MD5(username:realm:password), is better than storing a plain password. If the password file or database is compromised, the attacker would be able to use the ha1 hash to authenticate as the user at this <code>realm</code>, but would not have the user's password to try using at other sites.</p> <p>In rare instances, web servers or front proxies strip authorization headers before they reach your application. You can debug this situation by logging all environment variables, and check for HTTP_AUTHORIZATION, amongst others.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authenticate\"> <span class=\"method-name\">authenticate</span><span class=\"method-args\">(request, realm, &amp;password_procedure)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns false on a valid response, true otherwise</p> <div class=\"method-source-code\" id=\"authenticate-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 189\ndef authenticate(request, realm, &amp;password_procedure)\n  request.authorization &amp;&amp; validate_digest_response(request, realm, &amp;password_procedure)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authentication_header\"> <span class=\"method-name\">authentication_header</span><span class=\"method-args\">(controller, realm)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"authentication_header-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 247\ndef authentication_header(controller, realm)\n  secret_key = secret_token(controller.request)\n  nonce = self.nonce(secret_key)\n  opaque = opaque(secret_key)\n  controller.headers[\"WWW-Authenticate\"] = %Q(Digest realm=\"#{realm}\", qop=\"auth\", algorithm=MD5, nonce=\"#{nonce}\", opaque=\"#{opaque}\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authentication_request\"> <span class=\"method-name\">authentication_request</span><span class=\"method-args\">(controller, realm, message = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"authentication_request-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 254\ndef authentication_request(controller, realm, message = nil)\n  message ||= \"HTTP Digest: Access denied.\\n\"\n  authentication_header(controller, realm)\n  controller.status = 401\n  controller.response_body = message\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decode_credentials\"> <span class=\"method-name\">decode_credentials</span><span class=\"method-args\">(header)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"decode_credentials-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 240\ndef decode_credentials(header)\n  ActiveSupport::HashWithIndifferentAccess[header.to_s.gsub(/^Digest\\s+/, '').split(',').map do |pair|\n    key, value = pair.split('=', 2)\n    [key.strip, value.to_s.gsub(/^\"|\"$/,'').delete('\\')]\n  end]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decode_credentials_header\"> <span class=\"method-name\">decode_credentials_header</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"decode_credentials_header-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 236\ndef decode_credentials_header(request)\n  decode_credentials(request.authorization)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encode_credentials\"> <span class=\"method-name\">encode_credentials</span><span class=\"method-args\">(http_method, credentials, password, password_is_ha1)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"encode_credentials-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 231\ndef encode_credentials(http_method, credentials, password, password_is_ha1)\n  credentials[:response] = expected_response(http_method, credentials[:uri], credentials, password, password_is_ha1)\n  \"Digest \" + credentials.sort_by {|x| x[0].to_s }.map {|v| \"#{v[0]}='#{v[1]}'\" }.join(', ')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-expected_response\"> <span class=\"method-name\">expected_response</span><span class=\"method-args\">(http_method, uri, credentials, password, password_is_ha1=true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the expected response for a request of <code>http_method</code> to <code>uri</code> with the decoded <code>credentials</code> and the expected <code>password</code> Optional parameter <code>password_is_ha1</code> is set to <code>true</code> by default, since best practice is to store ha1 digest instead of a plain-text password.</p> <div class=\"method-source-code\" id=\"expected_response-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 221\ndef expected_response(http_method, uri, credentials, password, password_is_ha1=true)\n  ha1 = password_is_ha1 ? password : ha1(credentials, password)\n  ha2 = ::Digest::MD5.hexdigest([http_method.to_s.upcase, uri].join(':'))\n  ::Digest::MD5.hexdigest([ha1, credentials[:nonce], credentials[:nc], credentials[:cnonce], credentials[:qop], ha2].join(':'))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ha1\"> <span class=\"method-name\">ha1</span><span class=\"method-args\">(credentials, password)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"ha1-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 227\ndef ha1(credentials, password)\n  ::Digest::MD5.hexdigest([credentials[:username], credentials[:realm], password].join(':'))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-nonce\"> <span class=\"method-name\">nonce</span><span class=\"method-args\">(secret_key, time = Time.now)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Uses an MD5 digest based on time to generate a value to be used only once.</p> <p>A server-specified data string which should be uniquely generated each time a 401 response is made. It is recommended that this string be base64 or hexadecimal data. Specifically, since the string is passed in the header lines as a quoted string, the double-quote character is not allowed.</p> <p>The contents of the nonce are implementation dependent. The quality of the implementation depends on a good choice. A nonce might, for example, be constructed as the base 64 encoding of</p> <pre>time-stamp H(time-stamp \":\" ETag \":\" private-key)</pre> <p>where time-stamp is a server-generated time or other non-repeating value, ETag is the value of the HTTP ETag header associated with the requested entity, and private-key is data known only to the server. With a nonce of this form a server would recalculate the hash portion after receiving the client authentication header and reject the request if it did not match the nonce from that header or if the time-stamp value is not recent enough. In this way the server can limit the time of the nonce's validity. The inclusion of the ETag prevents a replay request for an updated version of the resource. (Note: including the IP address of the client in the nonce would appear to offer the server the ability to limit the reuse of the nonce to the same client that originally got it. However, that would break proxy farms, where requests from a single user often go through different proxies in the farm. Also, IP address spoofing is not that hard.)</p> <p>An implementation might choose not to accept a previously used nonce or a previously used digest, in order to protect against a replay attack. Or, an implementation might choose to use one-time nonces or digests for POST, PUT, or PATCH requests and a time-stamp for GET requests. For more details on the issues involved see Section 4 of this document.</p> <p>The nonce is opaque to the client. Composed of <a href=\"../../time\">Time</a>, and hash of <a href=\"../../time\">Time</a> with secret key from the Rails session secret generated upon creation of project. Ensures the time cannot be modified by client.</p> <div class=\"method-source-code\" id=\"nonce-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 299\ndef nonce(secret_key, time = Time.now)\n  t = time.to_i\n  hashed = [t, secret_key]\n  digest = ::Digest::MD5.hexdigest(hashed.join(\":\"))\n  ::Base64.strict_encode64(\"#{t}:#{digest}\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-opaque\"> <span class=\"method-name\">opaque</span><span class=\"method-args\">(secret_key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Opaque based on random generation - but changing each request?</p> <div class=\"method-source-code\" id=\"opaque-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 318\ndef opaque(secret_key)\n  ::Digest::MD5.hexdigest(secret_key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-secret_token\"> <span class=\"method-name\">secret_token</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"secret_token-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 261\ndef secret_token(request)\n  key_generator  = request.env[\"action_dispatch.key_generator\"]\n  http_auth_salt = request.env[\"action_dispatch.http_auth_salt\"]\n  key_generator.generate_key(http_auth_salt)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validate_digest_response\"> <span class=\"method-name\">validate_digest_response</span><span class=\"method-args\">(request, realm, &amp;password_procedure)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns false unless the request credentials response value matches the expected value. First try the password as a ha1 digest password. If this fails, then try it as a plain text password.</p> <div class=\"method-source-code\" id=\"validate_digest_response-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 196\ndef validate_digest_response(request, realm, &amp;password_procedure)\n  secret_key  = secret_token(request)\n  credentials = decode_credentials_header(request)\n  valid_nonce = validate_nonce(secret_key, request, credentials[:nonce])\n\n  if valid_nonce &amp;&amp; realm == credentials[:realm] &amp;&amp; opaque(secret_key) == credentials[:opaque]\n    password = password_procedure.call(credentials[:username])\n    return false unless password\n\n    method = request.env['rack.methodoverride.original_method'] || request.env['REQUEST_METHOD']\n    uri    = credentials[:uri]\n\n    [true, false].any? do |trailing_question_mark|\n      [true, false].any? do |password_is_ha1|\n        _uri = trailing_question_mark ? uri + \"?\" : uri\n        expected = expected_response(method, _uri, credentials, password, password_is_ha1)\n        expected == credentials[:response]\n      end\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validate_nonce\"> <span class=\"method-name\">validate_nonce</span><span class=\"method-args\">(secret_key, request, value, seconds_to_timeout=5*60)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Might want a shorter timeout depending on whether the request is a PATCH, PUT, or POST, and if client is browser or web service. Can be much shorter if the Stale directive is implemented. This would allow a user to use new nonce without prompting user again for their username and password.</p> <div class=\"method-source-code\" id=\"validate_nonce-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 311\ndef validate_nonce(secret_key, request, value, seconds_to_timeout=5*60)\n  return false if value.nil?\n  t = ::Base64.decode64(value).split(\":\").first.to_i\n  nonce(secret_key, t) == value &amp;&amp; (t - Time.now.to_i).abs &lt;= seconds_to_timeout\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/httpauthentication/digest/controllermethods":"<h1 id=\"module-ActionController::HttpAuthentication::Digest::ControllerMethods\" class=\"module\"> module ActionController::HttpAuthentication::Digest::ControllerMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authenticate_or_request_with_http_digest\"> <span class=\"method-name\">authenticate_or_request_with_http_digest</span><span class=\"method-args\">(realm = \"Application\", &amp;password_procedure)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"authenticate_or_request_with_http_digest-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 173\ndef authenticate_or_request_with_http_digest(realm = \"Application\", &amp;password_procedure)\n  authenticate_with_http_digest(realm, &amp;password_procedure) || request_http_digest_authentication(realm)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authenticate_with_http_digest\"> <span class=\"method-name\">authenticate_with_http_digest</span><span class=\"method-args\">(realm = \"Application\", &amp;password_procedure)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Authenticate with HTTP <a href=\"../digest\">Digest</a>, returns true or false</p> <div class=\"method-source-code\" id=\"authenticate_with_http_digest-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 178\ndef authenticate_with_http_digest(realm = \"Application\", &amp;password_procedure)\n  HttpAuthentication::Digest.authenticate(request, realm, &amp;password_procedure)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-request_http_digest_authentication\"> <span class=\"method-name\">request_http_digest_authentication</span><span class=\"method-args\">(realm = \"Application\", message = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Render output including the HTTP <a href=\"../digest\">Digest</a> authentication header</p> <div class=\"method-source-code\" id=\"request_http_digest_authentication-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 183\ndef request_http_digest_authentication(realm = \"Application\", message = nil)\n  HttpAuthentication::Digest.authentication_request(self, realm, message)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/httpauthentication/token":"<h1 id=\"module-ActionController::HttpAuthentication::Token\" class=\"module\"> module ActionController::HttpAuthentication::Token </h1> <section class=\"description\"> <p>Makes it dead easy to do HTTP <a href=\"token\">Token</a> authentication.</p> <p>Simple <a href=\"token\">Token</a> example:</p> <pre class=\"ruby\">class PostsController &lt; ApplicationController\n  TOKEN = \"secret\"\n\n  before_action :authenticate, except: [ :index ]\n\n  def index\n    render plain: \"Everyone can see me!\"\n  end\n\n  def edit\n    render plain: \"I'm only accessible if you know the password\"\n  end\n\n  private\n    def authenticate\n      authenticate_or_request_with_http_token do |token, options|\n        token == TOKEN\n      end\n    end\nend\n</pre> <p>Here is a more advanced <a href=\"token\">Token</a> example where only Atom feeds and the XML API is protected by HTTP token authentication, the regular HTML interface is protected by a session approach:</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  before_action :set_account, :authenticate\n\n  protected\n    def set_account\n      @account = Account.find_by(url_name: request.subdomains.first)\n    end\n\n    def authenticate\n      case request.format\n      when Mime::XML, Mime::ATOM\n        if user = authenticate_with_http_token { |t, o| @account.users.authenticate(t, o) }\n          @current_user = user\n        else\n          request_http_token_authentication\n        end\n      else\n        if session_authenticated?\n          @current_user = @account.users.find(session[:authenticated][:user_id])\n        else\n          redirect_to(login_url) and return false\n        end\n      end\n    end\nend\n</pre> <p>In your integration tests, you can do something like this:</p> <pre class=\"ruby\">def test_access_granted_from_xml\n  get(\n    \"/notes/1.xml\", nil,\n    'HTTP_AUTHORIZATION' =&gt; ActionController::HttpAuthentication::Token.encode_credentials(users(:dhh).token)\n  )\n\n  assert_equal 200, status\nend\n</pre> <p>On shared hosts, Apache sometimes doesn't pass authentication headers to FCGI instances. If your environment matches this description and you cannot authenticate, try this rule in your Apache setup:</p> <pre>RewriteRule ^(.*)$ dispatch.fcgi [E=X-HTTP_AUTHORIZATION:%{HTTP:Authorization},QSA,L]</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"AUTHN_PAIR_DELIMITERS\">AUTHN_PAIR_DELIMITERS </dt>\n\n<dt id=\"TOKEN_KEY\">TOKEN_KEY </dt>\n\n<dt id=\"TOKEN_REGEX\">TOKEN_REGEX </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authenticate\"> <span class=\"method-name\">authenticate</span><span class=\"method-args\">(controller, &amp;login_procedure)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If token Authorization header is present, call the login procedure with the present token and options.</p> <dl class=\"rdoc-list label-list\">\n<dt>controller </dt>\n<dd> <p><a href=\"../base\">ActionController::Base</a> instance for the current request.</p> </dd>\n<dt>login_procedure </dt>\n<dd> <p>Proc to call if a token is present. The Proc should take two arguments:</p> <pre>authenticate(controller) { |token, options| ... }</pre> </dd>\n</dl> <p>Returns the return value of <code>login_procedure</code> if a token is found. Returns <code>nil</code> if no token is found.</p> <div class=\"method-source-code\" id=\"authenticate-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 431\ndef authenticate(controller, &amp;login_procedure)\n  token, options = token_and_options(controller.request)\n  unless token.blank?\n    login_procedure.call(token, options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authentication_request\"> <span class=\"method-name\">authentication_request</span><span class=\"method-args\">(controller, realm)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets a WWW-Authenticate to let the client know a token is desired.</p> <p>controller - <a href=\"../base\">ActionController::Base</a> instance for the outgoing response. realm - <a href=\"../../string\">String</a> realm to use in the header.</p> <p>Returns nothing.</p> <div class=\"method-source-code\" id=\"authentication_request-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 501\ndef authentication_request(controller, realm)\n  controller.headers[\"WWW-Authenticate\"] = %Q(Token realm=\"#{realm.gsub(/\"/, \"\")}\")\n  controller.__send__ :render, :text =&gt; \"HTTP Token: Access denied.\\n\", :status =&gt; :unauthorized\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encode_credentials\"> <span class=\"method-name\">encode_credentials</span><span class=\"method-args\">(token, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Encodes the given token and options into an Authorization header value.</p> <p>token - <a href=\"../../string\">String</a> token. options - optional <a href=\"../../hash\">Hash</a> of the options.</p> <p>Returns <a href=\"../../string\">String</a>.</p> <div class=\"method-source-code\" id=\"encode_credentials-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 488\ndef encode_credentials(token, options = {})\n  values = [\"#{TOKEN_KEY}#{token.to_s.inspect}\"] + options.map do |key, value|\n    \"#{key}=#{value.to_s.inspect}\"\n  end\n  \"Token #{values * \", \"}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-params_array_from\"> <span class=\"method-name\">params_array_from</span><span class=\"method-args\">(raw_params)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Takes <a href=\"token#method-i-raw_params\">#raw_params</a> and turns it into an array of parameters</p> <div class=\"method-source-code\" id=\"params_array_from-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 460\ndef params_array_from(raw_params)\n  raw_params.map { |param| param.split /=(.+)?/ }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-raw_params\"> <span class=\"method-name\">raw_params</span><span class=\"method-args\">(auth)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method takes an authorization body and splits up the key-value pairs by the standardized <code>:</code>, <code>;</code>, or <code>\\t</code> delimiters defined in <code>AUTHN_PAIR_DELIMITERS</code>.</p> <div class=\"method-source-code\" id=\"raw_params-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 472\ndef raw_params(auth)\n  _raw_params = auth.sub(TOKEN_REGEX, '').split(/\\s*#{AUTHN_PAIR_DELIMITERS}\\s*/)\n\n  if !(_raw_params.first =~ %r{\\A#{TOKEN_KEY}})\n    _raw_params[0] = \"#{TOKEN_KEY}#{_raw_params.first}\"\n  end\n\n  _raw_params\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rewrite_param_values\"> <span class=\"method-name\">rewrite_param_values</span><span class=\"method-args\">(array_params)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This removes the <code>\"</code> characters wrapping the value.</p> <div class=\"method-source-code\" id=\"rewrite_param_values-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 465\ndef rewrite_param_values(array_params)\n  array_params.each { |param| (param[1] || \"\").gsub! /^\"|\"$/, '' }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-token_and_options\"> <span class=\"method-name\">token_and_options</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parses the token and options out of the token authorization header. If the header looks like this:</p> <pre>Authorization: Token token=\"abc\", nonce=\"def\"</pre> <p>Then the returned token is “abc”, and the options is {nonce: “def”}</p> <p>request - <a href=\"../../actiondispatch/request\">ActionDispatch::Request</a> instance with the current headers.</p> <p>Returns an <a href=\"../../array\">Array</a> of [String, Hash] if a token is present. Returns nil if no token is found.</p> <div class=\"method-source-code\" id=\"token_and_options-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 447\ndef token_and_options(request)\n  authorization_request = request.authorization.to_s\n  if authorization_request[TOKEN_REGEX]\n    params = token_params_from authorization_request\n    [params.shift[1], Hash[params].with_indifferent_access]\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-token_params_from\"> <span class=\"method-name\">token_params_from</span><span class=\"method-args\">(auth)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"token_params_from-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/http_authentication.rb, line 455\ndef token_params_from(auth)\n  rewrite_param_values params_array_from raw_params auth\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/live":"<h1 id=\"module-ActionController::Live\" class=\"module\"> module ActionController::Live </h1> <section class=\"description\"> <p>Mix this module in to your controller, and all actions in that controller will be able to stream data to the client as it's written.</p> <pre class=\"ruby\">class MyController &lt; ActionController::Base\n  include ActionController::Live\n\n  def stream\n    response.headers['Content-Type'] = 'text/event-stream'\n    100.times {\n      response.stream.write \"hello world\\n\"\n      sleep 1\n    }\n  ensure\n    response.stream.close\n  end\nend\n</pre> <p>There are a few caveats with this use. You <strong>cannot</strong> write headers after the response has been committed (Response#committed? will return truthy). Calling <code>write</code> or <code>close</code> on the response stream will cause the response object to be committed. Make sure all headers are set before calling write or close on your stream.</p> <p>You <strong>must</strong> call close on your stream when you're finished, otherwise the socket may be left open forever.</p> <p>The final caveat is that your actions are executed in a separate thread than the main thread. Make sure your actions are thread safe, and this shouldn't be a problem (don't share state across threads, etc).</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-log_error\"> <span class=\"method-name\">log_error</span><span class=\"method-args\">(exception)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"log_error-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/live.rb, line 302\ndef log_error(exception)\n  logger = ActionController::Base.logger\n  return unless logger\n\n  logger.fatal do\n    message = \"\\n#{exception.class} (#{exception.message}):\\n\"\n    message &lt;&lt; exception.annoted_source_code.to_s if exception.respond_to?(:annoted_source_code)\n    message &lt;&lt; \"  \" &lt;&lt; exception.backtrace.join(\"\\n  \")\n    \"#{message}\\n\\n\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-process\"> <span class=\"method-name\">process</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"process-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/live.rb, line 261\ndef process(name)\n  t1 = Thread.current\n  locals = t1.keys.map { |key| [key, t1[key]] }\n\n  error = nil\n  # This processes the action in a child thread. It lets us return the\n  # response code and headers back up the rack stack, and still process\n  # the body in parallel with sending data to the client\n  Thread.new {\n    t2 = Thread.current\n    t2.abort_on_exception = true\n\n    # Since we're processing the view in a different thread, copy the\n    # thread locals from the main thread to the child thread. :'(\n    locals.each { |k,v| t2[k] = v }\n\n    begin\n      super(name)\n    rescue =&gt; e\n      if @_response.committed?\n        begin\n          @_response.stream.write(ActionView::Base.streaming_completion_on_exception) if request.format == :html\n          @_response.stream.call_on_error\n        rescue =&gt; exception\n          log_error(exception)\n        ensure\n          log_error(e)\n          @_response.stream.close\n        end\n      else\n        error = e\n      end\n    ensure\n      @_response.commit!\n    end\n  }\n\n  @_response.await_commit\n  raise error if error\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-response_body-3D\"> <span class=\"method-name\">response_body=</span><span class=\"method-args\">(body)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"response_body-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/live.rb, line 314\ndef response_body=(body)\n  super\n  response.close if response\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_response-21\"> <span class=\"method-name\">set_response!</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"set_response-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/live.rb, line 319\ndef set_response!(request)\n  if request.env[\"HTTP_VERSION\"] == \"HTTP/1.0\"\n    super\n  else\n    @_response         = Live::Response.new\n    @_response.request = request\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/live/sse":"<h1 id=\"class-ActionController::Live::SSE\" class=\"class\"> class ActionController::Live::SSE </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>This class provides the ability to write an <a href=\"sse\">SSE</a> (Server Sent Event) to an IO stream. The class is initialized with a stream and can be used to either write a JSON string or an object which can be converted to JSON.</p> <p>Writing an object will convert it into standard <a href=\"sse\">SSE</a> format with whatever options you have configured. You may choose to set the following options:</p> <pre>1) Event. If specified, an event with this name will be dispatched on\nthe browser.\n2) Retry. The reconnection time in milliseconds used when attempting\nto send the event.\n3) Id. If the connection dies while sending an SSE to the browser, then\nthe server will receive a +Last-Event-ID+ header with value equal to +id+.</pre> <p>After setting an option in the constructor of the <a href=\"sse\">SSE</a> object, all future SSEs sent across the stream will use those options unless overridden.</p> <p>Example Usage:</p> <pre class=\"ruby\">class MyController &lt; ActionController::Base\n  include ActionController::Live\n\n  def index\n    response.headers['Content-Type'] = 'text/event-stream'\n    sse = SSE.new(response.stream, retry: 300, event: \"event-name\")\n    sse.write({ name: 'John'})\n    sse.write({ name: 'John'}, id: 10)\n    sse.write({ name: 'John'}, id: 10, event: \"other-event\")\n    sse.write({ name: 'John'}, id: 10, event: \"other-event\", retry: 500)\n  ensure\n    sse.close\n  end\nend\n</pre> <p>Note: SSEs are not currently supported by IE. However, they are supported by Chrome, Firefox, Opera, and Safari.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"WHITELISTED_OPTIONS\">WHITELISTED_OPTIONS </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(stream, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/live.rb, line 76\ndef initialize(stream, options = {})\n  @stream = stream\n  @options = options\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-close\"> <span class=\"method-name\">close</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"close-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/live.rb, line 81\ndef close\n  @stream.close\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write\"> <span class=\"method-name\">write</span><span class=\"method-args\">(object, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"write-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/live.rb, line 85\ndef write(object, options = {})\n  case object\n  when String\n    perform_write(object, options)\n  else\n    perform_write(ActiveSupport::JSON.encode(object), options)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/metal":"<h1 id=\"class-ActionController::Metal\" class=\"class\"> class ActionController::Metal </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../abstractcontroller/base\">AbstractController::Base</a></dd>\n</dl> <section class=\"description\"> <p><code>ActionController::Metal</code> is the simplest possible controller, providing a valid <a href=\"../rack\">Rack</a> interface without the additional niceties provided by <code>ActionController::Base</code>.</p> <p>A sample metal controller might look like this:</p> <pre class=\"ruby\">class HelloController &lt; ActionController::Metal\n  def index\n    self.response_body = \"Hello World!\"\n  end\nend\n</pre> <p>And then to route requests to your metal controller, you would add something like this to <code>config/routes.rb</code>:</p> <pre class=\"ruby\">get 'hello', to: HelloController.action(:index)\n</pre> <p>The <code>action</code> method returns a valid <a href=\"../rack\">Rack</a> application for the Rails router to dispatch to.</p> <h2 id=\"class-ActionController::Metal-label-Rendering+Helpers\"> <a href=\"helpers\">Helpers</a>\n</h2> <p><code>ActionController::Metal</code> by default provides no utilities for rendering views, partials, or other responses aside from explicitly calling of <code>response_body=</code>, <code>content_type=</code>, and <code>status=</code>. To add the render helpers you're used to having in a normal controller, you can do the following:</p> <pre class=\"ruby\">class HelloController &lt; ActionController::Metal\n  include AbstractController::Rendering\n  include ActionView::Layouts\n  append_view_path \"#{Rails.root}/app/views\"\n\n  def index\n    render \"hello/index\"\n  end\nend\n</pre> <h2 id=\"class-ActionController::Metal-label-Redirection+Helpers\">Redirection <a href=\"helpers\">Helpers</a>\n</h2> <p>To add redirection helpers to your metal controller, do the following:</p> <pre class=\"ruby\">class HelloController &lt; ActionController::Metal\n  include ActionController::Redirecting\n  include Rails.application.routes.url_helpers\n\n  def index\n    redirect_to root_url\n  end\nend\n</pre> <h2 id=\"class-ActionController::Metal-label-Other+Helpers\">Other <a href=\"helpers\">Helpers</a>\n</h2> <p>You can refer to the modules included in <code>ActionController::Base</code> to see other features you can bring into your metal controller.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-action\"> <span class=\"method-name\">action</span><span class=\"method-args\">(name, klass = ActionDispatch::Request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../rack\">Rack</a> endpoint for the given action name.</p> <div class=\"method-source-code\" id=\"action-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 231\ndef self.action(name, klass = ActionDispatch::Request)\n  if middleware_stack.any?\n    middleware_stack.build(name) do |env|\n      new.dispatch(name, klass.new(env))\n    end\n  else\n    lambda { |env| new.dispatch(name, klass.new(env)) }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Makes the controller a <a href=\"../rack\">Rack</a> endpoint that runs the action in the given <code>env</code>'s <code>action_dispatch.request.path_parameters</code> key.</p> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 225\ndef self.call(env)\n  req = ActionDispatch::Request.new env\n  action(req.path_parameters[:action]).call(env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-controller_name\"> <span class=\"method-name\">controller_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the last part of the controller's name, underscored, without the ending <code>Controller</code>. For instance, PostsController returns <code>posts</code>. Namespaces are left out, so Admin::PostsController returns <code>posts</code> as well.</p> <h4 id=\"method-c-controller_name-label-Returns\">Returns</h4> <ul><li> <p><code>string</code></p> </li></ul> <div class=\"method-source-code\" id=\"controller_name-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 113\ndef self.controller_name\n  @controller_name ||= name.demodulize.sub(/Controller$/, '').underscore\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-middleware\"> <span class=\"method-name\">middleware</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Alias for <code>middleware_stack</code>.</p> <div class=\"method-source-code\" id=\"middleware-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 219\ndef self.middleware\n  middleware_stack\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 131\ndef initialize\n  @_headers = {\"Content-Type\" =&gt; \"text/html\"}\n  @_status = 200\n  @_request = nil\n  @_response = nil\n  @_routes = nil\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-use\"> <span class=\"method-name\">use</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Pushes the given <a href=\"../rack\">Rack</a> middleware and its arguments to the bottom of the middleware stack.</p> <div class=\"method-source-code\" id=\"use-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 214\ndef self.use(*args, &amp;block)\n  middleware_stack.use(*args, &amp;block)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_type\"> <span class=\"method-name\">content_type</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"content_type-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 156\ndef content_type\n  headers[\"Content-Type\"]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_type-3D\"> <span class=\"method-name\">content_type=</span><span class=\"method-args\">(type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Basic implementations for <a href=\"metal#method-i-content_type\">#content_type</a>=, location=, and headers are provided to reduce the dependency on the <a href=\"rackdelegation\">RackDelegation</a> module in Renderer and Redirector.</p> <div class=\"method-source-code\" id=\"content_type-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 152\ndef content_type=(type)\n  headers[\"Content-Type\"] = type.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-controller_name\"> <span class=\"method-name\">controller_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delegates to the class' <code>controller_name</code></p> <div class=\"method-source-code\" id=\"controller_name-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 118\ndef controller_name\n  self.class.controller_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-env\"> <span class=\"method-name\">env</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"env-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 103\ndef env\n  @_env ||= {}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-location\"> <span class=\"method-name\">location</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"location-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 160\ndef location\n  headers[\"Location\"]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-location-3D\"> <span class=\"method-name\">location=</span><span class=\"method-args\">(url)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"location-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 164\ndef location=(url)\n  headers[\"Location\"] = url\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-params\"> <span class=\"method-name\">params</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"params-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 140\ndef params\n  @_params ||= request.parameters\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-params-3D\"> <span class=\"method-name\">params=</span><span class=\"method-args\">(val)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"params-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 144\ndef params=(val)\n  @_params = val\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-performed-3F\"> <span class=\"method-name\">performed?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Tests if render or redirect has already happened.</p> <div class=\"method-source-code\" id=\"performed-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 188\ndef performed?\n  response_body || (response &amp;&amp; response.committed?)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-response_body-3D\"> <span class=\"method-name\">response_body=</span><span class=\"method-args\">(body)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"response_body-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 182\ndef response_body=(body)\n  body = [body] unless body.nil? || body.respond_to?(:each)\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-response_code\"> <span class=\"method-name\">response_code</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"metal#method-i-status\">status</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-status\"> <span class=\"method-name\">status</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"status-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 173\ndef status\n  @_status\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"metal#method-i-response_code\">response_code</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-status-3D\"> <span class=\"method-name\">status=</span><span class=\"method-args\">(status)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"status-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 178\ndef status=(status)\n  @_status = Rack::Utils.status_code(status)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url_for\"> <span class=\"method-name\">url_for</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Basic <a href=\"metal#method-i-url_for\">#url_for</a> that can be overridden for more robust functionality</p> <div class=\"method-source-code\" id=\"url_for-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal.rb, line 169\ndef url_for(string)\n  string\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/mimeresponds":"<h1 id=\"module-ActionController::MimeResponds\" class=\"module\"> module ActionController::MimeResponds </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to\"> <span class=\"method-name\">respond_to</span><span class=\"method-args\">(*mimes) { |collector| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Without web-service support, an action which collects the data for displaying a list of people might look something like this:</p> <pre class=\"ruby\">def index\n  @people = Person.all\nend\n</pre> <p>Here's the same action, with web-service support baked in:</p> <pre class=\"ruby\">def index\n  @people = Person.all\n\n  respond_to do |format|\n    format.html\n    format.xml { render xml: @people }\n  end\nend\n</pre> <p>What that says is, “if the client wants HTML in response to this action, just respond as we would have before, but if the client wants XML, return them the list of people in XML format.” (Rails determines the desired response format from the HTTP Accept header submitted by the client.)</p> <p>Supposing you have an action that adds a new person, optionally creating their company (by name) if it does not already exist, without web-services, it might look like this:</p> <pre class=\"ruby\">def create\n  @company = Company.find_or_create_by(name: params[:company][:name])\n  @person  = @company.people.create(params[:person])\n\n  redirect_to(person_list_url)\nend\n</pre> <p>Here's the same action, with web-service support baked in:</p> <pre class=\"ruby\">def create\n  company  = params[:person].delete(:company)\n  @company = Company.find_or_create_by(name: company[:name])\n  @person  = @company.people.create(params[:person])\n\n  respond_to do |format|\n    format.html { redirect_to(person_list_url) }\n    format.js\n    format.xml  { render xml: @person.to_xml(include: @company) }\n  end\nend\n</pre> <p>If the client wants HTML, we just redirect them back to the person list. If they want JavaScript, then it is an Ajax request and we render the JavaScript template associated with this action. Lastly, if the client wants XML, we render the created person as XML, but with a twist: we also include the person's company in the rendered XML, so you get something like this:</p> <pre>&lt;person&gt;\n  &lt;id&gt;...&lt;/id&gt;\n  ...\n  &lt;company&gt;\n    &lt;id&gt;...&lt;/id&gt;\n    &lt;name&gt;...&lt;/name&gt;\n    ...\n  &lt;/company&gt;\n&lt;/person&gt;</pre> <p>Note, however, the extra bit at the top of that action:</p> <pre class=\"ruby\">company  = params[:person].delete(:company)\n@company = Company.find_or_create_by(name: company[:name])\n</pre> <p>This is because the incoming XML document (if a web-service request is in process) can only contain a single root-node. So, we have to rearrange things so that the request looks like this (url-encoded):</p> <pre>person[name]=...&amp;person[company][name]=...&amp;...</pre> <p>And, like this (xml-encoded):</p> <pre>&lt;person&gt;\n  &lt;name&gt;...&lt;/name&gt;\n  &lt;company&gt;\n    &lt;name&gt;...&lt;/name&gt;\n  &lt;/company&gt;\n&lt;/person&gt;</pre> <p>In other words, we make the request so that it operates on a single entity's person. Then, in the action, we extract the company data from the request, find or create the company, and then create the new person with the remaining data.</p> <p>Note that you can define your own XML parameter parser which would allow you to describe multiple entities in a single request (i.e., by wrapping them all in a single root node), but if you just go with the flow and accept Rails' defaults, life will be much easier.</p> <p>If you need to use a MIME type which isn't supported by default, you can register your own handlers in config/initializers/mime_types.rb as follows.</p> <pre class=\"ruby\">Mime::Type.register \"image/jpg\", :jpg\n</pre> <p>Respond to also allows you to specify a common block for different formats by using any:</p> <pre class=\"ruby\">def index\n  @people = Person.all\n\n  respond_to do |format|\n    format.html\n    format.any(:xml, :json) { render request.format.to_sym =&gt; @people }\n  end\nend\n</pre> <p>In the example above, if the format is xml, it will render:</p> <pre class=\"ruby\">render xml: @people\n</pre> <p>Or if the format is json:</p> <pre class=\"ruby\">render json: @people\n</pre> <p>Formats can have different variants.</p> <p>The request variant is a specialization of the request format, like <code>:tablet</code>, <code>:phone</code>, or <code>:desktop</code>.</p> <p>We often want to render different html/json/xml templates for phones, tablets, and desktop browsers. Variants make it easy.</p> <p>You can set the variant in a <code>before_action</code>:</p> <pre class=\"ruby\">request.variant = :tablet if request.user_agent =~ /iPad/\n</pre> <p>Respond to variants in the action just like you respond to formats:</p> <pre>respond_to do |format|\n  format.html do |variant|\n    variant.tablet # renders app/views/projects/show.html+tablet.erb\n    variant.phone { extra_setup; render ... }\n    variant.none  { special_setup } # executed only if there is no variant set\n  end\nend</pre> <p>Provide separate templates for each format and variant:</p> <pre class=\"ruby\">app/views/projects/show.html.erb\napp/views/projects/show.html+tablet.erb\napp/views/projects/show.html+phone.erb\n</pre> <p>When you're not sharing any code within the format, you can simplify defining variants using the inline syntax:</p> <pre class=\"ruby\">respond_to do |format|\n  format.js         { render \"trash\" }\n  format.html.phone { redirect_to progress_path }\n  format.html.none  { render \"trash\" }\nend\n</pre> <p>Variants also support common `any`/`all` block that formats have.</p> <p>It works for both inline:</p> <pre class=\"ruby\">respond_to do |format|\n  format.html.any   { render text: \"any\"   }\n  format.html.phone { render text: \"phone\" }\nend\n</pre> <p>and block syntax:</p> <pre class=\"ruby\">respond_to do |format|\n  format.html do |variant|\n    variant.any(:tablet, :phablet){ render text: \"any\" }\n    variant.phone { render text: \"phone\" }\n  end\nend\n</pre> <p>You can also set an array of variants:</p> <pre class=\"ruby\">request.variant = [:tablet, :phone]\n</pre> <p>which will work similarly to formats and MIME types negotiation. If there will be no :tablet variant declared, :phone variant will be picked:</p> <pre class=\"ruby\">respond_to do |format|\n  format.html.none\n  format.html.phone # this gets rendered\nend\n</pre> <p>Be sure to check the documentation of <code>ActionController::MimeResponds.respond_to</code> for more examples.</p> <div class=\"method-source-code\" id=\"respond_to-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/mime_responds.rb, line 206\ndef respond_to(*mimes)\n  raise ArgumentError, \"respond_to takes either types or a block, never both\" if mimes.any? &amp;&amp; block_given?\n\n  collector = Collector.new(mimes, request.variant)\n  yield collector if block_given?\n\n  if format = collector.negotiate_format(request)\n    _process_format(format)\n    response = collector.response\n    response ? response.call : render({})\n  else\n    raise ActionController::UnknownFormat\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_with\"> <span class=\"method-name\">respond_with</span><span class=\"method-args\">(*)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"respond_with-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/mime_responds.rb, line 17\ndef respond_with(*)\n  raise NoMethodError, \"The `respond_with' feature has been extracted \"          \"to the `responders` gem. Add it to your Gemfile to continue using \"          \"this feature:\\n\"          \"  gem 'responders', '~&gt; 2.0'\\n\"          \"Consult the Rails upgrade guide for details.\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/mimeresponds/collector":"<h1 id=\"class-ActionController::MimeResponds::Collector\" class=\"class\"> class ActionController::MimeResponds::Collector </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../../abstractcontroller/collector\">AbstractController::Collector</a></dd>\n</dl> <section class=\"description\"> <p>A container for responses available from the current controller for requests for different mime-types sent to a particular action.</p> <p>The public controller methods <code>respond_to</code> may be called with a block that is used to define responses to different mime-types, e.g. for <code>respond_to</code> :</p> <pre class=\"ruby\">respond_to do |format|\n  format.html\n  format.xml { render xml: @people }\nend\n</pre> <p>In this usage, the argument passed to the block (<code>format</code> above) is an instance of the <a href=\"collector\">ActionController::MimeResponds::Collector</a> class. This object serves as a container in which available responses can be stored by calling any of the dynamically generated, mime-type-specific methods such as <code>html</code>, <code>xml</code> etc on the <a href=\"collector\">Collector</a>. Each response is represented by a corresponding block if present.</p> <p>A subsequent call to <a href=\"collector#method-i-negotiate_format\">negotiate_format(request)</a> will enable the <a href=\"collector\">Collector</a> to determine which specific mime-type it should respond with for the current request, with this response then being accessible by calling <a href=\"collector#method-i-response\">response</a>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-format\"> <span class=\"method-name\">format</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(mimes, variant = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/mime_responds.rb, line 247\ndef initialize(mimes, variant = nil)\n  @responses = {}\n  @variant = variant\n\n  mimes.each { |mime| @responses[\"Mime::#{mime.upcase}\".constantize] = nil }\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-all\"> <span class=\"method-name\">all</span><span class=\"method-args\">(*args, &amp;block)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"collector#method-i-any\">any</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-any\"> <span class=\"method-name\">any</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"any-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/mime_responds.rb, line 254\ndef any(*args, &amp;block)\n  if args.any?\n    args.each { |type| send(type, &amp;block) }\n  else\n    custom(Mime::ALL, &amp;block)\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"collector#method-i-all\">all</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-custom\"> <span class=\"method-name\">custom</span><span class=\"method-args\">(mime_type, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"custom-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/mime_responds.rb, line 263\ndef custom(mime_type, &amp;block)\n  mime_type = Mime::Type.lookup(mime_type.to_s) unless mime_type.is_a?(Mime::Type)\n  @responses[mime_type] ||= if block_given?\n    block\n  else\n    VariantCollector.new(@variant)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-negotiate_format\"> <span class=\"method-name\">negotiate_format</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"negotiate_format-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/mime_responds.rb, line 285\ndef negotiate_format(request)\n  @format = request.negotiate_mime(@responses.keys)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-response\"> <span class=\"method-name\">response</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"response-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/mime_responds.rb, line 272\ndef response\n  response = @responses.fetch(format, @responses[Mime::ALL])\n  if response.is_a?(VariantCollector) # `format.html.phone` - variant inline syntax\n    response.variant\n  elsif response.nil? || response.arity == 0 # `format.html` - just a format, call its block\n    response\n  else # `format.html{ |variant| variant.phone }` - variant block syntax\n    variant_collector = VariantCollector.new(@variant)\n    response.call(variant_collector) # call format block with variants collector\n    variant_collector.variant\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/modelnaming":"<h1 id=\"module-ActionController::ModelNaming\" class=\"module\"> module ActionController::ModelNaming </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-convert_to_model\"> <span class=\"method-name\">convert_to_model</span><span class=\"method-args\">(object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts the given object to an <a href=\"../activemodel\">ActiveModel</a> compliant one.</p> <div class=\"method-source-code\" id=\"convert_to_model-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/model_naming.rb, line 4\ndef convert_to_model(object)\n  object.respond_to?(:to_model) ? object.to_model : object\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-model_name_from_record_or_class\"> <span class=\"method-name\">model_name_from_record_or_class</span><span class=\"method-args\">(record_or_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"model_name_from_record_or_class-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/model_naming.rb, line 8\ndef model_name_from_record_or_class(record_or_class)\n  convert_to_model(record_or_class).model_name\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/parametermissing":"<h1 id=\"class-ActionController::ParameterMissing\" class=\"class\"> class ActionController::ParameterMissing </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">KeyError</dd>\n</dl> <section class=\"description\"> <p>Raised when a required parameter is missing.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(a: {})\nparams.fetch(:b)\n# =&gt; ActionController::ParameterMissing: param not found: b\nparams.require(:a)\n# =&gt; ActionController::ParameterMissing: param not found: a\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/parameters":"<h1 id=\"class-ActionController::Parameters\" class=\"class\"> class ActionController::Parameters </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../activesupport/hashwithindifferentaccess\">ActiveSupport::HashWithIndifferentAccess</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActionController::Parameters-label-Action+Controller+Parameters\">Action Controller Parameters</h2> <p>Allows to choose which attributes should be whitelisted for mass updating and thus prevent accidentally exposing that which shouldn't be exposed. Provides two methods for this purpose: <a href=\"parameters#method-i-require\">require</a> and <a href=\"parameters#method-i-permit\">permit</a>. The former is used to mark parameters as required. The latter is used to set the parameter as permitted and limit which attributes should be allowed for mass updating.</p> <pre class=\"ruby\">params = ActionController::Parameters.new({\n  person: {\n    name: 'Francesco',\n    age:  22,\n    role: 'admin'\n  }\n})\n\npermitted = params.require(:person).permit(:name, :age)\npermitted            # =&gt; {\"name\"=&gt;\"Francesco\", \"age\"=&gt;22}\npermitted.class      # =&gt; ActionController::Parameters\npermitted.permitted? # =&gt; true\n\nPerson.first.update!(permitted)\n# =&gt; #&lt;Person id: 1, name: \"Francesco\", age: 22, role: \"user\"&gt;\n</pre> <p>It provides two options that controls the top-level behavior of new instances:</p> <ul>\n<li> <p><code>permit_all_parameters</code> - If it's <code>true</code>, all the parameters will be permitted by default. The default is <code>false</code>.</p> </li>\n<li> <p><code>action_on_unpermitted_parameters</code> - Allow to control the behavior when parameters that are not explicitly permitted are found. The values can be <code>:log</code> to write a message on the logger or <code>:raise</code> to raise <a href=\"unpermittedparameters\">ActionController::UnpermittedParameters</a> exception. The default value is <code>:log</code> in test and development environments, <code>false</code> otherwise.</p> </li>\n</ul> <p>Examples:</p> <pre class=\"ruby\">params = ActionController::Parameters.new\nparams.permitted? # =&gt; false\n\nActionController::Parameters.permit_all_parameters = true\n\nparams = ActionController::Parameters.new\nparams.permitted? # =&gt; true\n\nparams = ActionController::Parameters.new(a: \"123\", b: \"456\")\nparams.permit(:c)\n# =&gt; {}\n\nActionController::Parameters.action_on_unpermitted_parameters = :raise\n\nparams = ActionController::Parameters.new(a: \"123\", b: \"456\")\nparams.permit(:c)\n# =&gt; ActionController::UnpermittedParameters: found unpermitted keys: a, b\n</pre> <p>Please note that these options *are not thread-safe*. In a multi-threaded environment they should only be set once at boot-time and never mutated at runtime.</p> <p><code>ActionController::Parameters</code> inherits from <code>ActiveSupport::HashWithIndifferentAccess</code>, this means that you can fetch values using either <code>:key</code> or <code>\"key\"</code>.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(key: 'value')\nparams[:key]  # =&gt; \"value\"\nparams[\"key\"] # =&gt; \"value\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"EMPTY_ARRAY\">EMPTY_ARRAY </dt>\n\n<dt id=\"PERMITTED_SCALAR_TYPES\">PERMITTED_SCALAR_TYPES </dt>\n<dd>\n<p>This is a white list of permitted scalar types that includes the ones supported in XML and JSON requests.</p> <p>This list is in particular used to filter ordinary requests, <a href=\"../string\">String</a> goes as first element to quickly short-circuit the common case.</p> <p>If you modify this collection please update the API of <code>permit</code> above.</p> </dd>\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-const_missing\"> <span class=\"method-name\">const_missing</span><span class=\"method-args\">(const_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"const_missing-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 122\n    def self.const_missing(const_name)\n      super unless const_name == :NEVER_UNPERMITTED_PARAMS\n      ActiveSupport::Deprecation.warn(\"        `ActionController::Parameters::NEVER_UNPERMITTED_PARAMS` has been deprecated.\n        Use `ActionController::Parameters.always_permitted_parameters` instead.\n\".squish)\n\n      always_permitted_parameters\n    end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(attributes = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new instance of <code>ActionController::Parameters</code>. Also, sets the <code>permitted</code> attribute to the default value of <code>ActionController::Parameters.permit_all_parameters</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nparams = ActionController::Parameters.new(name: 'Francesco')\nparams.permitted?  # =&gt; false\nPerson.new(params) # =&gt; ActiveModel::ForbiddenAttributesError\n\nActionController::Parameters.permit_all_parameters = true\n\nparams = ActionController::Parameters.new(name: 'Francesco')\nparams.permitted?  # =&gt; true\nPerson.new(params) # =&gt; #&lt;Person id: nil, name: \"Francesco\"&gt;\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../activesupport/hashwithindifferentaccess#method-c-new\">ActiveSupport::HashWithIndifferentAccess.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 148\ndef initialize(attributes = nil)\n  super(attributes)\n  @permitted = self.class.permit_all_parameters\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a parameter for the given <code>key</code>. If not found, returns <code>nil</code>.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(person: { name: 'Francesco' })\nparams[:person] # =&gt; {\"name\"=&gt;\"Francesco\"}\nparams[:none]   # =&gt; nil\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../activesupport/hashwithindifferentaccess#method-c-5B-5D\">ActiveSupport::HashWithIndifferentAccess.[]</a> </div> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 350\ndef [](key)\n  convert_hashes_to_parameters(key, super)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-converted_arrays\"> <span class=\"method-name\">converted_arrays</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Attribute that keeps track of converted arrays, if any, to avoid double looping in the common use case permit + mass-assignment. Defined in a method to instantiate it only if needed.</p> <p><span>Testing</span> membership still loops, but it's going to be faster than our own loop that converts values. Also, we are not going to build a new array object per fetch.</p> <div class=\"method-source-code\" id=\"converted_arrays-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 197\ndef converted_arrays\n  @converted_arrays ||= Set.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(key, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes and returns a key-value pair from <code>Parameters</code> whose key is equal to key. If the key is not found, returns the default value. If the optional code block is given and the key is not found, pass in the key and return the result of block.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../activesupport/hashwithindifferentaccess#method-i-delete\">ActiveSupport::HashWithIndifferentAccess#delete</a> </div> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 420\ndef delete(key, &amp;block)\n  convert_hashes_to_parameters(key, super, false)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dup\"> <span class=\"method-name\">dup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an exact copy of the <code>ActionController::Parameters</code> instance. <code>permitted</code> state is kept on the duped object.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(a: 1)\nparams.permit!\nparams.permitted?        # =&gt; true\ncopy_params = params.dup # =&gt; {\"a\"=&gt;1}\ncopy_params.permitted?   # =&gt; true\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../activesupport/hashwithindifferentaccess#method-i-dup\">ActiveSupport::HashWithIndifferentAccess#dup</a> </div> <div class=\"method-source-code\" id=\"dup-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 437\ndef dup\n  super.tap do |duplicate|\n    duplicate.permitted = @permitted\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">(&amp;block)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"parameters#method-i-each_pair\">each_pair</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each_pair\"> <span class=\"method-name\">each_pair</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert all hashes in values into parameters, then yield each pair like the same way as <code>Hash#each_pair</code></p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"each_pair-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 180\ndef each_pair(&amp;block)\n  super do |key, value|\n    convert_hashes_to_parameters(key, value)\n  end\n\n  super\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"parameters#method-i-each\">each</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extract-21\"> <span class=\"method-name\">extract!</span><span class=\"method-args\">(*keys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes and returns the key/value pairs matching the given keys.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(a: 1, b: 2, c: 3)\nparams.extract!(:a, :b) # =&gt; {\"a\"=&gt;1, \"b\"=&gt;2}\nparams                  # =&gt; {\"c\"=&gt;3}\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../hash#method-i-extract-21\">Hash#extract!</a> </div> <div class=\"method-source-code\" id=\"extract-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 387\ndef extract!(*keys)\n  new_instance_with_inherited_permitted_status(super)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fetch\"> <span class=\"method-name\">fetch</span><span class=\"method-args\">(key, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a parameter for the given <code>key</code>. If the <code>key</code> can't be found, there are several options: With no other arguments, it will raise an <code>ActionController::ParameterMissing</code> error; if more arguments are given, then that will be returned; if a block is given, then that will be run and its result returned.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(person: { name: 'Francesco' })\nparams.fetch(:person)               # =&gt; {\"name\"=&gt;\"Francesco\"}\nparams.fetch(:none)                 # =&gt; ActionController::ParameterMissing: param not found: none\nparams.fetch(:none, 'Francesco')    # =&gt; \"Francesco\"\nparams.fetch(:none) { 'Francesco' } # =&gt; \"Francesco\"\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../activesupport/hashwithindifferentaccess#method-i-fetch\">ActiveSupport::HashWithIndifferentAccess#fetch</a> </div> <div class=\"method-source-code\" id=\"fetch-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 365\ndef fetch(key, *args)\n  convert_hashes_to_parameters(key, super, false)\nrescue KeyError\n  raise ActionController::ParameterMissing.new(key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-permit\"> <span class=\"method-name\">permit</span><span class=\"method-args\">(*filters)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <code>ActionController::Parameters</code> instance that includes only the given <code>filters</code> and sets the <code>permitted</code> attribute for the object to <code>true</code>. This is useful for limiting which attributes should be allowed for mass updating.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(user: { name: 'Francesco', age: 22, role: 'admin' })\npermitted = params.require(:user).permit(:name, :age)\npermitted.permitted?      # =&gt; true\npermitted.has_key?(:name) # =&gt; true\npermitted.has_key?(:age)  # =&gt; true\npermitted.has_key?(:role) # =&gt; false\n</pre> <p>Only permitted scalars pass the filter. For example, given</p> <pre class=\"ruby\">params.permit(:name)\n</pre> <p><code>:name</code> passes it is a key of <code>params</code> whose associated value is of type <code>String</code>, <code>Symbol</code>, <code>NilClass</code>, <code>Numeric</code>, <code>TrueClass</code>, <code>FalseClass</code>, <code>Date</code>, <code>Time</code>, <code>DateTime</code>, <code>StringIO</code>, <code>IO</code>, <code>ActionDispatch::Http::UploadedFile</code> or <code>Rack::Test::UploadedFile</code>. Otherwise, the key <code>:name</code> is filtered out.</p> <p>You may declare that the parameter should be an array of permitted scalars by mapping it to an empty array:</p> <pre class=\"ruby\">params = ActionController::Parameters.new(tags: ['rails', 'parameters'])\nparams.permit(tags: [])\n</pre> <p>You can also use <code>permit</code> on nested parameters, like:</p> <pre class=\"ruby\">params = ActionController::Parameters.new({\n  person: {\n    name: 'Francesco',\n    age:  22,\n    pets: [{\n      name: 'Purplish',\n      category: 'dogs'\n    }]\n  }\n})\n\npermitted = params.permit(person: [ :name, { pets: :name } ])\npermitted.permitted?                    # =&gt; true\npermitted[:person][:name]               # =&gt; \"Francesco\"\npermitted[:person][:age]                # =&gt; nil\npermitted[:person][:pets][0][:name]     # =&gt; \"Purplish\"\npermitted[:person][:pets][0][:category] # =&gt; nil\n</pre> <p>Note that if you use <code>permit</code> in a key that points to a hash, it won't allow all the hash. You also need to specify which attributes inside the hash should be whitelisted.</p> <pre class=\"ruby\">params = ActionController::Parameters.new({\n  person: {\n    contact: {\n      email: 'none@test.com',\n      phone: '555-1234'\n    }\n  }\n})\n\nparams.require(:person).permit(:contact)\n# =&gt; {}\n\nparams.require(:person).permit(contact: :phone)\n# =&gt; {\"contact\"=&gt;{\"phone\"=&gt;\"555-1234\"}}\n\nparams.require(:person).permit(contact: [ :email, :phone ])\n# =&gt; {\"contact\"=&gt;{\"email\"=&gt;\"none@test.com\", \"phone\"=&gt;\"555-1234\"}}\n</pre> <div class=\"method-source-code\" id=\"permit-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 327\ndef permit(*filters)\n  params = self.class.new\n\n  filters.flatten.each do |filter|\n    case filter\n    when Symbol, String\n      permitted_scalar_filter(params, filter)\n    when Hash then\n      hash_filter(params, filter)\n    end\n  end\n\n  unpermitted_parameters!(params) if self.class.action_on_unpermitted_parameters\n\n  params.permit!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-permit-21\"> <span class=\"method-name\">permit!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the <code>permitted</code> attribute to <code>true</code>. This can be used to pass mass assignment. Returns <code>self</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nparams = ActionController::Parameters.new(name: 'Francesco')\nparams.permitted?  # =&gt; false\nPerson.new(params) # =&gt; ActiveModel::ForbiddenAttributesError\nparams.permit!\nparams.permitted?  # =&gt; true\nPerson.new(params) # =&gt; #&lt;Person id: nil, name: \"Francesco\"&gt;\n</pre> <div class=\"method-source-code\" id=\"permit-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 223\ndef permit!\n  each_pair do |key, value|\n    Array.wrap(value).each do |v|\n      v.permit! if v.respond_to? :permit!\n    end\n  end\n\n  @permitted = true\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-permitted-3F\"> <span class=\"method-name\">permitted?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the parameter is permitted, <code>false</code> otherwise.</p> <pre class=\"ruby\">params = ActionController::Parameters.new\nparams.permitted? # =&gt; false\nparams.permit!\nparams.permitted? # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"permitted-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 207\ndef permitted?\n  @permitted\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-require\"> <span class=\"method-name\">require</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Ensures that a parameter is present. If it's present, returns the parameter at the given <code>key</code>, otherwise raises an <code>ActionController::ParameterMissing</code> error.</p> <pre class=\"ruby\">ActionController::Parameters.new(person: { name: 'Francesco' }).require(:person)\n# =&gt; {\"name\"=&gt;\"Francesco\"}\n\nActionController::Parameters.new(person: nil).require(:person)\n# =&gt; ActionController::ParameterMissing: param not found: person\n\nActionController::Parameters.new(person: {}).require(:person)\n# =&gt; ActionController::ParameterMissing: param not found: person\n</pre> <div class=\"method-source-code\" id=\"require-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 246\ndef require(key)\n  value = self[key]\n  if value.present? || value == false\n    value\n  else\n    raise ParameterMissing.new(key)\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"parameters#method-i-required\">required</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-required\"> <span class=\"method-name\">required</span><span class=\"method-args\">(key)</span> </div> <div class=\"method-description\"> <p>Alias of <a href=\"parameters#method-i-require\">require</a>.</p> </div> <div class=\"aliases\"> Alias for: <a href=\"parameters#method-i-require\">require</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select-21\"> <span class=\"method-name\">select!</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to Hash#keep_if, but returns nil if no changes were made.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"select-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 425\ndef select!(&amp;block)\n  convert_value_to_parameters(super)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-slice\"> <span class=\"method-name\">slice</span><span class=\"method-args\">(*keys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <code>ActionController::Parameters</code> instance that includes only the given <code>keys</code>. If the given <code>keys</code> don't exist, returns an empty hash.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(a: 1, b: 2, c: 3)\nparams.slice(:a, :b) # =&gt; {\"a\"=&gt;1, \"b\"=&gt;2}\nparams.slice(:d)     # =&gt; {}\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../hash#method-i-slice\">Hash#slice</a> </div> <div class=\"method-source-code\" id=\"slice-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 378\ndef slice(*keys)\n  new_instance_with_inherited_permitted_status(super)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_h\"> <span class=\"method-name\">to_h</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a safe <code>Hash</code> representation of this parameter with all unpermitted keys removed.</p> <pre class=\"ruby\">params = ActionController::Parameters.new({\n  name: 'Senjougahara Hitagi',\n  oddity: 'Heavy stone crab'\n})\nparams.to_h # =&gt; {}\n\nsafe_params = params.permit(:name)\nsafe_params.to_h # =&gt; {\"name\"=&gt;\"Senjougahara Hitagi\"}\n</pre> <div class=\"method-source-code\" id=\"to_h-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 164\ndef to_h\n  if permitted?\n    to_hash\n  else\n    slice(*self.class.always_permitted_parameters).permit!.to_h\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_unsafe_h\"> <span class=\"method-name\">to_unsafe_h</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an unsafe, unfiltered <code>Hash</code> representation of this parameter.</p> <div class=\"method-source-code\" id=\"to_unsafe_h-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 173\ndef to_unsafe_h\n  to_hash\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"parameters#method-i-to_unsafe_hash\">to_unsafe_hash</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_unsafe_hash\"> <span class=\"method-name\">to_unsafe_hash</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"parameters#method-i-to_unsafe_h\">to_unsafe_h</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transform_values\"> <span class=\"method-name\">transform_values</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <code>ActionController::Parameters</code> with the results of running <code>block</code> once for every value. The keys are unchanged.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(a: 1, b: 2, c: 3)\nparams.transform_values { |x| x * 2 }\n# =&gt; {\"a\"=&gt;2, \"b\"=&gt;4, \"c\"=&gt;6}\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../hash#method-i-transform_values\">Hash#transform_values</a> </div> <div class=\"method-source-code\" id=\"transform_values-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 397\ndef transform_values\n  if block_given?\n    new_instance_with_inherited_permitted_status(super)\n  else\n    super\n  end\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-permitted-3D\"> <span class=\"method-name\">permitted=</span><span class=\"method-args\">(new_permitted)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"permitted-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 444\ndef permitted=(new_permitted)\n  @permitted = new_permitted\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/paramswrapper":"<h1 id=\"module-ActionController::ParamsWrapper\" class=\"module\"> module ActionController::ParamsWrapper </h1> <section class=\"description\"> <p>Wraps the parameters hash into a nested hash. This will allow clients to submit POST requests without having to specify any root elements.</p> <p>This functionality is enabled in <code>config/initializers/wrap_parameters.rb</code> and can be customized. If you are upgrading to Rails 3.1, this file will need to be created for the functionality to be enabled.</p> <p>You could also turn it on per controller by setting the format array to a non-empty array:</p> <pre class=\"ruby\">class UsersController &lt; ApplicationController\n  wrap_parameters format: [:json, :xml]\nend\n</pre> <p>If you enable <code>ParamsWrapper</code> for <code>:json</code> format, instead of having to send JSON parameters like this:</p> <pre class=\"ruby\">{\"user\": {\"name\": \"Konata\"}}\n</pre> <p>You can send parameters like this:</p> <pre class=\"ruby\">{\"name\": \"Konata\"}\n</pre> <p>And it will be wrapped into a nested hash with the key name matching the controller's name. For example, if you're posting to <code>UsersController</code>, your new <code>params</code> hash will look like this:</p> <pre class=\"ruby\">{\"name\" =&gt; \"Konata\", \"user\" =&gt; {\"name\" =&gt; \"Konata\"}}\n</pre> <p>You can also specify the key in which the parameters should be wrapped to, and also the list of attributes it should wrap by using either <code>:include</code> or <code>:exclude</code> options like this:</p> <pre class=\"ruby\">class UsersController &lt; ApplicationController\n  wrap_parameters :person, include: [:username, :password]\nend\n</pre> <p>On <a href=\"../activerecord\">ActiveRecord</a> models with no <code>:include</code> or <code>:exclude</code> option set, it will only wrap the parameters returned by the class method <code>attribute_names</code>.</p> <p>If you're going to pass the parameters to an <code>ActiveModel</code> object (such as <code>User.new(params[:user])</code>), you might consider passing the model class to the method instead. The <code>ParamsWrapper</code> will actually try to determine the list of attribute names from the model and only wrap those attributes:</p> <pre class=\"ruby\">class UsersController &lt; ApplicationController\n  wrap_parameters Person\nend\n</pre> <p>You still could pass <code>:include</code> and <code>:exclude</code> to set the list of attributes you want to wrap.</p> <p>By default, if you don't specify the key in which the parameters would be wrapped to, <code>ParamsWrapper</code> will actually try to determine if there's a model related to it or not. This controller, for example:</p> <pre class=\"ruby\">class Admin::UsersController &lt; ApplicationController\nend\n</pre> <p>will try to check if <code>Admin::User</code> or <code>User</code> model exists, and use it to determine the wrapper key respectively. If both models don't exist, it will then fallback to use <code>user</code> as the key.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"EXCLUDE_PARAMETERS\">EXCLUDE_PARAMETERS </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-process_action\"> <span class=\"method-name\">process_action</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs parameters wrapping upon the request. Will be called automatically by the metal call stack.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"process_action-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/params_wrapper.rb, line 232\ndef process_action(*args)\n  if _wrapper_enabled?\n    if request.parameters[_wrapper_key].present?\n      wrapped_hash = _extract_parameters(request.parameters)\n    else\n      wrapped_hash = _wrap_parameters request.request_parameters\n    end\n\n    wrapped_keys = request.request_parameters.keys\n    wrapped_filtered_hash = _wrap_parameters request.filtered_parameters.slice(*wrapped_keys)\n\n    # This will make the wrapped hash accessible from controller and view\n    request.parameters.merge! wrapped_hash\n    request.request_parameters.merge! wrapped_hash\n\n    # This will display the wrapped hash in the log file\n    request.filtered_parameters.merge! wrapped_filtered_hash\n  end\n  super\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/paramswrapper/classmethods":"<h1 id=\"module-ActionController::ParamsWrapper::ClassMethods\" class=\"module\"> module ActionController::ParamsWrapper::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_set_wrapper_options\"> <span class=\"method-name\">_set_wrapper_options</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_set_wrapper_options-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/params_wrapper.rb, line 165\ndef _set_wrapper_options(options)\n  self._wrapper_options = Options.from_hash(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inherited\"> <span class=\"method-name\">inherited</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the default wrapper key or model which will be used to determine wrapper key and attribute names. Will be called automatically when the module is inherited.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"inherited-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/params_wrapper.rb, line 220\ndef inherited(klass)\n  if klass._wrapper_options.format.any?\n    params = klass._wrapper_options.dup\n    params.klass = klass\n    klass._wrapper_options = params\n  end\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wrap_parameters\"> <span class=\"method-name\">wrap_parameters</span><span class=\"method-args\">(name_or_model_or_options, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the name of the wrapper key, or the model which <code>ParamsWrapper</code> would use to determine the attribute names from.</p> <h4 id=\"method-i-wrap_parameters-label-Examples\">Examples</h4> <pre>wrap_parameters format: :xml\n  # enables the parameter wrapper for XML format\n\nwrap_parameters :person\n  # wraps parameters into +params[:person]+ hash\n\nwrap_parameters Person\n  # wraps parameters by determining the wrapper key from Person class\n  (+person+, in this case) and the list of attribute names\n\nwrap_parameters include: [:username, :title]\n  # wraps only +:username+ and +:title+ attributes from parameters.\n\nwrap_parameters false\n  # disables parameters wrapping for this controller altogether.</pre> <h4 id=\"method-i-wrap_parameters-label-Options\">Options</h4> <ul>\n<li> <p><code>:format</code> - The list of formats in which the parameters wrapper will be enabled.</p> </li>\n<li> <p><code>:include</code> - The list of attribute names which parameters wrapper will wrap into a nested hash.</p> </li>\n<li> <p><code>:exclude</code> - The list of attribute names which parameters wrapper will exclude from a nested hash.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"wrap_parameters-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/params_wrapper.rb, line 196\ndef wrap_parameters(name_or_model_or_options, options = {})\n  model = nil\n\n  case name_or_model_or_options\n  when Hash\n    options = name_or_model_or_options\n  when false\n    options = options.merge(:format =&gt; [])\n  when Symbol, String\n    options = options.merge(:name =&gt; name_or_model_or_options)\n  else\n    model = name_or_model_or_options\n  end\n\n  opts   = Options.from_hash _wrapper_options.to_h.slice(:format).merge(options)\n  opts.model = model\n  opts.klass = self\n\n  self._wrapper_options = opts\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/redirecting":"<h1 id=\"module-ActionController::Redirecting\" class=\"module\"> module ActionController::Redirecting </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"rackdelegation\">ActionController::RackDelegation</a>, <a class=\"include\" href=\"urlfor\">ActionController::UrlFor</a>\n</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-redirect_to\"> <span class=\"method-name\">redirect_to</span><span class=\"method-args\">(options = {}, response_status = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Redirects the browser to the target specified in <code>options</code>. This parameter can be any one of:</p> <ul>\n<li> <p><code>Hash</code> - The URL will be generated by calling url_for with the <code>options</code>.</p> </li>\n<li> <p><code>Record</code> - The URL will be generated by calling url_for with the <code>options</code>, which will reference a named URL for that record.</p> </li>\n<li> <p><code>String</code> starting with <code>protocol://</code> (like <code>http://</code>) or a protocol relative reference (like <code>//</code>) - Is passed straight through as the target for redirection.</p> </li>\n<li> <p><code>String</code> not containing a protocol - The current protocol and host is prepended to the string.</p> </li>\n<li> <p><code>Proc</code> - A block that will be executed in the controller's context. Should return any option accepted by <code>redirect_to</code>.</p> </li>\n<li> <p><code>:back</code> - Back to the page that issued the request. Useful for forms that are triggered from multiple places. Short-hand for <code>redirect_to(request.env[\"HTTP_REFERER\"])</code></p> </li>\n</ul> <h3 id=\"method-i-redirect_to-label-Examples-3A\">Examples:</h3> <pre class=\"ruby\">redirect_to action: \"show\", id: 5\nredirect_to post\nredirect_to \"http://www.rubyonrails.org\"\nredirect_to \"/images/screenshot.jpg\"\nredirect_to articles_url\nredirect_to :back\nredirect_to proc { edit_post_url(@post) }\n</pre> <p>The redirection happens as a “302 Found” header unless otherwise specified using the <code>:status</code> option:</p> <pre class=\"ruby\">redirect_to post_url(@post), status: :found\nredirect_to action: 'atom', status: :moved_permanently\nredirect_to post_url(@post), status: 301\nredirect_to action: 'atom', status: 302\n</pre> <p>The status code can either be a standard <a href=\"http://www.iana.org/assignments/http-status-codes\">HTTP Status code</a> as an integer, or a symbol representing the downcased, underscored and symbolized description. Note that the status code must be a 3xx HTTP code, or redirection will not occur.</p> <p>If you are using XHR requests other than GET or POST and redirecting after the request then some browsers will follow the redirect using the original request method. This may lead to undesirable behavior such as a double DELETE. To work around this you can return a <code>303 See Other</code> status code which will be followed using a GET request.</p> <pre class=\"ruby\">redirect_to posts_url, status: :see_other\nredirect_to action: 'index', status: 303\n</pre> <p>It is also possible to assign a flash message as part of the redirection. There are two special accessors for the commonly used flash names <code>alert</code> and <code>notice</code> as well as a general purpose <code>flash</code> bucket.</p> <pre class=\"ruby\">redirect_to post_url(@post), alert: \"Watch it, mister!\"\nredirect_to post_url(@post), status: :found, notice: \"Pay attention to the road\"\nredirect_to post_url(@post), status: 301, flash: { updated_post_id: @post.id }\nredirect_to({ action: 'atom' }, alert: \"Something serious happened\")\n</pre> <p>When using <code>redirect_to :back</code>, if there is no referrer, <code>ActionController::RedirectBackError</code> will be raised. You may specify some fallback behavior for this case by rescuing <code>ActionController::RedirectBackError</code>.</p> <div class=\"method-source-code\" id=\"redirect_to-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/redirecting.rb, line 69\ndef redirect_to(options = {}, response_status = {}) #:doc:\n  raise ActionControllerError.new(\"Cannot redirect to nil!\") unless options\n  raise ActionControllerError.new(\"Cannot redirect to a parameter hash!\") if options.is_a?(ActionController::Parameters)\n  raise AbstractController::DoubleRenderError if response_body\n\n  self.status        = _extract_redirect_to_status(options, response_status)\n  self.location      = _compute_redirect_to_location(request, options)\n  self.response_body = \"&lt;html&gt;&lt;body&gt;You are being &lt;a href=\\\"#{ERB::Util.unwrapped_html_escape(location)}\\\"&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/renderers":"<h1 id=\"module-ActionController::Renderers\" class=\"module\"> module ActionController::Renderers </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"RENDERERS\">RENDERERS </dt>\n<dd>\n<p>A Set containing renderer names that correspond to available renderer procs. Default values are <code>:json</code>, <code>:js</code>, <code>:xml</code>.</p> </dd>\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-_render_with_renderer_method_name\"> <span class=\"method-name\">_render_with_renderer_method_name</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_render_with_renderer_method_name-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/renderers.rb, line 55\ndef self._render_with_renderer_method_name(key)\n  \"_render_with_renderer_#{key}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-add\"> <span class=\"method-name\">add</span><span class=\"method-args\">(key, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a new renderer to call within controller actions. A renderer is invoked by passing its name as an option to <code>AbstractController::Rendering#render</code>. To create a renderer pass it a name and a block. The block takes two arguments, the first is the value paired with its key and the second is the remaining hash of options passed to <code>render</code>.</p> <p>Create a csv renderer:</p> <pre class=\"ruby\">ActionController::Renderers.add :csv do |obj, options|\n  filename = options[:filename] || 'data'\n  str = obj.respond_to?(:to_csv) ? obj.to_csv : obj.to_s\n  send_data str, type: Mime::CSV,\n    disposition: \"attachment; filename=#{filename}.csv\"\nend\n</pre> <p>Note that we used Mime::CSV for the csv mime type as it comes with Rails. For a custom renderer, you'll need to register a mime type with <code>Mime::Type.register</code>.</p> <p>To use the csv renderer in a controller action:</p> <pre class=\"ruby\">def show\n  @csvable = Csvable.find(params[:id])\n  respond_to do |format|\n    format.html\n    format.csv { render csv: @csvable, filename: @csvable.name }\n  end\nend\n</pre> <p>To use renderers and their mime types in more concise ways, see <code>ActionController::MimeResponds::ClassMethods.respond_to</code></p> <div class=\"method-source-code\" id=\"add-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/renderers.rb, line 90\ndef self.add(key, &amp;block)\n  define_method(_render_with_renderer_method_name(key), &amp;block)\n  RENDERERS &lt;&lt; key.to_sym\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-remove\"> <span class=\"method-name\">remove</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method is the opposite of add method.</p> <p>Usage:</p> <pre class=\"ruby\">ActionController::Renderers.remove(:csv)\n</pre> <div class=\"method-source-code\" id=\"remove-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/renderers.rb, line 100\ndef self.remove(key)\n  RENDERERS.delete(key.to_sym)\n  method_name = _render_with_renderer_method_name(key)\n  remove_method(method_name) if method_defined?(method_name)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_render_to_body_with_renderer\"> <span class=\"method-name\">_render_to_body_with_renderer</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_render_to_body_with_renderer-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/renderers.rb, line 40\ndef _render_to_body_with_renderer(options)\n  _renderers.each do |name|\n    if options.key?(name)\n      _process_options(options)\n      method_name = Renderers._render_with_renderer_method_name(name)\n      return send(method_name, options.delete(name), options)\n    end\n  end\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render_to_body\"> <span class=\"method-name\">render_to_body</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"render_to_body-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/renderers.rb, line 36\ndef render_to_body(options)\n  _render_to_body_with_renderer(options) || super\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/requestforgeryprotection":"<h1 id=\"module-ActionController::RequestForgeryProtection\" class=\"module\"> module ActionController::RequestForgeryProtection </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"../abstractcontroller/helpers\">AbstractController::Helpers</a>, <span class=\"include\">AbstractController::Callbacks</span>\n</dd>\n</dl> <section class=\"description\"> <p>Controller actions are protected from Cross-Site Request Forgery (CSRF) attacks by including a token in the rendered HTML for your application. This token is stored as a random string in the session, to which an attacker does not have access. When a request reaches your application, Rails verifies the received token with the token in the session. Only HTML and JavaScript requests are checked, so this will not protect your XML API (presumably you'll have a different authentication scheme there anyway).</p> <p>GET requests are not protected since they don't have side effects like writing to the database and don't leak sensitive information. JavaScript requests are an exception: a third-party site can use a &lt;script&gt; tag to reference a JavaScript URL on your site. When your JavaScript response loads on their site, it executes. With carefully crafted JavaScript on their end, sensitive data in your JavaScript response may be extracted. To prevent this, only XmlHttpRequest (known as XHR or Ajax) requests are allowed to make GET requests for JavaScript responses.</p> <p>It's important to remember that XML or JSON requests are also affected and if you're building an API you'll need something like:</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  protect_from_forgery\n  skip_before_action :verify_authenticity_token, if: :json_request?\n\n  protected\n\n  def json_request?\n    request.format.json?\n  end\nend\n</pre> <p>CSRF protection is turned on with the <code>protect_from_forgery</code> method, which checks the token and resets the session if it doesn't match what was expected. A call to this method is generated for new Rails applications by default.</p> <p>The token parameter is named <code>authenticity_token</code> by default. The name and value of this token must be added to every layout that renders forms by including <code>csrf_meta_tags</code> in the HTML <code>head</code>.</p> <p>Learn more about CSRF attacks and securing your application in the <a href=\"http://guides.rubyonrails.org/security.html\">Ruby on Rails Security Guide</a>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-handle_unverified_request\"> <span class=\"method-name\">handle_unverified_request</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"handle_unverified_request-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/request_forgery_protection.rb, line 208\ndef handle_unverified_request\n  forgery_protection_strategy.new(self).handle_unverified_request\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-verify_authenticity_token\"> <span class=\"method-name\">verify_authenticity_token</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The actual before_action that is used to verify the CSRF token. Don't override this directly. Provide your own forgery protection strategy instead. If you override, you'll disable same-origin `&lt;script&gt;` verification.</p> <p>Lean on the protect_from_forgery declaration to mark which actions are due for same-origin request verification. If protect_from_forgery is enabled on an action, this before_action flags its after_action to verify that JavaScript responses are for XHR requests, ensuring they follow the browser's same-origin policy.</p> <div class=\"method-source-code\" id=\"verify_authenticity_token-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/request_forgery_protection.rb, line 197\ndef verify_authenticity_token\n  mark_for_same_origin_verification!\n\n  if !verified_request?\n    if logger &amp;&amp; log_warning_on_csrf_failure\n      logger.warn \"Can't verify CSRF token authenticity\"\n    end\n    handle_unverified_request\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/requestforgeryprotection/classmethods":"<h1 id=\"module-ActionController::RequestForgeryProtection::ClassMethods\" class=\"module\"> module ActionController::RequestForgeryProtection::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-protect_from_forgery\"> <span class=\"method-name\">protect_from_forgery</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Turn on request forgery protection. Bear in mind that GET and HEAD requests are not checked.</p> <pre>class ApplicationController &lt; ActionController::Base\n  protect_from_forgery\nend\n\nclass FooController &lt; ApplicationController\n  protect_from_forgery except: :index</pre> <p>You can disable CSRF protection on controller by skipping the verification before_action:</p> <pre class=\"ruby\">skip_before_action :verify_authenticity_token\n</pre> <p>Valid Options:</p> <ul>\n<li> <p><code>:only/:except</code> - Passed to the <code>before_action</code> call. Set which actions are verified.</p> </li>\n<li> <p><code>:with</code> - Set the method to handle unverified request.</p> </li>\n</ul> <p>Valid unverified request handling methods are:</p> <ul>\n<li> <p><code>:exception</code> - Raises ActionController::InvalidAuthenticityToken exception.</p> </li>\n<li> <p><code>:reset_session</code> - Resets the session.</p> </li>\n<li> <p><code>:null_session</code> - Provides an empty session during request but doesn't reset it completely. Used as default if <code>:with</code> option is not specified.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"protect_from_forgery-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/request_forgery_protection.rb, line 102\ndef protect_from_forgery(options = {})\n  self.forgery_protection_strategy = protection_method_class(options[:with] || :null_session)\n  self.request_forgery_protection_token ||= :authenticity_token\n  prepend_before_action :verify_authenticity_token, options\n  append_after_action :verify_same_origin_request\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/rescue":"<h1 id=\"module-ActionController::Rescue\" class=\"module\"> module ActionController::Rescue </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../activesupport/rescuable\">ActiveSupport::Rescuable</a></dd>\n</dl> <section class=\"description\"> <p>This module is responsible to provide `rescue_from` helpers to controllers and configure when detailed exceptions must be shown.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rescue_with_handler\"> <span class=\"method-name\">rescue_with_handler</span><span class=\"method-args\">(exception)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../activesupport/rescuable#method-i-rescue_with_handler\">ActiveSupport::Rescuable#rescue_with_handler</a> </div> <div class=\"method-source-code\" id=\"rescue_with_handler-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/rescue.rb, line 9\ndef rescue_with_handler(exception)\n  if (exception.respond_to?(:original_exception) &amp;&amp;\n      (orig_exception = exception.original_exception) &amp;&amp;\n      handler_for_rescue(orig_exception))\n    exception = orig_exception\n  end\n  super(exception)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-show_detailed_exceptions-3F\"> <span class=\"method-name\">show_detailed_exceptions?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Override this method if you want to customize when detailed exceptions must be shown. This method is only called when consider_all_requests_local is false. By default, it returns false, but someone may set it to `request.local?` so local requests in production still shows the detailed exception pages.</p> <div class=\"method-source-code\" id=\"show_detailed_exceptions-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/rescue.rb, line 23\ndef show_detailed_exceptions?\n  false\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/streaming":"<h1 id=\"module-ActionController::Streaming\" class=\"module\"> module ActionController::Streaming </h1> <section class=\"description\"> <p>Allows views to be streamed back to the client as they are rendered.</p> <p>The default way Rails renders views is by first rendering the template and then the layout. The response is sent to the client after the whole template is rendered, all queries are made, and the layout is processed.</p> <p><a href=\"streaming\">Streaming</a> inverts the rendering flow by rendering the layout first and streaming each part of the layout as they are processed. This allows the header of the HTML (which is usually in the layout) to be streamed back to client very quickly, allowing JavaScripts and stylesheets to be loaded earlier than usual.</p> <p>This approach was introduced in Rails 3.1 and is still improving. Several <a href=\"../rack\">Rack</a> middlewares may not work and you need to be careful when streaming. Those points are going to be addressed soon.</p> <p>In order to use streaming, you will need to use a Ruby version that supports fibers (fibers are supported since version 1.9.2 of the main Ruby implementation).</p> <p><a href=\"streaming\">Streaming</a> can be added to a given template easily, all you need to do is to pass the :stream option.</p> <pre class=\"ruby\">class PostsController\n  def index\n    @posts = Post.all\n    render stream: true\n  end\nend\n</pre> <h2 id=\"module-ActionController::Streaming-label-When+to+use+streaming\">When to use streaming</h2> <p><a href=\"streaming\">Streaming</a> may be considered to be overkill for lightweight actions like <code>new</code> or <code>edit</code>. The real benefit of streaming is on expensive actions that, for example, do a lot of queries on the database.</p> <p>In such actions, you want to delay queries execution as much as you can. For example, imagine the following <code>dashboard</code> action:</p> <pre class=\"ruby\">def dashboard\n  @posts = Post.all\n  @pages = Page.all\n  @articles = Article.all\nend\n</pre> <p>Most of the queries here are happening in the controller. In order to benefit from streaming you would want to rewrite it as:</p> <pre class=\"ruby\">def dashboard\n  # Allow lazy execution of the queries\n  @posts = Post.all\n  @pages = Page.all\n  @articles = Article.all\n  render stream: true\nend\n</pre> <p>Notice that :stream only works with templates. <span>Rendering</span> :json or :xml with :stream won't work.</p> <h2 id=\"module-ActionController::Streaming-label-Communication+between+layout+and+template\">Communication between layout and template</h2> <p>When streaming, rendering happens top-down instead of inside-out. Rails starts with the layout, and the template is rendered later, when its <code>yield</code> is reached.</p> <p>This means that, if your application currently relies on instance variables set in the template to be used in the layout, they won't work once you move to streaming. The proper way to communicate between layout and template, regardless of whether you use streaming or not, is by using <code>content_for</code>, <code>provide</code> and <code>yield</code>.</p> <p>Take a simple example where the layout expects the template to tell which title to use:</p> <pre>&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;&lt;%= yield :title %&gt;&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;&lt;%= yield %&gt;&lt;/body&gt;\n&lt;/html&gt;</pre> <p>You would use <code>content_for</code> in your template to specify the title:</p> <pre>&lt;%= content_for :title, \"Main\" %&gt;\nHello</pre> <p>And the final result would be:</p> <pre>&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;Main&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;Hello&lt;/body&gt;\n&lt;/html&gt;</pre> <p>However, if <code>content_for</code> is called several times, the final result would have all calls concatenated. For instance, if we have the following template:</p> <pre>&lt;%= content_for :title, \"Main\" %&gt;\nHello\n&lt;%= content_for :title, \" page\" %&gt;</pre> <p>The final result would be:</p> <pre>&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;Main page&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;Hello&lt;/body&gt;\n&lt;/html&gt;</pre> <p>This means that, if you have <code>yield :title</code> in your layout and you want to use streaming, you would have to render the whole template (and eventually trigger all queries) before streaming the title and all assets, which kills the purpose of streaming. For this reason Rails 3.1 introduces a new helper called <code>provide</code> that does the same as <code>content_for</code> but tells the layout to stop searching for other entries and continue rendering.</p> <p>For instance, the template above using <code>provide</code> would be:</p> <pre>&lt;%= provide :title, \"Main\" %&gt;\nHello\n&lt;%= content_for :title, \" page\" %&gt;</pre> <p>Giving:</p> <pre>&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;Main&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;Hello&lt;/body&gt;\n&lt;/html&gt;</pre> <p>That said, when streaming, you need to properly check your templates and choose when to use <code>provide</code> and <code>content_for</code>.</p> <h2 id=\"module-ActionController::Streaming-label-Headers-2C+cookies-2C+session+and+flash\">Headers, cookies, session and flash</h2> <p>When streaming, the HTTP headers are sent to the client right before it renders the first line. This means that, modifying headers, cookies, session or flash after the template starts rendering will not propagate to the client.</p> <h2 id=\"module-ActionController::Streaming-label-Middlewares\">Middlewares</h2> <p>Middlewares that need to manipulate the body won't work with streaming. You should disable those middlewares whenever streaming in development or production. For instance, <code>Rack::Bug</code> won't work when streaming as it needs to inject contents in the HTML body.</p> <p>Also <code>Rack::Cache</code> won't work with streaming as it does not support streaming bodies yet. Whenever streaming Cache-Control is automatically set to “no-cache”.</p> <h2 id=\"module-ActionController::Streaming-label-Errors\">Errors</h2> <p>When it comes to streaming, exceptions get a bit more complicated. This happens because part of the template was already rendered and streamed to the client, making it impossible to render a whole exception page.</p> <p>Currently, when an exception happens in development or production, Rails will automatically stream to the client:</p> <pre>\"&gt;&lt;script&gt;window.location = \"/500.html\"&lt;/script&gt;&lt;/html&gt;</pre> <p>The first two characters (“&gt;) are required in case the exception happens while rendering attributes for a given tag. You can check the real cause for the exception in your logger.</p> <h2 id=\"module-ActionController::Streaming-label-Web+server+support\">Web server support</h2> <p>Not all web servers support streaming out-of-the-box. You need to check the instructions for each of them.</p> <h4 id=\"module-ActionController::Streaming-label-Unicorn\">Unicorn</h4> <p>Unicorn supports streaming but it needs to be configured. For this, you need to create a config file as follow:</p> <pre class=\"ruby\"># unicorn.config.rb\nlisten 3000, tcp_nopush: false\n</pre> <p>And use it on initialization:</p> <pre>unicorn_rails --config-file unicorn.config.rb</pre> <p>You may also want to configure other parameters like <code>:tcp_nodelay</code>. Please check its documentation for more information: <a href=\"http://unicorn.bogomips.org/Unicorn/Configurator.html#method-i-listen\">unicorn.bogomips.org/Unicorn/Configurator.html#method-i-listen</a></p> <p>If you are using Unicorn with NGINX, you may need to tweak NGINX. <a href=\"streaming\">Streaming</a> should work out of the box on Rainbows.</p> <h4 id=\"module-ActionController::Streaming-label-Passenger\">Passenger</h4> <p>To be described.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/strongparameters":"<h1 id=\"module-ActionController::StrongParameters\" class=\"module\"> module ActionController::StrongParameters </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../activesupport/rescuable\">ActiveSupport::Rescuable</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"module-ActionController::StrongParameters-label-Strong+Parameters\">Strong Parameters</h2> <p>It provides an interface for protecting attributes from end-user assignment. This makes Action Controller parameters forbidden to be used in Active Model mass assignment until they have been whitelisted.</p> <p>In addition, parameters can be marked as required and flow through a predefined raise/rescue flow to end up as a 400 Bad Request with no effort.</p> <pre class=\"ruby\">class PeopleController &lt; ActionController::Base\n  # Using \"Person.create(params[:person])\" would raise an\n  # ActiveModel::ForbiddenAttributes exception because it'd\n  # be using mass assignment without an explicit permit step.\n  # This is the recommended form:\n  def create\n    Person.create(person_params)\n  end\n\n  # This will pass with flying colors as long as there's a person key in the\n  # parameters, otherwise it'll raise an ActionController::MissingParameter\n  # exception, which will get caught by ActionController::Base and turned\n  # into a 400 Bad Request reply.\n  def update\n    redirect_to current_account.people.find(params[:id]).tap { |person|\n      person.update!(person_params)\n    }\n  end\n\n  private\n    # Using a private method to encapsulate the permissible parameters is\n    # just a good pattern since you'll be able to reuse the same permit\n    # list between create and update. Also, you can specialize this method\n    # with per-user checking of permissible attributes.\n    def person_params\n      params.require(:person).permit(:name, :age)\n    end\nend\n</pre> <p>In order to use <code>accepts_nested_attributes_for</code> with Strong Parameters, you will need to specify which nested attributes should be whitelisted.</p> <pre>class Person\n  has_many :pets\n  accepts_nested_attributes_for :pets\nend\n\nclass PeopleController &lt; ActionController::Base\n  def create\n    Person.create(person_params)\n  end\n\n  ...\n\n  private\n\n    def person_params\n      # It's mandatory to specify the nested attributes that should be whitelisted.\n      # If you use `permit` with just the key that points to the nested attributes hash,\n      # it will return an empty hash.\n      params.require(:person).permit(:name, :age, pets_attributes: [ :name, :category ])\n    end\nend</pre> <p>See <a href=\"parameters#method-i-require\">ActionController::Parameters#require</a> and <a href=\"parameters#method-i-permit\">ActionController::Parameters#permit</a> for more information.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-params\"> <span class=\"method-name\">params</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"parameters\">ActionController::Parameters</a> object that has been instantiated with the <code>request.parameters</code>.</p> <div class=\"method-source-code\" id=\"params-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 658\ndef params\n  @_params ||= Parameters.new(request.parameters)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-params-3D\"> <span class=\"method-name\">params=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Assigns the given <code>value</code> to the <code>params</code> hash. If <code>value</code> is a <a href=\"../hash\">Hash</a>, this will create an <a href=\"parameters\">ActionController::Parameters</a> object that has been instantiated with the given <code>value</code> hash.</p> <div class=\"method-source-code\" id=\"params-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/strong_parameters.rb, line 665\ndef params=(value)\n  @_params = value.is_a?(Hash) ? Parameters.new(value) : value\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/templateassertions":"<h1 id=\"module-ActionController::TemplateAssertions\" class=\"module\"> module ActionController::TemplateAssertions </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"RENDER_TEMPLATE_INSTANCE_VARIABLES\">RENDER_TEMPLATE_INSTANCE_VARIABLES </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_template\"> <span class=\"method-name\">assert_template</span><span class=\"method-args\">(options = {}, message = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that the request was rendered with the appropriate template file or partials.</p> <pre class=\"ruby\"># assert that the \"new\" view template was rendered\nassert_template \"new\"\n\n# assert that the exact template \"admin/posts/new\" was rendered\nassert_template %r{\\Aadmin/posts/new\\Z}\n\n# assert that the layout 'admin' was rendered\nassert_template layout: 'admin'\nassert_template layout: 'layouts/admin'\nassert_template layout: :admin\n\n# assert that no layout was rendered\nassert_template layout: nil\nassert_template layout: false\n\n# assert that the \"_customer\" partial was rendered twice\nassert_template partial: '_customer', count: 2\n\n# assert that no partials were rendered\nassert_template partial: false\n\n# assert that a file was rendered\nassert_template file: \"README.rdoc\"\n\n# assert that no file was rendered\nassert_template file: nil\nassert_template file: false\n</pre> <p>In a view test case, you can also assert that specific locals are passed to partials:</p> <pre class=\"ruby\"># assert that the \"_customer\" partial was rendered with a specific object\nassert_template partial: '_customer', locals: { customer: @customer }\n</pre> <div class=\"method-source-code\" id=\"assert_template-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 112\ndef assert_template(options = {}, message = nil)\n  # Force body to be read in case the template is being streamed.\n  response.body\n\n  case options\n  when NilClass, Regexp, String, Symbol\n    options = options.to_s if Symbol === options\n    rendered = @_templates\n    msg = message || sprintf(\"expecting &lt;%s&gt; but rendering with &lt;%s&gt;\",\n            options.inspect, rendered.keys)\n    matches_template =\n      case options\n      when String\n        !options.empty? &amp;&amp; rendered.any? do |t, num|\n          options_splited = options.split(File::SEPARATOR)\n          t_splited = t.split(File::SEPARATOR)\n          t_splited.last(options_splited.size) == options_splited\n        end\n      when Regexp\n        rendered.any? { |t,num| t.match(options) }\n      when NilClass\n        rendered.blank?\n      end\n    assert matches_template, msg\n  when Hash\n    options.assert_valid_keys(:layout, :partial, :locals, :count, :file)\n\n    if options.key?(:layout)\n      expected_layout = options[:layout]\n      msg = message || sprintf(\"expecting layout &lt;%s&gt; but action rendered &lt;%s&gt;\",\n              expected_layout, @_layouts.keys)\n\n      case expected_layout\n      when String, Symbol\n        assert_includes @_layouts.keys, expected_layout.to_s, msg\n      when Regexp\n        assert(@_layouts.keys.any? {|l| l =~ expected_layout }, msg)\n      when nil, false\n        assert(@_layouts.empty?, msg)\n      end\n    end\n\n    if options[:file]\n      assert_includes @_files.keys, options[:file]\n    elsif options.key?(:file)\n      assert @_files.blank?, \"expected no files but #{@_files.keys} was rendered\"\n    end\n\n    if expected_partial = options[:partial]\n      if expected_locals = options[:locals]\n        if defined?(@_rendered_views)\n          view = expected_partial.to_s.sub(/^_/, '').sub(/\\/_(?=[^\\/]+\\z)/, '/')\n\n          partial_was_not_rendered_msg = \"expected %s to be rendered but it was not.\" % view\n          assert_includes @_rendered_views.rendered_views, view, partial_was_not_rendered_msg\n\n          msg = 'expecting %s to be rendered with %s but was with %s' % [expected_partial,\n                                                                         expected_locals,\n                                                                         @_rendered_views.locals_for(view)]\n          assert(@_rendered_views.view_rendered?(view, options[:locals]), msg)\n        else\n          warn \"the :locals option to #assert_template is only supported in a ActionView::TestCase\"\n        end\n      elsif expected_count = options[:count]\n        actual_count = @_partials[expected_partial]\n        msg = message || sprintf(\"expecting %s to be rendered %s time(s) but rendered %s time(s)\",\n                 expected_partial, expected_count, actual_count)\n        assert(actual_count == expected_count.to_i, msg)\n      else\n        msg = message || sprintf(\"expecting partial &lt;%s&gt; but action rendered &lt;%s&gt;\",\n                options[:partial], @_partials.keys)\n        assert_includes @_partials, expected_partial, msg\n      end\n    elsif options.key?(:partial)\n      assert @_partials.empty?,\n        \"Expected no partials to be rendered\"\n    end\n  else\n    raise ArgumentError, \"assert_template only accepts a String, Symbol, Hash, Regexp, or nil\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-process\"> <span class=\"method-name\">process</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"process-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 63\ndef process(*args)\n  reset_template_assertion\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset_template_assertion\"> <span class=\"method-name\">reset_template_assertion</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"reset_template_assertion-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 68\ndef reset_template_assertion\n  RENDER_TEMPLATE_INSTANCE_VARIABLES.each do |instance_variable|\n    ivar_name = \"@_#{instance_variable}\"\n    if instance_variable_defined?(ivar_name)\n      instance_variable_get(ivar_name).clear\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-setup_subscriptions\"> <span class=\"method-name\">setup_subscriptions</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"setup_subscriptions-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 20\ndef setup_subscriptions\n  RENDER_TEMPLATE_INSTANCE_VARIABLES.each do |instance_variable|\n    instance_variable_set(\"@_#{instance_variable}\", Hash.new(0))\n  end\n\n  @_subscribers = []\n\n  @_subscribers &lt;&lt; ActiveSupport::Notifications.subscribe(\"render_template.action_view\") do |_name, _start, _finish, _id, payload|\n    path = payload[:layout]\n    if path\n      @_layouts[path] += 1\n      if path =~ /^layouts\\/(.*)/\n        @_layouts[$1] += 1\n      end\n    end\n  end\n\n  @_subscribers &lt;&lt; ActiveSupport::Notifications.subscribe(\"!render_template.action_view\") do |_name, _start, _finish, _id, payload|\n    if virtual_path = payload[:virtual_path]\n      partial = virtual_path =~ /^.*\\/_[^\\/]*$/\n\n      if partial\n        @_partials[virtual_path] += 1\n        @_partials[virtual_path.split(\"/\").last] += 1\n      end\n\n      @_templates[virtual_path] += 1\n    else\n      path = payload[:identifier]\n      if path\n        @_files[path] += 1\n        @_files[path.split(\"/\").last] += 1\n      end\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-teardown_subscriptions\"> <span class=\"method-name\">teardown_subscriptions</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"teardown_subscriptions-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 57\ndef teardown_subscriptions\n  @_subscribers.each do |subscriber|\n    ActiveSupport::Notifications.unsubscribe(subscriber)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/testcase":"<h1 id=\"class-ActionController::TestCase\" class=\"class\"> class ActionController::TestCase </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../activesupport/testcase\">ActiveSupport::TestCase</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"testcase/behavior\">ActionController::TestCase::Behavior</a></dd>\n</dl> <section class=\"description\"> <p>Superclass for <a href=\"../actioncontroller\">ActionController</a> functional tests. Functional tests allow you to test a single controller action per test method. This should not be confused with integration tests (see <a href=\"../actiondispatch/integrationtest\">ActionDispatch::IntegrationTest</a>), which are more like “stories” that can involve multiple controllers and multiple actions (i.e. multiple different HTTP requests).</p> <h2 id=\"class-ActionController::TestCase-label-Basic+example\">Basic example</h2> <p>Functional tests are written as follows:</p> <ol>\n<li> <p>First, one uses the <code>get</code>, <code>post</code>, <code>patch</code>, <code>put</code>, <code>delete</code> or <code>head</code> method to simulate an HTTP request.</p> </li>\n<li> <p>Then, one asserts whether the current state is as expected. “State” can be anything: the controller's HTTP response, the database contents, etc.</p> </li>\n</ol> <p>For example:</p> <pre class=\"ruby\">class BooksControllerTest &lt; ActionController::TestCase\n  def test_create\n    # Simulate a POST response with the given HTTP parameters.\n    post(:create, book: { title: \"Love Hina\" })\n\n    # Assert that the controller tried to redirect us to\n    # the created book's URI.\n    assert_response :found\n\n    # Assert that the controller really put the book in the database.\n    assert_not_nil Book.find_by(title: \"Love Hina\")\n  end\nend\n</pre> <p>You can also send a real document in the simulated HTTP request.</p> <pre class=\"ruby\">def test_create\n  json = {book: { title: \"Love Hina\" }}.to_json\n  post :create, json\nend\n</pre> <h2 id=\"class-ActionController::TestCase-label-Special+instance+variables\">Special instance variables</h2> <p><a href=\"testcase\">ActionController::TestCase</a> will also automatically provide the following instance variables for use in the tests:</p> <dl class=\"rdoc-list note-list\">\n<dt>\n<strong>@controller</strong> </dt>\n<dd> <p>The controller instance that will be tested.</p> </dd>\n<dt>\n<strong>@request</strong> </dt>\n<dd> <p>An ActionController::TestRequest, representing the current HTTP request. You can modify this object before sending the HTTP request. For example, you might want to set some session properties before sending a GET request.</p> </dd>\n<dt>\n<strong>@response</strong> </dt>\n<dd> <p>An <a href=\"testresponse\">ActionController::TestResponse</a> object, representing the response of the last HTTP response. In the above example, <code>@response</code> becomes valid after calling <code>post</code>. If the various assert methods are not sufficient, then you may use this object to inspect the HTTP response in detail.</p> </dd>\n</dl> <p>(Earlier versions of Rails required each functional test to subclass Test::Unit::TestCase and define @controller, @request, @response in <code>setup</code>.)</p> <h2 id=\"class-ActionController::TestCase-label-Controller+is+automatically+inferred\">Controller is automatically inferred</h2> <p><a href=\"testcase\">ActionController::TestCase</a> will automatically infer the controller under test from the test class name. If the controller cannot be inferred from the test class name, you can explicitly set it with <code>tests</code>.</p> <pre class=\"ruby\">class SpecialEdgeCaseWidgetsControllerTest &lt; ActionController::TestCase\n  tests WidgetController\nend\n</pre> <h2 id=\"class-ActionController::TestCase-label-Testing+controller+internals\">Testing controller internals</h2> <p>In addition to these specific assertions, you also have easy access to various collections that the regular test/unit assertions can be used against. These collections are:</p> <ul>\n<li> <p>assigns: Instance variables assigned in the action that are available for the view.</p> </li>\n<li> <p>session: Objects being saved in the session.</p> </li>\n<li> <p>flash: The flash objects currently in the session.</p> </li>\n<li> <p>cookies: Cookies being sent to the user on this request.</p> </li>\n</ul> <p>These collections can be used just like any other hash:</p> <pre class=\"ruby\">assert_not_nil assigns(:person) # makes sure that a @person instance variable was set\nassert_equal \"Dave\", cookies[:name] # makes sure that a cookie called :name was set as \"Dave\"\nassert flash.empty? # makes sure that there's nothing in the flash\n</pre> <p>For historic reasons, the assigns hash uses string-based keys. So <code>assigns[:person]</code> won't work, but <code>assigns[\"person\"]</code> will. To appease our yearning for symbols, though, an alternative accessor has been devised using a method call instead of index referencing. So <code>assigns(:person)</code> will work just like <code>assigns[\"person\"]</code>, but again, <code>assigns[:person]</code> will not work.</p> <p>On top of the collections, you have the complete url that a given action redirected to available in <code>redirect_to_url</code>.</p> <p>For redirects within the same controller, you can even call follow_redirect and the redirect will be followed, triggering another action call which can then be asserted against.</p> <h2 id=\"class-ActionController::TestCase-label-Manipulating+session+and+cookie+variables\">Manipulating session and cookie variables</h2> <p>Sometimes you need to set up the session and cookie variables for a test. To do this just assign a value to the session or cookie collection:</p> <pre class=\"ruby\">session[:key] = \"value\"\ncookies[:key] = \"value\"\n</pre> <p>To clear the cookies for a test just clear the cookie collection:</p> <pre class=\"ruby\">cookies.clear\n</pre> <h2 id=\"class-ActionController::TestCase-label-Testing+named+routes\">Testing named routes</h2> <p>If you're using named routes, they can be easily tested using the original named routes' methods straight in the test case.</p> <pre class=\"ruby\">assert_redirected_to page_url(title: 'foo')\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/testcase/behavior":"<h1 id=\"module-ActionController::TestCase::Behavior\" class=\"module\"> module ActionController::TestCase::Behavior </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"../../actiondispatch/testprocess\">ActionDispatch::TestProcess</a>, <a class=\"include\" href=\"../../activesupport/testing/constantlookup\">ActiveSupport::Testing::ConstantLookup</a>, <a class=\"include\" href=\"../templateassertions\">ActionController::TemplateAssertions</a>, <a class=\"include\" href=\"../../actiondispatch/assertions\">ActionDispatch::Assertions</a>\n</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-request\"> <span class=\"method-name\">request</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-response\"> <span class=\"method-name\">response</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-build_request\"> <span class=\"method-name\">build_request</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"build_request-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 678\ndef build_request\n  TestRequest.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-build_response\"> <span class=\"method-name\">build_response</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"build_response-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 682\ndef build_response(klass)\n  klass.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(action, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Simulate a DELETE request with the given parameters and set/volley the response. See <code>get</code> for more details.</p> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 531\ndef delete(action, *args)\n  process(action, \"DELETE\", *args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-get\"> <span class=\"method-name\">get</span><span class=\"method-args\">(action, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Simulate a GET request with the given parameters.</p> <ul>\n<li> <p><code>action</code>: The controller action to call.</p> </li>\n<li> <p><code>parameters</code>: The HTTP parameters that you want to pass. This may be <code>nil</code>, a hash, or a string that is appropriately encoded (<code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>).</p> </li>\n<li> <p><code>session</code>: A hash of parameters to store in the session. This may be <code>nil</code>.</p> </li>\n<li> <p><code>flash</code>: A hash of parameters to store in the flash. This may be <code>nil</code>.</p> </li>\n</ul> <p>You can also simulate POST, PATCH, PUT, DELETE, and HEAD requests with <code>post</code>, <code>patch</code>, <code>put</code>, <code>delete</code>, and <code>head</code>.</p> <p>Note that the request method is not verified. The different methods are available to make the tests more expressive.</p> <div class=\"method-source-code\" id=\"get-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 507\ndef get(action, *args)\n  process(action, \"GET\", *args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-head\"> <span class=\"method-name\">head</span><span class=\"method-args\">(action, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Simulate a HEAD request with the given parameters and set/volley the response. See <code>get</code> for more details.</p> <div class=\"method-source-code\" id=\"head-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 537\ndef head(action, *args)\n  process(action, \"HEAD\", *args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-paramify_values\"> <span class=\"method-name\">paramify_values</span><span class=\"method-args\">(hash_or_array_or_value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"paramify_values-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 551\ndef paramify_values(hash_or_array_or_value)\n  case hash_or_array_or_value\n  when Hash\n    Hash[hash_or_array_or_value.map{|key, value| [key, paramify_values(value)] }]\n  when Array\n    hash_or_array_or_value.map {|i| paramify_values(i)}\n  when Rack::Test::UploadedFile, ActionDispatch::Http::UploadedFile\n    hash_or_array_or_value\n  else\n    hash_or_array_or_value.to_param\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-patch\"> <span class=\"method-name\">patch</span><span class=\"method-args\">(action, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Simulate a PATCH request with the given parameters and set/volley the response. See <code>get</code> for more details.</p> <div class=\"method-source-code\" id=\"patch-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 519\ndef patch(action, *args)\n  process(action, \"PATCH\", *args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-post\"> <span class=\"method-name\">post</span><span class=\"method-args\">(action, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Simulate a POST request with the given parameters and set/volley the response. See <code>get</code> for more details.</p> <div class=\"method-source-code\" id=\"post-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 513\ndef post(action, *args)\n  process(action, \"POST\", *args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-process\"> <span class=\"method-name\">process</span><span class=\"method-args\">(action, http_method = 'GET', *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Simulate a HTTP request to <code>action</code> by specifying request method, parameters and set/volley the response.</p> <ul>\n<li> <p><code>action</code>: The controller action to call.</p> </li>\n<li> <p><code>http_method</code>: Request method used to send the http request. Possible values are <code>GET</code>, <code>POST</code>, <code>PATCH</code>, <code>PUT</code>, <code>DELETE</code>, <code>HEAD</code>. Defaults to <code>GET</code>.</p> </li>\n<li> <p><code>parameters</code>: The HTTP parameters. This may be <code>nil</code>, a hash, or a string that is appropriately encoded (<code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>).</p> </li>\n<li> <p><code>session</code>: A hash of parameters to store in the session. This may be <code>nil</code>.</p> </li>\n<li> <p><code>flash</code>: A hash of parameters to store in the flash. This may be <code>nil</code>.</p> </li>\n</ul> <p>Example calling <code>create</code> action and sending two params:</p> <pre class=\"ruby\">process :create, 'POST', user: { name: 'Gaurish Sharma', email: 'user@example.com' }\n</pre> <p>Example sending parameters, <code>nil</code> session and setting a flash message:</p> <pre class=\"ruby\">process :view, 'GET', { id: 7 }, nil, { notice: 'This is flash message' }\n</pre> <p>To simulate <code>GET</code>, <code>POST</code>, <code>PATCH</code>, <code>PUT</code>, <code>DELETE</code> and <code>HEAD</code> requests prefer using <a href=\"behavior#method-i-get\">get</a>, <a href=\"behavior#method-i-post\">post</a>, <a href=\"behavior#method-i-patch\">patch</a>, <a href=\"behavior#method-i-put\">put</a>, <a href=\"behavior#method-i-delete\">delete</a> and <a href=\"behavior#method-i-head\">head</a> methods respectively which will make tests more expressive.</p> <p>Note that the request method is not verified.</p> <div class=\"method-source-code\" id=\"process-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 589\ndef process(action, http_method = 'GET', *args)\n  check_required_ivars\n\n  if args.first.is_a?(String) &amp;&amp; http_method != 'HEAD'\n    @request.env['RAW_POST_DATA'] = args.shift\n  end\n\n  parameters, session, flash = args\n  parameters ||= {}\n\n  # Ensure that numbers and symbols passed as params are converted to\n  # proper params, as is the case when engaging rack.\n  parameters = paramify_values(parameters) if html_format?(parameters)\n\n  @html_document = nil\n\n  unless @controller.respond_to?(:recycle!)\n    @controller.extend(Testing::Functional)\n  end\n\n  @request.recycle!\n  @response.recycle!\n  @controller.recycle!\n\n  @request.env['REQUEST_METHOD'] = http_method\n\n  controller_class_name = @controller.class.anonymous? ?\n    \"anonymous\" :\n    @controller.class.controller_path\n\n  @request.assign_parameters(@routes, controller_class_name, action.to_s, parameters)\n\n  @request.session.update(session) if session\n  @request.flash.update(flash || {})\n\n  @controller.request  = @request\n  @controller.response = @response\n\n  build_request_uri(action, parameters)\n\n  name = @request.parameters[:action]\n\n  @controller.recycle!\n  @controller.process(name)\n\n  if cookies = @request.env['action_dispatch.cookies']\n    unless @response.committed?\n      cookies.write(@response)\n    end\n  end\n  @response.prepare!\n\n  @assigns = @controller.respond_to?(:view_assigns) ? @controller.view_assigns : {}\n\n  if flash_value = @request.flash.to_session_value\n    @request.session['flash'] = flash_value\n  end\n\n  @response\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-put\"> <span class=\"method-name\">put</span><span class=\"method-args\">(action, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Simulate a PUT request with the given parameters and set/volley the response. See <code>get</code> for more details.</p> <div class=\"method-source-code\" id=\"put-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 525\ndef put(action, *args)\n  process(action, \"PUT\", *args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-setup_controller_request_and_response\"> <span class=\"method-name\">setup_controller_request_and_response</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"setup_controller_request_and_response-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 650\ndef setup_controller_request_and_response\n  @controller = nil unless defined? @controller\n\n  response_klass = TestResponse\n\n  if klass = self.class.controller_class\n    if klass &lt; ActionController::Live\n      response_klass = LiveTestResponse\n    end\n    unless @controller\n      begin\n        @controller = klass.new\n      rescue\n        warn \"could not construct controller #{klass}\" if $VERBOSE\n      end\n    end\n  end\n\n  @request          = build_request\n  @response         = build_response response_klass\n  @response.request = @request\n\n  if @controller\n    @controller.request = @request\n    @controller.params = {}\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-xhr\"> <span class=\"method-name\">xhr</span><span class=\"method-args\">(request_method, action, parameters = nil, session = nil, flash = nil)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"behavior#method-i-xml_http_request\">xml_http_request</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xml_http_request\"> <span class=\"method-name\">xml_http_request</span><span class=\"method-args\">(request_method, action, parameters = nil, session = nil, flash = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"xml_http_request-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 541\ndef xml_http_request(request_method, action, parameters = nil, session = nil, flash = nil)\n  @request.env['HTTP_X_REQUESTED_WITH'] = 'XMLHttpRequest'\n  @request.env['HTTP_ACCEPT'] ||=  [Mime::JS, Mime::HTML, Mime::XML, 'text/xml', Mime::ALL].join(', ')\n  __send__(request_method, action, parameters, session, flash).tap do\n    @request.env.delete 'HTTP_X_REQUESTED_WITH'\n    @request.env.delete 'HTTP_ACCEPT'\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"behavior#method-i-xhr\">xhr</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/testcase/behavior/classmethods":"<h1 id=\"module-ActionController::TestCase::Behavior::ClassMethods\" class=\"module\"> module ActionController::TestCase::Behavior::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-controller_class\"> <span class=\"method-name\">controller_class</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"controller_class-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 478\ndef controller_class\n  if current_controller_class = self._controller_class\n    current_controller_class\n  else\n    self.controller_class = determine_default_controller_class(name)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-controller_class-3D\"> <span class=\"method-name\">controller_class=</span><span class=\"method-args\">(new_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"controller_class-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 474\ndef controller_class=(new_class)\n  self._controller_class = new_class\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-determine_default_controller_class\"> <span class=\"method-name\">determine_default_controller_class</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"determine_default_controller_class-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 486\ndef determine_default_controller_class(name)\n  determine_constant_from_test_name(name) do |constant|\n    Class === constant &amp;&amp; constant &lt; ActionController::Metal\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tests\"> <span class=\"method-name\">tests</span><span class=\"method-args\">(controller_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the controller class name. Useful if the name can't be inferred from test class. Normalizes <code>controller_class</code> before using.</p> <pre class=\"ruby\">tests WidgetController\ntests :widget\ntests 'widget'\n</pre> <div class=\"method-source-code\" id=\"tests-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/test_case.rb, line 463\ndef tests(controller_class)\n  case controller_class\n  when String, Symbol\n    self.controller_class = \"#{controller_class.to_s.camelize}Controller\".constantize\n  when Class\n    self.controller_class = controller_class\n  else\n    raise ArgumentError, \"controller class must be a String, Symbol, or Class\"\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/unpermittedparameters":"<h1 id=\"class-ActionController::UnpermittedParameters\" class=\"class\"> class ActionController::UnpermittedParameters </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">IndexError</dd>\n</dl> <section class=\"description\"> <p>Raised when a supplied parameter is not expected and ActionController::Parameters.action_on_unpermitted_parameters is set to <code>:raise</code>.</p> <pre class=\"ruby\">params = ActionController::Parameters.new(a: \"123\", b: \"456\")\nparams.permit(:c)\n# =&gt; ActionController::UnpermittedParameters: found unpermitted parameters: a, b\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actioncontroller/urlfor":"<h1 id=\"module-ActionController::UrlFor\" class=\"module\"> module ActionController::UrlFor </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><span class=\"include\">AbstractController::UrlFor</span></dd>\n</dl> <section class=\"description\"> <p>Includes <code>url_for</code> into the host class. The class has to provide a <code>RouteSet</code> by implementing the <code>_routes</code> method. Otherwise, an exception will be raised.</p> <p>In addition to <code>AbstractController::UrlFor</code>, this module accesses the HTTP layer to define url options like the <code>host</code>. In order to do so, this module requires the host class to implement <code>env</code> and <code>request</code>, which need to be a Rack-compatible.</p> <pre class=\"ruby\">class RootUrl\n  include ActionController::UrlFor\n  include Rails.application.routes.url_helpers\n\n  delegate :env, :request, to: :controller\n\n  def initialize(controller)\n    @controller = controller\n    @url        = root_path # named route from the application.\n  end\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url_options\"> <span class=\"method-name\">url_options</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"url_options-source\"> <pre class=\"ruby\"># File actionpack/lib/action_controller/metal/url_for.rb, line 25\ndef url_options\n  @_url_options ||= {\n    :host =&gt; request.host,\n    :port =&gt; request.optional_port,\n    :protocol =&gt; request.protocol,\n    :_recall =&gt; request.path_parameters\n  }.merge!(super).freeze\n\n  if (same_origin = _routes.equal?(env[\"action_dispatch.routes\".freeze])) ||\n     (script_name = env[\"ROUTES_#{_routes.object_id}_SCRIPT_NAME\"]) ||\n     (original_script_name = env['ORIGINAL_SCRIPT_NAME'.freeze])\n\n    options = @_url_options.dup\n    if original_script_name\n      options[:original_script_name] = original_script_name\n    else\n      options[:script_name] = same_origin ? request.script_name.dup : script_name\n    end\n    options.freeze\n  else\n    @_url_options\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/assertions/responseassertions":"<h1 id=\"module-ActionDispatch::Assertions::ResponseAssertions\" class=\"module\"> module ActionDispatch::Assertions::ResponseAssertions </h1> <section class=\"description\"> <p>A small suite of assertions that test responses from Rails applications.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_redirected_to\"> <span class=\"method-name\">assert_redirected_to</span><span class=\"method-args\">(options = {}, message=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Assert that the redirection options passed in match those of the redirect called in the latest action. This match can be partial, such that <code>assert_redirected_to(controller: \"weblog\")</code> will also match the redirection of <code>redirect_to(controller: \"weblog\",\naction: \"show\")</code> and so on.</p> <pre class=\"ruby\"># assert that the redirection was to the \"index\" action on the WeblogController\nassert_redirected_to controller: \"weblog\", action: \"index\"\n\n# assert that the redirection was to the named route login_url\nassert_redirected_to login_url\n\n# assert that the redirection was to the url for @customer\nassert_redirected_to @customer\n\n# asserts that the redirection matches the regular expression\nassert_redirected_to %r(\\Ahttp://example.org)\n</pre> <div class=\"method-source-code\" id=\"assert_redirected_to-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/assertions/response.rb, line 55\ndef assert_redirected_to(options = {}, message=nil)\n  assert_response(:redirect, message)\n  return true if options === @response.location\n\n  redirect_is       = normalize_argument_to_redirection(@response.location)\n  redirect_expected = normalize_argument_to_redirection(options)\n\n  message ||= \"Expected response to be a redirect to &lt;#{redirect_expected}&gt; but was a redirect to &lt;#{redirect_is}&gt;\"\n  assert_operator redirect_expected, :===, redirect_is, message\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_response\"> <span class=\"method-name\">assert_response</span><span class=\"method-args\">(type, message = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that the response is one of the following types:</p> <ul>\n<li> <p><code>:success</code> - Status code was in the 200-299 range</p> </li>\n<li> <p><code>:redirect</code> - Status code was in the 300-399 range</p> </li>\n<li> <p><code>:missing</code> - Status code was 404</p> </li>\n<li> <p><code>:error</code> - Status code was in the 500-599 range</p> </li>\n</ul> <p>You can also pass an explicit status number like <code>assert_response(501)</code> or its symbolic equivalent <code>assert_response(:not_implemented)</code>. See Rack::Utils::SYMBOL_TO_STATUS_CODE for a full list.</p> <pre class=\"ruby\"># assert that the response was a redirection\nassert_response :redirect\n\n# assert that the response code was status code 401 (unauthorized)\nassert_response 401\n</pre> <div class=\"method-source-code\" id=\"assert_response-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/assertions/response.rb, line 22\ndef assert_response(type, message = nil)\n  message ||= \"Expected response to be a &lt;#{type}&gt;, but was &lt;#{@response.response_code}&gt;\"\n\n  if Symbol === type\n    if [:success, :missing, :redirect, :error].include?(type)\n      assert @response.send(\"#{type}?\"), message\n    else\n      code = Rack::Utils::SYMBOL_TO_STATUS_CODE[type]\n      if code.nil?\n        raise ArgumentError, \"Invalid response type :#{type}\"\n      end\n      assert_equal code, @response.response_code, message\n    end\n  else\n    assert_equal type, @response.response_code, message\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/assertions/routingassertions":"<h1 id=\"module-ActionDispatch::Assertions::RoutingAssertions\" class=\"module\"> module ActionDispatch::Assertions::RoutingAssertions </h1> <section class=\"description\"> <p>Suite of assertions to test routes generated by Rails and the handling of requests made to them.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_generates\"> <span class=\"method-name\">assert_generates</span><span class=\"method-args\">(expected_path, options, defaults={}, extras={}, message=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that the provided options can be used to generate the provided path. This is the inverse of <code>assert_recognizes</code>. The <code>extras</code> parameter is used to tell the request the names and values of additional request parameters that would be in a query string. The <code>message</code> parameter allows you to specify a custom error message for assertion failures.</p> <p>The <code>defaults</code> parameter is unused.</p> <pre class=\"ruby\"># Asserts that the default action is generated for a route with no action\nassert_generates \"/items\", controller: \"items\", action: \"index\"\n\n# Tests that the list action is properly routed\nassert_generates \"/items/list\", controller: \"items\", action: \"list\"\n\n# Tests the generation of a route with a parameter\nassert_generates \"/items/list/1\", { controller: \"items\", action: \"list\", id: \"1\" }\n\n# Asserts that the generated route gives us our custom route\nassert_generates \"changesets/12\", { controller: 'scm', action: 'show_diff', revision: \"12\" }\n</pre> <div class=\"method-source-code\" id=\"assert_generates-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/assertions/routing.rb, line 78\ndef assert_generates(expected_path, options, defaults={}, extras={}, message=nil)\n  if expected_path =~ %r{://}\n    fail_on(URI::InvalidURIError, message) do\n      uri = URI.parse(expected_path)\n      expected_path = uri.path.to_s.empty? ? \"/\" : uri.path\n    end\n  else\n    expected_path = \"/#{expected_path}\" unless expected_path.first == '/'\n  end\n  # Load routes.rb if it hasn't been loaded.\n\n  generated_path, extra_keys = @routes.generate_extras(options, defaults)\n  found_extras = options.reject { |k, _| ! extra_keys.include? k }\n\n  msg = message || sprintf(\"found extras &lt;%s&gt;, not &lt;%s&gt;\", found_extras, extras)\n  assert_equal(extras, found_extras, msg)\n\n  msg = message || sprintf(\"The generated path &lt;%s&gt; did not match &lt;%s&gt;\", generated_path,\n      expected_path)\n  assert_equal(expected_path, generated_path, msg)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_recognizes\"> <span class=\"method-name\">assert_recognizes</span><span class=\"method-args\">(expected_options, path, extras={}, msg=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that the routing of the given <code>path</code> was handled correctly and that the parsed options (given in the <code>expected_options</code> hash) match <code>path</code>. Basically, it asserts that Rails recognizes the route given by <code>expected_options</code>.</p> <p>Pass a hash in the second argument (<code>path</code>) to specify the request method. This is useful for routes requiring a specific HTTP method. The hash should contain a :path with the incoming request path and a :method containing the required HTTP verb.</p> <pre class=\"ruby\"># assert that POSTing to /items will call the create action on ItemsController\nassert_recognizes({controller: 'items', action: 'create'}, {path: 'items', method: :post})\n</pre> <p>You can also pass in <code>extras</code> with a hash containing URL parameters that would normally be in the query string. This can be used to assert that values in the query string string will end up in the params hash correctly. To test query strings you must use the extras argument, appending the query string on the path directly will not work. For example:</p> <pre class=\"ruby\"># assert that a path of '/items/list/1?view=print' returns the correct options\nassert_recognizes({controller: 'items', action: 'list', id: '1', view: 'print'}, 'items/list/1', { view: \"print\" })\n</pre> <p>The <code>message</code> parameter allows you to pass in an error message that is displayed upon failure.</p> <pre class=\"ruby\"># Check the default route (i.e., the index action)\nassert_recognizes({controller: 'items', action: 'index'}, 'items')\n\n# Test a specific action\nassert_recognizes({controller: 'items', action: 'list'}, 'items/list')\n\n# Test an action with a parameter\nassert_recognizes({controller: 'items', action: 'destroy', id: '1'}, 'items/destroy/1')\n\n# Test a custom route\nassert_recognizes({controller: 'items', action: 'show', id: '1'}, 'view/item1')\n</pre> <div class=\"method-source-code\" id=\"assert_recognizes-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/assertions/routing.rb, line 40\ndef assert_recognizes(expected_options, path, extras={}, msg=nil)\n  if path.is_a?(Hash) &amp;&amp; path[:method].to_s == \"all\"\n    [:get, :post, :put, :delete].each do |method|\n      assert_recognizes(expected_options, path.merge(method: method), extras, msg)\n    end\n  else\n    request = recognized_request_for(path, extras, msg)\n\n    expected_options = expected_options.clone\n\n    expected_options.stringify_keys!\n\n    msg = message(msg, \"\") {\n      sprintf(\"The recognized options &lt;%s&gt; did not match &lt;%s&gt;, difference:\",\n              request.path_parameters, expected_options)\n    }\n\n    assert_equal(expected_options, request.path_parameters, msg)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_routing\"> <span class=\"method-name\">assert_routing</span><span class=\"method-args\">(path, options, defaults={}, extras={}, message=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that path and options match both ways; in other words, it verifies that <code>path</code> generates <code>options</code> and then that <code>options</code> generates <code>path</code>. This essentially combines <code>assert_recognizes</code> and <code>assert_generates</code> into one step.</p> <p>The <code>extras</code> hash allows you to specify options that would normally be provided as a query string to the action. The <code>message</code> parameter allows you to specify a custom error message to display upon failure.</p> <pre class=\"ruby\"># Assert a basic route: a controller with the default action (index)\nassert_routing '/home', controller: 'home', action: 'index'\n\n# Test a route generated with a specific controller, action, and parameter (id)\nassert_routing '/entries/show/23', controller: 'entries', action: 'show', id: 23\n\n# Assert a basic route (controller + default action), with an error message if it fails\nassert_routing '/store', { controller: 'store', action: 'index' }, {}, {}, 'Route for store index not generated properly'\n\n# Tests a route, providing a defaults hash\nassert_routing 'controller/action/9', {id: \"9\", item: \"square\"}, {controller: \"controller\", action: \"action\"}, {}, {item: \"square\"}\n\n# Tests a route with a HTTP method\nassert_routing({ method: 'put', path: '/product/321' }, { controller: \"product\", action: \"update\", id: \"321\" })\n</pre> <div class=\"method-source-code\" id=\"assert_routing-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/assertions/routing.rb, line 121\ndef assert_routing(path, options, defaults={}, extras={}, message=nil)\n  assert_recognizes(options, path, extras, message)\n\n  controller, default_controller = options[:controller], defaults[:controller]\n  if controller &amp;&amp; controller.include?(?/) &amp;&amp; default_controller &amp;&amp; default_controller.include?(?/)\n    options[:controller] = \"/#{controller}\"\n  end\n\n  generate_options = options.dup.delete_if{ |k, _| defaults.key?(k) }\n  assert_generates(path.is_a?(Hash) ? path[:path] : path, generate_options, defaults, extras, message)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method_missing\"> <span class=\"method-name\">method_missing</span><span class=\"method-args\">(selector, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>ROUTES TODO: These assertions should really work in an integration context</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"method_missing-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/assertions/routing.rb, line 167\ndef method_missing(selector, *args, &amp;block)\n  if defined?(@controller) &amp;&amp; @controller &amp;&amp; @routes &amp;&amp; @routes.named_routes.route_defined?(selector)\n    @controller.send(selector, *args, &amp;block)\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_routing\"> <span class=\"method-name\">with_routing</span><span class=\"method-args\">() { |routes| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A helper to make it easier to test different route configurations. This method temporarily replaces @routes with a new RouteSet instance.</p> <p>The new instance is yielded to the passed block. Typically the block will create some routes using <code>set.draw { match ... }</code>:</p> <pre class=\"ruby\">with_routing do |set|\n  set.draw do\n    resources :users\n  end\n  assert_equal \"/users\", users_path\nend\n</pre> <div class=\"method-source-code\" id=\"with_routing-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/assertions/routing.rb, line 147\ndef with_routing\n  old_routes, @routes = @routes, ActionDispatch::Routing::RouteSet.new\n  if defined?(@controller) &amp;&amp; @controller\n    old_controller, @controller = @controller, @controller.clone\n    _routes = @routes\n\n    @controller.singleton_class.send(:include, _routes.url_helpers)\n    @controller.view_context_class = Class.new(@controller.view_context_class) do\n      include _routes.url_helpers\n    end\n  end\n  yield @routes\nensure\n  @routes = old_routes\n  if defined?(@controller) &amp;&amp; @controller\n    @controller = old_controller\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/callbacks":"<h1 id=\"class-ActionDispatch::Callbacks\" class=\"class\"> class ActionDispatch::Callbacks </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../activesupport/callbacks\">ActiveSupport::Callbacks</a></dd>\n</dl> <section class=\"description\"> <p>Provides callbacks to be executed before and after dispatching the request.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-after\"> <span class=\"method-name\">after</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"after-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/callbacks.rb, line 16\ndef after(*args, &amp;block)\n  set_callback(:call, :after, *args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-before\"> <span class=\"method-name\">before</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"before-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/callbacks.rb, line 12\ndef before(*args, &amp;block)\n  set_callback(:call, :before, *args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(app)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/callbacks.rb, line 21\ndef initialize(app)\n  @app = app\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/callbacks.rb, line 25\ndef call(env)\n  error = nil\n  result = run_callbacks :call do\n    begin\n      @app.call(env)\n    rescue =&gt; error\n    end\n  end\n  raise error if error\n  result\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/cookies":"<h1 id=\"class-ActionDispatch::Cookies\" class=\"class\"> class ActionDispatch::Cookies </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Cookies are read and written through ActionController#cookies.</p> <p>The cookies being read are the ones received along with the request, the cookies being written will be sent out with the response. Reading a cookie does not get the cookie object itself back, just the value it holds.</p> <p>Examples of writing:</p> <pre class=\"ruby\"># Sets a simple session cookie.\n# This cookie will be deleted when the user's browser is closed.\ncookies[:user_name] = \"david\"\n\n# Cookie values are String based. Other data types need to be serialized.\ncookies[:lat_lon] = JSON.generate([47.68, -122.37])\n\n# Sets a cookie that expires in 1 hour.\ncookies[:login] = { value: \"XJ-122\", expires: 1.hour.from_now }\n\n# Sets a signed cookie, which prevents users from tampering with its value.\n# The cookie is signed by your app's `secrets.secret_key_base` value.\n# It can be read using the signed method `cookies.signed[:name]`\ncookies.signed[:user_id] = current_user.id\n\n# Sets a \"permanent\" cookie (which expires in 20 years from now).\ncookies.permanent[:login] = \"XJ-122\"\n\n# You can also chain these methods:\ncookies.permanent.signed[:login] = \"XJ-122\"\n</pre> <p>Examples of reading:</p> <pre class=\"ruby\">cookies[:user_name]           # =&gt; \"david\"\ncookies.size                  # =&gt; 2\nJSON.parse(cookies[:lat_lon]) # =&gt; [47.68, -122.37]\ncookies.signed[:login]        # =&gt; \"XJ-122\"\n</pre> <p>Example for deleting:</p> <pre class=\"ruby\">cookies.delete :user_name\n</pre> <p>Please note that if you specify a :domain when setting a cookie, you must also specify the domain when deleting the cookie:</p> <pre class=\"ruby\">cookies[:name] = {\n  value: 'a yummy cookie',\n  expires: 1.year.from_now,\n  domain: 'domain.com'\n}\n\ncookies.delete(:name, domain: 'domain.com')\n</pre> <p>The option symbols for setting cookies are:</p> <ul>\n<li> <p><code>:value</code> - The cookie's value.</p> </li>\n<li> <p><code>:path</code> - The path for which this cookie applies. Defaults to the root of the application.</p> </li>\n<li> <p><code>:domain</code> - The domain for which this cookie applies so you can restrict to the domain level. If you use a schema like <a href=\"www.example.com\">www.example.com</a> and want to share session with user.example.com set <code>:domain</code> to <code>:all</code>. Make sure to specify the <code>:domain</code> option with <code>:all</code> or <code>Array</code> again when deleting cookies.</p> <pre>domain: nil  # Does not sets cookie domain. (default)\ndomain: :all # Allow the cookie for the top most level\n             # domain and subdomains.\ndomain: %w(.example.com .example.org) # Allow the cookie\n                                      # for concrete domain names.</pre> </li>\n<li> <p><code>:expires</code> - The time at which this cookie expires, as a Time object.</p> </li>\n<li> <p><code>:secure</code> - Whether this cookie is only transmitted to HTTPS servers. Default is <code>false</code>.</p> </li>\n<li> <p><code>:httponly</code> - Whether this cookie is accessible via scripting or only HTTP. Defaults to <code>false</code>.</p> </li>\n</ul> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"COOKIES_DIGEST\">COOKIES_DIGEST </dt>\n\n<dt id=\"COOKIES_SERIALIZER\">COOKIES_SERIALIZER </dt>\n\n<dt id=\"CookieOverflow\">CookieOverflow </dt>\n<dd>\n<p>Raised when storing more than 4K of session data.</p> </dd>\n<dt id=\"ENCRYPTED_COOKIE_SALT\">ENCRYPTED_COOKIE_SALT </dt>\n\n<dt id=\"ENCRYPTED_SIGNED_COOKIE_SALT\">ENCRYPTED_SIGNED_COOKIE_SALT </dt>\n\n<dt id=\"GENERATOR_KEY\">GENERATOR_KEY </dt>\n\n<dt id=\"HTTP_HEADER\">HTTP_HEADER </dt>\n\n<dt id=\"MAX_COOKIE_SIZE\">MAX_COOKIE_SIZE </dt>\n<dd>\n<p><a href=\"cookies\">Cookies</a> can typically store 4096 bytes.</p> </dd>\n<dt id=\"SECRET_KEY_BASE\">SECRET_KEY_BASE </dt>\n\n<dt id=\"SECRET_TOKEN\">SECRET_TOKEN </dt>\n\n<dt id=\"SIGNED_COOKIE_SALT\">SIGNED_COOKIE_SALT </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(app)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/cookies.rb, line 555\ndef initialize(app)\n  @app = app\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/cookies.rb, line 559\ndef call(env)\n  status, headers, body = @app.call(env)\n\n  if cookie_jar = env['action_dispatch.cookies']\n    unless cookie_jar.committed?\n      cookie_jar.write(headers)\n      if headers[HTTP_HEADER].respond_to?(:join)\n        headers[HTTP_HEADER] = headers[HTTP_HEADER].join(\"\\n\")\n      end\n    end\n  end\n\n  [status, headers, body]\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/cookies/chainedcookiejars":"<h1 id=\"module-ActionDispatch::Cookies::ChainedCookieJars\" class=\"module\"> module ActionDispatch::Cookies::ChainedCookieJars </h1> <section class=\"description\"> <p>Include in a cookie jar to allow chaining, e.g. cookies.permanent.signed</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encrypted\"> <span class=\"method-name\">encrypted</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a jar that'll automatically encrypt cookie values before sending them to the client and will decrypt them for read. If the cookie was tampered with by the user (or a 3rd party), nil will be returned.</p> <p>If <code>secrets.secret_key_base</code> and <code>secrets.secret_token</code> (deprecated) are both set, legacy cookies signed with the old key generator will be transparently upgraded.</p> <p>This jar requires that you set a suitable secret for the verification on your app's <code>secrets.secret_key_base</code>.</p> <p>Example:</p> <pre class=\"ruby\">cookies.encrypted[:discount] = 45\n# =&gt; Set-Cookie: discount=ZS9ZZ1R4cG1pcUJ1bm80anhQang3dz09LS1mbDZDSU5scGdOT3ltQ2dTdlhSdWpRPT0%3D--ab54663c9f4e3bc340c790d6d2b71e92f5b60315; path=/\n\ncookies.encrypted[:discount] # =&gt; 45\n</pre> <div class=\"method-source-code\" id=\"encrypted-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/cookies.rb, line 159\ndef encrypted\n  @encrypted ||=\n    if @options[:upgrade_legacy_signed_cookies]\n      UpgradeLegacyEncryptedCookieJar.new(self, @key_generator, @options)\n    else\n      EncryptedCookieJar.new(self, @key_generator, @options)\n    end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-permanent\"> <span class=\"method-name\">permanent</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a jar that'll automatically set the assigned cookies to have an expiration date 20 years from now. Example:</p> <pre class=\"ruby\">cookies.permanent[:prefers_open_id] = true\n# =&gt; Set-Cookie: prefers_open_id=true; path=/; expires=Sun, 16-Dec-2029 03:24:16 GMT\n</pre> <p>This jar is only meant for writing. You'll read permanent cookies through the regular accessor.</p> <p>This jar allows chaining with the signed jar as well, so you can set permanent, signed cookies. Examples:</p> <pre class=\"ruby\">cookies.permanent.signed[:remember_me] = current_user.id\n# =&gt; Set-Cookie: remember_me=BAhU--848956038e692d7046deab32b7131856ab20e14e; path=/; expires=Sun, 16-Dec-2029 03:24:16 GMT\n</pre> <div class=\"method-source-code\" id=\"permanent-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/cookies.rb, line 117\ndef permanent\n  @permanent ||= PermanentCookieJar.new(self, @key_generator, @options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-signed\"> <span class=\"method-name\">signed</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a jar that'll automatically generate a signed representation of cookie value and verify it when reading from the cookie again. This is useful for creating cookies with values that the user is not supposed to change. If a signed cookie was tampered with by the user (or a 3rd party), nil will be returned.</p> <p>If <code>secrets.secret_key_base</code> and <code>secrets.secret_token</code> (deprecated) are both set, legacy cookies signed with the old key generator will be transparently upgraded.</p> <p>This jar requires that you set a suitable secret for the verification on your app's <code>secrets.secret_key_base</code>.</p> <p>Example:</p> <pre class=\"ruby\">cookies.signed[:discount] = 45\n# =&gt; Set-Cookie: discount=BAhpMg==--2c1c6906c90a3bc4fd54a51ffb41dffa4bf6b5f7; path=/\n\ncookies.signed[:discount] # =&gt; 45\n</pre> <div class=\"method-source-code\" id=\"signed-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/cookies.rb, line 136\ndef signed\n  @signed ||=\n    if @options[:upgrade_legacy_signed_cookies]\n      UpgradeLegacySignedCookieJar.new(self, @key_generator, @options)\n    else\n      SignedCookieJar.new(self, @key_generator, @options)\n    end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-signed_or_encrypted\"> <span class=\"method-name\">signed_or_encrypted</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the <code>signed</code> or <code>encrypted</code> jar, preferring <code>encrypted</code> if <code>secret_key_base</code> is set. Used by <a href=\"../session/cookiestore\">ActionDispatch::Session::CookieStore</a> to avoid the need to introduce new cookie stores.</p> <div class=\"method-source-code\" id=\"signed_or_encrypted-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/cookies.rb, line 170\ndef signed_or_encrypted\n  @signed_or_encrypted ||=\n    if @options[:secret_key_base].present?\n      encrypted\n    else\n      signed\n    end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/filehandler":"<h1 id=\"class-ActionDispatch::FileHandler\" class=\"class\"> class ActionDispatch::FileHandler </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>This middleware returns a file's contents from disk in the body response. When initialized it can accept an optional 'Cache-Control' header which will be set when a response containing a file's contents is delivered.</p> <p>This middleware will render the file specified in `<a href=\"filehandler\" path_info>env</a>` where the base path is in the <code>root</code> directory. For example if the <code>root</code> is set to `public/` then a request with `<a href=\"filehandler\" path_info>env</a>` of `assets/application.js` will return a response with contents of a file located at `public/assets/application.js` if the file exists. If the file does not exist a 404 “File not Found” response will be returned.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(root, cache_control)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/static.rb, line 16\ndef initialize(root, cache_control)\n  @root          = root.chomp('/')\n  @compiled_root = /^#{Regexp.escape(root)}/\n  headers        = cache_control &amp;&amp; { 'Cache-Control' =&gt; cache_control }\n  @file_server = ::Rack::File.new(@root, headers)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/static.rb, line 44\ndef call(env)\n  path      = env['PATH_INFO']\n  gzip_path = gzip_file_path(path)\n\n  if gzip_path &amp;&amp; gzip_encoding_accepted?(env)\n    env['PATH_INFO']            = gzip_path\n    status, headers, body       = @file_server.call(env)\n    if status == 304\n      return [status, headers, body]\n    end\n    headers['Content-Encoding'] = 'gzip'\n    headers['Content-Type']     = content_type(path)\n  else\n    status, headers, body = @file_server.call(env)\n  end\n\n  headers['Vary'] = 'Accept-Encoding' if gzip_path\n\n  return [status, headers, body]\nensure\n  env['PATH_INFO'] = path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-match-3F\"> <span class=\"method-name\">match?</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"match-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/static.rb, line 23\ndef match?(path)\n  path = URI.parser.unescape(path)\n  return false unless path.valid_encoding?\n\n  paths = [path, \"#{path}#{ext}\", \"#{path}/index#{ext}\"].map { |v|\n    Rack::Utils.clean_path_info v\n  }\n\n  if match = paths.detect { |p|\n    path = File.join(@root, p.force_encoding('UTF-8'))\n    begin\n      File.file?(path) &amp;&amp; File.readable?(path)\n    rescue SystemCallError\n      false\n    end\n\n  }\n    return ::Rack::Utils.escape(match)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/flash":"<h1 id=\"class-ActionDispatch::Flash\" class=\"class\"> class ActionDispatch::Flash </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>The flash provides a way to pass temporary primitive-types (String, <a href=\"../array\">Array</a>, <a href=\"../hash\">Hash</a>) between actions. Anything you place in the flash will be exposed to the very next action and then cleared out. This is a great way of doing notices and alerts, such as a create action that sets <code>flash[:notice] = \"Post\nsuccessfully created\"</code> before redirecting to a display action that can then expose the flash to its template. Actually, that exposure is automatically done.</p> <pre>class PostsController &lt; ActionController::Base\n  def create\n    # save post\n    flash[:notice] = \"Post successfully created\"\n    redirect_to @post\n  end\n\n  def show\n    # doesn't need to assign the flash notice to the template, that's done automatically\n  end\nend\n\nshow.html.erb\n  &lt;% if flash[:notice] %&gt;\n    &lt;div class=\"notice\"&gt;&lt;%= flash[:notice] %&gt;&lt;/div&gt;\n  &lt;% end %&gt;</pre> <p>Since the <code>notice</code> and <code>alert</code> keys are a common idiom, convenience accessors are available:</p> <pre class=\"ruby\">flash.alert = \"You must be logged in\"\nflash.notice = \"Post successfully created\"\n</pre> <p>This example places a string in the flash. And of course, you can put as many as you like at a time too. If you want to pass non-primitive types, you will have to handle that in your application. Example: To show messages with links, you will have to use sanitize helper.</p> <p>Just remember: They'll be gone by the time the next action has been performed.</p> <p>See docs on the <a href=\"flash/flashhash\">FlashHash</a> class for more details about the flash.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"KEY\">KEY </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(app)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 255\ndef initialize(app)\n  @app = app\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 259\ndef call(env)\n  @app.call(env)\nensure\n  session    = Request::Session.find(env) || {}\n  flash_hash = env[KEY]\n\n  if flash_hash &amp;&amp; (flash_hash.present? || session.key?('flash'))\n    session[\"flash\"] = flash_hash.to_session_value\n    env[KEY] = flash_hash.dup\n  end\n\n  if (!session.respond_to?(:loaded?) || session.loaded?) &amp;&amp; # (reset_session uses {}, which doesn't implement #loaded?)\n    session.key?('flash') &amp;&amp; session['flash'].nil?\n    session.delete('flash')\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/flash/flashhash":"<h1 id=\"class-ActionDispatch::Flash::FlashHash\" class=\"class\"> class ActionDispatch::Flash::FlashHash </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../../enumerable\">Enumerable</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(k)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 123\ndef [](k)\n  @flashes[k.to_s]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(k, v)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 117\ndef []=(k, v)\n  k = k.to_s\n  @discard.delete k\n  @flashes[k] = v\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-alert\"> <span class=\"method-name\">alert</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience accessor for <code>flash[:alert]</code>.</p> <div class=\"method-source-code\" id=\"alert-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 224\ndef alert\n  self[:alert]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-alert-3D\"> <span class=\"method-name\">alert=</span><span class=\"method-args\">(message)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience accessor for <code>flash[:alert]=</code>.</p> <div class=\"method-source-code\" id=\"alert-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 229\ndef alert=(message)\n  self[:alert] = message\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 156\ndef clear\n  @discard.clear\n  @flashes.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 141\ndef delete(key)\n  key = key.to_s\n  @discard.delete key\n  @flashes.delete key\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-discard\"> <span class=\"method-name\">discard</span><span class=\"method-args\">(k = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Marks the entire flash or a single flash entry to be discarded by the end of the current action:</p> <pre class=\"ruby\">flash.discard              # discard the entire flash at the end of the current action\nflash.discard(:warning)    # discard only the \"warning\" entry at the end of the current action\n</pre> <div class=\"method-source-code\" id=\"discard-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 209\ndef discard(k = nil)\n  k = k.to_s if k\n  @discard.merge Array(k || keys)\n  k ? self[k] : self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 161\ndef each(&amp;block)\n  @flashes.each(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-empty-3F\"> <span class=\"method-name\">empty?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"empty-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 152\ndef empty?\n  @flashes.empty?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initialize_copy\"> <span class=\"method-name\">initialize_copy</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"initialize_copy-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 109\ndef initialize_copy(other)\n  if other.now_is_loaded?\n    @now = other.now.dup\n    @now.flash = self\n  end\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-keep\"> <span class=\"method-name\">keep</span><span class=\"method-args\">(k = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Keeps either the entire current flash or a specific flash entry available for the next action:</p> <pre class=\"ruby\">flash.keep            # keeps the entire flash\nflash.keep(:notice)   # keeps only the \"notice\" entry, the rest of the flash is discarded\n</pre> <div class=\"method-source-code\" id=\"keep-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 199\ndef keep(k = nil)\n  k = k.to_s if k\n  @discard.subtract Array(k || keys)\n  k ? self[k] : self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-key-3F\"> <span class=\"method-name\">key?</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"key-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 137\ndef key?(name)\n  @flashes.key? name.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-keys\"> <span class=\"method-name\">keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"keys-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 133\ndef keys\n  @flashes.keys\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-notice\"> <span class=\"method-name\">notice</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience accessor for <code>flash[:notice]</code>.</p> <div class=\"method-source-code\" id=\"notice-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 234\ndef notice\n  self[:notice]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-notice-3D\"> <span class=\"method-name\">notice=</span><span class=\"method-args\">(message)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience accessor for <code>flash[:notice]=</code>.</p> <div class=\"method-source-code\" id=\"notice-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 239\ndef notice=(message)\n  self[:notice] = message\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-now\"> <span class=\"method-name\">now</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets a flash that will not be available to the next action, only to the current.</p> <pre class=\"ruby\">flash.now[:message] = \"Hello current action\"\n</pre> <p>This method enables you to use the flash as a central messaging system in your app. When you need to pass an object to the next action, you use the standard flash assign (<code>[]=</code>). When you need to pass an object to the current action, you use <code>now</code>, and your object will vanish when the current action is done.</p> <p>Entries set via <code>now</code> are accessed the same way as standard entries: <code>flash['my-key']</code>.</p> <p>Also, brings two convenience accessors:</p> <pre class=\"ruby\">flash.now.alert = \"Beware now!\"\n# Equivalent to flash.now[:alert] = \"Beware now!\"\n\nflash.now.notice = \"Good luck now!\"\n# Equivalent to flash.now[:notice] = \"Good luck now!\"\n</pre> <div class=\"method-source-code\" id=\"now-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 191\ndef now\n  @now ||= FlashNow.new(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_hash\"> <span class=\"method-name\">to_hash</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_hash-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 148\ndef to_hash\n  @flashes.dup\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-now_is_loaded-3F\"> <span class=\"method-name\">now_is_loaded?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"now_is_loaded-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 244\ndef now_is_loaded?\n  @now\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stringify_array\"> <span class=\"method-name\">stringify_array</span><span class=\"method-args\">(array)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"stringify_array-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 248\ndef stringify_array(array)\n  array.map do |item|\n    item.kind_of?(Symbol) ? item.to_s : item\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/http/cache/request":"<h1 id=\"module-ActionDispatch::Http::Cache::Request\" class=\"module\"> module ActionDispatch::Http::Cache::Request </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"HTTP_IF_MODIFIED_SINCE\">HTTP_IF_MODIFIED_SINCE </dt>\n\n<dt id=\"HTTP_IF_NONE_MATCH\">HTTP_IF_NONE_MATCH </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-etag_matches-3F\"> <span class=\"method-name\">etag_matches?</span><span class=\"method-args\">(etag)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"etag_matches-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/cache.rb, line 30\ndef etag_matches?(etag)\n  if etag\n    etag = etag.gsub(/^\\\"|\\\"$/, \"\")\n    if_none_match_etags.include?(etag)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fresh-3F\"> <span class=\"method-name\">fresh?</span><span class=\"method-args\">(response)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Check response freshness (Last-Modified and ETag) against request If-Modified-Since and If-None-Match conditions. If both headers are supplied, both must match, or the request is not considered fresh.</p> <div class=\"method-source-code\" id=\"fresh-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/cache.rb, line 40\ndef fresh?(response)\n  last_modified = if_modified_since\n  etag          = if_none_match\n\n  return false unless last_modified || etag\n\n  success = true\n  success &amp;&amp;= not_modified?(response.last_modified) if last_modified\n  success &amp;&amp;= etag_matches?(response.etag) if etag\n  success\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-if_modified_since\"> <span class=\"method-name\">if_modified_since</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"if_modified_since-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/cache.rb, line 10\ndef if_modified_since\n  if since = env[HTTP_IF_MODIFIED_SINCE]\n    Time.rfc2822(since) rescue nil\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-if_none_match\"> <span class=\"method-name\">if_none_match</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"if_none_match-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/cache.rb, line 16\ndef if_none_match\n  env[HTTP_IF_NONE_MATCH]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-if_none_match_etags\"> <span class=\"method-name\">if_none_match_etags</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"if_none_match_etags-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/cache.rb, line 20\ndef if_none_match_etags\n  (if_none_match ? if_none_match.split(/\\s*,\\s*/) : []).collect do |etag|\n    etag.gsub(/^\\\"|\\\"$/, \"\")\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-not_modified-3F\"> <span class=\"method-name\">not_modified?</span><span class=\"method-args\">(modified_at)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"not_modified-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/cache.rb, line 26\ndef not_modified?(modified_at)\n  if_modified_since &amp;&amp; modified_at &amp;&amp; if_modified_since &gt;= modified_at\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/http/filterparameters":"<h1 id=\"module-ActionDispatch::Http::FilterParameters\" class=\"module\"> module ActionDispatch::Http::FilterParameters </h1> <section class=\"description\"> <p>Allows you to specify sensitive parameters which will be replaced from the request log by looking in the query string of the request and all sub-hashes of the params hash to filter. If a block is given, each key and value of the params hash and all sub-hashes is passed to it, the value or key can be replaced using String#replace or similar method.</p> <pre>env[\"action_dispatch.parameter_filter\"] = [:password]\n=&gt; replaces the value to all keys matching /password/i with \"[FILTERED]\"\n\nenv[\"action_dispatch.parameter_filter\"] = [:foo, \"bar\"]\n=&gt; replaces the value to all keys matching /foo|bar/i with \"[FILTERED]\"\n\nenv[\"action_dispatch.parameter_filter\"] = lambda do |k,v|\n  v.reverse! if k =~ /secret/i\nend\n=&gt; reverses the value to all keys matching /secret/i</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"KV_RE\">KV_RE </dt>\n\n<dt id=\"PAIR_RE\">PAIR_RE </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/filter_parameters.rb, line 28\ndef initialize(env)\n  super\n  @filtered_parameters = nil\n  @filtered_env        = nil\n  @filtered_path       = nil\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-filtered_env\"> <span class=\"method-name\">filtered_env</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return a hash of request.env with all sensitive data replaced.</p> <div class=\"method-source-code\" id=\"filtered_env-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/filter_parameters.rb, line 41\ndef filtered_env\n  @filtered_env ||= env_filter.filter(@env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-filtered_parameters\"> <span class=\"method-name\">filtered_parameters</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return a hash of parameters with all sensitive data replaced.</p> <div class=\"method-source-code\" id=\"filtered_parameters-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/filter_parameters.rb, line 36\ndef filtered_parameters\n  @filtered_parameters ||= parameter_filter.filter(parameters)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-filtered_path\"> <span class=\"method-name\">filtered_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reconstructed a path with all sensitive GET parameters replaced.</p> <div class=\"method-source-code\" id=\"filtered_path-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/filter_parameters.rb, line 46\ndef filtered_path\n  @filtered_path ||= query_string.empty? ? path : \"#{path}?#{filtered_query_string}\"\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-env_filter\"> <span class=\"method-name\">env_filter</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"env_filter-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/filter_parameters.rb, line 58\ndef env_filter\n  user_key = @env.fetch(\"action_dispatch.parameter_filter\") {\n    return NULL_ENV_FILTER\n  }\n  parameter_filter_for(Array(user_key) + ENV_MATCH)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-filtered_query_string\"> <span class=\"method-name\">filtered_query_string</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"filtered_query_string-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/filter_parameters.rb, line 71\ndef filtered_query_string\n  query_string.gsub(PAIR_RE) do |_|\n    parameter_filter.filter([[$1, $2]]).first.join(\"=\")\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parameter_filter\"> <span class=\"method-name\">parameter_filter</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"parameter_filter-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/filter_parameters.rb, line 52\ndef parameter_filter\n  parameter_filter_for @env.fetch(\"action_dispatch.parameter_filter\") {\n    return NULL_PARAM_FILTER\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parameter_filter_for\"> <span class=\"method-name\">parameter_filter_for</span><span class=\"method-args\">(filters)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"parameter_filter_for-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/filter_parameters.rb, line 65\ndef parameter_filter_for(filters)\n  ParameterFilter.new(filters)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/http/headers":"<h1 id=\"class-ActionDispatch::Http::Headers\" class=\"class\"> class ActionDispatch::Http::Headers </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../../enumerable\">Enumerable</a></dd>\n</dl> <section class=\"description\"> <p>Provides access to the request's HTTP headers from the environment.</p> <pre class=\"ruby\">env     = { \"CONTENT_TYPE\" =&gt; \"text/plain\" }\nheaders = ActionDispatch::Http::Headers.new(env)\nheaders[\"Content-Type\"] # =&gt; \"text/plain\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"CGI_VARIABLES\">CGI_VARIABLES </dt>\n\n<dt id=\"HTTP_HEADER\">HTTP_HEADER </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-env\"> <span class=\"method-name\">env</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the value for the given key mapped to @env.</p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/headers.rb, line 40\ndef [](key)\n  @env[env_name(key)]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(key, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the given value for the key mapped to @env.</p> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/headers.rb, line 45\ndef []=(key, value)\n  @env[env_name(key)] = value\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/headers.rb, line 65\ndef each(&amp;block)\n  @env.each(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fetch\"> <span class=\"method-name\">fetch</span><span class=\"method-args\">(key, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the value for the given key mapped to @env.</p> <p>If the key is not found and an optional code block is not provided, raises a <code>KeyError</code> exception.</p> <p>If the code block is provided, then it will be run and its result returned.</p> <div class=\"method-source-code\" id=\"fetch-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/headers.rb, line 61\ndef fetch(key, *args, &amp;block)\n  @env.fetch env_name(key), *args, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-include-3F\"> <span class=\"method-name\">include?</span><span class=\"method-args\">(key)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"headers#method-i-key-3F\">key?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-key-3F\"> <span class=\"method-name\">key?</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"key-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/headers.rb, line 49\ndef key?(key)\n  @env.key? env_name(key)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"headers#method-i-include-3F\">include?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-merge\"> <span class=\"method-name\">merge</span><span class=\"method-args\">(headers_or_env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"headers\">Http::Headers</a> instance containing the contents of <code>headers_or_env</code> and the original instance.</p> <div class=\"method-source-code\" id=\"merge-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/headers.rb, line 71\ndef merge(headers_or_env)\n  headers = Http::Headers.new(env.dup)\n  headers.merge!(headers_or_env)\n  headers\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-merge-21\"> <span class=\"method-name\">merge!</span><span class=\"method-args\">(headers_or_env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds the contents of <code>headers_or_env</code> to original instance entries; duplicate keys are overwritten with the values from <code>headers_or_env</code>.</p> <div class=\"method-source-code\" id=\"merge-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/headers.rb, line 80\ndef merge!(headers_or_env)\n  headers_or_env.each do |key, value|\n    self[env_name(key)] = value\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/http/mimenegotiation":"<h1 id=\"module-ActionDispatch::Http::MimeNegotiation\" class=\"module\"> module ActionDispatch::Http::MimeNegotiation </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"BROWSER_LIKE_ACCEPTS\">BROWSER_LIKE_ACCEPTS </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-variant\"> <span class=\"method-name\">variant</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-accepts\"> <span class=\"method-name\">accepts</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the accepted MIME type for the request.</p> <div class=\"method-source-code\" id=\"accepts-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 34\ndef accepts\n  @env[\"action_dispatch.request.accepts\"] ||= begin\n    header = @env['HTTP_ACCEPT'].to_s.strip\n\n    if header.empty?\n      [content_mime_type]\n    else\n      Mime::Type.parse(header)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_mime_type\"> <span class=\"method-name\">content_mime_type</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The MIME type of the HTTP request, such as Mime::XML.</p> <p>For backward compatibility, the post format is extracted from the X-Post-Data-Format HTTP header if present.</p> <div class=\"method-source-code\" id=\"content_mime_type-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 19\ndef content_mime_type\n  @env[\"action_dispatch.request.content_type\"] ||= begin\n    if @env['CONTENT_TYPE'] =~ /^([^,\\;]*)/\n      Mime::Type.lookup($1.strip.downcase)\n    else\n      nil\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_type\"> <span class=\"method-name\">content_type</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"content_type-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 29\ndef content_type\n  content_mime_type &amp;&amp; content_mime_type.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-format\"> <span class=\"method-name\">format</span><span class=\"method-args\">(view_path = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the MIME type for the format used in the request.</p> <pre>GET /posts/5.xml   | request.format =&gt; Mime::XML\nGET /posts/5.xhtml | request.format =&gt; Mime::HTML\nGET /posts/5       | request.format =&gt; Mime::HTML or MIME::JS, or request.accepts.first</pre> <div class=\"method-source-code\" id=\"format-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 52\ndef format(view_path = [])\n  formats.first || Mime::NullType.instance\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-format-3D\"> <span class=\"method-name\">format=</span><span class=\"method-args\">(extension)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the format by string extension, which can be used to force custom formats that are not controlled by the extension.</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  before_action :adjust_format_for_iphone\n\n  private\n    def adjust_format_for_iphone\n      request.format = :iphone if request.env[\"HTTP_USER_AGENT\"][/iPhone/]\n    end\nend\n</pre> <div class=\"method-source-code\" id=\"format-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 101\ndef format=(extension)\n  parameters[:format] = extension.to_s\n  @env[\"action_dispatch.request.formats\"] = [Mime::Type.lookup_by_extension(parameters[:format])]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-formats\"> <span class=\"method-name\">formats</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"formats-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 56\ndef formats\n  @env[\"action_dispatch.request.formats\"] ||= begin\n    params_readable = begin\n                        parameters[:format]\n                      rescue ActionController::BadRequest\n                        false\n                      end\n\n    if params_readable\n      Array(Mime[parameters[:format]])\n    elsif use_accept_header &amp;&amp; valid_accept_header\n      accepts\n    elsif xhr?\n      [Mime::JS]\n    else\n      [Mime::HTML]\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-formats-3D\"> <span class=\"method-name\">formats=</span><span class=\"method-args\">(extensions)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the formats by string extensions. This differs from <a href=\"mimenegotiation#method-i-format-3D\">format=</a> by allowing you to set multiple, ordered formats, which is useful when you want to have a fallback.</p> <p>In this example, the :iphone format will be used if it's available, otherwise it'll fallback to the :html format.</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  before_action :adjust_format_for_iphone_with_html_fallback\n\n  private\n    def adjust_format_for_iphone_with_html_fallback\n      request.formats = [ :iphone, :html ] if request.env[\"HTTP_USER_AGENT\"][/iPhone/]\n    end\nend\n</pre> <div class=\"method-source-code\" id=\"formats-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 120\ndef formats=(extensions)\n  parameters[:format] = extensions.first.to_s\n  @env[\"action_dispatch.request.formats\"] = extensions.collect do |extension|\n    Mime::Type.lookup_by_extension(extension)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-negotiate_mime\"> <span class=\"method-name\">negotiate_mime</span><span class=\"method-args\">(order)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Receives an array of mimes and return the first user sent mime that matches the order array.</p> <div class=\"method-source-code\" id=\"negotiate_mime-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 130\ndef negotiate_mime(order)\n  formats.each do |priority|\n    if priority == Mime::ALL\n      return order.first\n    elsif order.include?(priority)\n      return priority\n    end\n  end\n\n  order.include?(Mime::ALL) ? format : nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-variant-3D\"> <span class=\"method-name\">variant=</span><span class=\"method-args\">(variant)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the variant for template.</p> <div class=\"method-source-code\" id=\"variant-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 77\ndef variant=(variant)\n  if variant.is_a?(Symbol)\n    @variant = [variant]\n  elsif variant.nil? || variant.is_a?(Array) &amp;&amp; variant.any? &amp;&amp; variant.all?{ |v| v.is_a?(Symbol) }\n    @variant = variant\n  else\n    raise ArgumentError, \"request.variant must be set to a Symbol or an Array of Symbols, not a #{variant.class}. \"              \"For security reasons, never directly set the variant to a user-provided value, \"              \"like params[:variant].to_sym. Check user-provided value against a whitelist first, \"              \"then set the variant: request.variant = :tablet if params[:variant] == 'tablet'\"\n  end\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-use_accept_header\"> <span class=\"method-name\">use_accept_header</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"use_accept_header-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 151\ndef use_accept_header\n  !self.class.ignore_accept_header\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-valid_accept_header\"> <span class=\"method-name\">valid_accept_header</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"valid_accept_header-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_negotiation.rb, line 146\ndef valid_accept_header\n  (xhr? &amp;&amp; (accept.present? || content_mime_type)) ||\n    (accept.present? &amp;&amp; accept !~ BROWSER_LIKE_ACCEPTS)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/http/parameters":"<h1 id=\"module-ActionDispatch::Http::Parameters\" class=\"module\"> module ActionDispatch::Http::Parameters </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"PARAMETERS_KEY\">PARAMETERS_KEY </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parameters\"> <span class=\"method-name\">parameters</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns both GET and POST parameters in a single hash.</p> <div class=\"method-source-code\" id=\"parameters-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/parameters.rb, line 11\ndef parameters\n  @env[\"action_dispatch.request.parameters\"] ||= begin\n    params = begin\n      request_parameters.merge(query_parameters)\n    rescue EOFError\n      query_parameters.dup\n    end\n    params.merge!(path_parameters)\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"parameters#method-i-params\">params</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-params\"> <span class=\"method-name\">params</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"parameters#method-i-parameters\">parameters</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-path_parameters\"> <span class=\"method-name\">path_parameters</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash with the parameters used to form the path of the request. Returned hash keys are strings:</p> <pre class=\"ruby\">{'action' =&gt; 'my_action', 'controller' =&gt; 'my_controller'}\n</pre> <div class=\"method-source-code\" id=\"path_parameters-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/parameters.rb, line 39\ndef path_parameters\n  @env[PARAMETERS_KEY] ||= {}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-symbolized_path_parameters\"> <span class=\"method-name\">symbolized_path_parameters</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"symbolized_path_parameters-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/parameters.rb, line 28\ndef symbolized_path_parameters\n  ActiveSupport::Deprecation.warn(\n    '`symbolized_path_parameters` is deprecated. Please use `path_parameters`.'\n  )\n  path_parameters\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/http/uploadedfile":"<h1 id=\"class-ActionDispatch::Http::UploadedFile\" class=\"class\"> class ActionDispatch::Http::UploadedFile </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Models uploaded files.</p> <p>The actual file is accessible via the <code>tempfile</code> accessor, though some of its interface is available directly for convenience.</p> <p>Uploaded files are temporary files whose lifespan is one request. When the object is finalized Ruby unlinks the file, so there is no need to clean them with a separate maintenance task.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-content_type\"> <span class=\"method-name\">content_type</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>A string with the MIME type of the file.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-headers\"> <span class=\"method-name\">headers</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>A string with the headers of the multipart request.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-original_filename\"> <span class=\"method-name\">original_filename</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The basename of the file in the client.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-tempfile\"> <span class=\"method-name\">tempfile</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>A <code>Tempfile</code> object with the actual uploaded file. Note that some of its interface is available directly.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-to_io\"> <span class=\"method-name\">to_io</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>A <code>Tempfile</code> object with the actual uploaded file. Note that some of its interface is available directly.</p> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-close\"> <span class=\"method-name\">close</span><span class=\"method-args\">(unlink_now=false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shortcut for <code>tempfile.close</code>.</p> <div class=\"method-source-code\" id=\"close-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/upload.rb, line 47\ndef close(unlink_now=false)\n  @tempfile.close(unlink_now)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eof-3F\"> <span class=\"method-name\">eof?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shortcut for <code>tempfile.eof?</code>.</p> <div class=\"method-source-code\" id=\"eof-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/upload.rb, line 67\ndef eof?\n  @tempfile.eof?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-open\"> <span class=\"method-name\">open</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shortcut for <code>tempfile.open</code>.</p> <div class=\"method-source-code\" id=\"open-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/upload.rb, line 42\ndef open\n  @tempfile.open\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-path\"> <span class=\"method-name\">path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shortcut for <code>tempfile.path</code>.</p> <div class=\"method-source-code\" id=\"path-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/upload.rb, line 52\ndef path\n  @tempfile.path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read\"> <span class=\"method-name\">read</span><span class=\"method-args\">(length=nil, buffer=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shortcut for <code>tempfile.read</code>.</p> <div class=\"method-source-code\" id=\"read-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/upload.rb, line 37\ndef read(length=nil, buffer=nil)\n  @tempfile.read(length, buffer)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rewind\"> <span class=\"method-name\">rewind</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shortcut for <code>tempfile.rewind</code>.</p> <div class=\"method-source-code\" id=\"rewind-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/upload.rb, line 57\ndef rewind\n  @tempfile.rewind\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-size\"> <span class=\"method-name\">size</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shortcut for <code>tempfile.size</code>.</p> <div class=\"method-source-code\" id=\"size-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/upload.rb, line 62\ndef size\n  @tempfile.size\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/integration/requesthelpers":"<h1 id=\"module-ActionDispatch::Integration::RequestHelpers\" class=\"module\"> module ActionDispatch::Integration::RequestHelpers </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a DELETE request with the given parameters. See <code>#get</code> for more details.</p> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 55\ndef delete(path, parameters = nil, headers_or_env = nil)\n  process :delete, path, parameters, headers_or_env\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_via_redirect\"> <span class=\"method-name\">delete_via_redirect</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a DELETE request, following any subsequent redirect. See <code>request_via_redirect</code> for more information.</p> <div class=\"method-source-code\" id=\"delete_via_redirect-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 124\ndef delete_via_redirect(path, parameters = nil, headers_or_env = nil)\n  request_via_redirect(:delete, path, parameters, headers_or_env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-follow_redirect-21\"> <span class=\"method-name\">follow_redirect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Follow a single redirect response. If the last response was not a redirect, an exception will be raised. Otherwise, the redirect is performed on the location header.</p> <div class=\"method-source-code\" id=\"follow_redirect-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 82\ndef follow_redirect!\n  raise \"not a redirect! #{status} #{status_message}\" unless redirect?\n  get(response.location)\n  status\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-get\"> <span class=\"method-name\">get</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a GET request with the given parameters.</p> <ul>\n<li> <p><code>path</code>: The <a href=\"../../uri\">URI</a> (as a <a href=\"../../string\">String</a>) on which you want to perform a GET request.</p> </li>\n<li> <p><code>parameters</code>: The HTTP parameters that you want to pass. This may be <code>nil</code>, a <a href=\"../../hash\">Hash</a>, or a <a href=\"../../string\">String</a> that is appropriately encoded (<code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>).</p> </li>\n<li> <p><code>headers_or_env</code>: Additional headers to pass, as a <a href=\"../../hash\">Hash</a>. The headers will be merged into the <a href=\"../../rack\">Rack</a> env hash.</p> </li>\n</ul> <p>This method returns a <a href=\"../response\">Response</a> object, which one can use to inspect the details of the response. Furthermore, if this method was called from an <a href=\"../integrationtest\">ActionDispatch::IntegrationTest</a> object, then that object's <code>@response</code> instance variable will point to the same response object.</p> <p>You can also perform POST, PATCH, PUT, DELETE, and HEAD requests with <code>#post</code>, <code>#patch</code>, <code>#put</code>, <code>#delete</code>, and <code>#head</code>.</p> <div class=\"method-source-code\" id=\"get-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 31\ndef get(path, parameters = nil, headers_or_env = nil)\n  process :get, path, parameters, headers_or_env\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-get_via_redirect\"> <span class=\"method-name\">get_via_redirect</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a GET request, following any subsequent redirect. See <code>request_via_redirect</code> for more information.</p> <div class=\"method-source-code\" id=\"get_via_redirect-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 100\ndef get_via_redirect(path, parameters = nil, headers_or_env = nil)\n  request_via_redirect(:get, path, parameters, headers_or_env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-head\"> <span class=\"method-name\">head</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a HEAD request with the given parameters. See <code>#get</code> for more details.</p> <div class=\"method-source-code\" id=\"head-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 61\ndef head(path, parameters = nil, headers_or_env = nil)\n  process :head, path, parameters, headers_or_env\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-patch\"> <span class=\"method-name\">patch</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a PATCH request with the given parameters. See <code>#get</code> for more details.</p> <div class=\"method-source-code\" id=\"patch-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 43\ndef patch(path, parameters = nil, headers_or_env = nil)\n  process :patch, path, parameters, headers_or_env\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-patch_via_redirect\"> <span class=\"method-name\">patch_via_redirect</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a PATCH request, following any subsequent redirect. See <code>request_via_redirect</code> for more information.</p> <div class=\"method-source-code\" id=\"patch_via_redirect-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 112\ndef patch_via_redirect(path, parameters = nil, headers_or_env = nil)\n  request_via_redirect(:patch, path, parameters, headers_or_env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-post\"> <span class=\"method-name\">post</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a POST request with the given parameters. See <code>#get</code> for more details.</p> <div class=\"method-source-code\" id=\"post-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 37\ndef post(path, parameters = nil, headers_or_env = nil)\n  process :post, path, parameters, headers_or_env\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-post_via_redirect\"> <span class=\"method-name\">post_via_redirect</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a POST request, following any subsequent redirect. See <code>request_via_redirect</code> for more information.</p> <div class=\"method-source-code\" id=\"post_via_redirect-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 106\ndef post_via_redirect(path, parameters = nil, headers_or_env = nil)\n  request_via_redirect(:post, path, parameters, headers_or_env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-put\"> <span class=\"method-name\">put</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a PUT request with the given parameters. See <code>#get</code> for more details.</p> <div class=\"method-source-code\" id=\"put-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 49\ndef put(path, parameters = nil, headers_or_env = nil)\n  process :put, path, parameters, headers_or_env\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-put_via_redirect\"> <span class=\"method-name\">put_via_redirect</span><span class=\"method-args\">(path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a PUT request, following any subsequent redirect. See <code>request_via_redirect</code> for more information.</p> <div class=\"method-source-code\" id=\"put_via_redirect-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 118\ndef put_via_redirect(path, parameters = nil, headers_or_env = nil)\n  request_via_redirect(:put, path, parameters, headers_or_env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-request_via_redirect\"> <span class=\"method-name\">request_via_redirect</span><span class=\"method-args\">(http_method, path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a request using the specified method, following any subsequent redirect. Note that the redirects are followed until the response is not a redirect–this means you may run into an infinite loop if your redirect loops back to itself.</p> <div class=\"method-source-code\" id=\"request_via_redirect-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 92\ndef request_via_redirect(http_method, path, parameters = nil, headers_or_env = nil)\n  process(http_method, path, parameters, headers_or_env)\n  follow_redirect! while redirect?\n  status\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-xhr\"> <span class=\"method-name\">xhr</span><span class=\"method-args\">(request_method, path, parameters = nil, headers_or_env = nil)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"requesthelpers#method-i-xml_http_request\">xml_http_request</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xml_http_request\"> <span class=\"method-name\">xml_http_request</span><span class=\"method-args\">(request_method, path, parameters = nil, headers_or_env = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs an XMLHttpRequest request with the given parameters, mirroring a request from the Prototype library.</p> <p>The request_method is <code>:get</code>, <code>:post</code>, <code>:patch</code>, <code>:put</code>, <code>:delete</code> or <code>:head</code>; the parameters are <code>nil</code>, a hash, or a url-encoded or multipart string; the headers are a hash.</p> <div class=\"method-source-code\" id=\"xml_http_request-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 71\ndef xml_http_request(request_method, path, parameters = nil, headers_or_env = nil)\n  headers_or_env ||= {}\n  headers_or_env['HTTP_X_REQUESTED_WITH'] = 'XMLHttpRequest'\n  headers_or_env['HTTP_ACCEPT'] ||= [Mime::JS, Mime::HTML, Mime::XML, 'text/xml', Mime::ALL].join(', ')\n  process(request_method, path, parameters, headers_or_env)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"requesthelpers#method-i-xhr\">xhr</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/integration/runner":"<h1 id=\"module-ActionDispatch::Integration::Runner\" class=\"module\"> module ActionDispatch::Integration::Runner </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../assertions\">ActionDispatch::Assertions</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-app\"> <span class=\"method-name\">app</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"app-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 319\ndef app\n  @app ||= nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default_url_options\"> <span class=\"method-name\">default_url_options</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"default_url_options-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 375\ndef default_url_options\n  reset! unless integration_session\n  integration_session.default_url_options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default_url_options-3D\"> <span class=\"method-name\">default_url_options=</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"default_url_options-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 380\ndef default_url_options=(options)\n  reset! unless integration_session\n  integration_session.default_url_options = options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method_missing\"> <span class=\"method-name\">method_missing</span><span class=\"method-args\">(sym, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delegate unhandled messages to the current session instance.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"method_missing-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 390\ndef method_missing(sym, *args, &amp;block)\n  reset! unless integration_session\n  if integration_session.respond_to?(sym)\n    integration_session.__send__(sym, *args, &amp;block).tap do\n      copy_session_variables!\n    end\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-open_session\"> <span class=\"method-name\">open_session</span><span class=\"method-args\">() { |session| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Open a new session instance. If a block is given, the new session is yielded to the block before being returned.</p> <pre class=\"ruby\">session = open_session do |sess|\n  sess.extend(CustomAssertions)\nend\n</pre> <p>By default, a single session is automatically created for you, but you can use this method to open multiple sessions that ought to be tested simultaneously.</p> <div class=\"method-source-code\" id=\"open_session-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 360\ndef open_session\n  dup.tap do |session|\n    yield session if block_given?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset-21\"> <span class=\"method-name\">reset!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reset the current session. This is useful for testing multiple sessions in a single test case.</p> <div class=\"method-source-code\" id=\"reset-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 325\ndef reset!\n  @integration_session = Integration::Session.new(app)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to-3F\"> <span class=\"method-name\">respond_to?</span><span class=\"method-args\">(method, include_private = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"respond_to-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 385\ndef respond_to?(method, include_private = false)\n  integration_session.respond_to?(method, include_private) || super\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/integration/session":"<h1 id=\"class-ActionDispatch::Integration::Session\" class=\"class\"> class ActionDispatch::Integration::Session </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"../testprocess\">ActionDispatch::TestProcess</a>, <a class=\"include\" href=\"requesthelpers\">ActionDispatch::Integration::RequestHelpers</a>, <a class=\"include\" href=\"../assertions\">ActionDispatch::Assertions</a>, <a class=\"include\" href=\"../routing/urlfor\">ActionDispatch::Routing::UrlFor</a>\n</dd>\n</dl> <section class=\"description\"> <p>An instance of this class represents a set of requests and responses performed sequentially by a test process. Because you can instantiate multiple sessions and run them side-by-side, you can also mimic (to some limited extent) multiple simultaneous users interacting with your system.</p> <p>Typically, you will instantiate a new session using IntegrationTest#open_session, rather than instantiating <a href=\"session\">Integration::Session</a> directly.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DEFAULT_HOST\">DEFAULT_HOST </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-accept\"> <span class=\"method-name\">accept</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The Accept header to send.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-controller\"> <span class=\"method-name\">controller</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>A reference to the controller instance used by the last request.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-host\"> <span class=\"method-name\">host</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-host-21\"> <span class=\"method-name\">host!</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-remote_addr\"> <span class=\"method-name\">remote_addr</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The <a href=\"session#attribute-i-remote_addr\">#remote_addr</a> used in the last request.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-request\"> <span class=\"method-name\">request</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>A reference to the request instance used by the last request.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-request_count\"> <span class=\"method-name\">request_count</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>A running counter of the number of requests processed.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-response\"> <span class=\"method-name\">response</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>A reference to the response instance used by the last request.</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(app)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create and initialize a new <a href=\"session\">Session</a> instance.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../routing/urlfor#method-c-new\">ActionDispatch::Routing::UrlFor.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 184\ndef initialize(app)\n  super()\n  @app = app\n\n  # If the app is a Rails app, make url_helpers available on the session\n  # This makes app.url_for and app.foo_path available in the console\n  if app.respond_to?(:routes)\n    singleton_class.class_eval do\n      include app.routes.url_helpers\n      include app.routes.mounted_helpers\n    end\n  end\n\n  reset!\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cookies\"> <span class=\"method-name\">cookies</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A map of the cookies returned by the last response, and which will be sent with the next request.</p> <div class=\"method-source-code\" id=\"cookies-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 165\ndef cookies\n  _mock_session.cookie_jar\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-host\"> <span class=\"method-name\">host</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The hostname used in the last request.</p> <div class=\"method-source-code\" id=\"host-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 152\ndef host\n  @host || DEFAULT_HOST\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-https-21\"> <span class=\"method-name\">https!</span><span class=\"method-args\">(flag = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specify whether or not the session should mimic a secure HTTPS request.</p> <pre class=\"ruby\">session.https!\nsession.https!(false)\n</pre> <div class=\"method-source-code\" id=\"https-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 241\ndef https!(flag = true)\n  @https = flag\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-https-3F\"> <span class=\"method-name\">https?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the session is mimicking a secure HTTPS request.</p> <pre>if session.https?\n  ...\nend</pre> <div class=\"method-source-code\" id=\"https-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 250\ndef https?\n  @https\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset-21\"> <span class=\"method-name\">reset!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Resets the instance. This can be used to reset the state information in an existing session instance, so it can be used from a clean-slate condition.</p> <pre class=\"ruby\">session.reset!\n</pre> <div class=\"method-source-code\" id=\"reset-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 217\ndef reset!\n  @https = false\n  @controller = @request = @response = nil\n  @_mock_session = nil\n  @request_count = 0\n  @url_options = nil\n\n  self.host        = DEFAULT_HOST\n  self.remote_addr = \"127.0.0.1\"\n  self.accept      = \"text/xml,application/xml,application/xhtml+xml,\" +\n                     \"text/html;q=0.9,text/plain;q=0.8,image/png,\" +\n                     \"*/*;q=0.5\"\n\n  unless defined? @named_routes_configured\n    # the helpers are made protected by default--we make them public for\n    # easier access during testing and troubleshooting.\n    @named_routes_configured = true\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url_options\"> <span class=\"method-name\">url_options</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"url_options-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 200\ndef url_options\n  @url_options ||= default_url_options.dup.tap do |url_options|\n    url_options.reverse_merge!(controller.url_options) if controller\n\n    if @app.respond_to?(:routes)\n      url_options.reverse_merge!(@app.routes.default_url_options)\n    end\n\n    url_options.reverse_merge!(:host =&gt; host, :protocol =&gt; https? ? \"https\" : \"http\")\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/integrationtest":"<h1 id=\"class-ActionDispatch::IntegrationTest\" class=\"class\"> class ActionDispatch::IntegrationTest </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../activesupport/testcase\">ActiveSupport::TestCase</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"../actioncontroller/templateassertions\">ActionController::TemplateAssertions</a>, <a class=\"include\" href=\"routing/urlfor\">ActionDispatch::Routing::UrlFor</a>\n</dd>\n</dl> <section class=\"description\"> <p>An integration test spans multiple controllers and actions, tying them all together to ensure they work together as expected. It tests more completely than either unit or functional tests do, exercising the entire stack, from the dispatcher to the database.</p> <p>At its simplest, you simply extend <code>IntegrationTest</code> and write your tests using the get/post methods:</p> <pre class=\"ruby\">require \"test_helper\"\n\nclass ExampleTest &lt; ActionDispatch::IntegrationTest\n  fixtures :people\n\n  def test_login\n    # get the login page\n    get \"/login\"\n    assert_equal 200, status\n\n    # post the login and follow through to the home page\n    post \"/login\", username: people(:jamis).username,\n      password: people(:jamis).password\n    follow_redirect!\n    assert_equal 200, status\n    assert_equal \"/home\", path\n  end\nend\n</pre> <p>However, you can also have multiple session instances open per test, and even extend those instances with assertions and methods to create a very powerful testing DSL that is specific for your application. You can even reference any named routes you happen to have defined.</p> <pre>require \"test_helper\"\n\nclass AdvancedTest &lt; ActionDispatch::IntegrationTest\n  fixtures :people, :rooms\n\n  def test_login_and_speak\n    jamis, david = login(:jamis), login(:david)\n    room = rooms(:office)\n\n    jamis.enter(room)\n    jamis.speak(room, \"anybody home?\")\n\n    david.enter(room)\n    david.speak(room, \"hello!\")\n  end\n\n  private\n\n    module CustomAssertions\n      def enter(room)\n        # reference a named route, for maximum internal consistency!\n        get(room_url(id: room.id))\n        assert(...)\n        ...\n      end\n\n      def speak(room, message)\n        xml_http_request \"/say/#{room.id}\", message: message\n        assert(...)\n        ...\n      end\n    end\n\n    def login(who)\n      open_session do |sess|\n        sess.extend(CustomAssertions)\n        who = people(who)\n        sess.post \"/login\", username: who.username,\n          password: who.password\n        assert(...)\n      end\n    end\nend</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-app\"> <span class=\"method-name\">app</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"app-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 490\ndef self.app\n  @@app || ActionDispatch.test_app\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-app-3D\"> <span class=\"method-name\">app=</span><span class=\"method-args\">(app)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"app-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 494\ndef self.app=(app)\n  @@app = app\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-app\"> <span class=\"method-name\">app</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"app-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 498\ndef app\n  super || self.class.app\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-document_root_element\"> <span class=\"method-name\">document_root_element</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"document_root_element-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 507\ndef document_root_element\n  html_document.root\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url_options\"> <span class=\"method-name\">url_options</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"url_options-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/integration.rb, line 502\ndef url_options\n  reset! unless integration_session\n  integration_session.url_options\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/publicexceptions":"<h1 id=\"class-ActionDispatch::PublicExceptions\" class=\"class\"> class ActionDispatch::PublicExceptions </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>When called, this middleware renders an error page. By default if an HTML response is expected it will render static error pages from the `/public` directory. For example when this middleware receives a 500 response it will render the template found in `/public/500.html`. If an internationalized locale is set, this middleware will attempt to render the template in `/public/500.&lt;locale&gt;.html`. If an internationalized template is not found it will fall back on `/public/500.html`.</p> <p>When a request with a content type other than HTML is made, this middleware will attempt to convert error information into the appropriate response type.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-public_path\"> <span class=\"method-name\">public_path</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(public_path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/public_exceptions.rb, line 15\ndef initialize(public_path)\n  @public_path = public_path\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/public_exceptions.rb, line 19\ndef call(env)\n  status       = env[\"PATH_INFO\"][1..-1]\n  request      = ActionDispatch::Request.new(env)\n  content_type = request.formats.first\n  body         = { :status =&gt; status, :error =&gt; Rack::Utils::HTTP_STATUS_CODES.fetch(status.to_i, Rack::Utils::HTTP_STATUS_CODES[500]) }\n\n  render(status, content_type, body)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/request":"<h1 id=\"class-ActionDispatch::Request\" class=\"class\"> class ActionDispatch::Request </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Rack::Request</dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"http/cache/request\">ActionDispatch::Http::Cache::Request</a>, <a class=\"include\" href=\"http/mimenegotiation\">ActionDispatch::Http::MimeNegotiation</a>, <a class=\"include\" href=\"http/parameters\">ActionDispatch::Http::Parameters</a>, <a class=\"include\" href=\"http/filterparameters\">ActionDispatch::Http::FilterParameters</a>, <span class=\"include\">ActionDispatch::Http::URL</span>\n</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ENV_METHODS\">ENV_METHODS </dt>\n\n<dt id=\"HTTP_METHODS\">HTTP_METHODS </dt>\n\n<dt id=\"HTTP_METHOD_LOOKUP\">HTTP_METHOD_LOOKUP </dt>\n\n<dt id=\"LOCALHOST\">LOCALHOST </dt>\n\n<dt id=\"RFC2518\">RFC2518 </dt>\n\n<dt id=\"RFC2616\">RFC2616 </dt>\n<dd>\n<p>List of HTTP request methods from the following RFCs: Hypertext Transfer Protocol – HTTP/1.1 (<a href=\"http://www.ietf.org/rfc/rfc2616.txt\">www.ietf.org/rfc/rfc2616.txt</a>) HTTP Extensions for Distributed Authoring – WEBDAV (<a href=\"http://www.ietf.org/rfc/rfc2518.txt\">www.ietf.org/rfc/rfc2518.txt</a>) Versioning Extensions to WebDAV (<a href=\"http://www.ietf.org/rfc/rfc3253.txt\">www.ietf.org/rfc/rfc3253.txt</a>) Ordered Collections Protocol (WebDAV) (<a href=\"http://www.ietf.org/rfc/rfc3648.txt\">www.ietf.org/rfc/rfc3648.txt</a>) Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol (<a href=\"http://www.ietf.org/rfc/rfc3744.txt\">www.ietf.org/rfc/rfc3744.txt</a>) Web Distributed Authoring and Versioning (WebDAV) SEARCH (<a href=\"http://www.ietf.org/rfc/rfc5323.txt\">www.ietf.org/rfc/rfc5323.txt</a>) Calendar Extensions to WebDAV (<a href=\"http://www.ietf.org/rfc/rfc4791.txt\">www.ietf.org/rfc/rfc4791.txt</a>) PATCH <a href=\"../method\">Method</a> for HTTP (<a href=\"http://www.ietf.org/rfc/rfc5789.txt\">www.ietf.org/rfc/rfc5789.txt</a>)</p> </dd>\n<dt id=\"RFC3253\">RFC3253 </dt>\n\n<dt id=\"RFC3648\">RFC3648 </dt>\n\n<dt id=\"RFC3744\">RFC3744 </dt>\n\n<dt id=\"RFC4791\">RFC4791 </dt>\n\n<dt id=\"RFC5323\">RFC5323 </dt>\n\n<dt id=\"RFC5789\">RFC5789 </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <span>ActionDispatch::Http::URL.new</span> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 45\ndef initialize(env)\n  super\n  @method            = nil\n  @request_method    = nil\n  @remote_ip         = nil\n  @original_fullpath = nil\n  @fullpath          = nil\n  @ip                = nil\n  @uuid              = nil\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-GET\"> <span class=\"method-name\">GET</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Override Rack's <a href=\"request#method-i-GET\">#GET</a> method to support indifferent access</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"GET-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 299\ndef GET\n  @env[\"action_dispatch.request.query_parameters\"] ||= Utils.deep_munge(normalize_encode_params(super || {}))\nrescue Rack::Utils::ParameterTypeError, Rack::Utils::InvalidParameterError =&gt; e\n  raise ActionController::BadRequest.new(:query, e)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"request#method-i-query_parameters\">query_parameters</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-POST\"> <span class=\"method-name\">POST</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Override Rack's <a href=\"request#method-i-POST\">#POST</a> method to support indifferent access</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"POST-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 307\ndef POST\n  @env[\"action_dispatch.request.request_parameters\"] ||= Utils.deep_munge(normalize_encode_params(super || {}))\nrescue Rack::Utils::ParameterTypeError, Rack::Utils::InvalidParameterError =&gt; e\n  raise ActionController::BadRequest.new(:request, e)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"request#method-i-request_parameters\">request_parameters</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authorization\"> <span class=\"method-name\">authorization</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the authorization header regardless of whether it was specified directly or through one of the proxy alternatives.</p> <div class=\"method-source-code\" id=\"authorization-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 316\ndef authorization\n  @env['HTTP_AUTHORIZATION']   ||\n  @env['X-HTTP_AUTHORIZATION'] ||\n  @env['X_HTTP_AUTHORIZATION'] ||\n  @env['REDIRECT_X_HTTP_AUTHORIZATION']\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-body\"> <span class=\"method-name\">body</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The request body is an IO input stream. If the RAW_POST_DATA environment variable is already set, wrap it in a StringIO.</p> <div class=\"method-source-code\" id=\"body-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 262\ndef body\n  if raw_post = @env['RAW_POST_DATA']\n    raw_post.force_encoding(Encoding::BINARY)\n    StringIO.new(raw_post)\n  else\n    @env['rack.input']\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-check_path_parameters-21\"> <span class=\"method-name\">check_path_parameters!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"check_path_parameters-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 56\ndef check_path_parameters!\n  # If any of the path parameters has an invalid encoding then\n  # raise since it's likely to trigger errors further on.\n  path_parameters.each do |key, value|\n    next unless value.respond_to?(:valid_encoding?)\n    unless value.valid_encoding?\n      raise ActionController::BadRequest, \"Invalid parameter: #{key} =&gt; #{value}\"\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_length\"> <span class=\"method-name\">content_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the content length of the request as an integer.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"content_length-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 213\ndef content_length\n  super.to_i\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cookie_jar\"> <span class=\"method-name\">cookie_jar</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"cookie_jar-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/cookies.rb, line 10\ndef cookie_jar\n  env['action_dispatch.cookies'] ||= Cookies::CookieJar.build(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_munge\"> <span class=\"method-name\">deep_munge</span><span class=\"method-args\">(hash)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Extracted into ActionDispatch::Request::Utils.deep_munge, but kept here for backwards compatibility.</p> <div class=\"method-source-code\" id=\"deep_munge-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 329\ndef deep_munge(hash)\n  ActiveSupport::Deprecation.warn(\n    'This method has been extracted into `ActionDispatch::Request::Utils.deep_munge`. Please start using that instead.'\n  )\n\n  Utils.deep_munge(hash)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete-3F\"> <span class=\"method-name\">delete?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this a DELETE request? Equivalent to <code>request.request_method_symbol\n== :delete</code>.</p> <div class=\"method-source-code\" id=\"delete-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 157\ndef delete?\n  HTTP_METHOD_LOOKUP[request_method] == :delete\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-flash\"> <span class=\"method-name\">flash</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Access the contents of the flash. Use <code>flash[\"notice\"]</code> to read a notice you put there or <code>flash[\"notice\"] = \"hello\"</code> to put a new one.</p> <div class=\"method-source-code\" id=\"flash-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/flash.rb, line 8\ndef flash\n  @env[Flash::KEY] ||= Flash::FlashHash.from_session_value(session[\"flash\"])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-form_data-3F\"> <span class=\"method-name\">form_data?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"form_data-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 271\ndef form_data?\n  FORM_DATA_MEDIA_TYPES.include?(content_mime_type.to_s)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fullpath\"> <span class=\"method-name\">fullpath</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the <code>String</code> full path including params of the last URL requested.</p> <pre class=\"ruby\"># get \"/articles\"\nrequest.fullpath # =&gt; \"/articles\"\n\n# get \"/articles?page=2\"\nrequest.fullpath # =&gt; \"/articles?page=2\"\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"fullpath-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 192\ndef fullpath\n  @fullpath ||= super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-get-3F\"> <span class=\"method-name\">get?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this a <a href=\"request#method-i-GET\">#GET</a> (or HEAD) request? Equivalent to <code>request.request_method_symbol == :get</code>.</p> <div class=\"method-source-code\" id=\"get-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 133\ndef get?\n  HTTP_METHOD_LOOKUP[request_method] == :get\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-head-3F\"> <span class=\"method-name\">head?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this a HEAD request? Equivalent to <code>request.request_method_symbol\n== :head</code>.</p> <div class=\"method-source-code\" id=\"head-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 163\ndef head?\n  HTTP_METHOD_LOOKUP[request_method] == :head\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-headers\"> <span class=\"method-name\">headers</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Provides access to the request's HTTP headers, for example:</p> <pre class=\"ruby\">request.headers[\"Content-Type\"] # =&gt; \"text/plain\"\n</pre> <div class=\"method-source-code\" id=\"headers-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 170\ndef headers\n  Http::Headers.new(@env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ip\"> <span class=\"method-name\">ip</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"ip-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 225\ndef ip\n  @ip ||= super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-key-3F\"> <span class=\"method-name\">key?</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"key-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 67\ndef key?(key)\n  @env.key?(key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-local-3F\"> <span class=\"method-name\">local?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>True if the request came from localhost, 127.0.0.1.</p> <div class=\"method-source-code\" id=\"local-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 324\ndef local?\n  LOCALHOST =~ remote_addr &amp;&amp; LOCALHOST =~ remote_ip\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-media_type\"> <span class=\"method-name\">media_type</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The <code>String</code> MIME type of the request.</p> <pre class=\"ruby\"># get \"/articles\"\nrequest.media_type # =&gt; \"application/x-www-form-urlencoded\"\n</pre> <div class=\"method-source-code\" id=\"media_type-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 208\ndef media_type\n  content_mime_type.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method\"> <span class=\"method-name\">method</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the original value of the environment's REQUEST_METHOD, even if it was overridden by middleware. See <a href=\"request#method-i-request_method\">request_method</a> for more information.</p> <div class=\"method-source-code\" id=\"method-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 122\ndef method\n  @method ||= check_method(env[\"rack.methodoverride.original_method\"] || env['REQUEST_METHOD'])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method_symbol\"> <span class=\"method-name\">method_symbol</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a symbol form of the <a href=\"request#method-i-method\">method</a></p> <div class=\"method-source-code\" id=\"method_symbol-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 127\ndef method_symbol\n  HTTP_METHOD_LOOKUP[method]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-original_fullpath\"> <span class=\"method-name\">original_fullpath</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <code>String</code> with the last requested path including their params.</p> <pre class=\"ruby\"># get '/foo'\nrequest.original_fullpath # =&gt; '/foo'\n\n# get '/foo?bar'\nrequest.original_fullpath # =&gt; '/foo?bar'\n</pre> <div class=\"method-source-code\" id=\"original_fullpath-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 181\ndef original_fullpath\n  @original_fullpath ||= (env[\"ORIGINAL_FULLPATH\"] || fullpath)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-original_url\"> <span class=\"method-name\">original_url</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the original request URL as a <code>String</code>.</p> <pre class=\"ruby\"># get \"/articles?page=2\"\nrequest.original_url # =&gt; \"http://www.example.com/articles?page=2\"\n</pre> <div class=\"method-source-code\" id=\"original_url-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 200\ndef original_url\n  base_url + original_fullpath\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-patch-3F\"> <span class=\"method-name\">patch?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this a PATCH request? Equivalent to <code>request.request_method ==\n:patch</code>.</p> <div class=\"method-source-code\" id=\"patch-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 145\ndef patch?\n  HTTP_METHOD_LOOKUP[request_method] == :patch\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-post-3F\"> <span class=\"method-name\">post?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this a <a href=\"request#method-i-POST\">#POST</a> request? Equivalent to <code>request.request_method_symbol == :post</code>.</p> <div class=\"method-source-code\" id=\"post-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 139\ndef post?\n  HTTP_METHOD_LOOKUP[request_method] == :post\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-put-3F\"> <span class=\"method-name\">put?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this a PUT request? Equivalent to <code>request.request_method_symbol ==\n:put</code>.</p> <div class=\"method-source-code\" id=\"put-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 151\ndef put?\n  HTTP_METHOD_LOOKUP[request_method] == :put\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-query_parameters\"> <span class=\"method-name\">query_parameters</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"request#method-i-GET\">GET</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-raw_post\"> <span class=\"method-name\">raw_post</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Read the request body. This is useful for web services that need to work with raw requests directly.</p> <div class=\"method-source-code\" id=\"raw_post-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 251\ndef raw_post\n  unless @env.include? 'RAW_POST_DATA'\n    raw_post_body = body\n    @env['RAW_POST_DATA'] = raw_post_body.read(content_length)\n    raw_post_body.rewind if raw_post_body.respond_to?(:rewind)\n  end\n  @env['RAW_POST_DATA']\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remote_ip\"> <span class=\"method-name\">remote_ip</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Originating IP address, usually set by the <span>RemoteIp</span> middleware.</p> <div class=\"method-source-code\" id=\"remote_ip-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 230\ndef remote_ip\n  @remote_ip ||= (@env[\"action_dispatch.remote_ip\"] || ip).to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-request_method\"> <span class=\"method-name\">request_method</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the HTTP method that the application should see. In the case where the method was overridden by a middleware (for instance, if a HEAD request was converted to a <a href=\"request#method-i-GET\">#GET</a>, or if a _method parameter was used to determine the method the application should use), this method returns the overridden value, not the original.</p> <div class=\"method-source-code\" id=\"request_method-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 104\ndef request_method\n  @request_method ||= check_method(env[\"REQUEST_METHOD\"])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-request_method_symbol\"> <span class=\"method-name\">request_method_symbol</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a symbol form of the <a href=\"request#method-i-request_method\">request_method</a></p> <div class=\"method-source-code\" id=\"request_method_symbol-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 115\ndef request_method_symbol\n  HTTP_METHOD_LOOKUP[request_method]\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-request_parameters\"> <span class=\"method-name\">request_parameters</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"request#method-i-POST\">POST</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset_session\"> <span class=\"method-name\">reset_session</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>TODO This should be broken apart into AD::Request::Session and probably be included by the session middleware.</p> <div class=\"method-source-code\" id=\"reset_session-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 281\ndef reset_session\n  if session &amp;&amp; session.respond_to?(:destroy)\n    session.destroy\n  else\n    self.session = {}\n  end\n  @env['action_dispatch.request.flash_hash'] = nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-server_software\"> <span class=\"method-name\">server_software</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the lowercase name of the HTTP server software.</p> <div class=\"method-source-code\" id=\"server_software-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 245\ndef server_software\n  (@env['SERVER_SOFTWARE'] &amp;&amp; /^([a-zA-Z]+)/ =~ @env['SERVER_SOFTWARE']) ? $1.downcase : nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-session_options-3D\"> <span class=\"method-name\">session_options=</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"session_options-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 294\ndef session_options=(options)\n  Session::Options.set @env, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-uuid\"> <span class=\"method-name\">uuid</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the unique request id, which is based on either the X-Request-Id header that can be generated by a firewall, load balancer, or web server or by the <span>RequestId</span> middleware (which sets the action_dispatch.request_id environment variable).</p> <p>This unique ID is useful for tracing a request from end-to-end as part of logging or debugging. This relies on the rack variable set by the <span>ActionDispatch::RequestId</span> middleware.</p> <div class=\"method-source-code\" id=\"uuid-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 240\ndef uuid\n  @uuid ||= env[\"action_dispatch.request_id\"]\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-xhr-3F\"> <span class=\"method-name\">xhr?</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"request#method-i-xml_http_request-3F\">xml_http_request?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xml_http_request-3F\"> <span class=\"method-name\">xml_http_request?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the “X-Requested-With” header contains “XMLHttpRequest” (case-insensitive), which may need to be manually added depending on the choice of JavaScript libraries and frameworks.</p> <div class=\"method-source-code\" id=\"xml_http_request-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 220\ndef xml_http_request?\n  @env['HTTP_X_REQUESTED_WITH'] =~ /XMLHttpRequest/i\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"request#method-i-xhr-3F\">xhr?</a> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse_query\"> <span class=\"method-name\">parse_query</span><span class=\"method-args\">(qs)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"parse_query-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/request.rb, line 338\ndef parse_query(qs)\n  Utils.deep_munge(super)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/response":"<h1 id=\"class-ActionDispatch::Response\" class=\"class\"> class ActionDispatch::Response </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"http/filterredirect\">ActionDispatch::Http::FilterRedirect</a>, <a class=\"include\" href=\"http/cache/response\">ActionDispatch::Http::Cache::Response</a>\n</dd>\n</dl> <section class=\"description\"> <p>Represents an HTTP response generated by a controller action. Use it to retrieve the current state of the response, or customize the response. It can either represent a real HTTP response (i.e. one that is meant to be sent back to the web browser) or a <a href=\"testresponse\">TestResponse</a> (i.e. one that is generated from integration tests).</p> <p>Response is mostly a Ruby on Rails framework implementation detail, and should never be used directly in controllers. Controllers should use the methods defined in <a href=\"../actioncontroller/base\">ActionController::Base</a> instead. For example, if you want to set the HTTP response's content MIME type, then use ActionControllerBase#headers instead of Response#headers.</p> <p>Nevertheless, integration tests may want to inspect controller responses in more detail, and that's when Response can be useful for application developers. <a href=\"integration\">Integration</a> test methods such as <a href=\"integration/requesthelpers#method-i-get\">ActionDispatch::Integration::RequestHelpers#get</a> and <a href=\"integration/requesthelpers#method-i-post\">ActionDispatch::Integration::RequestHelpers#post</a> return objects of type <a href=\"testresponse\">TestResponse</a> (which are of course also of type Response).</p> <p>For example, the following demo integration test prints the body of the controller response to the console:</p> <pre class=\"ruby\">class DemoControllerTest &lt; ActionDispatch::IntegrationTest\n  def test_print_root_path_to_console\n    get('/')\n    puts response.body\n  end\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"CONTENT_TYPE\">CONTENT_TYPE </dt>\n\n<dt id=\"EMPTY\">EMPTY </dt>\n\n<dt id=\"LOCATION\">LOCATION </dt>\n\n<dt id=\"NO_CONTENT_CODES\">NO_CONTENT_CODES </dt>\n\n<dt id=\"SET_COOKIE\">SET_COOKIE </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-charset\"> <span class=\"method-name\">charset</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The charset of the response. HTML wants to know the encoding of the content you're giving them, so we need to send that along.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-content_type\"> <span class=\"method-name\">content_type</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>Sets the HTTP response's content MIME type. For example, in the controller you could write this:</p> <pre class=\"ruby\">response.content_type = \"text/plain\"\n</pre> <p>If a character set has been defined for this response (see charset=) then the character set information will also be included in the content type information.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-header\"> <span class=\"method-name\">header</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Get and set headers for this response.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-headers-3D\"> <span class=\"method-name\">headers=</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Get and set headers for this response.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-request\"> <span class=\"method-name\">request</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The request that the response is responding to.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-sending_file\"> <span class=\"method-name\">sending_file</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-status\"> <span class=\"method-name\">status</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>The HTTP status code.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-stream\"> <span class=\"method-name\">stream</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>The underlying body, as a streamable object.</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(status = 200, header = {}, body = [], options = {}) { |self| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 118\ndef initialize(status = 200, header = {}, body = [], options = {})\n  super()\n\n  default_headers = options.fetch(:default_headers, self.class.default_headers)\n  header = merge_default_headers(header, default_headers)\n\n  self.body, self.header, self.status = body, header, status\n\n  @sending_file = false\n  @blank        = false\n  @cv           = new_cond\n  @committed    = false\n  @sending      = false\n  @sent         = false\n  @content_type = nil\n  @charset      = nil\n\n  if content_type = self[CONTENT_TYPE]\n    type, charset = content_type.split(/;\\s*charset=/)\n    @content_type = Mime::Type.lookup(type)\n    @charset = charset || self.class.default_charset\n  end\n\n  prepare_cache_control!\n\n  yield self if block_given?\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-abort\"> <span class=\"method-name\">abort</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"abort-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 268\ndef abort\n  if stream.respond_to?(:abort)\n    stream.abort\n  elsif stream.respond_to?(:close)\n    # `stream.close` should really be reserved for a close from the\n    # other direction, but we must fall back to it for\n    # compatibility.\n    stream.close\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-await_commit\"> <span class=\"method-name\">await_commit</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"await_commit-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 146\ndef await_commit\n  synchronize do\n    @cv.wait_until { @committed }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-await_sent\"> <span class=\"method-name\">await_sent</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"await_sent-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 152\ndef await_sent\n  synchronize { @cv.wait_until { @sent } }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-body\"> <span class=\"method-name\">body</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the content of the response as a string. This contains the contents of any calls to <code>render</code>.</p> <div class=\"method-source-code\" id=\"body-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 218\ndef body\n  strings = []\n  each { |part| strings &lt;&lt; part.to_s }\n  strings.join\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-body-3D\"> <span class=\"method-name\">body=</span><span class=\"method-args\">(body)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to manually set or override the response body.</p> <div class=\"method-source-code\" id=\"body-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 227\ndef body=(body)\n  @blank = true if body == EMPTY\n\n  if body.respond_to?(:to_path)\n    @stream = body\n  else\n    synchronize do\n      @stream = build_buffer self, munge_body_object(body)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-body_parts\"> <span class=\"method-name\">body_parts</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"body_parts-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 239\ndef body_parts\n  parts = []\n  @stream.each { |x| parts &lt;&lt; x }\n  parts\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-close\"> <span class=\"method-name\">close</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"close-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 264\ndef close\n  stream.close if stream.respond_to?(:close)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-code\"> <span class=\"method-name\">code</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string to ensure compatibility with <code>Net::HTTPResponse</code>.</p> <div class=\"method-source-code\" id=\"code-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 199\ndef code\n  @status.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-commit-21\"> <span class=\"method-name\">commit!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"commit-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 156\ndef commit!\n  synchronize do\n    before_committed\n    @committed = true\n    @cv.broadcast\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-committed-3F\"> <span class=\"method-name\">committed?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"committed-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 180\ndef committed?; synchronize { @committed }; end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_type-3D\"> <span class=\"method-name\">content_type=</span><span class=\"method-args\">(content_type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the HTTP content type.</p> <div class=\"method-source-code\" id=\"content_type-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 189\ndef content_type=(content_type)\n  @content_type = content_type.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cookies\"> <span class=\"method-name\">cookies</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the response cookies, converted to a <a href=\"../hash\">Hash</a> of (name =&gt; value) pairs</p> <pre class=\"ruby\">assert_equal 'AuthorOfNewPage', r.cookies['author']\n</pre> <div class=\"method-source-code\" id=\"cookies-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 305\ndef cookies\n  cookies = {}\n  if header = self[SET_COOKIE]\n    header = header.split(\"\\n\") if header.respond_to?(:to_str)\n    header.each do |cookie|\n      if pair = cookie.split(';').first\n        key, value = pair.split(\"=\").map { |v| Rack::Utils.unescape(v) }\n        cookies[key] = value\n      end\n    end\n  end\n  cookies\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_cookie\"> <span class=\"method-name\">delete_cookie</span><span class=\"method-args\">(key, value={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"delete_cookie-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 249\ndef delete_cookie(key, value={})\n  ::Rack::Utils.delete_cookie_header!(header, key, value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-location\"> <span class=\"method-name\">location</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The location header we'll be responding with.</p> <div class=\"method-source-code\" id=\"location-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 254\ndef location\n  headers[LOCATION]\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"response#method-i-redirect_url\">redirect_url</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-location-3D\"> <span class=\"method-name\">location=</span><span class=\"method-args\">(url)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the location header we'll be responding with.</p> <div class=\"method-source-code\" id=\"location-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 260\ndef location=(url)\n  headers[LOCATION] = url\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-message\"> <span class=\"method-name\">message</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the corresponding message for the current HTTP status code:</p> <pre class=\"ruby\">response.status = 200\nresponse.message # =&gt; \"OK\"\n\nresponse.status = 404\nresponse.message # =&gt; \"Not Found\"\n</pre> <div class=\"method-source-code\" id=\"message-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 211\ndef message\n  Rack::Utils::HTTP_STATUS_CODES[@status]\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"response#method-i-status_message\">status_message</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-prepare-21\"> <span class=\"method-name\">prepare!</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"response#method-i-to_a\">to_a</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-redirect_url\"> <span class=\"method-name\">redirect_url</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"response#method-i-location\">location</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-response_code\"> <span class=\"method-name\">response_code</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The response code of the request.</p> <div class=\"method-source-code\" id=\"response_code-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 194\ndef response_code\n  @status\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sending-21\"> <span class=\"method-name\">sending!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"sending-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 164\ndef sending!\n  synchronize do\n    before_sending\n    @sending = true\n    @cv.broadcast\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sending-3F\"> <span class=\"method-name\">sending?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"sending-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 179\ndef sending?;   synchronize { @sending };   end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sent-21\"> <span class=\"method-name\">sent!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"sent-21-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 172\ndef sent!\n  synchronize do\n    @sent = true\n    @cv.broadcast\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sent-3F\"> <span class=\"method-name\">sent?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"sent-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 181\ndef sent?;      synchronize { @sent };      end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_cookie\"> <span class=\"method-name\">set_cookie</span><span class=\"method-args\">(key, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"set_cookie-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 245\ndef set_cookie(key, value)\n  ::Rack::Utils.set_cookie_header!(header, key, value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-status-3D\"> <span class=\"method-name\">status=</span><span class=\"method-args\">(status)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the HTTP status code.</p> <div class=\"method-source-code\" id=\"status-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 184\ndef status=(status)\n  @status = Rack::Utils.status_code(status)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-status_message\"> <span class=\"method-name\">status_message</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"response#method-i-message\">message</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_a\"> <span class=\"method-name\">to_a</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Turns the <a href=\"response\">Response</a> into a Rack-compatible array of the status, headers, and body. Allows explict splatting:</p> <pre class=\"ruby\">status, headers, body = *response\n</pre> <div class=\"method-source-code\" id=\"to_a-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 283\ndef to_a\n  rack_response @status, @header.to_hash\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"response#method-i-prepare-21\">prepare!</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_ary\"> <span class=\"method-name\">to_ary</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Be super clear that a response object is not an <a href=\"../array\">Array</a>. Defining this would make implicit splatting work, but it also makes adding responses as arrays work, and “flattening” responses, cascading to the rack body! Not sensible behavior.</p> <div class=\"method-source-code\" id=\"to_ary-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/response.rb, line 292\n    def to_ary\n      ActiveSupport::Deprecation.warn(\"        `ActionDispatch::Response#to_ary` no longer performs implicit conversion\n        to an array. Please use `response.to_a` instead, or a splat like `status,\n        headers, body = *response`.\n\".squish)\n\n      to_a\n    end</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/routing":"<h1 id=\"module-ActionDispatch::Routing\" class=\"module\"> module ActionDispatch::Routing </h1> <section class=\"description\"> <p>The routing module provides URL rewriting in native Ruby. It's a way to redirect incoming requests to controllers and actions. This replaces mod_rewrite rules. Best of all, Rails' Routing works with any web server. Routes are defined in <code>config/routes.rb</code>.</p> <p>Think of creating routes as drawing a map for your requests. The map tells them where to go based on some predefined pattern:</p> <pre>Rails.application.routes.draw do\n  Pattern 1 tells some request to go to one place\n  Pattern 2 tell them to go to another\n  ...\nend</pre> <p>The following symbols are special:</p> <pre>:controller maps to your controller name\n:action     maps to an action with your controllers</pre> <p>Other names simply map to a parameter as in the case of <code>:id</code>.</p> <h2 id=\"module-ActionDispatch::Routing-label-Resources\">Resources</h2> <p>Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. Instead of declaring separate routes for your <code>index</code>, <code>show</code>, <code>new</code>, <code>edit</code>, <code>create</code>, <code>update</code> and <code>destroy</code> actions, a resourceful route declares them in a single line of code:</p> <pre class=\"ruby\">resources :photos\n</pre> <p>Sometimes, you have a resource that clients always look up without referencing an ID. A common example, /profile always shows the profile of the currently logged in user. In this case, you can use a singular resource to map /profile (rather than /profile/:id) to the show action.</p> <pre class=\"ruby\">resource :profile\n</pre> <p>It's common to have resources that are logically children of other resources:</p> <pre class=\"ruby\">resources :magazines do\n  resources :ads\nend\n</pre> <p>You may wish to organize groups of controllers under a namespace. Most commonly, you might group a number of administrative controllers under an <code>admin</code> namespace. You would place these controllers under the <code>app/controllers/admin</code> directory, and you can group them together in your router:</p> <pre class=\"ruby\">namespace \"admin\" do\n  resources :posts, :comments\nend\n</pre> <p>Alternately, you can add prefixes to your path without using a separate directory by using <code>scope</code>. <code>scope</code> takes additional options which apply to all enclosed routes.</p> <pre class=\"ruby\">scope path: \"/cpanel\", as: 'admin' do\n  resources :posts, :comments\nend\n</pre> <p>For more, see <code>Routing::Mapper::Resources#resources</code>, <code>Routing::Mapper::Scoping#namespace</code>, and <code>Routing::Mapper::Scoping#scope</code>.</p> <h2 id=\"module-ActionDispatch::Routing-label-Non-resourceful+routes\">Non-resourceful routes</h2> <p>For routes that don't fit the <code>resources</code> mold, you can use the HTTP helper methods <code>get</code>, <code>post</code>, <code>patch</code>, <code>put</code> and <code>delete</code>.</p> <pre class=\"ruby\">get 'post/:id' =&gt; 'posts#show'\npost 'post/:id' =&gt; 'posts#create_comment'\n</pre> <p>If your route needs to respond to more than one HTTP method (or all methods) then using the <code>:via</code> option on <code>match</code> is preferable.</p> <pre class=\"ruby\">match 'post/:id' =&gt; 'posts#show', via: [:get, :post]\n</pre> <p>Now, if you POST to <code>/posts/:id</code>, it will route to the <code>create_comment</code> action. A GET on the same URL will route to the <code>show</code> action.</p> <h2 id=\"module-ActionDispatch::Routing-label-Named+routes\">Named routes</h2> <p>Routes can be named by passing an <code>:as</code> option, allowing for easy reference within your source as <code>name_of_route_url</code> for the full URL and <code>name_of_route_path</code> for the <a href=\"../uri\">URI</a> path.</p> <p>Example:</p> <pre class=\"ruby\"># In routes.rb\nget '/login' =&gt; 'accounts#login', as: 'login'\n\n# With render, redirect_to, tests, etc.\nredirect_to login_url\n</pre> <p>Arguments can be passed as well.</p> <pre class=\"ruby\">redirect_to show_item_path(id: 25)\n</pre> <p>Use <code>root</code> as a shorthand to name a route for the root path “/”.</p> <pre class=\"ruby\"># In routes.rb\nroot to: 'blogs#index'\n\n# would recognize http://www.example.com/ as\nparams = { controller: 'blogs', action: 'index' }\n\n# and provide these named routes\nroot_url   # =&gt; 'http://www.example.com/'\nroot_path  # =&gt; '/'\n</pre> <p>Note: when using <code>controller</code>, the route is simply named after the method you call on the block parameter rather than map.</p> <pre class=\"ruby\"># In routes.rb\ncontroller :blog do\n  get 'blog/show'     =&gt; :list\n  get 'blog/delete'   =&gt; :delete\n  get 'blog/edit/:id' =&gt; :edit\nend\n\n# provides named routes for show, delete, and edit\nlink_to @article.title, show_path(id: @article.id)\n</pre> <h2 id=\"module-ActionDispatch::Routing-label-Pretty+URLs\">Pretty URLs</h2> <p>Routes can generate pretty URLs. For example:</p> <pre class=\"ruby\">get '/articles/:year/:month/:day' =&gt; 'articles#find_by_id', constraints: {\n  year:       /\\d{4}/,\n  month:      /\\d{1,2}/,\n  day:        /\\d{1,2}/\n}\n</pre> <p>Using the route above, the URL “<span>localhost:3000/articles/2005/11/06</span>” maps to</p> <pre class=\"ruby\">params = {year: '2005', month: '11', day: '06'}\n</pre> <h2 id=\"module-ActionDispatch::Routing-label-Regular+Expressions+and+parameters\">Regular Expressions and parameters</h2> <p>You can specify a regular expression to define a format for a parameter.</p> <pre>controller 'geocode' do\n  get 'geocode/:postalcode' =&gt; :show, constraints: {\n    postalcode: /\\d{5}(-\\d{4})?/\n  }</pre> <p>Constraints can include the 'ignorecase' and 'extended syntax' regular expression modifiers:</p> <pre class=\"ruby\">controller 'geocode' do\n  get 'geocode/:postalcode' =&gt; :show, constraints: {\n    postalcode: /hx\\d\\d\\s\\d[a-z]{2}/i\n  }\nend\n\ncontroller 'geocode' do\n  get 'geocode/:postalcode' =&gt; :show, constraints: {\n    postalcode: /# Postcode format\n       \\d{5} #Prefix\n       (-\\d{4})? #Suffix\n       /x\n  }\nend\n</pre> <p>Using the multiline modifier will raise an <code>ArgumentError</code>. <a href=\"../encoding\">Encoding</a> regular expression modifiers are silently ignored. The match will always use the default encoding or ASCII.</p> <h2 id=\"module-ActionDispatch::Routing-label-External+redirects\">External redirects</h2> <p>You can redirect any path to another path using the redirect helper in your router:</p> <pre class=\"ruby\">get \"/stories\" =&gt; redirect(\"/posts\")\n</pre> <h2 id=\"module-ActionDispatch::Routing-label-Unicode+character+routes\">Unicode character routes</h2> <p>You can specify unicode character routes in your router:</p> <pre class=\"ruby\">get \"こんにちは\" =&gt; \"welcome#index\"\n</pre> <h2 id=\"module-ActionDispatch::Routing-label-Routing+to+Rack+Applications\">\n<a href=\"routing\">Routing</a> to <a href=\"../rack\">Rack</a> Applications</h2> <p>Instead of a <a href=\"../string\">String</a>, like <code>posts#index</code>, which corresponds to the index action in the PostsController, you can specify any <a href=\"../rack\">Rack</a> application as the endpoint for a matcher:</p> <pre class=\"ruby\">get \"/application.js\" =&gt; Sprockets\n</pre> <h2 id=\"module-ActionDispatch::Routing-label-Reloading+routes\">Reloading routes</h2> <p>You can reload routes if you feel you must:</p> <pre class=\"ruby\">Rails.application.reload_routes!\n</pre> <p>This will clear all named routes and reload routes.rb if the file has been modified from last load. To absolutely force reloading, use <code>reload!</code>.</p> <h2 id=\"module-ActionDispatch::Routing-label-Testing+Routes\">Testing Routes</h2> <p>The two main methods for testing your routes:</p> <h3 id=\"module-ActionDispatch::Routing-label-assert_routing\"><code>assert_routing</code></h3> <pre class=\"ruby\">def test_movie_route_properly_splits\n opts = {controller: \"plugin\", action: \"checkout\", id: \"2\"}\n assert_routing \"plugin/checkout/2\", opts\nend\n</pre> <p><code>assert_routing</code> lets you test whether or not the route properly resolves into options.</p> <h3 id=\"module-ActionDispatch::Routing-label-assert_recognizes\"><code>assert_recognizes</code></h3> <pre class=\"ruby\">def test_route_has_options\n opts = {controller: \"plugin\", action: \"show\", id: \"12\"}\n assert_recognizes opts, \"/plugins/show/12\"\nend\n</pre> <p>Note the subtle difference between the two: <code>assert_routing</code> tests that a URL fits options while <code>assert_recognizes</code> tests that a URL breaks into parameters properly.</p> <p>In tests you can simply pass the URL or named route to <code>get</code> or <code>post</code>.</p> <pre class=\"ruby\">def send_to_jail\n  get '/jail'\n  assert_response :success\n  assert_template \"jail/front\"\nend\n\ndef goes_to_login\n  get login_url\n  #...\nend\n</pre> <h2 id=\"module-ActionDispatch::Routing-label-View+a+list+of+all+your+routes\">View a list of all your routes</h2> <pre class=\"ruby\">rake routes\n</pre> <p>Target specific controllers by prefixing the command with <code>CONTROLLER=x</code>.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/routing/mapper/base":"<h1 id=\"module-ActionDispatch::Routing::Mapper::Base\" class=\"module\"> module ActionDispatch::Routing::Mapper::Base </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-default_url_options\"> <span class=\"method-name\">default_url_options</span><span class=\"method-args\">(options)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"base#method-i-default_url_options-3D\">default_url_options=</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default_url_options-3D\"> <span class=\"method-name\">default_url_options=</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"default_url_options-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 594\ndef default_url_options=(options)\n  @set.default_url_options = options\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"base#method-i-default_url_options\">default_url_options</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-has_named_route-3F\"> <span class=\"method-name\">has_named_route?</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Query if the following named route was already defined.</p> <div class=\"method-source-code\" id=\"has_named_route-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 606\ndef has_named_route?(name)\n  @set.named_routes.routes[name.to_sym]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-match\"> <span class=\"method-name\">match</span><span class=\"method-args\">(path, options=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Matches a url pattern to one or more routes.</p> <p>You should not use the <code>match</code> method in your router without specifying an HTTP method.</p> <p>If you want to expose your action to both GET and POST, use:</p> <pre class=\"ruby\"># sets :controller, :action and :id in params\nmatch ':controller/:action/:id', via: [:get, :post]\n</pre> <p>Note that <code>:controller</code>, <code>:action</code> and <code>:id</code> are interpreted as url query parameters and thus available through <code>params</code> in an action.</p> <p>If you want to expose your action to GET, use <code>get</code> in the router:</p> <p>Instead of:</p> <pre class=\"ruby\">match \":controller/:action/:id\"\n</pre> <p>Do:</p> <pre class=\"ruby\">get \":controller/:action/:id\"\n</pre> <p>Two of these symbols are special, <code>:controller</code> maps to the controller and <code>:action</code> to the controller's action. A pattern can also map wildcard segments (globs) to params:</p> <pre class=\"ruby\">get 'songs/*category/:title', to: 'songs#show'\n\n# 'songs/rock/classic/stairway-to-heaven' sets\n#  params[:category] = 'rock/classic'\n#  params[:title] = 'stairway-to-heaven'\n</pre> <p>To match a wildcard parameter, it must have a name assigned to it. Without a variable name to attach the glob parameter to, the route can't be parsed.</p> <p>When a pattern points to an internal route, the route's <code>:action</code> and <code>:controller</code> should be set in options or hash shorthand. Examples:</p> <pre class=\"ruby\">match 'photos/:id' =&gt; 'photos#show', via: :get\nmatch 'photos/:id', to: 'photos#show', via: :get\nmatch 'photos/:id', controller: 'photos', action: 'show', via: :get\n</pre> <p>A pattern can also point to a <code>Rack</code> endpoint i.e. anything that responds to <code>call</code>:</p> <pre class=\"ruby\">match 'photos/:id', to: lambda {|hash| [200, {}, [\"Coming soon\"]] }, via: :get\nmatch 'photos/:id', to: PhotoRackApp, via: :get\n# Yes, controller actions are just rack endpoints\nmatch 'photos/:id', to: PhotosController.action(:show), via: :get\n</pre> <p>Because requesting various HTTP verbs with a single action has security implications, you must either specify the actions in the via options or use one of the <a href=\"httphelpers\">HttpHelpers</a> instead <code>match</code></p> <h3 id=\"method-i-match-label-Options\">Options</h3> <p>Any options not seen here are passed on as params with the url.</p> <dl class=\"rdoc-list label-list\">\n<dt>:controller </dt>\n<dd> <p>The route's controller.</p> </dd>\n<dt>:action </dt>\n<dd> <p>The route's action.</p> </dd>\n<dt>:param </dt>\n<dd> <p>Overrides the default resource identifier <code>:id</code> (name of the dynamic segment used to generate the routes). You can access that segment from your controller using <code>params[<:param>]</:param></code>.</p> </dd>\n<dt>:path </dt>\n<dd> <p>The path prefix for the routes.</p> </dd>\n<dt>:module </dt>\n<dd> <p>The namespace for :controller.</p> <pre class=\"ruby\">match 'path', to: 'c#a', module: 'sekret', controller: 'posts', via: :get\n# =&gt; Sekret::PostsController\n</pre> <p>See <code>Scoping#namespace</code> for its scope equivalent.</p> </dd>\n<dt>:as </dt>\n<dd> <p>The name used to generate routing helpers.</p> </dd>\n<dt>:via </dt>\n<dd> <p>Allowed HTTP verb(s) for route.</p> <pre class=\"ruby\">match 'path', to: 'c#a', via: :get\nmatch 'path', to: 'c#a', via: [:get, :post]\nmatch 'path', to: 'c#a', via: :all\n</pre> </dd>\n<dt>:to </dt>\n<dd> <p>Points to a <code>Rack</code> endpoint. Can be an object that responds to <code>call</code> or a string representing a controller's action.</p> <pre class=\"ruby\">match 'path', to: 'controller#action', via: :get\nmatch 'path', to: lambda { |env| [200, {}, [\"Success!\"]] }, via: :get\nmatch 'path', to: RackApp, via: :get\n</pre> </dd>\n<dt>:on </dt>\n<dd> <p>Shorthand for wrapping routes in a specific RESTful context. Valid values are <code>:member</code>, <code>:collection</code>, and <code>:new</code>. Only use within <code>resource(s)</code> block. For example:</p> <pre class=\"ruby\">resource :bar do\n  match 'foo', to: 'c#a', on: :member, via: [:get, :post]\nend\n</pre> <p>Is equivalent to:</p> <pre class=\"ruby\">resource :bar do\n  member do\n    match 'foo', to: 'c#a', via: [:get, :post]\n  end\nend\n</pre> </dd>\n<dt>:constraints </dt>\n<dd> <p>Constrains parameters with a hash of regular expressions or an object that responds to <code>matches?</code>. In addition, constraints other than path can also be specified with any object that responds to <code>===</code> (eg. <a href=\"../../../string\">String</a>, <a href=\"../../../array\">Array</a>, <a href=\"../../../range\">Range</a>, etc.).</p> <pre class=\"ruby\">match 'path/:id', constraints: { id: /[A-Z]\\d{5}/ }, via: :get\n\nmatch 'json_only', constraints: { format: 'json' }, via: :get\n\nclass Whitelist\n  def matches?(request) request.remote_ip == '1.2.3.4' end\nend\nmatch 'path', to: 'c#a', constraints: Whitelist.new, via: :get\n</pre> <p>See <code>Scoping#constraints</code> for more examples with its scope equivalent.</p> </dd>\n<dt>:defaults </dt>\n<dd> <p>Sets defaults for parameters</p> <pre class=\"ruby\"># Sets params[:format] to 'jpg' by default\nmatch 'path', to: 'c#a', defaults: { format: 'jpg' }, via: :get\n</pre> <p>See <code>Scoping#defaults</code> for its scope equivalent.</p> </dd>\n<dt>:anchor </dt>\n<dd> <p>Boolean to anchor a <code>match</code> pattern. Default is true. When set to false, the pattern matches any request prefixed with the given path.</p> <pre class=\"ruby\"># Matches any request starting with 'path'\nmatch 'path', to: 'c#a', anchor: false, via: :get\n</pre> </dd>\n<dt>:format </dt>\n<dd> <p>Allows you to specify the default value for optional <code>format</code> segment or disable it by supplying <code>false</code>.</p> </dd>\n</dl> <div class=\"method-source-code\" id=\"match-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 545\ndef match(path, options=nil)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mount\"> <span class=\"method-name\">mount</span><span class=\"method-args\">(app, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Mount a Rack-based application to be used within the application.</p> <pre class=\"ruby\">mount SomeRackApp, at: \"some_route\"\n</pre> <p>Alternatively:</p> <pre class=\"ruby\">mount(SomeRackApp =&gt; \"some_route\")\n</pre> <p>For options, see <code>match</code>, as <code>mount</code> uses it internally.</p> <p>All mounted applications come with routing helpers to access them. These are named after the class specified, so for the above example the helper is either <code>some_rack_app_path</code> or <code>some_rack_app_url</code>. To customize this helper's name, use the <code>:as</code> option:</p> <pre class=\"ruby\">mount(SomeRackApp =&gt; \"some_route\", as: \"exciting\")\n</pre> <p>This will generate the <code>exciting_path</code> and <code>exciting_url</code> helpers which can be used to navigate to this mounted app.</p> <div class=\"method-source-code\" id=\"mount-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 567\ndef mount(app, options = nil)\n  if options\n    path = options.delete(:at)\n  else\n    unless Hash === app\n      raise ArgumentError, \"must be called with mount point\"\n    end\n\n    options = app\n    app, path = options.find { |k, _| k.respond_to?(:call) }\n    options.delete(app) if app\n  end\n\n  raise \"A rack application must be specified\" unless path\n\n  rails_app = rails_app? app\n  options[:as] ||= app_name(app, rails_app)\n\n  target_as       = name_for_action(options[:as], path)\n  options[:via] ||= :all\n\n  match(path, options.merge(:to =&gt; app, :anchor =&gt; false, :format =&gt; false))\n\n  define_generate_prefix(app, target_as) if rails_app\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-root\"> <span class=\"method-name\">root</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>You can specify what Rails should route “/” to with the root method:</p> <pre class=\"ruby\">root to: 'pages#main'\n</pre> <p>For options, see <code>match</code>, as <code>root</code> uses it internally.</p> <p>You can also pass a string which will expand</p> <pre class=\"ruby\">root 'pages#main'\n</pre> <p>You should put the root route at the top of <code>config/routes.rb</code>, because this means it will be matched first. As this is the most popular route of most Rails applications, this is beneficial.</p> <div class=\"method-source-code\" id=\"root-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 386\ndef root(options = {})\n  match '/', { :as =&gt; :root, :via =&gt; :get }.merge!(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_default_scope\"> <span class=\"method-name\">with_default_scope</span><span class=\"method-args\">(scope, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"with_default_scope-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 599\ndef with_default_scope(scope, &amp;block)\n  scope(scope) do\n    instance_exec(&amp;block)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/routing/mapper/concerns":"<h1 id=\"module-ActionDispatch::Routing::Mapper::Concerns\" class=\"module\"> module ActionDispatch::Routing::Mapper::Concerns </h1> <section class=\"description\"> <p><a href=\"../../routing\">Routing</a> <a href=\"concerns\">Concerns</a> allow you to declare common routes that can be reused inside others resources and routes.</p> <pre class=\"ruby\">concern :commentable do\n  resources :comments\nend\n\nconcern :image_attachable do\n  resources :images, only: :index\nend\n</pre> <p>These concerns are used in <a href=\"resources\">Resources</a> routing:</p> <pre class=\"ruby\">resources :messages, concerns: [:commentable, :image_attachable]\n</pre> <p>or in a scope or namespace:</p> <pre class=\"ruby\">namespace :posts do\n  concerns :commentable\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-concern\"> <span class=\"method-name\">concern</span><span class=\"method-args\">(name, callable = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define a routing concern using a name.</p> <p><a href=\"concerns\">Concerns</a> may be defined inline, using a block, or handled by another object, by passing that object as the second parameter.</p> <p>The concern object, if supplied, should respond to <code>call</code>, which will receive two parameters:</p> <pre>* The current mapper\n* A hash of options which the concern object may use</pre> <p>Options may also be used by concerns defined in a block by accepting a block parameter. So, using a block, you might do something as simple as limit the actions available on certain resources, passing standard resource options through the concern:</p> <pre class=\"ruby\">concern :commentable do |options|\n  resources :comments, options\nend\n\nresources :posts, concerns: :commentable\nresources :archived_posts do\n  # Don't allow comments on archived posts\n  concerns :commentable, only: [:index, :show]\nend\n</pre> <p>Or, using a callable object, you might implement something more specific to your application, which would be out of place in your routes file.</p> <pre class=\"ruby\"># purchasable.rb\nclass Purchasable\n  def initialize(defaults = {})\n    @defaults = defaults\n  end\n\n  def call(mapper, options = {})\n    options = @defaults.merge(options)\n    mapper.resources :purchases\n    mapper.resources :receipts\n    mapper.resources :returns if options[:returnable]\n  end\nend\n\n# routes.rb\nconcern :purchasable, Purchasable.new(returnable: true)\n\nresources :toys, concerns: :purchasable\nresources :electronics, concerns: :purchasable\nresources :pets do\n  concerns :purchasable, returnable: false\nend\n</pre> <p>Any routing helpers can be used inside a concern. If using a callable, they're accessible from the <span>Mapper</span> that's passed to <code>call</code>.</p> <div class=\"method-source-code\" id=\"concern-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1862\ndef concern(name, callable = nil, &amp;block)\n  callable ||= lambda { |mapper, options| mapper.instance_exec(options, &amp;block) }\n  @concerns[name] = callable\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-concerns\"> <span class=\"method-name\">concerns</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Use the named concerns</p> <pre class=\"ruby\">resources :posts do\n  concerns :commentable\nend\n</pre> <p>concerns also work in any routes helper that you want to use:</p> <pre class=\"ruby\">namespace :posts do\n  concerns :commentable\nend\n</pre> <div class=\"method-source-code\" id=\"concerns-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1878\ndef concerns(*args)\n  options = args.extract_options!\n  args.flatten.each do |name|\n    if concern = @concerns[name]\n      concern.call(self, options)\n    else\n      raise ArgumentError, \"No concern named #{name} was found!\"\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/routing/mapper/httphelpers":"<h1 id=\"module-ActionDispatch::Routing::Mapper::HttpHelpers\" class=\"module\"> module ActionDispatch::Routing::Mapper::HttpHelpers </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define a route that only recognizes HTTP DELETE. For supported arguments, see <a href=\"base#method-i-match\">match</a></p> <pre class=\"ruby\">delete 'broccoli', to: 'food#broccoli'\n</pre> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 681\ndef delete(*args, &amp;block)\n  map_method(:delete, args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-get\"> <span class=\"method-name\">get</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define a route that only recognizes HTTP GET. For supported arguments, see <a href=\"base#method-i-match\">match</a></p> <pre class=\"ruby\">get 'bacon', to: 'food#bacon'\n</pre> <div class=\"method-source-code\" id=\"get-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 649\ndef get(*args, &amp;block)\n  map_method(:get, args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-patch\"> <span class=\"method-name\">patch</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define a route that only recognizes HTTP PATCH. For supported arguments, see <a href=\"base#method-i-match\">match</a></p> <pre class=\"ruby\">patch 'bacon', to: 'food#bacon'\n</pre> <div class=\"method-source-code\" id=\"patch-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 665\ndef patch(*args, &amp;block)\n  map_method(:patch, args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-post\"> <span class=\"method-name\">post</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define a route that only recognizes HTTP POST. For supported arguments, see <a href=\"base#method-i-match\">match</a></p> <pre class=\"ruby\">post 'bacon', to: 'food#bacon'\n</pre> <div class=\"method-source-code\" id=\"post-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 657\ndef post(*args, &amp;block)\n  map_method(:post, args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-put\"> <span class=\"method-name\">put</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define a route that only recognizes HTTP PUT. For supported arguments, see <a href=\"base#method-i-match\">match</a></p> <pre class=\"ruby\">put 'bacon', to: 'food#bacon'\n</pre> <div class=\"method-source-code\" id=\"put-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 673\ndef put(*args, &amp;block)\n  map_method(:put, args, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/routing/mapper/resources":"<h1 id=\"module-ActionDispatch::Routing::Mapper::Resources\" class=\"module\"> module ActionDispatch::Routing::Mapper::Resources </h1> <section class=\"description\"> <p>Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. Instead of declaring separate routes for your <code>index</code>, <code>show</code>, <code>new</code>, <code>edit</code>, <code>create</code>, <code>update</code> and <code>destroy</code> actions, a resourceful route declares them in a single line of code:</p> <pre class=\"ruby\">resources :photos\n</pre> <p>Sometimes, you have a resource that clients always look up without referencing an ID. A common example, /profile always shows the profile of the currently logged in user. In this case, you can use a singular resource to map /profile (rather than /profile/:id) to the show action.</p> <pre class=\"ruby\">resource :profile\n</pre> <p>It's common to have resources that are logically children of other resources:</p> <pre class=\"ruby\">resources :magazines do\n  resources :ads\nend\n</pre> <p>You may wish to organize groups of controllers under a namespace. Most commonly, you might group a number of administrative controllers under an <code>admin</code> namespace. You would place these controllers under the <code>app/controllers/admin</code> directory, and you can group them together in your router:</p> <pre class=\"ruby\">namespace \"admin\" do\n  resources :posts, :comments\nend\n</pre> <p>By default the <code>:id</code> parameter doesn't accept dots. If you need to use dots as part of the <code>:id</code> parameter add a constraint which overrides this restriction, e.g:</p> <pre class=\"ruby\">resources :articles, id: /[^\\/]+/\n</pre> <p>This allows any character other than a slash as part of your <code>:id</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"CANONICAL_ACTIONS\">CANONICAL_ACTIONS </dt>\n\n<dt id=\"RESOURCE_OPTIONS\">RESOURCE_OPTIONS </dt>\n\n<dt id=\"VALID_ON_OPTIONS\">VALID_ON_OPTIONS </dt>\n<dd>\n<p><a href=\"resources#CANONICAL_ACTIONS\">CANONICAL_ACTIONS</a> holds all actions that does not need a prefix or a path appended since they fit properly in their scope level.</p> </dd>\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collection\"> <span class=\"method-name\">collection</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>To add a route to the collection:</p> <pre class=\"ruby\">resources :photos do\n  collection do\n    get 'search'\n  end\nend\n</pre> <p>This will enable Rails to recognize paths such as <code>/photos/search</code> with GET, and route to the search action of <code>PhotosController</code>. It will also create the <code>search_photos_url</code> and <code>search_photos_path</code> route helpers.</p> <div class=\"method-source-code\" id=\"collection-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1387\ndef collection\n  unless resource_scope?\n    raise ArgumentError, \"can't use collection outside resource(s) scope\"\n  end\n\n  with_scope_level(:collection) do\n    scope(parent_resource.collection_scope) do\n      yield\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-match\"> <span class=\"method-name\">match</span><span class=\"method-args\">(path, *rest)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>match 'path' =&gt; 'controller#action' match 'path', to: 'controller#action' match 'path', 'otherpath', on: :member, via: :get</p> <div class=\"method-source-code\" id=\"match-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1472\ndef match(path, *rest)\n  if rest.empty? &amp;&amp; Hash === path\n    options  = path\n    path, to = options.find { |name, _value| name.is_a?(String) }\n\n    case to\n    when Symbol\n      options[:action] = to\n    when String\n      if to =~ /#/\n        options[:to] = to\n      else\n        options[:controller] = to\n      end\n    else\n      options[:to] = to\n    end\n\n    options.delete(path)\n    paths = [path]\n  else\n    options = rest.pop || {}\n    paths = [path] + rest\n  end\n\n  options[:anchor] = true unless options.key?(:anchor)\n\n  if options[:on] &amp;&amp; !VALID_ON_OPTIONS.include?(options[:on])\n    raise ArgumentError, \"Unknown scope #{on.inspect} given to :on\"\n  end\n\n  if @scope[:controller] &amp;&amp; @scope[:action]\n    options[:to] ||= \"#{@scope[:controller]}##{@scope[:action]}\"\n  end\n\n  paths.each do |_path|\n    route_options = options.dup\n    route_options[:path] ||= _path if _path.is_a?(String)\n\n    path_without_format = _path.to_s.sub(/\\(\\.:format\\)$/, '')\n    if using_match_shorthand?(path_without_format, route_options)\n      route_options[:to] ||= path_without_format.gsub(%r{^/}, \"\").sub(%r{/([^/]*)$}, '#\\1')\n      route_options[:to].tr!(\"-\", \"_\")\n    end\n\n    decomposed_match(_path, route_options)\n  end\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-member\"> <span class=\"method-name\">member</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>To add a member route, add a member block into the resource block:</p> <pre class=\"ruby\">resources :photos do\n  member do\n    get 'preview'\n  end\nend\n</pre> <p>This will recognize <code>/photos/1/preview</code> with GET, and route to the preview action of <code>PhotosController</code>. It will also create the <code>preview_photo_url</code> and <code>preview_photo_path</code> helpers.</p> <div class=\"method-source-code\" id=\"member-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1410\ndef member\n  unless resource_scope?\n    raise ArgumentError, \"can't use member outside resource(s) scope\"\n  end\n\n  with_scope_level(:member) do\n    if shallow?\n      shallow_scope(parent_resource.member_scope) { yield }\n    else\n      scope(parent_resource.member_scope) { yield }\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespace\"> <span class=\"method-name\">namespace</span><span class=\"method-args\">(path, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"scoping#method-i-namespace\">ActionDispatch::Routing::Mapper::Scoping#namespace</a></p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"namespace-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1451\ndef namespace(path, options = {})\n  if resource_scope?\n    nested { super }\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-nested\"> <span class=\"method-name\">nested</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"nested-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1436\ndef nested\n  unless resource_scope?\n    raise ArgumentError, \"can't use nested outside resource(s) scope\"\n  end\n\n  with_scope_level(:nested) do\n    if shallow? &amp;&amp; shallow_nesting_depth &gt;= 1\n      shallow_scope(parent_resource.nested_scope, nested_options) { yield }\n    else\n      scope(parent_resource.nested_scope, nested_options) { yield }\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1424\ndef new\n  unless resource_scope?\n    raise ArgumentError, \"can't use new outside resource(s) scope\"\n  end\n\n  with_scope_level(:new) do\n    scope(parent_resource.new_scope(action_path(:new))) do\n      yield\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-resource\"> <span class=\"method-name\">resource</span><span class=\"method-args\">(*resources) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sometimes, you have a resource that clients always look up without referencing an ID. A common example, /profile always shows the profile of the currently logged in user. In this case, you can use a singular resource to map /profile (rather than /profile/:id) to the show action:</p> <pre class=\"ruby\">resource :profile\n</pre> <p>creates six different routes in your application, all mapping to the <code>Profiles</code> controller (note that the controller is named after the plural):</p> <pre>GET       /profile/new\nPOST      /profile\nGET       /profile\nGET       /profile/edit\nPATCH/PUT /profile\nDELETE    /profile</pre> <h3 id=\"method-i-resource-label-Options\">Options</h3> <p>Takes same options as <code>resources</code>.</p> <div class=\"method-source-code\" id=\"resource-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1190\ndef resource(*resources, &amp;block)\n  options = resources.extract_options!.dup\n\n  if apply_common_behavior_for(:resource, resources, options, &amp;block)\n    return self\n  end\n\n  resource_scope(:resource, SingletonResource.new(resources.pop, options)) do\n    yield if block_given?\n\n    concerns(options[:concerns]) if options[:concerns]\n\n    collection do\n      post :create\n    end if parent_resource.actions.include?(:create)\n\n    new do\n      get :new\n    end if parent_resource.actions.include?(:new)\n\n    set_member_mappings_for_resource\n  end\n\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-resources\"> <span class=\"method-name\">resources</span><span class=\"method-args\">(*resources) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>In Rails, a resourceful route provides a mapping between HTTP verbs and URLs and controller actions. By convention, each action also maps to particular CRUD operations in a database. A single entry in the routing file, such as</p> <pre class=\"ruby\">resources :photos\n</pre> <p>creates seven different routes in your application, all mapping to the <code>Photos</code> controller:</p> <pre>GET       /photos\nGET       /photos/new\nPOST      /photos\nGET       /photos/:id\nGET       /photos/:id/edit\nPATCH/PUT /photos/:id\nDELETE    /photos/:id</pre> <p><a href=\"resources\">Resources</a> can also be nested infinitely by using this block syntax:</p> <pre class=\"ruby\">resources :photos do\n  resources :comments\nend\n</pre> <p>This generates the following comments routes:</p> <pre>GET       /photos/:photo_id/comments\nGET       /photos/:photo_id/comments/new\nPOST      /photos/:photo_id/comments\nGET       /photos/:photo_id/comments/:id\nGET       /photos/:photo_id/comments/:id/edit\nPATCH/PUT /photos/:photo_id/comments/:id\nDELETE    /photos/:photo_id/comments/:id</pre> <h3 id=\"method-i-resources-label-Options\">Options</h3> <p>Takes same options as <code>Base#match</code> as well as:</p> <dl class=\"rdoc-list label-list\">\n<dt>:path_names </dt>\n<dd> <p>Allows you to change the segment component of the <code>edit</code> and <code>new</code> actions. Actions not specified are not changed.</p> <pre class=\"ruby\">resources :posts, path_names: { new: \"brand_new\" }\n</pre> <p>The above example will now change /posts/new to /posts/brand_new</p> </dd>\n<dt>:path </dt>\n<dd> <p>Allows you to change the path prefix for the resource.</p> <pre class=\"ruby\">resources :posts, path: 'postings'\n</pre> <p>The resource and all segments will now route to /postings instead of /posts</p> </dd>\n<dt>:only </dt>\n<dd> <p>Only generate routes for the given actions.</p> <pre class=\"ruby\">resources :cows, only: :show\nresources :cows, only: [:show, :index]\n</pre> </dd>\n<dt>:except </dt>\n<dd> <p>Generate all routes except for the given actions.</p> <pre class=\"ruby\">resources :cows, except: :show\nresources :cows, except: [:show, :index]\n</pre> </dd>\n<dt>:shallow </dt>\n<dd> <p>Generates shallow routes for nested resource(s). When placed on a parent resource, generates shallow routes for all nested resources.</p> <pre class=\"ruby\">resources :posts, shallow: true do\n  resources :comments\nend\n</pre> <p>Is the same as:</p> <pre class=\"ruby\">resources :posts do\n  resources :comments, except: [:show, :edit, :update, :destroy]\nend\nresources :comments, only: [:show, :edit, :update, :destroy]\n</pre> <p>This allows URLs for resources that otherwise would be deeply nested such as a comment on a blog post like <code>/posts/a-long-permalink/comments/1234</code> to be shortened to just <code>/comments/1234</code>.</p> </dd>\n<dt>:shallow_path </dt>\n<dd> <p>Prefixes nested shallow routes with the specified path.</p> <pre class=\"ruby\">scope shallow_path: \"sekret\" do\n  resources :posts do\n    resources :comments, shallow: true\n  end\nend\n</pre> <p>The <code>comments</code> resource here will have the following routes generated for it:</p> <pre>post_comments    GET       /posts/:post_id/comments(.:format)\npost_comments    POST      /posts/:post_id/comments(.:format)\nnew_post_comment GET       /posts/:post_id/comments/new(.:format)\nedit_comment     GET       /sekret/comments/:id/edit(.:format)\ncomment          GET       /sekret/comments/:id(.:format)\ncomment          PATCH/PUT /sekret/comments/:id(.:format)\ncomment          DELETE    /sekret/comments/:id(.:format)</pre> </dd>\n<dt>:shallow_prefix </dt>\n<dd> <p>Prefixes nested shallow route names with specified prefix.</p> <pre class=\"ruby\">scope shallow_prefix: \"sekret\" do\n  resources :posts do\n    resources :comments, shallow: true\n  end\nend\n</pre> <p>The <code>comments</code> resource here will have the following routes generated for it:</p> <pre>post_comments           GET       /posts/:post_id/comments(.:format)\npost_comments           POST      /posts/:post_id/comments(.:format)\nnew_post_comment        GET       /posts/:post_id/comments/new(.:format)\nedit_sekret_comment     GET       /comments/:id/edit(.:format)\nsekret_comment          GET       /comments/:id(.:format)\nsekret_comment          PATCH/PUT /comments/:id(.:format)\nsekret_comment          DELETE    /comments/:id(.:format)</pre> </dd>\n<dt>:format </dt>\n<dd> <p>Allows you to specify the default value for optional <code>format</code> segment or disable it by supplying <code>false</code>.</p> </dd>\n</dl> <h3 id=\"method-i-resources-label-Examples\">Examples</h3> <pre class=\"ruby\"># routes call &lt;tt&gt;Admin::PostsController&lt;/tt&gt;\nresources :posts, module: \"admin\"\n\n# resource actions are at /admin/posts.\nresources :posts, path: \"admin/posts\"\n</pre> <div class=\"method-source-code\" id=\"resources-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1348\ndef resources(*resources, &amp;block)\n  options = resources.extract_options!.dup\n\n  if apply_common_behavior_for(:resources, resources, options, &amp;block)\n    return self\n  end\n\n  resource_scope(:resources, Resource.new(resources.pop, options)) do\n    yield if block_given?\n\n    concerns(options[:concerns]) if options[:concerns]\n\n    collection do\n      get  :index if parent_resource.actions.include?(:index)\n      post :create if parent_resource.actions.include?(:create)\n    end\n\n    new do\n      get :new\n    end if parent_resource.actions.include?(:new)\n\n    set_member_mappings_for_resource\n  end\n\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-resources_path_names\"> <span class=\"method-name\">resources_path_names</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"resources_path_names-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1165\ndef resources_path_names(options)\n  @scope[:path_names].merge!(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-root\"> <span class=\"method-name\">root</span><span class=\"method-args\">(path, options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"root-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1564\ndef root(path, options={})\n  if path.is_a?(String)\n    options[:to] = path\n  elsif path.is_a?(Hash) and options.empty?\n    options = path\n  else\n    raise ArgumentError, \"must be called with a path and/or options\"\n  end\n\n  if @scope.resources?\n    with_scope_level(:root) do\n      scope(parent_resource.path) do\n        super(options)\n      end\n    end\n  else\n    super(options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-shallow\"> <span class=\"method-name\">shallow</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"shallow-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1459\ndef shallow\n  scope(:shallow =&gt; true) do\n    yield\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-shallow-3F\"> <span class=\"method-name\">shallow?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"shallow-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1465\ndef shallow?\n  parent_resource.instance_of?(Resource) &amp;&amp; @scope[:shallow]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-using_match_shorthand-3F\"> <span class=\"method-name\">using_match_shorthand?</span><span class=\"method-args\">(path, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"using_match_shorthand-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1522\ndef using_match_shorthand?(path, options)\n  path &amp;&amp; (options[:to] || options[:action]).nil? &amp;&amp; path =~ %r{^/?[-\\w]+/[-\\w/]+$}\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_member_mappings_for_resource\"> <span class=\"method-name\">set_member_mappings_for_resource</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"set_member_mappings_for_resource-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1772\ndef set_member_mappings_for_resource\n  member do\n    get :edit if parent_resource.actions.include?(:edit)\n    get :show if parent_resource.actions.include?(:show)\n    if parent_resource.actions.include?(:update)\n      patch :update\n      put   :update\n    end\n    delete :destroy if parent_resource.actions.include?(:destroy)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_exclusive_scope\"> <span class=\"method-name\">with_exclusive_scope</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"with_exclusive_scope-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1651\ndef with_exclusive_scope\n  begin\n    @scope = @scope.new(:as =&gt; nil, :path =&gt; nil)\n\n    with_scope_level(:exclusive) do\n      yield\n    end\n  ensure\n    @scope = @scope.parent\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_scope_level\"> <span class=\"method-name\">with_scope_level</span><span class=\"method-args\">(kind) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"with_scope_level-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 1663\ndef with_scope_level(kind)\n  @scope = @scope.new_level(kind)\n  yield\nensure\n  @scope = @scope.parent\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/routing/mapper/scoping":"<h1 id=\"module-ActionDispatch::Routing::Mapper::Scoping\" class=\"module\"> module ActionDispatch::Routing::Mapper::Scoping </h1> <section class=\"description\"> <p>You may wish to organize groups of controllers under a namespace. Most commonly, you might group a number of administrative controllers under an <code>admin</code> namespace. You would place these controllers under the <code>app/controllers/admin</code> directory, and you can group them together in your router:</p> <pre class=\"ruby\">namespace \"admin\" do\n  resources :posts, :comments\nend\n</pre> <p>This will create a number of routes for each of the posts and comments controller. For <code>Admin::PostsController</code>, Rails will create:</p> <pre>GET       /admin/posts\nGET       /admin/posts/new\nPOST      /admin/posts\nGET       /admin/posts/1\nGET       /admin/posts/1/edit\nPATCH/PUT /admin/posts/1\nDELETE    /admin/posts/1</pre> <p>If you want to route /posts (without the prefix /admin) to <code>Admin::PostsController</code>, you could use</p> <pre class=\"ruby\">scope module: \"admin\" do\n  resources :posts\nend\n</pre> <p>or, for a single case</p> <pre class=\"ruby\">resources :posts, module: \"admin\"\n</pre> <p>If you want to route /admin/posts to <code>PostsController</code> (without the <code>Admin::</code> module prefix), you could use</p> <pre class=\"ruby\">scope \"/admin\" do\n  resources :posts\nend\n</pre> <p>or, for a single case</p> <pre class=\"ruby\">resources :posts, path: \"/admin/posts\"\n</pre> <p>In each of these cases, the named routes remain the same as if you did not use scope. In the last case, the following paths map to <code>PostsController</code>:</p> <pre>GET       /admin/posts\nGET       /admin/posts/new\nPOST      /admin/posts\nGET       /admin/posts/1\nGET       /admin/posts/1/edit\nPATCH/PUT /admin/posts/1\nDELETE    /admin/posts/1</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-constraints\"> <span class=\"method-name\">constraints</span><span class=\"method-args\">(constraints = {}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <h3 id=\"method-i-constraints-label-Parameter+Restriction\">Parameter Restriction</h3> <p>Allows you to constrain the nested routes based on a set of rules. For instance, in order to change the routes to allow for a dot character in the <code>id</code> parameter:</p> <pre class=\"ruby\">constraints(id: /\\d+\\.\\d+/) do\n  resources :posts\nend\n</pre> <p>Now routes such as <code>/posts/1</code> will no longer be valid, but <code>/posts/1.1</code> will be. The <code>id</code> parameter must match the constraint passed in for this example.</p> <p>You may use this to also restrict other parameters:</p> <pre class=\"ruby\">resources :posts do\n  constraints(post_id: /\\d+\\.\\d+/) do\n    resources :comments\n  end\nend\n</pre> <h3 id=\"method-i-constraints-label-Restricting+based+on+IP\">Restricting based on IP</h3> <p>Routes can also be constrained to an IP or a certain range of IP addresses:</p> <pre class=\"ruby\">constraints(ip: /192\\.168\\.\\d+\\.\\d+/) do\n  resources :posts\nend\n</pre> <p>Any user connecting from the 192.168.* range will be able to see this resource, where as any user connecting outside of this range will be told there is no such route.</p> <h3 id=\"method-i-constraints-label-Dynamic+request+matching\">Dynamic request matching</h3> <p>Requests to routes can be constrained based on specific criteria:</p> <pre class=\"ruby\">constraints(lambda { |req| req.env[\"HTTP_USER_AGENT\"] =~ /iPhone/ }) do\n  resources :iphones\nend\n</pre> <p>You are able to move this logic out into a class if it is too complex for routes. This class must have a <code>matches?</code> method defined on it which either returns <code>true</code> if the user should be given access to that route, or <code>false</code> if the user should not.</p> <pre class=\"ruby\">class Iphone\n  def self.matches?(request)\n    request.env[\"HTTP_USER_AGENT\"] =~ /iPhone/\n  end\nend\n</pre> <p>An expected place for this code would be <code>lib/constraints</code>.</p> <p>This class is then used like this:</p> <pre class=\"ruby\">constraints(Iphone) do\n  resources :iphones\nend\n</pre> <div class=\"method-source-code\" id=\"constraints-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 939\ndef constraints(constraints = {})\n  scope(:constraints =&gt; constraints) { yield }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-controller\"> <span class=\"method-name\">controller</span><span class=\"method-args\">(controller, options={}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Scopes routes to a specific controller</p> <pre class=\"ruby\">controller \"food\" do\n  match \"bacon\", action: \"bacon\"\nend\n</pre> <div class=\"method-source-code\" id=\"controller-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 827\ndef controller(controller, options={})\n  options[:controller] = controller\n  scope(options) { yield }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-defaults\"> <span class=\"method-name\">defaults</span><span class=\"method-args\">(defaults = {}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to set default parameters for a route, such as this:</p> <pre class=\"ruby\">defaults id: 'home' do\n  match 'scoped_pages/(:id)', to: 'pages#show'\nend\n</pre> <p>Using this, the <code>:id</code> parameter here will default to 'home'.</p> <div class=\"method-source-code\" id=\"defaults-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 948\ndef defaults(defaults = {})\n  scope(:defaults =&gt; defaults) { yield }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespace\"> <span class=\"method-name\">namespace</span><span class=\"method-args\">(path, options = {}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Scopes routes to a specific namespace. For example:</p> <pre class=\"ruby\">namespace :admin do\n  resources :posts\nend\n</pre> <p>This generates the following routes:</p> <pre>    admin_posts GET       /admin/posts(.:format)          admin/posts#index\n    admin_posts POST      /admin/posts(.:format)          admin/posts#create\n new_admin_post GET       /admin/posts/new(.:format)      admin/posts#new\nedit_admin_post GET       /admin/posts/:id/edit(.:format) admin/posts#edit\n     admin_post GET       /admin/posts/:id(.:format)      admin/posts#show\n     admin_post PATCH/PUT /admin/posts/:id(.:format)      admin/posts#update\n     admin_post DELETE    /admin/posts/:id(.:format)      admin/posts#destroy</pre> <h3 id=\"method-i-namespace-label-Options\">Options</h3> <p>The <code>:path</code>, <code>:as</code>, <code>:module</code>, <code>:shallow_path</code> and <code>:shallow_prefix</code> options all default to the name of the namespace.</p> <p>For options, see <code>Base#match</code>. For <code>:shallow_path</code> option, see <code>Resources#resources</code>.</p> <pre class=\"ruby\"># accessible through /sekret/posts rather than /admin/posts\nnamespace :admin, path: \"sekret\" do\n  resources :posts\nend\n\n# maps to &lt;tt&gt;Sekret::PostsController&lt;/tt&gt; rather than &lt;tt&gt;Admin::PostsController&lt;/tt&gt;\nnamespace :admin, module: \"sekret\" do\n  resources :posts\nend\n\n# generates +sekret_posts_path+ rather than +admin_posts_path+\nnamespace :admin, as: \"sekret\" do\n  resources :posts\nend\n</pre> <div class=\"method-source-code\" id=\"namespace-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 870\ndef namespace(path, options = {})\n  path = path.to_s\n\n  defaults = {\n    module:         path,\n    path:           options.fetch(:path, path),\n    as:             options.fetch(:as, path),\n    shallow_path:   options.fetch(:path, path),\n    shallow_prefix: options.fetch(:as, path)\n  }\n\n  scope(defaults.merge!(options)) { yield }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-scope\"> <span class=\"method-name\">scope</span><span class=\"method-args\">(*args) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Scopes a set of routes to the given default options.</p> <p>Take the following route definition as an example:</p> <pre class=\"ruby\">scope path: \":account_id\", as: \"account\" do\n  resources :projects\nend\n</pre> <p>This generates helpers such as <code>account_projects_path</code>, just like <code>resources</code> does. The difference here being that the routes generated are like /:account_id/projects, rather than /accounts/:account_id/projects.</p> <h3 id=\"method-i-scope-label-Options\">Options</h3> <p>Takes same options as <code>Base#match</code> and <code>Resources#resources</code>.</p> <pre class=\"ruby\"># route /posts (without the prefix /admin) to &lt;tt&gt;Admin::PostsController&lt;/tt&gt;\nscope module: \"admin\" do\n  resources :posts\nend\n\n# prefix the posts resource's requests with '/admin'\nscope path: \"/admin\" do\n  resources :posts\nend\n\n# prefix the routing helper name: +sekret_posts_path+ instead of +posts_path+\nscope as: \"sekret\" do\n  resources :posts\nend\n</pre> <div class=\"method-source-code\" id=\"scope-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/mapper.rb, line 779\ndef scope(*args)\n  options = args.extract_options!.dup\n  scope = {}\n\n  options[:path] = args.flatten.join('/') if args.any?\n  options[:constraints] ||= {}\n\n  unless nested_scope?\n    options[:shallow_path] ||= options[:path] if options.key?(:path)\n    options[:shallow_prefix] ||= options[:as] if options.key?(:as)\n  end\n\n  if options[:constraints].is_a?(Hash)\n    defaults = options[:constraints].select do\n      |k, v| URL_OPTIONS.include?(k) &amp;&amp; (v.is_a?(String) || v.is_a?(Fixnum))\n    end\n\n    (options[:defaults] ||= {}).reverse_merge!(defaults)\n  else\n    block, options[:constraints] = options[:constraints], {}\n  end\n\n  @scope.options.each do |option|\n    if option == :blocks\n      value = block\n    elsif option == :options\n      value = options\n    else\n      value = options.delete(option)\n    end\n\n    if value\n      scope[option] = send(\"merge_#{option}_scope\", @scope[option], value)\n    end\n  end\n\n  @scope = @scope.new scope\n  yield\n  self\nensure\n  @scope = @scope.parent\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/routing/polymorphicroutes":"<h1 id=\"module-ActionDispatch::Routing::PolymorphicRoutes\" class=\"module\"> module ActionDispatch::Routing::PolymorphicRoutes </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../../actioncontroller/modelnaming\">ActionController::ModelNaming</a></dd>\n</dl> <section class=\"description\"> <p>Polymorphic URL helpers are methods for smart resolution to a named route call when given an Active Record model instance. They are to be used in combination with ActionController::Resources.</p> <p>These methods are useful when you want to generate correct URL or path to a RESTful resource without having to know the exact type of the record in question.</p> <p>Nested resources and/or namespaces are also supported, as illustrated in the example:</p> <pre class=\"ruby\">polymorphic_url([:admin, @article, @comment])\n</pre> <p>results in:</p> <pre class=\"ruby\">admin_article_comment_url(@article, @comment)\n</pre> <h2 id=\"module-ActionDispatch::Routing::PolymorphicRoutes-label-Usage+within+the+framework\">Usage within the framework</h2> <p>Polymorphic URL helpers are used in a number of places throughout the Rails framework:</p> <ul>\n<li> <p><code>url_for</code>, so you can use it with a record as the argument, e.g. <code>url_for(@article)</code>;</p> </li>\n<li> <p><a href=\"../../actionview/helpers/formhelper\">ActionView::Helpers::FormHelper</a> uses <code>polymorphic_path</code>, so you can write <code>form_for(@article)</code> without having to specify <code>:url</code> parameter for the form action;</p> </li>\n<li> <p><code>redirect_to</code> (which, in fact, uses <code>url_for</code>) so you can write <code>redirect_to(post)</code> in your controllers;</p> </li>\n<li> <p><a href=\"../../actionview/helpers/atomfeedhelper\">ActionView::Helpers::AtomFeedHelper</a>, so you don't have to explicitly specify URLs for feed entries.</p> </li>\n</ul> <h2 id=\"module-ActionDispatch::Routing::PolymorphicRoutes-label-Prefixed+polymorphic+helpers\">Prefixed polymorphic helpers</h2> <p>In addition to <code>polymorphic_url</code> and <code>polymorphic_path</code> methods, a number of prefixed helpers are available as a shorthand to <code>action: \"...\"</code> in options. Those are:</p> <ul>\n<li> <p><code>edit_polymorphic_url</code>, <code>edit_polymorphic_path</code></p> </li>\n<li> <p><code>new_polymorphic_url</code>, <code>new_polymorphic_path</code></p> </li>\n</ul> <p>Example usage:</p> <pre class=\"ruby\">edit_polymorphic_path(@post)              # =&gt; \"/posts/1/edit\"\npolymorphic_path(@post, format: :pdf)  # =&gt; \"/posts/1.pdf\"\n</pre> <h2 id=\"module-ActionDispatch::Routing::PolymorphicRoutes-label-Usage+with+mounted+engines\">Usage with mounted engines</h2> <p>If you are using a mounted engine and you need to use a <a href=\"polymorphicroutes#method-i-polymorphic_url\">#polymorphic_url</a> pointing at the engine's routes, pass in the engine's route proxy as the first argument to the method. For example:</p> <pre class=\"ruby\">polymorphic_url([blog, @post])  # calls blog.post_path(@post)\nform_for([blog, @post])         # =&gt; \"/blog/posts/1\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-polymorphic_path\"> <span class=\"method-name\">polymorphic_path</span><span class=\"method-args\">(record_or_hash_or_array, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the path component of a URL for the given record. It uses <code>polymorphic_url</code> with <code>routing_type: :path</code>.</p> <div class=\"method-source-code\" id=\"polymorphic_path-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/polymorphic_routes.rb, line 123\ndef polymorphic_path(record_or_hash_or_array, options = {})\n  if Hash === record_or_hash_or_array\n    options = record_or_hash_or_array.merge(options)\n    record  = options.delete :id\n    return polymorphic_path record, options\n  end\n\n  opts   = options.dup\n  action = opts.delete :action\n  type   = :path\n\n  HelperMethodBuilder.polymorphic_method self,\n                                         record_or_hash_or_array,\n                                         action,\n                                         type,\n                                         opts\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-polymorphic_url\"> <span class=\"method-name\">polymorphic_url</span><span class=\"method-args\">(record_or_hash_or_array, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Constructs a call to a named RESTful route for the given record and returns the resulting URL string. For example:</p> <pre class=\"ruby\"># calls post_url(post)\npolymorphic_url(post) # =&gt; \"http://example.com/posts/1\"\npolymorphic_url([blog, post]) # =&gt; \"http://example.com/blogs/1/posts/1\"\npolymorphic_url([:admin, blog, post]) # =&gt; \"http://example.com/admin/blogs/1/posts/1\"\npolymorphic_url([user, :blog, post]) # =&gt; \"http://example.com/users/1/blog/posts/1\"\npolymorphic_url(Comment) # =&gt; \"http://example.com/comments\"\n</pre> <h4 id=\"method-i-polymorphic_url-label-Options\">Options</h4> <ul>\n<li> <p><code>:action</code> - Specifies the action prefix for the named route: <code>:new</code> or <code>:edit</code>. Default is no prefix.</p> </li>\n<li> <p><code>:routing_type</code> - Allowed values are <code>:path</code> or <code>:url</code>. Default is <code>:url</code>.</p> </li>\n</ul> <p>Also includes all the options from <code>url_for</code>. These include such things as <code>:anchor</code> or <code>:trailing_slash</code>. Example usage is given below:</p> <pre class=\"ruby\">polymorphic_url([blog, post], anchor: 'my_anchor')\n  # =&gt; \"http://example.com/blogs/1/posts/1#my_anchor\"\npolymorphic_url([blog, post], anchor: 'my_anchor', script_name: \"/my_app\")\n  # =&gt; \"http://example.com/my_app/blogs/1/posts/1#my_anchor\"\n</pre> <p>For all of these options, see the documentation for <code>url_for</code>.</p> <h4 id=\"method-i-polymorphic_url-label-Functionality\">Functionality</h4> <pre class=\"ruby\"># an Article record\npolymorphic_url(record)  # same as article_url(record)\n\n# a Comment record\npolymorphic_url(record)  # same as comment_url(record)\n\n# it recognizes new records and maps to the collection\nrecord = Comment.new\npolymorphic_url(record)  # same as comments_url()\n\n# the class of a record will also map to the collection\npolymorphic_url(Comment) # same as comments_url()\n</pre> <div class=\"method-source-code\" id=\"polymorphic_url-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/polymorphic_routes.rb, line 103\ndef polymorphic_url(record_or_hash_or_array, options = {})\n  if Hash === record_or_hash_or_array\n    options = record_or_hash_or_array.merge(options)\n    record  = options.delete :id\n    return polymorphic_url record, options\n  end\n\n  opts   = options.dup\n  action = opts.delete :action\n  type   = opts.delete(:routing_type) || :url\n\n  HelperMethodBuilder.polymorphic_method self,\n                                         record_or_hash_or_array,\n                                         action,\n                                         type,\n                                         opts\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/routing/redirection":"<h1 id=\"module-ActionDispatch::Routing::Redirection\" class=\"module\"> module ActionDispatch::Routing::Redirection </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-redirect\"> <span class=\"method-name\">redirect</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Redirect any path to another path:</p> <pre class=\"ruby\">get \"/stories\" =&gt; redirect(\"/posts\")\n</pre> <p>You can also use interpolation in the supplied redirect argument:</p> <pre class=\"ruby\">get 'docs/:article', to: redirect('/wiki/%{article}')\n</pre> <p>Note that if you return a path without a leading slash then the url is prefixed with the current SCRIPT_NAME environment variable. This is typically '/' but may be different in a mounted engine or where the application is deployed to a subdirectory of a website.</p> <p>Alternatively you can use one of the other syntaxes:</p> <p>The block version of redirect allows for the easy encapsulation of any logic associated with the redirect in question. Either the params and request are supplied as arguments, or just params, depending of how many arguments your block accepts. A string is required as a return value.</p> <pre class=\"ruby\">get 'jokes/:number', to: redirect { |params, request|\n  path = (params[:number].to_i.even? ? \"wheres-the-beef\" : \"i-love-lamp\")\n  \"http://#{request.host_with_port}/#{path}\"\n}\n</pre> <p>Note that the +do end+ syntax for the redirect block wouldn't work, as Ruby would pass the block to <code>get</code> instead of <code>redirect</code>. Use <code>{ ... }</code> instead.</p> <p>The options version of redirect allows you to supply only the parts of the url which need to change, it also supports interpolation of the path similar to the first example.</p> <pre class=\"ruby\">get 'stores/:name',       to: redirect(subdomain: 'stores', path: '/%{name}')\nget 'stores/:name(*all)', to: redirect(subdomain: 'stores', path: '/%{name}%{all}')\n</pre> <p>Finally, an object which responds to call can be supplied to redirect, allowing you to reuse common redirect routes. The call method must accept two arguments, params and request, and return a string.</p> <pre class=\"ruby\">get 'accounts/:name' =&gt; redirect(SubdomainRedirector.new('api'))\n</pre> <div class=\"method-source-code\" id=\"redirect-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/redirection.rb, line 177\ndef redirect(*args, &amp;block)\n  options = args.extract_options!\n  status  = options.delete(:status) || 301\n  path    = args.shift\n\n  return OptionRedirect.new(status, options) if options.any?\n  return PathRedirect.new(status, path) if String === path\n\n  block = path if path.respond_to? :call\n  raise ArgumentError, \"redirection argument not supported\" unless block\n  Redirect.new status, block\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/routing/urlfor":"<h1 id=\"module-ActionDispatch::Routing::UrlFor\" class=\"module\"> module ActionDispatch::Routing::UrlFor </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"polymorphicroutes\">ActionDispatch::Routing::PolymorphicRoutes</a></dd>\n</dl> <section class=\"description\"> <p>In <code>config/routes.rb</code> you define URL-to-controller mappings, but the reverse is also possible: an URL can be generated from one of your routing definitions. URL generation functionality is centralized in this module.</p> <p>See <a href=\"../routing\">ActionDispatch::Routing</a> for general information about routing and routes.rb.</p> <p><strong>Tip:</strong> If you need to generate URLs from your models or some other place, then <a href=\"../../actioncontroller/urlfor\">ActionController::UrlFor</a> is what you're looking for. Read on for an introduction. In general, this module should not be included on its own, as it is usually included by url_helpers (as in <a href=\"../../rails#method-c-application\">Rails.application</a>.routes.url_helpers).</p> <h2 id=\"module-ActionDispatch::Routing::UrlFor-label-URL+generation+from+parameters\">URL generation from parameters</h2> <p>As you may know, some functions, such as ActionController::Base#url_for and <a href=\"../../actionview/helpers/urlhelper#method-i-link_to\">ActionView::Helpers::UrlHelper#link_to</a>, can generate URLs given a set of parameters. For example, you've probably had the chance to write code like this in one of your views:</p> <pre>&lt;%= link_to('Click here', controller: 'users',\n        action: 'new', message: 'Welcome!') %&gt;\n# =&gt; &lt;a href=\"/users/new?message=Welcome%21\"&gt;Click here&lt;/a&gt;</pre> <p>link_to, and all other functions that require URL generation functionality, actually use <a href=\"../../actioncontroller/urlfor\">ActionController::UrlFor</a> under the hood. And in particular, they use the ActionController::UrlFor#url_for method. One can generate the same path as the above example by using the following code:</p> <pre class=\"ruby\">include UrlFor\nurl_for(controller: 'users',\n        action: 'new',\n        message: 'Welcome!',\n        only_path: true)\n# =&gt; \"/users/new?message=Welcome%21\"\n</pre> <p>Notice the <code>only_path: true</code> part. This is because <a href=\"urlfor\">UrlFor</a> has no information about the website hostname that your Rails app is serving. So if you want to include the hostname as well, then you must also pass the <code>:host</code> argument:</p> <pre class=\"ruby\">include UrlFor\nurl_for(controller: 'users',\n        action: 'new',\n        message: 'Welcome!',\n        host: 'www.example.com')\n# =&gt; \"http://www.example.com/users/new?message=Welcome%21\"\n</pre> <p>By default, all controllers and views have access to a special version of <a href=\"urlfor#method-i-url_for\">#url_for</a>, that already knows what the current hostname is. So if you use <a href=\"urlfor#method-i-url_for\">#url_for</a> in your controllers or your views, then you don't need to explicitly pass the <code>:host</code> argument.</p> <p>For convenience reasons, mailers provide a shortcut for ActionController::UrlFor#url_for. So within mailers, you only have to type 'url_for' instead of 'ActionController::UrlFor#url_for' in full. However, mailers don't have hostname information, and that's why you'll still have to specify the <code>:host</code> argument when generating URLs in mailers.</p> <h2 id=\"module-ActionDispatch::Routing::UrlFor-label-URL+generation+for+named+routes\">URL generation for named routes</h2> <p><a href=\"urlfor\">UrlFor</a> also allows one to access methods that have been auto-generated from named routes. For example, suppose that you have a 'users' resource in your <code>config/routes.rb</code>:</p> <pre class=\"ruby\">resources :users\n</pre> <p>This generates, among other things, the method <code>users_path</code>. By default, this method is accessible from your controllers, views and mailers. If you need to access this auto-generated method from other places (such as a model), then you can do that by including <a href=\"../../rails#method-c-application\">Rails.application</a>.routes.url_helpers in your class:</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  include Rails.application.routes.url_helpers\n\n  def base_uri\n    user_path(self)\n  end\nend\n\nUser.find(1).base_uri # =&gt; \"/users/1\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(*)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/url_for.rb, line 102\ndef initialize(*)\n  @_routes = nil\n  super\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url_for\"> <span class=\"method-name\">url_for</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Generate a url based on the options provided, default_url_options and the routes defined in routes.rb. The following options are supported:</p> <ul>\n<li> <p><code>:only_path</code> - If true, the relative url is returned. Defaults to <code>false</code>.</p> </li>\n<li> <p><code>:protocol</code> - The protocol to connect to. Defaults to 'http'.</p> </li>\n<li> <p><code>:host</code> - Specifies the host the link should be targeted at. If <code>:only_path</code> is false, this option must be provided either explicitly, or via <code>default_url_options</code>.</p> </li>\n<li> <p><code>:subdomain</code> - Specifies the subdomain of the link, using the <code>tld_length</code> to split the subdomain from the host. If false, removes all subdomains from the host part of the link.</p> </li>\n<li> <p><code>:domain</code> - Specifies the domain of the link, using the <code>tld_length</code> to split the domain from the host.</p> </li>\n<li> <p><code>:tld_length</code> - Number of labels the TLD id composed of, only used if <code>:subdomain</code> or <code>:domain</code> are supplied. Defaults to <code>ActionDispatch::Http::URL.tld_length</code>, which in turn defaults to 1.</p> </li>\n<li> <p><code>:port</code> - Optionally specify the port to connect to.</p> </li>\n<li> <p><code>:anchor</code> - An anchor name to be appended to the path.</p> </li>\n<li> <p><code>:trailing_slash</code> - If true, adds a trailing slash, as in “/archive/2009/”</p> </li>\n<li> <p><code>:script_name</code> - Specifies application path relative to domain root. If provided, prepends application path.</p> </li>\n</ul> <p>Any other key (<code>:controller</code>, <code>:action</code>, etc.) given to <code>url_for</code> is forwarded to the Routes module.</p> <pre class=\"ruby\">url_for controller: 'tasks', action: 'testing', host: 'somehost.org', port: '8080'\n# =&gt; 'http://somehost.org:8080/tasks/testing'\nurl_for controller: 'tasks', action: 'testing', host: 'somehost.org', anchor: 'ok', only_path: true\n# =&gt; '/tasks/testing#ok'\nurl_for controller: 'tasks', action: 'testing', trailing_slash: true\n# =&gt; 'http://somehost.org/tasks/testing/'\nurl_for controller: 'tasks', action: 'testing', host: 'somehost.org', number: '33'\n# =&gt; 'http://somehost.org/tasks/testing?number=33'\nurl_for controller: 'tasks', action: 'testing', host: 'somehost.org', script_name: \"/myapp\"\n# =&gt; 'http://somehost.org/myapp/tasks/testing'\nurl_for controller: 'tasks', action: 'testing', host: 'somehost.org', script_name: \"/myapp\", only_path: true\n# =&gt; '/myapp/tasks/testing'\n</pre> <div class=\"method-source-code\" id=\"url_for-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/url_for.rb, line 150\ndef url_for(options = nil)\n  case options\n  when nil\n    _routes.url_for(url_options.symbolize_keys)\n  when Hash\n    route_name = options.delete :use_route\n    _routes.url_for(options.symbolize_keys.reverse_merge!(url_options),\n                   route_name)\n  when String\n    options\n  when Symbol\n    HelperMethodBuilder.url.handle_string_call self, options\n  when Array\n    polymorphic_url(options, options.extract_options!)\n  when Class\n    HelperMethodBuilder.url.handle_class_call self, options\n  else\n    HelperMethodBuilder.url.handle_model_call self, options\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url_options\"> <span class=\"method-name\">url_options</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Hook overridden in controller to add request information with `default_url_options`. Application logic should not go into url_options.</p> <div class=\"method-source-code\" id=\"url_options-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/url_for.rb, line 110\ndef url_options\n  default_url_options\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_routes_context\"> <span class=\"method-name\">_routes_context</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_routes_context-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/url_for.rb, line 184\ndef _routes_context\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_with_routes\"> <span class=\"method-name\">_with_routes</span><span class=\"method-args\">(routes) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_with_routes-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/url_for.rb, line 177\ndef _with_routes(routes)\n  old_routes, @_routes = @_routes, routes\n  yield\nensure\n  @_routes = old_routes\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-optimize_routes_generation-3F\"> <span class=\"method-name\">optimize_routes_generation?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"optimize_routes_generation-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/routing/url_for.rb, line 173\ndef optimize_routes_generation?\n  _routes.optimize_routes_generation? &amp;&amp; default_url_options.empty?\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/session/cachestore":"<h1 id=\"class-ActionDispatch::Session::CacheStore\" class=\"class\"> class ActionDispatch::Session::CacheStore </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"abstractstore\">ActionDispatch::Session::AbstractStore</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"../session\">Session</a> store that uses an <a href=\"../../activesupport/cache/store\">ActiveSupport::Cache::Store</a> to store the sessions. This store is most useful if you don't store critical data in your sessions and you don't need them to live for extended periods of time.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(app, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new store. The cache to use can be passed in the <code>:cache</code> option. If it is not specified, <code>Rails.cache</code> will be used.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"compatibility#method-c-new\">ActionDispatch::Session::Compatibility.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/session/cache_store.rb, line 11\ndef initialize(app, options = {})\n  @cache = options[:cache] || Rails.cache\n  options[:expire_after] ||= @cache.options[:expires_in]\n  super\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroy_session\"> <span class=\"method-name\">destroy_session</span><span class=\"method-args\">(env, sid, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove a session from the cache.</p> <div class=\"method-source-code\" id=\"destroy_session-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/session/cache_store.rb, line 37\ndef destroy_session(env, sid, options)\n  @cache.delete(cache_key(sid))\n  generate_sid\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-get_session\"> <span class=\"method-name\">get_session</span><span class=\"method-args\">(env, sid)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get a session from the cache.</p> <div class=\"method-source-code\" id=\"get_session-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/session/cache_store.rb, line 18\ndef get_session(env, sid)\n  unless sid and session = @cache.read(cache_key(sid))\n    sid, session = generate_sid, {}\n  end\n  [sid, session]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_session\"> <span class=\"method-name\">set_session</span><span class=\"method-args\">(env, sid, session, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set a session in the cache.</p> <div class=\"method-source-code\" id=\"set_session-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/session/cache_store.rb, line 26\ndef set_session(env, sid, session, options)\n  key = cache_key(sid)\n  if session\n    @cache.write(key, session, :expires_in =&gt; options[:expire_after])\n  else\n    @cache.delete(key)\n  end\n  sid\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/session/cookiestore":"<h1 id=\"class-ActionDispatch::Session::CookieStore\" class=\"class\"> class ActionDispatch::Session::CookieStore </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Rack::Session::Abstract::ID</dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"compatibility\">ActionDispatch::Session::Compatibility</a>, <a class=\"include\" href=\"stalesessioncheck\">ActionDispatch::Session::StaleSessionCheck</a>\n</dd>\n</dl> <section class=\"description\"> <p>This cookie-based session store is the Rails default. It is dramatically faster than the alternatives.</p> <p>Sessions typically contain at most a user_id and flash message; both fit within the 4K cookie size limit. A CookieOverflow exception is raised if you attempt to store more than 4K of data.</p> <p>The cookie jar used for storage is automatically configured to be the best possible option given your application's configuration.</p> <p>If you only have secret_token set, your cookies will be signed, but not encrypted. This means a user cannot alter their <code>user_id</code> without knowing your app's secret key, but can easily read their <code>user_id</code>. This was the default for Rails 3 apps.</p> <p>If you have secret_key_base set, your cookies will be encrypted. This goes a step further than signed cookies in that encrypted cookies cannot be altered or read by users. This is the default starting in Rails 4.</p> <p>If you have both secret_token and secret_key base set, your cookies will be encrypted, and signed cookies generated by Rails 3 will be transparently read and encrypted to provide a smooth upgrade path.</p> <p>Configure your session store in config/initializers/session_store.rb:</p> <pre class=\"ruby\">Rails.application.config.session_store :cookie_store, key: '_your_app_session'\n</pre> <p>Configure your secret key in config/secrets.yml:</p> <pre>development:\n  secret_key_base: 'secret key'</pre> <p>To generate a secret key for an existing application, run `rake secret`.</p> <p>If you are upgrading an existing Rails 3 app, you should leave your existing secret_token in place and simply add the new secret_key_base. Note that you should wait to set secret_key_base until you have 100% of your userbase on Rails 4 and are reasonably sure you will not need to rollback to Rails 3. This is because cookies signed based on the new secret_key_base in Rails 4 are not backwards compatible with Rails 3. You are free to leave your existing secret_token in place, not set the new secret_key_base, and ignore the deprecation warnings until you are reasonably sure that your upgrade is otherwise complete. Additionally, you should take care to make sure you are not relying on the ability to decode signed cookies generated by your app in external applications or JavaScript before upgrading.</p> <p>Note that changing the secret key will invalidate all existing sessions!</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(app, options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"compatibility#method-c-new\">ActionDispatch::Session::Compatibility.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/session/cookie_store.rb, line 60\ndef initialize(app, options={})\n  super(app, options.merge!(:cookie_only =&gt; true))\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroy_session\"> <span class=\"method-name\">destroy_session</span><span class=\"method-args\">(env, session_id, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"destroy_session-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/session/cookie_store.rb, line 64\ndef destroy_session(env, session_id, options)\n  new_sid = generate_sid unless options[:drop]\n  # Reset hash and Assign the new session id\n  env[\"action_dispatch.request.unsigned_session_cookie\"] = new_sid ? { \"session_id\" =&gt; new_sid } : {}\n  new_sid\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load_session\"> <span class=\"method-name\">load_session</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"load_session-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/session/cookie_store.rb, line 71\ndef load_session(env)\n  stale_session_check! do\n    data = unpacked_cookie_data(env)\n    data = persistent_session_id!(data)\n    [data[\"session_id\"], data]\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/static":"<h1 id=\"class-ActionDispatch::Static\" class=\"class\"> class ActionDispatch::Static </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>This middleware will attempt to return the contents of a file's body from disk in the response. If a file is not found on disk, the request will be delegated to the application stack. This middleware is commonly initialized to serve assets from a server's `public/` directory.</p> <p>This middleware verifies the path to ensure that only files living in the root directory can be rendered. A request cannot produce a directory traversal using this middleware. Only 'GET' and 'HEAD' requests will result in a file being returned.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(app, path, cache_control=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/static.rb, line 101\ndef initialize(app, path, cache_control=nil)\n  @app = app\n  @file_handler = FileHandler.new(path, cache_control)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/middleware/static.rb, line 106\ndef call(env)\n  case env['REQUEST_METHOD']\n  when 'GET', 'HEAD'\n    path = env['PATH_INFO'].chomp('/')\n    if match = @file_handler.match?(path)\n      env[\"PATH_INFO\"] = match\n      return @file_handler.call(env)\n    end\n  end\n\n  @app.call(env)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/testprocess":"<h1 id=\"module-ActionDispatch::TestProcess\" class=\"module\"> module ActionDispatch::TestProcess </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assigns\"> <span class=\"method-name\">assigns</span><span class=\"method-args\">(key = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"assigns-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/test_process.rb, line 7\ndef assigns(key = nil)\n  assigns = {}.with_indifferent_access\n  @controller.view_assigns.each { |k, v| assigns.regular_writer(k, v) }\n  key.nil? ? assigns : assigns[key]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cookies\"> <span class=\"method-name\">cookies</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"cookies-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/test_process.rb, line 21\ndef cookies\n  @request.cookie_jar\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fixture_file_upload\"> <span class=\"method-name\">fixture_file_upload</span><span class=\"method-args\">(path, mime_type = nil, binary = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Shortcut for <code>Rack::Test::UploadedFile.new(File.join(ActionController::TestCase.fixture_path,\npath), type)</code>:</p> <pre class=\"ruby\">post :change_avatar, avatar: fixture_file_upload('files/spongebob.png', 'image/png')\n</pre> <p>To upload binary files on Windows, pass <code>:binary</code> as the last parameter. This will not affect other platforms:</p> <pre class=\"ruby\">post :change_avatar, avatar: fixture_file_upload('files/spongebob.png', 'image/png', :binary)\n</pre> <div class=\"method-source-code\" id=\"fixture_file_upload-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/test_process.rb, line 37\ndef fixture_file_upload(path, mime_type = nil, binary = false)\n  if self.class.respond_to?(:fixture_path) &amp;&amp; self.class.fixture_path\n    path = File.join(self.class.fixture_path, path)\n  end\n  Rack::Test::UploadedFile.new(path, mime_type, binary)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-flash\"> <span class=\"method-name\">flash</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"flash-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/test_process.rb, line 17\ndef flash\n  @request.flash\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-redirect_to_url\"> <span class=\"method-name\">redirect_to_url</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"redirect_to_url-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/test_process.rb, line 25\ndef redirect_to_url\n  @response.redirect_url\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-session\"> <span class=\"method-name\">session</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"session-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/test_process.rb, line 13\ndef session\n  @request.session\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actiondispatch/testresponse":"<h1 id=\"class-ActionDispatch::TestResponse\" class=\"class\"> class ActionDispatch::TestResponse </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"response\">ActionDispatch::Response</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"integration\">Integration</a> test methods such as <a href=\"integration/requesthelpers#method-i-get\">ActionDispatch::Integration::RequestHelpers#get</a> and <a href=\"integration/requesthelpers#method-i-post\">ActionDispatch::Integration::RequestHelpers#post</a> return objects of class <a href=\"testresponse\">TestResponse</a>, which represent the HTTP response results of the requested controller actions.</p> <p>See <a href=\"response\">Response</a> for more information on controller response objects.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-from_response\"> <span class=\"method-name\">from_response</span><span class=\"method-args\">(response)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"from_response-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/testing/test_response.rb, line 9\ndef self.from_response(response)\n  new response.status, response.headers, response.body, default_headers: nil\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer":"<h1 id=\"module-ActionMailer\" class=\"module\"> module ActionMailer </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-gem_version\"> <span class=\"method-name\">gem_version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Action Mailer as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"gem_version-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/gem_version.rb, line 3\ndef self.gem_version\n  Gem::Version.new VERSION::STRING\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-version\"> <span class=\"method-name\">version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Action Mailer as a <code>Gem::Version</code>.</p> <div class=\"method-source-code\" id=\"version-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/version.rb, line 6\ndef self.version\n  gem_version\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/base":"<h1 id=\"class-ActionMailer::Base\" class=\"class\"> class ActionMailer::Base </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../abstractcontroller/base\">AbstractController::Base</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"deliverymethods\">ActionMailer::DeliveryMethods</a>, <a class=\"include\" href=\"previews\">ActionMailer::Previews</a>, <a class=\"include\" href=\"../abstractcontroller/rendering\">AbstractController::Rendering</a>, <a class=\"include\" href=\"../abstractcontroller/helpers\">AbstractController::Helpers</a>, <a class=\"include\" href=\"../abstractcontroller/translation\">AbstractController::Translation</a>, <span class=\"include\">AbstractController::Callbacks</span>, <a class=\"include\" href=\"../actionview/layouts\">ActionView::Layouts</a>\n</dd>\n</dl> <section class=\"description\"> <p>Action Mailer allows you to send email from your application using a mailer model and views.</p> <h1 id=\"class-ActionMailer::Base-label-Mailer+Models\">Mailer Models</h1> <p>To use Action Mailer, you need to create a mailer model.</p> <pre>$ rails generate mailer Notifier</pre> <p>The generated model inherits from <code>ApplicationMailer</code> which in turn inherits from <code>ActionMailer::Base</code>. A mailer model defines methods used to generate an email message. In these methods, you can setup variables to be used in the mailer views, options on the mail itself such as the <code>:from</code> address, and attachments.</p> <pre class=\"ruby\">class ApplicationMailer &lt; ActionMailer::Base\n  default from: 'from@exmaple.com'\n  layout 'mailer'\nend\n\nclass Notifier &lt; ApplicationMailer\n  default from: 'no-reply@example.com',\n          return_path: 'system@example.com'\n\n  def welcome(recipient)\n    @account = recipient\n    mail(to: recipient.email_address_with_name,\n         bcc: [\"bcc@example.com\", \"Order Watcher &lt;watcher@example.com&gt;\"])\n  end\nend\n</pre> <p>Within the mailer method, you have access to the following methods:</p> <ul>\n<li> <p><code>attachments[]=</code> - Allows you to add attachments to your email in an intuitive manner; <code>attachments['filename.png'] =\nFile.read('path/to/filename.png')</code></p> </li>\n<li> <p><code>attachments.inline[]=</code> - Allows you to add an inline attachment to your email in the same manner as <code>attachments[]=</code></p> </li>\n<li> <p><code>headers[]=</code> - Allows you to specify any header field in your email such as <code>headers['X-No-Spam'] = 'True'</code>. Note that declaring a header multiple times will add many fields of the same name. Read <a href=\"base#method-i-headers\">headers</a> doc for more information.</p> </li>\n<li> <p><code>headers(hash)</code> - Allows you to specify multiple headers in your email such as <code>headers({'X-No-Spam' =&gt; 'True',\n'In-Reply-To' =&gt; '1234@message.id'})</code></p> </li>\n<li> <p><code>mail</code> - Allows you to specify email to be sent.</p> </li>\n</ul> <p>The hash passed to the mail method allows you to specify any header that a <code>Mail::Message</code> will accept (any valid email header including optional fields).</p> <p>The mail method, if not passed a block, will inspect your views and send all the views with the same name as the method, so the above action would send the <code>welcome.text.erb</code> view file as well as the <code>welcome.html.erb</code> view file in a <code>multipart/alternative</code> email.</p> <p>If you want to explicitly render only certain templates, pass a block:</p> <pre class=\"ruby\">mail(to: user.email) do |format|\n  format.text\n  format.html\nend\n</pre> <p>The block syntax is also useful in providing information specific to a part:</p> <pre class=\"ruby\">mail(to: user.email) do |format|\n  format.text(content_transfer_encoding: \"base64\")\n  format.html\nend\n</pre> <p>Or even to render a special view:</p> <pre class=\"ruby\">mail(to: user.email) do |format|\n  format.text\n  format.html { render \"some_other_template\" }\nend\n</pre> <h1 id=\"class-ActionMailer::Base-label-Mailer+views\">Mailer views</h1> <p>Like Action Controller, each mailer class has a corresponding view directory in which each method of the class looks for a template with its name.</p> <p>To define a template to be used with a mailing, create an <code>.erb</code> file with the same name as the method in your mailer model. For example, in the mailer defined above, the template at <code>app/views/notifier/welcome.text.erb</code> would be used to generate the email.</p> <p>Variables defined in the methods of your mailer model are accessible as instance variables in their corresponding view.</p> <p>Emails by default are sent in plain text, so a sample view for our model example might look like this:</p> <pre>Hi &lt;%= @account.name %&gt;,\nThanks for joining our service! Please check back often.</pre> <p>You can even use Action View helpers in these views. For example:</p> <pre>You got a new note!\n&lt;%= truncate(@note.body, length: 25) %&gt;</pre> <p>If you need to access the subject, from or the recipients in the view, you can do that through message object:</p> <pre>You got a new note from &lt;%= message.from %&gt;!\n&lt;%= truncate(@note.body, length: 25) %&gt;</pre> <h1 id=\"class-ActionMailer::Base-label-Generating+URLs\">Generating URLs</h1> <p>URLs can be generated in mailer views using <code>url_for</code> or named routes. Unlike controllers from Action Pack, the mailer instance doesn't have any context about the incoming request, so you'll need to provide all of the details needed to generate a URL.</p> <p>When using <code>url_for</code> you'll need to provide the <code>:host</code>, <code>:controller</code>, and <code>:action</code>:</p> <pre>&lt;%= url_for(host: \"example.com\", controller: \"welcome\", action: \"greeting\") %&gt;</pre> <p>When using named routes you only need to supply the <code>:host</code>:</p> <pre>&lt;%= users_url(host: \"example.com\") %&gt;</pre> <p>You should use the <code>named_route_url</code> style (which generates absolute URLs) and avoid using the <code>named_route_path</code> style (which generates relative URLs), since clients reading the mail will have no concept of a current URL from which to determine a relative path.</p> <p>It is also possible to set a default host that will be used in all mailers by setting the <code>:host</code> option as a configuration option in <code>config/application.rb</code>:</p> <pre class=\"ruby\">config.action_mailer.default_url_options = { host: \"example.com\" }\n</pre> <p>When you decide to set a default <code>:host</code> for your mailers, then you need to make sure to use the <code>only_path: false</code> option when using <code>url_for</code>. Since the <code>url_for</code> view helper will generate relative URLs by default when a <code>:host</code> option isn't explicitly provided, passing <code>only_path: false</code> will ensure that absolute URLs are generated.</p> <h1 id=\"class-ActionMailer::Base-label-Sending+mail\">Sending mail</h1> <p>Once a mailer action and template are defined, you can deliver your message or create it and save it for delivery later:</p> <pre class=\"ruby\">Notifier.welcome(User.first).deliver_now # sends the email\nmail = Notifier.welcome(User.first)      # =&gt; an ActionMailer::MessageDelivery object\nmail.deliver_now                    # sends the email\n</pre> <p>The <code>ActionMailer::MessageDelivery</code> class is a wrapper around a <code>Mail::Message</code> object. If you want direct access to the <code>Mail::Message</code> object you can call the <code>message</code> method on the <code>ActionMailer::MessageDelivery</code> object.</p> <pre class=\"ruby\">Notifier.welcome(User.first).message     # =&gt; a Mail::Message object\n</pre> <p>Action Mailer is nicely integrated with Active Job so you can send emails in the background (example: outside of the request-response cycle, so the user doesn't have to wait on it):</p> <pre class=\"ruby\">Notifier.welcome(User.first).deliver_later # enqueue the email sending to Active Job\n</pre> <p>You never instantiate your mailer class. Rather, you just call the method you defined on the class itself.</p> <h1 id=\"class-ActionMailer::Base-label-Multipart+Emails\">Multipart Emails</h1> <p>Multipart messages can also be used implicitly because Action Mailer will automatically detect and use multipart templates, where each template is named after the name of the action, followed by the content type. Each such detected template will be added as a separate part to the message.</p> <p>For example, if the following templates exist:</p> <ul>\n<li> <p>signup_notification.text.erb</p> </li>\n<li> <p>signup_notification.html.erb</p> </li>\n<li> <p>signup_notification.xml.builder</p> </li>\n<li> <p>signup_notification.yml.erb</p> </li>\n</ul> <p>Each would be rendered and added as a separate part to the message, with the corresponding content type. The content type for the entire message is automatically set to <code>multipart/alternative</code>, which indicates that the email contains multiple different representations of the same email body. The same instance variables defined in the action are passed to all email templates.</p> <p>Implicit template rendering is not performed if any attachments or parts have been added to the email. This means that you'll have to manually add each part to the email and set the content type of the email to <code>multipart/alternative</code>.</p> <h1 id=\"class-ActionMailer::Base-label-Attachments\">Attachments</h1> <p>Sending attachment in emails is easy:</p> <pre class=\"ruby\">class Notifier &lt; ApplicationMailer\n  def welcome(recipient)\n    attachments['free_book.pdf'] = File.read('path/to/file.pdf')\n    mail(to: recipient, subject: \"New account information\")\n  end\nend\n</pre> <p>Which will (if it had both a <code>welcome.text.erb</code> and <code>welcome.html.erb</code> template in the view directory), send a complete <code>multipart/mixed</code> email with two parts, the first part being a <code>multipart/alternative</code> with the text and HTML email parts inside, and the second being a <code>application/pdf</code> with a Base64 encoded copy of the file.pdf book with the filename <code>free_book.pdf</code>.</p> <p>If you need to send attachments with no content, you need to create an empty view for it, or add an empty body parameter like this:</p> <pre class=\"ruby\">class Notifier &lt; ApplicationMailer\n  def welcome(recipient)\n    attachments['free_book.pdf'] = File.read('path/to/file.pdf')\n    mail(to: recipient, subject: \"New account information\", body: \"\")\n  end\nend\n</pre> <h1 id=\"class-ActionMailer::Base-label-Inline+Attachments\">Inline Attachments</h1> <p>You can also specify that a file should be displayed inline with other HTML. This is useful if you want to display a corporate logo or a photo.</p> <pre class=\"ruby\">class Notifier &lt; ApplicationMailer\n  def welcome(recipient)\n    attachments.inline['photo.png'] = File.read('path/to/photo.png')\n    mail(to: recipient, subject: \"Here is what we look like\")\n  end\nend\n</pre> <p>And then to reference the image in the view, you create a <code>welcome.html.erb</code> file and make a call to <code>image_tag</code> passing in the attachment you want to display and then call <code>url</code> on the attachment to get the relative content id path for the image source:</p> <pre>&lt;h1&gt;Please Don't Cringe&lt;/h1&gt;\n\n&lt;%= image_tag attachments['photo.png'].url -%&gt;</pre> <p>As we are using Action View's <code>image_tag</code> method, you can pass in any other options you want:</p> <pre>&lt;h1&gt;Please Don't Cringe&lt;/h1&gt;\n\n&lt;%= image_tag attachments['photo.png'].url, alt: 'Our Photo', class: 'photo' -%&gt;</pre> <h1 id=\"class-ActionMailer::Base-label-Observing+and+Intercepting+Mails\">Observing and Intercepting Mails</h1> <p>Action Mailer provides hooks into the Mail observer and interceptor methods. These allow you to register classes that are called during the mail delivery life cycle.</p> <p>An observer class must implement the <code>:delivered_email(message)</code> method which will be called once for every email sent after the email has been sent.</p> <p>An interceptor class must implement the <code>:delivering_email(message)</code> method which will be called before the email is sent, allowing you to make modifications to the email before it hits the delivery agents. Your class should make any needed modifications directly to the passed in <code>Mail::Message</code> instance.</p> <h1 id=\"class-ActionMailer::Base-label-Default+Hash\">Default <a href=\"../hash\">Hash</a>\n</h1> <p>Action Mailer provides some intelligent defaults for your emails, these are usually specified in a default method inside the class definition:</p> <pre class=\"ruby\">class Notifier &lt; ApplicationMailer\n  default sender: 'system@example.com'\nend\n</pre> <p>You can pass in any header value that a <code>Mail::Message</code> accepts. Out of the box, <code>ActionMailer::Base</code> sets the following:</p> <ul>\n<li> <p><code>mime_version: \"1.0\"</code></p> </li>\n<li> <p><code>charset:      \"UTF-8\",</code></p> </li>\n<li> <p><code>content_type: \"text/plain\",</code></p> </li>\n<li> <p><code>parts_order:  [ \"text/plain\", \"text/enriched\",\n\"text/html\" ]</code></p> </li>\n</ul> <p><code>parts_order</code> and <code>charset</code> are not actually valid <code>Mail::Message</code> header fields, but Action Mailer translates them appropriately and sets the correct values.</p> <p>As you can pass in any header, you need to either quote the header as a string, or pass it in as an underscored symbol, so the following will work:</p> <pre class=\"ruby\">class Notifier &lt; ApplicationMailer\n  default 'Content-Transfer-Encoding' =&gt; '7bit',\n          content_description: 'This is a description'\nend\n</pre> <p>Finally, Action Mailer also supports passing <code>Proc</code> objects into the default hash, so you can define methods that evaluate as the message is being generated:</p> <pre class=\"ruby\">class Notifier &lt; ApplicationMailer\n  default 'X-Special-Header' =&gt; Proc.new { my_method }\n\n  private\n\n    def my_method\n      'some complex call'\n    end\nend\n</pre> <p>Note that the proc is evaluated right at the start of the mail message generation, so if you set something in the defaults using a proc, and then set the same thing inside of your mailer method, it will get over written by the mailer method.</p> <p>It is also possible to set these default options that will be used in all mailers through the <code>default_options=</code> configuration in <code>config/application.rb</code>:</p> <pre class=\"ruby\">config.action_mailer.default_options = { from: \"no-reply@example.org\" }\n</pre> <h1 id=\"class-ActionMailer::Base-label-Callbacks\">Callbacks</h1> <p>You can specify callbacks using before_action and after_action for configuring your messages. This may be useful, for example, when you want to add default inline attachments for all messages sent out by a certain mailer class:</p> <pre class=\"ruby\">class Notifier &lt; ApplicationMailer\n  before_action :add_inline_attachment!\n\n  def welcome\n    mail\n  end\n\n  private\n\n    def add_inline_attachment!\n      attachments.inline[\"footer.jpg\"] = File.read('/path/to/filename.jpg')\n    end\nend\n</pre> <p>Callbacks in Action Mailer are implemented using <code>AbstractController::Callbacks</code>, so you can define and configure callbacks in the same manner that you would use callbacks in classes that inherit from <code>ActionController::Base</code>.</p> <p>Note that unless you have a specific reason to do so, you should prefer using before_action rather than after_action in your Action Mailer classes so that headers are parsed properly.</p> <h1 id=\"class-ActionMailer::Base-label-Previewing+emails\">Previewing emails</h1> <p>You can preview your email templates visually by adding a mailer preview file to the <code>ActionMailer::Base.preview_path</code>. Since most emails do something interesting with database data, you'll need to write some scenarios to load messages with fake data:</p> <pre class=\"ruby\">class NotifierPreview &lt; ActionMailer::Preview\n  def welcome\n    Notifier.welcome(User.first)\n  end\nend\n</pre> <p>Methods must return a <code>Mail::Message</code> object which can be generated by calling the mailer method without the additional <code>deliver_now</code> / <code>deliver_later</code>. The location of the mailer previews directory can be configured using the <code>preview_path</code> option which has a default of <code>test/mailers/previews</code>:</p> <pre class=\"ruby\">config.action_mailer.preview_path = \"#{Rails.root}/lib/mailer_previews\"\n</pre> <p>An overview of all previews is accessible at <code>http://localhost:3000/rails/mailers</code> on a running development server instance.</p> <p><a href=\"previews\">Previews</a> can also be intercepted in a similar manner as deliveries can be by registering a preview interceptor that has a <code>previewing_email</code> method:</p> <pre class=\"ruby\">class CssInlineStyler\n  def self.previewing_email(message)\n    # inline CSS styles\n  end\nend\n\nconfig.action_mailer.preview_interceptors :css_inline_styler\n</pre> <p>Note that interceptors need to be registered both with <code>register_interceptor</code> and <code>register_preview_interceptor</code> if they should operate on both sending and previewing emails.</p> <h1 id=\"class-ActionMailer::Base-label-Configuration+options\">Configuration options</h1> <p>These options are specified on the class level, like <code>ActionMailer::Base.raise_delivery_errors = true</code></p> <ul>\n<li> <p><code>default_options</code> - You can pass this in at a class level as well as within the class itself as per the above section.</p> </li>\n<li> <p><code>logger</code> - the logger is used for generating information on the mailing run if available. Can be set to <code>nil</code> for no logging. Compatible with both Ruby's own <code>Logger</code> and Log4r loggers.</p> </li>\n<li> <p><code>smtp_settings</code> - Allows detailed configuration for <code>:smtp</code> delivery method:</p> <ul>\n<li> <p><code>:address</code> - Allows you to use a remote mail server. Just change it from its default “localhost” setting.</p> </li>\n<li> <p><code>:port</code> - On the off chance that your mail server doesn't run on port 25, you can change it.</p> </li>\n<li> <p><code>:domain</code> - If you need to specify a HELO domain, you can do it here.</p> </li>\n<li> <p><code>:user_name</code> - If your mail server requires authentication, set the username in this setting.</p> </li>\n<li> <p><code>:password</code> - If your mail server requires authentication, set the password in this setting.</p> </li>\n<li> <p><code>:authentication</code> - If your mail server requires authentication, you need to specify the authentication type here. This is a symbol and one of <code>:plain</code> (will send the password Base64 encoded), <code>:login</code> (will send the password Base64 encoded) or <code>:cram_md5</code> (combines a Challenge/Response mechanism to exchange information and a cryptographic Message <a href=\"../digest\">Digest</a> 5 algorithm to hash important information)</p> </li>\n<li> <p><code>:enable_starttls_auto</code> - Detects if STARTTLS is enabled in your SMTP server and starts to use it. Defaults to <code>true</code>.</p> </li>\n<li> <p><code>:openssl_verify_mode</code> - When using TLS, you can set how OpenSSL checks the certificate. This is really useful if you need to validate a self-signed and/or a wildcard certificate. You can use the name of an OpenSSL verify constant (<code>'none'</code>, <code>'peer'</code>, <code>'client_once'</code>, <code>'fail_if_no_peer_cert'</code>) or directly the constant (<code>OpenSSL::SSL::VERIFY_NONE</code>, <code>OpenSSL::SSL::VERIFY_PEER</code>, …).</p> </li>\n</ul> </li>\n<li> <p><code>sendmail_settings</code> - Allows you to override options for the <code>:sendmail</code> delivery method.</p> <ul>\n<li> <p><code>:location</code> - The location of the sendmail executable. Defaults to <code>/usr/sbin/sendmail</code>.</p> </li>\n<li> <p><code>:arguments</code> - The command line arguments. Defaults to <code>-i\n-t</code> with <code>-f sender@address</code> added automatically before the message is sent.</p> </li>\n</ul> </li>\n<li> <p><code>file_settings</code> - Allows you to override options for the <code>:file</code> delivery method.</p> <ul><li> <p><code>:location</code> - The directory into which emails will be written. Defaults to the application <code>tmp/mails</code>.</p> </li></ul> </li>\n<li> <p><code>raise_delivery_errors</code> - Whether or not errors should be raised if the email fails to be delivered.</p> </li>\n<li> <p><code>delivery_method</code> - Defines a delivery method. Possible values are <code>:smtp</code> (default), <code>:sendmail</code>, <code>:test</code>, and <code>:file</code>. Or you may provide a custom delivery method object e.g. <code>MyOwnDeliveryMethodClass</code>. See the Mail gem documentation on the interface you need to implement for a custom delivery agent.</p> </li>\n<li> <p><code>perform_deliveries</code> - Determines whether emails are actually sent from Action Mailer when you call <code>.deliver</code> on an email message or on an Action Mailer method. This is on by default but can be turned off to aid in functional testing.</p> </li>\n<li> <p><code>deliveries</code> - Keeps an array of all the emails sent out through the Action Mailer with <code>delivery_method :test</code>. Most useful for unit and functional testing.</p> </li>\n</ul> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"PROTECTED_IVARS\">PROTECTED_IVARS </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-mailer_name\"> <span class=\"method-name\">mailer_name</span><span class=\"attribute-access-type\">[W]</span> </div> <div class=\"method-description\"> <p>Allows to set the name of current mailer.</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-c-controller_path\"> <span class=\"method-name\">controller_path</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"base#method-c-mailer_name\">mailer_name</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-default\"> <span class=\"method-name\">default</span><span class=\"method-args\">(value = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the defaults through app configuration:</p> <pre class=\"ruby\">config.action_mailer.default(from: \"no-reply@example.org\")\n</pre> <p>Aliased by <a href=\"base#method-c-default_options-3D\">::default_options=</a></p> <div class=\"method-source-code\" id=\"default-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 504\ndef default(value = nil)\n  self.default_params = default_params.merge(value).freeze if value\n  default_params\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"base#method-c-default_options-3D\">default_options=</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-c-default_options-3D\"> <span class=\"method-name\">default_options=</span><span class=\"method-args\">(value = nil)</span> </div> <div class=\"method-description\"> <p>Allows to set defaults through app configuration:</p> <pre class=\"ruby\">config.action_mailer.default_options = { from: \"no-reply@example.org\" }\n</pre> </div> <div class=\"aliases\"> Alias for: <a href=\"base#method-c-default\">default</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-mailer_name\"> <span class=\"method-name\">mailer_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the name of current mailer. This method is also being used as a path for a view lookup. If this is an anonymous mailer, this method will return <code>anonymous</code> instead.</p> <div class=\"method-source-code\" id=\"mailer_name-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 492\ndef mailer_name\n  @mailer_name ||= anonymous? ? \"anonymous\" : name.underscore\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"base#method-c-controller_path\">controller_path</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(method_name=nil, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Instantiate a new mailer object. If <code>method_name</code> is not <code>nil</code>, the mailer will be initialized according to the named method. If not, the mailer will remain uninitialized (useful when you only need to invoke the “receive” method, for instance).</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 580\ndef initialize(method_name=nil, *args)\n  super()\n  @_mail_was_called = false\n  @_message = Mail.new\n  process(method_name, *args) if method_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-receive\"> <span class=\"method-name\">receive</span><span class=\"method-args\">(raw_mail)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Receives a raw email, parses it into an email object, decodes it, instantiates a new mailer, and passes the email object to the mailer object's <code>receive</code> method.</p> <p>If you want your mailer to be able to process incoming messages, you'll need to implement a <code>receive</code> method that accepts the raw email string as a parameter:</p> <pre class=\"ruby\">class MyMailer &lt; ActionMailer::Base\n  def receive(mail)\n    # ...\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"receive-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 526\ndef receive(raw_mail)\n  ActiveSupport::Notifications.instrument(\"receive.action_mailer\") do |payload|\n    mail = Mail.new(raw_mail)\n    set_payload_for_mail(payload, mail)\n    new.receive(mail)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-register_interceptor\"> <span class=\"method-name\">register_interceptor</span><span class=\"method-args\">(interceptor)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register an Interceptor which will be called before mail is sent. Either a class, string or symbol can be passed in as the Interceptor. If a string or symbol is passed in it will be camelized and constantized.</p> <div class=\"method-source-code\" id=\"register_interceptor-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 479\ndef register_interceptor(interceptor)\n  delivery_interceptor = case interceptor\n    when String, Symbol\n      interceptor.to_s.camelize.constantize\n    else\n      interceptor\n    end\n\n  Mail.register_interceptor(delivery_interceptor)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-register_interceptors\"> <span class=\"method-name\">register_interceptors</span><span class=\"method-args\">(*interceptors)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register one or more Interceptors which will be called before mail is sent.</p> <div class=\"method-source-code\" id=\"register_interceptors-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 458\ndef register_interceptors(*interceptors)\n  interceptors.flatten.compact.each { |interceptor| register_interceptor(interceptor) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-register_observer\"> <span class=\"method-name\">register_observer</span><span class=\"method-args\">(observer)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register an Observer which will be notified when mail is delivered. Either a class, string or symbol can be passed in as the Observer. If a string or symbol is passed in it will be camelized and constantized.</p> <div class=\"method-source-code\" id=\"register_observer-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 465\ndef register_observer(observer)\n  delivery_observer = case observer\n    when String, Symbol\n      observer.to_s.camelize.constantize\n    else\n      observer\n    end\n\n  Mail.register_observer(delivery_observer)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-register_observers\"> <span class=\"method-name\">register_observers</span><span class=\"method-args\">(*observers)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register one or more Observers which will be notified when mail is delivered.</p> <div class=\"method-source-code\" id=\"register_observers-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 453\ndef register_observers(*observers)\n  observers.flatten.compact.each { |observer| register_observer(observer) }\nend</pre> </div> </div> </div> </section> <section id=\"protected-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-supports_path-3F\"> <span class=\"method-name\">supports_path?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Emails do not support relative path links.</p> <div class=\"method-source-code\" id=\"supports_path-3F-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 942\ndef self.supports_path?\n  false\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attachments\"> <span class=\"method-name\">attachments</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to add attachments to an email, like so:</p> <pre class=\"ruby\">mail.attachments['filename.jpg'] = File.read('/path/to/filename.jpg')\n</pre> <p>If you do this, then Mail will take the file name and work out the mime type set the Content-Type, Content-Disposition, Content-Transfer-Encoding and base64 encode the contents of the attachment all for you.</p> <p>You can also specify overrides if you want by passing a hash instead of a string:</p> <pre class=\"ruby\">mail.attachments['filename.jpg'] = {mime_type: 'application/x-gzip',\n                                    content: File.read('/path/to/filename.jpg')}\n</pre> <p>If you want to use a different encoding than Base64, you can pass an encoding in, but then it is up to you to pass in the content pre-encoded, and don't expect Mail to know how to decode this data:</p> <pre class=\"ruby\">file_content = SpecialEncode(File.read('/path/to/filename.jpg'))\nmail.attachments['filename.jpg'] = {mime_type: 'application/x-gzip',\n                                    encoding: 'SpecialEncoding',\n                                    content: file_content }\n</pre> <p>You can also search for specific attachments:</p> <pre class=\"ruby\"># By Filename\nmail.attachments['filename.jpg']   # =&gt; Mail::Part object or nil\n\n# or by index\nmail.attachments[0]                # =&gt; Mail::Part (first attachment)\n</pre> <div class=\"method-source-code\" id=\"attachments-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 691\ndef attachments\n  if @_mail_was_called\n    LateAttachmentsProxy.new(@_message.attachments)\n  else\n    @_message.attachments\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-headers\"> <span class=\"method-name\">headers</span><span class=\"method-args\">(args = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to pass random and unusual headers to the new <code>Mail::Message</code> object which will add them to itself.</p> <pre class=\"ruby\">headers['X-Special-Domain-Specific-Header'] = \"SecretValue\"\n</pre> <p>You can also pass a hash into headers of header field names and values, which will then be set on the <code>Mail::Message</code> object:</p> <pre class=\"ruby\">headers 'X-Special-Domain-Specific-Header' =&gt; \"SecretValue\",\n        'In-Reply-To' =&gt; incoming.message_id\n</pre> <p>The resulting <code>Mail::Message</code> will have the following in its header:</p> <pre>X-Special-Domain-Specific-Header: SecretValue</pre> <p>Note about replacing already defined headers:</p> <ul>\n<li> <p><code>subject</code></p> </li>\n<li> <p><code>sender</code></p> </li>\n<li> <p><code>from</code></p> </li>\n<li> <p><code>to</code></p> </li>\n<li> <p><code>cc</code></p> </li>\n<li> <p><code>bcc</code></p> </li>\n<li> <p><code>reply-to</code></p> </li>\n<li> <p><code>orig-date</code></p> </li>\n<li> <p><code>message-id</code></p> </li>\n<li> <p><code>references</code></p> </li>\n</ul> <p>Fields can only appear once in email headers while other fields such as <code>X-Anything</code> can appear multiple times.</p> <p>If you want to replace any header which already exists, first set it to <code>nil</code> in order to reset the value otherwise another field will be added for the same header.</p> <div class=\"method-source-code\" id=\"headers-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 653\ndef headers(args = nil)\n  if args\n    @_message.headers(args)\n  else\n    @_message\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mail\"> <span class=\"method-name\">mail</span><span class=\"method-args\">(headers = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The main method that creates the message and renders the email templates. There are two ways to call this method, with a block, or without a block.</p> <p>It accepts a headers hash. This hash allows you to specify the most used headers in an email message, these are:</p> <ul>\n<li> <p><code>:subject</code> - The subject of the message, if this is omitted, Action Mailer will ask the Rails <a href=\"../i18n\">I18n</a> class for a translated <code>:subject</code> in the scope of <code>[mailer_scope,\naction_name]</code> or if this is missing, will translate the humanized version of the <code>action_name</code></p> </li>\n<li> <p><code>:to</code> - Who the message is destined for, can be a string of addresses, or an array of addresses.</p> </li>\n<li> <p><code>:from</code> - Who the message is from</p> </li>\n<li> <p><code>:cc</code> - Who you would like to Carbon-Copy on this email, can be a string of addresses, or an array of addresses.</p> </li>\n<li> <p><code>:bcc</code> - Who you would like to Blind-Carbon-Copy on this email, can be a string of addresses, or an array of addresses.</p> </li>\n<li> <p><code>:reply_to</code> - Who to set the Reply-To header of the email to.</p> </li>\n<li> <p><code>:date</code> - The date to say the email was sent on.</p> </li>\n</ul> <p>You can set default values for any of the above headers (except <code>:date</code>) by using the <a href=\"base#method-c-default\">::default</a> class method:</p> <pre class=\"ruby\">class Notifier &lt; ActionMailer::Base\n  default from: 'no-reply@test.lindsaar.net',\n          bcc: 'email_logger@test.lindsaar.net',\n          reply_to: 'bounces@test.lindsaar.net'\nend\n</pre> <p>If you need other headers not listed above, you can either pass them in as part of the headers hash or use the <code>headers['name'] = value</code> method.</p> <p>When a <code>:return_path</code> is specified as header, that value will be used as the 'envelope from' address for the Mail message. Setting this is useful when you want delivery notifications sent to a different address than the one in <code>:from</code>. Mail will actually use the <code>:return_path</code> in preference to the <code>:sender</code> in preference to the <code>:from</code> field for the 'envelope from' value.</p> <p>If you do not pass a block to the <code>mail</code> method, it will find all templates in the view paths using by default the mailer name and the method name that it is being called from, it will then create parts for each of these templates intelligently, making educated guesses on correct content type and sequence, and return a fully prepared <code>Mail::Message</code> ready to call <code>:deliver</code> on to send.</p> <p>For example:</p> <pre class=\"ruby\">class Notifier &lt; ActionMailer::Base\n  default from: 'no-reply@test.lindsaar.net'\n\n  def welcome\n    mail(to: 'mikel@test.lindsaar.net')\n  end\nend\n</pre> <p>Will look for all templates at “app/views/notifier” with name “welcome”. If no welcome template exists, it will raise an ActionView::MissingTemplate error.</p> <p>However, those can be customized:</p> <pre class=\"ruby\">mail(template_path: 'notifications', template_name: 'another')\n</pre> <p>And now it will look for all templates at “app/views/notifications” with name “another”.</p> <p>If you do pass a block, you can render specific templates of your choice:</p> <pre class=\"ruby\">mail(to: 'mikel@test.lindsaar.net') do |format|\n  format.text\n  format.html\nend\n</pre> <p>You can even render plain text directly without using a template:</p> <pre class=\"ruby\">mail(to: 'mikel@test.lindsaar.net') do |format|\n  format.text { render plain: \"Hello Mikel!\" }\n  format.html { render html: \"&lt;h1&gt;Hello Mikel!&lt;/h1&gt;\".html_safe }\nend\n</pre> <p>Which will render a <code>multipart/alternative</code> email with <code>text/plain</code> and <code>text/html</code> parts.</p> <p>The block syntax also allows you to customize the part headers if desired:</p> <pre class=\"ruby\">mail(to: 'mikel@test.lindsaar.net') do |format|\n  format.text(content_transfer_encoding: \"base64\")\n  format.html\nend\n</pre> <div class=\"method-source-code\" id=\"mail-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 800\ndef mail(headers = {}, &amp;block)\n  return @_message if @_mail_was_called &amp;&amp; headers.blank? &amp;&amp; !block\n\n  m = @_message\n\n  # At the beginning, do not consider class default for content_type\n  content_type = headers[:content_type]\n\n  # Call all the procs (if any)\n  default_values = {}\n  self.class.default.each do |k,v|\n    default_values[k] = v.is_a?(Proc) ? instance_eval(&amp;v) : v\n  end\n\n  # Handle defaults\n  headers = headers.reverse_merge(default_values)\n  headers[:subject] ||= default_i18n_subject\n\n  # Apply charset at the beginning so all fields are properly quoted\n  m.charset = charset = headers[:charset]\n\n  # Set configure delivery behavior\n  wrap_delivery_behavior!(headers.delete(:delivery_method), headers.delete(:delivery_method_options))\n\n  # Assign all headers except parts_order, content_type and body\n  assignable = headers.except(:parts_order, :content_type, :body, :template_name, :template_path)\n  assignable.each { |k, v| m[k] = v }\n\n  # Render the templates and blocks\n  responses = collect_responses(headers, &amp;block)\n  @_mail_was_called = true\n\n  create_parts_from_responses(m, responses)\n\n  # Setup content type, reapply charset and handle parts order\n  m.content_type = set_content_type(m, content_type, headers[:content_type])\n  m.charset      = charset\n\n  if m.multipart?\n    m.body.set_sort_order(headers[:parts_order])\n    m.body.sort_parts!\n  end\n\n  m\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mailer_name\"> <span class=\"method-name\">mailer_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the name of the mailer object.</p> <div class=\"method-source-code\" id=\"mailer_name-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 615\ndef mailer_name\n  self.class.mailer_name\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default_i18n_subject\"> <span class=\"method-name\">default_i18n_subject</span><span class=\"method-args\">(interpolations = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Translates the <code>subject</code> using Rails <a href=\"../i18n\">I18n</a> class under <code>[mailer_scope,\naction_name]</code> scope. If it does not find a translation for the <code>subject</code> under the specified scope it will default to a humanized version of the <code>action_name</code>. If the subject has interpolations, you can pass them through the <code>interpolations</code> parameter.</p> <div class=\"method-source-code\" id=\"default_i18n_subject-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 879\ndef default_i18n_subject(interpolations = {})\n  mailer_scope = self.class.mailer_name.tr('/', '.')\n  I18n.t(:subject, interpolations.merge(scope: [mailer_scope, action_name], default: action_name.humanize))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_content_type\"> <span class=\"method-name\">set_content_type</span><span class=\"method-args\">(m, user_content_type, class_default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Used by <a href=\"base#method-i-mail\">mail</a> to set the content type of the message.</p> <p>It will use the given <code>user_content_type</code>, or multipart if the mail message has any attachments. If the attachments are inline, the content type will be “multipart/related”, otherwise “multipart/mixed”.</p> <p>If there is no content type passed in via headers, and there are no attachments, or the message is multipart, then the default content type is used.</p> <div class=\"method-source-code\" id=\"set_content_type-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/base.rb, line 857\ndef set_content_type(m, user_content_type, class_default)\n  params = m.content_type_parameters || {}\n  case\n  when user_content_type.present?\n    user_content_type\n  when m.has_attachments?\n    if m.attachments.detect { |a| a.inline? }\n      [\"multipart\", \"related\", params]\n    else\n      [\"multipart\", \"mixed\", params]\n    end\n  when m.multipart?\n    [\"multipart\", \"alternative\", params]\n  else\n    m.content_type || class_default\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/deliverymethods":"<h1 id=\"module-ActionMailer::DeliveryMethods\" class=\"module\"> module ActionMailer::DeliveryMethods </h1> <section class=\"description\"> <p>This module handles everything related to mail delivery, from registering new delivery methods to configuring the mail object to be sent.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/deliverymethods/classmethods":"<h1 id=\"module-ActionMailer::DeliveryMethods::ClassMethods\" class=\"module\"> module ActionMailer::DeliveryMethods::ClassMethods </h1> <section class=\"description\"> <p>Helpers for creating and wrapping delivery behavior, used by <a href=\"../deliverymethods\">DeliveryMethods</a>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_delivery_method\"> <span class=\"method-name\">add_delivery_method</span><span class=\"method-args\">(symbol, klass, default_options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a new delivery method through the given class using the given symbol as alias and the default options supplied.</p> <pre class=\"ruby\">add_delivery_method :sendmail, Mail::Sendmail,\n  location:  '/usr/sbin/sendmail',\n  arguments: '-i -t'\n</pre> <div class=\"method-source-code\" id=\"add_delivery_method-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/delivery_methods.rb, line 52\ndef add_delivery_method(symbol, klass, default_options={})\n  class_attribute(:\"#{symbol}_settings\") unless respond_to?(:\"#{symbol}_settings\")\n  send(:\"#{symbol}_settings=\", default_options)\n  self.delivery_methods = delivery_methods.merge(symbol.to_sym =&gt; klass).freeze\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/inlinepreviewinterceptor":"<h1 id=\"class-ActionMailer::InlinePreviewInterceptor\" class=\"class\"> class ActionMailer::InlinePreviewInterceptor </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n\n</dl> <section class=\"description\"> <p>Implements a mailer preview interceptor that converts image tag src attributes that use inline cid: style urls to data: style urls so that they are visible when previewing a HTML email in a web browser.</p> <p>This interceptor is not enabled by default, to use it just register it like any other mailer preview interceptor:</p> <pre class=\"ruby\">ActionMailer::Base.register_preview_interceptor(ActionMailer::InlinePreviewInterceptor)\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"PATTERN\">PATTERN </dt>\n\n</dl> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/logsubscriber":"<h1 id=\"class-ActionMailer::LogSubscriber\" class=\"class\"> class ActionMailer::LogSubscriber </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../activesupport/logsubscriber\">ActiveSupport::LogSubscriber</a></dd>\n</dl> <section class=\"description\"> <p>Implements the <a href=\"../activesupport/logsubscriber\">ActiveSupport::LogSubscriber</a> for logging notifications when email is delivered and received.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deliver\"> <span class=\"method-name\">deliver</span><span class=\"method-args\">(event)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>An email was delivered.</p> <div class=\"method-source-code\" id=\"deliver-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/log_subscriber.rb, line 8\ndef deliver(event)\n  info do\n    recipients = Array(event.payload[:to]).join(', ')\n    \"\\nSent mail to #{recipients} (#{event.duration.round(1)}ms)\"\n  end\n\n  debug { event.payload[:mail] }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-logger\"> <span class=\"method-name\">logger</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Use the logger configured for <a href=\"base\">ActionMailer::Base</a></p> <div class=\"method-source-code\" id=\"logger-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/log_subscriber.rb, line 33\ndef logger\n  ActionMailer::Base.logger\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-process\"> <span class=\"method-name\">process</span><span class=\"method-args\">(event)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>An email was generated.</p> <div class=\"method-source-code\" id=\"process-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/log_subscriber.rb, line 24\ndef process(event)\n  debug do\n    mailer = event.payload[:mailer]\n    action = event.payload[:action]\n    \"\\n#{mailer}##{action}: processed outbound mail in #{event.duration.round(1)}ms\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-receive\"> <span class=\"method-name\">receive</span><span class=\"method-args\">(event)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>An email was received.</p> <div class=\"method-source-code\" id=\"receive-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/log_subscriber.rb, line 18\ndef receive(event)\n  info { \"\\nReceived mail (#{event.duration.round(1)}ms)\" }\n  debug { event.payload[:mail] }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/mailhelper":"<h1 id=\"module-ActionMailer::MailHelper\" class=\"module\"> module ActionMailer::MailHelper </h1> <section class=\"description\"> <p>Provides helper methods for <a href=\"base\">ActionMailer::Base</a> that can be used for easily formatting messages, accessing mailer or message instances, and the attachments list.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attachments\"> <span class=\"method-name\">attachments</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Access the message attachments list.</p> <div class=\"method-source-code\" id=\"attachments-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/mail_helper.rb, line 31\ndef attachments\n  mailer.attachments\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-block_format\"> <span class=\"method-name\">block_format</span><span class=\"method-args\">(text)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Take the text and format it, indented two spaces for each line, and wrapped at 72 columns.</p> <div class=\"method-source-code\" id=\"block_format-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/mail_helper.rb, line 8\ndef block_format(text)\n  formatted = text.split(/\\n\\r?\\n/).collect { |paragraph|\n    format_paragraph(paragraph)\n  }.join(\"\\n\\n\")\n\n  # Make list points stand on their own line\n  formatted.gsub!(/[ ]*([*]+) ([^*]*)/) { \"  #{$1} #{$2.strip}\\n\" }\n  formatted.gsub!(/[ ]*([#]+) ([^#]*)/) { \"  #{$1} #{$2.strip}\\n\" }\n\n  formatted\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-format_paragraph\"> <span class=\"method-name\">format_paragraph</span><span class=\"method-args\">(text, len = 72, indent = 2)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>text</code> wrapped at <code>len</code> columns and indented <code>indent</code> spaces.</p> <pre class=\"ruby\">my_text = 'Here is a sample text with more than 40 characters'\n\nformat_paragraph(my_text, 25, 4)\n# =&gt; \"    Here is a sample text with\\n    more than 40 characters\"\n</pre> <div class=\"method-source-code\" id=\"format_paragraph-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/mail_helper.rb, line 41\ndef format_paragraph(text, len = 72, indent = 2)\n  sentences = [[]]\n\n  text.split.each do |word|\n    if sentences.first.present? &amp;&amp; (sentences.last + [word]).join(' ').length &gt; len\n      sentences &lt;&lt; [word]\n    else\n      sentences.last &lt;&lt; word\n    end\n  end\n\n  indentation = \" \" * indent\n  sentences.map! { |sentence|\n    \"#{indentation}#{sentence.join(' ')}\"\n  }.join \"\\n\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mailer\"> <span class=\"method-name\">mailer</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Access the mailer instance.</p> <div class=\"method-source-code\" id=\"mailer-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/mail_helper.rb, line 21\ndef mailer\n  @_controller\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-message\"> <span class=\"method-name\">message</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Access the message instance.</p> <div class=\"method-source-code\" id=\"message-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/mail_helper.rb, line 26\ndef message\n  @_message\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/messagedelivery":"<h1 id=\"class-ActionMailer::MessageDelivery\" class=\"class\"> class ActionMailer::MessageDelivery </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Delegator</dd>\n</dl> <section class=\"description\"> <p>The <code>ActionMailer::MessageDelivery</code> class is used by <code>ActionMailer::Base</code> when creating a new mailer. <code>MessageDelivery</code> is a wrapper (<code>Delegator</code> subclass) around a lazy created <code>Mail::Message</code>. You can get direct access to the <code>Mail::Message</code>, deliver the email or schedule the email to be sent through Active Job.</p> <pre class=\"ruby\">Notifier.welcome(User.first)               # an ActionMailer::MessageDelivery object\nNotifier.welcome(User.first).deliver_now   # sends the email\nNotifier.welcome(User.first).deliver_later # enqueue email delivery as a job through Active Job\nNotifier.welcome(User.first).message       # a Mail::Message object\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deliver_later\"> <span class=\"method-name\">deliver_later</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enqueues the email to be delivered through Active Job. When the job runs it will send the email using <code>deliver_now</code>.</p> <pre class=\"ruby\">Notifier.welcome(User.first).deliver_later\nNotifier.welcome(User.first).deliver_later(wait: 1.hour)\nNotifier.welcome(User.first).deliver_later(wait_until: 10.hours.from_now)\n</pre> <p>Options:</p> <ul>\n<li> <p><code>:wait</code> - Enqueue the email to be delivered with a delay</p> </li>\n<li> <p><code>:wait_until</code> - Enqueue the email to be delivered at (after) a specific date / time</p> </li>\n<li> <p><code>:queue</code> - Enqueue the email on the specified queue</p> </li>\n</ul> <div class=\"method-source-code\" id=\"deliver_later-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/message_delivery.rb, line 67\ndef deliver_later(options={})\n  enqueue_delivery :deliver_now, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deliver_later-21\"> <span class=\"method-name\">deliver_later!</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enqueues the email to be delivered through Active Job. When the job runs it will send the email using <code>deliver_now!</code>. That means that the message will be sent bypassing checking <code>perform_deliveries</code> and <code>raise_delivery_errors</code>, so use with caution.</p> <pre class=\"ruby\">Notifier.welcome(User.first).deliver_later!\nNotifier.welcome(User.first).deliver_later!(wait: 1.hour)\nNotifier.welcome(User.first).deliver_later!(wait_until: 10.hours.from_now)\n</pre> <p>Options:</p> <ul>\n<li> <p><code>:wait</code> - Enqueue the email to be delivered with a delay</p> </li>\n<li> <p><code>:wait_until</code> - Enqueue the email to be delivered at (after) a specific date / time</p> </li>\n<li> <p><code>:queue</code> - Enqueue the email on the specified queue</p> </li>\n</ul> <div class=\"method-source-code\" id=\"deliver_later-21-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/message_delivery.rb, line 51\ndef deliver_later!(options={})\n  enqueue_delivery :deliver_now!, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deliver_now\"> <span class=\"method-name\">deliver_now</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delivers an email:</p> <pre class=\"ruby\">Notifier.welcome(User.first).deliver_now\n</pre> <div class=\"method-source-code\" id=\"deliver_now-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/message_delivery.rb, line 84\ndef deliver_now\n  message.deliver\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deliver_now-21\"> <span class=\"method-name\">deliver_now!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delivers an email without checking <code>perform_deliveries</code> and <code>raise_delivery_errors</code>, so use with caution.</p> <pre class=\"ruby\">Notifier.welcome(User.first).deliver_now!\n</pre> <div class=\"method-source-code\" id=\"deliver_now-21-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/message_delivery.rb, line 76\ndef deliver_now!\n  message.deliver!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-message\"> <span class=\"method-name\">message</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the Mail::Message object</p> <div class=\"method-source-code\" id=\"message-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/message_delivery.rb, line 33\ndef message\n  __getobj__\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/preview":"<h1 id=\"class-ActionMailer::Preview\" class=\"class\"> class ActionMailer::Preview </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-all\"> <span class=\"method-name\">all</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all mailer preview classes</p> <div class=\"method-source-code\" id=\"all-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/preview.rb, line 56\ndef all\n  load_previews if descendants.empty?\n  descendants\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(email)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the mail object for the given email name. The registered preview interceptors will be informed so that they can transform the message as they would if the mail was actually being delivered.</p> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/preview.rb, line 64\ndef call(email)\n  preview = self.new\n  message = preview.public_send(email)\n  inform_preview_interceptors(message)\n  message\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-email_exists-3F\"> <span class=\"method-name\">email_exists?</span><span class=\"method-args\">(email)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the email exists</p> <div class=\"method-source-code\" id=\"email_exists-3F-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/preview.rb, line 77\ndef email_exists?(email)\n  emails.include?(email)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-emails\"> <span class=\"method-name\">emails</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all of the available email previews</p> <div class=\"method-source-code\" id=\"emails-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/preview.rb, line 72\ndef emails\n  public_instance_methods(false).map(&amp;:to_s).sort\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-exists-3F\"> <span class=\"method-name\">exists?</span><span class=\"method-args\">(preview)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the preview exists</p> <div class=\"method-source-code\" id=\"exists-3F-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/preview.rb, line 82\ndef exists?(preview)\n  all.any?{ |p| p.preview_name == preview }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-find\"> <span class=\"method-name\">find</span><span class=\"method-args\">(preview)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find a mailer preview by its underscored class name</p> <div class=\"method-source-code\" id=\"find-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/preview.rb, line 87\ndef find(preview)\n  all.find{ |p| p.preview_name == preview }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-preview_name\"> <span class=\"method-name\">preview_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the underscored name of the mailer preview without the suffix</p> <div class=\"method-source-code\" id=\"preview_name-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/preview.rb, line 92\ndef preview_name\n  name.sub(/Preview$/, '').underscore\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/previews/classmethods":"<h1 id=\"module-ActionMailer::Previews::ClassMethods\" class=\"module\"> module ActionMailer::Previews::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-register_preview_interceptor\"> <span class=\"method-name\">register_preview_interceptor</span><span class=\"method-args\">(interceptor)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register an Interceptor which will be called before mail is previewed. Either a class or a string can be passed in as the Interceptor. If a string is passed in it will be <code>constantize</code>d.</p> <div class=\"method-source-code\" id=\"register_preview_interceptor-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/preview.rb, line 36\ndef register_preview_interceptor(interceptor)\n  preview_interceptor = case interceptor\n    when String, Symbol\n      interceptor.to_s.camelize.constantize\n    else\n      interceptor\n    end\n\n  unless preview_interceptors.include?(preview_interceptor)\n    preview_interceptors &lt;&lt; preview_interceptor\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-register_preview_interceptors\"> <span class=\"method-name\">register_preview_interceptors</span><span class=\"method-args\">(*interceptors)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register one or more Interceptors which will be called before mail is previewed.</p> <div class=\"method-source-code\" id=\"register_preview_interceptors-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/preview.rb, line 29\ndef register_preview_interceptors(*interceptors)\n  interceptors.flatten.compact.each { |interceptor| register_preview_interceptor(interceptor) }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionmailer/testhelper":"<h1 id=\"module-ActionMailer::TestHelper\" class=\"module\"> module ActionMailer::TestHelper </h1> <section class=\"description\"> <p>Provides helper methods for testing Action Mailer, including <a href=\"testhelper#method-i-assert_emails\">assert_emails</a> and <a href=\"testhelper#method-i-assert_no_emails\">assert_no_emails</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_emails\"> <span class=\"method-name\">assert_emails</span><span class=\"method-args\">(number) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that the number of emails sent matches the given number.</p> <pre class=\"ruby\">def test_emails\n  assert_emails 0\n  ContactMailer.welcome.deliver_now\n  assert_emails 1\n  ContactMailer.welcome.deliver_now\n  assert_emails 2\nend\n</pre> <p>If a block is passed, that block should cause the specified number of emails to be sent.</p> <pre class=\"ruby\">def test_emails_again\n  assert_emails 1 do\n    ContactMailer.welcome.deliver_now\n  end\n\n  assert_emails 2 do\n    ContactMailer.welcome.deliver_now\n    ContactMailer.welcome.deliver_now\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_emails-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/test_helper.rb, line 28\ndef assert_emails(number)\n  if block_given?\n    original_count = ActionMailer::Base.deliveries.size\n    yield\n    new_count = ActionMailer::Base.deliveries.size\n    assert_equal number, new_count - original_count, \"#{number} emails expected, but #{new_count - original_count} were sent\"\n  else\n    assert_equal number, ActionMailer::Base.deliveries.size\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_no_emails\"> <span class=\"method-name\">assert_no_emails</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Assert that no emails have been sent.</p> <pre class=\"ruby\">def test_emails\n  assert_no_emails\n  ContactMailer.welcome.deliver_now\n  assert_emails 1\nend\n</pre> <p>If a block is passed, that block should not cause any emails to be sent.</p> <pre class=\"ruby\">def test_emails_again\n  assert_no_emails do\n    # No emails should be sent from this block\n  end\nend\n</pre> <p>Note: This assertion is simply a shortcut for:</p> <pre class=\"ruby\">assert_emails 0\n</pre> <div class=\"method-source-code\" id=\"assert_no_emails-source\"> <pre class=\"ruby\"># File actionmailer/lib/action_mailer/test_helper.rb, line 58\ndef assert_no_emails(&amp;block)\n  assert_emails 0, &amp;block\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview":"<h1 id=\"module-ActionView\" class=\"module\"> module ActionView </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"TemplateError\">TemplateError </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-gem_version\"> <span class=\"method-name\">gem_version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Action View as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"gem_version-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/gem_version.rb, line 3\ndef self.gem_version\n  Gem::Version.new VERSION::STRING\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-version\"> <span class=\"method-name\">version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded <a href=\"actionview\">ActionView</a> as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"version-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/version.rb, line 5\ndef self.version\n  gem_version\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/base":"<h1 id=\"class-ActionView::Base\" class=\"class\"> class ActionView::Base </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"helpers\">ActionView::Helpers</a>, <a class=\"include\" href=\"../erb/util\">ERB::Util</a>, <a class=\"include\" href=\"context\">ActionView::Context</a>\n</dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActionView::Base-label-Action+View+Base\">Action View <a href=\"base\">Base</a>\n</h1> <p>Action View templates can be written in several ways. If the template file has a <code>.erb</code> extension, then it uses the <a href=\"https://rubygems.org/gems/erubis\">erubis</a> template system which can embed Ruby into an HTML document. If the template file has a <code>.builder</code> extension, then Jim Weirich's Builder::XmlMarkup library is used.</p> <h2 id=\"class-ActionView::Base-label-ERB\"><a href=\"../erb\">ERB</a></h2> <p>You trigger <a href=\"../erb\">ERB</a> by using embeddings such as &lt;% %&gt;, &lt;% -%&gt;, and &lt;%= %&gt;. The &lt;%= %&gt; tag set is used when you want output. Consider the following loop for names:</p> <pre>&lt;b&gt;Names of all the people&lt;/b&gt;\n&lt;% @people.each do |person| %&gt;\n  Name: &lt;%= person.name %&gt;&lt;br/&gt;\n&lt;% end %&gt;</pre> <p>The loop is setup in regular embedding tags &lt;% %&gt; and the name is written using the output embedding tag &lt;%= %&gt;. Note that this is not just a usage suggestion. Regular output functions like print or puts won't work with <a href=\"../erb\">ERB</a> templates. So this would be wrong:</p> <pre>&lt;%# WRONG %&gt;\nHi, Mr. &lt;% puts \"Frodo\" %&gt;</pre> <p>If you absolutely must write from within a function use <code>concat</code>.</p> <p>When on a line that only contains whitespaces except for the tag, &lt;% %&gt; suppress leading and trailing whitespace, including the trailing newline. &lt;% %&gt; and &lt;%- -%&gt; are the same. Note however that &lt;%= %&gt; and &lt;%= -%&gt; are different: only the latter removes trailing whitespaces.</p> <h3 id=\"class-ActionView::Base-label-Using+sub+templates\">Using sub templates</h3> <p>Using sub templates allows you to sidestep tedious replication and extract common display structures in shared templates. The classic example is the use of a header and footer (even though the Action Pack-way would be to use <a href=\"layouts\">Layouts</a>):</p> <pre>&lt;%= render \"shared/header\" %&gt;\nSomething really specific and terrific\n&lt;%= render \"shared/footer\" %&gt;</pre> <p>As you see, we use the output embeddings for the render methods. The render call itself will just return a string holding the result of the rendering. The output embedding writes it to the current template.</p> <p>But you don't have to restrict yourself to static includes. Templates can share variables amongst themselves by using instance variables defined using the regular embedding tags. Like this:</p> <pre>&lt;% @page_title = \"A Wonderful Hello\" %&gt;\n&lt;%= render \"shared/header\" %&gt;</pre> <p>Now the header can pick up on the <code>@page_title</code> variable and use it for outputting a title tag:</p> <pre>&lt;title&gt;&lt;%= @page_title %&gt;&lt;/title&gt;</pre> <h3 id=\"class-ActionView::Base-label-Passing+local+variables+to+sub+templates\">Passing local variables to sub templates</h3> <p>You can pass local variables to sub templates by using a hash with the variable names as keys and the objects as values:</p> <pre>&lt;%= render \"shared/header\", { headline: \"Welcome\", person: person } %&gt;</pre> <p>These can now be accessed in <code>shared/header</code> with:</p> <pre>Headline: &lt;%= headline %&gt;\nFirst name: &lt;%= person.first_name %&gt;</pre> <h3 id=\"class-ActionView::Base-label-Template+caching\">\n<a href=\"template\">Template</a> caching</h3> <p>By default, Rails will compile each template to a method in order to render it. When you alter a template, Rails will check the file's modification time and recompile it in development mode.</p> <h2 id=\"class-ActionView::Base-label-Builder\">Builder</h2> <p>Builder templates are a more programmatic alternative to <a href=\"../erb\">ERB</a>. They are especially useful for generating XML content. An XmlMarkup object named <code>xml</code> is automatically made available to templates with a <code>.builder</code> extension.</p> <p>Here are some basic examples:</p> <pre class=\"ruby\">xml.em(\"emphasized\")                                 # =&gt; &lt;em&gt;emphasized&lt;/em&gt;\nxml.em { xml.b(\"emph &amp; bold\") }                      # =&gt; &lt;em&gt;&lt;b&gt;emph &amp;amp; bold&lt;/b&gt;&lt;/em&gt;\nxml.a(\"A Link\", \"href\" =&gt; \"http://onestepback.org\")  # =&gt; &lt;a href=\"http://onestepback.org\"&gt;A Link&lt;/a&gt;\nxml.target(\"name\" =&gt; \"compile\", \"option\" =&gt; \"fast\")  # =&gt; &lt;target option=\"fast\" name=\"compile\"\\&gt;\n                                                     # NOTE: order of attributes is not specified.\n</pre> <p>Any method with a block will be treated as an XML markup tag with nested markup in the block. For example, the following:</p> <pre class=\"ruby\">xml.div do\n  xml.h1(@person.name)\n  xml.p(@person.bio)\nend\n</pre> <p>would produce something like:</p> <pre>&lt;div&gt;\n  &lt;h1&gt;David Heinemeier Hansson&lt;/h1&gt;\n  &lt;p&gt;A product of Danish Design during the Winter of '79...&lt;/p&gt;\n&lt;/div&gt;</pre> <p>A full-length RSS example actually used on Basecamp:</p> <pre class=\"ruby\">xml.rss(\"version\" =&gt; \"2.0\", \"xmlns:dc\" =&gt; \"http://purl.org/dc/elements/1.1/\") do\n  xml.channel do\n    xml.title(@feed_title)\n    xml.link(@url)\n    xml.description \"Basecamp: Recent items\"\n    xml.language \"en-us\"\n    xml.ttl \"40\"\n\n    @recent_items.each do |item|\n      xml.item do\n        xml.title(item_title(item))\n        xml.description(item_description(item)) if item_description(item)\n        xml.pubDate(item_pubDate(item))\n        xml.guid(@person.firm.account.url + @recent_items.url(item))\n        xml.link(@person.firm.account.url + @recent_items.url(item))\n\n        xml.tag!(\"dc:creator\", item.author_name) if item_has_creator?(item)\n      end\n    end\n  end\nend\n</pre> <p>For more information on Builder please consult the [source code](<a href=\"https://github.com/jimweirich/builder\">github.com/jimweirich/builder</a>).</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-view_renderer\"> <span class=\"method-name\">view_renderer</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-cache_template_loading\"> <span class=\"method-name\">cache_template_loading</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"cache_template_loading-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/base.rb, line 162\ndef cache_template_loading\n  ActionView::Resolver.caching?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-cache_template_loading-3D\"> <span class=\"method-name\">cache_template_loading=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"cache_template_loading-3D-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/base.rb, line 166\ndef cache_template_loading=(value)\n  ActionView::Resolver.caching = value\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/context":"<h1 id=\"module-ActionView::Context\" class=\"module\"> module ActionView::Context </h1> <section class=\"description\"> <h1 id=\"module-ActionView::Context-label-Action+View+Context\">Action View <a href=\"context\">Context</a>\n</h1> <p>Action View contexts are supplied to Action Controller to render a template. The default Action View context is <a href=\"base\">ActionView::Base</a>.</p> <p>In order to work with <a href=\"../actioncontroller\">ActionController</a>, a <a href=\"context\">Context</a> must just include this module. The initialization of the variables used by the context (@output_buffer, @view_flow, and @virtual_path) is responsibility of the object that includes this module (although you can call <a href=\"context#method-i-_prepare_context\">#_prepare_context</a> defined below).</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-output_buffer\"> <span class=\"method-name\">output_buffer</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-view_flow\"> <span class=\"method-name\">view_flow</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_layout_for\"> <span class=\"method-name\">_layout_for</span><span class=\"method-args\">(name=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Encapsulates the interaction with the view flow so it returns the correct buffer on <code>yield</code>. This is usually overwritten by helpers to add more behavior. :api: plugin</p> <div class=\"method-source-code\" id=\"_layout_for-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/context.rb, line 31\ndef _layout_for(name=nil)\n  name ||= :layout\n  view_flow.get(name).html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_prepare_context\"> <span class=\"method-name\">_prepare_context</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Prepares the context by setting the appropriate instance variables. :api: plugin</p> <div class=\"method-source-code\" id=\"_prepare_context-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/context.rb, line 21\ndef _prepare_context\n  @view_flow     = OutputFlow.new\n  @output_buffer = nil\n  @virtual_path  = nil\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/digestor":"<h1 id=\"class-ActionView::Digestor\" class=\"class\"> class ActionView::Digestor </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-finder\"> <span class=\"method-name\">finder</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-name\"> <span class=\"method-name\">name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-options\"> <span class=\"method-name\">options</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-digest\"> <span class=\"method-name\">digest</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Supported options:</p> <ul>\n<li> <p><code>name</code> - <a href=\"template\">Template</a> name</p> </li>\n<li> <p><code>finder</code> - An instance of <span>ActionView::LookupContext</span></p> </li>\n<li> <p><code>dependencies</code> - An array of dependent views</p> </li>\n<li> <p><code>partial</code> - Specifies whether the template is a partial</p> </li>\n</ul> <div class=\"method-source-code\" id=\"digest-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/digestor.rb, line 18\ndef digest(options)\n  options.assert_valid_keys(:name, :finder, :dependencies, :partial)\n\n  cache_key = ([ options[:name], options[:finder].details_key.hash ].compact + Array.wrap(options[:dependencies])).join('.')\n\n  # this is a correctly done double-checked locking idiom\n  # (ThreadSafe::Cache's lookups have volatile semantics)\n  @@cache[cache_key] || @@digest_monitor.synchronize do\n    @@cache.fetch(cache_key) do # re-check under lock\n      compute_and_store_digest(cache_key, options)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/digestor.rb, line 56\ndef initialize(options)\n  @name, @finder = options.values_at(:name, :finder)\n  @options = options.except(:name, :finder)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dependencies\"> <span class=\"method-name\">dependencies</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"dependencies-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/digestor.rb, line 70\ndef dependencies\n  DependencyTracker.find_dependencies(name, template)\nrescue ActionView::MissingTemplate\n  logger.try :error, \"  '#{name}' file doesn't exist, so no dependencies\"\n  []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-digest\"> <span class=\"method-name\">digest</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"digest-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/digestor.rb, line 61\ndef digest\n  Digest::MD5.hexdigest(\"#{source}-#{dependency_digest}\").tap do |digest|\n    logger.try :debug, \"  Cache digest for #{template.inspect}: #{digest}\"\n  end\nrescue ActionView::MissingTemplate\n  logger.try :error, \"  Couldn't find template for digesting: #{name}\"\n  ''\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-nested_dependencies\"> <span class=\"method-name\">nested_dependencies</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"nested_dependencies-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/digestor.rb, line 77\ndef nested_dependencies\n  dependencies.collect do |dependency|\n    dependencies = PartialDigestor.new(name: dependency, finder: finder).nested_dependencies\n    dependencies.any? ? { dependency =&gt; dependencies } : dependency\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers":"<h1 id=\"module-ActionView::Helpers\" class=\"module\"> module ActionView::Helpers </h1> <section class=\"description\"> <h1 id=\"module-ActionView::Helpers-label-Active+Model+Helpers\">Active Model <a href=\"helpers\">Helpers</a>\n</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Asset+URL+Helpers\">Action View Asset URL <a href=\"helpers\">Helpers</a>\n</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Atom+Feed+Helpers\">Action View Atom Feed <a href=\"helpers\">Helpers</a>\n</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Cache+Helper\">Action View Cache Helper</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Capture+Helper\">Action View Capture Helper</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+CSRF+Helper\">Action View CSRF Helper</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Debug+Helper\">Action View Debug Helper</h1> <p>Provides a set of methods for making it easier to debug Rails objects.</p> <h1 id=\"module-ActionView::Helpers-label-Action+View+Form+Helpers\">Action View Form <a href=\"helpers\">Helpers</a>\n</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Form+Option+Helpers\">Action View Form Option <a href=\"helpers\">Helpers</a>\n</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Form+Tag+Helpers\">Action View Form Tag <a href=\"helpers\">Helpers</a>\n</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Record+Tag+Helpers\">Action View Record Tag <a href=\"helpers\">Helpers</a>\n</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Sanitize+Helpers\">Action View Sanitize <a href=\"helpers\">Helpers</a>\n</h1> <h1 id=\"module-ActionView::Helpers-label-Action+View+Translation+Helpers\">Action View Translation <a href=\"helpers\">Helpers</a>\n</h1> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/assettaghelper":"<h1 id=\"module-ActionView::Helpers::AssetTagHelper\" class=\"module\"> module ActionView::Helpers::AssetTagHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"asseturlhelper\">ActionView::Helpers::AssetUrlHelper</a>, <a class=\"include\" href=\"taghelper\">ActionView::Helpers::TagHelper</a>\n</dd>\n</dl> <section class=\"description\"> <p>This module provides methods for generating HTML that links views to assets such as images, JavaScripts, stylesheets, and feeds. These methods do not verify the assets exist before linking to them:</p> <pre class=\"ruby\">image_tag(\"rails.png\")\n# =&gt; &lt;img alt=\"Rails\" src=\"/assets/rails.png\" /&gt;\nstylesheet_link_tag(\"application\")\n# =&gt; &lt;link href=\"/assets/application.css?body=1\" media=\"screen\" rel=\"stylesheet\" /&gt;\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-audio_tag\"> <span class=\"method-name\">audio_tag</span><span class=\"method-args\">(*sources)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an HTML audio tag for the <code>source</code>. The <code>source</code> can be full path or file that exists in your public audios directory.</p> <pre class=\"ruby\">audio_tag(\"sound\")\n# =&gt; &lt;audio src=\"/audios/sound\"&gt;&lt;/audio&gt;\naudio_tag(\"sound.wav\")\n# =&gt; &lt;audio src=\"/audios/sound.wav\"&gt;&lt;/audio&gt;\naudio_tag(\"sound.wav\", autoplay: true, controls: true)\n# =&gt; &lt;audio autoplay=\"autoplay\" controls=\"controls\" src=\"/audios/sound.wav\"&gt;&lt;/audio&gt;\naudio_tag(\"sound.wav\", \"sound.mid\")\n# =&gt; &lt;audio&gt;&lt;source src=\"/audios/sound.wav\" /&gt;&lt;source src=\"/audios/sound.mid\" /&gt;&lt;/audio&gt;\n</pre> <div class=\"method-source-code\" id=\"audio_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_tag_helper.rb, line 299\ndef audio_tag(*sources)\n  multiple_sources_tag('audio', sources)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-auto_discovery_link_tag\"> <span class=\"method-name\">auto_discovery_link_tag</span><span class=\"method-args\">(type = :rss, url_options = {}, tag_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a link tag that browsers and feed readers can use to auto-detect an RSS or Atom feed. The <code>type</code> can either be <code>:rss</code> (default) or <code>:atom</code>. Control the link options in url_for format using the <code>url_options</code>. You can modify the LINK tag itself in <code>tag_options</code>.</p> <h4 id=\"method-i-auto_discovery_link_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:rel</code> - Specify the relation of this link, defaults to “alternate”</p> </li>\n<li> <p><code>:type</code> - Override the auto-generated mime type</p> </li>\n<li> <p><code>:title</code> - Specify the title of the link, defaults to the <code>type</code></p> </li>\n</ul> <h4 id=\"method-i-auto_discovery_link_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">auto_discovery_link_tag\n# =&gt; &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"http://www.currenthost.com/controller/action\" /&gt;\nauto_discovery_link_tag(:atom)\n# =&gt; &lt;link rel=\"alternate\" type=\"application/atom+xml\" title=\"ATOM\" href=\"http://www.currenthost.com/controller/action\" /&gt;\nauto_discovery_link_tag(:rss, {action: \"feed\"})\n# =&gt; &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"http://www.currenthost.com/controller/feed\" /&gt;\nauto_discovery_link_tag(:rss, {action: \"feed\"}, {title: \"My RSS\"})\n# =&gt; &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"My RSS\" href=\"http://www.currenthost.com/controller/feed\" /&gt;\nauto_discovery_link_tag(:rss, {controller: \"news\", action: \"feed\"})\n# =&gt; &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"http://www.currenthost.com/news/feed\" /&gt;\nauto_discovery_link_tag(:rss, \"http://www.example.com/feed.rss\", {title: \"Example RSS\"})\n# =&gt; &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"Example RSS\" href=\"http://www.example.com/feed.rss\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"auto_discovery_link_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_tag_helper.rb, line 131\ndef auto_discovery_link_tag(type = :rss, url_options = {}, tag_options = {})\n  if !(type == :rss || type == :atom) &amp;&amp; tag_options[:type].blank?\n    raise ArgumentError.new(\"You should pass :type tag_option key explicitly, because you have passed #{type} type other than :rss or :atom.\")\n  end\n\n  tag(\n    \"link\",\n    \"rel\"   =&gt; tag_options[:rel] || \"alternate\",\n    \"type\"  =&gt; tag_options[:type] || Mime::Type.lookup_by_extension(type.to_s).to_s,\n    \"title\" =&gt; tag_options[:title] || type.to_s.upcase,\n    \"href\"  =&gt; url_options.is_a?(Hash) ? url_for(url_options.merge(:only_path =&gt; false)) : url_options\n  )\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-favicon_link_tag\"> <span class=\"method-name\">favicon_link_tag</span><span class=\"method-args\">(source='favicon.ico', options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a link tag for a favicon managed by the asset pipeline.</p> <p>If a page has no link like the one generated by this helper, browsers ask for <code>/favicon.ico</code> automatically, and cache the file if the request succeeds. If the favicon changes it is hard to get it updated.</p> <p>To have better control applications may let the asset pipeline manage their favicon storing the file under <code>app/assets/images</code>, and using this helper to generate its corresponding link tag.</p> <p>The helper gets the name of the favicon file as first argument, which defaults to “favicon.ico”, and also supports <code>:rel</code> and <code>:type</code> options to override their defaults, “shortcut icon” and “image/x-icon” respectively:</p> <pre class=\"ruby\">favicon_link_tag\n# =&gt; &lt;link href=\"/assets/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" /&gt;\n\nfavicon_link_tag 'myicon.ico'\n# =&gt; &lt;link href=\"/assets/myicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" /&gt;\n</pre> <p>Mobile Safari looks for a different link tag, pointing to an image that will be used if you add the page to the home screen of an iOS device. The following call would generate such a tag:</p> <pre class=\"ruby\">favicon_link_tag 'mb-icon.png', rel: 'apple-touch-icon', type: 'image/png'\n# =&gt; &lt;link href=\"/assets/mb-icon.png\" rel=\"apple-touch-icon\" type=\"image/png\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"favicon_link_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_tag_helper.rb, line 172\ndef favicon_link_tag(source='favicon.ico', options={})\n  tag('link', {\n    :rel  =&gt; 'shortcut icon',\n    :type =&gt; 'image/x-icon',\n    :href =&gt; path_to_image(source)\n  }.merge!(options.symbolize_keys))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-image_alt\"> <span class=\"method-name\">image_alt</span><span class=\"method-args\">(src)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string suitable for an HTML image tag alt attribute. The <code>src</code> argument is meant to be an image file path. The method removes the basename of the file path and the digest, if any. It also removes hyphens and underscores from file names and replaces them with spaces, returning a space-separated, titleized string.</p> <h4 id=\"method-i-image_alt-label-Examples\">Examples</h4> <pre class=\"ruby\">image_alt('rails.png')\n# =&gt; Rails\n\nimage_alt('hyphenated-file-name.png')\n# =&gt; Hyphenated file name\n\nimage_alt('underscored_file_name.png')\n# =&gt; Underscored file name\n</pre> <div class=\"method-source-code\" id=\"image_alt-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_tag_helper.rb, line 238\ndef image_alt(src)\n  File.basename(src, '.*').sub(/-[[:xdigit:]]{32}\\z/, '').tr('-_', ' ').capitalize\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-image_tag\"> <span class=\"method-name\">image_tag</span><span class=\"method-args\">(source, options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an HTML image tag for the <code>source</code>. The <code>source</code> can be a full path or a file.</p> <h4 id=\"method-i-image_tag-label-Options\">Options</h4> <p>You can add HTML attributes using the <code>options</code>. The <code>options</code> supports two additional keys for convenience and conformance:</p> <ul>\n<li> <p><code>:alt</code> - If no alt text is given, the file name part of the <code>source</code> is used (capitalized and without the extension)</p> </li>\n<li> <p><code>:size</code> - Supplied as “{Width}x{Height}” or “{Number}”, so “30x45” becomes width=“30” and height=“45”, and “50” becomes width=“50” and height=“50”. <code>:size</code> will be ignored if the value is not in the correct format.</p> </li>\n</ul> <h4 id=\"method-i-image_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">image_tag(\"icon\")\n# =&gt; &lt;img alt=\"Icon\" src=\"/assets/icon\" /&gt;\nimage_tag(\"icon.png\")\n# =&gt; &lt;img alt=\"Icon\" src=\"/assets/icon.png\" /&gt;\nimage_tag(\"icon.png\", size: \"16x10\", alt: \"Edit Entry\")\n# =&gt; &lt;img src=\"/assets/icon.png\" width=\"16\" height=\"10\" alt=\"Edit Entry\" /&gt;\nimage_tag(\"/icons/icon.gif\", size: \"16\")\n# =&gt; &lt;img src=\"/icons/icon.gif\" width=\"16\" height=\"16\" alt=\"Icon\" /&gt;\nimage_tag(\"/icons/icon.gif\", height: '32', width: '32')\n# =&gt; &lt;img alt=\"Icon\" height=\"32\" src=\"/icons/icon.gif\" width=\"32\" /&gt;\nimage_tag(\"/icons/icon.gif\", class: \"menu_icon\")\n# =&gt; &lt;img alt=\"Icon\" class=\"menu_icon\" src=\"/icons/icon.gif\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"image_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_tag_helper.rb, line 208\ndef image_tag(source, options={})\n  options = options.symbolize_keys\n\n  src = options[:src] = path_to_image(source)\n\n  unless src =~ /^(?:cid|data):/ || src.blank?\n    options[:alt] = options.fetch(:alt){ image_alt(src) }\n  end\n\n  options[:width], options[:height] = extract_dimensions(options.delete(:size)) if options[:size]\n  tag(\"img\", options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-javascript_include_tag\"> <span class=\"method-name\">javascript_include_tag</span><span class=\"method-args\">(*sources)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an HTML script tag for each of the <code>sources</code> provided.</p> <p>Sources may be paths to JavaScript files. Relative paths are assumed to be relative to <code>assets/javascripts</code>, full paths are assumed to be relative to the document root. Relative paths are idiomatic, use absolute paths only when needed.</p> <p>When passing paths, the “.js” extension is optional. If you do not want “.js” appended to the path <code>extname: false</code> can be set on the options.</p> <p>You can modify the HTML attributes of the script tag by passing a hash as the last argument.</p> <p>When the Asset Pipeline is enabled, you can pass the name of your manifest as source, and include other JavaScript or CoffeeScript files inside the manifest.</p> <pre class=\"ruby\">javascript_include_tag \"xmlhr\"\n# =&gt; &lt;script src=\"/assets/xmlhr.js?1284139606\"&gt;&lt;/script&gt;\n\njavascript_include_tag \"template.jst\", extname: false\n# =&gt; &lt;script src=\"/assets/template.jst?1284139606\"&gt;&lt;/script&gt;\n\njavascript_include_tag \"xmlhr.js\"\n# =&gt; &lt;script src=\"/assets/xmlhr.js?1284139606\"&gt;&lt;/script&gt;\n\njavascript_include_tag \"common.javascript\", \"/elsewhere/cools\"\n# =&gt; &lt;script src=\"/assets/common.javascript?1284139606\"&gt;&lt;/script&gt;\n#    &lt;script src=\"/elsewhere/cools.js?1423139606\"&gt;&lt;/script&gt;\n\njavascript_include_tag \"http://www.example.com/xmlhr\"\n# =&gt; &lt;script src=\"http://www.example.com/xmlhr\"&gt;&lt;/script&gt;\n\njavascript_include_tag \"http://www.example.com/xmlhr.js\"\n# =&gt; &lt;script src=\"http://www.example.com/xmlhr.js\"&gt;&lt;/script&gt;\n</pre> <div class=\"method-source-code\" id=\"javascript_include_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_tag_helper.rb, line 56\ndef javascript_include_tag(*sources)\n  options = sources.extract_options!.stringify_keys\n  path_options = options.extract!('protocol', 'extname').symbolize_keys\n  sources.uniq.map { |source|\n    tag_options = {\n      \"src\" =&gt; path_to_javascript(source, path_options)\n    }.merge!(options)\n    content_tag(:script, \"\", tag_options)\n  }.join(\"\\n\").html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stylesheet_link_tag\"> <span class=\"method-name\">stylesheet_link_tag</span><span class=\"method-args\">(*sources)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a stylesheet link tag for the sources specified as arguments. If you don't specify an extension, <code>.css</code> will be appended automatically. You can modify the link attributes by passing a hash as the last argument. For historical reasons, the 'media' attribute will always be present and defaults to “screen”, so you must explicitly set it to “all” for the stylesheet(s) to apply to all media types.</p> <pre class=\"ruby\">stylesheet_link_tag \"style\"\n# =&gt; &lt;link href=\"/assets/style.css\" media=\"screen\" rel=\"stylesheet\" /&gt;\n\nstylesheet_link_tag \"style.css\"\n# =&gt; &lt;link href=\"/assets/style.css\" media=\"screen\" rel=\"stylesheet\" /&gt;\n\nstylesheet_link_tag \"http://www.example.com/style.css\"\n# =&gt; &lt;link href=\"http://www.example.com/style.css\" media=\"screen\" rel=\"stylesheet\" /&gt;\n\nstylesheet_link_tag \"style\", media: \"all\"\n# =&gt; &lt;link href=\"/assets/style.css\" media=\"all\" rel=\"stylesheet\" /&gt;\n\nstylesheet_link_tag \"style\", media: \"print\"\n# =&gt; &lt;link href=\"/assets/style.css\" media=\"print\" rel=\"stylesheet\" /&gt;\n\nstylesheet_link_tag \"random.styles\", \"/css/stylish\"\n# =&gt; &lt;link href=\"/assets/random.styles\" media=\"screen\" rel=\"stylesheet\" /&gt;\n#    &lt;link href=\"/css/stylish.css\" media=\"screen\" rel=\"stylesheet\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"stylesheet_link_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_tag_helper.rb, line 92\ndef stylesheet_link_tag(*sources)\n  options = sources.extract_options!.stringify_keys\n  path_options = options.extract!('protocol').symbolize_keys\n\n  sources.uniq.map { |source|\n    tag_options = {\n      \"rel\" =&gt; \"stylesheet\",\n      \"media\" =&gt; \"screen\",\n      \"href\" =&gt; path_to_stylesheet(source, path_options)\n    }.merge!(options)\n    tag(:link, tag_options)\n  }.join(\"\\n\").html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-video_tag\"> <span class=\"method-name\">video_tag</span><span class=\"method-args\">(*sources)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an HTML video tag for the <code>sources</code>. If <code>sources</code> is a string, a single video tag will be returned. If <code>sources</code> is an array, a video tag with nested source tags for each source will be returned. The <code>sources</code> can be full paths or files that exists in your public videos directory.</p> <h4 id=\"method-i-video_tag-label-Options\">Options</h4> <p>You can add HTML attributes using the <code>options</code>. The <code>options</code> supports two additional keys for convenience and conformance:</p> <ul>\n<li> <p><code>:poster</code> - Set an image (like a screenshot) to be shown before the video loads. The path is calculated like the <code>src</code> of <code>image_tag</code>.</p> </li>\n<li> <p><code>:size</code> - Supplied as “{Width}x{Height}” or “{Number}”, so “30x45” becomes width=“30” and height=“45”, and “50” becomes width=“50” and height=“50”. <code>:size</code> will be ignored if the value is not in the correct format.</p> </li>\n</ul> <h4 id=\"method-i-video_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">video_tag(\"trailer\")\n# =&gt; &lt;video src=\"/videos/trailer\"&gt;&lt;/video&gt;\nvideo_tag(\"trailer.ogg\")\n# =&gt; &lt;video src=\"/videos/trailer.ogg\"&gt;&lt;/video&gt;\nvideo_tag(\"trailer.ogg\", controls: true, autobuffer: true)\n# =&gt; &lt;video autobuffer=\"autobuffer\" controls=\"controls\" src=\"/videos/trailer.ogg\" &gt;&lt;/video&gt;\nvideo_tag(\"trailer.m4v\", size: \"16x10\", poster: \"screenshot.png\")\n# =&gt; &lt;video src=\"/videos/trailer.m4v\" width=\"16\" height=\"10\" poster=\"/assets/screenshot.png\"&gt;&lt;/video&gt;\nvideo_tag(\"/trailers/hd.avi\", size: \"16x16\")\n# =&gt; &lt;video src=\"/trailers/hd.avi\" width=\"16\" height=\"16\"&gt;&lt;/video&gt;\nvideo_tag(\"/trailers/hd.avi\", size: \"16\")\n# =&gt; &lt;video height=\"16\" src=\"/trailers/hd.avi\" width=\"16\"&gt;&lt;/video&gt;\nvideo_tag(\"/trailers/hd.avi\", height: '32', width: '32')\n# =&gt; &lt;video height=\"32\" src=\"/trailers/hd.avi\" width=\"32\"&gt;&lt;/video&gt;\nvideo_tag(\"trailer.ogg\", \"trailer.flv\")\n# =&gt; &lt;video&gt;&lt;source src=\"/videos/trailer.ogg\" /&gt;&lt;source src=\"/videos/trailer.flv\" /&gt;&lt;/video&gt;\nvideo_tag([\"trailer.ogg\", \"trailer.flv\"])\n# =&gt; &lt;video&gt;&lt;source src=\"/videos/trailer.ogg\" /&gt;&lt;source src=\"/videos/trailer.flv\" /&gt;&lt;/video&gt;\nvideo_tag([\"trailer.ogg\", \"trailer.flv\"], size: \"160x120\")\n# =&gt; &lt;video height=\"120\" width=\"160\"&gt;&lt;source src=\"/videos/trailer.ogg\" /&gt;&lt;source src=\"/videos/trailer.flv\" /&gt;&lt;/video&gt;\n</pre> <div class=\"method-source-code\" id=\"video_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_tag_helper.rb, line 280\ndef video_tag(*sources)\n  multiple_sources_tag('video', sources) do |options|\n    options[:poster] = path_to_image(options[:poster]) if options[:poster]\n    options[:width], options[:height] = extract_dimensions(options.delete(:size)) if options[:size]\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/asseturlhelper":"<h1 id=\"module-ActionView::Helpers::AssetUrlHelper\" class=\"module\"> module ActionView::Helpers::AssetUrlHelper </h1> <section class=\"description\"> <p>This module provides methods for generating asset paths and urls.</p> <pre class=\"ruby\">image_path(\"rails.png\")\n# =&gt; \"/assets/rails.png\"\n\nimage_url(\"rails.png\")\n# =&gt; \"http://www.example.com/assets/rails.png\"\n</pre> <h3 id=\"module-ActionView::Helpers::AssetUrlHelper-label-Using+asset+hosts\">Using asset hosts</h3> <p>By default, Rails links to these assets on the current host in the public folder, but you can direct Rails to link to assets from a dedicated asset server by setting <code>ActionController::Base.asset_host</code> in the application configuration, typically in <code>config/environments/production.rb</code>. For example, you'd define <code>assets.example.com</code> to be your asset host this way, inside the <code>configure</code> block of your environment-specific configuration files or <code>config/application.rb</code>:</p> <pre class=\"ruby\">config.action_controller.asset_host = \"assets.example.com\"\n</pre> <p><a href=\"../helpers\">Helpers</a> take that into account:</p> <pre class=\"ruby\">image_tag(\"rails.png\")\n# =&gt; &lt;img alt=\"Rails\" src=\"http://assets.example.com/assets/rails.png\" /&gt;\nstylesheet_link_tag(\"application\")\n# =&gt; &lt;link href=\"http://assets.example.com/assets/application.css\" media=\"screen\" rel=\"stylesheet\" /&gt;\n</pre> <p>Browsers typically open at most two simultaneous connections to a single host, which means your assets often have to wait for other assets to finish downloading. You can alleviate this by using a <code>%d</code> wildcard in the <code>asset_host</code>. For example, “assets%d.example.com”. If that wildcard is present Rails distributes asset requests among the corresponding four hosts “assets0.example.com”, …, “assets3.example.com”. With this trick browsers will open eight simultaneous connections rather than two.</p> <pre class=\"ruby\">image_tag(\"rails.png\")\n# =&gt; &lt;img alt=\"Rails\" src=\"http://assets0.example.com/assets/rails.png\" /&gt;\nstylesheet_link_tag(\"application\")\n# =&gt; &lt;link href=\"http://assets2.example.com/assets/application.css\" media=\"screen\" rel=\"stylesheet\" /&gt;\n</pre> <p>To do this, you can either setup four actual hosts, or you can use wildcard DNS to CNAME the wildcard to a single asset host. You can read more about setting up your DNS CNAME records from your ISP.</p> <p>Note: This is purely a browser performance optimization and is not meant for server load balancing. See <a href=\"http://www.die.net/musings/page_load_time\">www.die.net/musings/page_load_time</a>/ for background.</p> <p>Alternatively, you can exert more control over the asset host by setting <code>asset_host</code> to a proc like this:</p> <pre class=\"ruby\">ActionController::Base.asset_host = Proc.new { |source|\n  \"http://assets#{Digest::MD5.hexdigest(source).to_i(16) % 2 + 1}.example.com\"\n}\nimage_tag(\"rails.png\")\n# =&gt; &lt;img alt=\"Rails\" src=\"http://assets1.example.com/assets/rails.png\" /&gt;\nstylesheet_link_tag(\"application\")\n# =&gt; &lt;link href=\"http://assets2.example.com/assets/application.css\" media=\"screen\" rel=\"stylesheet\" /&gt;\n</pre> <p>The example above generates “<a href=\"http://assets1.example.com\">assets1.example.com</a>” and “<a href=\"http://assets2.example.com\">assets2.example.com</a>”. This option is useful for example if you need fewer/more than four hosts, custom host names, etc.</p> <p>As you see the proc takes a <code>source</code> parameter. That's a string with the absolute path of the asset, for example “/assets/rails.png”.</p> <pre class=\"ruby\"> ActionController::Base.asset_host = Proc.new { |source|\n   if source.ends_with?('.css')\n     \"http://stylesheets.example.com\"\n   else\n     \"http://assets.example.com\"\n   end\n }\nimage_tag(\"rails.png\")\n# =&gt; &lt;img alt=\"Rails\" src=\"http://assets.example.com/assets/rails.png\" /&gt;\nstylesheet_link_tag(\"application\")\n# =&gt; &lt;link href=\"http://stylesheets.example.com/assets/application.css\" media=\"screen\" rel=\"stylesheet\" /&gt;\n</pre> <p>Alternatively you may ask for a second parameter <code>request</code>. That one is particularly useful for serving assets from an SSL-protected page. The example proc below disables asset hosting for HTTPS connections, while still sending assets for plain HTTP requests from asset hosts. If you don't have SSL certificates for each of the asset hosts this technique allows you to avoid warnings in the client about mixed media. Note that the request parameter might not be supplied, e.g. when the assets are precompiled via a Rake task. Make sure to use a Proc instead of a lambda, since a Proc allows missing parameters and sets them to nil.</p> <pre class=\"ruby\">config.action_controller.asset_host = Proc.new { |source, request|\n  if request &amp;&amp; request.ssl?\n    \"#{request.protocol}#{request.host_with_port}\"\n  else\n    \"#{request.protocol}assets.example.com\"\n  end\n}\n</pre> <p>You can also implement a custom asset host object that responds to <code>call</code> and takes either one or two parameters just like the proc.</p> <pre class=\"ruby\">config.action_controller.asset_host = AssetHostingWithMinimumSsl.new(\n  \"http://asset%d.example.com\", \"https://asset1.example.com\"\n)\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ASSET_EXTENSIONS\">ASSET_EXTENSIONS </dt>\n\n<dt id=\"ASSET_PUBLIC_DIRECTORIES\">ASSET_PUBLIC_DIRECTORIES </dt>\n<dd>\n<p>Maps asset types to public directory.</p> </dd>\n<dt id=\"URI_REGEXP\">URI_REGEXP </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-asset_path\"> <span class=\"method-name\">asset_path</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the path to asset in public directory. If :type options is set, a file extension will be appended and scoped to the corresponding public directory.</p> <p>All other asset *_path helpers delegate through this method.</p> <pre class=\"ruby\">asset_path \"application.js\"                     # =&gt; /assets/application.js\nasset_path \"application\", type: :javascript     # =&gt; /assets/application.js\nasset_path \"application\", type: :stylesheet     # =&gt; /assets/application.css\nasset_path \"http://www.example.com/js/xmlhr.js\" # =&gt; http://www.example.com/js/xmlhr.js\n</pre> <div class=\"method-source-code\" id=\"asset_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 123\ndef asset_path(source, options = {})\n  source = source.to_s\n  return \"\" unless source.present?\n  return source if source =~ URI_REGEXP\n\n  tail, source = source[/([\\?#].+)$/], source.sub(/([\\?#].+)$/, '')\n\n  if extname = compute_asset_extname(source, options)\n    source = \"#{source}#{extname}\"\n  end\n\n  if source[0] != ?/\n    source = compute_asset_path(source, options)\n  end\n\n  relative_url_root = defined?(config.relative_url_root) &amp;&amp; config.relative_url_root\n  if relative_url_root\n    source = File.join(relative_url_root, source) unless source.starts_with?(\"#{relative_url_root}/\")\n  end\n\n  if host = compute_asset_host(source, options)\n    source = File.join(host, source)\n  end\n\n  \"#{source}#{tail}\"\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-path_to_asset\">path_to_asset</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-asset_url\"> <span class=\"method-name\">asset_url</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the full URL to an asset in the public directory. This will use <code>asset_path</code> internally, so most of their behaviors will be the same. If :host options is set, it overwrites global <code>config.action_controller.asset_host</code> setting.</p> <p>All other options provided are forwarded to <code>asset_path</code> call.</p> <pre class=\"ruby\">asset_url \"application.js\"                                 # =&gt; http://example.com/assets/application.js\nasset_url \"application.js\", host: \"http://cdn.example.com\" # =&gt; http://cdn.example.com/assets/application.js\n</pre> <div class=\"method-source-code\" id=\"asset_url-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 161\ndef asset_url(source, options = {})\n  path_to_asset(source, options.merge(:protocol =&gt; :request))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-url_to_asset\">url_to_asset</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-audio_path\"> <span class=\"method-name\">audio_path</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the path to an audio asset in the public audios directory. Full paths from the document root will be passed through. Used internally by <code>audio_tag</code> to build the audio path.</p> <pre class=\"ruby\">audio_path(\"horse\")                                            # =&gt; /audios/horse\naudio_path(\"horse.wav\")                                        # =&gt; /audios/horse.wav\naudio_path(\"sounds/horse.wav\")                                 # =&gt; /audios/sounds/horse.wav\naudio_path(\"/sounds/horse.wav\")                                # =&gt; /sounds/horse.wav\naudio_path(\"http://www.example.com/sounds/horse.wav\")          # =&gt; http://www.example.com/sounds/horse.wav\n</pre> <div class=\"method-source-code\" id=\"audio_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 333\ndef audio_path(source, options = {})\n  path_to_asset(source, {type: :audio}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-path_to_audio\">path_to_audio</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-audio_url\"> <span class=\"method-name\">audio_url</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the full URL to an audio asset in the public audios directory. This will use <code>audio_path</code> internally, so most of their behaviors will be the same.</p> <div class=\"method-source-code\" id=\"audio_url-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 340\ndef audio_url(source, options = {})\n  url_to_asset(source, {type: :audio}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-url_to_audio\">url_to_audio</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compute_asset_extname\"> <span class=\"method-name\">compute_asset_extname</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Compute extname to append to asset path. Returns nil if nothing should be added.</p> <div class=\"method-source-code\" id=\"compute_asset_extname-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 173\ndef compute_asset_extname(source, options = {})\n  return if options[:extname] == false\n  extname = options[:extname] || ASSET_EXTENSIONS[options[:type]]\n  extname if extname &amp;&amp; File.extname(source) != extname\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compute_asset_host\"> <span class=\"method-name\">compute_asset_host</span><span class=\"method-args\">(source = \"\", options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Pick an asset host for this source. Returns <code>nil</code> if no host is set, the host if no wildcard is set, the host interpolated with the numbers 0-3 if it contains <code>%d</code> (the number is the source hash mod 4), or the value returned from invoking call on an object responding to call (proc or otherwise).</p> <div class=\"method-source-code\" id=\"compute_asset_host-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 202\ndef compute_asset_host(source = \"\", options = {})\n  request = self.request if respond_to?(:request)\n  host = options[:host]\n  host ||= config.asset_host if defined? config.asset_host\n\n  if host.respond_to?(:call)\n    arity = host.respond_to?(:arity) ? host.arity : host.method(:call).arity\n    args = [source]\n    args &lt;&lt; request if request &amp;&amp; (arity &gt; 1 || arity &lt; 0)\n    host = host.call(*args)\n  elsif host =~ /%d/\n    host = host % (Zlib.crc32(source) % 4)\n  end\n\n  host ||= request.base_url if request &amp;&amp; options[:protocol] == :request\n  return unless host\n\n  if host =~ URI_REGEXP\n    host\n  else\n    protocol = options[:protocol] || config.default_asset_host_protocol || (request ? :request : :relative)\n    case protocol\n    when :relative\n      \"//#{host}\"\n    when :request\n      \"#{request.protocol}#{host}\"\n    else\n      \"#{protocol}://#{host}\"\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compute_asset_path\"> <span class=\"method-name\">compute_asset_path</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes asset path to public directory. Plugins and extensions can override this method to point to custom assets or generate digested paths or query strings.</p> <div class=\"method-source-code\" id=\"compute_asset_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 192\ndef compute_asset_path(source, options = {})\n  dir = ASSET_PUBLIC_DIRECTORIES[options[:type]] || \"\"\n  File.join(dir, source)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-font_path\"> <span class=\"method-name\">font_path</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the path to a font asset. Full paths from the document root will be passed through.</p> <pre class=\"ruby\">font_path(\"font\")                                           # =&gt; /fonts/font\nfont_path(\"font.ttf\")                                       # =&gt; /fonts/font.ttf\nfont_path(\"dir/font.ttf\")                                   # =&gt; /fonts/dir/font.ttf\nfont_path(\"/dir/font.ttf\")                                  # =&gt; /dir/font.ttf\nfont_path(\"http://www.example.com/dir/font.ttf\")            # =&gt; http://www.example.com/dir/font.ttf\n</pre> <div class=\"method-source-code\" id=\"font_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 353\ndef font_path(source, options = {})\n  path_to_asset(source, {type: :font}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-path_to_font\">path_to_font</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-font_url\"> <span class=\"method-name\">font_url</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the full URL to a font asset. This will use <code>font_path</code> internally, so most of their behaviors will be the same.</p> <div class=\"method-source-code\" id=\"font_url-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 360\ndef font_url(source, options = {})\n  url_to_asset(source, {type: :font}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-url_to_font\">url_to_font</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-image_path\"> <span class=\"method-name\">image_path</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the path to an image asset. Full paths from the document root will be passed through. Used internally by <code>image_tag</code> to build the image path:</p> <pre class=\"ruby\">image_path(\"edit\")                                         # =&gt; \"/assets/edit\"\nimage_path(\"edit.png\")                                     # =&gt; \"/assets/edit.png\"\nimage_path(\"icons/edit.png\")                               # =&gt; \"/assets/icons/edit.png\"\nimage_path(\"/icons/edit.png\")                              # =&gt; \"/icons/edit.png\"\nimage_path(\"http://www.example.com/img/edit.png\")          # =&gt; \"http://www.example.com/img/edit.png\"\n</pre> <p>If you have images as application resources this method may conflict with their named routes. The alias <code>path_to_image</code> is provided to avoid that. Rails uses the alias internally, and plugin authors are encouraged to do so.</p> <div class=\"method-source-code\" id=\"image_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 291\ndef image_path(source, options = {})\n  path_to_asset(source, {type: :image}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-path_to_image\">path_to_image</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-image_url\"> <span class=\"method-name\">image_url</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the full URL to an image asset. This will use <code>image_path</code> internally, so most of their behaviors will be the same.</p> <div class=\"method-source-code\" id=\"image_url-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 298\ndef image_url(source, options = {})\n  url_to_asset(source, {type: :image}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-url_to_image\">url_to_image</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-javascript_path\"> <span class=\"method-name\">javascript_path</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the path to a JavaScript asset in the public javascripts directory. If the <code>source</code> filename has no extension, .js will be appended (except for explicit URIs) Full paths from the document root will be passed through. Used internally by <code>javascript_include_tag</code> to build the script path.</p> <pre class=\"ruby\">javascript_path \"xmlhr\"                              # =&gt; /assets/xmlhr.js\njavascript_path \"dir/xmlhr.js\"                       # =&gt; /assets/dir/xmlhr.js\njavascript_path \"/dir/xmlhr\"                         # =&gt; /dir/xmlhr.js\njavascript_path \"http://www.example.com/js/xmlhr\"    # =&gt; http://www.example.com/js/xmlhr\njavascript_path \"http://www.example.com/js/xmlhr.js\" # =&gt; http://www.example.com/js/xmlhr.js\n</pre> <div class=\"method-source-code\" id=\"javascript_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 244\ndef javascript_path(source, options = {})\n  path_to_asset(source, {type: :javascript}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-path_to_javascript\">path_to_javascript</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-javascript_url\"> <span class=\"method-name\">javascript_url</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the full URL to a JavaScript asset in the public javascripts directory. This will use <code>javascript_path</code> internally, so most of their behaviors will be the same.</p> <div class=\"method-source-code\" id=\"javascript_url-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 251\ndef javascript_url(source, options = {})\n  url_to_asset(source, {type: :javascript}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-url_to_javascript\">url_to_javascript</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-path_to_asset\"> <span class=\"method-name\">path_to_asset</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-asset_path\">asset_path</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-path_to_audio\"> <span class=\"method-name\">path_to_audio</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-audio_path\">audio_path</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-path_to_font\"> <span class=\"method-name\">path_to_font</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-font_path\">font_path</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-path_to_image\"> <span class=\"method-name\">path_to_image</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-image_path\">image_path</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-path_to_javascript\"> <span class=\"method-name\">path_to_javascript</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-javascript_path\">javascript_path</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-path_to_stylesheet\"> <span class=\"method-name\">path_to_stylesheet</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-stylesheet_path\">stylesheet_path</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-path_to_video\"> <span class=\"method-name\">path_to_video</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-video_path\">video_path</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stylesheet_path\"> <span class=\"method-name\">stylesheet_path</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the path to a stylesheet asset in the public stylesheets directory. If the <code>source</code> filename has no extension, .css will be appended (except for explicit URIs). Full paths from the document root will be passed through. Used internally by <code>stylesheet_link_tag</code> to build the stylesheet path.</p> <pre class=\"ruby\">stylesheet_path \"style\"                                  # =&gt; /assets/style.css\nstylesheet_path \"dir/style.css\"                          # =&gt; /assets/dir/style.css\nstylesheet_path \"/dir/style.css\"                         # =&gt; /dir/style.css\nstylesheet_path \"http://www.example.com/css/style\"       # =&gt; http://www.example.com/css/style\nstylesheet_path \"http://www.example.com/css/style.css\"   # =&gt; http://www.example.com/css/style.css\n</pre> <div class=\"method-source-code\" id=\"stylesheet_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 266\ndef stylesheet_path(source, options = {})\n  path_to_asset(source, {type: :stylesheet}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-path_to_stylesheet\">path_to_stylesheet</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stylesheet_url\"> <span class=\"method-name\">stylesheet_url</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the full URL to a stylesheet asset in the public stylesheets directory. This will use <code>stylesheet_path</code> internally, so most of their behaviors will be the same.</p> <div class=\"method-source-code\" id=\"stylesheet_url-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 273\ndef stylesheet_url(source, options = {})\n  url_to_asset(source, {type: :stylesheet}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-url_to_stylesheet\">url_to_stylesheet</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-url_to_asset\"> <span class=\"method-name\">url_to_asset</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-asset_url\">asset_url</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-url_to_audio\"> <span class=\"method-name\">url_to_audio</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-audio_url\">audio_url</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-url_to_font\"> <span class=\"method-name\">url_to_font</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-font_url\">font_url</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-url_to_image\"> <span class=\"method-name\">url_to_image</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-image_url\">image_url</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-url_to_javascript\"> <span class=\"method-name\">url_to_javascript</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-javascript_url\">javascript_url</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-url_to_stylesheet\"> <span class=\"method-name\">url_to_stylesheet</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-stylesheet_url\">stylesheet_url</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-url_to_video\"> <span class=\"method-name\">url_to_video</span><span class=\"method-args\">(source, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"asseturlhelper#method-i-video_url\">video_url</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-video_path\"> <span class=\"method-name\">video_path</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the path to a video asset in the public videos directory. Full paths from the document root will be passed through. Used internally by <code>video_tag</code> to build the video path.</p> <pre class=\"ruby\">video_path(\"hd\")                                            # =&gt; /videos/hd\nvideo_path(\"hd.avi\")                                        # =&gt; /videos/hd.avi\nvideo_path(\"trailers/hd.avi\")                               # =&gt; /videos/trailers/hd.avi\nvideo_path(\"/trailers/hd.avi\")                              # =&gt; /trailers/hd.avi\nvideo_path(\"http://www.example.com/vid/hd.avi\")             # =&gt; http://www.example.com/vid/hd.avi\n</pre> <div class=\"method-source-code\" id=\"video_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 312\ndef video_path(source, options = {})\n  path_to_asset(source, {type: :video}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-path_to_video\">path_to_video</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-video_url\"> <span class=\"method-name\">video_url</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Computes the full URL to a video asset in the public videos directory. This will use <code>video_path</code> internally, so most of their behaviors will be the same.</p> <div class=\"method-source-code\" id=\"video_url-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/asset_url_helper.rb, line 319\ndef video_url(source, options = {})\n  url_to_asset(source, {type: :video}.merge!(options))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"asseturlhelper#method-i-url_to_video\">url_to_video</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/atomfeedhelper":"<h1 id=\"module-ActionView::Helpers::AtomFeedHelper\" class=\"module\"> module ActionView::Helpers::AtomFeedHelper </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-atom_feed\"> <span class=\"method-name\">atom_feed</span><span class=\"method-args\">(options = {}) { |atom_feed_builder| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds easy defaults to writing Atom feeds with the Builder template engine (this does not work on <a href=\"../../erb\">ERB</a> or any other template languages).</p> <p>Full usage example:</p> <pre>config/routes.rb:\n  Rails.application.routes.draw do\n    resources :posts\n    root to: \"posts#index\"\n  end\n\napp/controllers/posts_controller.rb:\n  class PostsController &lt; ApplicationController::Base\n    # GET /posts.html\n    # GET /posts.atom\n    def index\n      @posts = Post.all\n\n      respond_to do |format|\n        format.html\n        format.atom\n      end\n    end\n  end\n\napp/views/posts/index.atom.builder:\n  atom_feed do |feed|\n    feed.title(\"My great blog!\")\n    feed.updated(@posts[0].created_at) if @posts.length &gt; 0\n\n    @posts.each do |post|\n      feed.entry(post) do |entry|\n        entry.title(post.title)\n        entry.content(post.body, type: 'html')\n\n        entry.author do |author|\n          author.name(\"DHH\")\n        end\n      end\n    end\n  end</pre> <p>The options for <a href=\"atomfeedhelper#method-i-atom_feed\">#atom_feed</a> are:</p> <ul>\n<li> <p><code>:language</code>: Defaults to “en-US”.</p> </li>\n<li> <p><code>:root_url</code>: The HTML alternative that this feed is doubling for. Defaults to / on the current host.</p> </li>\n<li> <p><code>:url</code>: The URL for this feed. Defaults to the current URL.</p> </li>\n<li> <p><code>:id</code>: The id for this feed. Defaults to “tag:#{request.host},#{<a href=\"#\">options</a>}:#{<a href=\"0\">request.fullpath.split(”.“)</a>}”</p> </li>\n<li> <p><code>:schema_date</code>: The date at which the tag scheme for the feed was first used. A good default is the year you created the feed. See <a href=\"http://feedvalidator.org/docs/error/InvalidTAG.html\">feedvalidator.org/docs/error/InvalidTAG.html</a> for more information. If not specified, 2005 is used (as an “I don't care” value).</p> </li>\n<li> <p><code>:instruct</code>: <a href=\"../../hash\">Hash</a> of XML processing instructions in the form {target =&gt; {attribute =&gt; value, }} or {target =&gt; [{attribute =&gt; value, }, ]}</p> </li>\n</ul> <p>Other namespaces can be added to the root element:</p> <pre>app/views/posts/index.atom.builder:\n  atom_feed({'xmlns:app' =&gt; 'http://www.w3.org/2007/app',\n      'xmlns:openSearch' =&gt; 'http://a9.com/-/spec/opensearch/1.1/'}) do |feed|\n    feed.title(\"My great blog!\")\n    feed.updated((@posts.first.created_at))\n    feed.tag!('openSearch:totalResults', 10)\n\n    @posts.each do |post|\n      feed.entry(post) do |entry|\n        entry.title(post.title)\n        entry.content(post.body, type: 'html')\n        entry.tag!('app:edited', Time.now)\n\n        entry.author do |author|\n          author.name(\"DHH\")\n        end\n      end\n    end\n  end</pre> <p>The Atom spec defines five elements (content rights title subtitle summary) which may directly contain xhtml content if type: 'xhtml' is specified as an attribute. If so, this helper will take care of the enclosing div and xhtml namespace declaration. Example usage:</p> <pre class=\"ruby\">entry.summary type: 'xhtml' do |xhtml|\n  xhtml.p pluralize(order.line_items.count, \"line item\")\n  xhtml.p \"Shipped to #{order.address}\"\n  xhtml.p \"Paid by #{order.pay_type}\"\nend\n</pre> <p><code>atom_feed</code> yields an <code>AtomFeedBuilder</code> instance. Nested elements yield an <code>AtomBuilder</code> instance.</p> <div class=\"method-source-code\" id=\"atom_feed-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/atom_feed_helper.rb, line 96\ndef atom_feed(options = {}, &amp;block)\n  if options[:schema_date]\n    options[:schema_date] = options[:schema_date].strftime(\"%Y-%m-%d\") if options[:schema_date].respond_to?(:strftime)\n  else\n    options[:schema_date] = \"2005\" # The Atom spec copyright date\n  end\n\n  xml = options.delete(:xml) || eval(\"xml\", block.binding)\n  xml.instruct!\n  if options[:instruct]\n    options[:instruct].each do |target,attrs|\n      if attrs.respond_to?(:keys)\n        xml.instruct!(target, attrs)\n      elsif attrs.respond_to?(:each)\n        attrs.each { |attr_group| xml.instruct!(target, attr_group) }\n      end\n    end\n  end\n\n  feed_opts = {\"xml:lang\" =&gt; options[:language] || \"en-US\", \"xmlns\" =&gt; 'http://www.w3.org/2005/Atom'}\n  feed_opts.merge!(options).reject!{|k,v| !k.to_s.match(/^xml/)}\n\n  xml.feed(feed_opts) do\n    xml.id(options[:id] || \"tag:#{request.host},#{options[:schema_date]}:#{request.fullpath.split(\".\")[0]}\")\n    xml.link(:rel =&gt; 'alternate', :type =&gt; 'text/html', :href =&gt; options[:root_url] || (request.protocol + request.host_with_port))\n    xml.link(:rel =&gt; 'self', :type =&gt; 'application/atom+xml', :href =&gt; options[:url] || request.url)\n\n    yield AtomFeedBuilder.new(xml, self, options)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/cachehelper":"<h1 id=\"module-ActionView::Helpers::CacheHelper\" class=\"module\"> module ActionView::Helpers::CacheHelper </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cache\"> <span class=\"method-name\">cache</span><span class=\"method-args\">(name = {}, options = nil) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This helper exposes a method for caching fragments of a view rather than an entire action or page. This technique is useful caching pieces like menus, lists of new topics, static HTML fragments, and so on. This method takes a block that contains the content you wish to cache.</p> <p>The best way to use this is by doing key-based cache expiration on top of a cache store like Memcached that'll automatically kick out old entries. For more on key-based expiration, see: <a href=\"http://signalvnoise.com/posts/3113-how-key-based-cache-expiration-works\">signalvnoise.com/posts/3113-how-key-based-cache-expiration-works</a></p> <p>When using this method, you list the cache dependency as the name of the cache, like so:</p> <pre>&lt;% cache project do %&gt;\n  &lt;b&gt;All the topics on this project&lt;/b&gt;\n  &lt;%= render project.topics %&gt;\n&lt;% end %&gt;</pre> <p>This approach will assume that when a new topic is added, you'll touch the project. The cache key generated from this call will be something like:</p> <pre>views/projects/123-20120806214154/7a1156131a6928cb0026877f8b749ac9\n      ^class   ^id ^updated_at    ^template tree digest</pre> <p>The cache is thus automatically bumped whenever the project updated_at is touched.</p> <p>If your template cache depends on multiple sources (try to avoid this to keep things simple), you can name all these dependencies as part of an array:</p> <pre>&lt;% cache [ project, current_user ] do %&gt;\n  &lt;b&gt;All the topics on this project&lt;/b&gt;\n  &lt;%= render project.topics %&gt;\n&lt;% end %&gt;</pre> <p>This will include both records as part of the cache key and updating either of them will expire the cache.</p> <h4 id=\"method-i-cache-label-Template+digest\">\n<a href=\"../template\">Template</a> digest</h4> <p>The template digest that's added to the cache key is computed by taking an md5 of the contents of the entire template file. This ensures that your caches will automatically expire when you change the template file.</p> <p>Note that the md5 is taken of the entire template file, not just what's within the cache do/end call. So it's possible that changing something outside of that call will still expire the cache.</p> <p>Additionally, the digestor will automatically look through your template file for explicit and implicit dependencies, and include those as part of the digest.</p> <p>The digestor can be bypassed by passing skip_digest: true as an option to the cache call:</p> <pre>&lt;% cache project, skip_digest: true do %&gt;\n  &lt;b&gt;All the topics on this project&lt;/b&gt;\n  &lt;%= render project.topics %&gt;\n&lt;% end %&gt;</pre> <h4 id=\"method-i-cache-label-Implicit+dependencies\">Implicit dependencies</h4> <p>Most template dependencies can be derived from calls to render in the template itself. Here are some examples of render calls that Cache Digests knows how to decode:</p> <pre>render partial: \"comments/comment\", collection: commentable.comments\nrender \"comments/comments\"\nrender 'comments/comments'\nrender('comments/comments')\n\nrender \"header\" =&gt; render(\"comments/header\")\n\nrender(@topic)         =&gt; render(\"topics/topic\")\nrender(topics)         =&gt; render(\"topics/topic\")\nrender(message.topics) =&gt; render(\"topics/topic\")</pre> <p>It's not possible to derive all render calls like that, though. Here are a few examples of things that can't be derived:</p> <pre class=\"ruby\">render group_of_attachments\nrender @project.documents.where(published: true).order('created_at')\n</pre> <p>You will have to rewrite those to the explicit form:</p> <pre class=\"ruby\">render partial: 'attachments/attachment', collection: group_of_attachments\nrender partial: 'documents/document', collection: @project.documents.where(published: true).order('created_at')\n</pre> <h3 id=\"method-i-cache-label-Explicit+dependencies\">Explicit dependencies</h3> <p>Some times you'll have template dependencies that can't be derived at all. This is typically the case when you have template rendering that happens in helpers. Here's an example:</p> <pre>&lt;%= render_sortable_todolists @project.todolists %&gt;</pre> <p>You'll need to use a special comment format to call those out:</p> <pre>&lt;%# Template Dependency: todolists/todolist %&gt;\n&lt;%= render_sortable_todolists @project.todolists %&gt;</pre> <p>The pattern used to match these is /# <a href=\"../template\">Template</a> Dependency: ([^ ]+)/, so it's important that you type it out just so. You can only declare one template dependency per line.</p> <h3 id=\"method-i-cache-label-External+dependencies\">External dependencies</h3> <p>If you use a helper method, for example, inside of a cached block and you then update that helper, you'll have to bump the cache as well. It doesn't really matter how you do it, but the md5 of the template file must change. One recommendation is to simply be explicit in a comment, like:</p> <pre>&lt;%# Helper Dependency Updated: May 6, 2012 at 6pm %&gt;\n&lt;%= some_helper_method(person) %&gt;</pre> <p>Now all you'll have to do is change that timestamp when the helper method changes.</p> <div class=\"method-source-code\" id=\"cache-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/cache_helper.rb, line 113\ndef cache(name = {}, options = nil, &amp;block)\n  if controller.respond_to?(:perform_caching) &amp;&amp; controller.perform_caching\n    safe_concat(fragment_for(cache_fragment_name(name, options), options, &amp;block))\n  else\n    yield\n  end\n\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cache_fragment_name\"> <span class=\"method-name\">cache_fragment_name</span><span class=\"method-args\">(name = {}, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This helper returns the name of a cache key for a given fragment cache call. By supplying skip_digest: true to cache, the digestion of cache fragments can be manually bypassed. This is useful when cache fragments cannot be manually expired unless you know the exact key which is the case when using memcached.</p> <div class=\"method-source-code\" id=\"cache_fragment_name-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/cache_helper.rb, line 154\ndef cache_fragment_name(name = {}, options = nil)\n  skip_digest = options &amp;&amp; options[:skip_digest]\n\n  if skip_digest\n    name\n  else\n    fragment_name_with_digest(name)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cache_if\"> <span class=\"method-name\">cache_if</span><span class=\"method-args\">(condition, name = {}, options = nil) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Cache fragments of a view if <code>condition</code> is true</p> <pre>&lt;% cache_if admin?, project do %&gt;\n  &lt;b&gt;All the topics on this project&lt;/b&gt;\n  &lt;%= render project.topics %&gt;\n&lt;% end %&gt;</pre> <div class=\"method-source-code\" id=\"cache_if-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/cache_helper.rb, line 129\ndef cache_if(condition, name = {}, options = nil, &amp;block)\n  if condition\n    cache(name, options, &amp;block)\n  else\n    yield\n  end\n\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cache_unless\"> <span class=\"method-name\">cache_unless</span><span class=\"method-args\">(condition, name = {}, options = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Cache fragments of a view unless <code>condition</code> is true</p> <pre>&lt;% cache_unless admin?, project do %&gt;\n  &lt;b&gt;All the topics on this project&lt;/b&gt;\n  &lt;%= render project.topics %&gt;\n&lt;% end %&gt;</pre> <div class=\"method-source-code\" id=\"cache_unless-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/cache_helper.rb, line 145\ndef cache_unless(condition, name = {}, options = nil, &amp;block)\n  cache_if !condition, name, options, &amp;block\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/capturehelper":"<h1 id=\"module-ActionView::Helpers::CaptureHelper\" class=\"module\"> module ActionView::Helpers::CaptureHelper </h1> <section class=\"description\"> <p><a href=\"capturehelper\">CaptureHelper</a> exposes methods to let you extract generated markup which can be used in other parts of a template or layout file.</p> <p>It provides a method to capture blocks into variables through capture and a way to capture a block of markup for use in a layout through content_for.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-capture\"> <span class=\"method-name\">capture</span><span class=\"method-args\">(*args) { |*args| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The capture method allows you to extract part of a template into a variable. You can then use this variable anywhere in your templates or layout.</p> <p>The capture method can be used in <a href=\"../../erb\">ERB</a> templates…</p> <pre>&lt;% @greeting = capture do %&gt;\n  Welcome to my shiny new web page!  The date and time is\n  &lt;%= Time.now %&gt;\n&lt;% end %&gt;</pre> <p>…and Builder (RXML) templates.</p> <pre class=\"ruby\">@timestamp = capture do\n  \"The current timestamp is #{Time.now}.\"\nend\n</pre> <p>You can then use that variable anywhere else. For example:</p> <pre>&lt;html&gt;\n&lt;head&gt;&lt;title&gt;&lt;%= @greeting %&gt;&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;b&gt;&lt;%= @greeting %&gt;&lt;/b&gt;\n&lt;/body&gt;&lt;/html&gt;</pre> <div class=\"method-source-code\" id=\"capture-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/capture_helper.rb, line 36\ndef capture(*args)\n  value = nil\n  buffer = with_output_buffer { value = yield(*args) }\n  if string = buffer.presence || value and string.is_a?(String)\n    ERB::Util.html_escape string\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_for\"> <span class=\"method-name\">content_for</span><span class=\"method-args\">(name, content = nil, options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calling <a href=\"capturehelper#method-i-content_for\">#content_for</a> stores a block of markup in an identifier for later use. In order to access this stored content in other templates, helper modules or the layout, you would pass the identifier as an argument to <code>content_for</code>.</p> <p>Note: <code>yield</code> can still be used to retrieve the stored content, but calling <code>yield</code> doesn't work in helper modules, while <code>content_for</code> does.</p> <pre>&lt;% content_for :not_authorized do %&gt;\n  alert('You are not authorized to do that!')\n&lt;% end %&gt;</pre> <p>You can then use <code>content_for :not_authorized</code> anywhere in your templates.</p> <pre>&lt;%= content_for :not_authorized if current_user.nil? %&gt;</pre> <p>This is equivalent to:</p> <pre>&lt;%= yield :not_authorized if current_user.nil? %&gt;</pre> <p><code>content_for</code>, however, can also be used in helper modules.</p> <pre class=\"ruby\">module StorageHelper\n  def stored_content\n    content_for(:storage) || \"Your storage is empty\"\n  end\nend\n</pre> <p>This helper works just like normal helpers.</p> <pre>&lt;%= stored_content %&gt;</pre> <p>You can also use the <code>yield</code> syntax alongside an existing call to <code>yield</code> in a layout. For example:</p> <pre>&lt;%# This is the layout %&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;My Website&lt;/title&gt;\n  &lt;%= yield :script %&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;%= yield %&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre> <p>And now, we'll create a view that has a <code>content_for</code> call that creates the <code>script</code> identifier.</p> <pre>&lt;%# This is our view %&gt;\nPlease login!\n\n&lt;% content_for :script do %&gt;\n  &lt;script&gt;alert('You are not authorized to view this page!')&lt;/script&gt;\n&lt;% end %&gt;</pre> <p>Then, in another view, you could to do something like this:</p> <pre>&lt;%= link_to 'Logout', action: 'logout', remote: true %&gt;\n\n&lt;% content_for :script do %&gt;\n  &lt;%= javascript_include_tag :defaults %&gt;\n&lt;% end %&gt;</pre> <p>That will place <code>script</code> tags for your default set of JavaScript files on the page; this technique is useful if you'll only be using these scripts in a few views.</p> <p>Note that <a href=\"capturehelper#method-i-content_for\">#content_for</a> concatenates (default) the blocks it is given for a particular identifier in order. For example:</p> <pre> &lt;% content_for :navigation do %&gt;\n   &lt;li&gt;&lt;%= link_to 'Home', action: 'index' %&gt;&lt;/li&gt;\n &lt;% end %&gt;\n\nAnd in other place:\n\n &lt;% content_for :navigation do %&gt;\n   &lt;li&gt;&lt;%= link_to 'Login', action: 'login' %&gt;&lt;/li&gt;\n &lt;% end %&gt;</pre> <p>Then, in another template or layout, this code would render both links in order:</p> <pre>&lt;ul&gt;&lt;%= content_for :navigation %&gt;&lt;/ul&gt;</pre> <p>If the flush parameter is true <a href=\"capturehelper#method-i-content_for\">#content_for</a> replaces the blocks it is given. For example:</p> <pre>&lt;% content_for :navigation do %&gt;\n  &lt;li&gt;&lt;%= link_to 'Home', action: 'index' %&gt;&lt;/li&gt;\n&lt;% end %&gt;\n\n&lt;%#  Add some other content, or use a different template: %&gt;\n\n&lt;% content_for :navigation, flush: true do %&gt;\n  &lt;li&gt;&lt;%= link_to 'Login', action: 'login' %&gt;&lt;/li&gt;\n&lt;% end %&gt;</pre> <p>Then, in another template or layout, this code would render only the last link:</p> <pre>&lt;ul&gt;&lt;%= content_for :navigation %&gt;&lt;/ul&gt;</pre> <p>Lastly, simple content can be passed as a parameter:</p> <pre>&lt;% content_for :script, javascript_include_tag(:defaults) %&gt;</pre> <p>WARNING: <a href=\"capturehelper#method-i-content_for\">#content_for</a> is ignored in caches. So you shouldn't use it for elements that will be fragment cached.</p> <div class=\"method-source-code\" id=\"content_for-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/capture_helper.rb, line 148\ndef content_for(name, content = nil, options = {}, &amp;block)\n  if content || block_given?\n    if block_given?\n      options = content if content\n      content = capture(&amp;block)\n    end\n    if content\n      options[:flush] ? @view_flow.set(name, content) : @view_flow.append(name, content)\n    end\n    nil\n  else\n    @view_flow.get(name).presence\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_for-3F\"> <span class=\"method-name\">content_for?</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"capturehelper#method-i-content_for\">#content_for</a>? checks whether any content has been captured yet using `content_for`. Useful to render parts of your layout differently based on what is in your views.</p> <pre>&lt;%# This is the layout %&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;My Website&lt;/title&gt;\n  &lt;%= yield :script %&gt;\n&lt;/head&gt;\n&lt;body class=\"&lt;%= content_for?(:right_col) ? 'two-column' : 'one-column' %&gt;\"&gt;\n  &lt;%= yield %&gt;\n  &lt;%= yield :right_col %&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre> <div class=\"method-source-code\" id=\"content_for-3F-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/capture_helper.rb, line 188\ndef content_for?(name)\n  @view_flow.get(name).present?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-provide\"> <span class=\"method-name\">provide</span><span class=\"method-args\">(name, content = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The same as <code>content_for</code> but when used with streaming flushes straight back to the layout. In other words, if you want to concatenate several times to the same buffer when rendering a given template, you should use <code>content_for</code>, if not, use <code>provide</code> to tell the layout to stop looking for more contents.</p> <div class=\"method-source-code\" id=\"provide-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/capture_helper.rb, line 168\ndef provide(name, content = nil, &amp;block)\n  content = capture(&amp;block) if block_given?\n  result = @view_flow.append!(name, content) if content\n  result unless content\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/csrfhelper":"<h1 id=\"module-ActionView::Helpers::CsrfHelper\" class=\"module\"> module ActionView::Helpers::CsrfHelper </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-csrf_meta_tag\"> <span class=\"method-name\">csrf_meta_tag</span><span class=\"method-args\">()</span> </div> <div class=\"method-description\"> <p>For backwards compatibility.</p> </div> <div class=\"aliases\"> Alias for: <a href=\"csrfhelper#method-i-csrf_meta_tags\">csrf_meta_tags</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-csrf_meta_tags\"> <span class=\"method-name\">csrf_meta_tags</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns meta tags “csrf-param” and “csrf-token” with the name of the cross-site request forgery protection parameter and token, respectively.</p> <pre>&lt;head&gt;\n  &lt;%= csrf_meta_tags %&gt;\n&lt;/head&gt;</pre> <p>These are used to generate the dynamic forms that implement non-remote links with <code>:method</code>.</p> <p>You don't need to use these tags for regular forms as they generate their own hidden fields.</p> <p>For AJAX requests other than GETs, extract the “csrf-token” from the meta-tag and send as the “X-CSRF-Token” HTTP header. If you are using jQuery with jquery-rails this happens automatically.</p> <div class=\"method-source-code\" id=\"csrf_meta_tags-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/csrf_helper.rb, line 20\ndef csrf_meta_tags\n  if protect_against_forgery?\n    [\n      tag('meta', :name =&gt; 'csrf-param', :content =&gt; request_forgery_protection_token),\n      tag('meta', :name =&gt; 'csrf-token', :content =&gt; form_authenticity_token)\n    ].join(\"\\n\").html_safe\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"csrfhelper#method-i-csrf_meta_tag\">csrf_meta_tag</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/datehelper":"<h1 id=\"module-ActionView::Helpers::DateHelper\" class=\"module\"> module ActionView::Helpers::DateHelper </h1> <section class=\"description\"> <h1 id=\"module-ActionView::Helpers::DateHelper-label-Action+View+Date+Helpers\">Action View <a href=\"../../date\">Date</a> <a href=\"../helpers\">Helpers</a>\n</h1> <p>The <a href=\"../../date\">Date</a> Helper primarily creates select/option tags for different kinds of dates and times or date and time elements. All of the select-type methods share a number of common options that are as follows:</p> <ul>\n<li> <p><code>:prefix</code> - overwrites the default prefix of “date” used for the select names. So specifying “birthday” would give birthday[month] instead of date[month] if passed to the <code>select_month</code> method.</p> </li>\n<li> <p><code>:include_blank</code> - set to true if it should be possible to set an empty date.</p> </li>\n<li> <p><code>:discard_type</code> - set to true if you want to discard the type part of the select name. If set to true, the <code>select_month</code> method would use simply “date” (which can be overwritten using <code>:prefix</code>) instead of date[month].</p> </li>\n</ul> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"MINUTES_IN_QUARTER_YEAR\">MINUTES_IN_QUARTER_YEAR </dt>\n\n<dt id=\"MINUTES_IN_THREE_QUARTERS_YEAR\">MINUTES_IN_THREE_QUARTERS_YEAR </dt>\n\n<dt id=\"MINUTES_IN_YEAR\">MINUTES_IN_YEAR </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-date_select\"> <span class=\"method-name\">date_select</span><span class=\"method-args\">(object_name, method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a set of select tags (one for year, month, and day) pre-selected for accessing a specified date-based attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>).</p> <h4 id=\"method-i-date_select-label-Options\">Options</h4> <ul>\n<li> <p><code>:use_month_numbers</code> - Set to true if you want to use month numbers rather than month names (e.g. “2” instead of “February”).</p> </li>\n<li> <p><code>:use_two_digit_numbers</code> - Set to true if you want to display two digit month and day numbers (e.g. “02” instead of “February” and “08” instead of “8”).</p> </li>\n<li> <p><code>:use_short_month</code> - Set to true if you want to use abbreviated month names instead of full month names (e.g. “Feb” instead of “February”).</p> </li>\n<li> <p><code>:add_month_numbers</code> - Set to true if you want to use both month numbers and month names (e.g. “2 - February” instead of “February”).</p> </li>\n<li> <p><code>:use_month_names</code> - Set to an array with 12 month names if you want to customize month names. Note: You can also use Rails' i18n functionality for this.</p> </li>\n<li> <p><code>:month_format_string</code> - Set to a format string. The string gets passed keys <code>:number</code> (integer) and <code>:name</code> (string). A format string would be something like “%{name} (%&lt;number&gt;02d)” for example. See <code>Kernel.sprintf</code> for documentation on format sequences.</p> </li>\n<li> <p><code>:date_separator</code> - Specifies a string to separate the date fields. Default is “” (i.e. nothing).</p> </li>\n<li> <p><code>:start_year</code> - Set the start year for the year select. Default is <code>Date.today.year - 5</code> if you are creating new record. While editing existing record, <code>:start_year</code> defaults to the current selected year minus 5.</p> </li>\n<li> <p><code>:end_year</code> - Set the end year for the year select. Default is <code>Date.today.year + 5</code> if you are creating new record. While editing existing record, <code>:end_year</code> defaults to the current selected year plus 5.</p> </li>\n<li> <p><code>:discard_day</code> - Set to true if you don't want to show a day select. This includes the day as a hidden field instead of showing a select field. Also note that this implicitly sets the day to be the first of the given month in order to not create invalid dates like 31 February.</p> </li>\n<li> <p><code>:discard_month</code> - Set to true if you don't want to show a month select. This includes the month as a hidden field instead of showing a select field. Also note that this implicitly sets :discard_day to true.</p> </li>\n<li> <p><code>:discard_year</code> - Set to true if you don't want to show a year select. This includes the year as a hidden field instead of showing a select field.</p> </li>\n<li> <p><code>:order</code> - Set to an array containing <code>:day</code>, <code>:month</code> and <code>:year</code> to customize the order in which the select fields are shown. If you leave out any of the symbols, the respective select will not be shown (like when you set <code>discard_xxx: true</code>. Defaults to the order defined in the respective locale (e.g. [:year, :month, :day] in the en locale that ships with Rails).</p> </li>\n<li> <p><code>:include_blank</code> - Include a blank option in every select field so it's possible to set empty dates.</p> </li>\n<li> <p><code>:default</code> - Set a default date if the affected date isn't set or is nil.</p> </li>\n<li> <p><code>:selected</code> - Set a date that overrides the actual value.</p> </li>\n<li> <p><code>:disabled</code> - Set to true if you want show the select fields as disabled.</p> </li>\n<li> <p><code>:prompt</code> - Set to true (for a generic prompt), a prompt string or a hash of prompt strings for <code>:year</code>, <code>:month</code>, <code>:day</code>, <code>:hour</code>, <code>:minute</code> and <code>:second</code>. Setting this option prepends a select option with a generic prompt (Day, Month, Year, Hour, Minute, Seconds) or the given prompt string.</p> </li>\n<li> <p><code>:with_css_classes</code> - Set to true if you want assign different styles for 'select' tags. This option automatically set classes 'year', 'month', 'day', 'hour', 'minute' and 'second' for your 'select' tags.</p> </li>\n</ul> <p>If anything is passed in the <code>html_options</code> hash it will be applied to every select tag in the set.</p> <p>NOTE: Discarded selects will default to 1. So if no month select is available, January will be assumed.</p> <pre class=\"ruby\"># Generates a date select that when POSTed is stored in the article variable, in the written_on attribute.\ndate_select(\"article\", \"written_on\")\n\n# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute,\n# with the year in the year drop down box starting at 1995.\ndate_select(\"article\", \"written_on\", start_year: 1995)\n\n# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute,\n# with the year in the year drop down box starting at 1995, numbers used for months instead of words,\n# and without a day select box.\ndate_select(\"article\", \"written_on\", start_year: 1995, use_month_numbers: true,\n                                  discard_day: true, include_blank: true)\n\n# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute,\n# with two digit numbers used for months and days.\ndate_select(\"article\", \"written_on\", use_two_digit_numbers: true)\n\n# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute\n# with the fields ordered as day, month, year rather than month, day, year.\ndate_select(\"article\", \"written_on\", order: [:day, :month, :year])\n\n# Generates a date select that when POSTed is stored in the user variable, in the birthday attribute\n# lacking a year field.\ndate_select(\"user\", \"birthday\", order: [:month, :day])\n\n# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute\n# which is initially set to the date 3 days from the current date\ndate_select(\"article\", \"written_on\", default: 3.days.from_now)\n\n# Generates a date select that when POSTed is stored in the article variable, in the written_on attribute\n# which is set in the form with todays date, regardless of the value in the Active Record object.\ndate_select(\"article\", \"written_on\", selected: Date.today)\n\n# Generates a date select that when POSTed is stored in the credit_card variable, in the bill_due attribute\n# that will have a default day of 20.\ndate_select(\"credit_card\", \"bill_due\", default: { day: 20 })\n\n# Generates a date select with custom prompts.\ndate_select(\"article\", \"written_on\", prompt: { day: 'Select day', month: 'Select month', year: 'Select year' })\n</pre> <p>The selects are prepared for multi-parameter assignment to an Active Record object.</p> <p>Note: If the day is not included as an option but the month is, the day will be set to the 1st to ensure that all month choices are valid.</p> <div class=\"method-source-code\" id=\"date_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 257\ndef date_select(object_name, method, options = {}, html_options = {})\n  Tags::DateSelect.new(object_name, method, self, options, html_options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-datetime_select\"> <span class=\"method-name\">datetime_select</span><span class=\"method-args\">(object_name, method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a set of select tags (one for year, month, day, hour, and minute) pre-selected for accessing a specified datetime-based attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>).</p> <p>If anything is passed in the html_options hash it will be applied to every select tag in the set.</p> <pre class=\"ruby\"># Generates a datetime select that, when POSTed, will be stored in the article variable in the written_on\n# attribute.\ndatetime_select(\"article\", \"written_on\")\n\n# Generates a datetime select with a year select that starts at 1995 that, when POSTed, will be stored in the\n# article variable in the written_on attribute.\ndatetime_select(\"article\", \"written_on\", start_year: 1995)\n\n# Generates a datetime select with a default value of 3 days from the current time that, when POSTed, will\n# be stored in the trip variable in the departing attribute.\ndatetime_select(\"trip\", \"departing\", default: 3.days.from_now)\n\n# Generate a datetime select with hours in the AM/PM format\ndatetime_select(\"article\", \"written_on\", ampm: true)\n\n# Generates a datetime select that discards the type that, when POSTed, will be stored in the article variable\n# as the written_on attribute.\ndatetime_select(\"article\", \"written_on\", discard_type: true)\n\n# Generates a datetime select with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for generic prompts.\ndatetime_select(\"article\", \"written_on\", prompt: {day: 'Choose day', month: 'Choose month', year: 'Choose year'})\ndatetime_select(\"article\", \"written_on\", prompt: {hour: true}) # generic prompt for hours\ndatetime_select(\"article\", \"written_on\", prompt: true) # generic prompts for all\n</pre> <p>The selects are prepared for multi-parameter assignment to an Active Record object.</p> <div class=\"method-source-code\" id=\"datetime_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 329\ndef datetime_select(object_name, method, options = {}, html_options = {})\n  Tags::DatetimeSelect.new(object_name, method, self, options, html_options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-distance_of_time_in_words\"> <span class=\"method-name\">distance_of_time_in_words</span><span class=\"method-args\">(from_time, to_time = 0, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reports the approximate distance in time between two <a href=\"../../time\">Time</a>, <a href=\"../../date\">Date</a> or <a href=\"../../datetime\">DateTime</a> objects or integers as seconds. Pass <code>include_seconds: true</code> if you want more detailed approximations when distance &lt; 1 min, 29 secs. Distances are reported based on the following table:</p> <pre>0 &lt;-&gt; 29 secs                                                             # =&gt; less than a minute\n30 secs &lt;-&gt; 1 min, 29 secs                                                # =&gt; 1 minute\n1 min, 30 secs &lt;-&gt; 44 mins, 29 secs                                       # =&gt; [2..44] minutes\n44 mins, 30 secs &lt;-&gt; 89 mins, 29 secs                                     # =&gt; about 1 hour\n89 mins, 30 secs &lt;-&gt; 23 hrs, 59 mins, 29 secs                             # =&gt; about [2..24] hours\n23 hrs, 59 mins, 30 secs &lt;-&gt; 41 hrs, 59 mins, 29 secs                     # =&gt; 1 day\n41 hrs, 59 mins, 30 secs  &lt;-&gt; 29 days, 23 hrs, 59 mins, 29 secs           # =&gt; [2..29] days\n29 days, 23 hrs, 59 mins, 30 secs &lt;-&gt; 44 days, 23 hrs, 59 mins, 29 secs   # =&gt; about 1 month\n44 days, 23 hrs, 59 mins, 30 secs &lt;-&gt; 59 days, 23 hrs, 59 mins, 29 secs   # =&gt; about 2 months\n59 days, 23 hrs, 59 mins, 30 secs &lt;-&gt; 1 yr minus 1 sec                    # =&gt; [2..12] months\n1 yr &lt;-&gt; 1 yr, 3 months                                                   # =&gt; about 1 year\n1 yr, 3 months &lt;-&gt; 1 yr, 9 months                                         # =&gt; over 1 year\n1 yr, 9 months &lt;-&gt; 2 yr minus 1 sec                                       # =&gt; almost 2 years\n2 yrs &lt;-&gt; max time or date                                                # =&gt; (same rules as 1 yr)</pre> <p>With <code>include_seconds: true</code> and the difference &lt; 1 minute 29 seconds:</p> <pre>0-4   secs      # =&gt; less than 5 seconds\n5-9   secs      # =&gt; less than 10 seconds\n10-19 secs      # =&gt; less than 20 seconds\n20-39 secs      # =&gt; half a minute\n40-59 secs      # =&gt; less than a minute\n60-89 secs      # =&gt; 1 minute\n\nfrom_time = Time.now\ndistance_of_time_in_words(from_time, from_time + 50.minutes)                                # =&gt; about 1 hour\ndistance_of_time_in_words(from_time, 50.minutes.from_now)                                   # =&gt; about 1 hour\ndistance_of_time_in_words(from_time, from_time + 15.seconds)                                # =&gt; less than a minute\ndistance_of_time_in_words(from_time, from_time + 15.seconds, include_seconds: true)         # =&gt; less than 20 seconds\ndistance_of_time_in_words(from_time, 3.years.from_now)                                      # =&gt; about 3 years\ndistance_of_time_in_words(from_time, from_time + 60.hours)                                  # =&gt; 3 days\ndistance_of_time_in_words(from_time, from_time + 45.seconds, include_seconds: true)         # =&gt; less than a minute\ndistance_of_time_in_words(from_time, from_time - 45.seconds, include_seconds: true)         # =&gt; less than a minute\ndistance_of_time_in_words(from_time, 76.seconds.from_now)                                   # =&gt; 1 minute\ndistance_of_time_in_words(from_time, from_time + 1.year + 3.days)                           # =&gt; about 1 year\ndistance_of_time_in_words(from_time, from_time + 3.years + 6.months)                        # =&gt; over 3 years\ndistance_of_time_in_words(from_time, from_time + 4.years + 9.days + 30.minutes + 5.seconds) # =&gt; about 4 years\n\nto_time = Time.now + 6.years + 19.days\ndistance_of_time_in_words(from_time, to_time, include_seconds: true)                        # =&gt; about 6 years\ndistance_of_time_in_words(to_time, from_time, include_seconds: true)                        # =&gt; about 6 years\ndistance_of_time_in_words(Time.now, Time.now)                                               # =&gt; less than a minute</pre> <div class=\"method-source-code\" id=\"distance_of_time_in_words-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 71\ndef distance_of_time_in_words(from_time, to_time = 0, options = {})\n  options = {\n    scope: :'datetime.distance_in_words'\n  }.merge!(options)\n\n  from_time = from_time.to_time if from_time.respond_to?(:to_time)\n  to_time = to_time.to_time if to_time.respond_to?(:to_time)\n  from_time, to_time = to_time, from_time if from_time &gt; to_time\n  distance_in_minutes = ((to_time - from_time)/60.0).round\n  distance_in_seconds = (to_time - from_time).round\n\n  I18n.with_options :locale =&gt; options[:locale], :scope =&gt; options[:scope] do |locale|\n    case distance_in_minutes\n      when 0..1\n        return distance_in_minutes == 0 ?\n               locale.t(:less_than_x_minutes, :count =&gt; 1) :\n               locale.t(:x_minutes, :count =&gt; distance_in_minutes) unless options[:include_seconds]\n\n        case distance_in_seconds\n          when 0..4   then locale.t :less_than_x_seconds, :count =&gt; 5\n          when 5..9   then locale.t :less_than_x_seconds, :count =&gt; 10\n          when 10..19 then locale.t :less_than_x_seconds, :count =&gt; 20\n          when 20..39 then locale.t :half_a_minute\n          when 40..59 then locale.t :less_than_x_minutes, :count =&gt; 1\n          else             locale.t :x_minutes,           :count =&gt; 1\n        end\n\n      when 2...45           then locale.t :x_minutes,      :count =&gt; distance_in_minutes\n      when 45...90          then locale.t :about_x_hours,  :count =&gt; 1\n      # 90 mins up to 24 hours\n      when 90...1440        then locale.t :about_x_hours,  :count =&gt; (distance_in_minutes.to_f / 60.0).round\n      # 24 hours up to 42 hours\n      when 1440...2520      then locale.t :x_days,         :count =&gt; 1\n      # 42 hours up to 30 days\n      when 2520...43200     then locale.t :x_days,         :count =&gt; (distance_in_minutes.to_f / 1440.0).round\n      # 30 days up to 60 days\n      when 43200...86400    then locale.t :about_x_months, :count =&gt; (distance_in_minutes.to_f / 43200.0).round\n      # 60 days up to 365 days\n      when 86400...525600   then locale.t :x_months,       :count =&gt; (distance_in_minutes.to_f / 43200.0).round\n      else\n        if from_time.acts_like?(:time) &amp;&amp; to_time.acts_like?(:time)\n          fyear = from_time.year\n          fyear += 1 if from_time.month &gt;= 3\n          tyear = to_time.year\n          tyear -= 1 if to_time.month &lt; 3\n          leap_years = (fyear &gt; tyear) ? 0 : (fyear..tyear).count{|x| Date.leap?(x)}\n          minute_offset_for_leap_year = leap_years * 1440\n          # Discount the leap year days when calculating year distance.\n          # e.g. if there are 20 leap year days between 2 dates having the same day\n          # and month then the based on 365 days calculation\n          # the distance in years will come out to over 80 years when in written\n          # English it would read better as about 80 years.\n          minutes_with_offset = distance_in_minutes - minute_offset_for_leap_year\n        else\n          minutes_with_offset = distance_in_minutes\n        end\n        remainder                   = (minutes_with_offset % MINUTES_IN_YEAR)\n        distance_in_years           = (minutes_with_offset.div MINUTES_IN_YEAR)\n        if remainder &lt; MINUTES_IN_QUARTER_YEAR\n          locale.t(:about_x_years,  :count =&gt; distance_in_years)\n        elsif remainder &lt; MINUTES_IN_THREE_QUARTERS_YEAR\n          locale.t(:over_x_years,   :count =&gt; distance_in_years)\n        else\n          locale.t(:almost_x_years, :count =&gt; distance_in_years + 1)\n        end\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-distance_of_time_in_words_to_now\"> <span class=\"method-name\">distance_of_time_in_words_to_now</span><span class=\"method-args\">(from_time, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datehelper#method-i-time_ago_in_words\">time_ago_in_words</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_date\"> <span class=\"method-name\">select_date</span><span class=\"method-args\">(date = Date.current, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a set of HTML select-tags (one for year, month, and day) pre-selected with the <code>date</code>. It's possible to explicitly set the order of the tags using the <code>:order</code> option with an array of symbols <code>:year</code>, <code>:month</code> and <code>:day</code> in the desired order. If the array passed to the <code>:order</code> option does not contain all the three symbols, all tags will be hidden.</p> <p>If anything is passed in the html_options hash it will be applied to every select tag in the set.</p> <pre class=\"ruby\">my_date = Time.now + 6.days\n\n# Generates a date select that defaults to the date in my_date (six days after today).\nselect_date(my_date)\n\n# Generates a date select that defaults to today (no specified date).\nselect_date()\n\n# Generates a date select that defaults to the date in my_date (six days after today)\n# with the fields ordered year, month, day rather than month, day, year.\nselect_date(my_date, order: [:year, :month, :day])\n\n# Generates a date select that discards the type of the field and defaults to the date in\n# my_date (six days after today).\nselect_date(my_date, discard_type: true)\n\n# Generates a date select that defaults to the date in my_date,\n# which has fields separated by '/'.\nselect_date(my_date, date_separator: '/')\n\n# Generates a date select that defaults to the datetime in my_date (six days after today)\n# prefixed with 'payday' rather than 'date'.\nselect_date(my_date, prefix: 'payday')\n\n# Generates a date select with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for generic prompts.\nselect_date(my_date, prompt: {day: 'Choose day', month: 'Choose month', year: 'Choose year'})\nselect_date(my_date, prompt: {hour: true}) # generic prompt for hours\nselect_date(my_date, prompt: true) # generic prompts for all\n</pre> <div class=\"method-source-code\" id=\"select_date-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 417\ndef select_date(date = Date.current, options = {}, html_options = {})\n  DateTimeSelector.new(date, options, html_options).select_date\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_datetime\"> <span class=\"method-name\">select_datetime</span><span class=\"method-args\">(datetime = Time.current, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a set of HTML select-tags (one for year, month, day, hour, minute, and second) pre-selected with the <code>datetime</code>. It's also possible to explicitly set the order of the tags using the <code>:order</code> option with an array of symbols <code>:year</code>, <code>:month</code> and <code>:day</code> in the desired order. If you do not supply a <a href=\"../../symbol\">Symbol</a>, it will be appended onto the <code>:order</code> passed in. You can also add <code>:date_separator</code>, <code>:datetime_separator</code> and <code>:time_separator</code> keys to the <code>options</code> to control visual display of the elements.</p> <p>If anything is passed in the html_options hash it will be applied to every select tag in the set.</p> <pre class=\"ruby\">my_date_time = Time.now + 4.days\n\n# Generates a datetime select that defaults to the datetime in my_date_time (four days after today).\nselect_datetime(my_date_time)\n\n# Generates a datetime select that defaults to today (no specified datetime)\nselect_datetime()\n\n# Generates a datetime select that defaults to the datetime in my_date_time (four days after today)\n# with the fields ordered year, month, day rather than month, day, year.\nselect_datetime(my_date_time, order: [:year, :month, :day])\n\n# Generates a datetime select that defaults to the datetime in my_date_time (four days after today)\n# with a '/' between each date field.\nselect_datetime(my_date_time, date_separator: '/')\n\n# Generates a datetime select that defaults to the datetime in my_date_time (four days after today)\n# with a date fields separated by '/', time fields separated by '' and the date and time fields\n# separated by a comma (',').\nselect_datetime(my_date_time, date_separator: '/', time_separator: '', datetime_separator: ',')\n\n# Generates a datetime select that discards the type of the field and defaults to the datetime in\n# my_date_time (four days after today)\nselect_datetime(my_date_time, discard_type: true)\n\n# Generate a datetime field with hours in the AM/PM format\nselect_datetime(my_date_time, ampm: true)\n\n# Generates a datetime select that defaults to the datetime in my_date_time (four days after today)\n# prefixed with 'payday' rather than 'date'\nselect_datetime(my_date_time, prefix: 'payday')\n\n# Generates a datetime select with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for generic prompts.\nselect_datetime(my_date_time, prompt: {day: 'Choose day', month: 'Choose month', year: 'Choose year'})\nselect_datetime(my_date_time, prompt: {hour: true}) # generic prompt for hours\nselect_datetime(my_date_time, prompt: true) # generic prompts for all\n</pre> <div class=\"method-source-code\" id=\"select_datetime-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 378\ndef select_datetime(datetime = Time.current, options = {}, html_options = {})\n  DateTimeSelector.new(datetime, options, html_options).select_datetime\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_day\"> <span class=\"method-name\">select_day</span><span class=\"method-args\">(date, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a select tag with options for each of the days 1 through 31 with the current day selected. The <code>date</code> can also be substituted for a day number. If you want to display days with a leading zero set the <code>:use_two_digit_numbers</code> key in <code>options</code> to true. Override the field name using the <code>:field_name</code> option, 'day' by default.</p> <pre class=\"ruby\">my_date = Time.now + 2.days\n\n# Generates a select field for days that defaults to the day for the date in my_date.\nselect_day(my_date)\n\n# Generates a select field for days that defaults to the number given.\nselect_day(5)\n\n# Generates a select field for days that defaults to the number given, but displays it with two digits.\nselect_day(5, use_two_digit_numbers: true)\n\n# Generates a select field for days that defaults to the day for the date in my_date\n# that is named 'due' rather than 'day'.\nselect_day(my_date, field_name: 'due')\n\n# Generates a select field for days with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for a\n# generic prompt.\nselect_day(5, prompt: 'Choose day')\n</pre> <div class=\"method-source-code\" id=\"select_day-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 560\ndef select_day(date, options = {}, html_options = {})\n  DateTimeSelector.new(date, options, html_options).select_day\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_hour\"> <span class=\"method-name\">select_hour</span><span class=\"method-args\">(datetime, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a select tag with options for each of the hours 0 through 23 with the current hour selected. The <code>datetime</code> can be either a <code>Time</code> or <code>DateTime</code> object or an integer. Override the field name using the <code>:field_name</code> option, 'hour' by default.</p> <pre class=\"ruby\">my_time = Time.now + 6.hours\n\n# Generates a select field for hours that defaults to the hour for the time in my_time.\nselect_hour(my_time)\n\n# Generates a select field for hours that defaults to the number given.\nselect_hour(13)\n\n# Generates a select field for hours that defaults to the hour for the time in my_time\n# that is named 'stride' rather than 'hour'.\nselect_hour(my_time, field_name: 'stride')\n\n# Generates a select field for hours with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for a\n# generic prompt.\nselect_hour(13, prompt: 'Choose hour')\n\n# Generate a select field for hours in the AM/PM format\nselect_hour(my_time, ampm: true)\n\n# Generates a select field that includes options for hours from 2 to 14.\nselect_hour(my_time, start_hour: 2, end_hour: 14)\n</pre> <div class=\"method-source-code\" id=\"select_hour-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 533\ndef select_hour(datetime, options = {}, html_options = {})\n  DateTimeSelector.new(datetime, options, html_options).select_hour\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_minute\"> <span class=\"method-name\">select_minute</span><span class=\"method-args\">(datetime, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a select tag with options for each of the minutes 0 through 59 with the current minute selected. Also can return a select tag with options by <code>minute_step</code> from 0 through 59 with the 00 minute selected. The <code>datetime</code> can be either a <code>Time</code> or <code>DateTime</code> object or an integer. Override the field name using the <code>:field_name</code> option, 'minute' by default.</p> <pre class=\"ruby\">my_time = Time.now + 6.hours\n\n# Generates a select field for minutes that defaults to the minutes for the time in my_time.\nselect_minute(my_time)\n\n# Generates a select field for minutes that defaults to the number given.\nselect_minute(14)\n\n# Generates a select field for minutes that defaults to the minutes for the time in my_time\n# that is named 'moment' rather than 'minute'.\nselect_minute(my_time, field_name: 'moment')\n\n# Generates a select field for minutes with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for a\n# generic prompt.\nselect_minute(14, prompt: 'Choose minutes')\n</pre> <div class=\"method-source-code\" id=\"select_minute-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 504\ndef select_minute(datetime, options = {}, html_options = {})\n  DateTimeSelector.new(datetime, options, html_options).select_minute\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_month\"> <span class=\"method-name\">select_month</span><span class=\"method-args\">(date, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a select tag with options for each of the months January through December with the current month selected. The month names are presented as keys (what's shown to the user) and the month numbers (1-12) are used as values (what's submitted to the server). It's also possible to use month numbers for the presentation instead of names – set the <code>:use_month_numbers</code> key in <code>options</code> to true for this to happen. If you want both numbers and names, set the <code>:add_month_numbers</code> key in <code>options</code> to true. If you would prefer to show month names as abbreviations, set the <code>:use_short_month</code> key in <code>options</code> to true. If you want to use your own month names, set the <code>:use_month_names</code> key in <code>options</code> to an array of 12 month names. If you want to display months with a leading zero set the <code>:use_two_digit_numbers</code> key in <code>options</code> to true. Override the field name using the <code>:field_name</code> option, 'month' by default.</p> <pre class=\"ruby\"># Generates a select field for months that defaults to the current month that\n# will use keys like \"January\", \"March\".\nselect_month(Date.today)\n\n# Generates a select field for months that defaults to the current month that\n# is named \"start\" rather than \"month\".\nselect_month(Date.today, field_name: 'start')\n\n# Generates a select field for months that defaults to the current month that\n# will use keys like \"1\", \"3\".\nselect_month(Date.today, use_month_numbers: true)\n\n# Generates a select field for months that defaults to the current month that\n# will use keys like \"1 - January\", \"3 - March\".\nselect_month(Date.today, add_month_numbers: true)\n\n# Generates a select field for months that defaults to the current month that\n# will use keys like \"Jan\", \"Mar\".\nselect_month(Date.today, use_short_month: true)\n\n# Generates a select field for months that defaults to the current month that\n# will use keys like \"Januar\", \"Marts.\"\nselect_month(Date.today, use_month_names: %w(Januar Februar Marts ...))\n\n# Generates a select field for months that defaults to the current month that\n# will use keys with two digit numbers like \"01\", \"03\".\nselect_month(Date.today, use_two_digit_numbers: true)\n\n# Generates a select field for months with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for a\n# generic prompt.\nselect_month(14, prompt: 'Choose month')\n</pre> <div class=\"method-source-code\" id=\"select_month-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 605\ndef select_month(date, options = {}, html_options = {})\n  DateTimeSelector.new(date, options, html_options).select_month\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_second\"> <span class=\"method-name\">select_second</span><span class=\"method-args\">(datetime, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a select tag with options for each of the seconds 0 through 59 with the current second selected. The <code>datetime</code> can be either a <code>Time</code> or <code>DateTime</code> object or an integer. Override the field name using the <code>:field_name</code> option, 'second' by default.</p> <pre class=\"ruby\">my_time = Time.now + 16.minutes\n\n# Generates a select field for seconds that defaults to the seconds for the time in my_time.\nselect_second(my_time)\n\n# Generates a select field for seconds that defaults to the number given.\nselect_second(33)\n\n# Generates a select field for seconds that defaults to the seconds for the time in my_time\n# that is named 'interval' rather than 'second'.\nselect_second(my_time, field_name: 'interval')\n\n# Generates a select field for seconds with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for a\n# generic prompt.\nselect_second(14, prompt: 'Choose seconds')\n</pre> <div class=\"method-source-code\" id=\"select_second-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 480\ndef select_second(datetime, options = {}, html_options = {})\n  DateTimeSelector.new(datetime, options, html_options).select_second\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_time\"> <span class=\"method-name\">select_time</span><span class=\"method-args\">(datetime = Time.current, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a set of HTML select-tags (one for hour and minute). You can set <code>:time_separator</code> key to format the output, and the <code>:include_seconds</code> option to include an input for seconds.</p> <p>If anything is passed in the html_options hash it will be applied to every select tag in the set.</p> <pre class=\"ruby\">my_time = Time.now + 5.days + 7.hours + 3.minutes + 14.seconds\n\n# Generates a time select that defaults to the time in my_time.\nselect_time(my_time)\n\n# Generates a time select that defaults to the current time (no specified time).\nselect_time()\n\n# Generates a time select that defaults to the time in my_time,\n# which has fields separated by ':'.\nselect_time(my_time, time_separator: ':')\n\n# Generates a time select that defaults to the time in my_time,\n# that also includes an input for seconds.\nselect_time(my_time, include_seconds: true)\n\n# Generates a time select that defaults to the time in my_time, that has fields\n# separated by ':' and includes an input for seconds.\nselect_time(my_time, time_separator: ':', include_seconds: true)\n\n# Generate a time select field with hours in the AM/PM format\nselect_time(my_time, ampm: true)\n\n# Generates a time select field with hours that range from 2 to 14\nselect_time(my_time, start_hour: 2, end_hour: 14)\n\n# Generates a time select with a custom prompt. Use &lt;tt&gt;:prompt&lt;/tt&gt; to true for generic prompts.\nselect_time(my_time, prompt: {day: 'Choose day', month: 'Choose month', year: 'Choose year'})\nselect_time(my_time, prompt: {hour: true}) # generic prompt for hours\nselect_time(my_time, prompt: true) # generic prompts for all\n</pre> <div class=\"method-source-code\" id=\"select_time-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 457\ndef select_time(datetime = Time.current, options = {}, html_options = {})\n  DateTimeSelector.new(datetime, options, html_options).select_time\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_year\"> <span class=\"method-name\">select_year</span><span class=\"method-args\">(date, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a select tag with options for each of the five years on each side of the current, which is selected. The five year radius can be changed using the <code>:start_year</code> and <code>:end_year</code> keys in the <code>options</code>. Both ascending and descending year lists are supported by making <code>:start_year</code> less than or greater than <code>:end_year</code>. The <code>date</code> can also be substituted for a year given as a number. Override the field name using the <code>:field_name</code> option, 'year' by default.</p> <pre class=\"ruby\"># Generates a select field for years that defaults to the current year that\n# has ascending year values.\nselect_year(Date.today, start_year: 1992, end_year: 2007)\n\n# Generates a select field for years that defaults to the current year that\n# is named 'birth' rather than 'year'.\nselect_year(Date.today, field_name: 'birth')\n\n# Generates a select field for years that defaults to the current year that\n# has descending year values.\nselect_year(Date.today, start_year: 2005, end_year: 1900)\n\n# Generates a select field for years that defaults to the year 2006 that\n# has ascending year values.\nselect_year(2006, start_year: 2000, end_year: 2010)\n\n# Generates a select field for years with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for a\n# generic prompt.\nselect_year(14, prompt: 'Choose year')\n</pre> <div class=\"method-source-code\" id=\"select_year-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 634\ndef select_year(date, options = {}, html_options = {})\n  DateTimeSelector.new(date, options, html_options).select_year\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time_ago_in_words\"> <span class=\"method-name\">time_ago_in_words</span><span class=\"method-args\">(from_time, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Like <code>distance_of_time_in_words</code>, but where <code>to_time</code> is fixed to <code>Time.now</code>.</p> <pre class=\"ruby\">time_ago_in_words(3.minutes.from_now)                 # =&gt; 3 minutes\ntime_ago_in_words(3.minutes.ago)                      # =&gt; 3 minutes\ntime_ago_in_words(Time.now - 15.hours)                # =&gt; about 15 hours\ntime_ago_in_words(Time.now)                           # =&gt; less than a minute\ntime_ago_in_words(Time.now, include_seconds: true) # =&gt; less than 5 seconds\n\nfrom_time = Time.now - 3.days - 14.minutes - 25.seconds\ntime_ago_in_words(from_time)      # =&gt; 3 days\n\nfrom_time = (3.days + 14.minutes + 25.seconds).ago\ntime_ago_in_words(from_time)      # =&gt; 3 days\n</pre> <p>Note that you cannot pass a <code>Numeric</code> value to <code>time_ago_in_words</code>.</p> <div class=\"method-source-code\" id=\"time_ago_in_words-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 156\ndef time_ago_in_words(from_time, options = {})\n  distance_of_time_in_words(from_time, Time.now, options)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datehelper#method-i-distance_of_time_in_words_to_now\">distance_of_time_in_words_to_now</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time_select\"> <span class=\"method-name\">time_select</span><span class=\"method-args\">(object_name, method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a set of select tags (one for hour, minute and optionally second) pre-selected for accessing a specified time-based attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). You can include the seconds with <code>:include_seconds</code>. You can get hours in the AM/PM format with <code>:ampm</code> option.</p> <p>This method will also generate 3 input hidden tags, for the actual year, month and day unless the option <code>:ignore_date</code> is set to <code>true</code>. If you set the <code>:ignore_date</code> to <code>true</code>, you must have a <code>date_select</code> on the same method within the form otherwise an exception will be raised.</p> <p>If anything is passed in the html_options hash it will be applied to every select tag in the set.</p> <pre class=\"ruby\"># Creates a time select tag that, when POSTed, will be stored in the article variable in the sunrise attribute.\ntime_select(\"article\", \"sunrise\")\n\n# Creates a time select tag with a seconds field that, when POSTed, will be stored in the article variables in\n# the sunrise attribute.\ntime_select(\"article\", \"start_time\", include_seconds: true)\n\n# You can set the &lt;tt&gt;:minute_step&lt;/tt&gt; to 15 which will give you: 00, 15, 30 and 45.\ntime_select 'game', 'game_time', {minute_step: 15}\n\n# Creates a time select tag with a custom prompt. Use &lt;tt&gt;prompt: true&lt;/tt&gt; for generic prompts.\ntime_select(\"article\", \"written_on\", prompt: {hour: 'Choose hour', minute: 'Choose minute', second: 'Choose seconds'})\ntime_select(\"article\", \"written_on\", prompt: {hour: true}) # generic prompt for hours\ntime_select(\"article\", \"written_on\", prompt: true) # generic prompts for all\n\n# You can set :ampm option to true which will show the hours as: 12 PM, 01 AM .. 11 PM.\ntime_select 'game', 'game_time', {ampm: true}\n</pre> <p>The selects are prepared for multi-parameter assignment to an Active Record object.</p> <p>Note: If the day is not included as an option but the month is, the day will be set to the 1st to ensure that all month choices are valid.</p> <div class=\"method-source-code\" id=\"time_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 294\ndef time_select(object_name, method, options = {}, html_options = {})\n  Tags::TimeSelect.new(object_name, method, self, options, html_options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time_tag\"> <span class=\"method-name\">time_tag</span><span class=\"method-args\">(date_or_time, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an HTML time tag for the given date or time.</p> <pre>time_tag Date.today  # =&gt;\n  &lt;time datetime=\"2010-11-04\"&gt;November 04, 2010&lt;/time&gt;\ntime_tag Time.now  # =&gt;\n  &lt;time datetime=\"2010-11-04T17:55:45+01:00\"&gt;November 04, 2010 17:55&lt;/time&gt;\ntime_tag Date.yesterday, 'Yesterday'  # =&gt;\n  &lt;time datetime=\"2010-11-03\"&gt;Yesterday&lt;/time&gt;\ntime_tag Date.today, pubdate: true  # =&gt;\n  &lt;time datetime=\"2010-11-04\" pubdate=\"pubdate\"&gt;November 04, 2010&lt;/time&gt;\ntime_tag Date.today, datetime: Date.today.strftime('%G-W%V') # =&gt;\n  &lt;time datetime=\"2010-W44\"&gt;November 04, 2010&lt;/time&gt;\n\n&lt;%= time_tag Time.now do %&gt;\n  &lt;span&gt;Right now&lt;/span&gt;\n&lt;% end %&gt;\n# =&gt; &lt;time datetime=\"2010-11-04T17:55:45+01:00\"&gt;&lt;span&gt;Right now&lt;/span&gt;&lt;/time&gt;</pre> <div class=\"method-source-code\" id=\"time_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 655\ndef time_tag(date_or_time, *args, &amp;block)\n  options  = args.extract_options!\n  format   = options.delete(:format) || :long\n  content  = args.first || I18n.l(date_or_time, :format =&gt; format)\n  datetime = date_or_time.acts_like?(:time) ? date_or_time.xmlschema : date_or_time.iso8601\n\n  content_tag(:time, content, options.reverse_merge(:datetime =&gt; datetime), &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/debughelper":"<h1 id=\"module-ActionView::Helpers::DebugHelper\" class=\"module\"> module ActionView::Helpers::DebugHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"taghelper\">ActionView::Helpers::TagHelper</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-debug\"> <span class=\"method-name\">debug</span><span class=\"method-args\">(object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a YAML representation of <code>object</code> wrapped with &lt;pre&gt; and &lt;/pre&gt;. If the object cannot be converted to YAML using <code>to_yaml</code>, <code>inspect</code> will be called instead. Useful for inspecting an object at the time of rendering.</p> <pre>@user = User.new({ username: 'testing', password: 'xyz', age: 42})\ndebug(@user)\n# =&gt;\n&lt;pre class='debug_dump'&gt;--- !ruby/object:User\nattributes:\n  updated_at:\n  username: testing\n  age: 42\n  password: xyz\n  created_at:\n&lt;/pre&gt;</pre> <div class=\"method-source-code\" id=\"debug-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/debug_helper.rb, line 25\ndef debug(object)\n  Marshal::dump(object)\n  object = ERB::Util.html_escape(object.to_yaml)\n  content_tag(:pre, object, :class =&gt; \"debug_dump\")\nrescue Exception  # errors from Marshal or YAML\n  # Object couldn't be dumped, perhaps because of singleton methods -- this is the fallback\n  content_tag(:code, object.inspect, :class =&gt; \"debug_dump\")\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/formbuilder":"<h1 id=\"class-ActionView::Helpers::FormBuilder\" class=\"class\"> class ActionView::Helpers::FormBuilder </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../modelnaming\">ActionView::ModelNaming</a></dd>\n</dl> <section class=\"description\"> <p>A <code>FormBuilder</code> object is associated with a particular model object and allows you to generate fields associated with the model object. The <code>FormBuilder</code> object is yielded when using <code>form_for</code> or <code>fields_for</code>. For example:</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  Name: &lt;%= person_form.text_field :name %&gt;\n  Admin: &lt;%= person_form.check_box :admin %&gt;\n&lt;% end %&gt;</pre> <p>In the above block, a <code>FormBuilder</code> object is yielded as the <code>person_form</code> variable. This allows you to generate the <code>text_field</code> and <code>check_box</code> fields by specifying their eponymous methods, which modify the underlying template and associates the +@person+ model object with the form.</p> <p>The <code>FormBuilder</code> object can be thought of as serving as a proxy for the methods in the <code>FormHelper</code> module. This class, however, allows you to call methods with the model object you are building the form for.</p> <p>You can create your own custom <a href=\"formbuilder\">FormBuilder</a> templates by subclassing this class. For example:</p> <pre class=\"ruby\">class MyFormBuilder &lt; ActionView::Helpers::FormBuilder\n  def div_radio_button(method, tag_value, options = {})\n    @template.content_tag(:div,\n      @template.radio_button(\n        @object_name, method, tag_value, objectify_options(options)\n      )\n    )\n  end\nend\n</pre> <p>The above code creates a new method <code>div_radio_button</code> which wraps a div around the new radio button. Note that when options are passed in, you must call <code>objectify_options</code> in order for the model object to get correctly passed to the method. If <code>objectify_options</code> is not called, then the newly created helper will not be linked back to the model.</p> <p>The <code>div_radio_button</code> code from above can now be used as follows:</p> <pre>&lt;%= form_for @person, :builder =&gt; MyFormBuilder do |f| %&gt;\n  I am a child: &lt;%= f.div_radio_button(:admin, \"child\") %&gt;\n  I am an adult: &lt;%= f.div_radio_button(:admin, \"adult\") %&gt;\n&lt;% end -%&gt;</pre> <p>The standard set of helper methods for form building are located in the <code>field_helpers</code> class attribute.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-index\"> <span class=\"method-name\">index</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-multipart\"> <span class=\"method-name\">multipart</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-multipart-3F\"> <span class=\"method-name\">multipart?</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-object\"> <span class=\"method-name\">object</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-object_name\"> <span class=\"method-name\">object_name</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-options\"> <span class=\"method-name\">options</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-_to_partial_path\"> <span class=\"method-name\">_to_partial_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_to_partial_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1293\ndef self._to_partial_path\n  @_to_partial_path ||= name.demodulize.underscore.sub!(/_builder$/, '')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(object_name, object, template, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1305\ndef initialize(object_name, object, template, options)\n  @nested_child_index = {}\n  @object_name, @object, @template, @options = object_name, object, template, options\n  @default_options = @options ? @options.slice(:index, :namespace) : {}\n  if @object_name.to_s.match(/\\[\\]$/)\n    if object ||= @template.instance_variable_get(\"@#{Regexp.last_match.pre_match}\") and object.respond_to?(:to_param)\n      @auto_index = object.to_param\n    else\n      raise ArgumentError, \"object[] naming but object param and @object var don't exist or don't respond to to_param: #{object.inspect}\"\n    end\n  end\n  @multipart = nil\n  @index = options[:index] || options[:child_index]\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-button\"> <span class=\"method-name\">button</span><span class=\"method-args\">(value = nil, options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add the submit button for the given form. When no value is given, it checks if the object is a new resource or not to create the proper label:</p> <pre>&lt;%= form_for @post do |f| %&gt;\n  &lt;%= f.button %&gt;\n&lt;% end %&gt;</pre> <p>In the example above, if @post is a new record, it will use “Create Post” as button label, otherwise, it uses “Update Post”.</p> <p>Those labels can be customized using <a href=\"../../i18n\">I18n</a>, under the helpers.submit key (the same as submit helper) and accept the %{model} as translation interpolation:</p> <pre>en:\n  helpers:\n    submit:\n      create: \"Create a %{model}\"\n      update: \"Confirm changes to %{model}\"</pre> <p>It also searches for a key specific for the given object:</p> <pre>en:\n  helpers:\n    submit:\n      post:\n        create: \"Add %{model}\"</pre> <h4 id=\"method-i-button-label-Examples\">Examples</h4> <pre class=\"ruby\">button(\"Create a post\")\n# =&gt; &lt;button name='button' type='submit'&gt;Create post&lt;/button&gt;\n\nbutton do\n  content_tag(:strong, 'Ask me!')\nend\n# =&gt; &lt;button name='button' type='submit'&gt;\n#      &lt;strong&gt;Ask me!&lt;/strong&gt;\n#    &lt;/button&gt;\n</pre> <div class=\"method-source-code\" id=\"button-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1858\ndef button(value = nil, options = {}, &amp;block)\n  value, options = nil, value if value.is_a?(Hash)\n  value ||= submit_default_value\n  @template.button_tag(value, options, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-check_box\"> <span class=\"method-name\">check_box</span><span class=\"method-args\">(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a checkbox tag tailored for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). This object must be an instance object (@object) and not a local object. It's intended that <code>method</code> returns an integer and if that integer is above zero, then the checkbox is checked. Additional options on the input tag can be passed as a hash with <code>options</code>. The <code>checked_value</code> defaults to 1 while the default <code>unchecked_value</code> is set to 0 which is convenient for boolean values.</p> <h4 id=\"method-i-check_box-label-Gotcha\">Gotcha</h4> <p>The HTML specification says unchecked check boxes are not successful, and thus web browsers do not send them. Unfortunately this introduces a gotcha: if an <code>Invoice</code> model has a <code>paid</code> flag, and in the form that edits a paid invoice the user unchecks its check box, no <code>paid</code> parameter is sent. So, any mass-assignment idiom like</p> <pre class=\"ruby\">@invoice.update(params[:invoice])\n</pre> <p>wouldn't update the flag.</p> <p>To prevent this the helper generates an auxiliary hidden field before the very check box. The hidden field has the same name and its attributes mimic an unchecked check box.</p> <p>This way, the client either sends only the hidden field (representing the check box is unchecked), or both fields. Since the HTML specification says key/value pairs have to be sent in the same order they appear in the form, and parameters extraction gets the last occurrence of any repeated key in the query string, that works for ordinary forms.</p> <p>Unfortunately that workaround does not work when the check box goes within an array-like parameter, as in</p> <pre>&lt;%= fields_for \"project[invoice_attributes][]\", invoice, index: nil do |form| %&gt;\n  &lt;%= form.check_box :paid %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>because parameter name repetition is precisely what Rails seeks to distinguish the elements of the array. For each item with a checked check box you get an extra ghost item with only that attribute, assigned to “0”.</p> <p>In that case it is preferable to either use <code>check_box_tag</code> or to use hashes instead of arrays.</p> <pre class=\"ruby\"># Let's say that @post.validated? is 1:\ncheck_box(\"post\", \"validated\")\n# =&gt; &lt;input name=\"post[validated]\" type=\"hidden\" value=\"0\" /&gt;\n#    &lt;input checked=\"checked\" type=\"checkbox\" id=\"post_validated\" name=\"post[validated]\" value=\"1\" /&gt;\n\n# Let's say that @puppy.gooddog is \"no\":\ncheck_box(\"puppy\", \"gooddog\", {}, \"yes\", \"no\")\n# =&gt; &lt;input name=\"puppy[gooddog]\" type=\"hidden\" value=\"no\" /&gt;\n#    &lt;input type=\"checkbox\" id=\"puppy_gooddog\" name=\"puppy[gooddog]\" value=\"yes\" /&gt;\n\ncheck_box(\"eula\", \"accepted\", { class: 'eula_check' }, \"yes\", \"no\")\n# =&gt; &lt;input name=\"eula[accepted]\" type=\"hidden\" value=\"no\" /&gt;\n#    &lt;input type=\"checkbox\" class=\"eula_check\" id=\"eula_accepted\" name=\"eula[accepted]\" value=\"yes\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"check_box-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1709\ndef check_box(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")\n  @template.check_box(@object_name, method, objectify_options(options), checked_value, unchecked_value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collection_check_boxes\"> <span class=\"method-name\">collection_check_boxes</span><span class=\"method-args\">(method, collection, value_method, text_method, options = {}, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps <a href=\"formoptionshelper#method-i-collection_check_boxes\">ActionView::Helpers::FormOptionsHelper#collection_check_boxes</a> for form builders:</p> <pre>&lt;%= form_for @post do |f| %&gt;\n  &lt;%= f.collection_check_boxes :author_ids, Author.all, :id, :name_with_initial %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>Please refer to the documentation of the base helper for details.</p> <div class=\"method-source-code\" id=\"collection_check_boxes-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 824\ndef collection_check_boxes(method, collection, value_method, text_method, options = {}, html_options = {}, &amp;block)\n  @template.collection_check_boxes(@object_name, method, collection, value_method, text_method, objectify_options(options), @default_options.merge(html_options), &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collection_radio_buttons\"> <span class=\"method-name\">collection_radio_buttons</span><span class=\"method-args\">(method, collection, value_method, text_method, options = {}, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps <a href=\"formoptionshelper#method-i-collection_radio_buttons\">ActionView::Helpers::FormOptionsHelper#collection_radio_buttons</a> for form builders:</p> <pre>&lt;%= form_for @post do |f| %&gt;\n  &lt;%= f.collection_radio_buttons :author_id, Author.all, :id, :name_with_initial %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>Please refer to the documentation of the base helper for details.</p> <div class=\"method-source-code\" id=\"collection_radio_buttons-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 836\ndef collection_radio_buttons(method, collection, value_method, text_method, options = {}, html_options = {}, &amp;block)\n  @template.collection_radio_buttons(@object_name, method, collection, value_method, text_method, objectify_options(options), @default_options.merge(html_options), &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collection_select\"> <span class=\"method-name\">collection_select</span><span class=\"method-args\">(method, collection, value_method, text_method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps <a href=\"formoptionshelper#method-i-collection_select\">ActionView::Helpers::FormOptionsHelper#collection_select</a> for form builders:</p> <pre>&lt;%= form_for @post do |f| %&gt;\n  &lt;%= f.collection_select :person_id, Author.all, :id, :name_with_initial, prompt: true %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>Please refer to the documentation of the base helper for details.</p> <div class=\"method-source-code\" id=\"collection_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 788\ndef collection_select(method, collection, value_method, text_method, options = {}, html_options = {})\n  @template.collection_select(@object_name, method, collection, value_method, text_method, objectify_options(options), @default_options.merge(html_options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-date_select\"> <span class=\"method-name\">date_select</span><span class=\"method-args\">(method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps <a href=\"datehelper#method-i-date_select\">ActionView::Helpers::DateHelper#date_select</a> for form builders:</p> <pre>&lt;%= form_for @person do |f| %&gt;\n  &lt;%= f.date_select :birth_date %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>Please refer to the documentation of the base helper for details.</p> <div class=\"method-source-code\" id=\"date_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 1069\ndef date_select(method, options = {}, html_options = {})\n  @template.date_select(@object_name, method, objectify_options(options), html_options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-datetime_select\"> <span class=\"method-name\">datetime_select</span><span class=\"method-args\">(method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps <a href=\"datehelper#method-i-datetime_select\">ActionView::Helpers::DateHelper#datetime_select</a> for form builders:</p> <pre>&lt;%= form_for @person do |f| %&gt;\n  &lt;%= f.datetime_select :last_request_at %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>Please refer to the documentation of the base helper for details.</p> <div class=\"method-source-code\" id=\"datetime_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 1093\ndef datetime_select(method, options = {}, html_options = {})\n  @template.datetime_select(@object_name, method, objectify_options(options), html_options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-emitted_hidden_id-3F\"> <span class=\"method-name\">emitted_hidden_id?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"emitted_hidden_id-3F-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1864\ndef emitted_hidden_id?\n  @emitted_hidden_id ||= nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fields_for\"> <span class=\"method-name\">fields_for</span><span class=\"method-args\">(record_name, record_object = nil, fields_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a scope around a specific model object like form_for, but doesn't create the form tags themselves. This makes <a href=\"formbuilder#method-i-fields_for\">#fields_for</a> suitable for specifying additional model objects in the same form.</p> <p>Although the usage and purpose of <code>fields_for</code> is similar to <code>form_for</code>'s, its method signature is slightly different. Like <code>form_for</code>, it yields a <a href=\"formbuilder\">FormBuilder</a> object associated with a particular model object to a block, and within the block allows methods to be called on the builder to generate fields associated with the model object. Fields may reflect a model object in two ways - how they are named (hence how submitted values appear within the <code>params</code> hash in the controller) and what default values are shown when the form the fields appear in is first displayed. In order for both of these features to be specified independently, both an object name (represented by either a symbol or string) and the object itself can be passed to the method separately -</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  First name: &lt;%= person_form.text_field :first_name %&gt;\n  Last name : &lt;%= person_form.text_field :last_name %&gt;\n\n  &lt;%= fields_for :permission, @person.permission do |permission_fields| %&gt;\n    Admin?  : &lt;%= permission_fields.check_box :admin %&gt;\n  &lt;% end %&gt;\n\n  &lt;%= person_form.submit %&gt;\n&lt;% end %&gt;</pre> <p>In this case, the checkbox field will be represented by an HTML <code>input</code> tag with the <code>name</code> attribute <code>permission[admin]</code>, and the submitted value will appear in the controller as <code>params[:permission][:admin]</code>. If <code>@person.permission</code> is an existing record with an attribute <code>admin</code>, the initial state of the checkbox when first displayed will reflect the value of <code>@person.permission.admin</code>.</p> <p>Often this can be simplified by passing just the name of the model object to <code>fields_for</code> -</p> <pre>&lt;%= fields_for :permission do |permission_fields| %&gt;\n  Admin?: &lt;%= permission_fields.check_box :admin %&gt;\n&lt;% end %&gt;</pre> <p>…in which case, if <code>:permission</code> also happens to be the name of an instance variable <code>@permission</code>, the initial state of the input field will reflect the value of that variable's attribute <code>@permission.admin</code>.</p> <p>Alternatively, you can pass just the model object itself (if the first argument isn't a string or symbol <code>fields_for</code> will realize that the name has been omitted) -</p> <pre>&lt;%= fields_for @person.permission do |permission_fields| %&gt;\n  Admin?: &lt;%= permission_fields.check_box :admin %&gt;\n&lt;% end %&gt;</pre> <p>and <code>fields_for</code> will derive the required name of the field from the <em>class</em> of the model object, e.g. if <code>@person.permission</code>, is of class <code>Permission</code>, the field will still be named <code>permission[admin]</code>.</p> <p>Note: This also works for the methods in FormOptionHelper and <a href=\"datehelper\">DateHelper</a> that are designed to work with an object as base, like FormOptionHelper#collection_select and <a href=\"datehelper#method-i-datetime_select\">ActionView::Helpers::DateHelper#datetime_select</a>.</p> <h3 id=\"method-i-fields_for-label-Nested+Attributes+Examples\">Nested Attributes Examples</h3> <p>When the object belonging to the current scope has a nested attribute writer for a certain attribute, <a href=\"formbuilder#method-i-fields_for\">#fields_for</a> will yield a new scope for that attribute. This allows you to create forms that set or change the attributes of a parent object and its associations in one go.</p> <p>Nested attribute writers are normal setter methods named after an association. The most common way of defining these writers is either with <code>accepts_nested_attributes_for</code> in a model definition or by defining a method with the proper name. For example: the attribute writer for the association <code>:address</code> is called <code>address_attributes=</code>.</p> <p>Whether a one-to-one or one-to-many style form builder will be yielded depends on whether the normal reader method returns a <em>single</em> object or an <em>array</em> of objects.</p> <h4 id=\"method-i-fields_for-label-One-to-one\">One-to-one</h4> <p>Consider a Person class which returns a <em>single</em> Address from the <code>address</code> reader method and responds to the <code>address_attributes=</code> writer method:</p> <pre class=\"ruby\">class Person\n  def address\n    @address\n  end\n\n  def address_attributes=(attributes)\n    # Process the attributes hash\n  end\nend\n</pre> <p>This model can now be used with a nested <a href=\"formbuilder#method-i-fields_for\">#fields_for</a>, like so:</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :address do |address_fields| %&gt;\n    Street  : &lt;%= address_fields.text_field :street %&gt;\n    Zip code: &lt;%= address_fields.text_field :zip_code %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>When address is already an association on a Person you can use <code>accepts_nested_attributes_for</code> to define the writer method for you:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_one :address\n  accepts_nested_attributes_for :address\nend\n</pre> <p>If you want to destroy the associated model through the form, you have to enable it first using the <code>:allow_destroy</code> option for <code>accepts_nested_attributes_for</code>:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_one :address\n  accepts_nested_attributes_for :address, allow_destroy: true\nend\n</pre> <p>Now, when you use a form element with the <code>_destroy</code> parameter, with a value that evaluates to <code>true</code>, you will destroy the associated model (eg. 1, '1', true, or 'true'):</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :address do |address_fields| %&gt;\n    ...\n    Delete: &lt;%= address_fields.check_box :_destroy %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <h4 id=\"method-i-fields_for-label-One-to-many\">One-to-many</h4> <p>Consider a Person class which returns an <em>array</em> of Project instances from the <code>projects</code> reader method and responds to the <code>projects_attributes=</code> writer method:</p> <pre class=\"ruby\">class Person\n  def projects\n    [@project1, @project2]\n  end\n\n  def projects_attributes=(attributes)\n    # Process the attributes hash\n  end\nend\n</pre> <p>Note that the <code>projects_attributes=</code> writer method is in fact required for <a href=\"formbuilder#method-i-fields_for\">#fields_for</a> to correctly identify <code>:projects</code> as a collection, and the correct indices to be set in the form markup.</p> <p>When projects is already an association on Person you can use <code>accepts_nested_attributes_for</code> to define the writer method for you:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :projects\n  accepts_nested_attributes_for :projects\nend\n</pre> <p>This model can now be used with a nested fields_for. The block given to the nested <a href=\"formbuilder#method-i-fields_for\">#fields_for</a> call will be repeated for each instance in the collection:</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :projects do |project_fields| %&gt;\n    &lt;% if project_fields.object.active? %&gt;\n      Name: &lt;%= project_fields.text_field :name %&gt;\n    &lt;% end %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>It's also possible to specify the instance to be used:</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;% @person.projects.each do |project| %&gt;\n    &lt;% if project.active? %&gt;\n      &lt;%= person_form.fields_for :projects, project do |project_fields| %&gt;\n        Name: &lt;%= project_fields.text_field :name %&gt;\n      &lt;% end %&gt;\n    &lt;% end %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>Or a collection to be used:</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :projects, @active_projects do |project_fields| %&gt;\n    Name: &lt;%= project_fields.text_field :name %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>If you want to destroy any of the associated models through the form, you have to enable it first using the <code>:allow_destroy</code> option for <code>accepts_nested_attributes_for</code>:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :projects\n  accepts_nested_attributes_for :projects, allow_destroy: true\nend\n</pre> <p>This will allow you to specify which models to destroy in the attributes hash by adding a form element for the <code>_destroy</code> parameter with a value that evaluates to <code>true</code> (eg. 1, '1', true, or 'true'):</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :projects do |project_fields| %&gt;\n    Delete: &lt;%= project_fields.check_box :_destroy %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>When a collection is used you might want to know the index of each object into the array. For this purpose, the <code>index</code> method is available in the <a href=\"formbuilder\">FormBuilder</a> object.</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :projects do |project_fields| %&gt;\n    Project #&lt;%= project_fields.index %&gt;\n    ...\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>Note that <a href=\"formbuilder#method-i-fields_for\">#fields_for</a> will automatically generate a hidden field to store the ID of the record. There are circumstances where this hidden field is not needed and you can pass <code>include_id: false</code> to prevent <a href=\"formbuilder#method-i-fields_for\">#fields_for</a> from rendering it automatically.</p> <div class=\"method-source-code\" id=\"fields_for-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1573\ndef fields_for(record_name, record_object = nil, fields_options = {}, &amp;block)\n  fields_options, record_object = record_object, nil if record_object.is_a?(Hash) &amp;&amp; record_object.extractable_options?\n  fields_options[:builder] ||= options[:builder]\n  fields_options[:namespace] = options[:namespace]\n  fields_options[:parent_builder] = self\n\n  case record_name\n  when String, Symbol\n    if nested_attributes_association?(record_name)\n      return fields_for_with_nested_attributes(record_name, record_object, fields_options, block)\n    end\n  else\n    record_object = record_name.is_a?(Array) ? record_name.last : record_name\n    record_name   = model_name_from_record_or_class(record_object).param_key\n  end\n\n  index = if options.has_key?(:index)\n    options[:index]\n  elsif defined?(@auto_index)\n    self.object_name = @object_name.to_s.sub(/\\[\\]$/,\"\")\n    @auto_index\n  end\n\n  record_name = index ? \"#{object_name}[#{index}][#{record_name}]\" : \"#{object_name}[#{record_name}]\"\n  fields_options[:child_index] = index\n\n  @template.fields_for(record_name, record_object, fields_options, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-file_field\"> <span class=\"method-name\">file_field</span><span class=\"method-args\">(method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a file upload input tag tailored for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). Additional options on the input tag can be passed as a hash with <code>options</code>. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.</p> <p>Using this method inside a <code>form_for</code> block will set the enclosing form's encoding to <code>multipart/form-data</code>.</p> <h4 id=\"method-i-file_field-label-Options\">Options</h4> <ul>\n<li> <p>Creates standard HTML attributes for the tag.</p> </li>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p><code>:multiple</code> - If set to true, *in most updated browsers* the user will be allowed to select multiple files.</p> </li>\n<li> <p><code>:accept</code> - If set to one or multiple mime-types, the user will be suggested a filter when choosing a file. You still need to set up model validations.</p> </li>\n</ul> <h4 id=\"method-i-file_field-label-Examples\">Examples</h4> <pre class=\"ruby\">file_field(:user, :avatar)\n# =&gt; &lt;input type=\"file\" id=\"user_avatar\" name=\"user[avatar]\" /&gt;\n\nfile_field(:post, :image, :multiple =&gt; true)\n# =&gt; &lt;input type=\"file\" id=\"post_image\" name=\"post[image]\" multiple=\"true\" /&gt;\n\nfile_field(:post, :attached, accept: 'text/html')\n# =&gt; &lt;input accept=\"text/html\" type=\"file\" id=\"post_attached\" name=\"post[attached]\" /&gt;\n\nfile_field(:post, :image, accept: 'image/png,image/gif,image/jpeg')\n# =&gt; &lt;input type=\"file\" id=\"post_image\" name=\"post[image]\" accept=\"image/png,image/gif,image/jpeg\" /&gt;\n\nfile_field(:attachment, :file, class: 'file_input')\n# =&gt; &lt;input type=\"file\" id=\"attachment_file\" name=\"attachment[file]\" class=\"file_input\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"file_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1782\ndef file_field(method, options = {})\n  self.multipart = true\n  @template.file_field(@object_name, method, objectify_options(options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-grouped_collection_select\"> <span class=\"method-name\">grouped_collection_select</span><span class=\"method-args\">(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps <a href=\"formoptionshelper#method-i-grouped_collection_select\">ActionView::Helpers::FormOptionsHelper#grouped_collection_select</a> for form builders:</p> <pre>&lt;%= form_for @city do |f| %&gt;\n  &lt;%= f.grouped_collection_select :country_id, @continents, :countries, :name, :id, :name %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>Please refer to the documentation of the base helper for details.</p> <div class=\"method-source-code\" id=\"grouped_collection_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 800\ndef grouped_collection_select(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})\n  @template.grouped_collection_select(@object_name, method, collection, group_method, group_label_method, option_key_method, option_value_method, objectify_options(options), @default_options.merge(html_options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-hidden_field\"> <span class=\"method-name\">hidden_field</span><span class=\"method-args\">(method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hidden input tag tailored for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). Additional options on the input tag can be passed as a hash with <code>options</code>. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.</p> <h4 id=\"method-i-hidden_field-label-Examples\">Examples</h4> <pre class=\"ruby\">hidden_field(:signup, :pass_confirm)\n# =&gt; &lt;input type=\"hidden\" id=\"signup_pass_confirm\" name=\"signup[pass_confirm]\" value=\"#{@signup.pass_confirm}\" /&gt;\n\nhidden_field(:post, :tag_list)\n# =&gt; &lt;input type=\"hidden\" id=\"post_tag_list\" name=\"post[tag_list]\" value=\"#{@post.tag_list}\" /&gt;\n\nhidden_field(:user, :token)\n# =&gt; &lt;input type=\"hidden\" id=\"user_token\" name=\"user[token]\" value=\"#{@user.token}\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"hidden_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1749\ndef hidden_field(method, options = {})\n  @emitted_hidden_id = true if method == :id\n  @template.hidden_field(@object_name, method, objectify_options(options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-label\"> <span class=\"method-name\">label</span><span class=\"method-args\">(method, text = nil, options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a label tag tailored for labelling an input field for a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). The text of label will default to the attribute name unless a translation is found in the current <a href=\"../../i18n\">I18n</a> locale (through helpers.label.&lt;modelname&gt;.&lt;attribute&gt;) or you specify it explicitly. Additional options on the label tag can be passed as a hash with <code>options</code>. These options will be tagged onto the HTML as an HTML element attribute as in the example shown, except for the <code>:value</code> option, which is designed to target labels for <a href=\"formbuilder#method-i-radio_button\">#radio_button</a> tags (where the value is used in the ID of the input tag).</p> <h4 id=\"method-i-label-label-Examples\">Examples</h4> <pre class=\"ruby\">label(:post, :title)\n# =&gt; &lt;label for=\"post_title\"&gt;Title&lt;/label&gt;\n</pre> <p>You can localize your labels based on model and attribute names. For example you can define the following in your locale (e.g. en.yml)</p> <pre>helpers:\n  label:\n    post:\n      body: \"Write your entire text here\"</pre> <p>Which then will result in</p> <pre class=\"ruby\">label(:post, :body)\n# =&gt; &lt;label for=\"post_body\"&gt;Write your entire text here&lt;/label&gt;\n</pre> <p>Localization can also be based purely on the translation of the attribute-name (if you are using <a href=\"../../activerecord\">ActiveRecord</a>):</p> <pre>activerecord:\n  attributes:\n    post:\n      cost: \"Total cost\"\n\nlabel(:post, :cost)\n# =&gt; &lt;label for=\"post_cost\"&gt;Total cost&lt;/label&gt;\n\nlabel(:post, :title, \"A short title\")\n# =&gt; &lt;label for=\"post_title\"&gt;A short title&lt;/label&gt;\n\nlabel(:post, :title, \"A short title\", class: \"title_label\")\n# =&gt; &lt;label for=\"post_title\" class=\"title_label\"&gt;A short title&lt;/label&gt;\n\nlabel(:post, :privacy, \"Public Post\", value: \"public\")\n# =&gt; &lt;label for=\"post_privacy_public\"&gt;Public Post&lt;/label&gt;\n\nlabel(:post, :terms) do\n  'Accept &lt;a href=\"/terms\"&gt;Terms&lt;/a&gt;.'.html_safe\nend</pre> <div class=\"method-source-code\" id=\"label-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1649\ndef label(method, text = nil, options = {}, &amp;block)\n  @template.label(@object_name, method, text, objectify_options(options), &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-multipart-3D\"> <span class=\"method-name\">multipart=</span><span class=\"method-args\">(multipart)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"multipart-3D-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1285\ndef multipart=(multipart)\n  @multipart = multipart\n\n  if parent_builder = @options[:parent_builder]\n    parent_builder.multipart = multipart\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-radio_button\"> <span class=\"method-name\">radio_button</span><span class=\"method-args\">(method, tag_value, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a radio button tag for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). If the current value of <code>method</code> is <code>tag_value</code> the radio button will be checked.</p> <p>To force the radio button to be checked pass <code>checked: true</code> in the <code>options</code> hash. You may pass HTML options there as well.</p> <pre class=\"ruby\"># Let's say that @post.category returns \"rails\":\nradio_button(\"post\", \"category\", \"rails\")\nradio_button(\"post\", \"category\", \"java\")\n# =&gt; &lt;input type=\"radio\" id=\"post_category_rails\" name=\"post[category]\" value=\"rails\" checked=\"checked\" /&gt;\n#    &lt;input type=\"radio\" id=\"post_category_java\" name=\"post[category]\" value=\"java\" /&gt;\n\nradio_button(\"user\", \"receive_newsletter\", \"yes\")\nradio_button(\"user\", \"receive_newsletter\", \"no\")\n# =&gt; &lt;input type=\"radio\" id=\"user_receive_newsletter_yes\" name=\"user[receive_newsletter]\" value=\"yes\" /&gt;\n#    &lt;input type=\"radio\" id=\"user_receive_newsletter_no\" name=\"user[receive_newsletter]\" value=\"no\" checked=\"checked\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"radio_button-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1730\ndef radio_button(method, tag_value, options = {})\n  @template.radio_button(@object_name, method, tag_value, objectify_options(options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select\"> <span class=\"method-name\">select</span><span class=\"method-args\">(method, choices = nil, options = {}, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps <a href=\"formoptionshelper#method-i-select\">ActionView::Helpers::FormOptionsHelper#select</a> for form builders:</p> <pre>&lt;%= form_for @post do |f| %&gt;\n  &lt;%= f.select :person_id, Person.all.collect { |p| [ p.name, p.id ] }, include_blank: true %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>Please refer to the documentation of the base helper for details.</p> <div class=\"method-source-code\" id=\"select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 776\ndef select(method, choices = nil, options = {}, html_options = {}, &amp;block)\n  @template.select(@object_name, method, choices, objectify_options(options), @default_options.merge(html_options), &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-submit\"> <span class=\"method-name\">submit</span><span class=\"method-args\">(value=nil, options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add the submit button for the given form. When no value is given, it checks if the object is a new resource or not to create the proper label:</p> <pre>&lt;%= form_for @post do |f| %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>In the example above, if @post is a new record, it will use “Create Post” as submit button label, otherwise, it uses “Update Post”.</p> <p>Those labels can be customized using <a href=\"../../i18n\">I18n</a>, under the helpers.submit key and accept the %{model} as translation interpolation:</p> <pre>en:\n  helpers:\n    submit:\n      create: \"Create a %{model}\"\n      update: \"Confirm changes to %{model}\"</pre> <p>It also searches for a key specific for the given object:</p> <pre>en:\n  helpers:\n    submit:\n      post:\n        create: \"Add %{model}\"</pre> <div class=\"method-source-code\" id=\"submit-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1814\ndef submit(value=nil, options={})\n  value, options = nil, value if value.is_a?(Hash)\n  value ||= submit_default_value\n  @template.submit_tag(value, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time_select\"> <span class=\"method-name\">time_select</span><span class=\"method-args\">(method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps <a href=\"datehelper#method-i-time_select\">ActionView::Helpers::DateHelper#time_select</a> for form builders:</p> <pre>&lt;%= form_for @race do |f| %&gt;\n  &lt;%= f.time_select :average_lap %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>Please refer to the documentation of the base helper for details.</p> <div class=\"method-source-code\" id=\"time_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/date_helper.rb, line 1081\ndef time_select(method, options = {}, html_options = {})\n  @template.time_select(@object_name, method, objectify_options(options), html_options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time_zone_select\"> <span class=\"method-name\">time_zone_select</span><span class=\"method-args\">(method, priority_zones = nil, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps <a href=\"formoptionshelper#method-i-time_zone_select\">ActionView::Helpers::FormOptionsHelper#time_zone_select</a> for form builders:</p> <pre>&lt;%= form_for @user do |f| %&gt;\n  &lt;%= f.time_zone_select :time_zone, nil, include_blank: true %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>Please refer to the documentation of the base helper for details.</p> <div class=\"method-source-code\" id=\"time_zone_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 812\ndef time_zone_select(method, priority_zones = nil, options = {}, html_options = {})\n  @template.time_zone_select(@object_name, method, priority_zones, objectify_options(options), @default_options.merge(html_options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_model\"> <span class=\"method-name\">to_model</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_model-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1301\ndef to_model\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_partial_path\"> <span class=\"method-name\">to_partial_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_partial_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1297\ndef to_partial_path\n  self.class._to_partial_path\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/formhelper":"<h1 id=\"module-ActionView::Helpers::FormHelper\" class=\"module\"> module ActionView::Helpers::FormHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"formtaghelper\">ActionView::Helpers::FormTagHelper</a>, <a class=\"include\" href=\"urlhelper\">ActionView::Helpers::UrlHelper</a>, <a class=\"include\" href=\"../modelnaming\">ActionView::ModelNaming</a>\n</dd>\n</dl> <section class=\"description\"> <p>Form helpers are designed to make working with resources much easier compared to using vanilla HTML.</p> <p>Typically, a form designed to create or update a resource reflects the identity of the resource in several ways: (i) the url that the form is sent to (the form element's <code>action</code> attribute) should result in a request being routed to the appropriate controller action (with the appropriate <code>:id</code> parameter in the case of an existing resource), (ii) input fields should be named in such a way that in the controller their values appear in the appropriate places within the <code>params</code> hash, and (iii) for an existing record, when the form is initially displayed, input fields corresponding to attributes of the resource should show the current values of those attributes.</p> <p>In Rails, this is usually achieved by creating the form using <code>form_for</code> and a number of related helper methods. <code>form_for</code> generates an appropriate <code>form</code> tag and yields a form builder object that knows the model the form is about. Input fields are created by calling methods defined on the form builder, which means they are able to generate the appropriate names and default values corresponding to the model attributes, as well as convenient IDs, etc. Conventions in the generated field names allow controllers to receive form data nicely structured in <code>params</code> with no effort on your side.</p> <p>For example, to create a new person you typically set up a new instance of <code>Person</code> in the <code>PeopleController#new</code> action, <code>@person</code>, and in the view template pass that object to <code>form_for</code>:</p> <pre>&lt;%= form_for @person do |f| %&gt;\n  &lt;%= f.label :first_name %&gt;:\n  &lt;%= f.text_field :first_name %&gt;&lt;br /&gt;\n\n  &lt;%= f.label :last_name %&gt;:\n  &lt;%= f.text_field :last_name %&gt;&lt;br /&gt;\n\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>The HTML generated for this would be (modulus formatting):</p> <pre>&lt;form action=\"/people\" class=\"new_person\" id=\"new_person\" method=\"post\"&gt;\n  &lt;input name=\"authenticity_token\" type=\"hidden\" value=\"NrOp5bsjoLRuK8IW5+dQEYjKGUJDe7TQoZVvq95Wteg=\" /&gt;\n  &lt;label for=\"person_first_name\"&gt;First name&lt;/label&gt;:\n  &lt;input id=\"person_first_name\" name=\"person[first_name]\" type=\"text\" /&gt;&lt;br /&gt;\n\n  &lt;label for=\"person_last_name\"&gt;Last name&lt;/label&gt;:\n  &lt;input id=\"person_last_name\" name=\"person[last_name]\" type=\"text\" /&gt;&lt;br /&gt;\n\n  &lt;input name=\"commit\" type=\"submit\" value=\"Create Person\" /&gt;\n&lt;/form&gt;</pre> <p>As you see, the HTML reflects knowledge about the resource in several spots, like the path the form should be submitted to, or the names of the input fields.</p> <p>In particular, thanks to the conventions followed in the generated field names, the controller gets a nested hash <code>params[:person]</code> with the person attributes set in the form. That hash is ready to be passed to <code>Person.create</code>:</p> <pre class=\"ruby\">if @person = Person.create(params[:person])\n  # success\nelse\n  # error handling\nend\n</pre> <p>Interestingly, the exact same view code in the previous example can be used to edit a person. If <code>@person</code> is an existing record with name “John Smith” and ID 256, the code above as is would yield instead:</p> <pre>&lt;form action=\"/people/256\" class=\"edit_person\" id=\"edit_person_256\" method=\"post\"&gt;\n  &lt;input name=\"_method\" type=\"hidden\" value=\"patch\" /&gt;\n  &lt;input name=\"authenticity_token\" type=\"hidden\" value=\"NrOp5bsjoLRuK8IW5+dQEYjKGUJDe7TQoZVvq95Wteg=\" /&gt;\n  &lt;label for=\"person_first_name\"&gt;First name&lt;/label&gt;:\n  &lt;input id=\"person_first_name\" name=\"person[first_name]\" type=\"text\" value=\"John\" /&gt;&lt;br /&gt;\n\n  &lt;label for=\"person_last_name\"&gt;Last name&lt;/label&gt;:\n  &lt;input id=\"person_last_name\" name=\"person[last_name]\" type=\"text\" value=\"Smith\" /&gt;&lt;br /&gt;\n\n  &lt;input name=\"commit\" type=\"submit\" value=\"Update Person\" /&gt;\n&lt;/form&gt;</pre> <p>Note that the endpoint, default values, and submit button label are tailored for <code>@person</code>. That works that way because the involved helpers know whether the resource is a new record or not, and generate HTML accordingly.</p> <p>The controller would receive the form data again in <code>params[:person]</code>, ready to be passed to <code>Person#update</code>:</p> <pre class=\"ruby\">if @person.update(params[:person])\n  # success\nelse\n  # error handling\nend\n</pre> <p>That's how you typically work with resources.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-check_box\"> <span class=\"method-name\">check_box</span><span class=\"method-args\">(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a checkbox tag tailored for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). This object must be an instance object (@object) and not a local object. It's intended that <code>method</code> returns an integer and if that integer is above zero, then the checkbox is checked. Additional options on the input tag can be passed as a hash with <code>options</code>. The <code>checked_value</code> defaults to 1 while the default <code>unchecked_value</code> is set to 0 which is convenient for boolean values.</p> <h4 id=\"method-i-check_box-label-Gotcha\">Gotcha</h4> <p>The HTML specification says unchecked check boxes are not successful, and thus web browsers do not send them. Unfortunately this introduces a gotcha: if an <code>Invoice</code> model has a <code>paid</code> flag, and in the form that edits a paid invoice the user unchecks its check box, no <code>paid</code> parameter is sent. So, any mass-assignment idiom like</p> <pre class=\"ruby\">@invoice.update(params[:invoice])\n</pre> <p>wouldn't update the flag.</p> <p>To prevent this the helper generates an auxiliary hidden field before the very check box. The hidden field has the same name and its attributes mimic an unchecked check box.</p> <p>This way, the client either sends only the hidden field (representing the check box is unchecked), or both fields. Since the HTML specification says key/value pairs have to be sent in the same order they appear in the form, and parameters extraction gets the last occurrence of any repeated key in the query string, that works for ordinary forms.</p> <p>Unfortunately that workaround does not work when the check box goes within an array-like parameter, as in</p> <pre>&lt;%= fields_for \"project[invoice_attributes][]\", invoice, index: nil do |form| %&gt;\n  &lt;%= form.check_box :paid %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>because parameter name repetition is precisely what Rails seeks to distinguish the elements of the array. For each item with a checked check box you get an extra ghost item with only that attribute, assigned to “0”.</p> <p>In that case it is preferable to either use <code>check_box_tag</code> or to use hashes instead of arrays.</p> <pre class=\"ruby\"># Let's say that @post.validated? is 1:\ncheck_box(\"post\", \"validated\")\n# =&gt; &lt;input name=\"post[validated]\" type=\"hidden\" value=\"0\" /&gt;\n#    &lt;input checked=\"checked\" type=\"checkbox\" id=\"post_validated\" name=\"post[validated]\" value=\"1\" /&gt;\n\n# Let's say that @puppy.gooddog is \"no\":\ncheck_box(\"puppy\", \"gooddog\", {}, \"yes\", \"no\")\n# =&gt; &lt;input name=\"puppy[gooddog]\" type=\"hidden\" value=\"no\" /&gt;\n#    &lt;input type=\"checkbox\" id=\"puppy_gooddog\" name=\"puppy[gooddog]\" value=\"yes\" /&gt;\n\ncheck_box(\"eula\", \"accepted\", { class: 'eula_check' }, \"yes\", \"no\")\n# =&gt; &lt;input name=\"eula[accepted]\" type=\"hidden\" value=\"no\" /&gt;\n#    &lt;input type=\"checkbox\" class=\"eula_check\" id=\"eula_accepted\" name=\"eula[accepted]\" value=\"yes\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"check_box-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 945\ndef check_box(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")\n  Tags::CheckBox.new(object_name, method, self, checked_value, unchecked_value, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-color_field\"> <span class=\"method-name\">color_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type “color”.</p> <pre class=\"ruby\">color_field(\"car\", \"color\")\n# =&gt; &lt;input id=\"car_color\" name=\"car[color]\" type=\"color\" value=\"#000000\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"color_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 974\ndef color_field(object_name, method, options = {})\n  Tags::ColorField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-date_field\"> <span class=\"method-name\">date_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type ���date”.</p> <pre class=\"ruby\">date_field(\"user\", \"born_on\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"date\" /&gt;\n</pre> <p>The default value is generated by trying to call “to_date” on the object's value, which makes it behave as expected for instances of <a href=\"../../datetime\">DateTime</a> and <a href=\"../../activesupport/timewithzone\">ActiveSupport::TimeWithZone</a>. You can still override that by passing the “value” option explicitly, e.g.</p> <pre class=\"ruby\">@user.born_on = Date.new(1984, 1, 27)\ndate_field(\"user\", \"born_on\", value: \"1984-05-12\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"date\" value=\"1984-05-12\" /&gt;\n</pre> <p>You can create values for the “min” and “max” attributes by passing instances of <a href=\"../../date\">Date</a> or <a href=\"../../time\">Time</a> to the options hash.</p> <pre class=\"ruby\">date_field(\"user\", \"born_on\", min: Date.today)\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"date\" min=\"2014-05-20\" /&gt;\n</pre> <p>Alternatively, you can pass a <a href=\"../../string\">String</a> formatted as an ISO8601 date as the values for “min” and “max.”</p> <pre class=\"ruby\">date_field(\"user\", \"born_on\", min: \"2014-05-20\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"date\" min=\"2014-05-20\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"date_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1038\ndef date_field(object_name, method, options = {})\n  Tags::DateField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-datetime_field\"> <span class=\"method-name\">datetime_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type “datetime”.</p> <pre class=\"ruby\">datetime_field(\"user\", \"born_on\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"datetime\" /&gt;\n</pre> <p>The default value is generated by trying to call <code>strftime</code> with “%Y-%m-%dT%T.%L%z” on the object's value, which makes it behave as expected for instances of <a href=\"../../datetime\">DateTime</a> and <a href=\"../../activesupport/timewithzone\">ActiveSupport::TimeWithZone</a>.</p> <pre class=\"ruby\">@user.born_on = Date.new(1984, 1, 12)\ndatetime_field(\"user\", \"born_on\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"datetime\" value=\"1984-01-12T00:00:00.000+0000\" /&gt;\n</pre> <p>You can create values for the “min” and “max” attributes by passing instances of <a href=\"../../date\">Date</a> or <a href=\"../../time\">Time</a> to the options hash.</p> <pre class=\"ruby\">datetime_field(\"user\", \"born_on\", min: Date.today)\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"datetime\" min=\"2014-05-20T00:00:00.000+0000\" /&gt;\n</pre> <p>Alternatively, you can pass a <a href=\"../../string\">String</a> formatted as an ISO8601 datetime with UTC offset as the values for “min” and “max.”</p> <pre class=\"ruby\">datetime_field(\"user\", \"born_on\", min: \"2014-05-20T00:00:00+0000\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"datetime\" min=\"2014-05-20T00:00:00.000+0000\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"datetime_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1096\ndef datetime_field(object_name, method, options = {})\n  Tags::DatetimeField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-datetime_local_field\"> <span class=\"method-name\">datetime_local_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type “datetime-local”.</p> <pre class=\"ruby\">datetime_local_field(\"user\", \"born_on\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"datetime-local\" /&gt;\n</pre> <p>The default value is generated by trying to call <code>strftime</code> with “%Y-%m-%dT%T” on the object's value, which makes it behave as expected for instances of <a href=\"../../datetime\">DateTime</a> and <a href=\"../../activesupport/timewithzone\">ActiveSupport::TimeWithZone</a>.</p> <pre class=\"ruby\">@user.born_on = Date.new(1984, 1, 12)\ndatetime_local_field(\"user\", \"born_on\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"datetime-local\" value=\"1984-01-12T00:00:00\" /&gt;\n</pre> <p>You can create values for the “min” and “max” attributes by passing instances of <a href=\"../../date\">Date</a> or <a href=\"../../time\">Time</a> to the options hash.</p> <pre class=\"ruby\">datetime_local_field(\"user\", \"born_on\", min: Date.today)\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"datetime-local\" min=\"2014-05-20T00:00:00.000\" /&gt;\n</pre> <p>Alternatively, you can pass a <a href=\"../../string\">String</a> formatted as an ISO8601 datetime as the values for “min” and “max.”</p> <pre class=\"ruby\">datetime_local_field(\"user\", \"born_on\", min: \"2014-05-20T00:00:00\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"datetime-local\" min=\"2014-05-20T00:00:00.000\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"datetime_local_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1125\ndef datetime_local_field(object_name, method, options = {})\n  Tags::DatetimeLocalField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-email_field\"> <span class=\"method-name\">email_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type “email”.</p> <pre class=\"ruby\">email_field(\"user\", \"address\")\n# =&gt; &lt;input id=\"user_address\" name=\"user[address]\" type=\"email\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"email_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1177\ndef email_field(object_name, method, options = {})\n  Tags::EmailField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fields_for\"> <span class=\"method-name\">fields_for</span><span class=\"method-args\">(record_name, record_object = nil, options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a scope around a specific model object like <a href=\"formhelper#method-i-form_for\">#form_for</a>, but doesn't create the form tags themselves. This makes <a href=\"formhelper#method-i-fields_for\">#fields_for</a> suitable for specifying additional model objects in the same form.</p> <p>Although the usage and purpose of <code>fields_for</code> is similar to <code>form_for</code>'s, its method signature is slightly different. Like <code>form_for</code>, it yields a <a href=\"formbuilder\">FormBuilder</a> object associated with a particular model object to a block, and within the block allows methods to be called on the builder to generate fields associated with the model object. Fields may reflect a model object in two ways - how they are named (hence how submitted values appear within the <code>params</code> hash in the controller) and what default values are shown when the form the fields appear in is first displayed. In order for both of these features to be specified independently, both an object name (represented by either a symbol or string) and the object itself can be passed to the method separately -</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  First name: &lt;%= person_form.text_field :first_name %&gt;\n  Last name : &lt;%= person_form.text_field :last_name %&gt;\n\n  &lt;%= fields_for :permission, @person.permission do |permission_fields| %&gt;\n    Admin?  : &lt;%= permission_fields.check_box :admin %&gt;\n  &lt;% end %&gt;\n\n  &lt;%= person_form.submit %&gt;\n&lt;% end %&gt;</pre> <p>In this case, the checkbox field will be represented by an HTML <code>input</code> tag with the <code>name</code> attribute <code>permission[admin]</code>, and the submitted value will appear in the controller as <code>params[:permission][:admin]</code>. If <code>@person.permission</code> is an existing record with an attribute <code>admin</code>, the initial state of the checkbox when first displayed will reflect the value of <code>@person.permission.admin</code>.</p> <p>Often this can be simplified by passing just the name of the model object to <code>fields_for</code> -</p> <pre>&lt;%= fields_for :permission do |permission_fields| %&gt;\n  Admin?: &lt;%= permission_fields.check_box :admin %&gt;\n&lt;% end %&gt;</pre> <p>…in which case, if <code>:permission</code> also happens to be the name of an instance variable <code>@permission</code>, the initial state of the input field will reflect the value of that variable's attribute <code>@permission.admin</code>.</p> <p>Alternatively, you can pass just the model object itself (if the first argument isn't a string or symbol <code>fields_for</code> will realize that the name has been omitted) -</p> <pre>&lt;%= fields_for @person.permission do |permission_fields| %&gt;\n  Admin?: &lt;%= permission_fields.check_box :admin %&gt;\n&lt;% end %&gt;</pre> <p>and <code>fields_for</code> will derive the required name of the field from the <em>class</em> of the model object, e.g. if <code>@person.permission</code>, is of class <code>Permission</code>, the field will still be named <code>permission[admin]</code>.</p> <p>Note: This also works for the methods in FormOptionHelper and <a href=\"datehelper\">DateHelper</a> that are designed to work with an object as base, like FormOptionHelper#collection_select and <a href=\"datehelper#method-i-datetime_select\">ActionView::Helpers::DateHelper#datetime_select</a>.</p> <h3 id=\"method-i-fields_for-label-Nested+Attributes+Examples\">Nested Attributes Examples</h3> <p>When the object belonging to the current scope has a nested attribute writer for a certain attribute, <a href=\"formhelper#method-i-fields_for\">#fields_for</a> will yield a new scope for that attribute. This allows you to create forms that set or change the attributes of a parent object and its associations in one go.</p> <p>Nested attribute writers are normal setter methods named after an association. The most common way of defining these writers is either with <code>accepts_nested_attributes_for</code> in a model definition or by defining a method with the proper name. For example: the attribute writer for the association <code>:address</code> is called <code>address_attributes=</code>.</p> <p>Whether a one-to-one or one-to-many style form builder will be yielded depends on whether the normal reader method returns a <em>single</em> object or an <em>array</em> of objects.</p> <h4 id=\"method-i-fields_for-label-One-to-one\">One-to-one</h4> <p>Consider a Person class which returns a <em>single</em> Address from the <code>address</code> reader method and responds to the <code>address_attributes=</code> writer method:</p> <pre class=\"ruby\">class Person\n  def address\n    @address\n  end\n\n  def address_attributes=(attributes)\n    # Process the attributes hash\n  end\nend\n</pre> <p>This model can now be used with a nested <a href=\"formhelper#method-i-fields_for\">#fields_for</a>, like so:</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :address do |address_fields| %&gt;\n    Street  : &lt;%= address_fields.text_field :street %&gt;\n    Zip code: &lt;%= address_fields.text_field :zip_code %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>When address is already an association on a Person you can use <code>accepts_nested_attributes_for</code> to define the writer method for you:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_one :address\n  accepts_nested_attributes_for :address\nend\n</pre> <p>If you want to destroy the associated model through the form, you have to enable it first using the <code>:allow_destroy</code> option for <code>accepts_nested_attributes_for</code>:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_one :address\n  accepts_nested_attributes_for :address, allow_destroy: true\nend\n</pre> <p>Now, when you use a form element with the <code>_destroy</code> parameter, with a value that evaluates to <code>true</code>, you will destroy the associated model (eg. 1, '1', true, or 'true'):</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :address do |address_fields| %&gt;\n    ...\n    Delete: &lt;%= address_fields.check_box :_destroy %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <h4 id=\"method-i-fields_for-label-One-to-many\">One-to-many</h4> <p>Consider a Person class which returns an <em>array</em> of Project instances from the <code>projects</code> reader method and responds to the <code>projects_attributes=</code> writer method:</p> <pre class=\"ruby\">class Person\n  def projects\n    [@project1, @project2]\n  end\n\n  def projects_attributes=(attributes)\n    # Process the attributes hash\n  end\nend\n</pre> <p>Note that the <code>projects_attributes=</code> writer method is in fact required for <a href=\"formhelper#method-i-fields_for\">#fields_for</a> to correctly identify <code>:projects</code> as a collection, and the correct indices to be set in the form markup.</p> <p>When projects is already an association on Person you can use <code>accepts_nested_attributes_for</code> to define the writer method for you:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :projects\n  accepts_nested_attributes_for :projects\nend\n</pre> <p>This model can now be used with a nested fields_for. The block given to the nested <a href=\"formhelper#method-i-fields_for\">#fields_for</a> call will be repeated for each instance in the collection:</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :projects do |project_fields| %&gt;\n    &lt;% if project_fields.object.active? %&gt;\n      Name: &lt;%= project_fields.text_field :name %&gt;\n    &lt;% end %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>It's also possible to specify the instance to be used:</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;% @person.projects.each do |project| %&gt;\n    &lt;% if project.active? %&gt;\n      &lt;%= person_form.fields_for :projects, project do |project_fields| %&gt;\n        Name: &lt;%= project_fields.text_field :name %&gt;\n      &lt;% end %&gt;\n    &lt;% end %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>Or a collection to be used:</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :projects, @active_projects do |project_fields| %&gt;\n    Name: &lt;%= project_fields.text_field :name %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>If you want to destroy any of the associated models through the form, you have to enable it first using the <code>:allow_destroy</code> option for <code>accepts_nested_attributes_for</code>:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :projects\n  accepts_nested_attributes_for :projects, allow_destroy: true\nend\n</pre> <p>This will allow you to specify which models to destroy in the attributes hash by adding a form element for the <code>_destroy</code> parameter with a value that evaluates to <code>true</code> (eg. 1, '1', true, or 'true'):</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :projects do |project_fields| %&gt;\n    Delete: &lt;%= project_fields.check_box :_destroy %&gt;\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>When a collection is used you might want to know the index of each object into the array. For this purpose, the <code>index</code> method is available in the <a href=\"formbuilder\">FormBuilder</a> object.</p> <pre>&lt;%= form_for @person do |person_form| %&gt;\n  ...\n  &lt;%= person_form.fields_for :projects do |project_fields| %&gt;\n    Project #&lt;%= project_fields.index %&gt;\n    ...\n  &lt;% end %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>Note that <a href=\"formhelper#method-i-fields_for\">#fields_for</a> will automatically generate a hidden field to store the ID of the record. There are circumstances where this hidden field is not needed and you can pass <code>include_id: false</code> to prevent <a href=\"formhelper#method-i-fields_for\">#fields_for</a> from rendering it automatically.</p> <div class=\"method-source-code\" id=\"fields_for-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 712\ndef fields_for(record_name, record_object = nil, options = {}, &amp;block)\n  builder = instantiate_builder(record_name, record_object, options)\n  capture(builder, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-file_field\"> <span class=\"method-name\">file_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a file upload input tag tailored for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). Additional options on the input tag can be passed as a hash with <code>options</code>. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.</p> <p>Using this method inside a <code>form_for</code> block will set the enclosing form's encoding to <code>multipart/form-data</code>.</p> <h4 id=\"method-i-file_field-label-Options\">Options</h4> <ul>\n<li> <p>Creates standard HTML attributes for the tag.</p> </li>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p><code>:multiple</code> - If set to true, *in most updated browsers* the user will be allowed to select multiple files.</p> </li>\n<li> <p><code>:accept</code> - If set to one or multiple mime-types, the user will be suggested a filter when choosing a file. You still need to set up model validations.</p> </li>\n</ul> <h4 id=\"method-i-file_field-label-Examples\">Examples</h4> <pre class=\"ruby\">file_field(:user, :avatar)\n# =&gt; &lt;input type=\"file\" id=\"user_avatar\" name=\"user[avatar]\" /&gt;\n\nfile_field(:post, :image, :multiple =&gt; true)\n# =&gt; &lt;input type=\"file\" id=\"post_image\" name=\"post[image]\" multiple=\"true\" /&gt;\n\nfile_field(:post, :attached, accept: 'text/html')\n# =&gt; &lt;input accept=\"text/html\" type=\"file\" id=\"post_attached\" name=\"post[attached]\" /&gt;\n\nfile_field(:post, :image, accept: 'image/png,image/gif,image/jpeg')\n# =&gt; &lt;input type=\"file\" id=\"post_image\" name=\"post[image]\" accept=\"image/png,image/gif,image/jpeg\" /&gt;\n\nfile_field(:attachment, :file, class: 'file_input')\n# =&gt; &lt;input type=\"file\" id=\"attachment_file\" name=\"attachment[file]\" class=\"file_input\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"file_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 857\ndef file_field(object_name, method, options = {})\n  Tags::FileField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-form_for\"> <span class=\"method-name\">form_for</span><span class=\"method-args\">(record, options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a form that allows the user to create or update the attributes of a specific model object.</p> <p>The method can be used in several slightly different ways, depending on how much you wish to rely on Rails to infer automatically from the model how the form should be constructed. For a generic model object, a form can be created by passing <code>form_for</code> a string or symbol representing the object we are concerned with:</p> <pre>&lt;%= form_for :person do |f| %&gt;\n  First name: &lt;%= f.text_field :first_name %&gt;&lt;br /&gt;\n  Last name : &lt;%= f.text_field :last_name %&gt;&lt;br /&gt;\n  Biography : &lt;%= f.text_area :biography %&gt;&lt;br /&gt;\n  Admin?    : &lt;%= f.check_box :admin %&gt;&lt;br /&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>The variable <code>f</code> yielded to the block is a <a href=\"formbuilder\">FormBuilder</a> object that incorporates the knowledge about the model object represented by <code>:person</code> passed to <code>form_for</code>. Methods defined on the <a href=\"formbuilder\">FormBuilder</a> are used to generate fields bound to this model. Thus, for example,</p> <pre>&lt;%= f.text_field :first_name %&gt;</pre> <p>will get expanded to</p> <pre>&lt;%= text_field :person, :first_name %&gt;</pre> <p>which results in an HTML <code>&lt;input&gt;</code> tag whose <code>name</code> attribute is <code>person[first_name]</code>. This means that when the form is submitted, the value entered by the user will be available in the controller as <code>params[:person][:first_name]</code>.</p> <p>For fields generated in this way using the <a href=\"formbuilder\">FormBuilder</a>, if <code>:person</code> also happens to be the name of an instance variable <code>@person</code>, the default value of the field shown when the form is initially displayed (e.g. in the situation where you are editing an existing record) will be the value of the corresponding attribute of <code>@person</code>.</p> <p>The rightmost argument to <code>form_for</code> is an optional hash of options -</p> <ul>\n<li> <p><code>:url</code> - The URL the form is to be submitted to. This may be represented in the same way as values passed to <code>url_for</code> or <code>link_to</code>. So for example you may use a named route directly. When the model is represented by a string or symbol, as in the example above, if the <code>:url</code> option is not specified, by default the form will be sent back to the current url (We will describe below an alternative resource-oriented usage of <code>form_for</code> in which the URL does not need to be specified explicitly).</p> </li>\n<li> <p><code>:namespace</code> - A namespace for your form to ensure uniqueness of id attributes on form elements. The namespace attribute will be prefixed with underscore on the generated HTML id.</p> </li>\n<li> <p><code>:method</code> - The method to use when submitting the form, usually either “get” or “post”. If “patch”, “put”, “delete”, or another verb is used, a hidden input with name <code>_method</code> is added to simulate the verb over post.</p> </li>\n<li> <p><code>:authenticity_token</code> - Authenticity token to use in the form. Use only if you need to pass custom authenticity token string, or to not add authenticity_token field at all (by passing <code>false</code>). Remote forms may omit the embedded authenticity token by setting <code>config.action_view.embed_authenticity_token_in_remote_forms =\nfalse</code>. This is helpful when you're fragment-caching the form. Remote forms get the authenticity token from the <code>meta</code> tag, so embedding is unnecessary unless you support browsers without JavaScript.</p> </li>\n<li> <p><code>:remote</code> - If set to true, will allow the Unobtrusive JavaScript drivers to control the submit behavior. By default this behavior is an ajax submit.</p> </li>\n<li> <p><code>:enforce_utf8</code> - If set to false, a hidden input with name utf8 is not output.</p> </li>\n<li> <p><code>:html</code> - Optional HTML attributes for the form tag.</p> </li>\n</ul> <p>Also note that <code>form_for</code> doesn't create an exclusive scope. It's still possible to use both the stand-alone <a href=\"formhelper\">FormHelper</a> methods and methods from <a href=\"formtaghelper\">FormTagHelper</a>. For example:</p> <pre>&lt;%= form_for :person do |f| %&gt;\n  First name: &lt;%= f.text_field :first_name %&gt;\n  Last name : &lt;%= f.text_field :last_name %&gt;\n  Biography : &lt;%= text_area :person, :biography %&gt;\n  Admin?    : &lt;%= check_box_tag \"person[admin]\", \"1\", @person.company.admin? %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>This also works for the methods in FormOptionHelper and <a href=\"datehelper\">DateHelper</a> that are designed to work with an object as base, like FormOptionHelper#collection_select and <a href=\"datehelper#method-i-datetime_select\">ActionView::Helpers::DateHelper#datetime_select</a>.</p> <h3 id=\"method-i-form_for-label-23form_for+with+a+model+object\">\n<a href=\"formhelper#method-i-form_for\">form_for</a> with a model object</h3> <p>In the examples above, the object to be created or edited was represented by a symbol passed to <code>form_for</code>, and we noted that a string can also be used equivalently. It is also possible, however, to pass a model object itself to <code>form_for</code>. For example, if <code>@post</code> is an existing record you wish to edit, you can create the form using</p> <pre>&lt;%= form_for @post do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>This behaves in almost the same way as outlined previously, with a couple of small exceptions. First, the prefix used to name the input elements within the form (hence the key that denotes them in the <code>params</code> hash) is actually derived from the object's <em>class</em>, e.g. <code>params[:post]</code> if the object's class is <code>Post</code>. However, this can be overwritten using the <code>:as</code> option, e.g. -</p> <pre>&lt;%= form_for(@person, as: :client) do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>would result in <code>params[:client]</code>.</p> <p>Secondly, the field values shown when the form is initially displayed are taken from the attributes of the object passed to <code>form_for</code>, regardless of whether the object is an instance variable. So, for example, if we had a <em>local</em> variable <code>post</code> representing an existing record,</p> <pre>&lt;%= form_for post do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>would produce a form with fields whose initial state reflect the current values of the attributes of <code>post</code>.</p> <h3 id=\"method-i-form_for-label-Resource-oriented+style\">Resource-oriented style</h3> <p>In the examples just shown, although not indicated explicitly, we still need to use the <code>:url</code> option in order to specify where the form is going to be sent. However, further simplification is possible if the record passed to <code>form_for</code> is a <em>resource</em>, i.e. it corresponds to a set of RESTful routes, e.g. defined using the <code>resources</code> method in <code>config/routes.rb</code>. In this case Rails will simply infer the appropriate URL from the record itself. For example,</p> <pre>&lt;%= form_for @post do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>is then equivalent to something like:</p> <pre>&lt;%= form_for @post, as: :post, url: post_path(@post), method: :patch, html: { class: \"edit_post\", id: \"edit_post_45\" } do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>And for a new record</p> <pre>&lt;%= form_for(Post.new) do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>is equivalent to something like:</p> <pre>&lt;%= form_for @post, as: :post, url: posts_path, html: { class: \"new_post\", id: \"new_post\" } do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>However you can still overwrite individual conventions, such as:</p> <pre>&lt;%= form_for(@post, url: super_posts_path) do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>You can also set the answer format, like this:</p> <pre>&lt;%= form_for(@post, format: :json) do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>For namespaced routes, like <code>admin_post_url</code>:</p> <pre>&lt;%= form_for([:admin, @post]) do |f| %&gt;\n ...\n&lt;% end %&gt;</pre> <p>If your resource has associations defined, for example, you want to add comments to the document given that the routes are set correctly:</p> <pre>&lt;%= form_for([@document, @comment]) do |f| %&gt;\n ...\n&lt;% end %&gt;</pre> <p>Where <code>@document = Document.find(params[:id])</code> and <code>@comment = Comment.new</code>.</p> <h3 id=\"method-i-form_for-label-Setting+the+method\">Setting the method</h3> <p>You can force the form to use the full array of HTTP verbs by setting</p> <pre>method: (:get|:post|:patch|:put|:delete)</pre> <p>in the options hash. If the verb is not GET or POST, which are natively supported by HTML forms, the form will be set to POST and a hidden input called _method will carry the intended verb for the server to interpret.</p> <h3 id=\"method-i-form_for-label-Unobtrusive+JavaScript\">Unobtrusive JavaScript</h3> <p>Specifying:</p> <pre>remote: true</pre> <p>in the options hash creates a form that will allow the unobtrusive JavaScript drivers to modify its behavior. The expected default behavior is an XMLHttpRequest in the background instead of the regular POST arrangement, but ultimately the behavior is the choice of the JavaScript driver implementor. Even though it's using JavaScript to serialize the form elements, the form submission will work just like a regular submission as viewed by the receiving side (all elements available in <code>params</code>).</p> <p>Example:</p> <pre>&lt;%= form_for(@post, remote: true) do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>The HTML generated for this would be:</p> <pre>&lt;form action='http://www.example.com' method='post' data-remote='true'&gt;\n  &lt;input name='_method' type='hidden' value='patch' /&gt;\n  ...\n&lt;/form&gt;</pre> <h3 id=\"method-i-form_for-label-Setting+HTML+options\">Setting HTML options</h3> <p>You can set data attributes directly by passing in a data hash, but all other HTML options must be wrapped in the HTML key. Example:</p> <pre>&lt;%= form_for(@post, data: { behavior: \"autosave\" }, html: { name: \"go\" }) do |f| %&gt;\n  ...\n&lt;% end %&gt;</pre> <p>The HTML generated for this would be:</p> <pre>&lt;form action='http://www.example.com' method='post' data-behavior='autosave' name='go'&gt;\n  &lt;input name='_method' type='hidden' value='patch' /&gt;\n  ...\n&lt;/form&gt;</pre> <h3 id=\"method-i-form_for-label-Removing+hidden+model+id-27s\">Removing hidden model id's</h3> <p>The <a href=\"formhelper#method-i-form_for\">#form_for</a> method automatically includes the model id as a hidden field in the form. This is used to maintain the correlation between the form data and its associated model. Some ORM systems do not use IDs on nested models so in this case you want to be able to disable the hidden id.</p> <p>In the following example the Post model has many Comments stored within it in a NoSQL database, thus there is no primary key for comments.</p> <p>Example:</p> <pre>&lt;%= form_for(@post) do |f| %&gt;\n  &lt;%= f.fields_for(:comments, include_id: false) do |cf| %&gt;\n    ...\n  &lt;% end %&gt;\n&lt;% end %&gt;</pre> <h3 id=\"method-i-form_for-label-Customized+form+builders\">Customized form builders</h3> <p>You can also build forms using a customized <a href=\"formbuilder\">FormBuilder</a> class. Subclass <a href=\"formbuilder\">FormBuilder</a> and override or define some more helpers, then use your custom builder. For example, let's say you made a helper to automatically add labels to form inputs.</p> <pre>&lt;%= form_for @person, url: { action: \"create\" }, builder: LabellingFormBuilder do |f| %&gt;\n  &lt;%= f.text_field :first_name %&gt;\n  &lt;%= f.text_field :last_name %&gt;\n  &lt;%= f.text_area :biography %&gt;\n  &lt;%= f.check_box :admin %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;</pre> <p>In this case, if you use this:</p> <pre>&lt;%= render f %&gt;</pre> <p>The rendered template is <code>people/_labelling_form</code> and the local variable referencing the form builder is called <code>labelling_form</code>.</p> <p>The custom <a href=\"formbuilder\">FormBuilder</a> class is automatically merged with the options of a nested <a href=\"formhelper#method-i-fields_for\">#fields_for</a> call, unless it's explicitly set.</p> <p>In many cases you will want to wrap the above in another helper, so you could do something like the following:</p> <pre class=\"ruby\">def labelled_form_for(record_or_name_or_array, *args, &amp;block)\n  options = args.extract_options!\n  form_for(record_or_name_or_array, *(args &lt;&lt; options.merge(builder: LabellingFormBuilder)), &amp;block)\nend\n</pre> <p>If you don't need to attach a form to a model instance, then check out <a href=\"formtaghelper#method-i-form_tag\">ActionView::Helpers::FormTagHelper#form_tag</a>.</p> <h3 id=\"method-i-form_for-label-Form+to+external+resources\">Form to external resources</h3> <p>When you build forms to external resources sometimes you need to set an authenticity token or just render a form without it, for example when you submit data to a payment gateway number and types of fields could be limited.</p> <p>To set an authenticity token you need to pass an <code>:authenticity_token</code> parameter</p> <pre>&lt;%= form_for @invoice, url: external_url, authenticity_token: 'external_token' do |f|\n  ...\n&lt;% end %&gt;</pre> <p>If you don't want to an authenticity token field be rendered at all just pass <code>false</code>:</p> <pre>&lt;%= form_for @invoice, url: external_url, authenticity_token: false do |f|\n  ...\n&lt;% end %&gt;</pre> <div class=\"method-source-code\" id=\"form_for-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 422\ndef form_for(record, options = {}, &amp;block)\n  raise ArgumentError, \"Missing block\" unless block_given?\n  html_options = options[:html] ||= {}\n\n  case record\n  when String, Symbol\n    object_name = record\n    object      = nil\n  else\n    object      = record.is_a?(Array) ? record.last : record\n    raise ArgumentError, \"First argument in form cannot contain nil or be empty\" unless object\n    object_name = options[:as] || model_name_from_record_or_class(object).param_key\n    apply_form_for_options!(record, object, options)\n  end\n\n  html_options[:data]   = options.delete(:data)   if options.has_key?(:data)\n  html_options[:remote] = options.delete(:remote) if options.has_key?(:remote)\n  html_options[:method] = options.delete(:method) if options.has_key?(:method)\n  html_options[:enforce_utf8] = options.delete(:enforce_utf8) if options.has_key?(:enforce_utf8)\n  html_options[:authenticity_token] = options.delete(:authenticity_token)\n\n  builder = instantiate_builder(object_name, object, options)\n  output  = capture(builder, &amp;block)\n  html_options[:multipart] ||= builder.multipart?\n\n  html_options = html_options_for_form(options[:url] || {}, html_options)\n  form_tag_with_body(html_options, output)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-hidden_field\"> <span class=\"method-name\">hidden_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hidden input tag tailored for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). Additional options on the input tag can be passed as a hash with <code>options</code>. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.</p> <h4 id=\"method-i-hidden_field-label-Examples\">Examples</h4> <pre class=\"ruby\">hidden_field(:signup, :pass_confirm)\n# =&gt; &lt;input type=\"hidden\" id=\"signup_pass_confirm\" name=\"signup[pass_confirm]\" value=\"#{@signup.pass_confirm}\" /&gt;\n\nhidden_field(:post, :tag_list)\n# =&gt; &lt;input type=\"hidden\" id=\"post_tag_list\" name=\"post[tag_list]\" value=\"#{@post.tag_list}\" /&gt;\n\nhidden_field(:user, :token)\n# =&gt; &lt;input type=\"hidden\" id=\"user_token\" name=\"user[token]\" value=\"#{@user.token}\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"hidden_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 825\ndef hidden_field(object_name, method, options = {})\n  Tags::HiddenField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-label\"> <span class=\"method-name\">label</span><span class=\"method-args\">(object_name, method, content_or_options = nil, options = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a label tag tailored for labelling an input field for a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). The text of label will default to the attribute name unless a translation is found in the current <a href=\"../../i18n\">I18n</a> locale (through helpers.label.&lt;modelname&gt;.&lt;attribute&gt;) or you specify it explicitly. Additional options on the label tag can be passed as a hash with <code>options</code>. These options will be tagged onto the HTML as an HTML element attribute as in the example shown, except for the <code>:value</code> option, which is designed to target labels for <a href=\"formhelper#method-i-radio_button\">#radio_button</a> tags (where the value is used in the ID of the input tag).</p> <h4 id=\"method-i-label-label-Examples\">Examples</h4> <pre class=\"ruby\">label(:post, :title)\n# =&gt; &lt;label for=\"post_title\"&gt;Title&lt;/label&gt;\n</pre> <p>You can localize your labels based on model and attribute names. For example you can define the following in your locale (e.g. en.yml)</p> <pre>helpers:\n  label:\n    post:\n      body: \"Write your entire text here\"</pre> <p>Which then will result in</p> <pre class=\"ruby\">label(:post, :body)\n# =&gt; &lt;label for=\"post_body\"&gt;Write your entire text here&lt;/label&gt;\n</pre> <p>Localization can also be based purely on the translation of the attribute-name (if you are using <a href=\"../../activerecord\">ActiveRecord</a>):</p> <pre>activerecord:\n  attributes:\n    post:\n      cost: \"Total cost\"\n\nlabel(:post, :cost)\n# =&gt; &lt;label for=\"post_cost\"&gt;Total cost&lt;/label&gt;\n\nlabel(:post, :title, \"A short title\")\n# =&gt; &lt;label for=\"post_title\"&gt;A short title&lt;/label&gt;\n\nlabel(:post, :title, \"A short title\", class: \"title_label\")\n# =&gt; &lt;label for=\"post_title\" class=\"title_label\"&gt;A short title&lt;/label&gt;\n\nlabel(:post, :privacy, \"Public Post\", value: \"public\")\n# =&gt; &lt;label for=\"post_privacy_public\"&gt;Public Post&lt;/label&gt;\n\nlabel(:post, :terms) do\n  'Accept &lt;a href=\"/terms\"&gt;Terms&lt;/a&gt;.'.html_safe\nend\n# =&gt; &lt;label for=\"post_terms\"&gt;Accept &lt;a href=\"/terms\"&gt;Terms&lt;/a&gt;.&lt;/label&gt;</pre> <div class=\"method-source-code\" id=\"label-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 765\ndef label(object_name, method, content_or_options = nil, options = nil, &amp;block)\n  Tags::Label.new(object_name, method, self, content_or_options, options).render(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-month_field\"> <span class=\"method-name\">month_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type “month”.</p> <pre class=\"ruby\">month_field(\"user\", \"born_on\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"month\" /&gt;\n</pre> <p>The default value is generated by trying to call <code>strftime</code> with “%Y-%m” on the object's value, which makes it behave as expected for instances of <a href=\"../../datetime\">DateTime</a> and <a href=\"../../activesupport/timewithzone\">ActiveSupport::TimeWithZone</a>.</p> <pre class=\"ruby\">@user.born_on = Date.new(1984, 1, 27)\nmonth_field(\"user\", \"born_on\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"date\" value=\"1984-01\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"month_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1142\ndef month_field(object_name, method, options = {})\n  Tags::MonthField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_field\"> <span class=\"method-name\">number_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an input tag of type “number”.</p> <h4 id=\"method-i-number_field-label-Options\">Options</h4> <ul><li> <p>Accepts same options as number_field_tag</p> </li></ul> <div class=\"method-source-code\" id=\"number_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1185\ndef number_field(object_name, method, options = {})\n  Tags::NumberField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-password_field\"> <span class=\"method-name\">password_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an input tag of the “password” type tailored for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). Additional options on the input tag can be passed as a hash with <code>options</code>. These options will be tagged onto the HTML as an HTML element attribute as in the example shown. For security reasons this field is blank by default; pass in a value via <code>options</code> if this is not desired.</p> <h4 id=\"method-i-password_field-label-Examples\">Examples</h4> <pre class=\"ruby\">password_field(:login, :pass, size: 20)\n# =&gt; &lt;input type=\"password\" id=\"login_pass\" name=\"login[pass]\" size=\"20\" /&gt;\n\npassword_field(:account, :secret, class: \"form_input\", value: @account.secret)\n# =&gt; &lt;input type=\"password\" id=\"account_secret\" name=\"account[secret]\" value=\"#{@account.secret}\" class=\"form_input\" /&gt;\n\npassword_field(:user, :password, onchange: \"if ($('#user_password').val().length &gt; 30) { alert('Your password needs to be shorter!'); }\")\n# =&gt; &lt;input type=\"password\" id=\"user_password\" name=\"user[password]\" onchange=\"if ($('#user_password').val().length &gt; 30) { alert('Your password needs to be shorter!'); }\"/&gt;\n\npassword_field(:account, :pin, size: 20, class: 'form_input')\n# =&gt; &lt;input type=\"password\" id=\"account_pin\" name=\"account[pin]\" size=\"20\" class=\"form_input\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"password_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 807\ndef password_field(object_name, method, options = {})\n  Tags::PasswordField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-phone_field\"> <span class=\"method-name\">phone_field</span><span class=\"method-args\">(object_name, method, options = {})</span> </div> <div class=\"method-description\"> <p>aliases <a href=\"formhelper#method-i-telephone_field\">#telephone_field</a></p> </div> <div class=\"aliases\"> Alias for: <a href=\"formhelper#method-i-telephone_field\">telephone_field</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-radio_button\"> <span class=\"method-name\">radio_button</span><span class=\"method-args\">(object_name, method, tag_value, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a radio button tag for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). If the current value of <code>method</code> is <code>tag_value</code> the radio button will be checked.</p> <p>To force the radio button to be checked pass <code>checked: true</code> in the <code>options</code> hash. You may pass HTML options there as well.</p> <pre class=\"ruby\"># Let's say that @post.category returns \"rails\":\nradio_button(\"post\", \"category\", \"rails\")\nradio_button(\"post\", \"category\", \"java\")\n# =&gt; &lt;input type=\"radio\" id=\"post_category_rails\" name=\"post[category]\" value=\"rails\" checked=\"checked\" /&gt;\n#    &lt;input type=\"radio\" id=\"post_category_java\" name=\"post[category]\" value=\"java\" /&gt;\n\nradio_button(\"user\", \"receive_newsletter\", \"yes\")\nradio_button(\"user\", \"receive_newsletter\", \"no\")\n# =&gt; &lt;input type=\"radio\" id=\"user_receive_newsletter_yes\" name=\"user[receive_newsletter]\" value=\"yes\" /&gt;\n#    &lt;input type=\"radio\" id=\"user_receive_newsletter_no\" name=\"user[receive_newsletter]\" value=\"no\" checked=\"checked\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"radio_button-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 966\ndef radio_button(object_name, method, tag_value, options = {})\n  Tags::RadioButton.new(object_name, method, self, tag_value, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-range_field\"> <span class=\"method-name\">range_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an input tag of type “range”.</p> <h4 id=\"method-i-range_field-label-Options\">Options</h4> <ul><li> <p>Accepts same options as range_field_tag</p> </li></ul> <div class=\"method-source-code\" id=\"range_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1193\ndef range_field(object_name, method, options = {})\n  Tags::RangeField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-search_field\"> <span class=\"method-name\">search_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an input of type “search” for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object_name</code>). Inputs of type “search” may be styled differently by some browsers.</p> <pre class=\"ruby\">search_field(:user, :name)\n# =&gt; &lt;input id=\"user_name\" name=\"user[name]\" type=\"search\" /&gt;\nsearch_field(:user, :name, autosave: false)\n# =&gt; &lt;input autosave=\"false\" id=\"user_name\" name=\"user[name]\" type=\"search\" /&gt;\nsearch_field(:user, :name, results: 3)\n# =&gt; &lt;input id=\"user_name\" name=\"user[name]\" results=\"3\" type=\"search\" /&gt;\n#  Assume request.host returns \"www.example.com\"\nsearch_field(:user, :name, autosave: true)\n# =&gt; &lt;input autosave=\"com.example.www\" id=\"user_name\" name=\"user[name]\" results=\"10\" type=\"search\" /&gt;\nsearch_field(:user, :name, onsearch: true)\n# =&gt; &lt;input id=\"user_name\" incremental=\"true\" name=\"user[name]\" onsearch=\"true\" type=\"search\" /&gt;\nsearch_field(:user, :name, autosave: false, onsearch: true)\n# =&gt; &lt;input autosave=\"false\" id=\"user_name\" incremental=\"true\" name=\"user[name]\" onsearch=\"true\" type=\"search\" /&gt;\nsearch_field(:user, :name, autosave: true, onsearch: true)\n# =&gt; &lt;input autosave=\"com.example.www\" id=\"user_name\" incremental=\"true\" name=\"user[name]\" onsearch=\"true\" results=\"10\" type=\"search\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"search_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 997\ndef search_field(object_name, method, options = {})\n  Tags::SearchField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-telephone_field\"> <span class=\"method-name\">telephone_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type “tel”.</p> <pre class=\"ruby\">telephone_field(\"user\", \"phone\")\n# =&gt; &lt;input id=\"user_phone\" name=\"user[phone]\" type=\"tel\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"telephone_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1006\ndef telephone_field(object_name, method, options = {})\n  Tags::TelField.new(object_name, method, self, options).render\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"formhelper#method-i-phone_field\">phone_field</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-text_area\"> <span class=\"method-name\">text_area</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a textarea opening and closing tag set tailored for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). Additional options on the input tag can be passed as a hash with <code>options</code>.</p> <h4 id=\"method-i-text_area-label-Examples\">Examples</h4> <pre class=\"ruby\">text_area(:post, :body, cols: 20, rows: 40)\n# =&gt; &lt;textarea cols=\"20\" rows=\"40\" id=\"post_body\" name=\"post[body]\"&gt;\n#      #{@post.body}\n#    &lt;/textarea&gt;\n\ntext_area(:comment, :text, size: \"20x30\")\n# =&gt; &lt;textarea cols=\"20\" rows=\"30\" id=\"comment_text\" name=\"comment[text]\"&gt;\n#      #{@comment.text}\n#    &lt;/textarea&gt;\n\ntext_area(:application, :notes, cols: 40, rows: 15, class: 'app_input')\n# =&gt; &lt;textarea cols=\"40\" rows=\"15\" id=\"application_notes\" name=\"application[notes]\" class=\"app_input\"&gt;\n#      #{@application.notes}\n#    &lt;/textarea&gt;\n\ntext_area(:entry, :body, size: \"20x20\", disabled: 'disabled')\n# =&gt; &lt;textarea cols=\"20\" rows=\"20\" id=\"entry_body\" name=\"entry[body]\" disabled=\"disabled\"&gt;\n#      #{@entry.body}\n#    &lt;/textarea&gt;\n</pre> <div class=\"method-source-code\" id=\"text_area-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 885\ndef text_area(object_name, method, options = {})\n  Tags::TextArea.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-text_field\"> <span class=\"method-name\">text_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an input tag of the “text” type tailored for accessing a specified attribute (identified by <code>method</code>) on an object assigned to the template (identified by <code>object</code>). Additional options on the input tag can be passed as a hash with <code>options</code>. These options will be tagged onto the HTML as an HTML element attribute as in the example shown.</p> <h4 id=\"method-i-text_field-label-Examples\">Examples</h4> <pre class=\"ruby\">text_field(:post, :title, size: 20)\n# =&gt; &lt;input type=\"text\" id=\"post_title\" name=\"post[title]\" size=\"20\" value=\"#{@post.title}\" /&gt;\n\ntext_field(:post, :title, class: \"create_input\")\n# =&gt; &lt;input type=\"text\" id=\"post_title\" name=\"post[title]\" value=\"#{@post.title}\" class=\"create_input\" /&gt;\n\ntext_field(:session, :user, onchange: \"if ($('#session_user').val() === 'admin') { alert('Your login cannot be admin!'); }\")\n# =&gt; &lt;input type=\"text\" id=\"session_user\" name=\"session[user]\" value=\"#{@session.user}\" onchange=\"if ($('#session_user').val() === 'admin') { alert('Your login cannot be admin!'); }\"/&gt;\n\ntext_field(:snippet, :code, size: 20, class: 'code_input')\n# =&gt; &lt;input type=\"text\" id=\"snippet_code\" name=\"snippet[code]\" size=\"20\" value=\"#{@snippet.code}\" class=\"code_input\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"text_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 786\ndef text_field(object_name, method, options = {})\n  Tags::TextField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time_field\"> <span class=\"method-name\">time_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type “time”.</p> <p>The default value is generated by trying to call <code>strftime</code> with “%T.%L” on the objects's value. It is still possible to override that by passing the “value” option.</p> <h3 id=\"method-i-time_field-label-Options\">Options</h3> <ul><li> <p>Accepts same options as time_field_tag</p> </li></ul> <h3 id=\"method-i-time_field-label-Example\">Example</h3> <pre class=\"ruby\">time_field(\"task\", \"started_at\")\n# =&gt; &lt;input id=\"task_started_at\" name=\"task[started_at]\" type=\"time\" /&gt;\n</pre> <p>You can create values for the “min” and “max” attributes by passing instances of <a href=\"../../date\">Date</a> or <a href=\"../../time\">Time</a> to the options hash.</p> <pre class=\"ruby\">time_field(\"task\", \"started_at\", min: Time.now)\n# =&gt; &lt;input id=\"task_started_at\" name=\"task[started_at]\" type=\"time\" min=\"01:00:00.000\" /&gt;\n</pre> <p>Alternatively, you can pass a <a href=\"../../string\">String</a> formatted as an ISO8601 time as the values for “min” and “max.”</p> <pre class=\"ruby\">time_field(\"task\", \"started_at\", min: \"01:00:00\")\n# =&gt; &lt;input id=\"task_started_at\" name=\"task[started_at]\" type=\"time\" min=\"01:00:00.000\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"time_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1067\ndef time_field(object_name, method, options = {})\n  Tags::TimeField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url_field\"> <span class=\"method-name\">url_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type “url”.</p> <pre class=\"ruby\">url_field(\"user\", \"homepage\")\n# =&gt; &lt;input id=\"user_homepage\" name=\"user[homepage]\" type=\"url\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"url_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1168\ndef url_field(object_name, method, options = {})\n  Tags::UrlField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-week_field\"> <span class=\"method-name\">week_field</span><span class=\"method-args\">(object_name, method, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"formhelper#method-i-text_field\">#text_field</a> of type “week”.</p> <pre class=\"ruby\">week_field(\"user\", \"born_on\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"week\" /&gt;\n</pre> <p>The default value is generated by trying to call <code>strftime</code> with “%Y-W%W” on the object's value, which makes it behave as expected for instances of <a href=\"../../datetime\">DateTime</a> and <a href=\"../../activesupport/timewithzone\">ActiveSupport::TimeWithZone</a>.</p> <pre class=\"ruby\">@user.born_on = Date.new(1984, 5, 12)\nweek_field(\"user\", \"born_on\")\n# =&gt; &lt;input id=\"user_born_on\" name=\"user[born_on]\" type=\"date\" value=\"1984-W19\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"week_field-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_helper.rb, line 1159\ndef week_field(object_name, method, options = {})\n  Tags::WeekField.new(object_name, method, self, options).render\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/formoptionshelper":"<h1 id=\"module-ActionView::Helpers::FormOptionsHelper\" class=\"module\"> module ActionView::Helpers::FormOptionsHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"texthelper\">ActionView::Helpers::TextHelper</a></dd>\n</dl> <section class=\"description\"> <p>Provides a number of methods for turning different kinds of containers into a set of option tags.</p> <p>The <code>collection_select</code>, <code>select</code> and <code>time_zone_select</code> methods take an <code>options</code> parameter, a hash:</p> <ul>\n<li> <p><code>:include_blank</code> - set to true or a prompt string if the first option element of the select element is a blank. Useful if there is not a default value required for the select element.</p> <pre class=\"ruby\">select(\"post\", \"category\", Post::CATEGORIES, {include_blank: true})\n</pre> <p>could become:</p> <pre>&lt;select name=\"post[category]\"&gt;\n  &lt;option&gt;&lt;/option&gt;\n  &lt;option&gt;joke&lt;/option&gt;\n  &lt;option&gt;poem&lt;/option&gt;\n&lt;/select&gt;</pre> <p>Another common case is a select tag for a <code>belongs_to</code>-associated object.</p> <p>Example with <code>@post.person_id =&gt; 2</code>:</p> <pre class=\"ruby\">select(\"post\", \"person_id\", Person.all.collect {|p| [ p.name, p.id ] }, {include_blank: 'None'})\n</pre> <p>could become:</p> <pre>&lt;select name=\"post[person_id]\"&gt;\n  &lt;option value=\"\"&gt;None&lt;/option&gt;\n  &lt;option value=\"1\"&gt;David&lt;/option&gt;\n  &lt;option value=\"2\" selected=\"selected\"&gt;Sam&lt;/option&gt;\n  &lt;option value=\"3\"&gt;Tobias&lt;/option&gt;\n&lt;/select&gt;</pre> </li>\n<li> <p><code>:prompt</code> - set to true or a prompt string. When the select element doesn't have a value yet, this prepends an option with a generic prompt – “Please select” – or the given prompt string.</p> <pre class=\"ruby\">select(\"post\", \"person_id\", Person.all.collect {|p| [ p.name, p.id ] }, {prompt: 'Select Person'})\n</pre> <p>could become:</p> <pre>&lt;select name=\"post[person_id]\"&gt;\n  &lt;option value=\"\"&gt;Select Person&lt;/option&gt;\n  &lt;option value=\"1\"&gt;David&lt;/option&gt;\n  &lt;option value=\"2\"&gt;Sam&lt;/option&gt;\n  &lt;option value=\"3\"&gt;Tobias&lt;/option&gt;\n&lt;/select&gt;</pre> </li>\n<li> <p><code>:index</code> - like the other form helpers, <code>select</code> can accept an <code>:index</code> option to manually set the ID used in the resulting output. Unlike other helpers, <code>select</code> expects this option to be in the <code>html_options</code> parameter.</p> <pre class=\"ruby\">select(\"album[]\", \"genre\", %w[rap rock country], {}, { index: nil })\n</pre> <p>becomes:</p> <pre>&lt;select name=\"album[][genre]\" id=\"album__genre\"&gt;\n  &lt;option value=\"rap\"&gt;rap&lt;/option&gt;\n  &lt;option value=\"rock\"&gt;rock&lt;/option&gt;\n  &lt;option value=\"country\"&gt;country&lt;/option&gt;\n&lt;/select&gt;</pre> </li>\n<li> <p><code>:disabled</code> - can be a single value or an array of values that will be disabled options in the final output.</p> <pre class=\"ruby\">select(\"post\", \"category\", Post::CATEGORIES, {disabled: 'restricted'})\n</pre> <p>could become:</p> <pre>&lt;select name=\"post[category]\"&gt;\n  &lt;option&gt;&lt;/option&gt;\n  &lt;option&gt;joke&lt;/option&gt;\n  &lt;option&gt;poem&lt;/option&gt;\n  &lt;option disabled=\"disabled\"&gt;restricted&lt;/option&gt;\n&lt;/select&gt;</pre> <p>When used with the <code>collection_select</code> helper, <code>:disabled</code> can also be a Proc that identifies those options that should be disabled.</p> <pre class=\"ruby\">collection_select(:post, :category_id, Category.all, :id, :name, {disabled: lambda{|category| category.archived? }})\n</pre> <p>If the categories “2008 stuff” and “Christmas” return true when the method <code>archived?</code> is called, this would return:</p> <pre>&lt;select name=\"post[category_id]\"&gt;\n  &lt;option value=\"1\" disabled=\"disabled\"&gt;2008 stuff&lt;/option&gt;\n  &lt;option value=\"2\" disabled=\"disabled\"&gt;Christmas&lt;/option&gt;\n  &lt;option value=\"3\"&gt;Jokes&lt;/option&gt;\n  &lt;option value=\"4\"&gt;Poems&lt;/option&gt;\n&lt;/select&gt;</pre> </li>\n</ul> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collection_check_boxes\"> <span class=\"method-name\">collection_check_boxes</span><span class=\"method-args\">(object, method, collection, value_method, text_method, options = {}, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns check box tags for the collection of existing return values of <code>method</code> for <code>object</code>'s class. The value returned from calling <code>method</code> on the instance <code>object</code> will be selected. If calling <code>method</code> returns <code>nil</code>, no selection is made.</p> <p>The <code>:value_method</code> and <code>:text_method</code> parameters are methods to be called on each member of <code>collection</code>. The return values are used as the <code>value</code> attribute and contents of each check box tag, respectively. They can also be any object that responds to <code>call</code>, such as a <code>proc</code>, that will be called for each member of the <code>collection</code> to retrieve the value/text.</p> <p>Example object structure for use with this method:</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  has_and_belongs_to_many :authors\nend\nclass Author &lt; ActiveRecord::Base\n  has_and_belongs_to_many :posts\n  def name_with_initial\n    \"#{first_name.first}. #{last_name}\"\n  end\nend\n</pre> <p>Sample usage (selecting the associated Author for an instance of Post, <code>@post</code>):</p> <pre class=\"ruby\">collection_check_boxes(:post, :author_ids, Author.all, :id, :name_with_initial)\n</pre> <p>If <code>@post.author_ids</code> is already <code>[1]</code>, this would return:</p> <pre>&lt;input id=\"post_author_ids_1\" name=\"post[author_ids][]\" type=\"checkbox\" value=\"1\" checked=\"checked\" /&gt;\n&lt;label for=\"post_author_ids_1\"&gt;D. Heinemeier Hansson&lt;/label&gt;\n&lt;input id=\"post_author_ids_2\" name=\"post[author_ids][]\" type=\"checkbox\" value=\"2\" /&gt;\n&lt;label for=\"post_author_ids_2\"&gt;D. Thomas&lt;/label&gt;\n&lt;input id=\"post_author_ids_3\" name=\"post[author_ids][]\" type=\"checkbox\" value=\"3\" /&gt;\n&lt;label for=\"post_author_ids_3\"&gt;M. Clark&lt;/label&gt;\n&lt;input name=\"post[author_ids][]\" type=\"hidden\" value=\"\" /&gt;</pre> <p>It is also possible to customize the way the elements will be shown by giving a block to the method:</p> <pre class=\"ruby\">collection_check_boxes(:post, :author_ids, Author.all, :id, :name_with_initial) do |b|\n  b.label { b.check_box }\nend\n</pre> <p>The argument passed to the block is a special kind of builder for this collection, which has the ability to generate the label and check box for the current item in the collection, with proper text and value. Using it, you can change the label and check box display order or even use the label as wrapper, as in the example above.</p> <p>The builder methods <code>label</code> and <code>check_box</code> also accept extra HTML options:</p> <pre class=\"ruby\">collection_check_boxes(:post, :author_ids, Author.all, :id, :name_with_initial) do |b|\n  b.label(class: \"check_box\") { b.check_box(class: \"check_box\") }\nend\n</pre> <p>There are also three special methods available: <code>object</code>, <code>text</code> and <code>value</code>, which are the current item being rendered, its text and value methods, respectively. You can use them like this:</p> <pre class=\"ruby\">collection_check_boxes(:post, :author_ids, Author.all, :id, :name_with_initial) do |b|\n   b.label(:\"data-value\" =&gt; b.value) { b.check_box + b.text }\nend\n</pre> <div class=\"method-source-code\" id=\"collection_check_boxes-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 710\ndef collection_check_boxes(object, method, collection, value_method, text_method, options = {}, html_options = {}, &amp;block)\n  Tags::CollectionCheckBoxes.new(object, method, self, collection, value_method, text_method, options, html_options).render(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collection_radio_buttons\"> <span class=\"method-name\">collection_radio_buttons</span><span class=\"method-args\">(object, method, collection, value_method, text_method, options = {}, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns radio button tags for the collection of existing return values of <code>method</code> for <code>object</code>'s class. The value returned from calling <code>method</code> on the instance <code>object</code> will be selected. If calling <code>method</code> returns <code>nil</code>, no selection is made.</p> <p>The <code>:value_method</code> and <code>:text_method</code> parameters are methods to be called on each member of <code>collection</code>. The return values are used as the <code>value</code> attribute and contents of each radio button tag, respectively. They can also be any object that responds to <code>call</code>, such as a <code>proc</code>, that will be called for each member of the <code>collection</code> to retrieve the value/text.</p> <p>Example object structure for use with this method:</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  belongs_to :author\nend\nclass Author &lt; ActiveRecord::Base\n  has_many :posts\n  def name_with_initial\n    \"#{first_name.first}. #{last_name}\"\n  end\nend\n</pre> <p>Sample usage (selecting the associated Author for an instance of Post, <code>@post</code>):</p> <pre class=\"ruby\">collection_radio_buttons(:post, :author_id, Author.all, :id, :name_with_initial)\n</pre> <p>If <code>@post.author_id</code> is already <code>1</code>, this would return:</p> <pre>&lt;input id=\"post_author_id_1\" name=\"post[author_id]\" type=\"radio\" value=\"1\" checked=\"checked\" /&gt;\n&lt;label for=\"post_author_id_1\"&gt;D. Heinemeier Hansson&lt;/label&gt;\n&lt;input id=\"post_author_id_2\" name=\"post[author_id]\" type=\"radio\" value=\"2\" /&gt;\n&lt;label for=\"post_author_id_2\"&gt;D. Thomas&lt;/label&gt;\n&lt;input id=\"post_author_id_3\" name=\"post[author_id]\" type=\"radio\" value=\"3\" /&gt;\n&lt;label for=\"post_author_id_3\"&gt;M. Clark&lt;/label&gt;</pre> <p>It is also possible to customize the way the elements will be shown by giving a block to the method:</p> <pre class=\"ruby\">collection_radio_buttons(:post, :author_id, Author.all, :id, :name_with_initial) do |b|\n  b.label { b.radio_button }\nend\n</pre> <p>The argument passed to the block is a special kind of builder for this collection, which has the ability to generate the label and radio button for the current item in the collection, with proper text and value. Using it, you can change the label and radio button display order or even use the label as wrapper, as in the example above.</p> <p>The builder methods <code>label</code> and <code>radio_button</code> also accept extra HTML options:</p> <pre class=\"ruby\">collection_radio_buttons(:post, :author_id, Author.all, :id, :name_with_initial) do |b|\n  b.label(class: \"radio_button\") { b.radio_button(class: \"radio_button\") }\nend\n</pre> <p>There are also three special methods available: <code>object</code>, <code>text</code> and <code>value</code>, which are the current item being rendered, its text and value methods, respectively. You can use them like this:</p> <pre class=\"ruby\">collection_radio_buttons(:post, :author_id, Author.all, :id, :name_with_initial) do |b|\n   b.label(:\"data-value\" =&gt; b.value) { b.radio_button + b.text }\nend\n</pre> <div class=\"method-source-code\" id=\"collection_radio_buttons-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 647\ndef collection_radio_buttons(object, method, collection, value_method, text_method, options = {}, html_options = {}, &amp;block)\n  Tags::CollectionRadioButtons.new(object, method, self, collection, value_method, text_method, options, html_options).render(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collection_select\"> <span class=\"method-name\">collection_select</span><span class=\"method-args\">(object, method, collection, value_method, text_method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags for the collection of existing return values of <code>method</code> for <code>object</code>'s class. The value returned from calling <code>method</code> on the instance <code>object</code> will be selected. If calling <code>method</code> returns <code>nil</code>, no selection is made without including <code>:prompt</code> or <code>:include_blank</code> in the <code>options</code> hash.</p> <p>The <code>:value_method</code> and <code>:text_method</code> parameters are methods to be called on each member of <code>collection</code>. The return values are used as the <code>value</code> attribute and contents of each <code>&lt;option&gt;</code> tag, respectively. They can also be any object that responds to <code>call</code>, such as a <code>proc</code>, that will be called for each member of the <code>collection</code> to retrieve the value/text.</p> <p>Example object structure for use with this method:</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  belongs_to :author\nend\n\nclass Author &lt; ActiveRecord::Base\n  has_many :posts\n  def name_with_initial\n    \"#{first_name.first}. #{last_name}\"\n  end\nend\n</pre> <p>Sample usage (selecting the associated Author for an instance of Post, <code>@post</code>):</p> <pre class=\"ruby\">collection_select(:post, :author_id, Author.all, :id, :name_with_initial, prompt: true)\n</pre> <p>If <code>@post.author_id</code> is already <code>1</code>, this would return:</p> <pre>&lt;select name=\"post[author_id]\"&gt;\n  &lt;option value=\"\"&gt;Please select&lt;/option&gt;\n  &lt;option value=\"1\" selected=\"selected\"&gt;D. Heinemeier Hansson&lt;/option&gt;\n  &lt;option value=\"2\"&gt;D. Thomas&lt;/option&gt;\n  &lt;option value=\"3\"&gt;M. Clark&lt;/option&gt;\n&lt;/select&gt;</pre> <div class=\"method-source-code\" id=\"collection_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 201\ndef collection_select(object, method, collection, value_method, text_method, options = {}, html_options = {})\n  Tags::CollectionSelect.new(object, method, self, collection, value_method, text_method, options, html_options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-grouped_collection_select\"> <span class=\"method-name\">grouped_collection_select</span><span class=\"method-args\">(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and <code>&lt;option&gt;</code> tags for the collection of existing return values of <code>method</code> for <code>object</code>'s class. The value returned from calling <code>method</code> on the instance <code>object</code> will be selected. If calling <code>method</code> returns <code>nil</code>, no selection is made without including <code>:prompt</code> or <code>:include_blank</code> in the <code>options</code> hash.</p> <p>Parameters:</p> <ul>\n<li> <p><code>object</code> - The instance of the class to be used for the select tag</p> </li>\n<li> <p><code>method</code> - The attribute of <code>object</code> corresponding to the select tag</p> </li>\n<li> <p><code>collection</code> - An array of objects representing the <code>&lt;optgroup&gt;</code> tags.</p> </li>\n<li> <p><code>group_method</code> - The name of a method which, when called on a member of <code>collection</code>, returns an array of child objects representing the <code>&lt;option&gt;</code> tags.</p> </li>\n<li> <p><code>group_label_method</code> - The name of a method which, when called on a member of <code>collection</code>, returns a string to be used as the <code>label</code> attribute for its <code>&lt;optgroup&gt;</code> tag.</p> </li>\n<li> <p><code>option_key_method</code> - The name of a method which, when called on a child object of a member of <code>collection</code>, returns a value to be used as the <code>value</code> attribute for its <code>&lt;option&gt;</code> tag.</p> </li>\n<li> <p><code>option_value_method</code> - The name of a method which, when called on a child object of a member of <code>collection</code>, returns a value to be used as the contents of its <code>&lt;option&gt;</code> tag.</p> </li>\n</ul> <p>Example object structure for use with this method:</p> <pre class=\"ruby\">class Continent &lt; ActiveRecord::Base\n  has_many :countries\n  # attribs: id, name\nend\n\nclass Country &lt; ActiveRecord::Base\n  belongs_to :continent\n  # attribs: id, name, continent_id\nend\n\nclass City &lt; ActiveRecord::Base\n  belongs_to :country\n  # attribs: id, name, country_id\nend\n</pre> <p>Sample usage:</p> <pre class=\"ruby\">grouped_collection_select(:city, :country_id, @continents, :countries, :name, :id, :name)\n</pre> <p>Possible output:</p> <pre>&lt;select name=\"city[country_id]\"&gt;\n  &lt;optgroup label=\"Africa\"&gt;\n    &lt;option value=\"1\"&gt;South Africa&lt;/option&gt;\n    &lt;option value=\"3\"&gt;Somalia&lt;/option&gt;\n  &lt;/optgroup&gt;\n  &lt;optgroup label=\"Europe\"&gt;\n    &lt;option value=\"7\" selected=\"selected\"&gt;Denmark&lt;/option&gt;\n    &lt;option value=\"2\"&gt;Ireland&lt;/option&gt;\n  &lt;/optgroup&gt;\n&lt;/select&gt;</pre> <div class=\"method-source-code\" id=\"grouped_collection_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 257\ndef grouped_collection_select(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})\n  Tags::GroupedCollectionSelect.new(object, method, self, collection, group_method, group_label_method, option_key_method, option_value_method, options, html_options).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-grouped_options_for_select\"> <span class=\"method-name\">grouped_options_for_select</span><span class=\"method-args\">(grouped_options, selected_key = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string of <code>&lt;option&gt;</code> tags, like <code>options_for_select</code>, but wraps them with <code>&lt;optgroup&gt;</code> tags:</p> <pre class=\"ruby\">grouped_options = [\n ['North America',\n   [['United States','US'],'Canada']],\n ['Europe',\n   ['Denmark','Germany','France']]\n]\ngrouped_options_for_select(grouped_options)\n\ngrouped_options = {\n  'North America' =&gt; [['United States','US'], 'Canada'],\n  'Europe' =&gt; ['Denmark','Germany','France']\n}\ngrouped_options_for_select(grouped_options)\n</pre> <p>Possible output:</p> <pre>&lt;optgroup label=\"North America\"&gt;\n  &lt;option value=\"US\"&gt;United States&lt;/option&gt;\n  &lt;option value=\"Canada\"&gt;Canada&lt;/option&gt;\n&lt;/optgroup&gt;\n&lt;optgroup label=\"Europe\"&gt;\n  &lt;option value=\"Denmark\"&gt;Denmark&lt;/option&gt;\n  &lt;option value=\"Germany\"&gt;Germany&lt;/option&gt;\n  &lt;option value=\"France\"&gt;France&lt;/option&gt;\n&lt;/optgroup&gt;</pre> <p>Parameters:</p> <ul>\n<li> <p><code>grouped_options</code> - Accepts a nested array or hash of strings. The first value serves as the <code>&lt;optgroup&gt;</code> label while the second value must be an array of options. The second value can be a nested array of text-value pairs. See <code>options_for_select</code> for more info.</p> <pre>Ex. [\"North America\",[[\"United States\",\"US\"],[\"Canada\",\"CA\"]]]</pre> </li>\n<li> <p><code>selected_key</code> - A value equal to the <code>value</code> attribute for one of the <code>&lt;option&gt;</code> tags, which will have the <code>selected</code> attribute set. Note: It is possible for this value to match multiple options as you might have the same option in multiple groups. Each will then get <code>selected=\"selected\"</code>.</p> </li>\n</ul> <p>Options:</p> <ul>\n<li> <p><code>:prompt</code> - set to true or a prompt string. When the select element doesn't have a value yet, this prepends an option with a generic prompt - “Please select” - or the given prompt string.</p> </li>\n<li> <p><code>:divider</code> - the divider for the options groups.</p> <pre class=\"ruby\">grouped_options = [\n  [['United States','US'], 'Canada'],\n  ['Denmark','Germany','France']\n]\ngrouped_options_for_select(grouped_options, nil, divider: '---------')\n</pre> <p>Possible output:</p> <pre>&lt;optgroup label=\"---------\"&gt;\n  &lt;option value=\"US\"&gt;United States&lt;/option&gt;\n  &lt;option value=\"Canada\"&gt;Canada&lt;/option&gt;\n&lt;/optgroup&gt;\n&lt;optgroup label=\"---------\"&gt;\n  &lt;option value=\"Denmark\"&gt;Denmark&lt;/option&gt;\n  &lt;option value=\"Germany\"&gt;Germany&lt;/option&gt;\n  &lt;option value=\"France\"&gt;France&lt;/option&gt;\n&lt;/optgroup&gt;</pre> </li>\n</ul> <p><strong>Note:</strong> Only the <code>&lt;optgroup&gt;</code> and <code>&lt;option&gt;</code> tags are returned, so you still have to wrap the output in an appropriate <code>&lt;select&gt;</code> tag.</p> <div class=\"method-source-code\" id=\"grouped_options_for_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 524\ndef grouped_options_for_select(grouped_options, selected_key = nil, options = {})\n  prompt  = options[:prompt]\n  divider = options[:divider]\n\n  body = \"\".html_safe\n\n  if prompt\n    body.safe_concat content_tag(:option, prompt_text(prompt), value: \"\")\n  end\n\n  grouped_options.each do |container|\n    html_attributes = option_html_attributes(container)\n\n    if divider\n      label = divider\n    else\n      label, container = container\n    end\n\n    html_attributes = { label: label }.merge!(html_attributes)\n    body.safe_concat content_tag(:optgroup, options_for_select(container, selected_key), html_attributes)\n  end\n\n  body\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-option_groups_from_collection_for_select\"> <span class=\"method-name\">option_groups_from_collection_for_select</span><span class=\"method-args\">(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string of <code>&lt;option&gt;</code> tags, like <code>options_from_collection_for_select</code>, but groups them by <code>&lt;optgroup&gt;</code> tags based on the object relationships of the arguments.</p> <p>Parameters:</p> <ul>\n<li> <p><code>collection</code> - An array of objects representing the <code>&lt;optgroup&gt;</code> tags.</p> </li>\n<li> <p><code>group_method</code> - The name of a method which, when called on a member of <code>collection</code>, returns an array of child objects representing the <code>&lt;option&gt;</code> tags.</p> </li>\n<li> <p><code>group_label_method</code> - The name of a method which, when called on a member of <code>collection</code>, returns a string to be used as the <code>label</code> attribute for its <code>&lt;optgroup&gt;</code> tag.</p> </li>\n<li> <p><code>option_key_method</code> - The name of a method which, when called on a child object of a member of <code>collection</code>, returns a value to be used as the <code>value</code> attribute for its <code>&lt;option&gt;</code> tag.</p> </li>\n<li> <p><code>option_value_method</code> - The name of a method which, when called on a child object of a member of <code>collection</code>, returns a value to be used as the contents of its <code>&lt;option&gt;</code> tag.</p> </li>\n<li> <p><code>selected_key</code> - A value equal to the <code>value</code> attribute for one of the <code>&lt;option&gt;</code> tags, which will have the <code>selected</code> attribute set. Corresponds to the return value of one of the calls to <code>option_key_method</code>. If <code>nil</code>, no selection is made. Can also be a hash if disabled values are to be specified.</p> </li>\n</ul> <p>Example object structure for use with this method:</p> <pre class=\"ruby\">class Continent &lt; ActiveRecord::Base\n  has_many :countries\n  # attribs: id, name\nend\n\nclass Country &lt; ActiveRecord::Base\n  belongs_to :continent\n  # attribs: id, name, continent_id\nend\n</pre> <p>Sample usage:</p> <pre class=\"ruby\">option_groups_from_collection_for_select(@continents, :countries, :name, :id, :name, 3)\n</pre> <p>Possible output:</p> <pre>&lt;optgroup label=\"Africa\"&gt;\n  &lt;option value=\"1\"&gt;Egypt&lt;/option&gt;\n  &lt;option value=\"4\"&gt;Rwanda&lt;/option&gt;\n  ...\n&lt;/optgroup&gt;\n&lt;optgroup label=\"Asia\"&gt;\n  &lt;option value=\"3\" selected=\"selected\"&gt;China&lt;/option&gt;\n  &lt;option value=\"12\"&gt;India&lt;/option&gt;\n  &lt;option value=\"5\"&gt;Japan&lt;/option&gt;\n  ...\n&lt;/optgroup&gt;</pre> <p><strong>Note:</strong> Only the <code>&lt;optgroup&gt;</code> and <code>&lt;option&gt;</code> tags are returned, so you still have to wrap the output in an appropriate <code>&lt;select&gt;</code> tag.</p> <div class=\"method-source-code\" id=\"option_groups_from_collection_for_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 454\ndef option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)\n  collection.map do |group|\n    option_tags = options_from_collection_for_select(\n      group.send(group_method), option_key_method, option_value_method, selected_key)\n\n    content_tag(:optgroup, option_tags, label: group.send(group_label_method))\n  end.join.html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-options_for_select\"> <span class=\"method-name\">options_for_select</span><span class=\"method-args\">(container, selected = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Accepts a container (hash, array, enumerable, your type) and returns a string of option tags. Given a container where the elements respond to first and last (such as a two-element array), the “lasts” serve as option values and the “firsts” as option text. Hashes are turned into this form automatically, so the keys become “firsts” and values become lasts. If <code>selected</code> is specified, the matching “last” or element will get the selected option-tag. <code>selected</code> may also be an array of values to be selected when using a multiple select.</p> <pre class=\"ruby\">options_for_select([[\"Dollar\", \"$\"], [\"Kroner\", \"DKK\"]])\n# =&gt; &lt;option value=\"$\"&gt;Dollar&lt;/option&gt;\n# =&gt; &lt;option value=\"DKK\"&gt;Kroner&lt;/option&gt;\n\noptions_for_select([ \"VISA\", \"MasterCard\" ], \"MasterCard\")\n# =&gt; &lt;option&gt;VISA&lt;/option&gt;\n# =&gt; &lt;option selected=\"selected\"&gt;MasterCard&lt;/option&gt;\n\noptions_for_select({ \"Basic\" =&gt; \"$20\", \"Plus\" =&gt; \"$40\" }, \"$40\")\n# =&gt; &lt;option value=\"$20\"&gt;Basic&lt;/option&gt;\n# =&gt; &lt;option value=\"$40\" selected=\"selected\"&gt;Plus&lt;/option&gt;\n\noptions_for_select([ \"VISA\", \"MasterCard\", \"Discover\" ], [\"VISA\", \"Discover\"])\n# =&gt; &lt;option selected=\"selected\"&gt;VISA&lt;/option&gt;\n# =&gt; &lt;option&gt;MasterCard&lt;/option&gt;\n# =&gt; &lt;option selected=\"selected\"&gt;Discover&lt;/option&gt;\n</pre> <p>You can optionally provide HTML attributes as the last element of the array.</p> <pre class=\"ruby\">options_for_select([ \"Denmark\", [\"USA\", {class: 'bold'}], \"Sweden\" ], [\"USA\", \"Sweden\"])\n# =&gt; &lt;option value=\"Denmark\"&gt;Denmark&lt;/option&gt;\n# =&gt; &lt;option value=\"USA\" class=\"bold\" selected=\"selected\"&gt;USA&lt;/option&gt;\n# =&gt; &lt;option value=\"Sweden\" selected=\"selected\"&gt;Sweden&lt;/option&gt;\n\noptions_for_select([[\"Dollar\", \"$\", {class: \"bold\"}], [\"Kroner\", \"DKK\", {onclick: \"alert('HI');\"}]])\n# =&gt; &lt;option value=\"$\" class=\"bold\"&gt;Dollar&lt;/option&gt;\n# =&gt; &lt;option value=\"DKK\" onclick=\"alert('HI');\"&gt;Kroner&lt;/option&gt;\n</pre> <p>If you wish to specify disabled option tags, set <code>selected</code> to be a hash, with <code>:disabled</code> being either a value or array of values to be disabled. In this case, you can use <code>:selected</code> to specify selected option tags.</p> <pre class=\"ruby\">options_for_select([\"Free\", \"Basic\", \"Advanced\", \"Super Platinum\"], disabled: \"Super Platinum\")\n# =&gt; &lt;option value=\"Free\"&gt;Free&lt;/option&gt;\n# =&gt; &lt;option value=\"Basic\"&gt;Basic&lt;/option&gt;\n# =&gt; &lt;option value=\"Advanced\"&gt;Advanced&lt;/option&gt;\n# =&gt; &lt;option value=\"Super Platinum\" disabled=\"disabled\"&gt;Super Platinum&lt;/option&gt;\n\noptions_for_select([\"Free\", \"Basic\", \"Advanced\", \"Super Platinum\"], disabled: [\"Advanced\", \"Super Platinum\"])\n# =&gt; &lt;option value=\"Free\"&gt;Free&lt;/option&gt;\n# =&gt; &lt;option value=\"Basic\"&gt;Basic&lt;/option&gt;\n# =&gt; &lt;option value=\"Advanced\" disabled=\"disabled\"&gt;Advanced&lt;/option&gt;\n# =&gt; &lt;option value=\"Super Platinum\" disabled=\"disabled\"&gt;Super Platinum&lt;/option&gt;\n\noptions_for_select([\"Free\", \"Basic\", \"Advanced\", \"Super Platinum\"], selected: \"Free\", disabled: \"Super Platinum\")\n# =&gt; &lt;option value=\"Free\" selected=\"selected\"&gt;Free&lt;/option&gt;\n# =&gt; &lt;option value=\"Basic\"&gt;Basic&lt;/option&gt;\n# =&gt; &lt;option value=\"Advanced\"&gt;Advanced&lt;/option&gt;\n# =&gt; &lt;option value=\"Super Platinum\" disabled=\"disabled\"&gt;Super Platinum&lt;/option&gt;\n</pre> <p>NOTE: Only the option tags are returned, you have to wrap this call in a regular HTML select tag.</p> <div class=\"method-source-code\" id=\"options_for_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 350\ndef options_for_select(container, selected = nil)\n  return container if String === container\n\n  selected, disabled = extract_selected_and_disabled(selected).map do |r|\n    Array(r).map { |item| item.to_s }\n  end\n\n  container.map do |element|\n    html_attributes = option_html_attributes(element)\n    text, value = option_text_and_value(element).map { |item| item.to_s }\n\n    html_attributes[:selected] ||= option_value_selected?(value, selected)\n    html_attributes[:disabled] ||= disabled &amp;&amp; option_value_selected?(value, disabled)\n    html_attributes[:value] = value\n\n    content_tag_string(:option, text, html_attributes)\n  end.join(\"\\n\").html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-options_from_collection_for_select\"> <span class=\"method-name\">options_from_collection_for_select</span><span class=\"method-args\">(collection, value_method, text_method, selected = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string of option tags that have been compiled by iterating over the <code>collection</code> and assigning the result of a call to the <code>value_method</code> as the option value and the <code>text_method</code> as the option text.</p> <pre class=\"ruby\">options_from_collection_for_select(@people, 'id', 'name')\n# =&gt; &lt;option value=\"#{person.id}\"&gt;#{person.name}&lt;/option&gt;\n</pre> <p>This is more often than not used inside a select_tag like this example:</p> <pre class=\"ruby\">select_tag 'person', options_from_collection_for_select(@people, 'id', 'name')\n</pre> <p>If <code>selected</code> is specified as a value or array of values, the element(s) returning a match on <code>value_method</code> will be selected option tag(s).</p> <p>If <code>selected</code> is specified as a Proc, those members of the collection that return true for the anonymous function are the selected values.</p> <p><code>selected</code> can also be a hash, specifying both <code>:selected</code> and/or <code>:disabled</code> values as required.</p> <p>Be sure to specify the same class as the <code>value_method</code> when specifying selected or disabled options. Failure to do this will produce undesired results. Example:</p> <pre class=\"ruby\">options_from_collection_for_select(@people, 'id', 'name', '1')\n</pre> <p>Will not select a person with the id of 1 because 1 (an <a href=\"../../integer\">Integer</a>) is not the same as '1' (a string)</p> <pre class=\"ruby\">options_from_collection_for_select(@people, 'id', 'name', 1)\n</pre> <p>should produce the desired results.</p> <div class=\"method-source-code\" id=\"options_from_collection_for_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 393\ndef options_from_collection_for_select(collection, value_method, text_method, selected = nil)\n  options = collection.map do |element|\n    [value_for_collection(element, text_method), value_for_collection(element, value_method), option_html_attributes(element)]\n  end\n  selected, disabled = extract_selected_and_disabled(selected)\n  select_deselect = {\n    selected: extract_values_from_collection(collection, value_method, selected),\n    disabled: extract_values_from_collection(collection, value_method, disabled)\n  }\n\n  options_for_select(options, select_deselect)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select\"> <span class=\"method-name\">select</span><span class=\"method-args\">(object, method, choices = nil, options = {}, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a select tag and a series of contained option tags for the provided object and method. The option currently held by the object will be selected, provided that the object is available.</p> <p>There are two possible formats for the <code>choices</code> parameter, corresponding to other helpers' output:</p> <ul>\n<li> <p>A flat collection (see <code>options_for_select</code>).</p> </li>\n<li> <p>A nested collection (see <code>grouped_options_for_select</code>).</p> </li>\n</ul> <p>For example:</p> <pre class=\"ruby\">select(\"post\", \"person_id\", Person.all.collect {|p| [ p.name, p.id ] }, { include_blank: true })\n</pre> <p>would become:</p> <pre>&lt;select name=\"post[person_id]\"&gt;\n  &lt;option value=\"\"&gt;&lt;/option&gt;\n  &lt;option value=\"1\" selected=\"selected\"&gt;David&lt;/option&gt;\n  &lt;option value=\"2\"&gt;Sam&lt;/option&gt;\n  &lt;option value=\"3\"&gt;Tobias&lt;/option&gt;\n&lt;/select&gt;</pre> <p>assuming the associated person has ID 1.</p> <p>This can be used to provide a default set of options in the standard way: before rendering the create form, a new model instance is assigned the default options and bound to @model_name. Usually this model is not saved to the database. Instead, a second model object is created when the create request is received. This allows the user to submit a form page more than once with the expected results of creating multiple records. In addition, this allows a single partial to be used to generate form inputs for both edit and create forms.</p> <p>By default, <code>post.person_id</code> is the selected option. Specify <code>selected: value</code> to use a different selection or <code>selected: nil</code> to leave all options unselected. Similarly, you can specify values to be disabled in the option tags by specifying the <code>:disabled</code> option. This can either be a single value or an array of values to be disabled.</p> <p>A block can be passed to <code>select</code> to customize how the options tags will be rendered. This is useful when the options tag has complex attributes.</p> <pre class=\"ruby\">select(report, \"campaign_ids\") do\n  available_campaigns.each do |c|\n    content_tag(:option, c.name, value: c.id, data: { tags: c.tags.to_json })\n  end\nend\n</pre> <h4 id=\"method-i-select-label-Gotcha\">Gotcha</h4> <p>The HTML specification says when <code>multiple</code> parameter passed to select and all options got deselected web browsers do not send any value to server. Unfortunately this introduces a gotcha: if an <code>User</code> model has many <code>roles</code> and have <code>role_ids</code> accessor, and in the form that edits roles of the user the user deselects all roles from <code>role_ids</code> multiple select box, no <code>role_ids</code> parameter is sent. So, any mass-assignment idiom like</p> <pre class=\"ruby\">@user.update(params[:user])\n</pre> <p>wouldn't update roles.</p> <p>To prevent this the helper generates an auxiliary hidden field before every multiple select. The hidden field has the same name as multiple select and blank value.</p> <p><strong>Note:</strong> The client either sends only the hidden field (representing the deselected multiple select box), or both fields. This means that the resulting array always contains a blank string.</p> <p>In case if you don't want the helper to generate this hidden field you can specify <code>include_hidden: false</code> option.</p> <div class=\"method-source-code\" id=\"select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 162\ndef select(object, method, choices = nil, options = {}, html_options = {}, &amp;block)\n  Tags::Select.new(object, method, self, choices, options, html_options, &amp;block).render\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time_zone_options_for_select\"> <span class=\"method-name\">time_zone_options_for_select</span><span class=\"method-args\">(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string of option tags for pretty much any time zone in the world. Supply a <a href=\"../../activesupport/timezone\">ActiveSupport::TimeZone</a> name as <code>selected</code> to have it marked as the selected option tag. You can also supply an array of <a href=\"../../activesupport/timezone\">ActiveSupport::TimeZone</a> objects as <code>priority_zones</code>, so that they will be listed above the rest of the (long) list. (You can use <a href=\"../../activesupport/timezone#method-c-us_zones\">ActiveSupport::TimeZone.us_zones</a> as a convenience for obtaining a list of the US time zones, or a Regexp to select the zones of your choice)</p> <p>The <code>selected</code> parameter must be either <code>nil</code>, or a string that names a <a href=\"../../activesupport/timezone\">ActiveSupport::TimeZone</a>.</p> <p>By default, <code>model</code> is the <a href=\"../../activesupport/timezone\">ActiveSupport::TimeZone</a> constant (which can be obtained in Active Record as a value object). The only requirement is that the <code>model</code> parameter be an object that responds to <code>all</code>, and returns an array of objects that represent time zones.</p> <p>NOTE: Only the option tags are returned, you have to wrap this call in a regular HTML select tag.</p> <div class=\"method-source-code\" id=\"time_zone_options_for_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 568\ndef time_zone_options_for_select(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)\n  zone_options = \"\".html_safe\n\n  zones = model.all\n  convert_zones = lambda { |list| list.map { |z| [ z.to_s, z.name ] } }\n\n  if priority_zones\n    if priority_zones.is_a?(Regexp)\n      priority_zones = zones.select { |z| z =~ priority_zones }\n    end\n\n    zone_options.safe_concat options_for_select(convert_zones[priority_zones], selected)\n    zone_options.safe_concat content_tag(:option, '-------------', value: '', disabled: true)\n    zone_options.safe_concat \"\\n\"\n\n    zones = zones - priority_zones\n  end\n\n  zone_options.safe_concat options_for_select(convert_zones[zones], selected)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time_zone_select\"> <span class=\"method-name\">time_zone_select</span><span class=\"method-args\">(object, method, priority_zones = nil, options = {}, html_options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns select and option tags for the given object and method, using <a href=\"formoptionshelper#method-i-time_zone_options_for_select\">time_zone_options_for_select</a> to generate the list of option tags.</p> <p>In addition to the <code>:include_blank</code> option documented above, this method also supports a <code>:model</code> option, which defaults to <a href=\"../../activesupport/timezone\">ActiveSupport::TimeZone</a>. This may be used by users to specify a different time zone model object. (See <code>time_zone_options_for_select</code> for more information.)</p> <p>You can also supply an array of <a href=\"../../activesupport/timezone\">ActiveSupport::TimeZone</a> objects as <code>priority_zones</code>, so that they will be listed above the rest of the (long) list. (You can use <a href=\"../../activesupport/timezone#method-c-us_zones\">ActiveSupport::TimeZone.us_zones</a> as a convenience for obtaining a list of the US time zones, or a Regexp to select the zones of your choice)</p> <p>Finally, this method supports a <code>:default</code> option, which selects a default <a href=\"../../activesupport/timezone\">ActiveSupport::TimeZone</a> if the object's time zone is <code>nil</code>.</p> <pre class=\"ruby\">time_zone_select( \"user\", \"time_zone\", nil, include_blank: true)\n\ntime_zone_select( \"user\", \"time_zone\", nil, default: \"Pacific Time (US &amp; Canada)\" )\n\ntime_zone_select( \"user\", 'time_zone', ActiveSupport::TimeZone.us_zones, default: \"Pacific Time (US &amp; Canada)\")\n\ntime_zone_select( \"user\", 'time_zone', [ ActiveSupport::TimeZone['Alaska'], ActiveSupport::TimeZone['Hawaii'] ])\n\ntime_zone_select( \"user\", 'time_zone', /Australia/)\n\ntime_zone_select( \"user\", \"time_zone\", ActiveSupport::TimeZone.all.sort, model: ActiveSupport::TimeZone)\n</pre> <div class=\"method-source-code\" id=\"time_zone_select-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_options_helper.rb, line 290\ndef time_zone_select(object, method, priority_zones = nil, options = {}, html_options = {})\n  Tags::TimeZoneSelect.new(object, method, self, priority_zones, options, html_options).render\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/formtaghelper":"<h1 id=\"module-ActionView::Helpers::FormTagHelper\" class=\"module\"> module ActionView::Helpers::FormTagHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"urlhelper\">ActionView::Helpers::UrlHelper</a>, <a class=\"include\" href=\"texthelper\">ActionView::Helpers::TextHelper</a>\n</dd>\n</dl> <section class=\"description\"> <p>Provides a number of methods for creating form tags that don't rely on an Active Record object assigned to the template like <a href=\"formhelper\">FormHelper</a> does. Instead, you provide the names and values manually.</p> <p>NOTE: The HTML options <code>disabled</code>, <code>readonly</code>, and <code>multiple</code> can all be treated as booleans. So specifying <code>disabled: true</code> will give <code>disabled=\"disabled\"</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-button_tag\"> <span class=\"method-name\">button_tag</span><span class=\"method-args\">(content_or_options = nil, options = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a button element that defines a <code>submit</code> button, <code>reset</code>button or a generic button which can be used in JavaScript, for example. You can use the button tag as a regular submit tag but it isn't supported in legacy browsers. However, the button tag allows richer labels such as images and emphasis, so this helper will also accept a block.</p> <h4 id=\"method-i-button_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:data</code> - This option can be used to add custom data attributes.</p> </li>\n<li> <p><code>:disabled</code> - If true, the user will not be able to use this input.</p> </li>\n<li> <p>Any other key creates standard HTML options for the tag.</p> </li>\n</ul> <h4 id=\"method-i-button_tag-label-Data+attributes\">Data attributes</h4> <ul>\n<li> <p><code>confirm: 'question?'</code> - If present, the unobtrusive JavaScript drivers will provide a prompt with the question specified. If the user accepts, the form is processed normally, otherwise no action is taken.</p> </li>\n<li> <p><code>:disable_with</code> - Value of this parameter will be used as the value for a disabled version of the submit button when the form is submitted. This feature is provided by the unobtrusive JavaScript driver.</p> </li>\n</ul> <h4 id=\"method-i-button_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">button_tag\n# =&gt; &lt;button name=\"button\" type=\"submit\"&gt;Button&lt;/button&gt;\n\nbutton_tag(type: 'button') do\n  content_tag(:strong, 'Ask me!')\nend\n# =&gt; &lt;button name=\"button\" type=\"button\"&gt;\n#     &lt;strong&gt;Ask me!&lt;/strong&gt;\n#    &lt;/button&gt;\n\nbutton_tag \"Checkout\", data: { disable_with: \"Please wait...\" }\n# =&gt; &lt;button data-disable-with=\"Please wait...\" name=\"button\" type=\"submit\"&gt;Checkout&lt;/button&gt;\n</pre> <div class=\"method-source-code\" id=\"button_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 485\ndef button_tag(content_or_options = nil, options = nil, &amp;block)\n  if content_or_options.is_a? Hash\n    options = content_or_options\n  else\n    options ||= {}\n  end\n\n  options = { 'name' =&gt; 'button', 'type' =&gt; 'submit' }.merge!(options.stringify_keys)\n\n  if block_given?\n    content_tag :button, options, &amp;block\n  else\n    content_tag :button, content_or_options || 'Button', options\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-check_box_tag\"> <span class=\"method-name\">check_box_tag</span><span class=\"method-args\">(name, value = \"1\", checked = false, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a check box form input tag.</p> <h4 id=\"method-i-check_box_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p>Any other key creates standard HTML options for the tag.</p> </li>\n</ul> <h4 id=\"method-i-check_box_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">check_box_tag 'accept'\n# =&gt; &lt;input id=\"accept\" name=\"accept\" type=\"checkbox\" value=\"1\" /&gt;\n\ncheck_box_tag 'rock', 'rock music'\n# =&gt; &lt;input id=\"rock\" name=\"rock\" type=\"checkbox\" value=\"rock music\" /&gt;\n\ncheck_box_tag 'receive_email', 'yes', true\n# =&gt; &lt;input checked=\"checked\" id=\"receive_email\" name=\"receive_email\" type=\"checkbox\" value=\"yes\" /&gt;\n\ncheck_box_tag 'tos', 'yes', false, class: 'accept_tos'\n# =&gt; &lt;input class=\"accept_tos\" id=\"tos\" name=\"tos\" type=\"checkbox\" value=\"yes\" /&gt;\n\ncheck_box_tag 'eula', 'accepted', false, disabled: true\n# =&gt; &lt;input disabled=\"disabled\" id=\"eula\" name=\"eula\" type=\"checkbox\" value=\"accepted\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"check_box_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 372\ndef check_box_tag(name, value = \"1\", checked = false, options = {})\n  html_options = { \"type\" =&gt; \"checkbox\", \"name\" =&gt; name, \"id\" =&gt; sanitize_to_id(name), \"value\" =&gt; value }.update(options.stringify_keys)\n  html_options[\"checked\"] = \"checked\" if checked\n  tag :input, html_options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-color_field_tag\"> <span class=\"method-name\">color_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “color”.</p> <h4 id=\"method-i-color_field_tag-label-Options\">Options</h4> <ul><li> <p>Accepts the same options as text_field_tag.</p> </li></ul> <h4 id=\"method-i-color_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">color_field_tag 'name'\n# =&gt; &lt;input id=\"name\" name=\"name\" type=\"color\" /&gt;\n\ncolor_field_tag 'color', '#DEF726'\n# =&gt; &lt;input id=\"color\" name=\"color\" type=\"color\" value=\"#DEF726\" /&gt;\n\ncolor_field_tag 'color', nil, class: 'special_input'\n# =&gt; &lt;input class=\"special_input\" id=\"color\" name=\"color\" type=\"color\" /&gt;\n\ncolor_field_tag 'color', '#DEF726', class: 'special_input', disabled: true\n# =&gt; &lt;input disabled=\"disabled\" class=\"special_input\" id=\"color\" name=\"color\" type=\"color\" value=\"#DEF726\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"color_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 580\ndef color_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :color))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-date_field_tag\"> <span class=\"method-name\">date_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “date”.</p> <h4 id=\"method-i-date_field_tag-label-Options\">Options</h4> <ul><li> <p>Accepts the same options as text_field_tag.</p> </li></ul> <h4 id=\"method-i-date_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">date_field_tag 'name'\n# =&gt; &lt;input id=\"name\" name=\"name\" type=\"date\" /&gt;\n\ndate_field_tag 'date', '01/01/2014'\n# =&gt; &lt;input id=\"date\" name=\"date\" type=\"date\" value=\"01/01/2014\" /&gt;\n\ndate_field_tag 'date', nil, class: 'special_input'\n# =&gt; &lt;input class=\"special_input\" id=\"date\" name=\"date\" type=\"date\" /&gt;\n\ndate_field_tag 'date', '01/01/2014', class: 'special_input', disabled: true\n# =&gt; &lt;input disabled=\"disabled\" class=\"special_input\" id=\"date\" name=\"date\" type=\"date\" value=\"01/01/2014\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"date_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 644\ndef date_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :date))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-datetime_field_tag\"> <span class=\"method-name\">datetime_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “datetime”.</p> <h3 id=\"method-i-datetime_field_tag-label-Options\">Options</h3> <ul>\n<li> <p><code>:min</code> - The minimum acceptable value.</p> </li>\n<li> <p><code>:max</code> - The maximum acceptable value.</p> </li>\n<li> <p><code>:step</code> - The acceptable value granularity.</p> </li>\n<li> <p>Otherwise accepts the same options as text_field_tag.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"datetime_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 666\ndef datetime_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :datetime))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-datetime_local_field_tag\"> <span class=\"method-name\">datetime_local_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “datetime-local”.</p> <h3 id=\"method-i-datetime_local_field_tag-label-Options\">Options</h3> <ul>\n<li> <p><code>:min</code> - The minimum acceptable value.</p> </li>\n<li> <p><code>:max</code> - The maximum acceptable value.</p> </li>\n<li> <p><code>:step</code> - The acceptable value granularity.</p> </li>\n<li> <p>Otherwise accepts the same options as text_field_tag.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"datetime_local_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 677\ndef datetime_local_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: 'datetime-local'))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-email_field_tag\"> <span class=\"method-name\">email_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “email”.</p> <h4 id=\"method-i-email_field_tag-label-Options\">Options</h4> <ul><li> <p>Accepts the same options as text_field_tag.</p> </li></ul> <h4 id=\"method-i-email_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">email_field_tag 'name'\n# =&gt; &lt;input id=\"name\" name=\"name\" type=\"email\" /&gt;\n\nemail_field_tag 'email', 'email@example.com'\n# =&gt; &lt;input id=\"email\" name=\"email\" type=\"email\" value=\"email@example.com\" /&gt;\n\nemail_field_tag 'email', nil, class: 'special_input'\n# =&gt; &lt;input class=\"special_input\" id=\"email\" name=\"email\" type=\"email\" /&gt;\n\nemail_field_tag 'email', 'email@example.com', class: 'special_input', disabled: true\n# =&gt; &lt;input disabled=\"disabled\" class=\"special_input\" id=\"email\" name=\"email\" type=\"email\" value=\"email@example.com\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"email_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 741\ndef email_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :email))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-field_set_tag\"> <span class=\"method-name\">field_set_tag</span><span class=\"method-args\">(legend = nil, options = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a field set for grouping HTML form elements.</p> <p><code>legend</code> will become the fieldset's title (optional as per W3C). <code>options</code> accept the same values as tag.</p> <h4 id=\"method-i-field_set_tag-label-Examples\">Examples</h4> <pre>&lt;%= field_set_tag do %&gt;\n  &lt;p&gt;&lt;%= text_field_tag 'name' %&gt;&lt;/p&gt;\n&lt;% end %&gt;\n# =&gt; &lt;fieldset&gt;&lt;p&gt;&lt;input id=\"name\" name=\"name\" type=\"text\" /&gt;&lt;/p&gt;&lt;/fieldset&gt;\n\n&lt;%= field_set_tag 'Your details' do %&gt;\n  &lt;p&gt;&lt;%= text_field_tag 'name' %&gt;&lt;/p&gt;\n&lt;% end %&gt;\n# =&gt; &lt;fieldset&gt;&lt;legend&gt;Your details&lt;/legend&gt;&lt;p&gt;&lt;input id=\"name\" name=\"name\" type=\"text\" /&gt;&lt;/p&gt;&lt;/fieldset&gt;\n\n&lt;%= field_set_tag nil, class: 'format' do %&gt;\n  &lt;p&gt;&lt;%= text_field_tag 'name' %&gt;&lt;/p&gt;\n&lt;% end %&gt;\n# =&gt; &lt;fieldset class=\"format\"&gt;&lt;p&gt;&lt;input id=\"name\" name=\"name\" type=\"text\" /&gt;&lt;/p&gt;&lt;/fieldset&gt;</pre> <div class=\"method-source-code\" id=\"field_set_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 556\ndef field_set_tag(legend = nil, options = nil, &amp;block)\n  output = tag(:fieldset, options, true)\n  output.safe_concat(content_tag(:legend, legend)) unless legend.blank?\n  output.concat(capture(&amp;block)) if block_given?\n  output.safe_concat(\"&lt;/fieldset&gt;\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-file_field_tag\"> <span class=\"method-name\">file_field_tag</span><span class=\"method-args\">(name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a file upload field. If you are using file uploads then you will also need to set the multipart option for the form tag:</p> <pre>&lt;%= form_tag '/upload', multipart: true do %&gt;\n  &lt;label for=\"file\"&gt;File to Upload&lt;/label&gt; &lt;%= file_field_tag \"file\" %&gt;\n  &lt;%= submit_tag %&gt;\n&lt;% end %&gt;</pre> <p>The specified URL will then be passed a <a href=\"../../file\">File</a> object containing the selected file, or if the field was left blank, a StringIO object.</p> <h4 id=\"method-i-file_field_tag-label-Options\">Options</h4> <ul>\n<li> <p>Creates standard HTML attributes for the tag.</p> </li>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p><code>:multiple</code> - If set to true, *in most updated browsers* the user will be allowed to select multiple files.</p> </li>\n<li> <p><code>:accept</code> - If set to one or multiple mime-types, the user will be suggested a filter when choosing a file. You still need to set up model validations.</p> </li>\n</ul> <h4 id=\"method-i-file_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">file_field_tag 'attachment'\n# =&gt; &lt;input id=\"attachment\" name=\"attachment\" type=\"file\" /&gt;\n\nfile_field_tag 'avatar', class: 'profile_input'\n# =&gt; &lt;input class=\"profile_input\" id=\"avatar\" name=\"avatar\" type=\"file\" /&gt;\n\nfile_field_tag 'picture', disabled: true\n# =&gt; &lt;input disabled=\"disabled\" id=\"picture\" name=\"picture\" type=\"file\" /&gt;\n\nfile_field_tag 'resume', value: '~/resume.doc'\n# =&gt; &lt;input id=\"resume\" name=\"resume\" type=\"file\" value=\"~/resume.doc\" /&gt;\n\nfile_field_tag 'user_pic', accept: 'image/png,image/gif,image/jpeg'\n# =&gt; &lt;input accept=\"image/png,image/gif,image/jpeg\" id=\"user_pic\" name=\"user_pic\" type=\"file\" /&gt;\n\nfile_field_tag 'file', accept: 'text/html', class: 'upload', value: 'index.html'\n# =&gt; &lt;input accept=\"text/html\" class=\"upload\" id=\"file\" name=\"file\" type=\"file\" value=\"index.html\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"file_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 272\ndef file_field_tag(name, options = {})\n  text_field_tag(name, nil, options.merge(type: :file))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-form_tag\"> <span class=\"method-name\">form_tag</span><span class=\"method-args\">(url_for_options = {}, options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Starts a form tag that points the action to an url configured with <code>url_for_options</code> just like ActionController::Base#url_for. The method for the form defaults to POST.</p> <h4 id=\"method-i-form_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:multipart</code> - If set to true, the enctype is set to “multipart/form-data”.</p> </li>\n<li> <p><code>:method</code> - The method to use when submitting the form, usually either “get” or “post”. If “patch”, “put”, “delete”, or another verb is used, a hidden input with name <code>_method</code> is added to simulate the verb over post.</p> </li>\n<li> <p><code>:authenticity_token</code> - Authenticity token to use in the form. Use only if you need to pass custom authenticity token string, or to not add authenticity_token field at all (by passing <code>false</code>). Remote forms may omit the embedded authenticity token by setting <code>config.action_view.embed_authenticity_token_in_remote_forms =\nfalse</code>. This is helpful when you're fragment-caching the form. Remote forms get the authenticity token from the <code>meta</code> tag, so embedding is unnecessary unless you support browsers without JavaScript.</p> </li>\n<li> <p><code>:remote</code> - If set to true, will allow the Unobtrusive JavaScript drivers to control the submit behavior. By default this behavior is an ajax submit.</p> </li>\n<li> <p><code>:enforce_utf8</code> - If set to false, a hidden input with name utf8 is not output.</p> </li>\n<li> <p>Any other key creates standard HTML attributes for the tag.</p> </li>\n</ul> <h4 id=\"method-i-form_tag-label-Examples\">Examples</h4> <pre>form_tag('/posts')\n# =&gt; &lt;form action=\"/posts\" method=\"post\"&gt;\n\nform_tag('/posts/1', method: :put)\n# =&gt; &lt;form action=\"/posts/1\" method=\"post\"&gt; ... &lt;input name=\"_method\" type=\"hidden\" value=\"put\" /&gt; ...\n\nform_tag('/upload', multipart: true)\n# =&gt; &lt;form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n\n&lt;%= form_tag('/posts') do -%&gt;\n  &lt;div&gt;&lt;%= submit_tag 'Save' %&gt;&lt;/div&gt;\n&lt;% end -%&gt;\n# =&gt; &lt;form action=\"/posts\" method=\"post\"&gt;&lt;div&gt;&lt;input type=\"submit\" name=\"commit\" value=\"Save\" /&gt;&lt;/div&gt;&lt;/form&gt;\n\n&lt;%= form_tag('/posts', remote: true) %&gt;\n# =&gt; &lt;form action=\"/posts\" method=\"post\" data-remote=\"true\"&gt;\n\nform_tag('http://far.away.com/form', authenticity_token: false)\n# form without authenticity token\n\nform_tag('http://far.away.com/form', authenticity_token: \"cf50faa3fe97702ca1ae\")\n# form with custom authenticity token</pre> <div class=\"method-source-code\" id=\"form_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 67\ndef form_tag(url_for_options = {}, options = {}, &amp;block)\n  html_options = html_options_for_form(url_for_options, options)\n  if block_given?\n    form_tag_with_body(html_options, capture(&amp;block))\n  else\n    form_tag_html(html_options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-hidden_field_tag\"> <span class=\"method-name\">hidden_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a hidden form input field used to transmit data that would be lost due to HTTP's statelessness or data that should be hidden from the user.</p> <h4 id=\"method-i-hidden_field_tag-label-Options\">Options</h4> <ul><li> <p>Creates standard HTML attributes for the tag.</p> </li></ul> <h4 id=\"method-i-hidden_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">hidden_field_tag 'tags_list'\n# =&gt; &lt;input id=\"tags_list\" name=\"tags_list\" type=\"hidden\" /&gt;\n\nhidden_field_tag 'token', 'VUBJKB23UIVI1UU1VOBVI@'\n# =&gt; &lt;input id=\"token\" name=\"token\" type=\"hidden\" value=\"VUBJKB23UIVI1UU1VOBVI@\" /&gt;\n\nhidden_field_tag 'collected_input', '', onchange: \"alert('Input collected!')\"\n# =&gt; &lt;input id=\"collected_input\" name=\"collected_input\" onchange=\"alert('Input collected!')\"\n#    type=\"hidden\" value=\"\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"hidden_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 233\ndef hidden_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :hidden))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-image_submit_tag\"> <span class=\"method-name\">image_submit_tag</span><span class=\"method-args\">(source, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Displays an image which when clicked will submit the form.</p> <p><code>source</code> is passed to <a href=\"asseturlhelper#method-i-path_to_image\">ActionView::Helpers::AssetUrlHelper#path_to_image</a></p> <h4 id=\"method-i-image_submit_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:data</code> - This option can be used to add custom data attributes.</p> </li>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p>Any other key creates standard HTML options for the tag.</p> </li>\n</ul> <h4 id=\"method-i-image_submit_tag-label-Data+attributes\">Data attributes</h4> <ul><li> <p><code>confirm: 'question?'</code> - This will add a JavaScript confirm prompt with the question specified. If the user accepts, the form is processed normally, otherwise no action is taken.</p> </li></ul> <h4 id=\"method-i-image_submit_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">image_submit_tag(\"login.png\")\n# =&gt; &lt;input alt=\"Login\" src=\"/assets/login.png\" type=\"image\" /&gt;\n\nimage_submit_tag(\"purchase.png\", disabled: true)\n# =&gt; &lt;input alt=\"Purchase\" disabled=\"disabled\" src=\"/assets/purchase.png\" type=\"image\" /&gt;\n\nimage_submit_tag(\"search.png\", class: 'search_button', alt: 'Find')\n# =&gt; &lt;input alt=\"Find\" class=\"search_button\" src=\"/assets/search.png\" type=\"image\" /&gt;\n\nimage_submit_tag(\"agree.png\", disabled: true, class: \"agree_disagree_button\")\n# =&gt; &lt;input alt=\"Agree\" class=\"agree_disagree_button\" disabled=\"disabled\" src=\"/assets/agree.png\" type=\"image\" /&gt;\n\nimage_submit_tag(\"save.png\", data: { confirm: \"Are you sure?\" })\n# =&gt; &lt;input alt=\"Save\" src=\"/assets/save.png\" data-confirm=\"Are you sure?\" type=\"image\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"image_submit_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 531\ndef image_submit_tag(source, options = {})\n  options = options.stringify_keys\n  tag :input, { \"alt\" =&gt; image_alt(source), \"type\" =&gt; \"image\", \"src\" =&gt; path_to_image(source) }.update(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-label_tag\"> <span class=\"method-name\">label_tag</span><span class=\"method-args\">(name = nil, content_or_options = nil, options = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a label element. Accepts a block.</p> <h4 id=\"method-i-label_tag-label-Options\">Options</h4> <ul><li> <p>Creates standard HTML attributes for the tag.</p> </li></ul> <h4 id=\"method-i-label_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">label_tag 'name'\n# =&gt; &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n\nlabel_tag 'name', 'Your name'\n# =&gt; &lt;label for=\"name\"&gt;Your name&lt;/label&gt;\n\nlabel_tag 'name', nil, class: 'small_label'\n# =&gt; &lt;label for=\"name\" class=\"small_label\"&gt;Name&lt;/label&gt;\n</pre> <div class=\"method-source-code\" id=\"label_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 206\ndef label_tag(name = nil, content_or_options = nil, options = nil, &amp;block)\n  if block_given? &amp;&amp; content_or_options.is_a?(Hash)\n    options = content_or_options = content_or_options.stringify_keys\n  else\n    options ||= {}\n    options = options.stringify_keys\n  end\n  options[\"for\"] = sanitize_to_id(name) unless name.blank? || options.has_key?(\"for\")\n  content_tag :label, content_or_options || name.to_s.humanize, options, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-month_field_tag\"> <span class=\"method-name\">month_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “month”.</p> <h3 id=\"method-i-month_field_tag-label-Options\">Options</h3> <ul>\n<li> <p><code>:min</code> - The minimum acceptable value.</p> </li>\n<li> <p><code>:max</code> - The maximum acceptable value.</p> </li>\n<li> <p><code>:step</code> - The acceptable value granularity.</p> </li>\n<li> <p>Otherwise accepts the same options as text_field_tag.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"month_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 688\ndef month_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :month))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_field_tag\"> <span class=\"method-name\">number_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a number field.</p> <h4 id=\"method-i-number_field_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:min</code> - The minimum acceptable value.</p> </li>\n<li> <p><code>:max</code> - The maximum acceptable value.</p> </li>\n<li> <p><code>:in</code> - A range specifying the <code>:min</code> and <code>:max</code> values.</p> </li>\n<li> <p><code>:within</code> - Same as <code>:in</code>.</p> </li>\n<li> <p><code>:step</code> - The acceptable value granularity.</p> </li>\n<li> <p>Otherwise accepts the same options as text_field_tag.</p> </li>\n</ul> <h4 id=\"method-i-number_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">number_field_tag 'quantity'\n# =&gt; &lt;input id=\"quantity\" name=\"quantity\" type=\"number\" /&gt;\n\nnumber_field_tag 'quantity', '1'\n# =&gt; &lt;input id=\"quantity\" name=\"quantity\" type=\"number\" value=\"1\" /&gt;\n\nnumber_field_tag 'quantity', nil, class: 'special_input'\n# =&gt; &lt;input class=\"special_input\" id=\"quantity\" name=\"quantity\" type=\"number\" /&gt;\n\nnumber_field_tag 'quantity', nil, min: 1\n# =&gt; &lt;input id=\"quantity\" name=\"quantity\" min=\"1\" type=\"number\" /&gt;\n\nnumber_field_tag 'quantity', nil, max: 9\n# =&gt; &lt;input id=\"quantity\" name=\"quantity\" max=\"9\" type=\"number\" /&gt;\n\nnumber_field_tag 'quantity', nil, in: 1...10\n# =&gt; &lt;input id=\"quantity\" name=\"quantity\" min=\"1\" max=\"9\" type=\"number\" /&gt;\n\nnumber_field_tag 'quantity', nil, within: 1...10\n# =&gt; &lt;input id=\"quantity\" name=\"quantity\" min=\"1\" max=\"9\" type=\"number\" /&gt;\n\nnumber_field_tag 'quantity', nil, min: 1, max: 10\n# =&gt; &lt;input id=\"quantity\" name=\"quantity\" min=\"1\" max=\"9\" type=\"number\" /&gt;\n\nnumber_field_tag 'quantity', nil, min: 1, max: 10, step: 2\n# =&gt; &lt;input id=\"quantity\" name=\"quantity\" min=\"1\" max=\"9\" step=\"2\" type=\"number\" /&gt;\n\nnumber_field_tag 'quantity', '1', class: 'special_input', disabled: true\n# =&gt; &lt;input disabled=\"disabled\" class=\"special_input\" id=\"quantity\" name=\"quantity\" type=\"number\" value=\"1\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"number_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 786\ndef number_field_tag(name, value = nil, options = {})\n  options = options.stringify_keys\n  options[\"type\"] ||= \"number\"\n  if range = options.delete(\"in\") || options.delete(\"within\")\n    options.update(\"min\" =&gt; range.min, \"max\" =&gt; range.max)\n  end\n  text_field_tag(name, value, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-password_field_tag\"> <span class=\"method-name\">password_field_tag</span><span class=\"method-args\">(name = \"password\", value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a password field, a masked text field that will hide the users input behind a mask character.</p> <h4 id=\"method-i-password_field_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p><code>:size</code> - The number of visible characters that will fit in the input.</p> </li>\n<li> <p><code>:maxlength</code> - The maximum number of characters that the browser will allow the user to enter.</p> </li>\n<li> <p>Any other key creates standard HTML attributes for the tag.</p> </li>\n</ul> <h4 id=\"method-i-password_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">password_field_tag 'pass'\n# =&gt; &lt;input id=\"pass\" name=\"pass\" type=\"password\" /&gt;\n\npassword_field_tag 'secret', 'Your secret here'\n# =&gt; &lt;input id=\"secret\" name=\"secret\" type=\"password\" value=\"Your secret here\" /&gt;\n\npassword_field_tag 'masked', nil, class: 'masked_input_field'\n# =&gt; &lt;input class=\"masked_input_field\" id=\"masked\" name=\"masked\" type=\"password\" /&gt;\n\npassword_field_tag 'token', '', size: 15\n# =&gt; &lt;input id=\"token\" name=\"token\" size=\"15\" type=\"password\" value=\"\" /&gt;\n\npassword_field_tag 'key', nil, maxlength: 16\n# =&gt; &lt;input id=\"key\" maxlength=\"16\" name=\"key\" type=\"password\" /&gt;\n\npassword_field_tag 'confirm_pass', nil, disabled: true\n# =&gt; &lt;input disabled=\"disabled\" id=\"confirm_pass\" name=\"confirm_pass\" type=\"password\" /&gt;\n\npassword_field_tag 'pin', '1234', maxlength: 4, size: 6, class: \"pin_input\"\n# =&gt; &lt;input class=\"pin_input\" id=\"pin\" maxlength=\"4\" name=\"pin\" size=\"6\" type=\"password\" value=\"1234\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"password_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 305\ndef password_field_tag(name = \"password\", value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :password))\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-phone_field_tag\"> <span class=\"method-name\">phone_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"formtaghelper#method-i-telephone_field_tag\">telephone_field_tag</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-radio_button_tag\"> <span class=\"method-name\">radio_button_tag</span><span class=\"method-args\">(name, value, checked = false, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a radio button; use groups of radio buttons named the same to allow users to select from a group of options.</p> <h4 id=\"method-i-radio_button_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p>Any other key creates standard HTML options for the tag.</p> </li>\n</ul> <h4 id=\"method-i-radio_button_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">radio_button_tag 'gender', 'male'\n# =&gt; &lt;input id=\"gender_male\" name=\"gender\" type=\"radio\" value=\"male\" /&gt;\n\nradio_button_tag 'receive_updates', 'no', true\n# =&gt; &lt;input checked=\"checked\" id=\"receive_updates_no\" name=\"receive_updates\" type=\"radio\" value=\"no\" /&gt;\n\nradio_button_tag 'time_slot', \"3:00 p.m.\", false, disabled: true\n# =&gt; &lt;input disabled=\"disabled\" id=\"time_slot_300_pm\" name=\"time_slot\" type=\"radio\" value=\"3:00 p.m.\" /&gt;\n\nradio_button_tag 'color', \"green\", true, class: \"color_input\"\n# =&gt; &lt;input checked=\"checked\" class=\"color_input\" id=\"color_green\" name=\"color\" type=\"radio\" value=\"green\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"radio_button_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 397\ndef radio_button_tag(name, value, checked = false, options = {})\n  html_options = { \"type\" =&gt; \"radio\", \"name\" =&gt; name, \"id\" =&gt; \"#{sanitize_to_id(name)}_#{sanitize_to_id(value)}\", \"value\" =&gt; value }.update(options.stringify_keys)\n  html_options[\"checked\"] = \"checked\" if checked\n  tag :input, html_options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-range_field_tag\"> <span class=\"method-name\">range_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a range form element.</p> <h4 id=\"method-i-range_field_tag-label-Options\">Options</h4> <ul><li> <p>Accepts the same options as number_field_tag.</p> </li></ul> <div class=\"method-source-code\" id=\"range_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 799\ndef range_field_tag(name, value = nil, options = {})\n  number_field_tag(name, value, options.merge(type: :range))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-search_field_tag\"> <span class=\"method-name\">search_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “search”.</p> <h4 id=\"method-i-search_field_tag-label-Options\">Options</h4> <ul><li> <p>Accepts the same options as text_field_tag.</p> </li></ul> <h4 id=\"method-i-search_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">search_field_tag 'name'\n# =&gt; &lt;input id=\"name\" name=\"name\" type=\"search\" /&gt;\n\nsearch_field_tag 'search', 'Enter your search query here'\n# =&gt; &lt;input id=\"search\" name=\"search\" type=\"search\" value=\"Enter your search query here\" /&gt;\n\nsearch_field_tag 'search', nil, class: 'special_input'\n# =&gt; &lt;input class=\"special_input\" id=\"search\" name=\"search\" type=\"search\" /&gt;\n\nsearch_field_tag 'search', 'Enter your search query here', class: 'special_input', disabled: true\n# =&gt; &lt;input disabled=\"disabled\" class=\"special_input\" id=\"search\" name=\"search\" type=\"search\" value=\"Enter your search query here\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"search_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 601\ndef search_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :search))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_tag\"> <span class=\"method-name\">select_tag</span><span class=\"method-args\">(name, option_tags = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a dropdown selection box, or if the <code>:multiple</code> option is set to true, a multiple choice selection box.</p> <p>Helpers::FormOptions can be used to create common select boxes such as countries, time zones, or associated records. <code>option_tags</code> is a string containing the option tags for the select box.</p> <h4 id=\"method-i-select_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:multiple</code> - If set to true the selection will allow multiple choices.</p> </li>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p><code>:include_blank</code> - If set to true, an empty option will be created. If set to a string, the string will be used as the option's content and the value will be empty.</p> </li>\n<li> <p><code>:prompt</code> - Create a prompt option with blank value and the text asking user to select something.</p> </li>\n<li> <p>Any other key creates standard HTML attributes for the tag.</p> </li>\n</ul> <h4 id=\"method-i-select_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">select_tag \"people\", options_from_collection_for_select(@people, \"id\", \"name\")\n# &lt;select id=\"people\" name=\"people\"&gt;&lt;option value=\"1\"&gt;David&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"people\", options_from_collection_for_select(@people, \"id\", \"name\", \"1\")\n# &lt;select id=\"people\" name=\"people\"&gt;&lt;option value=\"1\" selected=\"selected\"&gt;David&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"people\", \"&lt;option&gt;David&lt;/option&gt;\".html_safe\n# =&gt; &lt;select id=\"people\" name=\"people\"&gt;&lt;option&gt;David&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"count\", \"&lt;option&gt;1&lt;/option&gt;&lt;option&gt;2&lt;/option&gt;&lt;option&gt;3&lt;/option&gt;&lt;option&gt;4&lt;/option&gt;\".html_safe\n# =&gt; &lt;select id=\"count\" name=\"count\"&gt;&lt;option&gt;1&lt;/option&gt;&lt;option&gt;2&lt;/option&gt;\n#    &lt;option&gt;3&lt;/option&gt;&lt;option&gt;4&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"colors\", \"&lt;option&gt;Red&lt;/option&gt;&lt;option&gt;Green&lt;/option&gt;&lt;option&gt;Blue&lt;/option&gt;\".html_safe, multiple: true\n# =&gt; &lt;select id=\"colors\" multiple=\"multiple\" name=\"colors[]\"&gt;&lt;option&gt;Red&lt;/option&gt;\n#    &lt;option&gt;Green&lt;/option&gt;&lt;option&gt;Blue&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"locations\", \"&lt;option&gt;Home&lt;/option&gt;&lt;option selected='selected'&gt;Work&lt;/option&gt;&lt;option&gt;Out&lt;/option&gt;\".html_safe\n# =&gt; &lt;select id=\"locations\" name=\"locations\"&gt;&lt;option&gt;Home&lt;/option&gt;&lt;option selected='selected'&gt;Work&lt;/option&gt;\n#    &lt;option&gt;Out&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"access\", \"&lt;option&gt;Read&lt;/option&gt;&lt;option&gt;Write&lt;/option&gt;\".html_safe, multiple: true, class: 'form_input', id: 'unique_id'\n# =&gt; &lt;select class=\"form_input\" id=\"unique_id\" multiple=\"multiple\" name=\"access[]\"&gt;&lt;option&gt;Read&lt;/option&gt;\n#    &lt;option&gt;Write&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"people\", options_from_collection_for_select(@people, \"id\", \"name\"), include_blank: true\n# =&gt; &lt;select id=\"people\" name=\"people\"&gt;&lt;option value=\"\"&gt;&lt;/option&gt;&lt;option value=\"1\"&gt;David&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"people\", options_from_collection_for_select(@people, \"id\", \"name\"), include_blank: \"All\"\n# =&gt; &lt;select id=\"people\" name=\"people\"&gt;&lt;option value=\"\"&gt;All&lt;/option&gt;&lt;option value=\"1\"&gt;David&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"people\", options_from_collection_for_select(@people, \"id\", \"name\"), prompt: \"Select something\"\n# =&gt; &lt;select id=\"people\" name=\"people\"&gt;&lt;option value=\"\"&gt;Select something&lt;/option&gt;&lt;option value=\"1\"&gt;David&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"destination\", \"&lt;option&gt;NYC&lt;/option&gt;&lt;option&gt;Paris&lt;/option&gt;&lt;option&gt;Rome&lt;/option&gt;\".html_safe, disabled: true\n# =&gt; &lt;select disabled=\"disabled\" id=\"destination\" name=\"destination\"&gt;&lt;option&gt;NYC&lt;/option&gt;\n#    &lt;option&gt;Paris&lt;/option&gt;&lt;option&gt;Rome&lt;/option&gt;&lt;/select&gt;\n\nselect_tag \"credit_card\", options_for_select([ \"VISA\", \"MasterCard\" ], \"MasterCard\")\n# =&gt; &lt;select id=\"credit_card\" name=\"credit_card\"&gt;&lt;option&gt;VISA&lt;/option&gt;\n#    &lt;option selected=\"selected\"&gt;MasterCard&lt;/option&gt;&lt;/select&gt;\n</pre> <div class=\"method-source-code\" id=\"select_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 131\ndef select_tag(name, option_tags = nil, options = {})\n  option_tags ||= \"\"\n  html_name = (options[:multiple] == true &amp;&amp; !name.to_s.ends_with?(\"[]\")) ? \"#{name}[]\" : name\n\n  if options.include?(:include_blank)\n    include_blank = options.delete(:include_blank)\n\n    if include_blank == true\n      include_blank = ''\n    end\n\n    if include_blank\n      option_tags = content_tag(:option, include_blank, value: '').safe_concat(option_tags)\n    end\n  end\n\n  if prompt = options.delete(:prompt)\n    option_tags = content_tag(:option, prompt, value: '').safe_concat(option_tags)\n  end\n\n  content_tag :select, option_tags, { \"name\" =&gt; html_name, \"id\" =&gt; sanitize_to_id(name) }.update(options.stringify_keys)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-submit_tag\"> <span class=\"method-name\">submit_tag</span><span class=\"method-args\">(value = \"Save changes\", options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a submit button with the text <code>value</code> as the caption.</p> <h4 id=\"method-i-submit_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:data</code> - This option can be used to add custom data attributes.</p> </li>\n<li> <p><code>:disabled</code> - If true, the user will not be able to use this input.</p> </li>\n<li> <p>Any other key creates standard HTML options for the tag.</p> </li>\n</ul> <h4 id=\"method-i-submit_tag-label-Data+attributes\">Data attributes</h4> <ul>\n<li> <p><code>confirm: 'question?'</code> - If present the unobtrusive JavaScript drivers will provide a prompt with the question specified. If the user accepts, the form is processed normally, otherwise no action is taken.</p> </li>\n<li> <p><code>:disable_with</code> - Value of this parameter will be used as the value for a disabled version of the submit button when the form is submitted. This feature is provided by the unobtrusive JavaScript driver.</p> </li>\n</ul> <h4 id=\"method-i-submit_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">submit_tag\n# =&gt; &lt;input name=\"commit\" type=\"submit\" value=\"Save changes\" /&gt;\n\nsubmit_tag \"Edit this article\"\n# =&gt; &lt;input name=\"commit\" type=\"submit\" value=\"Edit this article\" /&gt;\n\nsubmit_tag \"Save edits\", disabled: true\n# =&gt; &lt;input disabled=\"disabled\" name=\"commit\" type=\"submit\" value=\"Save edits\" /&gt;\n\nsubmit_tag \"Complete sale\", data: { disable_with: \"Please wait...\" }\n# =&gt; &lt;input name=\"commit\" data-disable-with=\"Please wait...\" type=\"submit\" value=\"Complete sale\" /&gt;\n\nsubmit_tag nil, class: \"form_submit\"\n# =&gt; &lt;input class=\"form_submit\" name=\"commit\" type=\"submit\" /&gt;\n\nsubmit_tag \"Edit\", class: \"edit_button\"\n# =&gt; &lt;input class=\"edit_button\" name=\"commit\" type=\"submit\" value=\"Edit\" /&gt;\n\nsubmit_tag \"Save\", data: { confirm: \"Are you sure?\" }\n# =&gt; &lt;input name='commit' type='submit' value='Save' data-confirm=\"Are you sure?\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"submit_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 441\ndef submit_tag(value = \"Save changes\", options = {})\n  options = options.stringify_keys\n\n  tag :input, { \"type\" =&gt; \"submit\", \"name\" =&gt; \"commit\", \"value\" =&gt; value }.update(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-telephone_field_tag\"> <span class=\"method-name\">telephone_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “tel”.</p> <h4 id=\"method-i-telephone_field_tag-label-Options\">Options</h4> <ul><li> <p>Accepts the same options as text_field_tag.</p> </li></ul> <h4 id=\"method-i-telephone_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">telephone_field_tag 'name'\n# =&gt; &lt;input id=\"name\" name=\"name\" type=\"tel\" /&gt;\n\ntelephone_field_tag 'tel', '0123456789'\n# =&gt; &lt;input id=\"tel\" name=\"tel\" type=\"tel\" value=\"0123456789\" /&gt;\n\ntelephone_field_tag 'tel', nil, class: 'special_input'\n# =&gt; &lt;input class=\"special_input\" id=\"tel\" name=\"tel\" type=\"tel\" /&gt;\n\ntelephone_field_tag 'tel', '0123456789', class: 'special_input', disabled: true\n# =&gt; &lt;input disabled=\"disabled\" class=\"special_input\" id=\"tel\" name=\"tel\" type=\"tel\" value=\"0123456789\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"telephone_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 622\ndef telephone_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :tel))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"formtaghelper#method-i-phone_field_tag\">phone_field_tag</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-text_area_tag\"> <span class=\"method-name\">text_area_tag</span><span class=\"method-args\">(name, content = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text input area; use a textarea for longer text inputs such as blog posts or descriptions.</p> <h4 id=\"method-i-text_area_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:size</code> - A string specifying the dimensions (columns by rows) of the textarea (e.g., “25x10”).</p> </li>\n<li> <p><code>:rows</code> - Specify the number of rows in the textarea</p> </li>\n<li> <p><code>:cols</code> - Specify the number of columns in the textarea</p> </li>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p><code>:escape</code> - By default, the contents of the text input are HTML escaped. If you need unescaped contents, set this to false.</p> </li>\n<li> <p>Any other key creates standard HTML attributes for the tag.</p> </li>\n</ul> <h4 id=\"method-i-text_area_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">text_area_tag 'post'\n# =&gt; &lt;textarea id=\"post\" name=\"post\"&gt;&lt;/textarea&gt;\n\ntext_area_tag 'bio', @user.bio\n# =&gt; &lt;textarea id=\"bio\" name=\"bio\"&gt;This is my biography.&lt;/textarea&gt;\n\ntext_area_tag 'body', nil, rows: 10, cols: 25\n# =&gt; &lt;textarea cols=\"25\" id=\"body\" name=\"body\" rows=\"10\"&gt;&lt;/textarea&gt;\n\ntext_area_tag 'body', nil, size: \"25x10\"\n# =&gt; &lt;textarea name=\"body\" id=\"body\" cols=\"25\" rows=\"10\"&gt;&lt;/textarea&gt;\n\ntext_area_tag 'description', \"Description goes here.\", disabled: true\n# =&gt; &lt;textarea disabled=\"disabled\" id=\"description\" name=\"description\"&gt;Description goes here.&lt;/textarea&gt;\n\ntext_area_tag 'comment', nil, class: 'comment_input'\n# =&gt; &lt;textarea class=\"comment_input\" id=\"comment\" name=\"comment\"&gt;&lt;/textarea&gt;\n</pre> <div class=\"method-source-code\" id=\"text_area_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 338\ndef text_area_tag(name, content = nil, options = {})\n  options = options.stringify_keys\n\n  if size = options.delete(\"size\")\n    options[\"cols\"], options[\"rows\"] = size.split(\"x\") if size.respond_to?(:split)\n  end\n\n  escape = options.delete(\"escape\") { true }\n  content = ERB::Util.html_escape(content) if escape\n\n  content_tag :textarea, content.to_s.html_safe, { \"name\" =&gt; name, \"id\" =&gt; sanitize_to_id(name) }.update(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-text_field_tag\"> <span class=\"method-name\">text_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a standard text field; use these text fields to input smaller chunks of text like a username or a search query.</p> <h4 id=\"method-i-text_field_tag-label-Options\">Options</h4> <ul>\n<li> <p><code>:disabled</code> - If set to true, the user will not be able to use this input.</p> </li>\n<li> <p><code>:size</code> - The number of visible characters that will fit in the input.</p> </li>\n<li> <p><code>:maxlength</code> - The maximum number of characters that the browser will allow the user to enter.</p> </li>\n<li> <p><code>:placeholder</code> - The text contained in the field by default which is removed when the field receives focus.</p> </li>\n<li> <p>Any other key creates standard HTML attributes for the tag.</p> </li>\n</ul> <h4 id=\"method-i-text_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">text_field_tag 'name'\n# =&gt; &lt;input id=\"name\" name=\"name\" type=\"text\" /&gt;\n\ntext_field_tag 'query', 'Enter your search query here'\n# =&gt; &lt;input id=\"query\" name=\"query\" type=\"text\" value=\"Enter your search query here\" /&gt;\n\ntext_field_tag 'search', nil, placeholder: 'Enter search term...'\n# =&gt; &lt;input id=\"search\" name=\"search\" placeholder=\"Enter search term...\" type=\"text\" /&gt;\n\ntext_field_tag 'request', nil, class: 'special_input'\n# =&gt; &lt;input class=\"special_input\" id=\"request\" name=\"request\" type=\"text\" /&gt;\n\ntext_field_tag 'address', '', size: 75\n# =&gt; &lt;input id=\"address\" name=\"address\" size=\"75\" type=\"text\" value=\"\" /&gt;\n\ntext_field_tag 'zip', nil, maxlength: 5\n# =&gt; &lt;input id=\"zip\" maxlength=\"5\" name=\"zip\" type=\"text\" /&gt;\n\ntext_field_tag 'payment_amount', '$0.00', disabled: true\n# =&gt; &lt;input disabled=\"disabled\" id=\"payment_amount\" name=\"payment_amount\" type=\"text\" value=\"$0.00\" /&gt;\n\ntext_field_tag 'ip', '0.0.0.0', maxlength: 15, size: 20, class: \"ip-input\"\n# =&gt; &lt;input class=\"ip-input\" id=\"ip\" maxlength=\"15\" name=\"ip\" size=\"20\" type=\"text\" value=\"0.0.0.0\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"text_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 188\ndef text_field_tag(name, value = nil, options = {})\n  tag :input, { \"type\" =&gt; \"text\", \"name\" =&gt; name, \"id\" =&gt; sanitize_to_id(name), \"value\" =&gt; value }.update(options.stringify_keys)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time_field_tag\"> <span class=\"method-name\">time_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “time”.</p> <h3 id=\"method-i-time_field_tag-label-Options\">Options</h3> <ul>\n<li> <p><code>:min</code> - The minimum acceptable value.</p> </li>\n<li> <p><code>:max</code> - The maximum acceptable value.</p> </li>\n<li> <p><code>:step</code> - The acceptable value granularity.</p> </li>\n<li> <p>Otherwise accepts the same options as text_field_tag.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"time_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 655\ndef time_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :time))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url_field_tag\"> <span class=\"method-name\">url_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “url”.</p> <h4 id=\"method-i-url_field_tag-label-Options\">Options</h4> <ul><li> <p>Accepts the same options as text_field_tag.</p> </li></ul> <h4 id=\"method-i-url_field_tag-label-Examples\">Examples</h4> <pre class=\"ruby\">url_field_tag 'name'\n# =&gt; &lt;input id=\"name\" name=\"name\" type=\"url\" /&gt;\n\nurl_field_tag 'url', 'http://rubyonrails.org'\n# =&gt; &lt;input id=\"url\" name=\"url\" type=\"url\" value=\"http://rubyonrails.org\" /&gt;\n\nurl_field_tag 'url', nil, class: 'special_input'\n# =&gt; &lt;input class=\"special_input\" id=\"url\" name=\"url\" type=\"url\" /&gt;\n\nurl_field_tag 'url', 'http://rubyonrails.org', class: 'special_input', disabled: true\n# =&gt; &lt;input disabled=\"disabled\" class=\"special_input\" id=\"url\" name=\"url\" type=\"url\" value=\"http://rubyonrails.org\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"url_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 720\ndef url_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :url))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-utf8_enforcer_tag\"> <span class=\"method-name\">utf8_enforcer_tag</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates the hidden UTF8 enforcer tag. Override this method in a helper to customize the tag.</p> <div class=\"method-source-code\" id=\"utf8_enforcer_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 805\ndef utf8_enforcer_tag\n  # Use raw HTML to ensure the value is written as an HTML entity; it\n  # needs to be the right character regardless of which encoding the\n  # browser infers.\n  '&lt;input name=\"utf8\" type=\"hidden\" value=\"&amp;#x2713;\" /&gt;'.html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-week_field_tag\"> <span class=\"method-name\">week_field_tag</span><span class=\"method-args\">(name, value = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a text field of type “week”.</p> <h3 id=\"method-i-week_field_tag-label-Options\">Options</h3> <ul>\n<li> <p><code>:min</code> - The minimum acceptable value.</p> </li>\n<li> <p><code>:max</code> - The maximum acceptable value.</p> </li>\n<li> <p><code>:step</code> - The acceptable value granularity.</p> </li>\n<li> <p>Otherwise accepts the same options as text_field_tag.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"week_field_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/form_tag_helper.rb, line 699\ndef week_field_tag(name, value = nil, options = {})\n  text_field_tag(name, value, options.merge(type: :week))\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/javascripthelper":"<h1 id=\"module-ActionView::Helpers::JavaScriptHelper\" class=\"module\"> module ActionView::Helpers::JavaScriptHelper </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"JS_ESCAPE_MAP\">JS_ESCAPE_MAP </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-escape_javascript\"> <span class=\"method-name\">escape_javascript</span><span class=\"method-args\">(javascript)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Escapes carriage returns and single and double quotes for JavaScript segments.</p> <p>Also available through the alias j(). This is particularly helpful in JavaScript responses, like:</p> <pre>$('some_element').replaceWith('&lt;%=j render 'some/element_template' %&gt;');</pre> <div class=\"method-source-code\" id=\"escape_javascript-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/javascript_helper.rb, line 25\ndef escape_javascript(javascript)\n  if javascript\n    result = javascript.gsub(/(\\|&lt;\\/|\\r\\n|\\342\\200\\250|\\342\\200\\251|[\\n\\r\"'])/u) {|match| JS_ESCAPE_MAP[match] }\n    javascript.html_safe? ? result.html_safe : result\n  else\n    ''\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"javascripthelper#method-i-j\">j</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-j\"> <span class=\"method-name\">j</span><span class=\"method-args\">(javascript)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"javascripthelper#method-i-escape_javascript\">escape_javascript</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-javascript_tag\"> <span class=\"method-name\">javascript_tag</span><span class=\"method-args\">(content_or_options_with_block = nil, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a JavaScript tag with the <code>content</code> inside. Example:</p> <pre class=\"ruby\">javascript_tag \"alert('All is good')\"\n</pre> <p>Returns:</p> <pre>&lt;script&gt;\n//&lt;![CDATA[\nalert('All is good')\n//]]&gt;\n&lt;/script&gt;</pre> <p><code>html_options</code> may be a hash of attributes for the <code>&lt;script&gt;</code> tag.</p> <pre class=\"ruby\">javascript_tag \"alert('All is good')\", defer: 'defer'\n</pre> <p>Returns:</p> <pre>&lt;script defer=\"defer\"&gt;\n//&lt;![CDATA[\nalert('All is good')\n//]]&gt;\n&lt;/script&gt;</pre> <p>Instead of passing the content as an argument, you can also use a block in which case, you pass your <code>html_options</code> as the first parameter.</p> <pre>&lt;%= javascript_tag defer: 'defer' do -%&gt;\n  alert('All is good')\n&lt;% end -%&gt;</pre> <div class=\"method-source-code\" id=\"javascript_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/javascript_helper.rb, line 64\ndef javascript_tag(content_or_options_with_block = nil, html_options = {}, &amp;block)\n  content =\n    if block_given?\n      html_options = content_or_options_with_block if content_or_options_with_block.is_a?(Hash)\n      capture(&amp;block)\n    else\n      content_or_options_with_block\n    end\n\n  content_tag(:script, javascript_cdata_section(content), html_options)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/numberhelper":"<h1 id=\"module-ActionView::Helpers::NumberHelper\" class=\"module\"> module ActionView::Helpers::NumberHelper </h1> <section class=\"description\"> <p>Provides methods for converting numbers into formatted strings. Methods are provided for phone numbers, currency, percentage, precision, positional notation, file size and pretty printing.</p> <p>Most methods expect a <code>number</code> argument, and will return it unchanged if can't be converted into a valid number.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_currency\"> <span class=\"method-name\">number_to_currency</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> into a currency string (e.g., $13.65). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_to_currency-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the level of precision (defaults to 2).</p> </li>\n<li> <p><code>:unit</code> - Sets the denomination of the currency (defaults to “$”).</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the units (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “,”).</p> </li>\n<li> <p><code>:format</code> - Sets the format for non-negative numbers (defaults to “%u%n”). Fields are <code>%u</code> for the currency, and <code>%n</code> for the number.</p> </li>\n<li> <p><code>:negative_format</code> - Sets the format for negative numbers (defaults to prepending an hyphen to the formatted number given by <code>:format</code>). Accepts the same fields than <code>:format</code>, except <code>%n</code> is here the absolute value of the number.</p> </li>\n<li> <p><code>:raise</code> - If true, raises <code>InvalidNumberError</code> when the argument is invalid.</p> </li>\n</ul> <h4 id=\"method-i-number_to_currency-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_currency(1234567890.50)                    # =&gt; $1,234,567,890.50\nnumber_to_currency(1234567890.506)                   # =&gt; $1,234,567,890.51\nnumber_to_currency(1234567890.506, precision: 3)     # =&gt; $1,234,567,890.506\nnumber_to_currency(1234567890.506, locale: :fr)      # =&gt; 1 234 567 890,51 €\nnumber_to_currency(\"123a456\")                        # =&gt; $123a456\n\nnumber_to_currency(\"123a456\", raise: true)           # =&gt; InvalidNumberError\n\nnumber_to_currency(-1234567890.50, negative_format: \"(%u%n)\")\n# =&gt; ($1,234,567,890.50)\nnumber_to_currency(1234567890.50, unit: \"R$\", separator: \",\", delimiter: \"\")\n# =&gt; R$1234567890,50\nnumber_to_currency(1234567890.50, unit: \"R$\", separator: \",\", delimiter: \"\", format: \"%n %u\")\n# =&gt; 1234567890,50 R$\n</pre> <div class=\"method-source-code\" id=\"number_to_currency-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/number_helper.rb, line 106\ndef number_to_currency(number, options = {})\n  delegate_number_helper_method(:number_to_currency, number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_human\"> <span class=\"method-name\">number_to_human</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Pretty prints (formats and approximates) a number in a way it is more readable by humans (eg.: 1200000000 becomes “1.2 Billion”). This is useful for numbers that can get very large (and too hard to read).</p> <p>See <code>number_to_human_size</code> if you want to print a file size.</p> <p>You can also define you own unit-quantifier names if you want to use other decimal units (eg.: 1500 becomes “1.5 kilometers”, 0.150 becomes “150 milliliters”, etc). You may define a wide range of unit quantifiers, even fractional ones (centi, deci, mili, etc).</p> <h4 id=\"method-i-number_to_human-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the precision of the number (defaults to 3).</p> </li>\n<li> <p><code>:significant</code> - If <code>true</code>, precision will be the # of significant_digits. If <code>false</code>, the # of fractional digits (defaults to <code>true</code>)</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “”).</p> </li>\n<li> <p><code>:strip_insignificant_zeros</code> - If <code>true</code> removes insignificant zeros after the decimal separator (defaults to <code>true</code>)</p> </li>\n<li> <p><code>:units</code> - A <a href=\"../../hash\">Hash</a> of unit quantifier names. Or a string containing an i18n scope where to find this hash. It might have the following keys:</p> <ul>\n<li> <p><strong>integers</strong>: <code>:unit</code>, <code>:ten</code>, <code>:hundred</code>, <code>:thousand</code>, <code>:million</code>, <code>:billion</code>, <code>:trillion</code>, <code>:quadrillion</code></p> </li>\n<li> <p><strong>fractionals</strong>: <code>:deci</code>, <code>:centi</code>, <code>:mili</code>, <code>:micro</code>, <code>:nano</code>, <code>:pico</code>, <code>:femto</code></p> </li>\n</ul> </li>\n<li> <p><code>:format</code> - Sets the format of the output string (defaults to “%n %u”). The field types are:</p> <ul>\n<li> <p>%u - The quantifier (ex.: 'thousand')</p> </li>\n<li> <p>%n - The number</p> </li>\n</ul> </li>\n<li> <p><code>:raise</code> - If true, raises <code>InvalidNumberError</code> when the argument is invalid.</p> </li>\n</ul> <h4 id=\"method-i-number_to_human-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_human(123)                                          # =&gt; \"123\"\nnumber_to_human(1234)                                         # =&gt; \"1.23 Thousand\"\nnumber_to_human(12345)                                        # =&gt; \"12.3 Thousand\"\nnumber_to_human(1234567)                                      # =&gt; \"1.23 Million\"\nnumber_to_human(1234567890)                                   # =&gt; \"1.23 Billion\"\nnumber_to_human(1234567890123)                                # =&gt; \"1.23 Trillion\"\nnumber_to_human(1234567890123456)                             # =&gt; \"1.23 Quadrillion\"\nnumber_to_human(1234567890123456789)                          # =&gt; \"1230 Quadrillion\"\nnumber_to_human(489939, precision: 2)                         # =&gt; \"490 Thousand\"\nnumber_to_human(489939, precision: 4)                         # =&gt; \"489.9 Thousand\"\nnumber_to_human(1234567, precision: 4,\n                        significant: false)                   # =&gt; \"1.2346 Million\"\nnumber_to_human(1234567, precision: 1,\n                        separator: ',',\n                        significant: false)                   # =&gt; \"1,2 Million\"\n\nnumber_to_human(500000000, precision: 5)                      # =&gt; \"500 Million\"\nnumber_to_human(12345012345, significant: false)              # =&gt; \"12.345 Billion\"\n</pre> <p>Non-significant zeros after the decimal separator are stripped out by default (set <code>:strip_insignificant_zeros</code> to <code>false</code> to change that):</p> <p><a href=\"numberhelper#method-i-number_to_human\">#number_to_human</a>(12.00001) # =&gt; “12” <a href=\"numberhelper#method-i-number_to_human\">#number_to_human</a>(12.00001, strip_insignificant_zeros: false) # =&gt; “12.0”</p> <h4 id=\"method-i-number_to_human-label-Custom+Unit+Quantifiers\">Custom Unit Quantifiers</h4> <p>You can also use your own custom unit quantifiers:</p> <pre class=\"ruby\">number_to_human(500000, units: {unit: \"ml\", thousand: \"lt\"})  # =&gt; \"500 lt\"\n</pre> <p>If in your <a href=\"../../i18n\">I18n</a> locale you have:</p> <pre>distance:\n  centi:\n    one: \"centimeter\"\n    other: \"centimeters\"\n  unit:\n    one: \"meter\"\n    other: \"meters\"\n  thousand:\n    one: \"kilometer\"\n    other: \"kilometers\"\n  billion: \"gazillion-distance\"</pre> <p>Then you could do:</p> <pre class=\"ruby\">number_to_human(543934, units: :distance)              # =&gt; \"544 kilometers\"\nnumber_to_human(54393498, units: :distance)            # =&gt; \"54400 kilometers\"\nnumber_to_human(54393498000, units: :distance)         # =&gt; \"54.4 gazillion-distance\"\nnumber_to_human(343, units: :distance, precision: 1)   # =&gt; \"300 meters\"\nnumber_to_human(1, units: :distance)                   # =&gt; \"1 meter\"\nnumber_to_human(0.34, units: :distance)                # =&gt; \"34 centimeters\"\n</pre> <div class=\"method-source-code\" id=\"number_to_human-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/number_helper.rb, line 376\ndef number_to_human(number, options = {})\n  delegate_number_helper_method(:number_to_human, number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_human_size\"> <span class=\"method-name\">number_to_human_size</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats the bytes in <code>number</code> into a more understandable representation (e.g., giving it 1500 yields 1.5 KB). This method is useful for reporting file sizes to users. You can customize the format in the <code>options</code> hash.</p> <p>See <code>number_to_human</code> if you want to pretty-print a generic number.</p> <h4 id=\"method-i-number_to_human_size-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the precision of the number (defaults to 3).</p> </li>\n<li> <p><code>:significant</code> - If <code>true</code>, precision will be the # of significant_digits. If <code>false</code>, the # of fractional digits (defaults to <code>true</code>)</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “”).</p> </li>\n<li> <p><code>:strip_insignificant_zeros</code> - If <code>true</code> removes insignificant zeros after the decimal separator (defaults to <code>true</code>)</p> </li>\n<li> <p><code>:prefix</code> - If <code>:si</code> formats the number using the SI prefix (defaults to :binary)</p> </li>\n<li> <p><code>:raise</code> - If true, raises <code>InvalidNumberError</code> when the argument is invalid.</p> </li>\n</ul> <h4 id=\"method-i-number_to_human_size-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_human_size(123)                                          # =&gt; 123 Bytes\nnumber_to_human_size(1234)                                         # =&gt; 1.21 KB\nnumber_to_human_size(12345)                                        # =&gt; 12.1 KB\nnumber_to_human_size(1234567)                                      # =&gt; 1.18 MB\nnumber_to_human_size(1234567890)                                   # =&gt; 1.15 GB\nnumber_to_human_size(1234567890123)                                # =&gt; 1.12 TB\nnumber_to_human_size(1234567, precision: 2)                        # =&gt; 1.2 MB\nnumber_to_human_size(483989, precision: 2)                         # =&gt; 470 KB\nnumber_to_human_size(1234567, precision: 2, separator: ',')        # =&gt; 1,2 MB\nnumber_to_human_size(1234567890123, precision: 5)                  # =&gt; \"1.1228 TB\"\nnumber_to_human_size(524288000, precision: 5)                      # =&gt; \"500 MB\"\n</pre> <div class=\"method-source-code\" id=\"number_to_human_size-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/number_helper.rb, line 270\ndef number_to_human_size(number, options = {})\n  delegate_number_helper_method(:number_to_human_size, number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_percentage\"> <span class=\"method-name\">number_to_percentage</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_to_percentage-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the precision of the number (defaults to 3).</p> </li>\n<li> <p><code>:significant</code> - If <code>true</code>, precision will be the # of significant_digits. If <code>false</code>, the # of fractional digits (defaults to <code>false</code>).</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “”).</p> </li>\n<li> <p><code>:strip_insignificant_zeros</code> - If <code>true</code> removes insignificant zeros after the decimal separator (defaults to <code>false</code>).</p> </li>\n<li> <p><code>:format</code> - Specifies the format of the percentage string The number field is <code>%n</code> (defaults to “%n%”).</p> </li>\n<li> <p><code>:raise</code> - If true, raises <code>InvalidNumberError</code> when the argument is invalid.</p> </li>\n</ul> <h4 id=\"method-i-number_to_percentage-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_percentage(100)                                        # =&gt; 100.000%\nnumber_to_percentage(\"98\")                                       # =&gt; 98.000%\nnumber_to_percentage(100, precision: 0)                          # =&gt; 100%\nnumber_to_percentage(1000, delimiter: '.', separator: ',')       # =&gt; 1.000,000%\nnumber_to_percentage(302.24398923423, precision: 5)              # =&gt; 302.24399%\nnumber_to_percentage(1000, locale: :fr)                          # =&gt; 1 000,000%\nnumber_to_percentage(\"98a\")                                      # =&gt; 98a%\nnumber_to_percentage(100, format: \"%n  %\")                       # =&gt; 100  %\n\nnumber_to_percentage(\"98a\", raise: true)                         # =&gt; InvalidNumberError\n</pre> <div class=\"method-source-code\" id=\"number_to_percentage-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/number_helper.rb, line 146\ndef number_to_percentage(number, options = {})\n  delegate_number_helper_method(:number_to_percentage, number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_phone\"> <span class=\"method-name\">number_to_phone</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> into a US phone number (e.g., (555) 123-9876). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_to_phone-label-Options\">Options</h4> <ul>\n<li> <p><code>:area_code</code> - Adds parentheses around the area code.</p> </li>\n<li> <p><code>:delimiter</code> - Specifies the delimiter to use (defaults to “-”).</p> </li>\n<li> <p><code>:extension</code> - Specifies an extension to add to the end of the generated number.</p> </li>\n<li> <p><code>:country_code</code> - Sets the country code for the phone number.</p> </li>\n<li> <p><code>:raise</code> - If true, raises <code>InvalidNumberError</code> when the argument is invalid.</p> </li>\n</ul> <h4 id=\"method-i-number_to_phone-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_phone(5551234)                                           # =&gt; 555-1234\nnumber_to_phone(\"5551234\")                                         # =&gt; 555-1234\nnumber_to_phone(1235551234)                                        # =&gt; 123-555-1234\nnumber_to_phone(1235551234, area_code: true)                       # =&gt; (123) 555-1234\nnumber_to_phone(1235551234, delimiter: \" \")                        # =&gt; 123 555 1234\nnumber_to_phone(1235551234, area_code: true, extension: 555)       # =&gt; (123) 555-1234 x 555\nnumber_to_phone(1235551234, country_code: 1)                       # =&gt; +1-123-555-1234\nnumber_to_phone(\"123a456\")                                         # =&gt; 123a456\nnumber_to_phone(\"1234a567\", raise: true)                           # =&gt; InvalidNumberError\n\nnumber_to_phone(1235551234, country_code: 1, extension: 1343, delimiter: \".\")\n# =&gt; +1.123.555.1234 x 1343\n</pre> <div class=\"method-source-code\" id=\"number_to_phone-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/number_helper.rb, line 56\ndef number_to_phone(number, options = {})\n  return unless number\n  options = options.symbolize_keys\n\n  parse_float(number, true) if options.delete(:raise)\n  ERB::Util.html_escape(ActiveSupport::NumberHelper.number_to_phone(number, options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_with_delimiter\"> <span class=\"method-name\">number_with_delimiter</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> with grouped thousands using <code>delimiter</code> (e.g., 12,324). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_with_delimiter-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “,”).</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n<li> <p><code>:raise</code> - If true, raises <code>InvalidNumberError</code> when the argument is invalid.</p> </li>\n</ul> <h4 id=\"method-i-number_with_delimiter-label-Examples\">Examples</h4> <pre class=\"ruby\"> number_with_delimiter(12345678)                        # =&gt; 12,345,678\n number_with_delimiter(\"123456\")                        # =&gt; 123,456\n number_with_delimiter(12345678.05)                     # =&gt; 12,345,678.05\n number_with_delimiter(12345678, delimiter: \".\")        # =&gt; 12.345.678\n number_with_delimiter(12345678, delimiter: \",\")        # =&gt; 12,345,678\n number_with_delimiter(12345678.05, separator: \" \")     # =&gt; 12,345,678 05\n number_with_delimiter(12345678.05, locale: :fr)        # =&gt; 12 345 678,05\n number_with_delimiter(\"112a\")                          # =&gt; 112a\n number_with_delimiter(98765432.98, delimiter: \" \", separator: \",\")\n # =&gt; 98 765 432,98\n\nnumber_with_delimiter(\"112a\", raise: true)              # =&gt; raise InvalidNumberError\n</pre> <div class=\"method-source-code\" id=\"number_with_delimiter-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/number_helper.rb, line 179\ndef number_with_delimiter(number, options = {})\n  delegate_number_helper_method(:number_to_delimited, number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_with_precision\"> <span class=\"method-name\">number_with_precision</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> with the specified level of <code>:precision</code> (e.g., 112.32 has a precision of 2 if <code>:significant</code> is <code>false</code>, and 5 if <code>:significant</code> is <code>true</code>). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_with_precision-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the precision of the number (defaults to 3).</p> </li>\n<li> <p><code>:significant</code> - If <code>true</code>, precision will be the # of significant_digits. If <code>false</code>, the # of fractional digits (defaults to <code>false</code>).</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “”).</p> </li>\n<li> <p><code>:strip_insignificant_zeros</code> - If <code>true</code> removes insignificant zeros after the decimal separator (defaults to <code>false</code>).</p> </li>\n<li> <p><code>:raise</code> - If true, raises <code>InvalidNumberError</code> when the argument is invalid.</p> </li>\n</ul> <h4 id=\"method-i-number_with_precision-label-Examples\">Examples</h4> <pre class=\"ruby\">number_with_precision(111.2345)                                         # =&gt; 111.235\nnumber_with_precision(111.2345, precision: 2)                           # =&gt; 111.23\nnumber_with_precision(13, precision: 5)                                 # =&gt; 13.00000\nnumber_with_precision(389.32314, precision: 0)                          # =&gt; 389\nnumber_with_precision(111.2345, significant: true)                      # =&gt; 111\nnumber_with_precision(111.2345, precision: 1, significant: true)        # =&gt; 100\nnumber_with_precision(13, precision: 5, significant: true)              # =&gt; 13.000\nnumber_with_precision(111.234, locale: :fr)                             # =&gt; 111,234\n\nnumber_with_precision(13, precision: 5, significant: true, strip_insignificant_zeros: true)\n# =&gt; 13\n\nnumber_with_precision(389.32314, precision: 4, significant: true)       # =&gt; 389.3\nnumber_with_precision(1111.2345, precision: 2, separator: ',', delimiter: '.')\n# =&gt; 1.111,23\n</pre> <div class=\"method-source-code\" id=\"number_with_precision-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/number_helper.rb, line 224\ndef number_with_precision(number, options = {})\n  delegate_number_helper_method(:number_to_rounded, number, options)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/numberhelper/invalidnumbererror":"<h1 id=\"class-ActionView::Helpers::NumberHelper::InvalidNumberError\" class=\"class\"> class ActionView::Helpers::NumberHelper::InvalidNumberError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">StandardError</dd>\n</dl> <section class=\"description\"> <p>Raised when argument <code>number</code> param given to the helpers is invalid and the option :raise is set to <code>true</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-number\"> <span class=\"method-name\">number</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(number)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/number_helper.rb, line 22\ndef initialize(number)\n  @number = number\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/outputsafetyhelper":"<h1 id=\"module-ActionView::Helpers::OutputSafetyHelper\" class=\"module\"> module ActionView::Helpers::OutputSafetyHelper </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-raw\"> <span class=\"method-name\">raw</span><span class=\"method-args\">(stringish)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method outputs without escaping a string. Since escaping tags is now default, this can be used when you don't want Rails to automatically escape tags. This is not recommended if the data is coming from the user's input.</p> <p>For example:</p> <pre class=\"ruby\">raw @user.name\n# =&gt; 'Jimmy &lt;alert&gt;Tables&lt;/alert&gt;'\n</pre> <div class=\"method-source-code\" id=\"raw-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/output_safety_helper.rb, line 16\ndef raw(stringish)\n  stringish.to_s.html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-safe_join\"> <span class=\"method-name\">safe_join</span><span class=\"method-args\">(array, sep=$,)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method returns an HTML safe string similar to what <code>Array#join</code> would return. The array is flattened, and all items, including the supplied separator, are HTML escaped unless they are HTML safe, and the returned string is marked as HTML safe.</p> <pre class=\"ruby\">safe_join([\"&lt;p&gt;foo&lt;/p&gt;\".html_safe, \"&lt;p&gt;bar&lt;/p&gt;\"], \"&lt;br /&gt;\")\n# =&gt; \"&lt;p&gt;foo&lt;/p&gt;&amp;lt;br /&amp;gt;&amp;lt;p&amp;gt;bar&amp;lt;/p&amp;gt;\"\n\nsafe_join([\"&lt;p&gt;foo&lt;/p&gt;\".html_safe, \"&lt;p&gt;bar&lt;/p&gt;\".html_safe], \"&lt;br /&gt;\".html_safe)\n# =&gt; \"&lt;p&gt;foo&lt;/p&gt;&lt;br /&gt;&lt;p&gt;bar&lt;/p&gt;\"\n</pre> <div class=\"method-source-code\" id=\"safe_join-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/output_safety_helper.rb, line 31\ndef safe_join(array, sep=$,)\n  sep = ERB::Util.unwrapped_html_escape(sep)\n\n  array.flatten.map! { |i| ERB::Util.unwrapped_html_escape(i) }.join(sep).html_safe\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/recordtaghelper":"<h1 id=\"module-ActionView::Helpers::RecordTagHelper\" class=\"module\"> module ActionView::Helpers::RecordTagHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../recordidentifier\">ActionView::RecordIdentifier</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_tag_for\"> <span class=\"method-name\">content_tag_for</span><span class=\"method-args\">(tag_name, single_or_multiple_records, prefix = nil, options = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"recordtaghelper#method-i-content_tag_for\">#content_tag_for</a> creates an HTML element with id and class parameters that relate to the specified Active Record object. For example:</p> <pre>&lt;%= content_tag_for(:tr, @person) do %&gt;\n  &lt;td&gt;&lt;%= @person.first_name %&gt;&lt;/td&gt;\n  &lt;td&gt;&lt;%= @person.last_name %&gt;&lt;/td&gt;\n&lt;% end %&gt;</pre> <p>would produce the following HTML (assuming @person is an instance of a Person object, with an id value of 123):</p> <pre>&lt;tr id=\"person_123\" class=\"person\"&gt;....&lt;/tr&gt;</pre> <p>If you require the HTML id attribute to have a prefix, you can specify it:</p> <pre>&lt;%= content_tag_for(:tr, @person, :foo) do %&gt; ...</pre> <p>produces:</p> <pre>&lt;tr id=\"foo_person_123\" class=\"person\"&gt;...</pre> <p>You can also pass an array of objects which this method will loop through and yield the current object to the supplied block, reducing the need for having to iterate through the object (using <code>each</code>) beforehand. For example (assuming @people is an array of Person objects):</p> <pre>&lt;%= content_tag_for(:tr, @people) do |person| %&gt;\n  &lt;td&gt;&lt;%= person.first_name %&gt;&lt;/td&gt;\n  &lt;td&gt;&lt;%= person.last_name %&gt;&lt;/td&gt;\n&lt;% end %&gt;</pre> <p>produces:</p> <pre>&lt;tr id=\"person_123\" class=\"person\"&gt;...&lt;/tr&gt;\n&lt;tr id=\"person_124\" class=\"person\"&gt;...&lt;/tr&gt;</pre> <p><a href=\"recordtaghelper#method-i-content_tag_for\">#content_tag_for</a> also accepts a hash of options, which will be converted to additional HTML attributes. If you specify a <code>:class</code> value, it will be combined with the default class name for your object. For example:</p> <pre>&lt;%= content_tag_for(:li, @person, class: \"bar\") %&gt;...</pre> <p>produces:</p> <pre>&lt;li id=\"person_123\" class=\"person bar\"&gt;...</pre> <div class=\"method-source-code\" id=\"content_tag_for-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/record_tag_helper.rb, line 83\ndef content_tag_for(tag_name, single_or_multiple_records, prefix = nil, options = nil, &amp;block)\n  options, prefix = prefix, nil if prefix.is_a?(Hash)\n\n  Array(single_or_multiple_records).map do |single_record|\n    content_tag_for_single_record(tag_name, single_record, prefix, options, &amp;block)\n  end.join(\"\\n\").html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-div_for\"> <span class=\"method-name\">div_for</span><span class=\"method-args\">(record, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Produces a wrapper DIV element with id and class parameters that relate to the specified Active Record object. Usage example:</p> <pre>&lt;%= div_for(@person, class: \"foo\") do %&gt;\n   &lt;%= @person.name %&gt;\n&lt;% end %&gt;</pre> <p>produces:</p> <pre>&lt;div id=\"person_123\" class=\"person foo\"&gt; Joe Bloggs &lt;/div&gt;</pre> <p>You can also pass an array of Active Record objects, which will then get iterated over and yield each record as an argument for the block. For example:</p> <pre>&lt;%= div_for(@people, class: \"foo\") do |person| %&gt;\n  &lt;%= person.name %&gt;\n&lt;% end %&gt;</pre> <p>produces:</p> <pre>&lt;div id=\"person_123\" class=\"person foo\"&gt; Joe Bloggs &lt;/div&gt;\n&lt;div id=\"person_124\" class=\"person foo\"&gt; Jane Bloggs &lt;/div&gt;</pre> <div class=\"method-source-code\" id=\"div_for-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/record_tag_helper.rb, line 33\ndef div_for(record, *args, &amp;block)\n  content_tag_for(:div, record, *args, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/renderinghelper":"<h1 id=\"module-ActionView::Helpers::RenderingHelper\" class=\"module\"> module ActionView::Helpers::RenderingHelper </h1> <section class=\"description\"> <h1 id=\"module-ActionView::Helpers::RenderingHelper-label-Action+View+Rendering\">Action View <a href=\"../rendering\">Rendering</a>\n</h1> <p>Implements methods that allow rendering from a view context. In order to use this module, all you need is to implement view_renderer that returns an <a href=\"../renderer\">ActionView::Renderer</a> object.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_layout_for\"> <span class=\"method-name\">_layout_for</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Overwrites <a href=\"renderinghelper#method-i-_layout_for\">#_layout_for</a> in the context object so it supports the case a block is passed to a partial. Returns the contents that are yielded to a layout, given a name or a block.</p> <p>You can think of a layout as a method that is called with a block. If the user calls <code>yield :some_name</code>, the block, by default, returns <code>content_for(:some_name)</code>. If the user calls simply <code>yield</code>, the default block returns <code>content_for(:layout)</code>.</p> <p>The user can override this default by passing a block to the layout:</p> <pre># The template\n&lt;%= render layout: \"my_layout\" do %&gt;\n  Content\n&lt;% end %&gt;\n\n# The layout\n&lt;html&gt;\n  &lt;%= yield %&gt;\n&lt;/html&gt;</pre> <p>In this case, instead of the default block, which would return <code>content_for(:layout)</code>, this method returns the block that was passed in to <code>render :layout</code>, and the response would be</p> <pre>&lt;html&gt;\n  Content\n&lt;/html&gt;</pre> <p>Finally, the block can take block arguments, which can be passed in by <code>yield</code>:</p> <pre># The template\n&lt;%= render layout: \"my_layout\" do |customer| %&gt;\n  Hello &lt;%= customer.name %&gt;\n&lt;% end %&gt;\n\n# The layout\n&lt;html&gt;\n  &lt;%= yield Struct.new(:name).new(\"David\") %&gt;\n&lt;/html&gt;</pre> <p>In this case, the layout would receive the block passed into <code>render\n:layout</code>, and the struct specified would be passed into the block as an argument. The result would be</p> <pre>&lt;html&gt;\n  Hello David\n&lt;/html&gt;</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"_layout_for-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/rendering_helper.rb, line 87\ndef _layout_for(*args, &amp;block)\n  name = args.first\n\n  if block &amp;&amp; !name.is_a?(Symbol)\n    capture(*args, &amp;block)\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render\"> <span class=\"method-name\">render</span><span class=\"method-args\">(options = {}, locals = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the result of a render that's dictated by the options hash. The primary options are:</p> <ul>\n<li> <p><code>:partial</code> - See <code>ActionView::PartialRenderer</code>.</p> </li>\n<li> <p><code>:file</code> - Renders an explicit template file (this used to be the old default), add :locals to pass in those.</p> </li>\n<li> <p><code>:inline</code> - Renders an inline template similar to how it's done in the controller.</p> </li>\n<li> <p><code>:text</code> - Renders the text passed in out.</p> </li>\n<li> <p><code>:plain</code> - Renders the text passed in out. Setting the content type as <code>text/plain</code>.</p> </li>\n<li> <p><code>:html</code> - Renders the HTML safe string passed in out, otherwise performs HTML escape on the string first. Setting the content type as <code>text/html</code>.</p> </li>\n<li> <p><code>:body</code> - Renders the text passed in, and inherits the content type of <code>text/html</code> from <code>ActionDispatch::Response</code> object.</p> </li>\n</ul> <p>If no options hash is passed or :update specified, the default is to render a partial and use the second parameter as the locals hash.</p> <div class=\"method-source-code\" id=\"render-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/rendering_helper.rb, line 26\ndef render(options = {}, locals = {}, &amp;block)\n  case options\n  when Hash\n    if block_given?\n      view_renderer.render_partial(self, options.merge(:partial =&gt; options[:layout]), &amp;block)\n    else\n      view_renderer.render(self, options)\n    end\n  else\n    view_renderer.render_partial(self, :partial =&gt; options, :locals =&gt; locals)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/sanitizehelper":"<h1 id=\"module-ActionView::Helpers::SanitizeHelper\" class=\"module\"> module ActionView::Helpers::SanitizeHelper </h1> <section class=\"description\"> <p>The <a href=\"sanitizehelper\">SanitizeHelper</a> module provides a set of methods for scrubbing text of undesired HTML elements. These helper methods extend Action View making them callable within your template files.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sanitize\"> <span class=\"method-name\">sanitize</span><span class=\"method-args\">(html, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sanitizes HTML input, stripping all tags and attributes that aren't whitelisted.</p> <p>It also strips href/src attributes with unsafe protocols like <code>javascript:</code>, while also protecting against attempts to use Unicode, ASCII, and hex character references to work around these protocol filters.</p> <p>The default sanitizer is Rails::Html::WhiteListSanitizer. See <a href=\"https://github.com/rails/rails-html-sanitizer\">Rails HTML Sanitizers</a> for more information.</p> <p>Custom sanitization rules can also be provided.</p> <p>Please note that sanitizing user-provided text does not guarantee that the resulting markup is valid or even well-formed. For example, the output may still contain unescaped characters like <code>&lt;</code>, <code>&gt;</code>, or <code>&amp;</code>.</p> <h4 id=\"method-i-sanitize-label-Options\">Options</h4> <ul>\n<li> <p><code>:tags</code> - An array of allowed tags.</p> </li>\n<li> <p><code>:attributes</code> - An array of allowed attributes.</p> </li>\n<li> <p><code>:scrubber</code> - A <a href=\"https://github.com/rails/rails-html-sanitizer\">Rails::Html scrubber</a> or <a href=\"https://github.com/flavorjones/loofah\">Loofah::Scrubber</a> object that defines custom sanitization rules. A custom scrubber takes precedence over custom tags and attributes.</p> </li>\n</ul> <h4 id=\"method-i-sanitize-label-Examples\">Examples</h4> <p>Normal use:</p> <pre>&lt;%= sanitize @comment.body %&gt;</pre> <p>Providing custom whitelisted tags and attributes:</p> <pre>&lt;%= sanitize @comment.body, tags: %w(strong em a), attributes: %w(href) %&gt;</pre> <p>Providing a custom Rails::Html scrubber:</p> <pre>class CommentScrubber &lt; Rails::Html::PermitScrubber\n  def allowed_node?(node)\n    !%w(form script comment blockquote).include?(node.name)\n  end\n\n  def skip_node?(node)\n    node.text?\n  end\n\n  def scrub_attribute?(name)\n    name == 'style'\n  end\nend\n\n&lt;%= sanitize @comment.body, scrubber: CommentScrubber.new %&gt;</pre> <p>See <a href=\"https://github.com/rails/rails-html-sanitizer\">Rails HTML Sanitizer</a> for documentation about Rails::Html scrubbers.</p> <p>Providing a custom Loofah::Scrubber:</p> <pre>scrubber = Loofah::Scrubber.new do |node|\n  node.remove if node.name == 'script'\nend\n\n&lt;%= sanitize @comment.body, scrubber: scrubber %&gt;</pre> <p>See <a href=\"https://github.com/flavorjones/loofah\">Loofah’s documentation</a> for more information about defining custom Loofah::Scrubber objects.</p> <p>To set the default allowed tags or attributes across your application:</p> <pre class=\"ruby\"># In config/application.rb\nconfig.action_view.sanitized_allowed_tags = ['strong', 'em', 'a']\nconfig.action_view.sanitized_allowed_attributes = ['href', 'title']\n</pre> <div class=\"method-source-code\" id=\"sanitize-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/sanitize_helper.rb, line 83\ndef sanitize(html, options = {})\n  self.class.white_list_sanitizer.sanitize(html, options).try(:html_safe)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sanitize_css\"> <span class=\"method-name\">sanitize_css</span><span class=\"method-args\">(style)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes across a style attribute.</p> <div class=\"method-source-code\" id=\"sanitize_css-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/sanitize_helper.rb, line 88\ndef sanitize_css(style)\n  self.class.white_list_sanitizer.sanitize_css(style)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-strip_links\"> <span class=\"method-name\">strip_links</span><span class=\"method-args\">(html)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Strips all link tags from <code>html</code> leaving just the link text.</p> <pre class=\"ruby\">strip_links('&lt;a href=\"http://www.rubyonrails.org\"&gt;Ruby on Rails&lt;/a&gt;')\n# =&gt; Ruby on Rails\n\nstrip_links('Please e-mail me at &lt;a href=\"mailto:me@email.com\"&gt;me@email.com&lt;/a&gt;.')\n# =&gt; Please e-mail me at me@email.com.\n\nstrip_links('Blog: &lt;a href=\"http://www.myblog.com/\" class=\"nav\" target=\\\"_blank\\\"&gt;Visit&lt;/a&gt;.')\n# =&gt; Blog: Visit.\n</pre> <div class=\"method-source-code\" id=\"strip_links-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/sanitize_helper.rb, line 116\ndef strip_links(html)\n  self.class.link_sanitizer.sanitize(html)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-strip_tags\"> <span class=\"method-name\">strip_tags</span><span class=\"method-args\">(html)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Strips all HTML tags from <code>html</code>, including comments.</p> <pre class=\"ruby\">strip_tags(\"Strip &lt;i&gt;these&lt;/i&gt; tags!\")\n# =&gt; Strip these tags!\n\nstrip_tags(\"&lt;b&gt;Bold&lt;/b&gt; no more!  &lt;a href='more.html'&gt;See more here&lt;/a&gt;...\")\n# =&gt; Bold no more!  See more here...\n\nstrip_tags(\"&lt;div id='top-bar'&gt;Welcome to my website!&lt;/div&gt;\")\n# =&gt; Welcome to my website!\n</pre> <div class=\"method-source-code\" id=\"strip_tags-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/sanitize_helper.rb, line 102\ndef strip_tags(html)\n  self.class.full_sanitizer.sanitize(html, encode_special_chars: false)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/taghelper":"<h1 id=\"module-ActionView::Helpers::TagHelper\" class=\"module\"> module ActionView::Helpers::TagHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"capturehelper\">ActionView::Helpers::CaptureHelper</a>, <a class=\"include\" href=\"outputsafetyhelper\">ActionView::Helpers::OutputSafetyHelper</a>\n</dd>\n</dl> <section class=\"description\"> <p>Provides methods to generate HTML tags programmatically when you can't use a Builder. By default, they output XHTML compliant tags.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"BOOLEAN_ATTRIBUTES\">BOOLEAN_ATTRIBUTES </dt>\n\n<dt id=\"PRE_CONTENT_STRINGS\">PRE_CONTENT_STRINGS </dt>\n\n<dt id=\"TAG_PREFIXES\">TAG_PREFIXES </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cdata_section\"> <span class=\"method-name\">cdata_section</span><span class=\"method-args\">(content)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a CDATA section with the given <code>content</code>. CDATA sections are used to escape blocks of text containing characters which would otherwise be recognized as markup. CDATA sections begin with the string <code>&lt;![CDATA[</code> and end with (and may not contain) the string <code>]]&gt;</code>.</p> <pre class=\"ruby\">cdata_section(\"&lt;hello world&gt;\")\n# =&gt; &lt;![CDATA[&lt;hello world&gt;]]&gt;\n\ncdata_section(File.read(\"hello_world.txt\"))\n# =&gt; &lt;![CDATA[&lt;hello from a text file]]&gt;\n\ncdata_section(\"hello]]&gt;world\")\n# =&gt; &lt;![CDATA[hello]]]]&gt;&lt;![CDATA[&gt;world]]&gt;\n</pre> <div class=\"method-source-code\" id=\"cdata_section-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/tag_helper.rb, line 125\ndef cdata_section(content)\n  splitted = content.to_s.gsub(/\\]\\]\\&gt;/, ']]]]&gt;&lt;![CDATA[&gt;')\n  \"&lt;![CDATA[#{splitted}]]&gt;\".html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_tag\"> <span class=\"method-name\">content_tag</span><span class=\"method-args\">(name, content_or_options_with_block = nil, options = nil, escape = true, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an HTML block tag of type <code>name</code> surrounding the <code>content</code>. Add HTML attributes by passing an attributes hash to <code>options</code>. Instead of passing the content as an argument, you can also use a block in which case, you pass your <code>options</code> as the second parameter. Set escape to false to disable attribute value escaping.</p> <h4 id=\"method-i-content_tag-label-Options\">Options</h4> <p>The <code>options</code> hash can be used with attributes with no value like (<code>disabled</code> and <code>readonly</code>), which you can give a value of true in the <code>options</code> hash. You can use symbols or strings for the attribute names.</p> <h4 id=\"method-i-content_tag-label-Examples\">Examples</h4> <pre>content_tag(:p, \"Hello world!\")\n # =&gt; &lt;p&gt;Hello world!&lt;/p&gt;\ncontent_tag(:div, content_tag(:p, \"Hello world!\"), class: \"strong\")\n # =&gt; &lt;div class=\"strong\"&gt;&lt;p&gt;Hello world!&lt;/p&gt;&lt;/div&gt;\ncontent_tag(:div, \"Hello world!\", class: [\"strong\", \"highlight\"])\n # =&gt; &lt;div class=\"strong highlight\"&gt;Hello world!&lt;/div&gt;\ncontent_tag(\"select\", options, multiple: true)\n # =&gt; &lt;select multiple=\"multiple\"&gt;...options...&lt;/select&gt;\n\n&lt;%= content_tag :div, class: \"strong\" do -%&gt;\n  Hello world!\n&lt;% end -%&gt;\n # =&gt; &lt;div class=\"strong\"&gt;Hello world!&lt;/div&gt;</pre> <div class=\"method-source-code\" id=\"content_tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/tag_helper.rb, line 103\ndef content_tag(name, content_or_options_with_block = nil, options = nil, escape = true, &amp;block)\n  if block_given?\n    options = content_or_options_with_block if content_or_options_with_block.is_a?(Hash)\n    content_tag_string(name, capture(&amp;block), options, escape)\n  else\n    content_tag_string(name, content_or_options_with_block, options, escape)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-escape_once\"> <span class=\"method-name\">escape_once</span><span class=\"method-args\">(html)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an escaped version of <code>html</code> without affecting existing escaped entities.</p> <pre class=\"ruby\">escape_once(\"1 &lt; 2 &amp;amp; 3\")\n# =&gt; \"1 &amp;lt; 2 &amp;amp; 3\"\n\nescape_once(\"&amp;lt;&amp;lt; Accept &amp; Checkout\")\n# =&gt; \"&amp;lt;&amp;lt; Accept &amp;amp; Checkout\"\n</pre> <div class=\"method-source-code\" id=\"escape_once-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/tag_helper.rb, line 137\ndef escape_once(html)\n  ERB::Util.html_escape_once(html)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tag\"> <span class=\"method-name\">tag</span><span class=\"method-args\">(name, options = nil, open = false, escape = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an empty HTML tag of type <code>name</code> which by default is XHTML compliant. Set <code>open</code> to true to create an open tag compatible with HTML 4.0 and below. Add HTML attributes by passing an attributes hash to <code>options</code>. Set <code>escape</code> to false to disable attribute value escaping.</p> <h4 id=\"method-i-tag-label-Options\">Options</h4> <p>You can use symbols or strings for the attribute names.</p> <p>Use <code>true</code> with boolean attributes that can render with no value, like <code>disabled</code> and <code>readonly</code>.</p> <p>HTML5 <code>data-*</code> attributes can be set with a single <code>data</code> key pointing to a hash of sub-attributes.</p> <p>To play nicely with JavaScript conventions sub-attributes are dasherized. For example, a key <code>user_id</code> would render as <code>data-user-id</code> and thus accessed as <code>dataset.userId</code>.</p> <p>Values are encoded to JSON, with the exception of strings, symbols and BigDecimals. This may come in handy when using jQuery's HTML5-aware <code>.data()</code> from 1.4.3.</p> <h4 id=\"method-i-tag-label-Examples\">Examples</h4> <pre class=\"ruby\">tag(\"br\")\n# =&gt; &lt;br /&gt;\n\ntag(\"br\", nil, true)\n# =&gt; &lt;br&gt;\n\ntag(\"input\", type: 'text', disabled: true)\n# =&gt; &lt;input type=\"text\" disabled=\"disabled\" /&gt;\n\ntag(\"input\", type: 'text', class: [\"strong\", \"highlight\"])\n# =&gt; &lt;input class=\"strong highlight\" type=\"text\" /&gt;\n\ntag(\"img\", src: \"open &amp; shut.png\")\n# =&gt; &lt;img src=\"open &amp;amp; shut.png\" /&gt;\n\ntag(\"img\", {src: \"open &amp;amp; shut.png\"}, false, false)\n# =&gt; &lt;img src=\"open &amp;amp; shut.png\" /&gt;\n\ntag(\"div\", data: {name: 'Stephen', city_state: %w(Chicago IL)})\n# =&gt; &lt;div data-name=\"Stephen\" data-city-state=\"[&amp;quot;Chicago&amp;quot;,&amp;quot;IL&amp;quot;]\" /&gt;\n</pre> <div class=\"method-source-code\" id=\"tag-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/tag_helper.rb, line 74\ndef tag(name, options = nil, open = false, escape = true)\n  \"&lt;#{name}#{tag_options(options, escape) if options}#{open ? \"&gt;\" : \" /&gt;\"}\".html_safe\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/texthelper":"<h1 id=\"module-ActionView::Helpers::TextHelper\" class=\"module\"> module ActionView::Helpers::TextHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"sanitizehelper\">ActionView::Helpers::SanitizeHelper</a>, <a class=\"include\" href=\"taghelper\">ActionView::Helpers::TagHelper</a>, <a class=\"include\" href=\"outputsafetyhelper\">ActionView::Helpers::OutputSafetyHelper</a>\n</dd>\n</dl> <section class=\"description\"> <p>The <a href=\"texthelper\">TextHelper</a> module provides a set of methods for filtering, formatting and transforming strings, which can reduce the amount of inline Ruby code in your views. These helper methods extend Action View making them callable within your template files.</p> <h4 id=\"module-ActionView::Helpers::TextHelper-label-Sanitization\">Sanitization</h4> <p>Most text helpers by default sanitize the given content, but do not escape it. This means HTML tags will appear in the page but all malicious code will be removed. Let's look at some examples using the <code>simple_format</code> method:</p> <pre class=\"ruby\">simple_format('&lt;a href=\"http://example.com/\"&gt;Example&lt;/a&gt;')\n# =&gt; \"&lt;p&gt;&lt;a href=\\\"http://example.com/\\\"&gt;Example&lt;/a&gt;&lt;/p&gt;\"\n\nsimple_format('&lt;a href=\"javascript:alert(\\no!\\)\"&gt;Example&lt;/a&gt;')\n# =&gt; \"&lt;p&gt;&lt;a&gt;Example&lt;/a&gt;&lt;/p&gt;\"\n</pre> <p>If you want to escape all content, you should invoke the <code>h</code> method before calling the text helper.</p> <pre class=\"ruby\">simple_format h('&lt;a href=\"http://example.com/\"&gt;Example&lt;/a&gt;')\n# =&gt; \"&lt;p&gt;&amp;lt;a href=\\\"http://example.com/\\\"&amp;gt;Example&amp;lt;/a&amp;gt;&lt;/p&gt;\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-concat\"> <span class=\"method-name\">concat</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The preferred method of outputting text in your views is to use the &lt;%= “text” %&gt; eRuby syntax. The regular <em>puts</em> and <em>print</em> methods do not operate as expected in an eRuby code block. If you absolutely must output text within a non-output code block (i.e., &lt;% %&gt;), you can use the concat method.</p> <pre>&lt;%\n    concat \"hello\"\n    # is the equivalent of &lt;%= \"hello\" %&gt;\n\n    if logged_in\n      concat \"Logged in!\"\n    else\n      concat link_to('login', action: :login)\n    end\n    # will either display \"Logged in!\" or a login link\n%&gt;</pre> <div class=\"method-source-code\" id=\"concat-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 52\ndef concat(string)\n  output_buffer &lt;&lt; string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-current_cycle\"> <span class=\"method-name\">current_cycle</span><span class=\"method-args\">(name = \"default\")</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current cycle string after a cycle has been started. Useful for complex table highlighting or any other design need which requires the current cycle string in more than one place.</p> <pre># Alternate background colors\n@items = [1,2,3,4]\n&lt;% @items.each do |item| %&gt;\n  &lt;div style=\"background-color:&lt;%= cycle(\"red\",\"white\",\"blue\") %&gt;\"&gt;\n    &lt;span style=\"background-color:&lt;%= current_cycle %&gt;\"&gt;&lt;%= item %&gt;&lt;/span&gt;\n  &lt;/div&gt;\n&lt;% end %&gt;</pre> <div class=\"method-source-code\" id=\"current_cycle-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 359\ndef current_cycle(name = \"default\")\n  cycle = get_cycle(name)\n  cycle.current_value if cycle\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cycle\"> <span class=\"method-name\">cycle</span><span class=\"method-args\">(first_value, *values)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a Cycle object whose <em>to_s</em> method cycles through elements of an array every time it is called. This can be used for example, to alternate classes for table rows. You can use named cycles to allow nesting in loops. Passing a <a href=\"../../hash\">Hash</a> as the last parameter with a <code>:name</code> key will create a named cycle. The default name for a cycle without a <code>:name</code> key is <code>\"default\"</code>. You can manually reset a cycle by calling <a href=\"texthelper#method-i-reset_cycle\">#reset_cycle</a> and passing the name of the cycle. The current cycle string can be obtained anytime using the <a href=\"texthelper#method-i-current_cycle\">#current_cycle</a> method.</p> <pre> # Alternate CSS classes for even and odd numbers...\n @items = [1,2,3,4]\n &lt;table&gt;\n &lt;% @items.each do |item| %&gt;\n   &lt;tr class=\"&lt;%= cycle(\"odd\", \"even\") -%&gt;\"&gt;\n     &lt;td&gt;item&lt;/td&gt;\n   &lt;/tr&gt;\n &lt;% end %&gt;\n &lt;/table&gt;\n\n # Cycle CSS classes for rows, and text colors for values within each row\n @items = x = [{first: 'Robert', middle: 'Daniel', last: 'James'},\n              {first: 'Emily', middle: 'Shannon', maiden: 'Pike', last: 'Hicks'},\n             {first: 'June', middle: 'Dae', last: 'Jones'}]\n &lt;% @items.each do |item| %&gt;\n   &lt;tr class=\"&lt;%= cycle(\"odd\", \"even\", name: \"row_class\") -%&gt;\"&gt;\n     &lt;td&gt;\n       &lt;% item.values.each do |value| %&gt;\n         &lt;%# Create a named cycle \"colors\" %&gt;\n         &lt;span style=\"color:&lt;%= cycle(\"red\", \"green\", \"blue\", name: \"colors\") -%&gt;\"&gt;\n           &lt;%= value %&gt;\n         &lt;/span&gt;\n       &lt;% end %&gt;\n       &lt;% reset_cycle(\"colors\") %&gt;\n     &lt;/td&gt;\n  &lt;/tr&gt;\n&lt;% end %&gt;</pre> <div class=\"method-source-code\" id=\"cycle-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 335\ndef cycle(first_value, *values)\n  options = values.extract_options!\n  name = options.fetch(:name, 'default')\n\n  values.unshift(*first_value)\n\n  cycle = get_cycle(name)\n  unless cycle &amp;&amp; cycle.values == values\n    cycle = set_cycle(name, Cycle.new(*values))\n  end\n  cycle.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-excerpt\"> <span class=\"method-name\">excerpt</span><span class=\"method-args\">(text, phrase, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Extracts an excerpt from <code>text</code> that matches the first instance of <code>phrase</code>. The <code>:radius</code> option expands the excerpt on each side of the first occurrence of <code>phrase</code> by the number of characters defined in <code>:radius</code> (which defaults to 100). If the excerpt radius overflows the beginning or end of the <code>text</code>, then the <code>:omission</code> option (which defaults to “…”) will be prepended/appended accordingly. Use the <code>:separator</code> option to choose the delimitation. The resulting string will be stripped in any case. If the <code>phrase</code> isn't found, nil is returned.</p> <pre class=\"ruby\">excerpt('This is an example', 'an', radius: 5)\n# =&gt; ...s is an exam...\n\nexcerpt('This is an example', 'is', radius: 5)\n# =&gt; This is a...\n\nexcerpt('This is an example', 'is')\n# =&gt; This is an example\n\nexcerpt('This next thing is an example', 'ex', radius: 2)\n# =&gt; ...next...\n\nexcerpt('This is also an example', 'an', radius: 8, omission: '&lt;chop&gt; ')\n# =&gt; &lt;chop&gt; is also an example\n\nexcerpt('This is a very beautiful morning', 'very', separator: ' ', radius: 1)\n# =&gt; ...a very beautiful...\n</pre> <div class=\"method-source-code\" id=\"excerpt-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 168\ndef excerpt(text, phrase, options = {})\n  return unless text &amp;&amp; phrase\n\n  separator = options.fetch(:separator, nil) || \"\"\n  case phrase\n  when Regexp\n    regex = phrase\n  else\n    regex = /#{Regexp.escape(phrase)}/i\n  end\n\n  return unless matches = text.match(regex)\n  phrase = matches[0]\n\n  unless separator.empty?\n    text.split(separator).each do |value|\n      if value.match(regex)\n        regex = phrase = value\n        break\n      end\n    end\n  end\n\n  first_part, second_part = text.split(phrase, 2)\n\n  prefix, first_part   = cut_excerpt_part(:first, first_part, separator, options)\n  postfix, second_part = cut_excerpt_part(:second, second_part, separator, options)\n\n  affix = [first_part, separator, phrase, separator, second_part].join.strip\n  [prefix, affix, postfix].join\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-highlight\"> <span class=\"method-name\">highlight</span><span class=\"method-args\">(text, phrases, options = {}) { |found| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Highlights one or more <code>phrases</code> everywhere in <code>text</code> by inserting it into a <code>:highlighter</code> string. The highlighter can be specialized by passing <code>:highlighter</code> as a single-quoted string with <code>\\1</code> where the phrase is to be inserted (defaults to '&lt;mark&gt;1&lt;/mark&gt;') or passing a block that receives each matched term.</p> <pre>highlight('You searched for: rails', 'rails')\n# =&gt; You searched for: &lt;mark&gt;rails&lt;/mark&gt;\n\nhighlight('You searched for: rails', /for|rails/)\n# =&gt; You searched &lt;mark&gt;for&lt;/mark&gt;: &lt;mark&gt;rails&lt;/mark&gt;\n\nhighlight('You searched for: ruby, rails, dhh', 'actionpack')\n# =&gt; You searched for: ruby, rails, dhh\n\nhighlight('You searched for: rails', ['for', 'rails'], highlighter: '&lt;em&gt;\\1&lt;/em&gt;')\n# =&gt; You searched &lt;em&gt;for&lt;/em&gt;: &lt;em&gt;rails&lt;/em&gt;\n\nhighlight('You searched for: rails', 'rails', highlighter: '&lt;a href=\"search?q=\\1\"&gt;\\1&lt;/a&gt;')\n# =&gt; You searched for: &lt;a href=\"search?q=rails\"&gt;rails&lt;/a&gt;\n\nhighlight('You searched for: rails', 'rails') { |match| link_to(search_path(q: match, match)) }\n# =&gt; You searched for: &lt;a href=\"search?q=rails\"&gt;rails&lt;/a&gt;</pre> <div class=\"method-source-code\" id=\"highlight-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 125\ndef highlight(text, phrases, options = {})\n  text = sanitize(text) if options.fetch(:sanitize, true)\n\n  if text.blank? || phrases.blank?\n    text || \"\"\n  else\n    match = Array(phrases).map do |p|\n      Regexp === p ? p.to_s : Regexp.escape(p)\n    end.join('|')\n\n    if block_given?\n      text.gsub(/(#{match})(?![^&lt;]*?&gt;)/i) { |found| yield found }\n    else\n      highlighter = options.fetch(:highlighter, '&lt;mark&gt;\\1&lt;/mark&gt;')\n      text.gsub(/(#{match})(?![^&lt;]*?&gt;)/i, highlighter)\n    end\n  end.html_safe\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pluralize\"> <span class=\"method-name\">pluralize</span><span class=\"method-args\">(count, singular, plural = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Attempts to pluralize the <code>singular</code> word unless <code>count</code> is 1. If <code>plural</code> is supplied, it will use that when count is &gt; 1, otherwise it will use the Inflector to determine the plural form.</p> <pre class=\"ruby\">pluralize(1, 'person')\n# =&gt; 1 person\n\npluralize(2, 'person')\n# =&gt; 2 people\n\npluralize(3, 'person', 'users')\n# =&gt; 3 users\n\npluralize(0, 'person')\n# =&gt; 0 people\n</pre> <div class=\"method-source-code\" id=\"pluralize-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 215\ndef pluralize(count, singular, plural = nil)\n  word = if (count == 1 || count =~ /^1(\\.0+)?$/)\n    singular\n  else\n    plural || singular.pluralize\n  end\n\n  \"#{count || 0} #{word}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset_cycle\"> <span class=\"method-name\">reset_cycle</span><span class=\"method-args\">(name = \"default\")</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Resets a cycle so that it starts from the first element the next time it is called. Pass in <code>name</code> to reset a named cycle.</p> <pre># Alternate CSS classes for even and odd numbers...\n@items = [[1,2,3,4], [5,6,3], [3,4,5,6,7,4]]\n&lt;table&gt;\n&lt;% @items.each do |item| %&gt;\n  &lt;tr class=\"&lt;%= cycle(\"even\", \"odd\") -%&gt;\"&gt;\n      &lt;% item.each do |value| %&gt;\n        &lt;span style=\"color:&lt;%= cycle(\"#333\", \"#666\", \"#999\", name: \"colors\") -%&gt;\"&gt;\n          &lt;%= value %&gt;\n        &lt;/span&gt;\n      &lt;% end %&gt;\n\n      &lt;% reset_cycle(\"colors\") %&gt;\n  &lt;/tr&gt;\n&lt;% end %&gt;\n&lt;/table&gt;</pre> <div class=\"method-source-code\" id=\"reset_cycle-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 382\ndef reset_cycle(name = \"default\")\n  cycle = get_cycle(name)\n  cycle.reset if cycle\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-safe_concat\"> <span class=\"method-name\">safe_concat</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"safe_concat-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 56\ndef safe_concat(string)\n  output_buffer.respond_to?(:safe_concat) ? output_buffer.safe_concat(string) : concat(string)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-simple_format\"> <span class=\"method-name\">simple_format</span><span class=\"method-args\">(text, html_options = {}, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>text</code> transformed into HTML using simple formatting rules. Two or more consecutive newlines(<code>\\n\\n</code>) are considered as a paragraph and wrapped in <code>&lt;p&gt;</code> tags. One newline (<code>\\n</code>) is considered as a linebreak and a <code>&lt;br\n/&gt;</code> tag is appended. This method does not remove the newlines from the <code>text</code>.</p> <p>You can pass any HTML attributes into <code>html_options</code>. These will be added to all created paragraphs.</p> <h4 id=\"method-i-simple_format-label-Options\">Options</h4> <ul>\n<li> <p><code>:sanitize</code> - If <code>false</code>, does not sanitize <code>text</code>.</p> </li>\n<li> <p><code>:wrapper_tag</code> - <a href=\"../../string\">String</a> representing the wrapper tag, defaults to <code>\"p\"</code></p> </li>\n</ul> <h4 id=\"method-i-simple_format-label-Examples\">Examples</h4> <pre class=\"ruby\">my_text = \"Here is some basic text...\\n...with a line break.\"\n\nsimple_format(my_text)\n# =&gt; \"&lt;p&gt;Here is some basic text...\\n&lt;br /&gt;...with a line break.&lt;/p&gt;\"\n\nsimple_format(my_text, {}, wrapper_tag: \"div\")\n# =&gt; \"&lt;div&gt;Here is some basic text...\\n&lt;br /&gt;...with a line break.&lt;/div&gt;\"\n\nmore_text = \"We want to put a paragraph...\\n\\n...right there.\"\n\nsimple_format(more_text)\n# =&gt; \"&lt;p&gt;We want to put a paragraph...&lt;/p&gt;\\n\\n&lt;p&gt;...right there.&lt;/p&gt;\"\n\nsimple_format(\"Look ma! A class!\", class: 'description')\n# =&gt; \"&lt;p class='description'&gt;Look ma! A class!&lt;/p&gt;\"\n\nsimple_format(\"&lt;blink&gt;Unblinkable.&lt;/blink&gt;\")\n# =&gt; \"&lt;p&gt;Unblinkable.&lt;/p&gt;\"\n\nsimple_format(\"&lt;blink&gt;Blinkable!&lt;/blink&gt; It's true.\", {}, sanitize: false)\n# =&gt; \"&lt;p&gt;&lt;blink&gt;Blinkable!&lt;/blink&gt; It's true.&lt;/p&gt;\"\n</pre> <div class=\"method-source-code\" id=\"simple_format-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 283\ndef simple_format(text, html_options = {}, options = {})\n  wrapper_tag = options.fetch(:wrapper_tag, :p)\n\n  text = sanitize(text) if options.fetch(:sanitize, true)\n  paragraphs = split_paragraphs(text)\n\n  if paragraphs.empty?\n    content_tag(wrapper_tag, nil, html_options)\n  else\n    paragraphs.map! { |paragraph|\n      content_tag(wrapper_tag, raw(paragraph), html_options)\n    }.join(\"\\n\\n\").html_safe\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-truncate\"> <span class=\"method-name\">truncate</span><span class=\"method-args\">(text, options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Truncates a given <code>text</code> after a given <code>:length</code> if <code>text</code> is longer than <code>:length</code> (defaults to 30). The last characters will be replaced with the <code>:omission</code> (defaults to “…”) for a total length not exceeding <code>:length</code>.</p> <p>Pass a <code>:separator</code> to truncate <code>text</code> at a natural break.</p> <p>Pass a block if you want to show extra content when the text is truncated.</p> <p>The result is marked as HTML-safe, but it is escaped by default, unless <code>:escape</code> is <code>false</code>. Care should be taken if <code>text</code> contains HTML tags or entities, because truncation may produce invalid HTML (such as unbalanced or incomplete tags).</p> <pre class=\"ruby\">truncate(\"Once upon a time in a world far far away\")\n# =&gt; \"Once upon a time in a world...\"\n\ntruncate(\"Once upon a time in a world far far away\", length: 17)\n# =&gt; \"Once upon a ti...\"\n\ntruncate(\"Once upon a time in a world far far away\", length: 17, separator: ' ')\n# =&gt; \"Once upon a...\"\n\ntruncate(\"And they found that many people were sleeping better.\", length: 25, omission: '... (continued)')\n# =&gt; \"And they f... (continued)\"\n\ntruncate(\"&lt;p&gt;Once upon a time in a world far far away&lt;/p&gt;\")\n# =&gt; \"&amp;lt;p&amp;gt;Once upon a time in a wo...\"\n\ntruncate(\"&lt;p&gt;Once upon a time in a world far far away&lt;/p&gt;\", escape: false)\n# =&gt; \"&lt;p&gt;Once upon a time in a wo...\"\n\ntruncate(\"Once upon a time in a world far far away\") { link_to \"Continue\", \"#\" }\n# =&gt; \"Once upon a time in a wo...&lt;a href=\"#\"&gt;Continue&lt;/a&gt;\"\n</pre> <div class=\"method-source-code\" id=\"truncate-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 92\ndef truncate(text, options = {}, &amp;block)\n  if text\n    length  = options.fetch(:length, 30)\n\n    content = text.truncate(length, options)\n    content = options[:escape] == false ? content.html_safe : ERB::Util.html_escape(content)\n    content &lt;&lt; capture(&amp;block) if block_given? &amp;&amp; text.length &gt; length\n    content\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-word_wrap\"> <span class=\"method-name\">word_wrap</span><span class=\"method-args\">(text, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps the <code>text</code> into lines no longer than <code>line_width</code> width. This method breaks on the first whitespace character that does not exceed <code>line_width</code> (which is 80 by default).</p> <pre class=\"ruby\">word_wrap('Once upon a time')\n# =&gt; Once upon a time\n\nword_wrap('Once upon a time, in a kingdom called Far Far Away, a king fell ill, and finding a successor to the throne turned out to be more trouble than anyone could have imagined...')\n# =&gt; Once upon a time, in a kingdom called Far Far Away, a king fell ill, and finding\\na successor to the throne turned out to be more trouble than anyone could have\\nimagined...\n\nword_wrap('Once upon a time', line_width: 8)\n# =&gt; Once\\nupon a\\ntime\n\nword_wrap('Once upon a time', line_width: 1)\n# =&gt; Once\\nupon\\na\\ntime\n</pre> <div class=\"method-source-code\" id=\"word_wrap-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/text_helper.rb, line 240\ndef word_wrap(text, options = {})\n  line_width = options.fetch(:line_width, 80)\n\n  text.split(\"\\n\").collect! do |line|\n    line.length &gt; line_width ? line.gsub(/(.{1,#{line_width}})(\\s+|$)/, \"\\\\1\\n\").strip : line\n  end * \"\\n\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/translationhelper":"<h1 id=\"module-ActionView::Helpers::TranslationHelper\" class=\"module\"> module ActionView::Helpers::TranslationHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"taghelper\">ActionView::Helpers::TagHelper</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-l\"> <span class=\"method-name\">l</span><span class=\"method-args\">(*args)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"translationhelper#method-i-localize\">localize</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-localize\"> <span class=\"method-name\">localize</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delegates to <code>I18n.localize</code> with no additional functionality.</p> <p>See <a href=\"http://rubydoc.info/github/svenfuchs/i18n/master/I18n/Backend/Base:localize\">rubydoc.info/github/svenfuchs/i18n/master/I18n/Backend/Base:localize</a> for more information.</p> <div class=\"method-source-code\" id=\"localize-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/translation_helper.rb, line 87\ndef localize(*args)\n  I18n.localize(*args)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"translationhelper#method-i-l\">l</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-t\"> <span class=\"method-name\">t</span><span class=\"method-args\">(key, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"translationhelper#method-i-translate\">translate</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-translate\"> <span class=\"method-name\">translate</span><span class=\"method-args\">(key, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delegates to <code>I18n#translate</code> but also performs three additional functions.</p> <p>First, it will ensure that any thrown <code>MissingTranslation</code> messages will be turned into inline spans that:</p> <pre>* have a \"translation-missing\" class set,\n* contain the missing key as a title attribute and\n* a titleized version of the last key segment as a text.</pre> <p>E.g. the value returned for a missing translation key :“blog.post.title” will be &lt;span class=“translation_missing” title=“translation missing: en.blog.post.title”&gt;Title&lt;/span&gt;. This way your views will display rather reasonable strings but it will still be easy to spot missing translations.</p> <p>Second, it'll scope the key by the current partial if the key starts with a period. So if you call <code>translate(\".foo\")</code> from the <code>people/index.html.erb</code> template, you'll actually be calling <code>I18n.translate(\"people.index.foo\")</code>. This makes it less repetitive to translate many keys within the same partials and gives you a simple framework for scoping them consistently. If you don't prepend the key with a period, nothing is converted.</p> <p>Third, it'll mark the translation as safe HTML if the key has the suffix “_html” or the last element of the key is the word “html”. For example, calling translate(“footer_html”) or translate(“footer.html”) will return a safe HTML string that won't be escaped by other HTML helper methods. This naming convention helps to identify translations that include HTML tags so that you know what kind of output to expect when you call translate in a template.</p> <div class=\"method-source-code\" id=\"translate-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/translation_helper.rb, line 38\ndef translate(key, options = {})\n  options = options.dup\n  has_default = options.has_key?(:default)\n  remaining_defaults = Array(options.delete(:default)).compact\n\n  if has_default &amp;&amp; !remaining_defaults.first.kind_of?(Symbol)\n    options[:default] = remaining_defaults\n  end\n\n  # If the user has explicitly decided to NOT raise errors, pass that option to I18n.\n  # Otherwise, tell I18n to raise an exception, which we rescue further in this method.\n  # Note: `raise_error` refers to us re-raising the error in this method. I18n is forced to raise by default.\n  if options[:raise] == false || (options.key?(:rescue_format) &amp;&amp; options[:rescue_format].nil?)\n    raise_error = false\n    i18n_raise = false\n  else\n    raise_error = options[:raise] || options[:rescue_format] || ActionView::Base.raise_on_missing_translations\n    i18n_raise = true\n  end\n\n  if html_safe_translation_key?(key)\n    html_safe_options = options.dup\n    options.except(*I18n::RESERVED_KEYS).each do |name, value|\n      unless name == :count &amp;&amp; value.is_a?(Numeric)\n        html_safe_options[name] = ERB::Util.html_escape(value.to_s)\n      end\n    end\n    translation = I18n.translate(scope_key_by_partial(key), html_safe_options.merge(raise: i18n_raise))\n\n    translation.respond_to?(:html_safe) ? translation.html_safe : translation\n  else\n    I18n.translate(scope_key_by_partial(key), options.merge(raise: i18n_raise))\n  end\nrescue I18n::MissingTranslationData =&gt; e\n  if remaining_defaults.present?\n    translate remaining_defaults.shift, options.merge(default: remaining_defaults)\n  else\n    raise e if raise_error\n\n    keys = I18n.normalize_keys(e.locale, e.key, e.options[:scope])\n    content_tag('span', keys.last.to_s.titleize, :class =&gt; 'translation_missing', :title =&gt; \"translation missing: #{keys.join('.')}\")\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"translationhelper#method-i-t\">t</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/helpers/urlhelper":"<h1 id=\"module-ActionView::Helpers::UrlHelper\" class=\"module\"> module ActionView::Helpers::UrlHelper </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"taghelper\">ActionView::Helpers::TagHelper</a></dd>\n</dl> <section class=\"description\"> <p>Provides a set of methods for making links and getting URLs that depend on the routing subsystem (see <a href=\"../../actiondispatch/routing\">ActionDispatch::Routing</a>). This allows you to use the same format for links in views and controllers.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"BUTTON_TAG_METHOD_VERBS\">BUTTON_TAG_METHOD_VERBS </dt>\n<dd>\n<p>This helper may be included in any class that includes the URL helpers of a routes (routes.url_helpers). Some methods provided here will only work in the context of a request (link_to_unless_current, for instance), which must be provided as a method called request on the context.</p> </dd>\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-button_to\"> <span class=\"method-name\">button_to</span><span class=\"method-args\">(name = nil, options = nil, html_options = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Generates a form containing a single button that submits to the URL created by the set of <code>options</code>. This is the safest method to ensure links that cause changes to your data are not triggered by search bots or accelerators. If the HTML button does not work with your layout, you can also consider using the <code>link_to</code> method with the <code>:method</code> modifier as described in the <code>link_to</code> documentation.</p> <p>By default, the generated form element has a class name of <code>button_to</code> to allow styling of the form itself and its children. This can be changed using the <code>:form_class</code> modifier within <code>html_options</code>. You can control the form submission and input element behavior using <code>html_options</code>. This method accepts the <code>:method</code> modifier described in the <code>link_to</code> documentation. If no <code>:method</code> modifier is given, it will default to performing a POST operation. You can also disable the button by passing <code>disabled: true</code> in <code>html_options</code>. If you are using RESTful routes, you can pass the <code>:method</code> to change the HTTP verb used to submit the form.</p> <h4 id=\"method-i-button_to-label-Options\">Options</h4> <p>The <code>options</code> hash accepts the same options as <code>url_for</code>.</p> <p>There are a few special <code>html_options</code>:</p> <ul>\n<li> <p><code>:method</code> - <a href=\"../../symbol\">Symbol</a> of HTTP verb. Supported verbs are <code>:post</code>, <code>:get</code>, <code>:delete</code>, <code>:patch</code>, and <code>:put</code>. By default it will be <code>:post</code>.</p> </li>\n<li> <p><code>:disabled</code> - If set to true, it will generate a disabled button.</p> </li>\n<li> <p><code>:data</code> - This option can be used to add custom data attributes.</p> </li>\n<li> <p><code>:remote</code> - If set to true, will allow the Unobtrusive JavaScript drivers to control the submit behavior. By default this behavior is an ajax submit.</p> </li>\n<li> <p><code>:form</code> - This hash will be form attributes</p> </li>\n<li> <p><code>:form_class</code> - This controls the class of the form within which the submit button will be placed</p> </li>\n<li> <p><code>:params</code> - <a href=\"../../hash\">Hash</a> of parameters to be rendered as hidden fields within the form.</p> </li>\n</ul> <h4 id=\"method-i-button_to-label-Data+attributes\">Data attributes</h4> <ul>\n<li> <p><code>:confirm</code> - This will use the unobtrusive JavaScript driver to prompt with the question specified. If the user accepts, the link is processed normally, otherwise no action is taken.</p> </li>\n<li> <p><code>:disable_with</code> - Value of this parameter will be used as the value for a disabled version of the submit button when the form is submitted. This feature is provided by the unobtrusive JavaScript driver.</p> </li>\n</ul> <h4 id=\"method-i-button_to-label-Examples\">Examples</h4> <pre>&lt;%= button_to \"New\", action: \"new\" %&gt;\n# =&gt; \"&lt;form method=\"post\" action=\"/controller/new\" class=\"button_to\"&gt;\n#      &lt;input value=\"New\" type=\"submit\" /&gt;\n#    &lt;/form&gt;\"\n\n&lt;%= button_to \"New\", new_articles_path %&gt;\n# =&gt; \"&lt;form method=\"post\" action=\"/articles/new\" class=\"button_to\"&gt;\n#      &lt;input value=\"New\" type=\"submit\" /&gt;\n#    &lt;/form&gt;\"\n\n&lt;%= button_to [:make_happy, @user] do %&gt;\n  Make happy &lt;strong&gt;&lt;%= @user.name %&gt;&lt;/strong&gt;\n&lt;% end %&gt;\n# =&gt; \"&lt;form method=\"post\" action=\"/users/1/make_happy\" class=\"button_to\"&gt;\n#      &lt;button type=\"submit\"&gt;\n#        Make happy &lt;strong&gt;&lt;%= @user.name %&gt;&lt;/strong&gt;\n#      &lt;/button&gt;\n#    &lt;/form&gt;\"\n\n&lt;%= button_to \"New\", { action: \"new\" }, form_class: \"new-thing\" %&gt;\n# =&gt; \"&lt;form method=\"post\" action=\"/controller/new\" class=\"new-thing\"&gt;\n#      &lt;input value=\"New\" type=\"submit\" /&gt;\n#    &lt;/form&gt;\"\n\n&lt;%= button_to \"Create\", { action: \"create\" }, remote: true, form: { \"data-type\" =&gt; \"json\" } %&gt;\n# =&gt; \"&lt;form method=\"post\" action=\"/images/create\" class=\"button_to\" data-remote=\"true\" data-type=\"json\"&gt;\n#      &lt;input value=\"Create\" type=\"submit\" /&gt;\n#      &lt;input name=\"authenticity_token\" type=\"hidden\" value=\"10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6\"/&gt;\n#    &lt;/form&gt;\"\n\n&lt;%= button_to \"Delete Image\", { action: \"delete\", id: @image.id },\n                                method: :delete, data: { confirm: \"Are you sure?\" } %&gt;\n# =&gt; \"&lt;form method=\"post\" action=\"/images/delete/1\" class=\"button_to\"&gt;\n#      &lt;input type=\"hidden\" name=\"_method\" value=\"delete\" /&gt;\n#      &lt;input data-confirm='Are you sure?' value=\"Delete Image\" type=\"submit\" /&gt;\n#      &lt;input name=\"authenticity_token\" type=\"hidden\" value=\"10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6\"/&gt;\n#    &lt;/form&gt;\"\n\n&lt;%= button_to('Destroy', 'http://www.example.com',\n          method: \"delete\", remote: true, data: { confirm: 'Are you sure?', disable_with: 'loading...' }) %&gt;\n# =&gt; \"&lt;form class='button_to' method='post' action='http://www.example.com' data-remote='true'&gt;\n#       &lt;input name='_method' value='delete' type='hidden' /&gt;\n#       &lt;input value='Destroy' type='submit' data-disable-with='loading...' data-confirm='Are you sure?' /&gt;\n#       &lt;input name=\"authenticity_token\" type=\"hidden\" value=\"10f2163b45388899ad4d5ae948988266befcb6c3d1b2451cf657a0c293d605a6\"/&gt;\n#     &lt;/form&gt;\"\n#</pre> <div class=\"method-source-code\" id=\"button_to-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/url_helper.rb, line 279\ndef button_to(name = nil, options = nil, html_options = nil, &amp;block)\n  html_options, options = options, name if block_given?\n  options      ||= {}\n  html_options ||= {}\n\n  html_options = html_options.stringify_keys\n  convert_boolean_attributes!(html_options, %w(disabled))\n\n  url    = options.is_a?(String) ? options : url_for(options)\n  remote = html_options.delete('remote')\n  params = html_options.delete('params')\n\n  method     = html_options.delete('method').to_s\n  method_tag = BUTTON_TAG_METHOD_VERBS.include?(method) ? method_tag(method) : ''.html_safe\n\n  form_method  = method == 'get' ? 'get' : 'post'\n  form_options = html_options.delete('form') || {}\n  form_options[:class] ||= html_options.delete('form_class') || 'button_to'\n  form_options.merge!(method: form_method, action: url)\n  form_options.merge!(\"data-remote\" =&gt; \"true\") if remote\n\n  request_token_tag = form_method == 'post' ? token_tag : ''\n\n  html_options = convert_options_to_data_attributes(options, html_options)\n  html_options['type'] = 'submit'\n\n  button = if block_given?\n    content_tag('button', html_options, &amp;block)\n  else\n    html_options['value'] = name || url\n    tag('input', html_options)\n  end\n\n  inner_tags = method_tag.safe_concat(button).safe_concat(request_token_tag)\n  if params\n    params.each do |param_name, value|\n      inner_tags.safe_concat tag(:input, type: \"hidden\", name: param_name, value: value.to_param)\n    end\n  end\n  content_tag('form', inner_tags, form_options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-current_page-3F\"> <span class=\"method-name\">current_page?</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>True if the current request <a href=\"../../uri\">URI</a> was generated by the given <code>options</code>.</p> <h4 id=\"method-i-current_page-3F-label-Examples\">Examples</h4> <p>Let's say we're in the <code>http://www.example.com/shop/checkout?order=desc</code> action.</p> <pre class=\"ruby\">current_page?(action: 'process')\n# =&gt; false\n\ncurrent_page?(controller: 'shop', action: 'checkout')\n# =&gt; true\n\ncurrent_page?(controller: 'shop', action: 'checkout', order: 'asc')\n# =&gt; false\n\ncurrent_page?(action: 'checkout')\n# =&gt; true\n\ncurrent_page?(controller: 'library', action: 'checkout')\n# =&gt; false\n\ncurrent_page?('http://www.example.com/shop/checkout')\n# =&gt; true\n\ncurrent_page?('/shop/checkout')\n# =&gt; true\n</pre> <p>Let's say we're in the <code>http://www.example.com/shop/checkout?order=desc&amp;page=1</code> action.</p> <pre class=\"ruby\">current_page?(action: 'process')\n# =&gt; false\n\ncurrent_page?(controller: 'shop', action: 'checkout')\n# =&gt; true\n\ncurrent_page?(controller: 'shop', action: 'checkout', order: 'desc', page: '1')\n# =&gt; true\n\ncurrent_page?(controller: 'shop', action: 'checkout', order: 'desc', page: '2')\n# =&gt; false\n\ncurrent_page?(controller: 'shop', action: 'checkout', order: 'desc')\n# =&gt; false\n\ncurrent_page?(action: 'checkout')\n# =&gt; true\n\ncurrent_page?(controller: 'library', action: 'checkout')\n# =&gt; false\n</pre> <p>Let's say we're in the <code>http://www.example.com/products</code> action with method POST in case of invalid product.</p> <pre class=\"ruby\">current_page?(controller: 'product', action: 'index')\n# =&gt; false\n</pre> <div class=\"method-source-code\" id=\"current_page-3F-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/url_helper.rb, line 525\ndef current_page?(options)\n  unless request\n    raise \"You cannot use helpers that need to determine the current \"                  \"page unless your view context provides a Request object \"                  \"in a #request method\"\n  end\n\n  return false unless request.get? || request.head?\n\n  url_string = URI.parser.unescape(url_for(options)).force_encoding(Encoding::BINARY)\n\n  # We ignore any extra parameters in the request_uri if the\n  # submitted url doesn't have any either. This lets the function\n  # work with things like ?order=asc\n  request_uri = url_string.index(\"?\") ? request.fullpath : request.path\n  request_uri = URI.parser.unescape(request_uri).force_encoding(Encoding::BINARY)\n\n  if url_string =~ /^\\w+:\\/\\//\n    url_string == \"#{request.protocol}#{request.host_with_port}#{request_uri}\"\n  else\n    url_string == request_uri\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-link_to\"> <span class=\"method-name\">link_to</span><span class=\"method-args\">(name = nil, options = nil, html_options = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a link tag of the given <code>name</code> using a URL created by the set of <code>options</code>. See the valid options in the documentation for <code>url_for</code>. It's also possible to pass a <a href=\"../../string\">String</a> instead of an options hash, which generates a link tag that uses the value of the <a href=\"../../string\">String</a> as the href for the link. Using a <code>:back</code> <a href=\"../../symbol\">Symbol</a> instead of an options hash will generate a link to the referrer (a JavaScript back link will be used in place of a referrer if none exists). If <code>nil</code> is passed as the name the value of the link itself will become the name.</p> <h4 id=\"method-i-link_to-label-Signatures\">Signatures</h4> <pre class=\"ruby\">link_to(body, url, html_options = {})\n  # url is a String; you can use URL helpers like\n  # posts_path\n\nlink_to(body, url_options = {}, html_options = {})\n  # url_options, except :method, is passed to url_for\n\nlink_to(options = {}, html_options = {}) do\n  # name\nend\n\nlink_to(url, html_options = {}) do\n  # name\nend\n</pre> <h4 id=\"method-i-link_to-label-Options\">Options</h4> <ul>\n<li> <p><code>:data</code> - This option can be used to add custom data attributes.</p> </li>\n<li> <p><code>method: symbol of HTTP verb</code> - This modifier will dynamically create an HTML form and immediately submit the form for processing using the HTTP verb specified. Useful for having links perform a POST operation in dangerous actions like deleting a record (which search bots can follow while spidering your site). Supported verbs are <code>:post</code>, <code>:delete</code>, <code>:patch</code>, and <code>:put</code>. Note that if the user has JavaScript disabled, the request will fall back to using GET. If <code>href: '#'</code> is used and the user has JavaScript disabled clicking the link will have no effect. If you are relying on the POST behavior, you should check for it in your controller's action by using the request object's methods for <code>post?</code>, <code>delete?</code>, <code>patch?</code>, or <code>put?</code>.</p> </li>\n<li> <p><code>remote: true</code> - This will allow the unobtrusive JavaScript driver to make an Ajax request to the URL in question instead of following the link. The drivers each provide mechanisms for listening for the completion of the Ajax request and performing JavaScript operations once they're complete</p> </li>\n</ul> <h4 id=\"method-i-link_to-label-Data+attributes\">Data attributes</h4> <ul>\n<li> <p><code>confirm: 'question?'</code> - This will allow the unobtrusive JavaScript driver to prompt with the question specified (in this case, the resulting text would be <code>question?</code>. If the user accepts, the link is processed normally, otherwise no action is taken.</p> </li>\n<li> <p><code>:disable_with</code> - Value of this parameter will be used as the value for a disabled version of the submit button when the form is submitted. This feature is provided by the unobtrusive JavaScript driver.</p> </li>\n</ul> <h4 id=\"method-i-link_to-label-Examples\">Examples</h4> <p>Because it relies on <code>url_for</code>, <code>link_to</code> supports both older-style controller/action/id arguments and newer RESTful routes. Current Rails style favors RESTful routes whenever possible, so base your application on resources and use</p> <pre class=\"ruby\">link_to \"Profile\", profile_path(@profile)\n# =&gt; &lt;a href=\"/profiles/1\"&gt;Profile&lt;/a&gt;\n</pre> <p>or the even pithier</p> <pre class=\"ruby\">link_to \"Profile\", @profile\n# =&gt; &lt;a href=\"/profiles/1\"&gt;Profile&lt;/a&gt;\n</pre> <p>in place of the older more verbose, non-resource-oriented</p> <pre class=\"ruby\">link_to \"Profile\", controller: \"profiles\", action: \"show\", id: @profile\n# =&gt; &lt;a href=\"/profiles/show/1\"&gt;Profile&lt;/a&gt;\n</pre> <p>Similarly,</p> <pre class=\"ruby\">link_to \"Profiles\", profiles_path\n# =&gt; &lt;a href=\"/profiles\"&gt;Profiles&lt;/a&gt;\n</pre> <p>is better than</p> <pre class=\"ruby\">link_to \"Profiles\", controller: \"profiles\"\n# =&gt; &lt;a href=\"/profiles\"&gt;Profiles&lt;/a&gt;\n</pre> <p>You can use a block as well if your link target is hard to fit into the name parameter. <a href=\"../../erb\">ERB</a> example:</p> <pre>&lt;%= link_to(@profile) do %&gt;\n  &lt;strong&gt;&lt;%= @profile.name %&gt;&lt;/strong&gt; -- &lt;span&gt;Check it out!&lt;/span&gt;\n&lt;% end %&gt;\n# =&gt; &lt;a href=\"/profiles/1\"&gt;\n       &lt;strong&gt;David&lt;/strong&gt; -- &lt;span&gt;Check it out!&lt;/span&gt;\n     &lt;/a&gt;</pre> <p>Classes and ids for CSS are easy to produce:</p> <pre class=\"ruby\">link_to \"Articles\", articles_path, id: \"news\", class: \"article\"\n# =&gt; &lt;a href=\"/articles\" class=\"article\" id=\"news\"&gt;Articles&lt;/a&gt;\n</pre> <p>Be careful when using the older argument style, as an extra literal hash is needed:</p> <pre class=\"ruby\">link_to \"Articles\", { controller: \"articles\" }, id: \"news\", class: \"article\"\n# =&gt; &lt;a href=\"/articles\" class=\"article\" id=\"news\"&gt;Articles&lt;/a&gt;\n</pre> <p>Leaving the hash off gives the wrong link:</p> <pre class=\"ruby\">link_to \"WRONG!\", controller: \"articles\", id: \"news\", class: \"article\"\n# =&gt; &lt;a href=\"/articles/index/news?class=article\"&gt;WRONG!&lt;/a&gt;\n</pre> <p><code>link_to</code> can also produce links with anchors or query strings:</p> <pre class=\"ruby\">link_to \"Comment wall\", profile_path(@profile, anchor: \"wall\")\n# =&gt; &lt;a href=\"/profiles/1#wall\"&gt;Comment wall&lt;/a&gt;\n\nlink_to \"Ruby on Rails search\", controller: \"searches\", query: \"ruby on rails\"\n# =&gt; &lt;a href=\"/searches?query=ruby+on+rails\"&gt;Ruby on Rails search&lt;/a&gt;\n\nlink_to \"Nonsense search\", searches_path(foo: \"bar\", baz: \"quux\")\n# =&gt; &lt;a href=\"/searches?foo=bar&amp;amp;baz=quux\"&gt;Nonsense search&lt;/a&gt;\n</pre> <p>The only option specific to <code>link_to</code> (<code>:method</code>) is used as follows:</p> <pre class=\"ruby\">link_to(\"Destroy\", \"http://www.example.com\", method: :delete)\n# =&gt; &lt;a href='http://www.example.com' rel=\"nofollow\" data-method=\"delete\"&gt;Destroy&lt;/a&gt;\n</pre> <p>You can also use custom data attributes using the <code>:data</code> option:</p> <pre class=\"ruby\">link_to \"Visit Other Site\", \"http://www.rubyonrails.org/\", data: { confirm: \"Are you sure?\" }\n# =&gt; &lt;a href=\"http://www.rubyonrails.org/\" data-confirm=\"Are you sure?\"&gt;Visit Other Site&lt;/a&gt;\n</pre> <div class=\"method-source-code\" id=\"link_to-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/url_helper.rb, line 175\ndef link_to(name = nil, options = nil, html_options = nil, &amp;block)\n  html_options, options, name = options, name, block if block_given?\n  options ||= {}\n\n  html_options = convert_options_to_data_attributes(options, html_options)\n\n  url = url_for(options)\n  html_options['href'] ||= url\n\n  content_tag(:a, name || url, html_options, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-link_to_if\"> <span class=\"method-name\">link_to_if</span><span class=\"method-args\">(condition, name, options = {}, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a link tag of the given <code>name</code> using a URL created by the set of <code>options</code> if <code>condition</code> is true, otherwise only the name is returned. To specialize the default behavior, you can pass a block that accepts the name or the full argument list for <code>link_to_unless</code> (see the examples in <code>link_to_unless</code>).</p> <h4 id=\"method-i-link_to_if-label-Examples\">Examples</h4> <pre>&lt;%= link_to_if(@current_user.nil?, \"Login\", { controller: \"sessions\", action: \"new\" }) %&gt;\n# If the user isn't logged in...\n# =&gt; &lt;a href=\"/sessions/new/\"&gt;Login&lt;/a&gt;\n\n&lt;%=\n   link_to_if(@current_user.nil?, \"Login\", { controller: \"sessions\", action: \"new\" }) do\n     link_to(@current_user.login, { controller: \"accounts\", action: \"show\", id: @current_user })\n   end\n%&gt;\n# If the user isn't logged in...\n# =&gt; &lt;a href=\"/sessions/new/\"&gt;Login&lt;/a&gt;\n# If they are logged in...\n# =&gt; &lt;a href=\"/accounts/show/3\"&gt;my_username&lt;/a&gt;</pre> <div class=\"method-source-code\" id=\"link_to_if-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/url_helper.rb, line 407\ndef link_to_if(condition, name, options = {}, html_options = {}, &amp;block)\n  if condition\n    link_to(name, options, html_options)\n  else\n    if block_given?\n      block.arity &lt;= 1 ? capture(name, &amp;block) : capture(name, options, html_options, &amp;block)\n    else\n      ERB::Util.html_escape(name)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-link_to_unless\"> <span class=\"method-name\">link_to_unless</span><span class=\"method-args\">(condition, name, options = {}, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a link tag of the given <code>name</code> using a URL created by the set of <code>options</code> unless <code>condition</code> is true, in which case only the name is returned. To specialize the default behavior (i.e., show a login link rather than just the plaintext link text), you can pass a block that accepts the name or the full argument list for <code>link_to_unless</code>.</p> <h4 id=\"method-i-link_to_unless-label-Examples\">Examples</h4> <pre>&lt;%= link_to_unless(@current_user.nil?, \"Reply\", { action: \"reply\" }) %&gt;\n# If the user is logged in...\n# =&gt; &lt;a href=\"/controller/reply/\"&gt;Reply&lt;/a&gt;\n\n&lt;%=\n   link_to_unless(@current_user.nil?, \"Reply\", { action: \"reply\" }) do |name|\n     link_to(name, { controller: \"accounts\", action: \"signup\" })\n   end\n%&gt;\n# If the user is logged in...\n# =&gt; &lt;a href=\"/controller/reply/\"&gt;Reply&lt;/a&gt;\n# If not...\n# =&gt; &lt;a href=\"/accounts/signup\"&gt;Reply&lt;/a&gt;</pre> <div class=\"method-source-code\" id=\"link_to_unless-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/url_helper.rb, line 383\ndef link_to_unless(condition, name, options = {}, html_options = {}, &amp;block)\n  link_to_if !condition, name, options, html_options, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-link_to_unless_current\"> <span class=\"method-name\">link_to_unless_current</span><span class=\"method-args\">(name, options = {}, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a link tag of the given <code>name</code> using a URL created by the set of <code>options</code> unless the current request <a href=\"../../uri\">URI</a> is the same as the links, in which case only the name is returned (or the given block is yielded, if one exists). You can give <code>link_to_unless_current</code> a block which will specialize the default behavior (e.g., show a “Start Here” link rather than the link's text).</p> <h4 id=\"method-i-link_to_unless_current-label-Examples\">Examples</h4> <p>Let's say you have a navigation menu…</p> <pre>&lt;ul id=\"navbar\"&gt;\n  &lt;li&gt;&lt;%= link_to_unless_current(\"Home\", { action: \"index\" }) %&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;%= link_to_unless_current(\"About Us\", { action: \"about\" }) %&gt;&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If in the “about” action, it will render…</p> <pre>&lt;ul id=\"navbar\"&gt;\n  &lt;li&gt;&lt;a href=\"/controller/index\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;About Us&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>…but if in the “index” action, it will render:</p> <pre>&lt;ul id=\"navbar\"&gt;\n  &lt;li&gt;Home&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"/controller/about\"&gt;About Us&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>The implicit block given to <code>link_to_unless_current</code> is evaluated if the current action is the action given. So, if we had a comments page and wanted to render a “Go Back” link instead of a link to the comments page, we could do something like this…</p> <pre>&lt;%=\n    link_to_unless_current(\"Comment\", { controller: \"comments\", action: \"new\" }) do\n       link_to(\"Go back\", { controller: \"posts\", action: \"index\" })\n    end\n %&gt;</pre> <div class=\"method-source-code\" id=\"link_to_unless_current-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/url_helper.rb, line 359\ndef link_to_unless_current(name, options = {}, html_options = {}, &amp;block)\n  link_to_unless current_page?(options), name, options, html_options, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mail_to\"> <span class=\"method-name\">mail_to</span><span class=\"method-args\">(email_address, name = nil, html_options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a mailto link tag to the specified <code>email_address</code>, which is also used as the name of the link unless <code>name</code> is specified. Additional HTML attributes for the link can be passed in <code>html_options</code>.</p> <p><code>mail_to</code> has several methods for customizing the email itself by passing special keys to <code>html_options</code>.</p> <h4 id=\"method-i-mail_to-label-Options\">Options</h4> <ul>\n<li> <p><code>:subject</code> - Preset the subject line of the email.</p> </li>\n<li> <p><code>:body</code> - Preset the body of the email.</p> </li>\n<li> <p><code>:cc</code> - Carbon Copy additional recipients on the email.</p> </li>\n<li> <p><code>:bcc</code> - Blind Carbon Copy additional recipients on the email.</p> </li>\n</ul> <h4 id=\"method-i-mail_to-label-Obfuscation\">Obfuscation</h4> <p>Prior to Rails 4.0, <code>mail_to</code> provided options for encoding the address in order to hinder email harvesters. To take advantage of these options, install the <code>actionview-encoded_mail_to</code> gem.</p> <h4 id=\"method-i-mail_to-label-Examples\">Examples</h4> <pre class=\"ruby\">mail_to \"me@domain.com\"\n# =&gt; &lt;a href=\"mailto:me@domain.com\"&gt;me@domain.com&lt;/a&gt;\n\nmail_to \"me@domain.com\", \"My email\"\n# =&gt; &lt;a href=\"mailto:me@domain.com\"&gt;My email&lt;/a&gt;\n\nmail_to \"me@domain.com\", \"My email\", cc: \"ccaddress@domain.com\",\n         subject: \"This is an example email\"\n# =&gt; &lt;a href=\"mailto:me@domain.com?cc=ccaddress@domain.com&amp;subject=This%20is%20an%20example%20email\"&gt;My email&lt;/a&gt;\n</pre> <p>You can use a block as well if your link target is hard to fit into the name parameter. <a href=\"../../erb\">ERB</a> example:</p> <pre>&lt;%= mail_to \"me@domain.com\" do %&gt;\n  &lt;strong&gt;Email me:&lt;/strong&gt; &lt;span&gt;me@domain.com&lt;/span&gt;\n&lt;% end %&gt;\n# =&gt; &lt;a href=\"mailto:me@domain.com\"&gt;\n       &lt;strong&gt;Email me:&lt;/strong&gt; &lt;span&gt;me@domain.com&lt;/span&gt;\n     &lt;/a&gt;</pre> <div class=\"method-source-code\" id=\"mail_to-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/helpers/url_helper.rb, line 456\ndef mail_to(email_address, name = nil, html_options = {}, &amp;block)\n  html_options, name = name, nil if block_given?\n  html_options = (html_options || {}).stringify_keys\n\n  extras = %w{ cc bcc body subject }.map! { |item|\n    option = html_options.delete(item) || next\n    \"#{item}=#{Rack::Utils.escape_path(option)}\"\n  }.compact\n  extras = extras.empty? ? '' : '?' + extras.join('&amp;')\n\n  html_options[\"href\"] = \"mailto:#{email_address}#{extras}\"\n\n  content_tag(:a, name || email_address, html_options, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/layouts":"<h1 id=\"module-ActionView::Layouts\" class=\"module\"> module ActionView::Layouts </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"rendering\">ActionView::Rendering</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"layouts\">Layouts</a> reverse the common pattern of including shared headers and footers in many templates to isolate changes in repeated setups. The inclusion pattern has pages that look like this:</p> <pre>&lt;%= render \"shared/header\" %&gt;\nHello World\n&lt;%= render \"shared/footer\" %&gt;</pre> <p>This approach is a decent way of keeping common structures isolated from the changing content, but it's verbose and if you ever want to change the structure of these two includes, you'll have to change all the templates.</p> <p>With layouts, you can flip it around and have the common structure know where to insert changing content. This means that the header and footer are only mentioned in one place, like this:</p> <pre>// The header part of this layout\n&lt;%= yield %&gt;\n// The footer part of this layout</pre> <p>And then you have content pages that look like this:</p> <pre class=\"ruby\">hello world\n</pre> <p>At rendering time, the content page is computed and then inserted in the layout, like this:</p> <pre>// The header part of this layout\nhello world\n// The footer part of this layout</pre> <h2 id=\"module-ActionView::Layouts-label-Accessing+shared+variables\">Accessing shared variables</h2> <p><a href=\"layouts\">Layouts</a> have access to variables specified in the content pages and vice versa. This allows you to have layouts with references that won't materialize before rendering time:</p> <pre>&lt;h1&gt;&lt;%= @page_title %&gt;&lt;/h1&gt;\n&lt;%= yield %&gt;</pre> <p>…and content pages that fulfill these references <em>at</em> rendering time:</p> <pre>&lt;% @page_title = \"Welcome\" %&gt;\nOff-world colonies offers you a chance to start a new life</pre> <p>The result after rendering is:</p> <pre>&lt;h1&gt;Welcome&lt;/h1&gt;\nOff-world colonies offers you a chance to start a new life</pre> <h2 id=\"module-ActionView::Layouts-label-Layout+assignment\">Layout assignment</h2> <p>You can either specify a layout declaratively (using the layout class method) or give it the same name as your controller, and place it in <code>app/views/layouts</code>. If a subclass does not have a layout specified, it inherits its layout using normal Ruby inheritance.</p> <p>For instance, if you have PostsController and a template named <code>app/views/layouts/posts.html.erb</code>, that template will be used for all actions in PostsController and controllers inheriting from PostsController.</p> <p>If you use a module, for instance Weblog::PostsController, you will need a template named <code>app/views/layouts/weblog/posts.html.erb</code>.</p> <p>Since all your controllers inherit from ApplicationController, they will use <code>app/views/layouts/application.html.erb</code> if no other layout is specified or provided.</p> <h2 id=\"module-ActionView::Layouts-label-Inheritance+Examples\">Inheritance Examples</h2> <pre>class BankController &lt; ActionController::Base\n  # bank.html.erb exists\n\nclass ExchangeController &lt; BankController\n  # exchange.html.erb exists\n\nclass CurrencyController &lt; BankController\n\nclass InformationController &lt; BankController\n  layout \"information\"\n\nclass TellerController &lt; InformationController\n  # teller.html.erb exists\n\nclass EmployeeController &lt; InformationController\n  # employee.html.erb exists\n  layout nil\n\nclass VaultController &lt; BankController\n  layout :access_level_layout\n\nclass TillController &lt; BankController\n  layout false</pre> <p>In these examples, we have three implicit lookup scenarios:</p> <ul>\n<li> <p>The BankController uses the “bank” layout.</p> </li>\n<li> <p>The ExchangeController uses the “exchange” layout.</p> </li>\n<li> <p>The CurrencyController inherits the layout from BankController.</p> </li>\n</ul> <p>However, when a layout is explicitly set, the explicitly set layout wins:</p> <ul>\n<li> <p>The InformationController uses the “information” layout, explicitly set.</p> </li>\n<li> <p>The TellerController also uses the “information” layout, because the parent explicitly set it.</p> </li>\n<li> <p>The EmployeeController uses the “employee” layout, because it set the layout to nil, resetting the parent configuration.</p> </li>\n<li> <p>The VaultController chooses a layout dynamically by calling the <code>access_level_layout</code> method.</p> </li>\n<li> <p>The TillController does not use a layout at all.</p> </li>\n</ul> <h2 id=\"module-ActionView::Layouts-label-Types+of+layouts\">Types of layouts</h2> <p><a href=\"layouts\">Layouts</a> are basically just regular templates, but the name of this template needs not be specified statically. Sometimes you want to alternate layouts depending on runtime information, such as whether someone is logged in or not. This can be done either by specifying a method reference as a symbol or using an inline method (as a proc).</p> <p>The method reference is the preferred approach to variable layouts and is used like this:</p> <pre class=\"ruby\">class WeblogController &lt; ActionController::Base\n  layout :writers_and_readers\n\n  def index\n    # fetching posts\n  end\n\n  private\n    def writers_and_readers\n      logged_in? ? \"writer_layout\" : \"reader_layout\"\n    end\nend\n</pre> <p>Now when a new request for the index action is processed, the layout will vary depending on whether the person accessing is logged in or not.</p> <p>If you want to use an inline method, such as a proc, do something like this:</p> <pre class=\"ruby\">class WeblogController &lt; ActionController::Base\n  layout proc { |controller| controller.logged_in? ? \"writer_layout\" : \"reader_layout\" }\nend\n</pre> <p>If an argument isn't given to the proc, it's evaluated in the context of the current controller anyway.</p> <pre class=\"ruby\">class WeblogController &lt; ActionController::Base\n  layout proc { logged_in? ? \"writer_layout\" : \"reader_layout\" }\nend\n</pre> <p>Of course, the most common way of specifying a layout is still just as a plain template name:</p> <pre class=\"ruby\">class WeblogController &lt; ActionController::Base\n  layout \"weblog_standard\"\nend\n</pre> <p>The template will be looked always in <code>app/views/layouts/</code> folder. But you can point <code>layouts</code> folder direct also. <code>layout \"layouts/demo\"</code> is the same as <code>layout\n\"demo\"</code>.</p> <p>Setting the layout to nil forces it to be looked up in the filesystem and fallbacks to the parent behavior if none exists. Setting it to nil is useful to re-enable template lookup overriding a previous configuration set in the parent:</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  layout \"application\"\nend\n\nclass PostsController &lt; ApplicationController\n  # Will use \"application\" layout\nend\n\nclass CommentsController &lt; ApplicationController\n  # Will search for \"comments\" layout and fallback \"application\" layout\n  layout nil\nend\n</pre> <h2 id=\"module-ActionView::Layouts-label-Conditional+layouts\">Conditional layouts</h2> <p>If you have a layout that by default is applied to all the actions of a controller, you still have the option of rendering a given action or set of actions without a layout, or restricting a layout to only a single action or a set of actions. The <code>:only</code> and <code>:except</code> options can be passed to the layout call. For example:</p> <pre class=\"ruby\">class WeblogController &lt; ActionController::Base\n  layout \"weblog_standard\", except: :rss\n\n  # ...\n\nend\n</pre> <p>This will assign “weblog_standard” as the WeblogController's layout for all actions except for the <code>rss</code> action, which will be rendered directly, without wrapping a layout around the rendered view.</p> <p>Both the <code>:only</code> and <code>:except</code> condition can accept an arbitrary number of method references, so #<code>except: [ :rss,\n:text_only ]</code> is valid, as is <code>except: :rss</code>.</p> <h2 id=\"module-ActionView::Layouts-label-Using+a+different+layout+in+the+action+render+call\">Using a different layout in the action render call</h2> <p>If most of your actions use the same layout, it makes perfect sense to define a controller-wide layout as described above. Sometimes you'll have exceptions where one action wants to use a different layout than the rest of the controller. You can do this by passing a <code>:layout</code> option to the <code>render</code> call. For example:</p> <pre class=\"ruby\">class WeblogController &lt; ActionController::Base\n  layout \"weblog_standard\"\n\n  def help\n    render action: \"help\", layout: \"help\"\n  end\nend\n</pre> <p>This will override the controller-wide “weblog_standard” layout, and will render the help action with the “help” layout instead.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-action_has_layout-3F\"> <span class=\"method-name\">action_has_layout?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Controls whether an action should be rendered using a layout. If you want to disable any <code>layout</code> settings for the current action so that it is rendered without a layout then either override this method in your controller to return false for that action or set the <code>action_has_layout</code> attribute to false before rendering.</p> <div class=\"method-source-code\" id=\"action_has_layout-3F-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/layouts.rb, line 364\ndef action_has_layout?\n  @_action_has_layout\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/layouts/classmethods":"<h1 id=\"module-ActionView::Layouts::ClassMethods\" class=\"module\"> module ActionView::Layouts::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-layout\"> <span class=\"method-name\">layout</span><span class=\"method-args\">(layout, conditions = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specify the layout to use for this class.</p> <p>If the specified layout is a:</p> <dl class=\"rdoc-list note-list\">\n<dt>\n<a href=\"../../string\">String</a> </dt>\n<dd> <p>the <a href=\"../../string\">String</a> is the template name</p> </dd>\n<dt>\n<a href=\"../../symbol\">Symbol</a> </dt>\n<dd> <p>call the method specified by the symbol, which will return the template name</p> </dd>\n<dt>false </dt>\n<dd> <p>There is no layout</p> </dd>\n<dt>true </dt>\n<dd> <p>raise an ArgumentError</p> </dd>\n<dt>nil </dt>\n<dd> <p>Force default layout behavior with inheritance</p> </dd>\n</dl> <h4 id=\"method-i-layout-label-Parameters\">Parameters</h4> <ul><li> <p><code>layout</code> - The layout to use.</p> </li></ul> <h4 id=\"method-i-layout-label-Options+-28conditions-29\">Options (conditions)</h4> <ul>\n<li> <p>:only - A list of actions to apply this layout to.</p> </li>\n<li> <p>:except - Apply this layout to all actions but this one.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"layout-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/layouts.rb, line 262\ndef layout(layout, conditions = {})\n  include LayoutConditions unless conditions.empty?\n\n  conditions.each {|k, v| conditions[k] = Array(v).map {|a| a.to_s} }\n  self._layout_conditions = conditions\n\n  self._layout = layout\n  _write_layout_method\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/modelnaming":"<h1 id=\"module-ActionView::ModelNaming\" class=\"module\"> module ActionView::ModelNaming </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-convert_to_model\"> <span class=\"method-name\">convert_to_model</span><span class=\"method-args\">(object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts the given object to an <a href=\"../activemodel\">ActiveModel</a> compliant one.</p> <div class=\"method-source-code\" id=\"convert_to_model-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/model_naming.rb, line 4\ndef convert_to_model(object)\n  object.respond_to?(:to_model) ? object.to_model : object\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-model_name_from_record_or_class\"> <span class=\"method-name\">model_name_from_record_or_class</span><span class=\"method-args\">(record_or_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"model_name_from_record_or_class-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/model_naming.rb, line 8\ndef model_name_from_record_or_class(record_or_class)\n  convert_to_model(record_or_class).model_name\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/partialiteration":"<h1 id=\"class-ActionView::PartialIteration\" class=\"class\"> class ActionView::PartialIteration </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-index\"> <span class=\"method-name\">index</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>The current iteration of the partial.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-size\"> <span class=\"method-name\">size</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>The number of iterations that will be done by the partial.</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(size)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/renderer/partial_renderer.rb, line 11\ndef initialize(size)\n  @size  = size\n  @index = 0\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-first-3F\"> <span class=\"method-name\">first?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Check if this is the first iteration of the partial.</p> <div class=\"method-source-code\" id=\"first-3F-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/renderer/partial_renderer.rb, line 17\ndef first?\n  index == 0\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last-3F\"> <span class=\"method-name\">last?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Check if this is the last iteration of the partial.</p> <div class=\"method-source-code\" id=\"last-3F-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/renderer/partial_renderer.rb, line 22\ndef last?\n  index == size - 1\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/partialrenderer":"<h1 id=\"class-ActionView::PartialRenderer\" class=\"class\"> class ActionView::PartialRenderer </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">ActionView::AbstractRenderer</dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActionView::PartialRenderer-label-Action+View+Partials\">Action View Partials</h1> <p>There's also a convenience method for rendering sub templates within the current controller that depends on a single object (we call this kind of sub templates for partials). It relies on the fact that partials should follow the naming convention of being prefixed with an underscore – as to separate them from regular templates that could be rendered on their own.</p> <p>In a template for Advertiser#account:</p> <pre>&lt;%= render partial: \"account\" %&gt;</pre> <p>This would render “advertiser/_account.html.erb”.</p> <p>In another template for Advertiser#buy, we could have:</p> <pre>&lt;%= render partial: \"account\", locals: { account: @buyer } %&gt;\n\n&lt;% @advertisements.each do |ad| %&gt;\n  &lt;%= render partial: \"ad\", locals: { ad: ad } %&gt;\n&lt;% end %&gt;</pre> <p>This would first render “advertiser/_account.html.erb” with @buyer passed in as the local variable <code>account</code>, then render “advertiser/_ad.html.erb” and pass the local variable <code>ad</code> to the template for display.</p> <h2 id=\"class-ActionView::PartialRenderer-label-The+-3Aas+and+-3Aobject+options\">The :as and :object options</h2> <p>By default <code>ActionView::PartialRenderer</code> doesn't have any local variables. The <code>:object</code> option can be used to pass an object to the partial. For instance:</p> <pre>&lt;%= render partial: \"account\", object: @buyer %&gt;</pre> <p>would provide the <code>@buyer</code> object to the partial, available under the local variable <code>account</code> and is equivalent to:</p> <pre>&lt;%= render partial: \"account\", locals: { account: @buyer } %&gt;</pre> <p>With the <code>:as</code> option we can specify a different name for said local variable. For example, if we wanted it to be <code>user</code> instead of <code>account</code> we'd do:</p> <pre>&lt;%= render partial: \"account\", object: @buyer, as: 'user' %&gt;</pre> <p>This is equivalent to</p> <pre>&lt;%= render partial: \"account\", locals: { user: @buyer } %&gt;</pre> <h2 id=\"class-ActionView::PartialRenderer-label-Rendering+a+collection+of+partials\">\n<a href=\"rendering\">Rendering</a> a collection of partials</h2> <p>The example of partial use describes a familiar pattern where a template needs to iterate over an array and render a sub template for each of the elements. This pattern has been implemented as a single method that accepts an array and renders a partial by the same name as the elements contained within. So the three-lined example in “Using partials” can be rewritten with a single line:</p> <pre>&lt;%= render partial: \"ad\", collection: @advertisements %&gt;</pre> <p>This will render “advertiser/_ad.html.erb” and pass the local variable <code>ad</code> to the template for display. An iteration object will automatically be made available to the template with a name of the form <code>partial_name_iteration</code>. The iteration object has knowledge about which index the current object has in the collection and the total size of the collection. The iteration object also has two convenience methods, <code>first?</code> and <code>last?</code>. In the case of the example above, the template would be fed <code>ad_iteration</code>. For backwards compatibility the <code>partial_name_counter</code> is still present and is mapped to the iteration's <code>index</code> method.</p> <p>The <code>:as</code> option may be used when rendering partials.</p> <p>You can specify a partial to be rendered between elements via the <code>:spacer_template</code> option. The following example will render <code>advertiser/_ad_divider.html.erb</code> between each ad partial:</p> <pre>&lt;%= render partial: \"ad\", collection: @advertisements, spacer_template: \"ad_divider\" %&gt;</pre> <p>If the given <code>:collection</code> is nil or empty, <code>render</code> will return nil. This will allow you to specify a text which will displayed instead by using this form:</p> <pre>&lt;%= render(partial: \"ad\", collection: @advertisements) || \"There's no ad to be displayed\" %&gt;</pre> <p>NOTE: Due to backwards compatibility concerns, the collection can't be one of hashes. Normally you'd also just keep domain objects, like Active Records, in there.</p> <h2 id=\"class-ActionView::PartialRenderer-label-Rendering+shared+partials\">\n<a href=\"rendering\">Rendering</a> shared partials</h2> <p>Two controllers can share a set of partials and render them like this:</p> <pre>&lt;%= render partial: \"advertisement/ad\", locals: { ad: @advertisement } %&gt;</pre> <p>This will render the partial “advertisement/_ad.html.erb” regardless of which controller this is being called from.</p> <h2 id=\"class-ActionView::PartialRenderer-label-Rendering+objects+that+respond+to+-60to_partial_path-60\">\n<a href=\"rendering\">Rendering</a> objects that respond to `to_partial_path`</h2> <p>Instead of explicitly naming the location of a partial, you can also let <a href=\"partialrenderer\">PartialRenderer</a> do the work and pick the proper path by checking `to_partial_path` method.</p> <pre># @account.to_partial_path returns 'accounts/account', so it can be used to replace:\n# &lt;%= render partial: \"accounts/account\", locals: { account: @account} %&gt;\n&lt;%= render partial: @account %&gt;\n\n# @posts is an array of Post instances, so every post record returns 'posts/post' on `to_partial_path`,\n# that's why we can replace:\n# &lt;%= render partial: \"posts/post\", collection: @posts %&gt;\n&lt;%= render partial: @posts %&gt;</pre> <h2 id=\"class-ActionView::PartialRenderer-label-Rendering+the+default+case\">\n<a href=\"rendering\">Rendering</a> the default case</h2> <p>If you're not going to be using any of the options like collections or layouts, you can also use the short-hand defaults of render to render partials. Examples:</p> <pre># Instead of &lt;%= render partial: \"account\" %&gt;\n&lt;%= render \"account\" %&gt;\n\n# Instead of &lt;%= render partial: \"account\", locals: { account: @buyer } %&gt;\n&lt;%= render \"account\", account: @buyer %&gt;\n\n# @account.to_partial_path returns 'accounts/account', so it can be used to replace:\n# &lt;%= render partial: \"accounts/account\", locals: { account: @account} %&gt;\n&lt;%= render @account %&gt;\n\n# @posts is an array of Post instances, so every post record returns 'posts/post' on `to_partial_path`,\n# that's why we can replace:\n# &lt;%= render partial: \"posts/post\", collection: @posts %&gt;\n&lt;%= render @posts %&gt;</pre> <h2 id=\"class-ActionView::PartialRenderer-label-Rendering+partials+with+layouts\">\n<a href=\"rendering\">Rendering</a> partials with layouts</h2> <p>Partials can have their own layouts applied to them. These layouts are different than the ones that are specified globally for the entire action, but they work in a similar fashion. Imagine a list with two types of users:</p> <pre>&lt;%# app/views/users/index.html.erb &amp;&gt;\nHere's the administrator:\n&lt;%= render partial: \"user\", layout: \"administrator\", locals: { user: administrator } %&gt;\n\nHere's the editor:\n&lt;%= render partial: \"user\", layout: \"editor\", locals: { user: editor } %&gt;\n\n&lt;%# app/views/users/_user.html.erb &amp;&gt;\nName: &lt;%= user.name %&gt;\n\n&lt;%# app/views/users/_administrator.html.erb &amp;&gt;\n&lt;div id=\"administrator\"&gt;\n  Budget: $&lt;%= user.budget %&gt;\n  &lt;%= yield %&gt;\n&lt;/div&gt;\n\n&lt;%# app/views/users/_editor.html.erb &amp;&gt;\n&lt;div id=\"editor\"&gt;\n  Deadline: &lt;%= user.deadline %&gt;\n  &lt;%= yield %&gt;\n&lt;/div&gt;</pre> <p>…this will return:</p> <pre>Here's the administrator:\n&lt;div id=\"administrator\"&gt;\n  Budget: $&lt;%= user.budget %&gt;\n  Name: &lt;%= user.name %&gt;\n&lt;/div&gt;\n\nHere's the editor:\n&lt;div id=\"editor\"&gt;\n  Deadline: &lt;%= user.deadline %&gt;\n  Name: &lt;%= user.name %&gt;\n&lt;/div&gt;</pre> <p>If a collection is given, the layout will be rendered once for each item in the collection. For example, these two snippets have the same output:</p> <pre>&lt;%# app/views/users/_user.html.erb %&gt;\nName: &lt;%= user.name %&gt;\n\n&lt;%# app/views/users/index.html.erb %&gt;\n&lt;%# This does not use layouts %&gt;\n&lt;ul&gt;\n  &lt;% users.each do |user| -%&gt;\n    &lt;li&gt;\n      &lt;%= render partial: \"user\", locals: { user: user } %&gt;\n    &lt;/li&gt;\n  &lt;% end -%&gt;\n&lt;/ul&gt;\n\n&lt;%# app/views/users/_li_layout.html.erb %&gt;\n&lt;li&gt;\n  &lt;%= yield %&gt;\n&lt;/li&gt;\n\n&lt;%# app/views/users/index.html.erb %&gt;\n&lt;ul&gt;\n  &lt;%= render partial: \"user\", layout: \"li_layout\", collection: users %&gt;\n&lt;/ul&gt;</pre> <p>Given two users whose names are Alice and Bob, these snippets return:</p> <pre>&lt;ul&gt;\n  &lt;li&gt;\n    Name: Alice\n  &lt;/li&gt;\n  &lt;li&gt;\n    Name: Bob\n  &lt;/li&gt;\n&lt;/ul&gt;</pre> <p>The current object being rendered, as well as the object_counter, will be available as local variables inside the layout template under the same names as available in the partial.</p> <p>You can also apply a layout to a block within any template:</p> <pre>&lt;%# app/views/users/_chief.html.erb &amp;&gt;\n&lt;%= render(layout: \"administrator\", locals: { user: chief }) do %&gt;\n  Title: &lt;%= chief.title %&gt;\n&lt;% end %&gt;</pre> <p>…this will return:</p> <pre>&lt;div id=\"administrator\"&gt;\n  Budget: $&lt;%= user.budget %&gt;\n  Title: &lt;%= chief.name %&gt;\n&lt;/div&gt;</pre> <p>As you can see, the <code>:locals</code> hash is shared between both the partial and its layout.</p> <p>If you pass arguments to “yield” then this will be passed to the block. One way to use this is to pass an array to layout and treat it as an enumerable.</p> <pre>&lt;%# app/views/users/_user.html.erb &amp;&gt;\n&lt;div class=\"user\"&gt;\n  Budget: $&lt;%= user.budget %&gt;\n  &lt;%= yield user %&gt;\n&lt;/div&gt;\n\n&lt;%# app/views/users/index.html.erb &amp;&gt;\n&lt;%= render layout: @users do |user| %&gt;\n  Title: &lt;%= user.title %&gt;\n&lt;% end %&gt;</pre> <p>This will render the layout for each user and yield to the block, passing the user, each time.</p> <p>You can also yield multiple times in one layout and use block arguments to differentiate the sections.</p> <pre>&lt;%# app/views/users/_user.html.erb &amp;&gt;\n&lt;div class=\"user\"&gt;\n  &lt;%= yield user, :header %&gt;\n  Budget: $&lt;%= user.budget %&gt;\n  &lt;%= yield user, :footer %&gt;\n&lt;/div&gt;\n\n&lt;%# app/views/users/index.html.erb &amp;&gt;\n&lt;%= render layout: @users do |user, section| %&gt;\n  &lt;%- case section when :header -%&gt;\n    Title: &lt;%= user.title %&gt;\n  &lt;%- when :footer -%&gt;\n    Deadline: &lt;%= user.deadline %&gt;\n  &lt;%- end -%&gt;\n&lt;% end %&gt;</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"IDENTIFIER_ERROR_MESSAGE\">IDENTIFIER_ERROR_MESSAGE </dt>\n\n<dt id=\"OPTION_AS_ERROR_MESSAGE\">OPTION_AS_ERROR_MESSAGE </dt>\n\n<dt id=\"PREFIXED_PARTIAL_NAMES\">PREFIXED_PARTIAL_NAMES </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(*)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/renderer/partial_renderer.rb, line 287\ndef initialize(*)\n  super\n  @context_prefix = @lookup_context.prefixes.first\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render\"> <span class=\"method-name\">render</span><span class=\"method-args\">(context, options, block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"render-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/renderer/partial_renderer.rb, line 292\ndef render(context, options, block)\n  setup(context, options, block)\n  identifier = (@template = find_partial) ? @template.identifier : @path\n\n  @lookup_context.rendered_format ||= begin\n    if @template &amp;&amp; @template.formats.present?\n      @template.formats.first\n    else\n      formats.first\n    end\n  end\n\n  if @collection\n    instrument(:collection, :identifier =&gt; identifier || \"collection\", :count =&gt; @collection.size) do\n      render_collection\n    end\n  else\n    instrument(:partial, :identifier =&gt; identifier) do\n      render_partial\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/recordidentifier":"<h1 id=\"module-ActionView::RecordIdentifier\" class=\"module\"> module ActionView::RecordIdentifier </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"modelnaming\">ActionView::ModelNaming</a></dd>\n</dl> <section class=\"description\"> <p>The record identifier encapsulates a number of naming conventions for dealing with records, like Active Records or pretty much any other model type that has an id. These patterns are then used to try elevate the view actions to a higher logical level.</p> <pre># routes\nresources :posts\n\n# view\n&lt;%= div_for(post) do %&gt;    &lt;div id=\"post_45\" class=\"post\"&gt;\n  &lt;%= post.body %&gt;           What a wonderful world!\n&lt;% end %&gt;                  &lt;/div&gt;\n\n# controller\ndef update\n  post = Post.find(params[:id])\n  post.update(params[:post])\n\n  redirect_to(post) # Calls polymorphic_url(post) which in turn calls post_url(post)\nend</pre> <p>As the example above shows, you can stop caring to a large extent what the actual id of the post is. You just know that one is being assigned and that the subsequent calls in redirect_to expect that same naming convention and allows you to write less code if you follow it.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"JOIN\">JOIN </dt>\n\n<dt id=\"NEW\">NEW </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dom_class\"> <span class=\"method-name\">dom_class</span><span class=\"method-args\">(record_or_class, prefix = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The DOM class convention is to use the singular form of an object or class.</p> <pre class=\"ruby\">dom_class(post)   # =&gt; \"post\"\ndom_class(Person) # =&gt; \"person\"\n</pre> <p>If you need to address multiple instances of the same class in the same view, you can prefix the <a href=\"recordidentifier#method-i-dom_class\">#dom_class</a>:</p> <pre class=\"ruby\">dom_class(post, :edit)   # =&gt; \"edit_post\"\ndom_class(Person, :edit) # =&gt; \"edit_person\"\n</pre> <div class=\"method-source-code\" id=\"dom_class-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/record_identifier.rb, line 46\ndef dom_class(record_or_class, prefix = nil)\n  singular = model_name_from_record_or_class(record_or_class).param_key\n  prefix ? \"#{prefix}#{JOIN}#{singular}\" : singular\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dom_id\"> <span class=\"method-name\">dom_id</span><span class=\"method-args\">(record, prefix = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The DOM id convention is to use the singular form of an object or class with the id following an underscore. If no id is found, prefix with “new_” instead.</p> <pre class=\"ruby\">dom_id(Post.find(45))       # =&gt; \"post_45\"\ndom_id(Post.new)            # =&gt; \"new_post\"\n</pre> <p>If you need to address multiple instances of the same class in the same view, you can prefix the <a href=\"recordidentifier#method-i-dom_id\">#dom_id</a>:</p> <pre class=\"ruby\">dom_id(Post.find(45), :edit) # =&gt; \"edit_post_45\"\ndom_id(Post.new, :custom)    # =&gt; \"custom_post\"\n</pre> <div class=\"method-source-code\" id=\"dom_id-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/record_identifier.rb, line 61\ndef dom_id(record, prefix = nil)\n  if record_id = record_key_for_dom_id(record)\n    \"#{dom_class(record, prefix)}#{JOIN}#{record_id}\"\n  else\n    dom_class(record, prefix || NEW)\n  end\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-record_key_for_dom_id\"> <span class=\"method-name\">record_key_for_dom_id</span><span class=\"method-args\">(record)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string representation of the key attribute(s) that is suitable for use in an HTML DOM id. This can be overwritten to customize the default generated string representation if desired. If you need to read back a key from a <a href=\"recordidentifier#method-i-dom_id\">#dom_id</a> in order to query for the underlying database record, you should write a helper like 'person_record_from_dom_id' that will extract the key either based on the default implementation (which just joins all key attributes with '_') or on your own overwritten version of the method. By default, this implementation passes the key string through a method that replaces all characters that are invalid inside DOM ids, with valid ones. You need to make sure yourself that your dom ids are valid, in case you overwrite this method.</p> <div class=\"method-source-code\" id=\"record_key_for_dom_id-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/record_identifier.rb, line 79\ndef record_key_for_dom_id(record)\n  key = convert_to_model(record).to_key\n  key ? key.join('_') : key\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/renderer":"<h1 id=\"class-ActionView::Renderer\" class=\"class\"> class ActionView::Renderer </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>This is the main entry point for rendering. It basically delegates to other objects like TemplateRenderer and <a href=\"partialrenderer\">PartialRenderer</a> which actually renders the template.</p> <p>The <a href=\"renderer\">Renderer</a> will parse the options from the <code>render</code> or <code>render_body</code> method and render a partial or a template based on the options. The <code>TemplateRenderer</code> and <code>PartialRenderer</code> objects are wrappers which do all the setup and logic necessary to render a view and a new object is created each time <code>render</code> is called.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-lookup_context\"> <span class=\"method-name\">lookup_context</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(lookup_context)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/renderer/renderer.rb, line 14\ndef initialize(lookup_context)\n  @lookup_context = lookup_context\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render\"> <span class=\"method-name\">render</span><span class=\"method-args\">(context, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Main render entry point shared by AV and AC.</p> <div class=\"method-source-code\" id=\"render-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/renderer/renderer.rb, line 19\ndef render(context, options)\n  if options.key?(:partial)\n    render_partial(context, options)\n  else\n    render_template(context, options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render_body\"> <span class=\"method-name\">render_body</span><span class=\"method-args\">(context, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Render but returns a valid <a href=\"../rack\">Rack</a> body. If fibers are defined, we return a streaming body that renders the template piece by piece.</p> <p>Note that partials are not supported to be rendered with streaming, so in such cases, we just wrap them in an array.</p> <div class=\"method-source-code\" id=\"render_body-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/renderer/renderer.rb, line 32\ndef render_body(context, options)\n  if options.key?(:partial)\n    [render_partial(context, options)]\n  else\n    StreamingTemplateRenderer.new(@lookup_context).render(context, options)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/rendering":"<h1 id=\"module-ActionView::Rendering\" class=\"module\"> module ActionView::Rendering </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"viewpaths\">ActionView::ViewPaths</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render_to_body\"> <span class=\"method-name\">render_to_body</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"render_to_body-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/rendering.rb, line 81\ndef render_to_body(options = {})\n  _process_options(options)\n  _render_template(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rendered_format\"> <span class=\"method-name\">rendered_format</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"rendered_format-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/rendering.rb, line 86\ndef rendered_format\n  Mime[lookup_context.rendered_format]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-view_context\"> <span class=\"method-name\">view_context</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>An instance of a view class. The default view class is <a href=\"base\">ActionView::Base</a></p> <p>The view class must have the following methods: View.new[lookup_context, assigns, controller]</p> <pre>Create a new ActionView instance for a controller and we can also pass the arguments.</pre> <p>View#render(option)</p> <pre class=\"ruby\">Returns String with the rendered template\n</pre> <p>Override this method in a module to change the default behavior.</p> <div class=\"method-source-code\" id=\"view_context-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/rendering.rb, line 71\ndef view_context\n  view_context_class.new(view_renderer, view_assigns, self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-view_context_class\"> <span class=\"method-name\">view_context_class</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"view_context_class-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/rendering.rb, line 58\ndef view_context_class\n  @_view_context_class ||= self.class.view_context_class\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-view_renderer\"> <span class=\"method-name\">view_renderer</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an object that is able to render templates. :api: private</p> <div class=\"method-source-code\" id=\"view_renderer-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/rendering.rb, line 77\ndef view_renderer\n  @_view_renderer ||= ActionView::Renderer.new(lookup_context)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/routingurlfor":"<h1 id=\"module-ActionView::RoutingUrlFor\" class=\"module\"> module ActionView::RoutingUrlFor </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url_for\"> <span class=\"method-name\">url_for</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the URL for the set of <code>options</code> provided. This takes the same options as <code>url_for</code> in Action Controller (see the documentation for <code>ActionController::Base#url_for</code>). Note that by default <code>:only_path</code> is <code>true</code> so you'll get the relative “/controller/action” instead of the fully qualified URL like “<a href=\"http://example.com/controller/action\">example.com/controller/action</a>”.</p> <h4 id=\"method-i-url_for-label-Options\">Options</h4> <ul>\n<li> <p><code>:anchor</code> - Specifies the anchor name to be appended to the path.</p> </li>\n<li> <p><code>:only_path</code> - If true, returns the relative URL (omitting the protocol, host name, and port) (<code>true</code> by default unless <code>:host</code> is specified).</p> </li>\n<li> <p><code>:trailing_slash</code> - If true, adds a trailing slash, as in “/archive/2005/”. Note that this is currently not recommended since it breaks caching.</p> </li>\n<li> <p><code>:host</code> - Overrides the default (current) host if provided.</p> </li>\n<li> <p><code>:protocol</code> - Overrides the default (current) protocol if provided.</p> </li>\n<li> <p><code>:user</code> - Inline HTTP authentication (only plucked out if <code>:password</code> is also present).</p> </li>\n<li> <p><code>:password</code> - Inline HTTP authentication (only plucked out if <code>:user</code> is also present).</p> </li>\n</ul> <h4 id=\"method-i-url_for-label-Relying+on+named+routes\">Relying on named routes</h4> <p>Passing a record (like an Active Record) instead of a hash as the options parameter will trigger the named route for that record. The lookup will happen on the name of the class. So passing a Workshop object will attempt to use the <code>workshop_path</code> route. If you have a nested route, such as <code>admin_workshop_path</code> you'll have to call that explicitly (it's impossible for <code>url_for</code> to guess that route).</p> <h4 id=\"method-i-url_for-label-Implicit+Controller+Namespacing\">Implicit Controller Namespacing</h4> <p>Controllers passed in using the <code>:controller</code> option will retain their namespace unless it is an absolute one.</p> <h4 id=\"method-i-url_for-label-Examples\">Examples</h4> <pre>&lt;%= url_for(action: 'index') %&gt;\n# =&gt; /blog/\n\n&lt;%= url_for(action: 'find', controller: 'books') %&gt;\n# =&gt; /books/find\n\n&lt;%= url_for(action: 'login', controller: 'members', only_path: false, protocol: 'https') %&gt;\n# =&gt; https://www.example.com/members/login/\n\n&lt;%= url_for(action: 'play', anchor: 'player') %&gt;\n# =&gt; /messages/play/#player\n\n&lt;%= url_for(action: 'jump', anchor: 'tax&amp;ship') %&gt;\n# =&gt; /testing/jump/#tax&amp;ship\n\n&lt;%= url_for(Workshop.new) %&gt;\n# relies on Workshop answering a persisted? call (and in this case returning false)\n# =&gt; /workshops\n\n&lt;%= url_for(@workshop) %&gt;\n# calls @workshop.to_param which by default returns the id\n# =&gt; /workshops/5\n\n# to_param can be re-defined in a model to provide different URL names:\n# =&gt; /workshops/1-workshop-name\n\n&lt;%= url_for(\"http://www.example.com\") %&gt;\n# =&gt; http://www.example.com\n\n&lt;%= url_for(:back) %&gt;\n# if request.env[\"HTTP_REFERER\"] is set to \"http://www.example.com\"\n# =&gt; http://www.example.com\n\n&lt;%= url_for(:back) %&gt;\n# if request.env[\"HTTP_REFERER\"] is not set or is blank\n# =&gt; javascript:history.back()\n\n&lt;%= url_for(action: 'index', controller: 'users') %&gt;\n# Assuming an \"admin\" namespace\n# =&gt; /admin/users\n\n&lt;%= url_for(action: 'index', controller: '/users') %&gt;\n# Specify absolute path with beginning slash\n# =&gt; /users</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"url_for-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/routing_url_for.rb, line 78\ndef url_for(options = nil)\n  case options\n  when String\n    options\n  when nil\n    super(only_path: _generate_paths_by_default)\n  when Hash\n    options = options.symbolize_keys\n    unless options.key?(:only_path)\n      if options[:host].nil?\n        options[:only_path] = _generate_paths_by_default\n      else\n        options[:only_path] = false\n      end\n    end\n\n    super(options)\n  when :back\n    _back_url\n  when Array\n    if _generate_paths_by_default\n      polymorphic_path(options, options.extract_options!)\n    else\n      polymorphic_url(options, options.extract_options!)\n    end\n  else\n    method = _generate_paths_by_default ? :path : :url\n    builder = ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder.send(method)\n\n    case options\n    when Symbol\n      builder.handle_string_call(self, options)\n    when Class\n      builder.handle_class_call(self, options)\n    else\n      builder.handle_model_call(self, options)\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/template":"<h1 id=\"class-ActionView::Template\" class=\"class\"> class ActionView::Template </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActionView::Template-label-Action+View+Template\">Action View <a href=\"template\">Template</a>\n</h1> <h1 id=\"class-ActionView::Template-label-Action+View+Template+Handlers\">Action View <a href=\"template\">Template</a> <a href=\"template/handlers\">Handlers</a>\n</h1> <h1 id=\"class-ActionView::Template-label-Action+View+HTML+Template\">Action View HTML <a href=\"template\">Template</a>\n</h1> <h1 id=\"class-ActionView::Template-label-Action+View+Text+Template\">Action View Text <a href=\"template\">Template</a>\n</h1> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"Finalizer\">Finalizer </dt>\n<dd>\n<p>This finalizer is needed (and exactly with a proc inside another proc) otherwise templates leak in development.</p> </dd>\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-formats\"> <span class=\"method-name\">formats</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-handler\"> <span class=\"method-name\">handler</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-identifier\"> <span class=\"method-name\">identifier</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-locals\"> <span class=\"method-name\">locals</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-original_encoding\"> <span class=\"method-name\">original_encoding</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-source\"> <span class=\"method-name\">source</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-updated_at\"> <span class=\"method-name\">updated_at</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-variants\"> <span class=\"method-name\">variants</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-virtual_path\"> <span class=\"method-name\">virtual_path</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(source, identifier, handler, details)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/template.rb, line 114\ndef initialize(source, identifier, handler, details)\n  format = details[:format] || (handler.default_format if handler.respond_to?(:default_format))\n\n  @source            = source\n  @identifier        = identifier\n  @handler           = handler\n  @compiled          = false\n  @original_encoding = nil\n  @locals            = details[:locals] || []\n  @virtual_path      = details[:virtual_path]\n  @updated_at        = details[:updated_at] || Time.now\n  @formats           = Array(format).map { |f| f.respond_to?(:ref) ? f.ref : f  }\n  @variants          = [details[:variant]]\n  @compile_mutex     = Mutex.new\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encode-21\"> <span class=\"method-name\">encode!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method is responsible for properly setting the encoding of the source. Until this point, we assume that the source is BINARY data. If no additional information is supplied, we assume the encoding is the same as <code>Encoding.default_external</code>.</p> <p>The user can also specify the encoding via a comment on the first line of the template (# encoding: NAME-OF-ENCODING). This will work with any template engine, as we process out the encoding comment before passing the source on to the template engine, leaving a blank line in its stead.</p> <div class=\"method-source-code\" id=\"encode-21-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/template.rb, line 188\ndef encode!\n  return unless source.encoding == Encoding::BINARY\n\n  # Look for # encoding: *. If we find one, we'll encode the\n  # String in that encoding, otherwise, we'll use the\n  # default external encoding.\n  if source.sub!(/\\A#{ENCODING_FLAG}/, '')\n    encoding = magic_encoding = $1\n  else\n    encoding = Encoding.default_external\n  end\n\n  # Tag the source with the default external encoding\n  # or the encoding specified in the file\n  source.force_encoding(encoding)\n\n  # If the user didn't specify an encoding, and the handler\n  # handles encodings, we simply pass the String as is to\n  # the handler (with the default_external tag)\n  if !magic_encoding &amp;&amp; @handler.respond_to?(:handles_encoding?) &amp;&amp; @handler.handles_encoding?\n    source\n  # Otherwise, if the String is valid in the encoding,\n  # encode immediately to default_internal. This means\n  # that if a handler doesn't handle encodings, it will\n  # always get Strings in the default_internal\n  elsif source.valid_encoding?\n    source.encode!\n  # Otherwise, since the String is invalid in the encoding\n  # specified, raise an exception\n  else\n    raise WrongEncodingError.new(source, encoding)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/template.rb, line 174\ndef inspect\n  @inspect ||= defined?(Rails.root) ? identifier.sub(\"#{Rails.root}/\", '') : identifier\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-refresh\"> <span class=\"method-name\">refresh</span><span class=\"method-args\">(view)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Receives a view object and return a template similar to self by using @virtual_path.</p> <p>This method is useful if you have a template object but it does not contain its source anymore since it was already compiled. In such cases, all you need to do is to call refresh passing in the view object.</p> <p>Notice this method raises an error if the template to be refreshed does not have a virtual path set (true just for inline templates).</p> <div class=\"method-source-code\" id=\"refresh-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/template.rb, line 163\ndef refresh(view)\n  raise \"A template needs to have a virtual path in order to be refreshed\" unless @virtual_path\n  lookup  = view.lookup_context\n  pieces  = @virtual_path.split(\"/\")\n  name    = pieces.pop\n  partial = !!name.sub!(/^_/, \"\")\n  lookup.disable_cache do\n    lookup.find_template(name, [ pieces.join('/') ], partial, @locals)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-render\"> <span class=\"method-name\">render</span><span class=\"method-args\">(view, locals, buffer=nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Render a template. If the template was not compiled yet, it is done exactly before rendering.</p> <p>This method is instrumented as “!render_template.action_view”. Notice that we use a bang in this instrumentation because you don't want to consume this in production. This is only slow if it's being listened to.</p> <div class=\"method-source-code\" id=\"render-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/template.rb, line 142\ndef render(view, locals, buffer=nil, &amp;block)\n  instrument(\"!render_template\") do\n    compile!(view)\n    view.send(method_name, locals, buffer, &amp;block)\n  end\nrescue =&gt; e\n  handle_render_error(view, e)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_streaming-3F\"> <span class=\"method-name\">supports_streaming?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns if the underlying handler supports streaming. If so, a streaming buffer <strong>may</strong> be passed when it start rendering.</p> <div class=\"method-source-code\" id=\"supports_streaming-3F-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/template.rb, line 132\ndef supports_streaming?\n  handler.respond_to?(:supports_streaming?) &amp;&amp; handler.supports_streaming?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-type\"> <span class=\"method-name\">type</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"type-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/template.rb, line 151\ndef type\n  @type ||= Types[@formats.first] if @formats.first\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-instrument\"> <span class=\"method-name\">instrument</span><span class=\"method-args\">(action, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"instrument-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/template.rb, line 331\ndef instrument(action, &amp;block)\n  payload = { virtual_path: @virtual_path, identifier: @identifier }\n  ActiveSupport::Notifications.instrument(\"#{action}.action_view\", payload, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/viewpaths":"<h1 id=\"module-ActionView::ViewPaths\" class=\"module\"> module ActionView::ViewPaths </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-append_view_path\"> <span class=\"method-name\">append_view_path</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"append_view_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/view_paths.rb, line 67\ndef append_view_path(path)\n  lookup_context.view_paths.push(*path)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-details_for_lookup\"> <span class=\"method-name\">details_for_lookup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"details_for_lookup-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/view_paths.rb, line 63\ndef details_for_lookup\n  { }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-lookup_context\"> <span class=\"method-name\">lookup_context</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><span>LookupContext</span> is the object responsible to hold all information required to lookup templates, i.e. view paths and details. Check <span>ActionView::LookupContext</span> for more information.</p> <div class=\"method-source-code\" id=\"lookup_context-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/view_paths.rb, line 58\ndef lookup_context\n  @_lookup_context ||=\n    ActionView::LookupContext.new(self.class._view_paths, details_for_lookup, _prefixes)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prepend_view_path\"> <span class=\"method-name\">prepend_view_path</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"prepend_view_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/view_paths.rb, line 71\ndef prepend_view_path(path)\n  lookup_context.view_paths.unshift(*path)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","actionview/viewpaths/classmethods":"<h1 id=\"module-ActionView::ViewPaths::ClassMethods\" class=\"module\"> module ActionView::ViewPaths::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-append_view_path\"> <span class=\"method-name\">append_view_path</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append a path to the list of view paths for this controller.</p> <h4 id=\"method-i-append_view_path-label-Parameters\">Parameters</h4> <ul><li> <p><code>path</code> - If a <a href=\"../../string\">String</a> is provided, it gets converted into the default view path. You may also provide a custom view path (see ActionView::PathSet for more information)</p> </li></ul> <div class=\"method-source-code\" id=\"append_view_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/view_paths.rb, line 82\ndef append_view_path(path)\n  self._view_paths = view_paths + Array(path)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prepend_view_path\"> <span class=\"method-name\">prepend_view_path</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Prepend a path to the list of view paths for this controller.</p> <h4 id=\"method-i-prepend_view_path-label-Parameters\">Parameters</h4> <ul><li> <p><code>path</code> - If a <a href=\"../../string\">String</a> is provided, it gets converted into the default view path. You may also provide a custom view path (see ActionView::PathSet for more information)</p> </li></ul> <div class=\"method-source-code\" id=\"prepend_view_path-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/view_paths.rb, line 92\ndef prepend_view_path(path)\n  self._view_paths = ActionView::PathSet.new(Array(path) + view_paths)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-view_paths\"> <span class=\"method-name\">view_paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A list of all of the default view paths for this controller.</p> <div class=\"method-source-code\" id=\"view_paths-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/view_paths.rb, line 97\ndef view_paths\n  _view_paths\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-view_paths-3D\"> <span class=\"method-name\">view_paths=</span><span class=\"method-args\">(paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the view paths.</p> <h4 id=\"method-i-view_paths-3D-label-Parameters\">Parameters</h4> <ul><li> <p><code>paths</code> - If a PathSet is provided, use that; otherwise, process the parameter into a PathSet.</p> </li></ul> <div class=\"method-source-code\" id=\"view_paths-3D-source\"> <pre class=\"ruby\"># File actionview/lib/action_view/view_paths.rb, line 106\ndef view_paths=(paths)\n  self._view_paths = ActionView::PathSet.new(Array(paths))\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob":"<h1 id=\"module-ActiveJob\" class=\"module\"> module ActiveJob </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-gem_version\"> <span class=\"method-name\">gem_version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Active Job as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"gem_version-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/gem_version.rb, line 3\ndef self.gem_version\n  Gem::Version.new VERSION::STRING\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-version\"> <span class=\"method-name\">version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Active Job as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"version-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/version.rb, line 5\ndef self.version\n  gem_version\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/arguments":"<h1 id=\"module-ActiveJob::Arguments\" class=\"module\"> module ActiveJob::Arguments </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"GLOBALID_KEY\">GLOBALID_KEY </dt>\n\n<dt id=\"RESERVED_KEYS\">RESERVED_KEYS </dt>\n\n<dt id=\"SYMBOL_KEYS_KEY\">SYMBOL_KEYS_KEY </dt>\n\n<dt id=\"TYPE_WHITELIST\">TYPE_WHITELIST </dt>\n\n<dt id=\"WITH_INDIFFERENT_ACCESS_KEY\">WITH_INDIFFERENT_ACCESS_KEY </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deserialize\"> <span class=\"method-name\">deserialize</span><span class=\"method-args\">(arguments)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deserializes a set of arguments. Whitelisted types are returned as-is. Arrays/Hashes are deserialized element by element. All other types are deserialized using GlobalID.</p> <div class=\"method-source-code\" id=\"deserialize-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/arguments.rb, line 39\ndef deserialize(arguments)\n  arguments.map { |argument| deserialize_argument(argument) }\nrescue =&gt; e\n  raise DeserializationError.new(e)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serialize\"> <span class=\"method-name\">serialize</span><span class=\"method-args\">(arguments)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Serializes a set of arguments. Whitelisted types are returned as-is. Arrays/Hashes are serialized element by element. All other types are serialized using GlobalID.</p> <div class=\"method-source-code\" id=\"serialize-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/arguments.rb, line 32\ndef serialize(arguments)\n  arguments.map { |argument| serialize_argument(argument) }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/base":"<h1 id=\"class-ActiveJob::Base\" class=\"class\"> class ActiveJob::Base </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"core\">ActiveJob::Core</a>, <a class=\"include\" href=\"queueadapter\">ActiveJob::QueueAdapter</a>, <a class=\"include\" href=\"queuename\">ActiveJob::QueueName</a>, <a class=\"include\" href=\"enqueuing\">ActiveJob::Enqueuing</a>, <a class=\"include\" href=\"execution\">ActiveJob::Execution</a>, <a class=\"include\" href=\"callbacks\">ActiveJob::Callbacks</a>\n</dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActiveJob::Base-label-Active+Job\">Active Job</h1> <p>Active Job objects can be configured to work with different backend queuing frameworks. To specify a queue adapter to use:</p> <pre class=\"ruby\">ActiveJob::Base.queue_adapter = :inline\n</pre> <p>A list of supported adapters can be found in <a href=\"queueadapters\">QueueAdapters</a>.</p> <p>Active Job objects can be defined by creating a class that inherits from the <a href=\"base\">ActiveJob::Base</a> class. The only necessary method to implement is the “perform” method.</p> <p>To define an Active Job object:</p> <pre class=\"ruby\">class ProcessPhotoJob &lt; ActiveJob::Base\n  def perform(photo)\n    photo.watermark!('Rails')\n    photo.rotate!(90.degrees)\n    photo.resize_to_fit!(300, 300)\n    photo.upload!\n  end\nend\n</pre> <p>Records that are passed in are serialized/deserialized using Global ID. More information can be found in <a href=\"arguments\">Arguments</a>.</p> <p>To enqueue a job to be performed as soon the queueing system is free:</p> <pre class=\"ruby\">ProcessPhotoJob.perform_later(photo)\n</pre> <p>To enqueue a job to be processed at some point in the future:</p> <pre class=\"ruby\">ProcessPhotoJob.set(wait_until: Date.tomorrow.noon).perform_later(photo)\n</pre> <p>More information can be found in <a href=\"core/classmethods#method-i-set\">ActiveJob::Core::ClassMethods#set</a></p> <p>A job can also be processed immediately without sending to the queue:</p> <pre class=\"ruby\">ProcessPhotoJob.perform_now(photo)\n</pre> <h2 id=\"class-ActiveJob::Base-label-Exceptions\">Exceptions</h2> <ul>\n<li> <p><a href=\"deserializationerror\">DeserializationError</a> - Error class for deserialization errors.</p> </li>\n<li> <p><a href=\"serializationerror\">SerializationError</a> - Error class for serialization errors.</p> </li>\n</ul> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/callbacks":"<h1 id=\"module-ActiveJob::Callbacks\" class=\"module\"> module ActiveJob::Callbacks </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../activesupport/callbacks\">ActiveSupport::Callbacks</a></dd>\n</dl> <section class=\"description\"> <h1 id=\"module-ActiveJob::Callbacks-label-Active+Job+Callbacks\">Active Job <a href=\"callbacks\">Callbacks</a>\n</h1> <p>Active Job provides hooks during the lifecycle of a job. <a href=\"callbacks\">Callbacks</a> allow you to trigger logic during the lifecycle of a job. Available callbacks are:</p> <ul>\n<li> <p><code>before_enqueue</code></p> </li>\n<li> <p><code>around_enqueue</code></p> </li>\n<li> <p><code>after_enqueue</code></p> </li>\n<li> <p><code>before_perform</code></p> </li>\n<li> <p><code>around_perform</code></p> </li>\n<li> <p><code>after_perform</code></p> </li>\n</ul> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/callbacks/classmethods":"<h1 id=\"module-ActiveJob::Callbacks::ClassMethods\" class=\"module\"> module ActiveJob::Callbacks::ClassMethods </h1> <section class=\"description\"> <p>These methods will be included into any Active Job object, adding callbacks for <code>perform</code> and <code>enqueue</code> methods.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_enqueue\"> <span class=\"method-name\">after_enqueue</span><span class=\"method-args\">(*filters, &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a callback that will get called right after the job is enqueued.</p> <pre class=\"ruby\">class VideoProcessJob &lt; ActiveJob::Base\n  queue_as :default\n\n  after_enqueue do |job|\n    $statsd.increment \"enqueue-video-job.success\"\n  end\n\n  def perform(video_id)\n    Video.find(video_id).process\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"after_enqueue-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/callbacks.rb, line 120\ndef after_enqueue(*filters, &amp;blk)\n  set_callback(:enqueue, :after, *filters, &amp;blk)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_perform\"> <span class=\"method-name\">after_perform</span><span class=\"method-args\">(*filters, &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a callback that will get called right after the job's perform method has finished.</p> <pre class=\"ruby\">class VideoProcessJob &lt; ActiveJob::Base\n  queue_as :default\n\n  after_perform do |job|\n    UserMailer.notify_video_processed(job.arguments.first)\n  end\n\n  def perform(video_id)\n    Video.find(video_id).process\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"after_perform-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/callbacks.rb, line 62\ndef after_perform(*filters, &amp;blk)\n  set_callback(:perform, :after, *filters, &amp;blk)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-around_enqueue\"> <span class=\"method-name\">around_enqueue</span><span class=\"method-args\">(*filters, &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a callback that will get called before and after the job is enqueued.</p> <pre class=\"ruby\">class VideoProcessJob &lt; ActiveJob::Base\n  queue_as :default\n\n  around_enqueue do |job, block|\n    $statsd.time \"video-job.process\" do\n      block.call\n    end\n  end\n\n  def perform(video_id)\n    Video.find(video_id).process\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"around_enqueue-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/callbacks.rb, line 141\ndef around_enqueue(*filters, &amp;blk)\n  set_callback(:enqueue, :around, *filters, &amp;blk)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-around_perform\"> <span class=\"method-name\">around_perform</span><span class=\"method-args\">(*filters, &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a callback that will get called around the job's perform method.</p> <pre class=\"ruby\">class VideoProcessJob &lt; ActiveJob::Base\n  queue_as :default\n\n  around_perform do |job, block|\n    UserMailer.notify_video_started_processing(job.arguments.first)\n    block.call\n    UserMailer.notify_video_processed(job.arguments.first)\n  end\n\n  def perform(video_id)\n    Video.find(video_id).process\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"around_perform-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/callbacks.rb, line 82\ndef around_perform(*filters, &amp;blk)\n  set_callback(:perform, :around, *filters, &amp;blk)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_enqueue\"> <span class=\"method-name\">before_enqueue</span><span class=\"method-args\">(*filters, &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a callback that will get called right before the job is enqueued.</p> <pre class=\"ruby\">class VideoProcessJob &lt; ActiveJob::Base\n  queue_as :default\n\n  before_enqueue do |job|\n    $statsd.increment \"enqueue-video-job.try\"\n  end\n\n  def perform(video_id)\n    Video.find(video_id).process\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"before_enqueue-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/callbacks.rb, line 101\ndef before_enqueue(*filters, &amp;blk)\n  set_callback(:enqueue, :before, *filters, &amp;blk)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_perform\"> <span class=\"method-name\">before_perform</span><span class=\"method-args\">(*filters, &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a callback that will get called right before the job's perform method is executed.</p> <pre class=\"ruby\">class VideoProcessJob &lt; ActiveJob::Base\n  queue_as :default\n\n  before_perform do |job|\n    UserMailer.notify_video_started_processing(job.arguments.first)\n  end\n\n  def perform(video_id)\n    Video.find(video_id).process\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"before_perform-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/callbacks.rb, line 43\ndef before_perform(*filters, &amp;blk)\n  set_callback(:perform, :before, *filters, &amp;blk)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/core":"<h1 id=\"module-ActiveJob::Core\" class=\"module\"> module ActiveJob::Core </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(*arguments)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a new job instance. Takes the arguments that will be passed to the perform method.</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/core.rb, line 55\ndef initialize(*arguments)\n  @arguments  = arguments\n  @job_id     = SecureRandom.uuid\n  @queue_name = self.class.queue_name\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serialize\"> <span class=\"method-name\">serialize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash with the job data that can safely be passed to the queueing adapter.</p> <div class=\"method-source-code\" id=\"serialize-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/core.rb, line 63\ndef serialize\n  {\n    'job_class'  =&gt; self.class.name,\n    'job_id'     =&gt; job_id,\n    'queue_name' =&gt; queue_name,\n    'arguments'  =&gt; serialize_arguments(arguments)\n  }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/core/classmethods":"<h1 id=\"module-ActiveJob::Core::ClassMethods\" class=\"module\"> module ActiveJob::Core::ClassMethods </h1> <section class=\"description\"> <p>These methods will be included into any Active Job object, adding helpers for de/serialization and creation of job instances.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deserialize\"> <span class=\"method-name\">deserialize</span><span class=\"method-args\">(job_data)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a new job instance from a hash created with <code>serialize</code></p> <div class=\"method-source-code\" id=\"deserialize-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/core.rb, line 24\ndef deserialize(job_data)\n  job                      = job_data['job_class'].constantize.new\n  job.job_id               = job_data['job_id']\n  job.queue_name           = job_data['queue_name']\n  job.serialized_arguments = job_data['arguments']\n  job\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set\"> <span class=\"method-name\">set</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a job preconfigured with the given options. You can call perform_later with the job arguments to enqueue the job with the preconfigured options</p> <h4 id=\"method-i-set-label-Options\">Options</h4> <ul>\n<li> <p><code>:wait</code> - Enqueues the job with the specified delay</p> </li>\n<li> <p><code>:wait_until</code> - Enqueues the job at the time specified</p> </li>\n<li> <p><code>:queue</code> - Enqueues the job on the specified queue</p> </li>\n</ul> <h4 id=\"method-i-set-label-Examples\">Examples</h4> <pre class=\"ruby\">VideoJob.set(queue: :some_queue).perform_later(Video.last)\nVideoJob.set(wait: 5.minutes).perform_later(Video.last)\nVideoJob.set(wait_until: Time.now.tomorrow).perform_later(Video.last)\nVideoJob.set(queue: :some_queue, wait: 5.minutes).perform_later(Video.last)\nVideoJob.set(queue: :some_queue, wait_until: Time.now.tomorrow).perform_later(Video.last)\n</pre> <div class=\"method-source-code\" id=\"set-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/core.rb, line 48\ndef set(options={})\n  ConfiguredJob.new(self, options)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/deserializationerror":"<h1 id=\"class-ActiveJob::DeserializationError\" class=\"class\"> class ActiveJob::DeserializationError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">StandardError</dd>\n</dl> <section class=\"description\"> <p>Raised when an exception is raised during job arguments deserialization.</p> <p>Wraps the original exception raised as <code>original_exception</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-original_exception\"> <span class=\"method-name\">original_exception</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/enqueuing":"<h1 id=\"module-ActiveJob::Enqueuing\" class=\"module\"> module ActiveJob::Enqueuing </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-enqueue\"> <span class=\"method-name\">enqueue</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enqueues the job to be performed by the queue adapter.</p> <h4 id=\"method-i-enqueue-label-Options\">Options</h4> <ul>\n<li> <p><code>:wait</code> - Enqueues the job with the specified delay</p> </li>\n<li> <p><code>:wait_until</code> - Enqueues the job at the time specified</p> </li>\n<li> <p><code>:queue</code> - Enqueues the job on the specified queue</p> </li>\n</ul> <h4 id=\"method-i-enqueue-label-Examples\">Examples</h4> <pre class=\"ruby\">my_job_instance.enqueue\nmy_job_instance.enqueue wait: 5.minutes\nmy_job_instance.enqueue queue: :important\nmy_job_instance.enqueue wait_until: Date.tomorrow.midnight\n</pre> <div class=\"method-source-code\" id=\"enqueue-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/enqueuing.rb, line 63\ndef enqueue(options={})\n  self.scheduled_at = options[:wait].seconds.from_now.to_f if options[:wait]\n  self.scheduled_at = options[:wait_until].to_f if options[:wait_until]\n  self.queue_name   = self.class.queue_name_from_part(options[:queue]) if options[:queue]\n  run_callbacks :enqueue do\n    if self.scheduled_at\n      self.class.queue_adapter.enqueue_at self, self.scheduled_at\n    else\n      self.class.queue_adapter.enqueue self\n    end\n  end\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-retry_job\"> <span class=\"method-name\">retry_job</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reschedules the job to be re-executed. This is useful in combination with the <code>rescue_from</code> option. When you rescue an exception from your job you can ask Active Job to retry performing your job.</p> <h4 id=\"method-i-retry_job-label-Options\">Options</h4> <ul>\n<li> <p><code>:wait</code> - Enqueues the job with the specified delay</p> </li>\n<li> <p><code>:wait_until</code> - Enqueues the job at the time specified</p> </li>\n<li> <p><code>:queue</code> - Enqueues the job on the specified queue</p> </li>\n</ul> <h4 id=\"method-i-retry_job-label-Examples\">Examples</h4> <pre class=\"ruby\">class SiteScrapperJob &lt; ActiveJob::Base\n  rescue_from(ErrorLoadingSite) do\n    retry_job queue: :low_priority\n  end\n\n  def perform(*args)\n    # raise ErrorLoadingSite if cannot scrape\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"retry_job-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/enqueuing.rb, line 46\ndef retry_job(options={})\n  enqueue options\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/enqueuing/classmethods":"<h1 id=\"module-ActiveJob::Enqueuing::ClassMethods\" class=\"module\"> module ActiveJob::Enqueuing::ClassMethods </h1> <section class=\"description\"> <p>Includes the <code>perform_later</code> method for job initialization.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-perform_later\"> <span class=\"method-name\">perform_later</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Push a job onto the queue. The arguments must be legal JSON types (string, int, float, nil, true, false, hash or array) or GlobalID::Identification instances. Arbitrary Ruby objects are not supported.</p> <p>Returns an instance of the job class queued with arguments available in Job#arguments.</p> <div class=\"method-source-code\" id=\"perform_later-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/enqueuing.rb, line 16\ndef perform_later(*args)\n  job_or_instantiate(*args).enqueue\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-job_or_instantiate\"> <span class=\"method-name\">job_or_instantiate</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"job_or_instantiate-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/enqueuing.rb, line 21\ndef job_or_instantiate(*args)\n  args.first.is_a?(self) ? args.first : new(*args)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/execution":"<h1 id=\"module-ActiveJob::Execution\" class=\"module\"> module ActiveJob::Execution </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../activesupport/rescuable\">ActiveSupport::Rescuable</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-perform\"> <span class=\"method-name\">perform</span><span class=\"method-args\">(*)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"perform-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/execution.rb, line 38\ndef perform(*)\n  fail NotImplementedError\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-perform_now\"> <span class=\"method-name\">perform_now</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs the job immediately. The job is not sent to the queueing adapter but directly executed by blocking the execution of others until it's finished.</p> <pre class=\"ruby\">MyJob.new(*args).perform_now\n</pre> <div class=\"method-source-code\" id=\"perform_now-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/execution.rb, line 29\ndef perform_now\n  deserialize_arguments_if_needed\n  run_callbacks :perform do\n    perform(*arguments)\n  end\nrescue =&gt; exception\n  rescue_with_handler(exception) || raise(exception)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/execution/classmethods":"<h1 id=\"module-ActiveJob::Execution::ClassMethods\" class=\"module\"> module ActiveJob::Execution::ClassMethods </h1> <section class=\"description\"> <p>Includes methods for executing and performing jobs instantly.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-perform_now\"> <span class=\"method-name\">perform_now</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs the job immediately.</p> <pre class=\"ruby\">MyJob.perform_now(\"mike\")\n</pre> <div class=\"method-source-code\" id=\"perform_now-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/execution.rb, line 15\ndef perform_now(*args)\n  job_or_instantiate(*args).perform_now\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapter/classmethods":"<h1 id=\"module-ActiveJob::QueueAdapter::ClassMethods\" class=\"module\"> module ActiveJob::QueueAdapter::ClassMethods </h1> <section class=\"description\"> <p>Includes the setter method for changing the active queue adapter.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-queue_adapter-3D\"> <span class=\"method-name\">queue_adapter=</span><span class=\"method-args\">(name_or_adapter)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specify the backend queue provider. The default queue adapter is the :inline queue. See <a href=\"../queueadapters\">QueueAdapters</a> for more information.</p> <div class=\"method-source-code\" id=\"queue_adapter-3D-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/queue_adapter.rb, line 17\ndef queue_adapter=(name_or_adapter)\n  @@queue_adapter =            case name_or_adapter\n    when :test\n      ActiveJob::QueueAdapters::TestAdapter.new\n    when Symbol, String\n      load_adapter(name_or_adapter)\n    else\n      name_or_adapter if name_or_adapter.respond_to?(:enqueue)\n    end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters":"<h1 id=\"module-ActiveJob::QueueAdapters\" class=\"module\"> module ActiveJob::QueueAdapters </h1> <section class=\"description\"> <h2 id=\"module-ActiveJob::QueueAdapters-label-Active+Job+adapters\">Active Job adapters</h2> <p>Active Job has adapters for the following queueing backends:</p> <ul>\n<li> <p><a href=\"https://github.com/nesquena/backburner\">Backburner</a></p> </li>\n<li> <p><a href=\"https://github.com/collectiveidea/delayed_job\">Delayed Job</a></p> </li>\n<li> <p><a href=\"https://github.com/bkeepers/qu\">Qu</a></p> </li>\n<li> <p><a href=\"https://github.com/chanks/que\">Que</a></p> </li>\n<li> <p><a href=\"https://github.com/QueueClassic/queue_classic\">queue_classic</a></p> </li>\n<li> <p><a href=\"https://github.com/resque/resque/tree/1-x-stable\">Resque 1.x</a></p> </li>\n<li> <p><a href=\"http://sidekiq.org\">Sidekiq</a></p> </li>\n<li> <p><a href=\"https://github.com/jondot/sneakers\">Sneakers</a></p> </li>\n<li> <p><a href=\"https://github.com/brandonhilkert/sucker_punch\">Sucker Punch</a></p> </li>\n</ul> <h3 id=\"module-ActiveJob::QueueAdapters-label-Backends+Features\">Backends Features</h3> <pre>|                   | Async | Queues | Delayed   | Priorities | Timeout | Retries |\n|-------------------|-------|--------|-----------|------------|---------|---------|\n| Backburner        | Yes   | Yes    | Yes       | Yes        | Job     | Global  |\n| Delayed Job       | Yes   | Yes    | Yes       | Job        | Global  | Global  |\n| Qu                | Yes   | Yes    | No        | No         | No      | Global  |\n| Que               | Yes   | Yes    | Yes       | Job        | No      | Job     |\n| queue_classic     | Yes   | Yes    | No*       | No         | No      | No      |\n| Resque            | Yes   | Yes    | Yes (Gem) | Queue      | Global  | Yes     |\n| Sidekiq           | Yes   | Yes    | Yes       | Queue      | No      | Job     |\n| Sneakers          | Yes   | Yes    | No        | Queue      | Queue   | No      |\n| Sucker Punch      | Yes   | Yes    | No        | No         | No      | No      |\n| Active Job Inline | No    | Yes    | N/A       | N/A        | N/A     | N/A     |</pre> <p>NOTE: queue_classic does not support Job scheduling. However you can implement this yourself or you can use the queue_classic-later gem. See the documentation for <a href=\"queueadapters/queueclassicadapter\">ActiveJob::QueueAdapters::QueueClassicAdapter</a>.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/backburneradapter":"<h1 id=\"class-ActiveJob::QueueAdapters::BackburnerAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::BackburnerAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::BackburnerAdapter-label-Backburner+adapter+for+Active+Job\">Backburner adapter for Active Job</h2> <p>Backburner is a beanstalkd-powered job queue that can handle a very high volume of jobs. You create background jobs and place them on multiple work queues to be processed later. Read more about Backburner <a href=\"https://github.com/nesquena/backburner\">here</a>.</p> <p>To use Backburner set the queue_adapter config to <code>:backburner</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :backburner\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/delayedjobadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::DelayedJobAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::DelayedJobAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::DelayedJobAdapter-label-Delayed+Job+adapter+for+Active+Job\">Delayed Job adapter for Active Job</h2> <p>Delayed::Job (or DJ) encapsulates the common pattern of asynchronously executing longer tasks in the background. Although DJ can have many storage backends, one of the most used is based on Active Record. Read more about Delayed Job <a href=\"https://github.com/collectiveidea/delayed_job\">here</a>.</p> <p>To use Delayed Job, set the queue_adapter config to <code>:delayed_job</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :delayed_job\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/inlineadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::InlineAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::InlineAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::InlineAdapter-label-Active+Job+Inline+adapter\">Active Job Inline adapter</h2> <p>When enqueueing jobs with the Inline adapter the job will be executed immediately.</p> <p>To use the Inline set the queue_adapter config to <code>:inline</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :inline\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/quadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::QuAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::QuAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::QuAdapter-label-Qu+adapter+for+Active+Job\">Qu adapter for Active Job</h2> <p>Qu is a Ruby library for queuing and processing background jobs. It is heavily inspired by delayed_job and Resque. Qu was created to overcome some shortcomings in the existing queuing libraries. The advantages of Qu are: Multiple backends (redis, mongo), jobs are requeued when worker is killed, resque-like API.</p> <p>Read more about Qu <a href=\"https://github.com/bkeepers/qu\">here</a>.</p> <p>To use Qu set the queue_adapter config to <code>:qu</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :qu\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/queadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::QueAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::QueAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::QueAdapter-label-Que+adapter+for+Active+Job\">Que adapter for Active Job</h2> <p>Que is a high-performance alternative to DelayedJob or QueueClassic that improves the reliability of your application by protecting your jobs with the same ACID guarantees as the rest of your data. Que is a queue for Ruby and PostgreSQL that manages jobs using advisory locks.</p> <p>Read more about Que <a href=\"https://github.com/chanks/que\">here</a>.</p> <p>To use Que set the queue_adapter config to <code>:que</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :que\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/queueclassicadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::QueueClassicAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::QueueClassicAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::QueueClassicAdapter-label-queue_classic+adapter+for+Active+Job\">queue_classic adapter for Active Job</h2> <p>queue_classic provides a simple interface to a PostgreSQL-backed message queue. queue_classic specializes in concurrent locking and minimizing database load while providing a simple, intuitive developer experience. queue_classic assumes that you are already using PostgreSQL in your production environment and that adding another dependency (e.g. redis, beanstalkd, 0mq) is undesirable.</p> <p>Read more about queue_classic <a href=\"https://github.com/QueueClassic/queue_classic\">here</a>.</p> <p>To use queue_classic set the queue_adapter config to <code>:queue_classic</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :queue_classic\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-build_queue\"> <span class=\"method-name\">build_queue</span><span class=\"method-args\">(queue_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Builds a <code>QC::Queue</code> object to schedule jobs on.</p> <p>If you have a custom <code>QC::Queue</code> subclass you'll need to subclass <code>ActiveJob::QueueAdapters::QueueClassicAdapter</code> and override the <code>build_queue</code> method.</p> <div class=\"method-source-code\" id=\"build_queue-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/queue_adapters/queue_classic_adapter.rb, line 40\ndef build_queue(queue_name)\n  QC::Queue.new(queue_name)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/resqueadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::ResqueAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::ResqueAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::ResqueAdapter-label-Resque+adapter+for+Active+Job\">Resque adapter for Active Job</h2> <p>Resque (pronounced like “rescue”) is a Redis-backed library for creating background jobs, placing those jobs on multiple queues, and processing them later.</p> <p>Read more about Resque <a href=\"https://github.com/resque/resque\">here</a>.</p> <p>To use Resque set the queue_adapter config to <code>:resque</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :resque\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/sidekiqadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::SidekiqAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::SidekiqAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::SidekiqAdapter-label-Sidekiq+adapter+for+Active+Job\">Sidekiq adapter for Active Job</h2> <p>Simple, efficient background processing for Ruby. Sidekiq uses threads to handle many jobs at the same time in the same process. It does not require Rails but will integrate tightly with it to make background processing dead simple.</p> <p>Read more about Sidekiq <a href=\"http://sidekiq.org\">here</a>.</p> <p>To use Sidekiq set the queue_adapter config to <code>:sidekiq</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :sidekiq\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/sneakersadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::SneakersAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::SneakersAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::SneakersAdapter-label-Sneakers+adapter+for+Active+Job\">Sneakers adapter for Active Job</h2> <p>A high-performance RabbitMQ background processing framework for Ruby. Sneakers is being used in production for both I/O and CPU intensive workloads, and have achieved the goals of high-performance and 0-maintenance, as designed.</p> <p>Read more about Sneakers <a href=\"https://github.com/jondot/sneakers\">here</a>.</p> <p>To use Sneakers set the queue_adapter config to <code>:sneakers</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :sneakers\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/suckerpunchadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::SuckerPunchAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::SuckerPunchAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::SuckerPunchAdapter-label-Sucker+Punch+adapter+for+Active+Job\">Sucker Punch adapter for Active Job</h2> <p>Sucker Punch is a single-process Ruby asynchronous processing library. It's girl_friday and DSL sugar on top of Celluloid. With Celluloid's actor pattern, we can do asynchronous processing within a single process. This reduces costs of hosting on a service like Heroku along with the memory footprint of having to maintain additional jobs if hosting on a dedicated server. All queues can run within a single Rails/Sinatra process.</p> <p>Read more about Sucker Punch <a href=\"https://github.com/brandonhilkert/sucker_punch\">here</a>.</p> <p>To use Sucker Punch set the queue_adapter config to <code>:sucker_punch</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :sucker_punch\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queueadapters/testadapter":"<h1 id=\"class-ActiveJob::QueueAdapters::TestAdapter\" class=\"class\"> class ActiveJob::QueueAdapters::TestAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveJob::QueueAdapters::TestAdapter-label-Test+adapter+for+Active+Job\">Test adapter for Active Job</h2> <p>The test adapter should be used only in testing. Along with <code>ActiveJob::TestCase</code> and <code>ActiveJob::TestHelper</code> it makes a great tool to test your Rails application.</p> <p>To use the test adapter set queue_adapter config to <code>:test</code>.</p> <pre class=\"ruby\">Rails.application.config.active_job.queue_adapter = :test\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-enqueued_jobs\"> <span class=\"method-name\">enqueued_jobs</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-perform_enqueued_at_jobs\"> <span class=\"method-name\">perform_enqueued_at_jobs</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-perform_enqueued_jobs\"> <span class=\"method-name\">perform_enqueued_jobs</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-performed_jobs\"> <span class=\"method-name\">performed_jobs</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/queue_adapters/test_adapter.rb, line 17\ndef initialize\n  self.perform_enqueued_jobs = false\n  self.perform_enqueued_at_jobs = false\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-enqueued_jobs\"> <span class=\"method-name\">enqueued_jobs</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Provides a store of all the enqueued jobs with the <a href=\"testadapter\">TestAdapter</a> so you can check them.</p> <div class=\"method-source-code\" id=\"enqueued_jobs-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/queue_adapters/test_adapter.rb, line 23\ndef enqueued_jobs\n  @enqueued_jobs ||= []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-performed_jobs\"> <span class=\"method-name\">performed_jobs</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Provides a store of all the performed jobs with the <a href=\"testadapter\">TestAdapter</a> so you can check them.</p> <div class=\"method-source-code\" id=\"performed_jobs-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/queue_adapters/test_adapter.rb, line 28\ndef performed_jobs\n  @performed_jobs ||= []\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queuename":"<h1 id=\"module-ActiveJob::QueueName\" class=\"module\"> module ActiveJob::QueueName </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-queue_name\"> <span class=\"method-name\">queue_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the name of the queue the job will be run on</p> <div class=\"method-source-code\" id=\"queue_name-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/queue_name.rb, line 43\ndef queue_name\n  if @queue_name.is_a?(Proc)\n    @queue_name = self.class.queue_name_from_part(instance_exec(&amp;@queue_name))\n  end\n  @queue_name\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/queuename/classmethods":"<h1 id=\"module-ActiveJob::QueueName::ClassMethods\" class=\"module\"> module ActiveJob::QueueName::ClassMethods </h1> <section class=\"description\"> <p>Includes the ability to override the default queue name and prefix.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-queue_as\"> <span class=\"method-name\">queue_as</span><span class=\"method-args\">(part_name=nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies the name of the queue to process the job on.</p> <pre class=\"ruby\">class PublishToFeedJob &lt; ActiveJob::Base\n  queue_as :feeds\n\n  def perform(post)\n    post.to_feed!\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"queue_as-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/queue_name.rb, line 19\ndef queue_as(part_name=nil, &amp;block)\n  if block_given?\n    self.queue_name = block\n  else\n    self.queue_name = queue_name_from_part(part_name)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/serializationerror":"<h1 id=\"class-ActiveJob::SerializationError\" class=\"class\"> class ActiveJob::SerializationError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">ArgumentError</dd>\n</dl> <section class=\"description\"> <p>Raised when an unsupported argument type is being set as job argument. We currently support <a href=\"../nilclass\">NilClass</a>, Fixnum, <a href=\"../float\">Float</a>, <a href=\"../string\">String</a>, <a href=\"../trueclass\">TrueClass</a>, <a href=\"../falseclass\">FalseClass</a>, Bignum and object that can be represented as GlobalIDs (ex: Active Record). Also raised if you set the key for a <a href=\"../hash\">Hash</a> something else than a string or a symbol.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activejob/testhelper":"<h1 id=\"module-ActiveJob::TestHelper\" class=\"module\"> module ActiveJob::TestHelper </h1> <section class=\"description\"> <p>Provides helper methods for testing Active Job</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_teardown\"> <span class=\"method-name\">after_teardown</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"after_teardown-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 17\ndef after_teardown\n  super\n  ActiveJob::Base.queue_adapter = @old_queue_adapter\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_enqueued_jobs\"> <span class=\"method-name\">assert_enqueued_jobs</span><span class=\"method-args\">(number) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that the number of enqueued jobs matches the given number.</p> <pre class=\"ruby\">def test_jobs\n  assert_enqueued_jobs 0\n  HelloJob.perform_later('david')\n  assert_enqueued_jobs 1\n  HelloJob.perform_later('abdelkader')\n  assert_enqueued_jobs 2\nend\n</pre> <p>If a block is passed, that block should cause the specified number of jobs to be enqueued.</p> <pre class=\"ruby\">def test_jobs_again\n  assert_enqueued_jobs 1 do\n    HelloJob.perform_later('cristian')\n  end\n\n  assert_enqueued_jobs 2 do\n    HelloJob.perform_later('aaron')\n    HelloJob.perform_later('rafael')\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_enqueued_jobs-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 45\ndef assert_enqueued_jobs(number)\n  if block_given?\n    original_count = enqueued_jobs.size\n    yield\n    new_count = enqueued_jobs.size\n    assert_equal number, new_count - original_count,\n                 \"#{number} jobs expected, but #{new_count - original_count} were enqueued\"\n  else\n    enqueued_jobs_size = enqueued_jobs.size\n    assert_equal number, enqueued_jobs_size, \"#{number} jobs expected, but #{enqueued_jobs_size} were enqueued\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_enqueued_with\"> <span class=\"method-name\">assert_enqueued_with</span><span class=\"method-args\">(args = {}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that the job passed in the block has been enqueued with the given arguments.</p> <pre class=\"ruby\">def test_assert_enqueued_with\n  assert_enqueued_with(job: MyJob, args: [1,2,3], queue: 'low') do\n    MyJob.perform_later(1,2,3)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_enqueued_with-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 158\ndef assert_enqueued_with(args = {}, &amp;_block)\n  original_enqueued_jobs = enqueued_jobs.dup\n  clear_enqueued_jobs\n  args.assert_valid_keys(:job, :args, :at, :queue)\n  serialized_args = serialize_args_for_assertion(args)\n  yield\n  matching_job = enqueued_jobs.any? do |job|\n    serialized_args.all? { |key, value| value == job[key] }\n  end\n  assert matching_job, \"No enqueued job found with #{args}\"\nensure\n  queue_adapter.enqueued_jobs = original_enqueued_jobs + enqueued_jobs\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_no_enqueued_jobs\"> <span class=\"method-name\">assert_no_enqueued_jobs</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that no jobs have been enqueued.</p> <pre class=\"ruby\">def test_jobs\n  assert_no_enqueued_jobs\n  HelloJob.perform_later('jeremy')\n  assert_enqueued_jobs 1\nend\n</pre> <p>If a block is passed, that block should not cause any job to be enqueued.</p> <pre class=\"ruby\">def test_jobs_again\n  assert_no_enqueued_jobs do\n    # No job should be enqueued from this block\n  end\nend\n</pre> <p>Note: This assertion is simply a shortcut for:</p> <pre class=\"ruby\">assert_enqueued_jobs 0, &amp;block\n</pre> <div class=\"method-source-code\" id=\"assert_no_enqueued_jobs-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 77\ndef assert_no_enqueued_jobs(&amp;block)\n  assert_enqueued_jobs 0, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_no_performed_jobs\"> <span class=\"method-name\">assert_no_performed_jobs</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that no jobs have been performed.</p> <pre class=\"ruby\">def test_jobs\n  assert_no_performed_jobs\n\n  perform_enqueued_jobs do\n    HelloJob.perform_later('matthew')\n    assert_performed_jobs 1\n  end\nend\n</pre> <p>If a block is passed, that block should not cause any job to be performed.</p> <pre class=\"ruby\">def test_jobs_again\n  assert_no_performed_jobs do\n    # No job should be performed from this block\n  end\nend\n</pre> <p>Note: This assertion is simply a shortcut for:</p> <pre class=\"ruby\">assert_performed_jobs 0, &amp;block\n</pre> <div class=\"method-source-code\" id=\"assert_no_performed_jobs-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 147\ndef assert_no_performed_jobs(&amp;block)\n  assert_performed_jobs 0, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_performed_jobs\"> <span class=\"method-name\">assert_performed_jobs</span><span class=\"method-args\">(number) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that the number of performed jobs matches the given number. If no block is passed, <code>perform_enqueued_jobs</code> must be called around the job call.</p> <pre class=\"ruby\">def test_jobs\n  assert_performed_jobs 0\n\n  perform_enqueued_jobs do\n    HelloJob.perform_later('xavier')\n  end\n  assert_performed_jobs 1\n\n  perform_enqueued_jobs do\n    HelloJob.perform_later('yves')\n    assert_performed_jobs 2\n  end\nend\n</pre> <p>If a block is passed, that block should cause the specified number of jobs to be performed.</p> <pre class=\"ruby\">def test_jobs_again\n  assert_performed_jobs 1 do\n    HelloJob.perform_later('robin')\n  end\n\n  assert_performed_jobs 2 do\n    HelloJob.perform_later('carlos')\n    HelloJob.perform_later('sean')\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_performed_jobs-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 112\ndef assert_performed_jobs(number)\n  if block_given?\n    original_count = performed_jobs.size\n    perform_enqueued_jobs { yield }\n    new_count = performed_jobs.size\n    assert_equal number, new_count - original_count,\n                 \"#{number} jobs expected, but #{new_count - original_count} were performed\"\n  else\n    performed_jobs_size = performed_jobs.size\n    assert_equal number, performed_jobs_size, \"#{number} jobs expected, but #{performed_jobs_size} were performed\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_performed_with\"> <span class=\"method-name\">assert_performed_with</span><span class=\"method-args\">(args = {}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts that the job passed in the block has been performed with the given arguments.</p> <pre class=\"ruby\">def test_assert_performed_with\n  assert_performed_with(job: MyJob, args: [1,2,3], queue: 'high') do\n    MyJob.perform_later(1,2,3)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_performed_with-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 179\ndef assert_performed_with(args = {}, &amp;_block)\n  original_performed_jobs = performed_jobs.dup\n  clear_performed_jobs\n  args.assert_valid_keys(:job, :args, :at, :queue)\n  serialized_args = serialize_args_for_assertion(args)\n  perform_enqueued_jobs { yield }\n  matching_job = performed_jobs.any? do |job|\n    serialized_args.all? { |key, value| value == job[key] }\n  end\n  assert matching_job, \"No performed job found with #{args}\"\nensure\n  queue_adapter.performed_jobs = original_performed_jobs + performed_jobs\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_setup\"> <span class=\"method-name\">before_setup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"before_setup-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 9\ndef before_setup\n  @old_queue_adapter  = queue_adapter\n  ActiveJob::Base.queue_adapter = :test\n  clear_enqueued_jobs\n  clear_performed_jobs\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_enqueued_jobs\"> <span class=\"method-name\">clear_enqueued_jobs</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"clear_enqueued_jobs-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 213\ndef clear_enqueued_jobs\n  enqueued_jobs.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_performed_jobs\"> <span class=\"method-name\">clear_performed_jobs</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"clear_performed_jobs-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 217\ndef clear_performed_jobs\n  performed_jobs.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-perform_enqueued_jobs\"> <span class=\"method-name\">perform_enqueued_jobs</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"perform_enqueued_jobs-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 193\ndef perform_enqueued_jobs\n  @old_perform_enqueued_jobs = queue_adapter.perform_enqueued_jobs\n  @old_perform_enqueued_at_jobs = queue_adapter.perform_enqueued_at_jobs\n  queue_adapter.perform_enqueued_jobs = true\n  queue_adapter.perform_enqueued_at_jobs = true\n  yield\nensure\n  queue_adapter.perform_enqueued_jobs = @old_perform_enqueued_jobs\n  queue_adapter.perform_enqueued_at_jobs = @old_perform_enqueued_at_jobs\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-queue_adapter\"> <span class=\"method-name\">queue_adapter</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"queue_adapter-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 204\ndef queue_adapter\n  ActiveJob::Base.queue_adapter\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serialize_args_for_assertion\"> <span class=\"method-name\">serialize_args_for_assertion</span><span class=\"method-args\">(args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"serialize_args_for_assertion-source\"> <pre class=\"ruby\"># File activejob/lib/active_job/test_helper.rb, line 221\ndef serialize_args_for_assertion(args)\n  serialized_args = args.dup\n  if job_args = serialized_args.delete(:args)\n    serialized_args[:args] = ActiveJob::Arguments.serialize(job_args)\n  end\n  serialized_args\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel":"<h1 id=\"module-ActiveModel\" class=\"module\"> module ActiveModel </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-gem_version\"> <span class=\"method-name\">gem_version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Active <a href=\"activemodel/model\">Model</a> as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"gem_version-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/gem_version.rb, line 3\ndef self.gem_version\n  Gem::Version.new VERSION::STRING\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-version\"> <span class=\"method-name\">version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded <a href=\"activemodel\">ActiveModel</a> as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"version-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/version.rb, line 5\ndef self.version\n  gem_version\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/attributemethods":"<h1 id=\"module-ActiveModel::AttributeMethods\" class=\"module\"> module ActiveModel::AttributeMethods </h1> <section class=\"description\"> <h2 id=\"module-ActiveModel::AttributeMethods-label-Active+Model+Attribute+Methods\">Active Model Attribute Methods</h2> <p>Provides a way to add prefixes and suffixes to your methods as well as handling the creation of <code>ActiveRecord::Base</code>-like class methods such as <code>table_name</code>.</p> <p>The requirements to implement <code>ActiveModel::AttributeMethods</code> are to:</p> <ul>\n<li> <p><code>include ActiveModel::AttributeMethods</code> in your class.</p> </li>\n<li> <p>Call each of its method you want to add, such as <code>attribute_method_suffix</code> or <code>attribute_method_prefix</code>.</p> </li>\n<li> <p>Call <code>define_attribute_methods</code> after the other methods are called.</p> </li>\n<li> <p>Define the various generic <code>_attribute</code> methods that you have declared.</p> </li>\n<li> <p>Define an <code>attributes</code> method which returns a hash with each attribute name in your model as hash key and the attribute value as hash value. <a href=\"../hash\">Hash</a> keys must be strings.</p> </li>\n</ul> <p>A minimal implementation could be:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::AttributeMethods\n\n  attribute_method_affix  prefix: 'reset_', suffix: '_to_default!'\n  attribute_method_suffix '_contrived?'\n  attribute_method_prefix 'clear_'\n  define_attribute_methods :name\n\n  attr_accessor :name\n\n  def attributes\n    { 'name' =&gt; @name }\n  end\n\n  private\n\n  def attribute_contrived?(attr)\n    true\n  end\n\n  def clear_attribute(attr)\n    send(\"#{attr}=\", nil)\n  end\n\n  def reset_attribute_to_default!(attr)\n    send(\"#{attr}=\", 'Default Name')\n  end\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"CALL_COMPILABLE_REGEXP\">CALL_COMPILABLE_REGEXP </dt>\n\n<dt id=\"NAME_COMPILABLE_REGEXP\">NAME_COMPILABLE_REGEXP </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_missing\"> <span class=\"method-name\">attribute_missing</span><span class=\"method-args\">(match, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>attribute_missing</code> is like <code>method_missing</code>, but for attributes. When <code>method_missing</code> is called we check to see if there is a matching attribute method. If so, we tell <code>attribute_missing</code> to dispatch the attribute. This method can be overloaded to customize the behavior.</p> <div class=\"method-source-code\" id=\"attribute_missing-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 441\ndef attribute_missing(match, *args, &amp;block)\n  __send__(match.target, match.attr_name, *args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method_missing\"> <span class=\"method-name\">method_missing</span><span class=\"method-args\">(method, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows access to the object attributes, which are held in the hash returned by <code>attributes</code>, as though they were first-class methods. So a <code>Person</code> class with a <code>name</code> attribute can for example use <code>Person#name</code> and <code>Person#name=</code> and never directly use the attributes hash – except for multiple assigns with <code>ActiveRecord::Base#attributes=</code>.</p> <p>It's also possible to instantiate related objects, so a <code>Client</code> class belonging to the <code>clients</code> table with a <code>master_id</code> foreign key can instantiate master through <code>Client#master</code>.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"method_missing-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 428\ndef method_missing(method, *args, &amp;block)\n  if respond_to_without_attributes?(method, true)\n    super\n  else\n    match = match_attribute_method?(method.to_s)\n    match ? attribute_missing(match, *args, &amp;block) : super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to-3F\"> <span class=\"method-name\">respond_to?</span><span class=\"method-args\">(method, include_private_methods = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"respond_to-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 449\ndef respond_to?(method, include_private_methods = false)\n  if super\n    true\n  elsif !include_private_methods &amp;&amp; super(method, true)\n    # If we're here then we haven't found among non-private methods\n    # but found among all methods. Which means that the given method is private.\n    false\n  else\n    !match_attribute_method?(method.to_s).nil?\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"attributemethods#method-i-respond_to_without_attributes-3F\">respond_to_without_attributes?</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-respond_to_without_attributes-3F\"> <span class=\"method-name\">respond_to_without_attributes?</span><span class=\"method-args\">(method, include_private_methods = false)</span> </div> <div class=\"method-description\"> <p>A <code>Person</code> instance with a <code>name</code> attribute can ask <code>person.respond_to?(:name)</code>, <code>person.respond_to?(:name=)</code>, and <code>person.respond_to?(:name?)</code> which will all return <code>true</code>.</p> </div> <div class=\"aliases\"> Alias for: <a href=\"attributemethods#method-i-respond_to-3F\">respond_to?</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/attributemethods/classmethods":"<h1 id=\"module-ActiveModel::AttributeMethods::ClassMethods\" class=\"module\"> module ActiveModel::AttributeMethods::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-alias_attribute\"> <span class=\"method-name\">alias_attribute</span><span class=\"method-args\">(new_name, old_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to make aliases for attributes.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor :name\n  attribute_method_suffix '_short?'\n  define_attribute_methods :name\n\n  alias_attribute :nickname, :name\n\n  private\n\n  def attribute_short?(attr)\n    send(attr).length &lt; 5\n  end\nend\n\nperson = Person.new\nperson.name = 'Bob'\nperson.name            # =&gt; \"Bob\"\nperson.nickname        # =&gt; \"Bob\"\nperson.name_short?     # =&gt; true\nperson.nickname_short? # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"alias_attribute-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 208\ndef alias_attribute(new_name, old_name)\n  self.attribute_aliases = attribute_aliases.merge(new_name.to_s =&gt; old_name.to_s)\n  attribute_method_matchers.each do |matcher|\n    matcher_new = matcher.method_name(new_name).to_s\n    matcher_old = matcher.method_name(old_name).to_s\n    define_proxy_call false, self, matcher_new, matcher_old\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_alias\"> <span class=\"method-name\">attribute_alias</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the original name for the alias <code>name</code></p> <div class=\"method-source-code\" id=\"attribute_alias-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 223\ndef attribute_alias(name)\n  attribute_aliases[name.to_s]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_alias-3F\"> <span class=\"method-name\">attribute_alias?</span><span class=\"method-args\">(new_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is <code>new_name</code> an alias?</p> <div class=\"method-source-code\" id=\"attribute_alias-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 218\ndef attribute_alias?(new_name)\n  attribute_aliases.key? new_name.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_method_affix\"> <span class=\"method-name\">attribute_method_affix</span><span class=\"method-args\">(*affixes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declares a method available for all attributes with the given prefix and suffix. Uses <code>method_missing</code> and <code>respond_to?</code> to rewrite the method.</p> <pre class=\"ruby\">#{prefix}#{attr}#{suffix}(*args, &amp;block)\n</pre> <p>to</p> <pre class=\"ruby\">#{prefix}attribute#{suffix}(#{attr}, *args, &amp;block)\n</pre> <p>An <code>#{prefix}attribute#{suffix}</code> instance method must exist and accept at least the <code>attr</code> argument.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor :name\n  attribute_method_affix prefix: 'reset_', suffix: '_to_default!'\n  define_attribute_methods :name\n\n  private\n\n  def reset_attribute_to_default!(attr)\n    send(\"#{attr}=\", 'Default Name')\n  end\nend\n\nperson = Person.new\nperson.name                         # =&gt; 'Gem'\nperson.reset_name_to_default!\nperson.name                         # =&gt; 'Default Name'\n</pre> <div class=\"method-source-code\" id=\"attribute_method_affix-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 179\ndef attribute_method_affix(*affixes)\n  self.attribute_method_matchers += affixes.map! { |affix| AttributeMethodMatcher.new prefix: affix[:prefix], suffix: affix[:suffix] }\n  undefine_attribute_methods\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_method_prefix\"> <span class=\"method-name\">attribute_method_prefix</span><span class=\"method-args\">(*prefixes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declares a method available for all attributes with the given prefix. Uses <code>method_missing</code> and <code>respond_to?</code> to rewrite the method.</p> <pre class=\"ruby\">#{prefix}#{attr}(*args, &amp;block)\n</pre> <p>to</p> <pre class=\"ruby\">#{prefix}attribute(#{attr}, *args, &amp;block)\n</pre> <p>An instance method <code>#{prefix}attribute</code> must exist and accept at least the <code>attr</code> argument.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor :name\n  attribute_method_prefix 'clear_'\n  define_attribute_methods :name\n\n  private\n\n  def clear_attribute(attr)\n    send(\"#{attr}=\", nil)\n  end\nend\n\nperson = Person.new\nperson.name = 'Bob'\nperson.name          # =&gt; \"Bob\"\nperson.clear_name\nperson.name          # =&gt; nil\n</pre> <div class=\"method-source-code\" id=\"attribute_method_prefix-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 108\ndef attribute_method_prefix(*prefixes)\n  self.attribute_method_matchers += prefixes.map! { |prefix| AttributeMethodMatcher.new prefix: prefix }\n  undefine_attribute_methods\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_method_suffix\"> <span class=\"method-name\">attribute_method_suffix</span><span class=\"method-args\">(*suffixes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declares a method available for all attributes with the given suffix. Uses <code>method_missing</code> and <code>respond_to?</code> to rewrite the method.</p> <pre class=\"ruby\">#{attr}#{suffix}(*args, &amp;block)\n</pre> <p>to</p> <pre class=\"ruby\">attribute#{suffix}(#{attr}, *args, &amp;block)\n</pre> <p>An <code>attribute#{suffix}</code> instance method must exist and accept at least the <code>attr</code> argument.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor :name\n  attribute_method_suffix '_short?'\n  define_attribute_methods :name\n\n  private\n\n  def attribute_short?(attr)\n    send(attr).length &lt; 5\n  end\nend\n\nperson = Person.new\nperson.name = 'Bob'\nperson.name          # =&gt; \"Bob\"\nperson.name_short?   # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"attribute_method_suffix-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 143\ndef attribute_method_suffix(*suffixes)\n  self.attribute_method_matchers += suffixes.map! { |suffix| AttributeMethodMatcher.new suffix: suffix }\n  undefine_attribute_methods\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-define_attribute_method\"> <span class=\"method-name\">define_attribute_method</span><span class=\"method-args\">(attr_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declares an attribute that should be prefixed and suffixed by <a href=\"../attributemethods\">ActiveModel::AttributeMethods</a>.</p> <p>To use, pass an attribute name (as string or symbol), be sure to declare <code>define_attribute_method</code> after you define any prefix, suffix or affix method, or they will not hook in.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor :name\n  attribute_method_suffix '_short?'\n\n  # Call to define_attribute_method must appear after the\n  # attribute_method_prefix, attribute_method_suffix or\n  # attribute_method_affix declares.\n  define_attribute_method :name\n\n  private\n\n  def attribute_short?(attr)\n    send(attr).length &lt; 5\n  end\nend\n\nperson = Person.new\nperson.name = 'Bob'\nperson.name        # =&gt; \"Bob\"\nperson.name_short? # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"define_attribute_method-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 284\ndef define_attribute_method(attr_name)\n  attribute_method_matchers.each do |matcher|\n    method_name = matcher.method_name(attr_name)\n\n    unless instance_method_already_implemented?(method_name)\n      generate_method = \"define_method_#{matcher.method_missing_target}\"\n\n      if respond_to?(generate_method, true)\n        send(generate_method, attr_name)\n      else\n        define_proxy_call true, generated_attribute_methods, method_name, matcher.method_missing_target, attr_name.to_s\n      end\n    end\n  end\n  attribute_method_matchers_cache.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-define_attribute_methods\"> <span class=\"method-name\">define_attribute_methods</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declares the attributes that should be prefixed and suffixed by <a href=\"../attributemethods\">ActiveModel::AttributeMethods</a>.</p> <p>To use, pass attribute names (as strings or symbols), be sure to declare <code>define_attribute_methods</code> after you define any prefix, suffix or affix methods, or they will not hook in.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor :name, :age, :address\n  attribute_method_prefix 'clear_'\n\n  # Call to define_attribute_methods must appear after the\n  # attribute_method_prefix, attribute_method_suffix or\n  # attribute_method_affix declares.\n  define_attribute_methods :name, :age, :address\n\n  private\n\n  def clear_attribute(attr)\n    send(\"#{attr}=\", nil)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"define_attribute_methods-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 251\ndef define_attribute_methods(*attr_names)\n  attr_names.flatten.each { |attr_name| define_attribute_method(attr_name) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-undefine_attribute_methods\"> <span class=\"method-name\">undefine_attribute_methods</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes all the previously dynamically defined methods from the class.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor :name\n  attribute_method_suffix '_short?'\n  define_attribute_method :name\n\n  private\n\n  def attribute_short?(attr)\n    send(attr).length &lt; 5\n  end\nend\n\nperson = Person.new\nperson.name = 'Bob'\nperson.name_short? # =&gt; true\n\nPerson.undefine_attribute_methods\n\nperson.name_short? # =&gt; NoMethodError\n</pre> <div class=\"method-source-code\" id=\"undefine_attribute_methods-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/attribute_methods.rb, line 324\ndef undefine_attribute_methods\n  generated_attribute_methods.module_eval do\n    instance_methods.each { |m| undef_method(m) }\n  end\n  attribute_method_matchers_cache.clear\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/callbacks":"<h1 id=\"module-ActiveModel::Callbacks\" class=\"module\"> module ActiveModel::Callbacks </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../activesupport/callbacks\">ActiveSupport::Callbacks</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"module-ActiveModel::Callbacks-label-Active+Model+Callbacks\">Active Model Callbacks</h2> <p>Provides an interface for any class to have Active Record like callbacks.</p> <p>Like the Active Record methods, the callback chain is aborted as soon as one of the methods in the chain returns <code>false</code>.</p> <p>First, extend <a href=\"callbacks\">ActiveModel::Callbacks</a> from the class you are creating:</p> <pre class=\"ruby\">class MyModel\n  extend ActiveModel::Callbacks\nend\n</pre> <p>Then define a list of methods that you want callbacks attached to:</p> <pre class=\"ruby\">define_model_callbacks :create, :update\n</pre> <p>This will provide all three standard callbacks (before, around and after) for both the <code>:create</code> and <code>:update</code> methods. To implement, you need to wrap the methods you want callbacks on in a block so that the callbacks get a chance to fire:</p> <pre class=\"ruby\">def create\n  run_callbacks :create do\n    # Your create action methods here\n  end\nend\n</pre> <p>Then in your class, you can use the <code>before_create</code>, <code>after_create</code> and <code>around_create</code> methods, just as you would in an Active Record model.</p> <pre class=\"ruby\">before_create :action_before_create\n\ndef action_before_create\n  # Your code here\nend\n</pre> <p>When defining an around callback remember to yield to the block, otherwise it won't be executed:</p> <pre class=\"ruby\">around_create :log_status\n\ndef log_status\n  puts 'going to call the block...'\n  yield\n  puts 'block successfully called.'\nend\n</pre> <p>You can choose not to have all three callbacks by passing a hash to the <code>define_model_callbacks</code> method.</p> <pre class=\"ruby\">define_model_callbacks :create, only: [:after, :before]\n</pre> <p>Would only create the <code>after_create</code> and <code>before_create</code> callback methods in your class.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-define_model_callbacks\"> <span class=\"method-name\">define_model_callbacks</span><span class=\"method-args\">(*callbacks)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"callbacks#method-i-define_model_callbacks\">#define_model_callbacks</a> accepts the same options <code>define_callbacks</code> does, in case you want to overwrite a default. Besides that, it also accepts an <code>:only</code> option, where you can choose if you want all types (before, around or after) or just some.</p> <pre class=\"ruby\">define_model_callbacks :initializer, only: :after\n</pre> <p>Note, the <code>only: &lt;type&gt;</code> hash will apply to all callbacks defined on that method call. To get around this you can call the <a href=\"callbacks#method-i-define_model_callbacks\">#define_model_callbacks</a> method as many times as you need.</p> <pre class=\"ruby\">define_model_callbacks :create,  only: :after\ndefine_model_callbacks :update,  only: :before\ndefine_model_callbacks :destroy, only: :around\n</pre> <p>Would create <code>after_create</code>, <code>before_update</code> and <code>around_destroy</code> methods only.</p> <p>You can pass in a class to before_&lt;type&gt;, after_&lt;type&gt; and around_&lt;type&gt;, in which case the callback will call that class's &lt;action&gt;_&lt;type&gt; method passing the object that the callback is being called on.</p> <pre class=\"ruby\">class MyModel\n  extend ActiveModel::Callbacks\n  define_model_callbacks :create\n\n  before_create AnotherClass\nend\n\nclass AnotherClass\n  def self.before_create( obj )\n    # obj is the MyModel instance that the callback is being called on\n  end\nend\n</pre> <p>NOTE: <code>method_name</code> passed to `define_model_callbacks` must not end with `!`, `?` or `=`.</p> <div class=\"method-source-code\" id=\"define_model_callbacks-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/callbacks.rb, line 103\ndef define_model_callbacks(*callbacks)\n  options = callbacks.extract_options!\n  options = {\n    terminator: -&gt;(_,result) { result == false },\n    skip_after_callbacks_if_terminated: true,\n    scope: [:kind, :name],\n    only: [:before, :around, :after]\n  }.merge!(options)\n\n  types = Array(options.delete(:only))\n\n  callbacks.each do |callback|\n    define_callbacks(callback, options)\n\n    types.each do |type|\n      send(\"_define_#{type}_model_callback\", self, callback)\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/conversion":"<h1 id=\"module-ActiveModel::Conversion\" class=\"module\"> module ActiveModel::Conversion </h1> <section class=\"description\"> <h2 id=\"module-ActiveModel::Conversion-label-Active+Model+Conversion\">Active Model Conversion</h2> <p>Handles default conversions: <a href=\"conversion#method-i-to_model\">#to_model</a>, <a href=\"conversion#method-i-to_key\">#to_key</a>, <a href=\"conversion#method-i-to_param\">#to_param</a>, and to_partial_path.</p> <p>Let's take for example this non-persisted object.</p> <pre class=\"ruby\">class ContactMessage\n  include ActiveModel::Conversion\n\n  # ContactMessage are never persisted in the DB\n  def persisted?\n    false\n  end\nend\n\ncm = ContactMessage.new\ncm.to_model == cm  # =&gt; true\ncm.to_key          # =&gt; nil\ncm.to_param        # =&gt; nil\ncm.to_partial_path # =&gt; \"contact_messages/contact_message\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_key\"> <span class=\"method-name\">to_key</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an <a href=\"../array\">Array</a> of all key attributes if any is set, regardless if the object is persisted or not. Returns <code>nil</code> if there are no key attributes.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Conversion\n  attr_accessor :id\nend\n\nperson = Person.create(id: 1)\nperson.to_key # =&gt; [1]\n</pre> <div class=\"method-source-code\" id=\"to_key-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/conversion.rb, line 53\ndef to_key\n  key = respond_to?(:id) &amp;&amp; id\n  key ? [key] : nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_model\"> <span class=\"method-name\">to_model</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If your object is already designed to implement all of the Active <a href=\"model\">Model</a> you can use the default <code>:to_model</code> implementation, which simply returns <code>self</code>.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Conversion\nend\n\nperson = Person.new\nperson.to_model == person # =&gt; true\n</pre> <p>If your model does not act like an Active <a href=\"model\">Model</a> object, then you should define <code>:to_model</code> yourself returning a proxy object that wraps your object with Active <a href=\"model\">Model</a> compliant methods.</p> <div class=\"method-source-code\" id=\"to_model-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/conversion.rb, line 39\ndef to_model\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_param\"> <span class=\"method-name\">to_param</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <code>string</code> representing the object's key suitable for use in URLs, or <code>nil</code> if <code>persisted?</code> is <code>false</code>.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Conversion\n  attr_accessor :id\n  def persisted?\n    true\n  end\nend\n\nperson = Person.create(id: 1)\nperson.to_param # =&gt; \"1\"\n</pre> <div class=\"method-source-code\" id=\"to_param-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/conversion.rb, line 71\ndef to_param\n  (persisted? &amp;&amp; key = to_key) ? key.join('-') : nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_partial_path\"> <span class=\"method-name\">to_partial_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <code>string</code> identifying the path associated with the object. ActionPack uses this to find a suitable partial to represent the object.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Conversion\nend\n\nperson = Person.new\nperson.to_partial_path # =&gt; \"people/person\"\n</pre> <div class=\"method-source-code\" id=\"to_partial_path-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/conversion.rb, line 84\ndef to_partial_path\n  self.class._to_partial_path\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/dirty":"<h1 id=\"module-ActiveModel::Dirty\" class=\"module\"> module ActiveModel::Dirty </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"attributemethods\">ActiveModel::AttributeMethods</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"module-ActiveModel::Dirty-label-Active+Model+Dirty\">Active Model Dirty</h2> <p>Provides a way to track changes in your object in the same way as Active Record does.</p> <p>The requirements for implementing <a href=\"dirty\">ActiveModel::Dirty</a> are:</p> <ul>\n<li> <p><code>include ActiveModel::Dirty</code> in your object.</p> </li>\n<li> <p>Call <code>define_attribute_methods</code> passing each method you want to track.</p> </li>\n<li> <p>Call <code>attr_name_will_change!</code> before each change to the tracked attribute.</p> </li>\n<li> <p>Call <code>changes_applied</code> after the changes are persisted.</p> </li>\n<li> <p>Call <code>clear_changes_information</code> when you want to reset the changes information.</p> </li>\n<li> <p>Call <code>restore_attributes</code> when you want to restore previous data.</p> </li>\n</ul> <p>A minimal implementation could be:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Dirty\n\n  define_attribute_methods :name\n\n  def name\n    @name\n  end\n\n  def name=(val)\n    name_will_change! unless val == @name\n    @name = val\n  end\n\n  def save\n    # do persistence work\n\n    changes_applied\n  end\n\n  def reload!\n    # get the values from the persistence layer\n\n    clear_changes_information\n  end\n\n  def rollback!\n    restore_attributes\n  end\nend\n</pre> <p>A newly instantiated <code>Person</code> object is unchanged:</p> <pre class=\"ruby\">person = Person.new\nperson.changed? # =&gt; false\n</pre> <p>Change the name:</p> <pre class=\"ruby\">person.name = 'Bob'\nperson.changed?       # =&gt; true\nperson.name_changed?  # =&gt; true\nperson.name_changed?(from: \"Uncle Bob\", to: \"Bob\") # =&gt; true\nperson.name_was       # =&gt; \"Uncle Bob\"\nperson.name_change    # =&gt; [\"Uncle Bob\", \"Bob\"]\nperson.name = 'Bill'\nperson.name_change    # =&gt; [\"Uncle Bob\", \"Bill\"]\n</pre> <p>Save the changes:</p> <pre class=\"ruby\">person.save\nperson.changed?      # =&gt; false\nperson.name_changed? # =&gt; false\n</pre> <p>Reset the changes:</p> <pre class=\"ruby\">person.previous_changes # =&gt; {\"name\" =&gt; [\"Uncle Bob\", \"Bill\"]}\nperson.reload!\nperson.previous_changes # =&gt; {}\n</pre> <p>Rollback the changes:</p> <pre class=\"ruby\">person.name = \"Uncle Bob\"\nperson.rollback!\nperson.name          # =&gt; \"Bill\"\nperson.name_changed? # =&gt; false\n</pre> <p>Assigning the same value leaves the attribute unchanged:</p> <pre class=\"ruby\">person.name = 'Bill'\nperson.name_changed? # =&gt; false\nperson.name_change   # =&gt; nil\n</pre> <p>Which attributes have changed?</p> <pre class=\"ruby\">person.name = 'Bob'\nperson.changed # =&gt; [\"name\"]\nperson.changes # =&gt; {\"name\" =&gt; [\"Bill\", \"Bob\"]}\n</pre> <p>If an attribute is modified in-place then make use of +[attribute_name]_will_change!+ to mark that the attribute is changing. Otherwise Active <a href=\"model\">Model</a> can't track changes to in-place attributes. Note that Active Record can detect in-place modifications automatically. You do not need to call +[attribute_name]_will_change!+ on Active Record models.</p> <pre class=\"ruby\">person.name_will_change!\nperson.name_change # =&gt; [\"Bill\", \"Bill\"]\nperson.name &lt;&lt; 'y'\nperson.name_change # =&gt; [\"Bill\", \"Billy\"]\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-changed\"> <span class=\"method-name\">changed</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array with the name of the attributes with unsaved changes.</p> <pre class=\"ruby\">person.changed # =&gt; []\nperson.name = 'bob'\nperson.changed # =&gt; [\"name\"]\n</pre> <div class=\"method-source-code\" id=\"changed-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/dirty.rb, line 137\ndef changed\n  changed_attributes.keys\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-changed-3F\"> <span class=\"method-name\">changed?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if any attribute have unsaved changes, <code>false</code> otherwise.</p> <pre class=\"ruby\">person.changed? # =&gt; false\nperson.name = 'bob'\nperson.changed? # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"changed-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/dirty.rb, line 128\ndef changed?\n  changed_attributes.present?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-changed_attributes\"> <span class=\"method-name\">changed_attributes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash of the attributes with unsaved changes indicating their original values like <code>attr =&gt; original value</code>.</p> <pre class=\"ruby\">person.name # =&gt; \"bob\"\nperson.name = 'robert'\nperson.changed_attributes # =&gt; {\"name\" =&gt; \"bob\"}\n</pre> <div class=\"method-source-code\" id=\"changed_attributes-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/dirty.rb, line 167\ndef changed_attributes\n  @changed_attributes ||= ActiveSupport::HashWithIndifferentAccess.new\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"dirty#method-i-attributes_changed_by_setter\">attributes_changed_by_setter</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-changes\"> <span class=\"method-name\">changes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash of changed attributes indicating their original and new values like <code>attr =&gt; [original value, new value]</code>.</p> <pre class=\"ruby\">person.changes # =&gt; {}\nperson.name = 'bob'\nperson.changes # =&gt; { \"name\" =&gt; [\"bill\", \"bob\"] }\n</pre> <div class=\"method-source-code\" id=\"changes-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/dirty.rb, line 147\ndef changes\n  ActiveSupport::HashWithIndifferentAccess[changed.map { |attr| [attr, attribute_change(attr)] }]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-previous_changes\"> <span class=\"method-name\">previous_changes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash of attributes that were changed before the model was saved.</p> <pre class=\"ruby\">person.name # =&gt; \"bob\"\nperson.name = 'robert'\nperson.save\nperson.previous_changes # =&gt; {\"name\" =&gt; [\"bob\", \"robert\"]}\n</pre> <div class=\"method-source-code\" id=\"previous_changes-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/dirty.rb, line 157\ndef previous_changes\n  @previously_changed ||= ActiveSupport::HashWithIndifferentAccess.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-restore_attributes\"> <span class=\"method-name\">restore_attributes</span><span class=\"method-args\">(attributes = changed)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Restore all previous data of the provided attributes.</p> <div class=\"method-source-code\" id=\"restore_attributes-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/dirty.rb, line 185\ndef restore_attributes(attributes = changed)\n  attributes.each { |attr| restore_attribute! attr }\nend</pre> </div> </div> </div> </section> <section id=\"private-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Private Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-changes_applied\"> <span class=\"method-name\">changes_applied</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes current changes and makes them accessible through <code>previous_changes</code>.</p> <div class=\"method-source-code\" id=\"changes_applied-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/dirty.rb, line 197\ndef changes_applied # :doc:\n  @previously_changed = changes\n  @changed_attributes = ActiveSupport::HashWithIndifferentAccess.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_attribute_changes\"> <span class=\"method-name\">clear_attribute_changes</span><span class=\"method-args\">(attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove changes information for the provided attributes.</p> <div class=\"method-source-code\" id=\"clear_attribute_changes-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/dirty.rb, line 263\ndef clear_attribute_changes(attributes) # :doc:\n  attributes_changed_by_setter.except!(*attributes)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_changes_information\"> <span class=\"method-name\">clear_changes_information</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clear all dirty data: current changes and previous changes.</p> <div class=\"method-source-code\" id=\"clear_changes_information-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/dirty.rb, line 203\ndef clear_changes_information # :doc:\n  @previously_changed = ActiveSupport::HashWithIndifferentAccess.new\n  @changed_attributes = ActiveSupport::HashWithIndifferentAccess.new\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/errors":"<h1 id=\"class-ActiveModel::Errors\" class=\"class\"> class ActiveModel::Errors </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../enumerable\">Enumerable</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveModel::Errors-label-Active+Model+Errors\">Active Model Errors</h2> <p>Provides a modified <code>Hash</code> that you can include in your object for handling error messages and interacting with Action View helpers.</p> <p>A minimal implementation could be:</p> <pre class=\"ruby\">class Person\n  # Required dependency for ActiveModel::Errors\n  extend ActiveModel::Naming\n\n  def initialize\n    @errors = ActiveModel::Errors.new(self)\n  end\n\n  attr_accessor :name\n  attr_reader   :errors\n\n  def validate!\n    errors.add(:name, \"cannot be nil\") if name.nil?\n  end\n\n  # The following methods are needed to be minimally implemented\n\n  def read_attribute_for_validation(attr)\n    send(attr)\n  end\n\n  def Person.human_attribute_name(attr, options = {})\n    attr\n  end\n\n  def Person.lookup_ancestors\n    [self]\n  end\nend\n</pre> <p>The last three methods are required in your object for <a href=\"errors\">Errors</a> to be able to generate error messages correctly and also handle multiple languages. Of course, if you extend your object with <a href=\"translation\">ActiveModel::Translation</a> you will not need to implement the last two. Likewise, using <a href=\"validations\">ActiveModel::Validations</a> will handle the validation related methods for you.</p> <p>The above allows you to do:</p> <pre class=\"ruby\">person = Person.new\nperson.validate!            # =&gt; [\"cannot be nil\"]\nperson.errors.full_messages # =&gt; [\"name cannot be nil\"]\n# etc..\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"CALLBACKS_OPTIONS\">CALLBACKS_OPTIONS </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-messages\"> <span class=\"method-name\">messages</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(base)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Pass in the instance of the object that is using the errors object.</p> <pre class=\"ruby\">class Person\n  def initialize\n    @errors = ActiveModel::Errors.new(self)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 70\ndef initialize(base)\n  @base     = base\n  @messages = {}\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>When passed a symbol or a name of a method, returns an array of errors for the method.</p> <pre class=\"ruby\">person.errors[:name]  # =&gt; [\"cannot be nil\"]\nperson.errors['name'] # =&gt; [\"cannot be nil\"]\n</pre> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 135\ndef [](attribute)\n  get(attribute.to_sym) || set(attribute.to_sym, [])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(attribute, error)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds to the supplied attribute the supplied error message.</p> <pre class=\"ruby\">person.errors[:name] = \"must be set\"\nperson.errors[:name] # =&gt; ['must be set']\n</pre> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 143\ndef []=(attribute, error)\n  self[attribute] &lt;&lt; error\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add\"> <span class=\"method-name\">add</span><span class=\"method-args\">(attribute, message = :invalid, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds <code>message</code> to the error messages on <code>attribute</code>. More than one error can be added to the same <code>attribute</code>. If no <code>message</code> is supplied, <code>:invalid</code> is assumed.</p> <pre class=\"ruby\">person.errors.add(:name)\n# =&gt; [\"is invalid\"]\nperson.errors.add(:name, 'must be implemented')\n# =&gt; [\"is invalid\", \"must be implemented\"]\n\nperson.errors.messages\n# =&gt; {:name=&gt;[\"must be implemented\", \"is invalid\"]}\n</pre> <p>If <code>message</code> is a symbol, it will be translated using the appropriate scope (see <code>generate_message</code>).</p> <p>If <code>message</code> is a proc, it will be called, allowing for things like <code>Time.now</code> to be used within an error.</p> <p>If the <code>:strict</code> option is set to <code>true</code>, it will raise <a href=\"strictvalidationfailed\">ActiveModel::StrictValidationFailed</a> instead of adding the error. <code>:strict</code> option can also be set to any other exception.</p> <pre class=\"ruby\">person.errors.add(:name, nil, strict: true)\n# =&gt; ActiveModel::StrictValidationFailed: name is invalid\nperson.errors.add(:name, nil, strict: NameIsInvalid)\n# =&gt; NameIsInvalid: name is invalid\n\nperson.errors.messages # =&gt; {}\n</pre> <p><code>attribute</code> should be set to <code>:base</code> if the error is not directly associated with a single attribute.</p> <pre class=\"ruby\">person.errors.add(:base, \"either name or email must be present\")\nperson.errors.messages\n# =&gt; {:base=&gt;[\"either name or email must be present\"]}\n</pre> <div class=\"method-source-code\" id=\"add-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 298\ndef add(attribute, message = :invalid, options = {})\n  message = normalize_message(attribute, message, options)\n  if exception = options[:strict]\n    exception = ActiveModel::StrictValidationFailed if exception == true\n    raise exception, full_message(attribute, message)\n  end\n\n  self[attribute] &lt;&lt; message\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_on_blank\"> <span class=\"method-name\">add_on_blank</span><span class=\"method-args\">(attributes, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Will add an error message to each of the attributes in <code>attributes</code> that is blank (using <a href=\"../object#method-i-blank-3F\">Object#blank?</a>).</p> <pre class=\"ruby\">person.errors.add_on_blank(:name)\nperson.errors.messages\n# =&gt; {:name=&gt;[\"can't be blank\"]}\n</pre> <div class=\"method-source-code\" id=\"add_on_blank-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 328\ndef add_on_blank(attributes, options = {})\n  Array(attributes).each do |attribute|\n    value = @base.send(:read_attribute_for_validation, attribute)\n    add(attribute, :blank, options) if value.blank?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_on_empty\"> <span class=\"method-name\">add_on_empty</span><span class=\"method-args\">(attributes, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Will add an error message to each of the attributes in <code>attributes</code> that is empty.</p> <pre class=\"ruby\">person.errors.add_on_empty(:name)\nperson.errors.messages\n# =&gt; {:name=&gt;[\"can't be empty\"]}\n</pre> <div class=\"method-source-code\" id=\"add_on_empty-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 314\ndef add_on_empty(attributes, options = {})\n  Array(attributes).each do |attribute|\n    value = @base.send(:read_attribute_for_validation, attribute)\n    is_empty = value.respond_to?(:empty?) ? value.empty? : false\n    add(attribute, :empty, options) if value.nil? || is_empty\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-added-3F\"> <span class=\"method-name\">added?</span><span class=\"method-args\">(attribute, message = :invalid, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if an error on the attribute with the given message is present, <code>false</code> otherwise. <code>message</code> is treated the same as for <code>add</code>.</p> <pre class=\"ruby\">person.errors.add :name, :blank\nperson.errors.added? :name, :blank # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"added-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 340\ndef added?(attribute, message = :invalid, options = {})\n  message = normalize_message(attribute, message, options)\n  self[attribute].include? message\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-as_json\"> <span class=\"method-name\">as_json</span><span class=\"method-args\">(options=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../hash\">Hash</a> that can be used as the JSON representation for this object. You can pass the <code>:full_messages</code> option. This determines if the json object should contain full messages or not (false by default).</p> <pre class=\"ruby\">person.errors.as_json                      # =&gt; {:name=&gt;[\"cannot be nil\"]}\nperson.errors.as_json(full_messages: true) # =&gt; {:name=&gt;[\"name cannot be nil\"]}\n</pre> <div class=\"method-source-code\" id=\"as_json-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 244\ndef as_json(options=nil)\n  to_hash(options &amp;&amp; options[:full_messages])\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-blank-3F\"> <span class=\"method-name\">blank?</span><span class=\"method-args\">()</span> </div> <div class=\"method-description\"> <p>aliases empty?</p> </div> <div class=\"aliases\"> Alias for: <a href=\"errors#method-i-empty-3F\">empty?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clear the error messages.</p> <pre class=\"ruby\">person.errors.full_messages # =&gt; [\"name cannot be nil\"]\nperson.errors.clear\nperson.errors.full_messages # =&gt; []\n</pre> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 85\ndef clear\n  messages.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-count\"> <span class=\"method-name\">count</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the number of error messages.</p> <pre class=\"ruby\">person.errors.add(:name, \"can't be blank\")\nperson.errors.count # =&gt; 1\nperson.errors.add(:name, \"must be specified\")\nperson.errors.count # =&gt; 2\n</pre> <div class=\"method-source-code\" id=\"count-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 208\ndef count\n  to_a.size\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delete messages for <code>key</code>. Returns the deleted messages.</p> <pre class=\"ruby\">person.errors.get(:name)    # =&gt; [\"cannot be nil\"]\nperson.errors.delete(:name) # =&gt; [\"cannot be nil\"]\nperson.errors.get(:name)    # =&gt; nil\n</pre> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 126\ndef delete(key)\n  messages.delete(key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">() { |attribute, error| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Iterates through each error key, value pair in the error messages hash. Yields the attribute and the error for that attribute. If the attribute has more than one error message, yields once for each error message.</p> <pre class=\"ruby\">person.errors.add(:name, \"can't be blank\")\nperson.errors.each do |attribute, error|\n  # Will yield :name and \"can't be blank\"\nend\n\nperson.errors.add(:name, \"must be specified\")\nperson.errors.each do |attribute, error|\n  # Will yield :name and \"can't be blank\"\n  # then yield :name and \"must be specified\"\nend\n</pre> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 161\ndef each\n  messages.each_key do |attribute|\n    self[attribute].each { |error| yield attribute, error }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-empty-3F\"> <span class=\"method-name\">empty?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if no errors are found, <code>false</code> otherwise. If the error message is a string it can be empty.</p> <pre class=\"ruby\">person.errors.full_messages # =&gt; [\"name cannot be nil\"]\nperson.errors.empty?        # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"empty-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 217\ndef empty?\n  all? { |k, v| v &amp;&amp; v.empty? &amp;&amp; !v.is_a?(String) }\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"errors#method-i-blank-3F\">blank?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-full_message\"> <span class=\"method-name\">full_message</span><span class=\"method-args\">(attribute, message)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a full message for a given attribute.</p> <pre class=\"ruby\">person.errors.full_message(:name, 'is invalid') # =&gt; \"Name is invalid\"\n</pre> <div class=\"method-source-code\" id=\"full_message-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 376\ndef full_message(attribute, message)\n  return message if attribute == :base\n  attr_name = attribute.to_s.tr('.', '_').humanize\n  attr_name = @base.class.human_attribute_name(attribute, default: attr_name)\n  I18n.t(:\"errors.format\", {\n    default:  \"%{attribute} %{message}\",\n    attribute: attr_name,\n    message:   message\n  })\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-full_messages\"> <span class=\"method-name\">full_messages</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all the full error messages in an array.</p> <pre class=\"ruby\">class Person\n  validates_presence_of :name, :address, :email\n  validates_length_of :name, in: 5..30\nend\n\nperson = Person.create(address: '123 First St.')\nperson.errors.full_messages\n# =&gt; [\"Name is too short (minimum is 5 characters)\", \"Name can't be blank\", \"Email can't be blank\"]\n</pre> <div class=\"method-source-code\" id=\"full_messages-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 355\ndef full_messages\n  map { |attribute, message| full_message(attribute, message) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-full_messages_for\"> <span class=\"method-name\">full_messages_for</span><span class=\"method-args\">(attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all the full error messages for a given attribute in an array.</p> <pre class=\"ruby\">class Person\n  validates_presence_of :name, :email\n  validates_length_of :name, in: 5..30\nend\n\nperson = Person.create()\nperson.errors.full_messages_for(:name)\n# =&gt; [\"Name is too short (minimum is 5 characters)\", \"Name can't be blank\"]\n</pre> <div class=\"method-source-code\" id=\"full_messages_for-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 369\ndef full_messages_for(attribute)\n  (get(attribute) || []).map { |message| full_message(attribute, message) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-generate_message\"> <span class=\"method-name\">generate_message</span><span class=\"method-args\">(attribute, type = :invalid, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Translates an error message in its default scope (<code>activemodel.errors.messages</code>).</p> <p>Error messages are first looked up in <code>models.MODEL.attributes.ATTRIBUTE.MESSAGE</code>, if it's not there, it's looked up in <code>models.MODEL.MESSAGE</code> and if that is not there also, it returns the translation of the default message (e.g. <code>activemodel.errors.messages.MESSAGE</code>). The translated model name, translated attribute name and the value are available for interpolation.</p> <p>When using inheritance in your models, it will check all the inherited models too, but only if the model itself hasn't been found. Say you have <code>class Admin &lt; User; end</code> and you wanted the translation for the <code>:blank</code> error message for the <code>title</code> attribute, it looks for these translations:</p> <ul>\n<li> <p><code>activemodel.errors.models.admin.attributes.title.blank</code></p> </li>\n<li> <p><code>activemodel.errors.models.admin.blank</code></p> </li>\n<li> <p><code>activemodel.errors.models.user.attributes.title.blank</code></p> </li>\n<li> <p><code>activemodel.errors.models.user.blank</code></p> </li>\n<li> <p>any default you provided through the <code>options</code> hash (in the <code>activemodel.errors</code> scope)</p> </li>\n<li> <p><code>activemodel.errors.messages.blank</code></p> </li>\n<li> <p><code>errors.attributes.title.blank</code></p> </li>\n<li> <p><code>errors.messages.blank</code></p> </li>\n</ul> <div class=\"method-source-code\" id=\"generate_message-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 411\ndef generate_message(attribute, type = :invalid, options = {})\n  type = options.delete(:message) if options[:message].is_a?(Symbol)\n\n  if @base.class.respond_to?(:i18n_scope)\n    defaults = @base.class.lookup_ancestors.map do |klass|\n      [ :\"#{@base.class.i18n_scope}.errors.models.#{klass.model_name.i18n_key}.attributes.#{attribute}.#{type}\",\n        :\"#{@base.class.i18n_scope}.errors.models.#{klass.model_name.i18n_key}.#{type}\" ]\n    end\n  else\n    defaults = []\n  end\n\n  defaults &lt;&lt; options.delete(:message)\n  defaults &lt;&lt; :\"#{@base.class.i18n_scope}.errors.messages.#{type}\" if @base.class.respond_to?(:i18n_scope)\n  defaults &lt;&lt; :\"errors.attributes.#{attribute}.#{type}\"\n  defaults &lt;&lt; :\"errors.messages.#{type}\"\n\n  defaults.compact!\n  defaults.flatten!\n\n  key = defaults.shift\n  value = (attribute != :base ? @base.send(:read_attribute_for_validation, attribute) : nil)\n\n  options = {\n    default: defaults,\n    model: @base.model_name.human,\n    attribute: @base.class.human_attribute_name(attribute),\n    value: value\n  }.merge!(options)\n\n  I18n.translate(key, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-get\"> <span class=\"method-name\">get</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get messages for <code>key</code>.</p> <pre class=\"ruby\">person.errors.messages   # =&gt; {:name=&gt;[\"cannot be nil\"]}\nperson.errors.get(:name) # =&gt; [\"cannot be nil\"]\nperson.errors.get(:age)  # =&gt; nil\n</pre> <div class=\"method-source-code\" id=\"get-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 108\ndef get(key)\n  messages[key]\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-has_key-3F\"> <span class=\"method-name\">has_key?</span><span class=\"method-args\">(attribute)</span> </div> <div class=\"method-description\"> <p>aliases include?</p> </div> <div class=\"aliases\"> Alias for: <a href=\"errors#method-i-include-3F\">include?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-include-3F\"> <span class=\"method-name\">include?</span><span class=\"method-args\">(attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the error messages include an error for the given key <code>attribute</code>, <code>false</code> otherwise.</p> <pre class=\"ruby\">person.errors.messages        # =&gt; {:name=&gt;[\"cannot be nil\"]}\nperson.errors.include?(:name) # =&gt; true\nperson.errors.include?(:age)  # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"include-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 95\ndef include?(attribute)\n  messages[attribute].present?\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"errors#method-i-has_key-3F\">has_key?</a>, <a href=\"errors#method-i-key-3F\">key?</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-key-3F\"> <span class=\"method-name\">key?</span><span class=\"method-args\">(attribute)</span> </div> <div class=\"method-description\"> <p>aliases include?</p> </div> <div class=\"aliases\"> Alias for: <a href=\"errors#method-i-include-3F\">include?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-keys\"> <span class=\"method-name\">keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all message keys.</p> <pre class=\"ruby\">person.errors.messages # =&gt; {:name=&gt;[\"cannot be nil\", \"must be specified\"]}\nperson.errors.keys     # =&gt; [:name]\n</pre> <div class=\"method-source-code\" id=\"keys-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 189\ndef keys\n  messages.keys\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set\"> <span class=\"method-name\">set</span><span class=\"method-args\">(key, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set messages for <code>key</code> to <code>value</code>.</p> <pre class=\"ruby\">person.errors.get(:name) # =&gt; [\"cannot be nil\"]\nperson.errors.set(:name, [\"can't be nil\"])\nperson.errors.get(:name) # =&gt; [\"can't be nil\"]\n</pre> <div class=\"method-source-code\" id=\"set-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 117\ndef set(key, value)\n  messages[key] = value\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-size\"> <span class=\"method-name\">size</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the number of error messages.</p> <pre class=\"ruby\">person.errors.add(:name, \"can't be blank\")\nperson.errors.size # =&gt; 1\nperson.errors.add(:name, \"must be specified\")\nperson.errors.size # =&gt; 2\n</pre> <div class=\"method-source-code\" id=\"size-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 173\ndef size\n  values.flatten.size\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_a\"> <span class=\"method-name\">to_a</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of error messages, with the attribute name included.</p> <pre class=\"ruby\">person.errors.add(:name, \"can't be blank\")\nperson.errors.add(:name, \"must be specified\")\nperson.errors.to_a # =&gt; [\"name can't be blank\", \"name must be specified\"]\n</pre> <div class=\"method-source-code\" id=\"to_a-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 198\ndef to_a\n  full_messages\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_hash\"> <span class=\"method-name\">to_hash</span><span class=\"method-args\">(full_messages = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../hash\">Hash</a> of attributes with their error messages. If <code>full_messages</code> is <code>true</code>, it will contain full messages (see <code>full_message</code>).</p> <pre class=\"ruby\">person.errors.to_hash       # =&gt; {:name=&gt;[\"cannot be nil\"]}\nperson.errors.to_hash(true) # =&gt; {:name=&gt;[\"name cannot be nil\"]}\n</pre> <div class=\"method-source-code\" id=\"to_hash-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 253\ndef to_hash(full_messages = false)\n  if full_messages\n    self.messages.each_with_object({}) do |(attribute, array), messages|\n      messages[attribute] = array.map { |message| full_message(attribute, message) }\n    end\n  else\n    self.messages.dup\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xml\"> <span class=\"method-name\">to_xml</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an xml formatted representation of the <a href=\"errors\">Errors</a> hash.</p> <pre class=\"ruby\">person.errors.add(:name, \"can't be blank\")\nperson.errors.add(:name, \"must be specified\")\nperson.errors.to_xml\n# =&gt;\n#  &lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;\n#  &lt;errors&gt;\n#    &lt;error&gt;name can't be blank&lt;/error&gt;\n#    &lt;error&gt;name must be specified&lt;/error&gt;\n#  &lt;/errors&gt;\n</pre> <div class=\"method-source-code\" id=\"to_xml-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 234\ndef to_xml(options={})\n  to_a.to_xml({ root: \"errors\", skip_types: true }.merge!(options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-values\"> <span class=\"method-name\">values</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all message values.</p> <pre class=\"ruby\">person.errors.messages # =&gt; {:name=&gt;[\"cannot be nil\", \"must be specified\"]}\nperson.errors.values   # =&gt; [[\"cannot be nil\", \"must be specified\"]]\n</pre> <div class=\"method-source-code\" id=\"values-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/errors.rb, line 181\ndef values\n  messages.values\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/forbiddenattributeserror":"<h1 id=\"class-ActiveModel::ForbiddenAttributesError\" class=\"class\"> class ActiveModel::ForbiddenAttributesError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">StandardError</dd>\n</dl> <section class=\"description\"> <p>Raised when forbidden attributes are used for mass assignment.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nparams = ActionController::Parameters.new(name: 'Bob')\nPerson.new(params)\n# =&gt; ActiveModel::ForbiddenAttributesError\n\nparams.permit!\nPerson.new(params)\n# =&gt; #&lt;Person id: nil, name: \"Bob\"&gt;\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/lint/tests":"<h1 id=\"module-ActiveModel::Lint::Tests\" class=\"module\"> module ActiveModel::Lint::Tests </h1> <section class=\"description\"> <h2 id=\"module-ActiveModel::Lint::Tests-label-Active+Model+Lint+Tests\">Active Model Lint Tests</h2> <p>You can test whether an object is compliant with the Active Model API by including <code>ActiveModel::Lint::Tests</code> in your TestCase. It will include tests that tell you whether your object is fully compliant, or if not, which aspects of the API are not implemented.</p> <p>Note an object is not required to implement all APIs in order to work with Action Pack. This module only intends to provide guidance in case you want all features out of the box.</p> <p>These tests do not attempt to determine the semantic correctness of the returned values. For instance, you could implement <code>valid?</code> to always return <code>true</code>, and the tests would pass. It is up to you to ensure that the values are semantically meaningful.</p> <p>Objects you pass in are expected to return a compliant object from a call to <code>to_model</code>. It is perfectly fine for <code>to_model</code> to return <code>self</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-test_errors_aref\"> <span class=\"method-name\">test_errors_aref</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <h2 id=\"method-i-test_errors_aref-label-Errors+Testing\">Errors Testing</h2> <p>Returns an object that implements [](attribute) defined which returns an <a href=\"../../array\">Array</a> of Strings that are the errors for the attribute in question. If localization is used, the Strings should be localized for the current locale. If no error is present, this method should return an empty <a href=\"../../array\">Array</a>.</p> <div class=\"method-source-code\" id=\"test_errors_aref-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/lint.rb, line 97\ndef test_errors_aref\n  assert model.respond_to?(:errors), \"The model should respond to errors\"\n  assert model.errors[:hello].is_a?(Array), \"errors#[] should return an Array\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-test_model_naming\"> <span class=\"method-name\">test_model_naming</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <h2 id=\"method-i-test_model_naming-label-Naming\">Naming</h2> <p>Model.model_name and Model#model_name must return a string with some convenience methods: # <code>:human</code>, <code>:singular</code> and <code>:plural</code>. Check <a href=\"../naming\">ActiveModel::Naming</a> for more information.</p> <div class=\"method-source-code\" id=\"test_model_naming-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/lint.rb, line 79\ndef test_model_naming\n  assert model.class.respond_to?(:model_name), \"The model class should respond to model_name\"\n  model_name = model.class.model_name\n  assert model_name.respond_to?(:to_str)\n  assert model_name.human.respond_to?(:to_str)\n  assert model_name.singular.respond_to?(:to_str)\n  assert model_name.plural.respond_to?(:to_str)\n\n  assert model.respond_to?(:model_name), \"The model instance should respond to model_name\"\n  assert_equal model.model_name, model.class.model_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-test_persisted-3F\"> <span class=\"method-name\">test_persisted?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <h2 id=\"method-i-test_persisted-3F-label-Responds+to+persisted-3F\">Responds to <code>persisted?</code>\n</h2> <p>Returns a boolean that specifies whether the object has been persisted yet. This is used when calculating the URL for an object. If the object is not persisted, a form for that object, for instance, will route to the create action. If it is persisted, a form for the object will routes to the update action.</p> <div class=\"method-source-code\" id=\"test_persisted-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/lint.rb, line 69\ndef test_persisted?\n  assert model.respond_to?(:persisted?), \"The model should respond to persisted?\"\n  assert_boolean model.persisted?, \"persisted?\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-test_to_key\"> <span class=\"method-name\">test_to_key</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <h2 id=\"method-i-test_to_key-label-Responds+to+to_key\">Responds to <code>to_key</code>\n</h2> <p>Returns an <a href=\"../../enumerable\">Enumerable</a> of all (primary) key attributes or nil if <code>model.persisted?</code> is false. This is used by <code>dom_id</code> to generate unique ids for the object.</p> <div class=\"method-source-code\" id=\"test_to_key-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/lint.rb, line 29\ndef test_to_key\n  assert model.respond_to?(:to_key), \"The model should respond to to_key\"\n  def model.persisted?() false end\n  assert model.to_key.nil?, \"to_key should return nil when `persisted?` returns false\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-test_to_param\"> <span class=\"method-name\">test_to_param</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <h2 id=\"method-i-test_to_param-label-Responds+to+to_param\">Responds to <code>to_param</code>\n</h2> <p>Returns a string representing the object's key suitable for use in URLs or <code>nil</code> if <code>model.persisted?</code> is <code>false</code>.</p> <p>Implementers can decide to either raise an exception or provide a default in case the record uses a composite primary key. There are no tests for this behavior in lint because it doesn't make sense to force any of the possible implementation strategies on the implementer. However, if the resource is not persisted?, then <code>to_param</code> should always return <code>nil</code>.</p> <div class=\"method-source-code\" id=\"test_to_param-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/lint.rb, line 46\ndef test_to_param\n  assert model.respond_to?(:to_param), \"The model should respond to to_param\"\n  def model.to_key() [1] end\n  def model.persisted?() false end\n  assert model.to_param.nil?, \"to_param should return nil when `persisted?` returns false\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-test_to_partial_path\"> <span class=\"method-name\">test_to_partial_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <h2 id=\"method-i-test_to_partial_path-label-Responds+to+to_partial_path\">Responds to <code>to_partial_path</code>\n</h2> <p>Returns a string giving a relative path. This is used for looking up partials. For example, a BlogPost model might return “blog_posts/blog_post”</p> <div class=\"method-source-code\" id=\"test_to_partial_path-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/lint.rb, line 57\ndef test_to_partial_path\n  assert model.respond_to?(:to_partial_path), \"The model should respond to to_partial_path\"\n  assert_kind_of String, model.to_partial_path\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/missingattributeerror":"<h1 id=\"class-ActiveModel::MissingAttributeError\" class=\"class\"> class ActiveModel::MissingAttributeError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">NoMethodError</dd>\n</dl> <section class=\"description\"> <p>Raised when an attribute is not defined.</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nuser = User.first\nuser.pets.select(:id).first.user_id\n# =&gt; ActiveModel::MissingAttributeError: missing attribute: user_id\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/model":"<h1 id=\"module-ActiveModel::Model\" class=\"module\"> module ActiveModel::Model </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"validations\">ActiveModel::Validations</a>, <a class=\"include\" href=\"conversion\">ActiveModel::Conversion</a>\n</dd>\n</dl> <section class=\"description\"> <h2 id=\"module-ActiveModel::Model-label-Active+Model+Basic+Model\">Active Model Basic Model</h2> <p>Includes the required interface for an object to interact with <code>ActionPack</code>, using different <code>ActiveModel</code> modules. It includes model name introspections, conversions, translations and validations. Besides that, it allows you to initialize the object with a hash of attributes, pretty much like <code>ActiveRecord</code> does.</p> <p>A minimal implementation could be:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Model\n  attr_accessor :name, :age\nend\n\nperson = Person.new(name: 'bob', age: '18')\nperson.name # =&gt; \"bob\"\nperson.age  # =&gt; \"18\"\n</pre> <p>Note that, by default, <code>ActiveModel::Model</code> implements <code>persisted?</code> to return <code>false</code>, which is the most common case. You may want to override it in your class to simulate a different scenario:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Model\n  attr_accessor :id, :name\n\n  def persisted?\n    self.id == 1\n  end\nend\n\nperson = Person.new(id: 1, name: 'bob')\nperson.persisted? # =&gt; true\n</pre> <p>Also, if for some reason you need to run code on <code>initialize</code>, make sure you call <code>super</code> if you want the attributes hash initialization to happen.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Model\n  attr_accessor :id, :name, :omg\n\n  def initialize(attributes={})\n    super\n    @omg ||= true\n  end\nend\n\nperson = Person.new(id: 1, name: 'bob')\nperson.omg # =&gt; true\n</pre> <p>For more detailed information on other functionalities available, please refer to the specific modules included in <code>ActiveModel::Model</code> (see below).</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(params={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Initializes a new model with the given <code>params</code>.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Model\n  attr_accessor :name, :age\nend\n\nperson = Person.new(name: 'bob', age: '18')\nperson.name # =&gt; \"bob\"\nperson.age  # =&gt; \"18\"\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/model.rb, line 78\ndef initialize(params={})\n  params.each do |attr, value|\n    self.public_send(\"#{attr}=\", value)\n  end if params\n\n  super()\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-persisted-3F\"> <span class=\"method-name\">persisted?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Indicates if the model is persisted. Default is <code>false</code>.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Model\n  attr_accessor :id, :name\nend\n\nperson = Person.new(id: 1, name: 'bob')\nperson.persisted? # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"persisted-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/model.rb, line 95\ndef persisted?\n  false\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/name":"<h1 id=\"class-ActiveModel::Name\" class=\"class\"> class ActiveModel::Name </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-cache_key\"> <span class=\"method-name\">cache_key</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-collection\"> <span class=\"method-name\">collection</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-element\"> <span class=\"method-name\">element</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-i18n_key\"> <span class=\"method-name\">i18n_key</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-name\"> <span class=\"method-name\">name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-param_key\"> <span class=\"method-name\">param_key</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-plural\"> <span class=\"method-name\">plural</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-route_key\"> <span class=\"method-name\">route_key</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-singular\"> <span class=\"method-name\">singular</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-singular_route_key\"> <span class=\"method-name\">singular_route_key</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(klass, namespace = nil, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"name\">ActiveModel::Name</a> instance. By default, the <code>namespace</code> and <code>name</code> option will take the namespace and name of the given class respectively.</p> <pre class=\"ruby\">module Foo\n  class Bar\n  end\nend\n\nActiveModel::Name.new(Foo::Bar).to_s\n# =&gt; \"Foo::Bar\"\n</pre> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/naming.rb, line 146\ndef initialize(klass, namespace = nil, name = nil)\n  @name = name || klass.name\n\n  raise ArgumentError, \"Class name cannot be blank. You need to supply a name argument when anonymous class given\" if @name.blank?\n\n  @unnamespaced = @name.sub(/^#{namespace.name}::/, '') if namespace\n  @klass        = klass\n  @singular     = _singularize(@name)\n  @plural       = ActiveSupport::Inflector.pluralize(@singular)\n  @element      = ActiveSupport::Inflector.underscore(ActiveSupport::Inflector.demodulize(@name))\n  @human        = ActiveSupport::Inflector.humanize(@element)\n  @collection   = ActiveSupport::Inflector.tableize(@name)\n  @param_key    = (namespace ? _singularize(@unnamespaced) : @singular)\n  @i18n_key     = @name.underscore.to_sym\n\n  @route_key          = (namespace ? ActiveSupport::Inflector.pluralize(@param_key) : @plural.dup)\n  @singular_route_key = ActiveSupport::Inflector.singularize(@route_key)\n  @route_key &lt;&lt; \"_index\" if @plural == @singular\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-21-7E\"> <span class=\"method-callseq\"> !~(regexp) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>String#!~</code>. Match the class name against the given regexp. Returns <code>true</code> if there is no match, otherwise <code>false</code>.</p> <pre class=\"ruby\">class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name !~ /Post/ # =&gt; false\nBlogPost.model_name !~ /\\d/   # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"21-7E-source\"> <pre class=\"c\"># File activemodel/lib/active_model/naming.rb, line 95\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3D-3E\"> <span class=\"method-callseq\"> ==(other) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>String#&lt;=&gt;</code>.</p> <pre class=\"ruby\">class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name &lt;=&gt; 'BlogPost'  # =&gt; 0\nBlogPost.model_name &lt;=&gt; 'Blog'      # =&gt; 1\nBlogPost.model_name &lt;=&gt; 'BlogPosts' # =&gt; -1\n</pre> <div class=\"method-source-code\" id=\"3C-3D-3E-source\"> <pre class=\"c\"># File activemodel/lib/active_model/naming.rb, line 62\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D\"> <span class=\"method-callseq\"> ==(other) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>String#==</code>. Returns <code>true</code> if the class name and <code>other</code> are equal, otherwise <code>false</code>.</p> <pre class=\"ruby\">class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name == 'BlogPost'  # =&gt; true\nBlogPost.model_name == 'Blog Post' # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"3D-3D-source\"> <pre class=\"c\"># File activemodel/lib/active_model/naming.rb, line 31\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D-3D\"> <span class=\"method-callseq\"> ===(other) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>#==</code>.</p> <pre class=\"ruby\">class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name === 'BlogPost'  # =&gt; true\nBlogPost.model_name === 'Blog Post' # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"3D-3D-3D-source\"> <pre class=\"c\"># File activemodel/lib/active_model/naming.rb, line 46\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-7E\"> <span class=\"method-callseq\"> =~(regexp) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>String#=~</code>. Match the class name against the given regexp. Returns the position where the match starts or <code>nil</code> if there is no match.</p> <pre class=\"ruby\">class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name =~ /Post/ # =&gt; 4\nBlogPost.model_name =~ /\\d/   # =&gt; nil\n</pre> <div class=\"method-source-code\" id=\"3D-7E-source\"> <pre class=\"c\"># File activemodel/lib/active_model/naming.rb, line 79\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eql-3F\"> <span class=\"method-callseq\"> eql?(other) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>String#eql?</code>. Returns <code>true</code> if the class name and <code>other</code> have the same length and content, otherwise <code>false</code>.</p> <pre class=\"ruby\">class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name.eql?('BlogPost')  # =&gt; true\nBlogPost.model_name.eql?('Blog Post') # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"eql-3F-source\"> <pre class=\"c\"># File activemodel/lib/active_model/naming.rb, line 111\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-human\"> <span class=\"method-name\">human</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Transform the model name into a more humane format, using <a href=\"../i18n\">I18n</a>. By default, it will underscore then humanize the class name.</p> <pre class=\"ruby\">class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name.human # =&gt; \"Blog post\"\n</pre> <p>Specify <code>options</code> with additional translating options.</p> <div class=\"method-source-code\" id=\"human-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/naming.rb, line 176\ndef human(options={})\n  return @human unless @klass.respond_to?(:lookup_ancestors) &amp;&amp;\n                       @klass.respond_to?(:i18n_scope)\n\n  defaults = @klass.lookup_ancestors.map do |klass|\n    klass.model_name.i18n_key\n  end\n\n  defaults &lt;&lt; options[:default] if options[:default]\n  defaults &lt;&lt; @human\n\n  options = { scope: [@klass.i18n_scope, :models], count: 1, default: defaults }.merge!(options.except(:default))\n  I18n.translate(defaults.shift, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-callseq\"> to_s() </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the class name.</p> <pre class=\"ruby\">class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name.to_s # =&gt; \"BlogPost\"\n</pre> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"c\"># File activemodel/lib/active_model/naming.rb, line 125\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_str\"> <span class=\"method-callseq\"> to_str() </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>to_s</code>.</p> <div class=\"method-source-code\" id=\"to_str-source\"> <pre class=\"c\"># File activemodel/lib/active_model/naming.rb, line 132\ndelegate :==, :===, :&lt;=&gt;, :=~, :\"!~\", :eql?, :to_s,\n         :to_str, :as_json, to: :name\n</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/naming":"<h1 id=\"module-ActiveModel::Naming\" class=\"module\"> module ActiveModel::Naming </h1> <section class=\"description\"> <h2 id=\"module-ActiveModel::Naming-label-Active+Model+Naming\">Active Model Naming</h2> <p>Creates a <code>model_name</code> method on your object.</p> <p>To implement, just extend <a href=\"naming\">ActiveModel::Naming</a> in your object:</p> <pre class=\"ruby\">class BookCover\n  extend ActiveModel::Naming\nend\n\nBookCover.model_name.name   # =&gt; \"BookCover\"\nBookCover.model_name.human  # =&gt; \"Book cover\"\n\nBookCover.model_name.i18n_key              # =&gt; :book_cover\nBookModule::BookCover.model_name.i18n_key  # =&gt; :\"book_module/book_cover\"\n</pre> <p>Providing the functionality that <a href=\"naming\">ActiveModel::Naming</a> provides in your object is required to pass the Active <a href=\"model\">Model</a> <a href=\"lint\">Lint</a> test. So either extending the provided method below, or rolling your own is required.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-param_key\"> <span class=\"method-name\">param_key</span><span class=\"method-args\">(record_or_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns string to use for params names. It differs for namespaced models regarding whether it's inside isolated engine.</p> <pre class=\"ruby\"># For isolated engine:\nActiveModel::Naming.param_key(Blog::Post) # =&gt; \"post\"\n\n# For shared engine:\nActiveModel::Naming.param_key(Blog::Post) # =&gt; \"blog_post\"\n</pre> <div class=\"method-source-code\" id=\"param_key-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/naming.rb, line 303\ndef self.param_key(record_or_class)\n  model_name_from_record_or_class(record_or_class).param_key\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-plural\"> <span class=\"method-name\">plural</span><span class=\"method-args\">(record_or_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the plural class name of a record or class.</p> <pre class=\"ruby\">ActiveModel::Naming.plural(post)             # =&gt; \"posts\"\nActiveModel::Naming.plural(Highrise::Person) # =&gt; \"highrise_people\"\n</pre> <div class=\"method-source-code\" id=\"plural-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/naming.rb, line 248\ndef self.plural(record_or_class)\n  model_name_from_record_or_class(record_or_class).plural\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-route_key\"> <span class=\"method-name\">route_key</span><span class=\"method-args\">(record_or_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns string to use while generating route names. It differs for namespaced models regarding whether it's inside isolated engine.</p> <pre class=\"ruby\"># For isolated engine:\nActiveModel::Naming.route_key(Blog::Post) # =&gt; \"posts\"\n\n# For shared engine:\nActiveModel::Naming.route_key(Blog::Post) # =&gt; \"blog_posts\"\n</pre> <p>The route key also considers if the noun is uncountable and, in such cases, automatically appends _index.</p> <div class=\"method-source-code\" id=\"route_key-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/naming.rb, line 291\ndef self.route_key(record_or_class)\n  model_name_from_record_or_class(record_or_class).route_key\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-singular\"> <span class=\"method-name\">singular</span><span class=\"method-args\">(record_or_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the singular class name of a record or class.</p> <pre class=\"ruby\">ActiveModel::Naming.singular(post)             # =&gt; \"post\"\nActiveModel::Naming.singular(Highrise::Person) # =&gt; \"highrise_person\"\n</pre> <div class=\"method-source-code\" id=\"singular-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/naming.rb, line 256\ndef self.singular(record_or_class)\n  model_name_from_record_or_class(record_or_class).singular\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-singular_route_key\"> <span class=\"method-name\">singular_route_key</span><span class=\"method-args\">(record_or_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns string to use while generating route names. It differs for namespaced models regarding whether it's inside isolated engine.</p> <pre class=\"ruby\"># For isolated engine:\nActiveModel::Naming.singular_route_key(Blog::Post) # =&gt; \"post\"\n\n# For shared engine:\nActiveModel::Naming.singular_route_key(Blog::Post) # =&gt; \"blog_post\"\n</pre> <div class=\"method-source-code\" id=\"singular_route_key-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/naming.rb, line 276\ndef self.singular_route_key(record_or_class)\n  model_name_from_record_or_class(record_or_class).singular_route_key\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-uncountable-3F\"> <span class=\"method-name\">uncountable?</span><span class=\"method-args\">(record_or_class)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Identifies whether the class name of a record or class is uncountable.</p> <pre class=\"ruby\">ActiveModel::Naming.uncountable?(Sheep) # =&gt; true\nActiveModel::Naming.uncountable?(Post)  # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"uncountable-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/naming.rb, line 264\ndef self.uncountable?(record_or_class)\n  plural(record_or_class) == singular(record_or_class)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-model_name\"> <span class=\"method-name\">model_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an <a href=\"name\">ActiveModel::Name</a> object for module. It can be used to retrieve all kinds of naming-related information (See <a href=\"name\">ActiveModel::Name</a> for more information).</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Model\nend\n\nPerson.model_name.name     # =&gt; \"Person\"\nPerson.model_name.class    # =&gt; ActiveModel::Name\nPerson.model_name.singular # =&gt; \"person\"\nPerson.model_name.plural   # =&gt; \"people\"\n</pre> <div class=\"method-source-code\" id=\"model_name-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/naming.rb, line 235\ndef model_name\n  @_model_name ||= begin\n    namespace = self.parents.detect do |n|\n      n.respond_to?(:use_relative_model_naming?) &amp;&amp; n.use_relative_model_naming?\n    end\n    ActiveModel::Name.new(self, namespace)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/securepassword":"<h1 id=\"module-ActiveModel::SecurePassword\" class=\"module\"> module ActiveModel::SecurePassword </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"MAX_PASSWORD_LENGTH_ALLOWED\">MAX_PASSWORD_LENGTH_ALLOWED </dt>\n<dd>\n<p>BCrypt hash function can handle maximum 72 characters, and if we pass password of length more than 72 characters it ignores extra characters. Hence need to put a restriction on password length.</p> </dd>\n</dl> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/securepassword/classmethods":"<h1 id=\"module-ActiveModel::SecurePassword::ClassMethods\" class=\"module\"> module ActiveModel::SecurePassword::ClassMethods </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"instancemethodsonactivation\">ActiveModel::SecurePassword::InstanceMethodsOnActivation</a>, <a class=\"include\" href=\"../validations\">ActiveModel::Validations</a>\n</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-has_secure_password\"> <span class=\"method-name\">has_secure_password</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds methods to set and authenticate against a BCrypt password. This mechanism requires you to have a <code>password_digest</code> attribute.</p> <p>The following validations are added automatically:</p> <ul>\n<li> <p>Password must be present on creation</p> </li>\n<li> <p>Password length should be less than or equal to 72 characters</p> </li>\n<li> <p>Confirmation of password (using a <code>password_confirmation</code> attribute)</p> </li>\n</ul> <p>If password confirmation validation is not needed, simply leave out the value for <code>password_confirmation</code> (i.e. don't provide a form field for it). When this attribute has a <code>nil</code> value, the validation will not be triggered.</p> <p>For further customizability, it is possible to supress the default validations by passing <code>validations: false</code> as an argument.</p> <p>Add bcrypt (~&gt; 3.1.7) to Gemfile to use <a href=\"classmethods#method-i-has_secure_password\">has_secure_password</a>:</p> <pre class=\"ruby\">gem 'bcrypt', '~&gt; 3.1.7'\n</pre> <p>Example using Active Record (which automatically includes <a href=\"../securepassword\">ActiveModel::SecurePassword</a>):</p> <pre class=\"ruby\"># Schema: User(name:string, password_digest:string)\nclass User &lt; ActiveRecord::Base\n  has_secure_password\nend\n\nuser = User.new(name: 'david', password: '', password_confirmation: 'nomatch')\nuser.save                                                       # =&gt; false, password required\nuser.password = 'mUc3m00RsqyRe'\nuser.save                                                       # =&gt; false, confirmation doesn't match\nuser.password_confirmation = 'mUc3m00RsqyRe'\nuser.save                                                       # =&gt; true\nuser.authenticate('notright')                                   # =&gt; false\nuser.authenticate('mUc3m00RsqyRe')                              # =&gt; user\nUser.find_by(name: 'david').try(:authenticate, 'notright')      # =&gt; false\nUser.find_by(name: 'david').try(:authenticate, 'mUc3m00RsqyRe') # =&gt; user\n</pre> <div class=\"method-source-code\" id=\"has_secure_password-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/secure_password.rb, line 53\ndef has_secure_password(options = {})\n  # Load bcrypt gem only when has_secure_password is used.\n  # This is to avoid ActiveModel (and by extension the entire framework)\n  # being dependent on a binary library.\n  begin\n    require 'bcrypt'\n  rescue LoadError\n    $stderr.puts \"You don't have bcrypt installed in your application. Please add it to your Gemfile and run bundle install\"\n    raise\n  end\n\n  include InstanceMethodsOnActivation\n\n  if options.fetch(:validations, true)\n    include ActiveModel::Validations\n\n    # This ensures the model has a password by checking whether the password_digest\n    # is present, so that this works with both new and existing records. However,\n    # when there is an error, the message is added to the password attribute instead\n    # so that the error message will make sense to the end-user.\n    validate do |record|\n      record.errors.add(:password, :blank) unless record.password_digest.present?\n    end\n\n    validates_length_of :password, maximum: ActiveModel::SecurePassword::MAX_PASSWORD_LENGTH_ALLOWED\n    validates_confirmation_of :password, allow_blank: true\n  end\n\n  # This code is necessary as long as the protected_attributes gem is supported.\n  if respond_to?(:attributes_protected_by_default)\n    def self.attributes_protected_by_default #:nodoc:\n      super + ['password_digest']\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/securepassword/instancemethodsonactivation":"<h1 id=\"module-ActiveModel::SecurePassword::InstanceMethodsOnActivation\" class=\"module\"> module ActiveModel::SecurePassword::InstanceMethodsOnActivation </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-password\"> <span class=\"method-name\">password</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-authenticate\"> <span class=\"method-name\">authenticate</span><span class=\"method-args\">(unencrypted_password)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>self</code> if the password is correct, otherwise <code>false</code>.</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  has_secure_password validations: false\nend\n\nuser = User.new(name: 'david', password: 'mUc3m00RsqyRe')\nuser.save\nuser.authenticate('notright')      # =&gt; false\nuser.authenticate('mUc3m00RsqyRe') # =&gt; user\n</pre> <div class=\"method-source-code\" id=\"authenticate-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/secure_password.rb, line 101\ndef authenticate(unencrypted_password)\n  BCrypt::Password.new(password_digest) == unencrypted_password &amp;&amp; self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-password-3D\"> <span class=\"method-name\">password=</span><span class=\"method-args\">(unencrypted_password)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Encrypts the password into the <code>password_digest</code> attribute, only if the new password is not empty.</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  has_secure_password validations: false\nend\n\nuser = User.new\nuser.password = nil\nuser.password_digest # =&gt; nil\nuser.password = 'mUc3m00RsqyRe'\nuser.password_digest # =&gt; \"$2a$10$4LEA7r4YmNHtvlAvHhsYAeZmk/xeUVtMTYqwIvYY76EW5GUqDiP4.\"\n</pre> <div class=\"method-source-code\" id=\"password-3D-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/secure_password.rb, line 119\ndef password=(unencrypted_password)\n  if unencrypted_password.nil?\n    self.password_digest = nil\n  elsif !unencrypted_password.empty?\n    @password = unencrypted_password\n    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST : BCrypt::Engine.cost\n    self.password_digest = BCrypt::Password.create(unencrypted_password, cost: cost)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-password_confirmation-3D\"> <span class=\"method-name\">password_confirmation=</span><span class=\"method-args\">(unencrypted_password)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"password_confirmation-3D-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/secure_password.rb, line 129\ndef password_confirmation=(unencrypted_password)\n  @password_confirmation = unencrypted_password\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/serialization":"<h1 id=\"module-ActiveModel::Serialization\" class=\"module\"> module ActiveModel::Serialization </h1> <section class=\"description\"> <h2 id=\"module-ActiveModel::Serialization-label-Active+Model+Serialization\">Active Model Serialization</h2> <p>Provides a basic serialization to a <a href=\"serialization#method-i-serializable_hash\">#serializable_hash</a> for your objects.</p> <p>A minimal implementation could be:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Serialization\n\n  attr_accessor :name\n\n  def attributes\n    {'name' =&gt; nil}\n  end\nend\n</pre> <p>Which would provide you with:</p> <pre class=\"ruby\">person = Person.new\nperson.serializable_hash   # =&gt; {\"name\"=&gt;nil}\nperson.name = \"Bob\"\nperson.serializable_hash   # =&gt; {\"name\"=&gt;\"Bob\"}\n</pre> <p>An <code>attributes</code> hash must be defined and should contain any attributes you need to be serialized. Attributes must be strings, not symbols. When called, serializable hash will use instance methods that match the name of the attributes hash's keys. In order to override this behavior, take a look at the private method <code>read_attribute_for_serialization</code>.</p> <p>Most of the time though, either the JSON or XML serializations are needed. Both of these modules automatically include the <code>ActiveModel::Serialization</code> module, so there is no need to explicitly include it.</p> <p>A minimal implementation including XML and JSON would be:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Serializers::JSON\n  include ActiveModel::Serializers::Xml\n\n  attr_accessor :name\n\n  def attributes\n    {'name' =&gt; nil}\n  end\nend\n</pre> <p>Which would provide you with:</p> <pre class=\"ruby\">person = Person.new\nperson.serializable_hash   # =&gt; {\"name\"=&gt;nil}\nperson.as_json             # =&gt; {\"name\"=&gt;nil}\nperson.to_json             # =&gt; \"{\\\"name\\\":null}\"\nperson.to_xml              # =&gt; \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;\\n&lt;serial-person...\n\nperson.name = \"Bob\"\nperson.serializable_hash   # =&gt; {\"name\"=&gt;\"Bob\"}\nperson.as_json             # =&gt; {\"name\"=&gt;\"Bob\"}\nperson.to_json             # =&gt; \"{\\\"name\\\":\\\"Bob\\\"}\"\nperson.to_xml              # =&gt; \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;\\n&lt;serial-person...\n</pre> <p>Valid options are <code>:only</code>, <code>:except</code>, <code>:methods</code> and <code>:include</code>. The following are all valid examples:</p> <pre class=\"ruby\">person.serializable_hash(only: 'name')\nperson.serializable_hash(include: :address)\nperson.serializable_hash(include: { address: { only: 'city' }})\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serializable_hash\"> <span class=\"method-name\">serializable_hash</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a serialized hash of your object.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Serialization\n\n  attr_accessor :name, :age\n\n  def attributes\n    {'name' =&gt; nil, 'age' =&gt; nil}\n  end\n\n  def capitalized_name\n    name.capitalize\n  end\nend\n\nperson = Person.new\nperson.name = 'bob'\nperson.age  = 22\nperson.serializable_hash                # =&gt; {\"name\"=&gt;\"bob\", \"age\"=&gt;22}\nperson.serializable_hash(only: :name)   # =&gt; {\"name\"=&gt;\"bob\"}\nperson.serializable_hash(except: :name) # =&gt; {\"age\"=&gt;22}\nperson.serializable_hash(methods: :capitalized_name)\n# =&gt; {\"name\"=&gt;\"bob\", \"age\"=&gt;22, \"capitalized_name\"=&gt;\"Bob\"}\n</pre> <div class=\"method-source-code\" id=\"serializable_hash-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/serialization.rb, line 97\ndef serializable_hash(options = nil)\n  options ||= {}\n\n  attribute_names = attributes.keys\n  if only = options[:only]\n    attribute_names &amp;= Array(only).map(&amp;:to_s)\n  elsif except = options[:except]\n    attribute_names -= Array(except).map(&amp;:to_s)\n  end\n\n  hash = {}\n  attribute_names.each { |n| hash[n] = read_attribute_for_serialization(n) }\n\n  Array(options[:methods]).each { |m| hash[m.to_s] = send(m) if respond_to?(m) }\n\n  serializable_add_includes(options) do |association, records, opts|\n    hash[association.to_s] = if records.respond_to?(:to_ary)\n      records.to_ary.map { |a| a.serializable_hash(opts) }\n    else\n      records.serializable_hash(opts)\n    end\n  end\n\n  hash\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/serializers/json":"<h1 id=\"module-ActiveModel::Serializers::JSON\" class=\"module\"> module ActiveModel::Serializers::JSON </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../serialization\">ActiveModel::Serialization</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"module-ActiveModel::Serializers::JSON-label-Active+Model+JSON+Serializer\">Active Model JSON Serializer</h2> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-as_json\"> <span class=\"method-name\">as_json</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash representing the model. Some configuration can be passed through <code>options</code>.</p> <p>The option <code>include_root_in_json</code> controls the top-level behavior of <code>as_json</code>. If <code>true</code>, <code>as_json</code> will emit a single root node named after the object's type. The default value for <code>include_root_in_json</code> option is <code>false</code>.</p> <pre class=\"ruby\">user = User.find(1)\nuser.as_json\n# =&gt; { \"id\" =&gt; 1, \"name\" =&gt; \"Konata Izumi\", \"age\" =&gt; 16,\n#     \"created_at\" =&gt; \"2006/08/01\", \"awesome\" =&gt; true}\n\nActiveRecord::Base.include_root_in_json = true\n\nuser.as_json\n# =&gt; { \"user\" =&gt; { \"id\" =&gt; 1, \"name\" =&gt; \"Konata Izumi\", \"age\" =&gt; 16,\n#                  \"created_at\" =&gt; \"2006/08/01\", \"awesome\" =&gt; true } }\n</pre> <p>This behavior can also be achieved by setting the <code>:root</code> option to <code>true</code> as in:</p> <pre class=\"ruby\">user = User.find(1)\nuser.as_json(root: true)\n# =&gt; { \"user\" =&gt; { \"id\" =&gt; 1, \"name\" =&gt; \"Konata Izumi\", \"age\" =&gt; 16,\n#                  \"created_at\" =&gt; \"2006/08/01\", \"awesome\" =&gt; true } }\n</pre> <p>Without any <code>options</code>, the returned <a href=\"../../hash\">Hash</a> will include all the model's attributes.</p> <pre class=\"ruby\">user = User.find(1)\nuser.as_json\n# =&gt; { \"id\" =&gt; 1, \"name\" =&gt; \"Konata Izumi\", \"age\" =&gt; 16,\n#      \"created_at\" =&gt; \"2006/08/01\", \"awesome\" =&gt; true}\n</pre> <p>The <code>:only</code> and <code>:except</code> options can be used to limit the attributes included, and work similar to the <code>attributes</code> method.</p> <pre class=\"ruby\">user.as_json(only: [:id, :name])\n# =&gt; { \"id\" =&gt; 1, \"name\" =&gt; \"Konata Izumi\" }\n\nuser.as_json(except: [:id, :created_at, :age])\n# =&gt; { \"name\" =&gt; \"Konata Izumi\", \"awesome\" =&gt; true }\n</pre> <p>To include the result of some method calls on the model use <code>:methods</code>:</p> <pre class=\"ruby\">user.as_json(methods: :permalink)\n# =&gt; { \"id\" =&gt; 1, \"name\" =&gt; \"Konata Izumi\", \"age\" =&gt; 16,\n#      \"created_at\" =&gt; \"2006/08/01\", \"awesome\" =&gt; true,\n#      \"permalink\" =&gt; \"1-konata-izumi\" }\n</pre> <p>To include associations use <code>:include</code>:</p> <pre class=\"ruby\">user.as_json(include: :posts)\n# =&gt; { \"id\" =&gt; 1, \"name\" =&gt; \"Konata Izumi\", \"age\" =&gt; 16,\n#      \"created_at\" =&gt; \"2006/08/01\", \"awesome\" =&gt; true,\n#      \"posts\" =&gt; [ { \"id\" =&gt; 1, \"author_id\" =&gt; 1, \"title\" =&gt; \"Welcome to the weblog\" },\n#                   { \"id\" =&gt; 2, \"author_id\" =&gt; 1, \"title\" =&gt; \"So I was thinking\" } ] }\n</pre> <p>Second level and higher order associations work as well:</p> <pre class=\"ruby\">user.as_json(include: { posts: {\n                           include: { comments: {\n                                          only: :body } },\n                           only: :title } })\n# =&gt; { \"id\" =&gt; 1, \"name\" =&gt; \"Konata Izumi\", \"age\" =&gt; 16,\n#      \"created_at\" =&gt; \"2006/08/01\", \"awesome\" =&gt; true,\n#      \"posts\" =&gt; [ { \"comments\" =&gt; [ { \"body\" =&gt; \"1st post!\" }, { \"body\" =&gt; \"Second!\" } ],\n#                     \"title\" =&gt; \"Welcome to the weblog\" },\n#                   { \"comments\" =&gt; [ { \"body\" =&gt; \"Don't think too hard\" } ],\n#                     \"title\" =&gt; \"So I was thinking\" } ] }\n</pre> <div class=\"method-source-code\" id=\"as_json-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/serializers/json.rb, line 88\ndef as_json(options = nil)\n  root = if options &amp;&amp; options.key?(:root)\n    options[:root]\n  else\n    include_root_in_json\n  end\n\n  if root\n    root = model_name.element if root == true\n    { root =&gt; serializable_hash(options) }\n  else\n    serializable_hash(options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-from_json\"> <span class=\"method-name\">from_json</span><span class=\"method-args\">(json, include_root=include_root_in_json)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the model <code>attributes</code> from a <a href=\"json\">JSON</a> string. Returns <code>self</code>.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Serializers::JSON\n\n  attr_accessor :name, :age, :awesome\n\n  def attributes=(hash)\n    hash.each do |key, value|\n      send(\"#{key}=\", value)\n    end\n  end\n\n  def attributes\n    instance_values\n  end\nend\n\njson = { name: 'bob', age: 22, awesome:true }.to_json\nperson = Person.new\nperson.from_json(json) # =&gt; #&lt;Person:0x007fec5e7a0088 @age=22, @awesome=true, @name=\"bob\"&gt;\nperson.name            # =&gt; \"bob\"\nperson.age             # =&gt; 22\nperson.awesome         # =&gt; true\n</pre> <p>The default value for <code>include_root</code> is <code>false</code>. You can change it to <code>true</code> if the given <a href=\"json\">JSON</a> string includes a single root node.</p> <pre class=\"ruby\">json = { person: { name: 'bob', age: 22, awesome:true } }.to_json\nperson = Person.new\nperson.from_json(json, true) # =&gt; #&lt;Person:0x007fec5e7a0088 @age=22, @awesome=true, @name=\"bob\"&gt;\nperson.name                  # =&gt; \"bob\"\nperson.age                   # =&gt; 22\nperson.awesome               # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"from_json-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/serializers/json.rb, line 137\ndef from_json(json, include_root=include_root_in_json)\n  hash = ActiveSupport::JSON.decode(json)\n  hash = hash.values.first if include_root\n  self.attributes = hash\n  self\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/serializers/xml":"<h1 id=\"module-ActiveModel::Serializers::Xml\" class=\"module\"> module ActiveModel::Serializers::Xml </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../serialization\">ActiveModel::Serialization</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"module-ActiveModel::Serializers::Xml-label-Active+Model+XML+Serializer\">Active <a href=\"../model\">Model</a> XML Serializer</h2> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-from_xml\"> <span class=\"method-name\">from_xml</span><span class=\"method-args\">(xml)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the model <code>attributes</code> from an XML string. Returns <code>self</code>.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Serializers::Xml\n\n  attr_accessor :name, :age, :awesome\n\n  def attributes=(hash)\n    hash.each do |key, value|\n      instance_variable_set(\"@#{key}\", value)\n    end\n  end\n\n  def attributes\n    instance_values\n  end\nend\n\nxml = { name: 'bob', age: 22, awesome:true }.to_xml\nperson = Person.new\nperson.from_xml(xml) # =&gt; #&lt;Person:0x007fec5e3b3c40 @age=22, @awesome=true, @name=\"bob\"&gt;\nperson.name          # =&gt; \"bob\"\nperson.age           # =&gt; 22\nperson.awesome       # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"from_xml-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/serializers/xml.rb, line 232\ndef from_xml(xml)\n  self.attributes = Hash.from_xml(xml).values.first\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xml\"> <span class=\"method-name\">to_xml</span><span class=\"method-args\">(options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns XML representing the model. Configuration can be passed through <code>options</code>.</p> <p>Without any <code>options</code>, the returned XML string will include all the model's attributes.</p> <pre>user = User.find(1)\nuser.to_xml\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;user&gt;\n  &lt;id type=\"integer\"&gt;1&lt;/id&gt;\n  &lt;name&gt;David&lt;/name&gt;\n  &lt;age type=\"integer\"&gt;16&lt;/age&gt;\n  &lt;created-at type=\"dateTime\"&gt;2011-01-30T22:29:23Z&lt;/created-at&gt;\n&lt;/user&gt;</pre> <p>The <code>:only</code> and <code>:except</code> options can be used to limit the attributes included, and work similar to the <code>attributes</code> method.</p> <p>To include the result of some method calls on the model use <code>:methods</code>.</p> <p>To include associations use <code>:include</code>.</p> <p>For further documentation, see <code>ActiveRecord::Serialization#to_xml</code></p> <div class=\"method-source-code\" id=\"to_xml-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/serializers/xml.rb, line 204\ndef to_xml(options = {}, &amp;block)\n  Serializer.new(self, options).serialize(&amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/strictvalidationfailed":"<h1 id=\"class-ActiveModel::StrictValidationFailed\" class=\"class\"> class ActiveModel::StrictValidationFailed </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">StandardError</dd>\n</dl> <section class=\"description\"> <p>Raised when a validation cannot be corrected by end users and are considered exceptional.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :name\n\n  validates_presence_of :name, strict: true\nend\n\nperson = Person.new\nperson.name = nil\nperson.valid?\n# =&gt; ActiveModel::StrictValidationFailed: Name can't be blank\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/translation":"<h1 id=\"module-ActiveModel::Translation\" class=\"module\"> module ActiveModel::Translation </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"naming\">ActiveModel::Naming</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"module-ActiveModel::Translation-label-Active+Model+Translation\">Active Model Translation</h2> <p>Provides integration between your object and the Rails internationalization (i18n) framework.</p> <p>A minimal implementation could be:</p> <pre class=\"ruby\">class TranslatedPerson\n  extend ActiveModel::Translation\nend\n\nTranslatedPerson.human_attribute_name('my_attribute')\n# =&gt; \"My attribute\"\n</pre> <p>This also provides the required class methods for hooking into the Rails internationalization API, including being able to define a class based <code>i18n_scope</code> and <code>lookup_ancestors</code> to find translations in parent classes.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-human_attribute_name\"> <span class=\"method-name\">human_attribute_name</span><span class=\"method-args\">(attribute, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Transforms attribute names into a more human format, such as “First name” instead of “first_name”.</p> <pre class=\"ruby\">Person.human_attribute_name(\"first_name\") # =&gt; \"First name\"\n</pre> <p>Specify <code>options</code> with additional translating options.</p> <div class=\"method-source-code\" id=\"human_attribute_name-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/translation.rb, line 43\ndef human_attribute_name(attribute, options = {})\n  options   = { count: 1 }.merge!(options)\n  parts     = attribute.to_s.split(\".\")\n  attribute = parts.pop\n  namespace = parts.join(\"/\") unless parts.empty?\n  attributes_scope = \"#{self.i18n_scope}.attributes\"\n\n  if namespace\n    defaults = lookup_ancestors.map do |klass|\n      :\"#{attributes_scope}.#{klass.model_name.i18n_key}/#{namespace}.#{attribute}\"\n    end\n    defaults &lt;&lt; :\"#{attributes_scope}.#{namespace}.#{attribute}\"\n  else\n    defaults = lookup_ancestors.map do |klass|\n      :\"#{attributes_scope}.#{klass.model_name.i18n_key}.#{attribute}\"\n    end\n  end\n\n  defaults &lt;&lt; :\"attributes.#{attribute}\"\n  defaults &lt;&lt; options.delete(:default) if options[:default]\n  defaults &lt;&lt; attribute.humanize\n\n  options[:default] = defaults\n  I18n.translate(defaults.shift, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-i18n_scope\"> <span class=\"method-name\">i18n_scope</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want custom lookup.</p> <div class=\"method-source-code\" id=\"i18n_scope-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/translation.rb, line 25\ndef i18n_scope\n  :activemodel\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-lookup_ancestors\"> <span class=\"method-name\">lookup_ancestors</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>When localizing a string, it goes through the lookup returned by this method, which is used in <a href=\"name#method-i-human\">ActiveModel::Name#human</a>, <a href=\"errors#method-i-full_messages\">ActiveModel::Errors#full_messages</a> and <a href=\"translation#method-i-human_attribute_name\">#human_attribute_name</a>.</p> <div class=\"method-source-code\" id=\"lookup_ancestors-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/translation.rb, line 33\ndef lookup_ancestors\n  self.ancestors.select { |x| x.respond_to?(:model_name) }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/validations":"<h1 id=\"module-ActiveModel::Validations\" class=\"module\"> module ActiveModel::Validations </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"validations/helpermethods\">ActiveModel::Validations::HelperMethods</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"module-ActiveModel::Validations-label-Active+Model+Validations\">Active Model Validations</h2> <p>Provides a full validation framework to your objects.</p> <p>A minimal implementation could be:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :first_name, :last_name\n\n  validates_each :first_name, :last_name do |record, attr, value|\n    record.errors.add attr, 'starts with z.' if value.to_s[0] == ?z\n  end\nend\n</pre> <p>Which provides you with the full standard validation stack that you know from Active Record:</p> <pre class=\"ruby\">person = Person.new\nperson.valid?                   # =&gt; true\nperson.invalid?                 # =&gt; false\n\nperson.first_name = 'zoolander'\nperson.valid?                   # =&gt; false\nperson.invalid?                 # =&gt; true\nperson.errors.messages          # =&gt; {first_name:[\"starts with z.\"]}\n</pre> <p>Note that <code>ActiveModel::Validations</code> automatically adds an <code>errors</code> method to your instances initialized with a new <code>ActiveModel::Errors</code> object, so there is no need for you to do this manually.</p> <h2 id=\"module-ActiveModel::Validations-label-Active+Model+Length+Validator\">Active Model Length <a href=\"validator\">Validator</a>\n</h2> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-errors\"> <span class=\"method-name\">errors</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the <code>Errors</code> object that holds all information about attribute error messages.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :name\n  validates_presence_of :name\nend\n\nperson = Person.new\nperson.valid? # =&gt; false\nperson.errors # =&gt; #&lt;ActiveModel::Errors:0x007fe603816640 @messages={name:[\"can't be blank\"]}&gt;\n</pre> <div class=\"method-source-code\" id=\"errors-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations.rb, line 296\ndef errors\n  @errors ||= Errors.new(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-invalid-3F\"> <span class=\"method-name\">invalid?</span><span class=\"method-args\">(context = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs the opposite of <code>valid?</code>. Returns <code>true</code> if errors were added, <code>false</code> otherwise.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :name\n  validates_presence_of :name\nend\n\nperson = Person.new\nperson.name = ''\nperson.invalid? # =&gt; true\nperson.name = 'david'\nperson.invalid? # =&gt; false\n</pre> <p>Context can optionally be supplied to define which callbacks to test against (the context is defined on the validations using <code>:on</code>).</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :name\n  validates_presence_of :name, on: :new\nend\n\nperson = Person.new\nperson.invalid?       # =&gt; false\nperson.invalid?(:new) # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"invalid-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations.rb, line 370\ndef invalid?(context = nil)\n  !valid?(context)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-valid-3F\"> <span class=\"method-name\">valid?</span><span class=\"method-args\">(context = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs all the specified validations and returns <code>true</code> if no errors were added otherwise <code>false</code>.</p> <p>Aliased as validate.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :name\n  validates_presence_of :name\nend\n\nperson = Person.new\nperson.name = ''\nperson.valid? # =&gt; false\nperson.name = 'david'\nperson.valid? # =&gt; true\n</pre> <p>Context can optionally be supplied to define which callbacks to test against (the context is defined on the validations using <code>:on</code>).</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :name\n  validates_presence_of :name, on: :new\nend\n\nperson = Person.new\nperson.valid?       # =&gt; true\nperson.valid?(:new) # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"valid-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations.rb, line 331\ndef valid?(context = nil)\n  current_context, self.validation_context = validation_context, context\n  errors.clear\n  run_validations!\nensure\n  self.validation_context = current_context\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"validations#method-i-validate\">validate</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-validate\"> <span class=\"method-name\">validate</span><span class=\"method-args\">(context = nil)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"validations#method-i-valid-3F\">valid?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_with\"> <span class=\"method-name\">validates_with</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Passes the record off to the class or classes specified and allows them to add errors based on more complex conditions.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  validate :instance_validations\n\n  def instance_validations\n    validates_with MyValidator\n  end\nend\n</pre> <p>Please consult the class method documentation for more information on creating your own validator.</p> <p>You may also pass it multiple classes, like so:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  validate :instance_validations, on: :create\n\n  def instance_validations\n    validates_with MyValidator, MyOtherValidator\n  end\nend\n</pre> <p>Standard configuration options (<code>:on</code>, <code>:if</code> and <code>:unless</code>), which are available on the class version of <code>validates_with</code>, should instead be placed on the <code>validates</code> method as these are applied and tested in the callback.</p> <p>If you pass any additional configuration options, they will be passed to the class and available as <code>options</code>, please refer to the class version of this method for more information.</p> <div class=\"method-source-code\" id=\"validates_with-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/with.rb, line 143\ndef validates_with(*args, &amp;block)\n  options = args.extract_options!\n  options[:class] = self.class\n\n  args.each do |klass|\n    validator = klass.new(options, &amp;block)\n    validator.validate(self)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/validations/callbacks":"<h1 id=\"module-ActiveModel::Validations::Callbacks\" class=\"module\"> module ActiveModel::Validations::Callbacks </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../../activesupport/callbacks\">ActiveSupport::Callbacks</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"module-ActiveModel::Validations::Callbacks-label-Active+Model+Validation+Callbacks\">Active Model Validation Callbacks</h2> <p>Provides an interface for any class to have <code>before_validation</code> and <code>after_validation</code> callbacks.</p> <p>First, include <a href=\"callbacks\">ActiveModel::Validations::Callbacks</a> from the class you are creating:</p> <pre class=\"ruby\">class MyModel\n  include ActiveModel::Validations::Callbacks\n\n  before_validation :do_stuff_before_validation\n  after_validation  :do_stuff_after_validation\nend\n</pre> <p>Like other <code>before_*</code> callbacks if <code>before_validation</code> returns <code>false</code> then <code>valid?</code> will not be called.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/validations/callbacks/classmethods":"<h1 id=\"module-ActiveModel::Validations::Callbacks::ClassMethods\" class=\"module\"> module ActiveModel::Validations::Callbacks::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_validation\"> <span class=\"method-name\">after_validation</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a callback that will get called right after validation happens.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n  include ActiveModel::Validations::Callbacks\n\n  attr_accessor :name, :status\n\n  validates_presence_of :name\n\n  after_validation :set_status\n\n  private\n\n  def set_status\n    self.status = errors.empty?\n  end\nend\n\nperson = Person.new\nperson.name = ''\nperson.valid? # =&gt; false\nperson.status # =&gt; false\nperson.name = 'bob'\nperson.valid? # =&gt; true\nperson.status # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"after_validation-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/callbacks.rb, line 95\ndef after_validation(*args, &amp;block)\n  options = args.extract_options!\n  options[:prepend] = true\n  options[:if] = Array(options[:if])\n  if options[:on]\n    options[:on] = Array(options[:on])\n    options[:if].unshift -&gt;(o) {\n      options[:on].include? o.validation_context\n    }\n  end\n  set_callback(:validation, :after, *(args &lt;&lt; options), &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_validation\"> <span class=\"method-name\">before_validation</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a callback that will get called right before validation happens.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n  include ActiveModel::Validations::Callbacks\n\n  attr_accessor :name\n\n  validates_length_of :name, maximum: 6\n\n  before_validation :remove_whitespaces\n\n  private\n\n  def remove_whitespaces\n    name.strip!\n  end\nend\n\nperson = Person.new\nperson.name = '  bob  '\nperson.valid? # =&gt; true\nperson.name   # =&gt; \"bob\"\n</pre> <div class=\"method-source-code\" id=\"before_validation-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/callbacks.rb, line 56\ndef before_validation(*args, &amp;block)\n  options = args.last\n  if options.is_a?(Hash) &amp;&amp; options[:on]\n    options[:if] = Array(options[:if])\n    options[:on] = Array(options[:on])\n    options[:if].unshift -&gt;(o) {\n      options[:on].include? o.validation_context\n    }\n  end\n  set_callback(:validation, :before, *args, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/validations/classmethods":"<h1 id=\"module-ActiveModel::Validations::ClassMethods\" class=\"module\"> module ActiveModel::Validations::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"VALID_OPTIONS_FOR_VALIDATE\">VALID_OPTIONS_FOR_VALIDATE </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_method-3F\"> <span class=\"method-name\">attribute_method?</span><span class=\"method-args\">(attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if <code>attribute</code> is an attribute method, <code>false</code> otherwise.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :name\nend\n\nUser.attribute_method?(:name) # =&gt; true\nUser.attribute_method?(:age)  # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"attribute_method-3F-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations.rb, line 265\ndef attribute_method?(attribute)\n  method_defined?(attribute)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_validators-21\"> <span class=\"method-name\">clear_validators!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears all of the validators and validations.</p> <p>Note that this will clear anything that is being used to validate the model for both the <code>validates_with</code> and <code>validate</code> methods. It clears the validators that are created with an invocation of <code>validates_with</code> and the callbacks that are set by an invocation of <code>validate</code>.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  validates_with MyValidator\n  validates_with OtherValidator, on: :create\n  validates_with StrictValidator, strict: true\n  validate :cannot_be_robot\n\n  def cannot_be_robot\n    errors.add(:base, 'A person cannot be a robot') if person_is_robot\n  end\nend\n\nPerson.validators\n# =&gt; [\n#      #&lt;MyValidator:0x007fbff403e808 @options={}&gt;,\n#      #&lt;OtherValidator:0x007fbff403d930 @options={on: :create}&gt;,\n#      #&lt;StrictValidator:0x007fbff3204a30 @options={strict:true}&gt;\n#    ]\n</pre> <p>If one runs <code>Person.clear_validators!</code> and then checks to see what validators this class has, you would obtain:</p> <pre class=\"ruby\">Person.validators # =&gt; []\n</pre> <p>Also, the callback set by <code>validate :cannot_be_robot</code> will be erased so that:</p> <pre class=\"ruby\">Person._validate_callbacks.empty?  # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"clear_validators-21-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations.rb, line 229\ndef clear_validators!\n  reset_callbacks(:validate)\n  _validators.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validate\"> <span class=\"method-name\">validate</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a validation method or block to the class. This is useful when overriding the <code>validate</code> instance method becomes too unwieldy and you're looking for more descriptive declaration of your validations.</p> <p>This can be done with a symbol pointing to a method:</p> <pre class=\"ruby\">class Comment\n  include ActiveModel::Validations\n\n  validate :must_be_friends\n\n  def must_be_friends\n    errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)\n  end\nend\n</pre> <p>With a block which is passed with the current record to be validated:</p> <pre class=\"ruby\">class Comment\n  include ActiveModel::Validations\n\n  validate do |comment|\n    comment.must_be_friends\n  end\n\n  def must_be_friends\n    errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)\n  end\nend\n</pre> <p>Or with a block where self points to the current record to be validated:</p> <pre class=\"ruby\">class Comment\n  include ActiveModel::Validations\n\n  validate do\n    errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)\n  end\nend\n</pre> <p>Options:</p> <ul>\n<li> <p><code>:on</code> - Specifies the contexts where this validation is active. Runs in all validation contexts by default (nil). You can pass a symbol or an array of symbols. (e.g. <code>on: :create</code> or <code>on:\n:custom_validation_context</code> or <code>on: [:create,\n:custom_validation_context]</code>)</p> </li>\n<li> <p><code>:if</code> - Specifies a method, proc or string to call to determine if the validation should occur (e.g. <code>if: :allow_validation</code>, or <code>if: Proc.new { |user| user.signup_step &gt; 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:unless</code> - Specifies a method, proc or string to call to determine if the validation should not occur (e.g. <code>unless:\n:skip_validation</code>, or <code>unless: Proc.new { |user|\nuser.signup_step &lt;= 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"validate-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations.rb, line 147\ndef validate(*args, &amp;block)\n  options = args.extract_options!\n\n  if args.all? { |arg| arg.is_a?(Symbol) }\n    options.each_key do |k|\n      unless VALID_OPTIONS_FOR_VALIDATE.include?(k)\n        raise ArgumentError.new(\"Unknown key: #{k.inspect}. Valid keys are: #{VALID_OPTIONS_FOR_VALIDATE.map(&amp;:inspect).join(', ')}. Perhaps you meant to call `validates` instead of `validate`?\")\n      end\n    end\n  end\n\n  if options.key?(:on)\n    options = options.dup\n    options[:if] = Array(options[:if])\n    options[:if].unshift -&gt;(o) {\n      Array(options[:on]).include?(o.validation_context)\n    }\n  end\n\n  args &lt;&lt; options\n  set_callback(:validate, *args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates\"> <span class=\"method-name\">validates</span><span class=\"method-args\">(*attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method is a shortcut to all default validators and any custom validator classes ending in 'Validator'. Note that Rails default validators can be overridden inside specific classes by creating custom validator classes in their place such as PresenceValidator.</p> <p>Examples of using the default rails validators:</p> <pre class=\"ruby\">validates :terms, acceptance: true\nvalidates :password, confirmation: true\nvalidates :username, exclusion: { in: %w(admin superuser) }\nvalidates :email, format: { with: /\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\z/i, on: :create }\nvalidates :age, inclusion: { in: 0..9 }\nvalidates :first_name, length: { maximum: 30 }\nvalidates :age, numericality: true\nvalidates :username, presence: true\nvalidates :username, uniqueness: true\n</pre> <p>The power of the <code>validates</code> method comes when using custom validators and default validators in one call for a given attribute.</p> <pre class=\"ruby\">class EmailValidator &lt; ActiveModel::EachValidator\n  def validate_each(record, attribute, value)\n    record.errors.add attribute, (options[:message] || \"is not an email\") unless\n      value =~ /\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\z/i\n  end\nend\n\nclass Person\n  include ActiveModel::Validations\n  attr_accessor :name, :email\n\n  validates :name, presence: true, uniqueness: true, length: { maximum: 100 }\n  validates :email, presence: true, email: true\nend\n</pre> <p><a href=\"../validator\">Validator</a> classes may also exist within the class being validated allowing custom modules of validators to be included as needed.</p> <pre class=\"ruby\">class Film\n  include ActiveModel::Validations\n\n  class TitleValidator &lt; ActiveModel::EachValidator\n    def validate_each(record, attribute, value)\n      record.errors.add attribute, \"must start with 'the'\" unless value =~ /\\Athe/i\n    end\n  end\n\n  validates :name, title: true\nend\n</pre> <p>Additionally validator classes may be in another namespace and still used within any class.</p> <pre class=\"ruby\">validates :name, :'film/title' =&gt; true\n</pre> <p>The validators hash can also handle regular expressions, ranges, arrays and strings in shortcut form.</p> <pre class=\"ruby\">validates :email, format: /@/\nvalidates :gender, inclusion: %w(male female)\nvalidates :password, length: 6..20\n</pre> <p>When using shortcut form, ranges and arrays are passed to your validator's initializer as <code>options[:in]</code> while other types including regular expressions and strings are passed as <code>options[:with]</code>.</p> <p>There is also a list of options that could be used along with validators:</p> <ul>\n<li> <p><code>:on</code> - Specifies the contexts where this validation is active. Runs in all validation contexts by default (nil). You can pass a symbol or an array of symbols. (e.g. <code>on: :create</code> or <code>on:\n:custom_validation_context</code> or <code>on: [:create,\n:custom_validation_context]</code>)</p> </li>\n<li> <p><code>:if</code> - Specifies a method, proc or string to call to determine if the validation should occur (e.g. <code>if: :allow_validation</code>, or <code>if: Proc.new { |user| user.signup_step &gt; 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:unless</code> - Specifies a method, proc or string to call to determine if the validation should not occur (e.g. <code>unless:\n:skip_validation</code>, or <code>unless: Proc.new { |user|\nuser.signup_step &lt;= 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:allow_nil</code> - Skip validation if the attribute is <code>nil</code>.</p> </li>\n<li> <p><code>:allow_blank</code> - Skip validation if the attribute is blank.</p> </li>\n<li> <p><code>:strict</code> - If the <code>:strict</code> option is set to true will raise <a href=\"../strictvalidationfailed\">ActiveModel::StrictValidationFailed</a> instead of adding the error. <code>:strict</code> option can also be set to any other exception.</p> </li>\n</ul> <p>Example:</p> <pre class=\"ruby\">validates :password, presence: true, confirmation: true, if: :password_required?\nvalidates :token, uniqueness: true, strict: TokenGenerationException\n</pre> <p>Finally, the options <code>:if</code>, <code>:unless</code>, <code>:on</code>, <code>:allow_blank</code>, <code>:allow_nil</code>, <code>:strict</code> and <code>:message</code> can be given to one specific validator, as a hash:</p> <pre class=\"ruby\">validates :password, presence: { if: :password_required?, message: 'is forgotten.' }, confirmation: true\n</pre> <div class=\"method-source-code\" id=\"validates-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/validates.rb, line 104\ndef validates(*attributes)\n  defaults = attributes.extract_options!.dup\n  validations = defaults.slice!(*_validates_default_keys)\n\n  raise ArgumentError, \"You need to supply at least one attribute\" if attributes.empty?\n  raise ArgumentError, \"You need to supply at least one validation\" if validations.empty?\n\n  defaults[:attributes] = attributes\n\n  validations.each do |key, options|\n    next unless options\n    key = \"#{key.to_s.camelize}Validator\"\n\n    begin\n      validator = key.include?('::') ? key.constantize : const_get(key)\n    rescue NameError\n      raise ArgumentError, \"Unknown validator: '#{key}'\"\n    end\n\n    validates_with(validator, defaults.merge(_parse_validates_options(options)))\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates-21\"> <span class=\"method-name\">validates!</span><span class=\"method-args\">(*attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method is used to define validations that cannot be corrected by end users and are considered exceptional. So each validator defined with bang or <code>:strict</code> option set to <code>true</code> will always raise <code>ActiveModel::StrictValidationFailed</code> instead of adding error when validation fails. See <code>validates</code> for more information about the validation itself.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :name\n  validates! :name, presence: true\nend\n\nperson = Person.new\nperson.name = ''\nperson.valid?\n# =&gt; ActiveModel::StrictValidationFailed: Name can't be blank\n</pre> <div class=\"method-source-code\" id=\"validates-21-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/validates.rb, line 145\ndef validates!(*attributes)\n  options = attributes.extract_options!\n  options[:strict] = true\n  validates(*(attributes &lt;&lt; options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_each\"> <span class=\"method-name\">validates_each</span><span class=\"method-args\">(*attr_names, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates each attribute against a block.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :first_name, :last_name\n\n  validates_each :first_name, :last_name, allow_blank: true do |record, attr, value|\n    record.errors.add attr, 'starts with z.' if value.to_s[0] == ?z\n  end\nend\n</pre> <p>Options:</p> <ul>\n<li> <p><code>:on</code> - Specifies the contexts where this validation is active. Runs in all validation contexts by default (nil). You can pass a symbol or an array of symbols. (e.g. <code>on: :create</code> or <code>on:\n:custom_validation_context</code> or <code>on: [:create,\n:custom_validation_context]</code>)</p> </li>\n<li> <p><code>:allow_nil</code> - Skip validation if attribute is <code>nil</code>.</p> </li>\n<li> <p><code>:allow_blank</code> - Skip validation if attribute is blank.</p> </li>\n<li> <p><code>:if</code> - Specifies a method, proc or string to call to determine if the validation should occur (e.g. <code>if: :allow_validation</code>, or <code>if: Proc.new { |user| user.signup_step &gt; 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:unless</code> - Specifies a method, proc or string to call to determine if the validation should not occur (e.g. <code>unless:\n:skip_validation</code>, or <code>unless: Proc.new { |user|\nuser.signup_step &lt;= 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"validates_each-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations.rb, line 86\ndef validates_each(*attr_names, &amp;block)\n  validates_with BlockValidator, _merge_attributes(attr_names), &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_with\"> <span class=\"method-name\">validates_with</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Passes the record off to the class or classes specified and allows them to add errors based on more complex conditions.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n  validates_with MyValidator\nend\n\nclass MyValidator &lt; ActiveModel::Validator\n  def validate(record)\n    if some_complex_logic\n      record.errors.add :base, 'This record is invalid'\n    end\n  end\n\n  private\n    def some_complex_logic\n      # ...\n    end\nend\n</pre> <p>You may also pass it multiple classes, like so:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n  validates_with MyValidator, MyOtherValidator, on: :create\nend\n</pre> <p>Configuration options:</p> <ul>\n<li> <p><code>:on</code> - Specifies the contexts where this validation is active. Runs in all validation contexts by default (nil). You can pass a symbol or an array of symbols. (e.g. <code>on: :create</code> or <code>on:\n:custom_validation_context</code> or <code>on: [:create,\n:custom_validation_context]</code>)</p> </li>\n<li> <p><code>:if</code> - Specifies a method, proc or string to call to determine if the validation should occur (e.g. <code>if: :allow_validation</code>, or <code>if: Proc.new { |user| user.signup_step &gt; 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:unless</code> - Specifies a method, proc or string to call to determine if the validation should not occur (e.g. <code>unless:\n:skip_validation</code>, or <code>unless: Proc.new { |user|\nuser.signup_step &lt;= 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:strict</code> - Specifies whether validation should be strict. See <code>ActiveModel::Validation#validates!</code> for more information.</p> </li>\n</ul> <p>If you pass any additional configuration options, they will be passed to the class and available as <code>options</code>:</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n  validates_with MyValidator, my_custom_key: 'my custom value'\nend\n\nclass MyValidator &lt; ActiveModel::Validator\n  def validate(record)\n    options[:my_custom_key] # =&gt; \"my custom value\"\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"validates_with-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/with.rb, line 87\ndef validates_with(*args, &amp;block)\n  options = args.extract_options!\n  options[:class] = self\n\n  args.each do |klass|\n    validator = klass.new(options, &amp;block)\n\n    if validator.respond_to?(:attributes) &amp;&amp; !validator.attributes.empty?\n      validator.attributes.each do |attribute|\n        _validators[attribute.to_sym] &lt;&lt; validator\n      end\n    else\n      _validators[nil] &lt;&lt; validator\n    end\n\n    validate(validator, options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validators\"> <span class=\"method-name\">validators</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>List all validators that are being used to validate the model using <code>validates_with</code> method.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  validates_with MyValidator\n  validates_with OtherValidator, on: :create\n  validates_with StrictValidator, strict: true\nend\n\nPerson.validators\n# =&gt; [\n#      #&lt;MyValidator:0x007fbff403e808 @options={}&gt;,\n#      #&lt;OtherValidator:0x007fbff403d930 @options={on: :create}&gt;,\n#      #&lt;StrictValidator:0x007fbff3204a30 @options={strict:true}&gt;\n#    ]\n</pre> <div class=\"method-source-code\" id=\"validators-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations.rb, line 187\ndef validators\n  _validators.values.flatten.uniq\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validators_on\"> <span class=\"method-name\">validators_on</span><span class=\"method-args\">(*attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>List all validators that are being used to validate a specific attribute.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n\n  attr_accessor :name , :age\n\n  validates_presence_of :name\n  validates_inclusion_of :age, in: 0..99\nend\n\nPerson.validators_on(:name)\n# =&gt; [\n#       #&lt;ActiveModel::Validations::PresenceValidator:0x007fe604914e60 @attributes=[:name], @options={}&gt;,\n#    ]\n</pre> <div class=\"method-source-code\" id=\"validators_on-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations.rb, line 249\ndef validators_on(*attributes)\n  attributes.flat_map do |attribute|\n    _validators[attribute.to_sym]\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/validations/helpermethods":"<h1 id=\"module-ActiveModel::Validations::HelperMethods\" class=\"module\"> module ActiveModel::Validations::HelperMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_absence_of\"> <span class=\"method-name\">validates_absence_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates that the specified attributes are blank (as defined by <a href=\"../../object#method-i-blank-3F\">Object#blank?</a>). Happens by default on save.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_absence_of :first_name\nend\n</pre> <p>The first_name attribute must be in the object and it must be blank.</p> <p>Configuration options:</p> <ul><li> <p><code>:message</code> - A custom error message (default is: “must be blank”).</p> </li></ul> <p>There is also a list of default options supported by every validator: <code>:if</code>, <code>:unless</code>, <code>:on</code>, <code>:allow_nil</code>, <code>:allow_blank</code>, and <code>:strict</code>. See <code>ActiveModel::Validation#validates</code> for more information</p> <div class=\"method-source-code\" id=\"validates_absence_of-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/absence.rb, line 26\ndef validates_absence_of(*attr_names)\n  validates_with AbsenceValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_acceptance_of\"> <span class=\"method-name\">validates_acceptance_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Encapsulates the pattern of wanting to validate the acceptance of a terms of service check box (or similar agreement).</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_acceptance_of :terms_of_service\n  validates_acceptance_of :eula, message: 'must be abided'\nend\n</pre> <p>If the database column does not exist, the <code>terms_of_service</code> attribute is entirely virtual. This check is performed only if <code>terms_of_service</code> is not <code>nil</code> and by default on save.</p> <p>Configuration options:</p> <ul>\n<li> <p><code>:message</code> - A custom error message (default is: “must be accepted”).</p> </li>\n<li> <p><code>:accept</code> - Specifies value that is considered accepted. The default value is a string “1”, which makes it easy to relate to an HTML checkbox. This should be set to <code>true</code> if you are validating a database column, since the attribute is typecast from “1” to <code>true</code> before validation.</p> </li>\n</ul> <p>There is also a list of default options supported by every validator: <code>:if</code>, <code>:unless</code>, <code>:on</code>, <code>:allow_nil</code>, <code>:allow_blank</code>, and <code>:strict</code>. See <code>ActiveModel::Validation#validates</code> for more information.</p> <div class=\"method-source-code\" id=\"validates_acceptance_of-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/acceptance.rb, line 50\ndef validates_acceptance_of(*attr_names)\n  validates_with AcceptanceValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_confirmation_of\"> <span class=\"method-name\">validates_confirmation_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Encapsulates the pattern of wanting to validate a password or email address field with a confirmation.</p> <pre>Model:\n  class Person &lt; ActiveRecord::Base\n    validates_confirmation_of :user_name, :password\n    validates_confirmation_of :email_address,\n                              message: 'should match confirmation'\n  end\n\nView:\n  &lt;%= password_field \"person\", \"password\" %&gt;\n  &lt;%= password_field \"person\", \"password_confirmation\" %&gt;</pre> <p>The added <code>password_confirmation</code> attribute is virtual; it exists only as an in-memory attribute for validating the password. To achieve this, the validation adds accessors to the model for the confirmation attribute.</p> <p>NOTE: This check is performed only if <code>password_confirmation</code> is not <code>nil</code>. To require confirmation, make sure to add a presence check for the confirmation attribute:</p> <pre class=\"ruby\">validates_presence_of :password_confirmation, if: :password_changed?\n</pre> <p>Configuration options:</p> <ul><li> <p><code>:message</code> - A custom error message (default is: “doesn't match <code>%{translated_attribute_name}</code>”).</p> </li></ul> <p>There is also a list of default options supported by every validator: <code>:if</code>, <code>:unless</code>, <code>:on</code>, <code>:allow_nil</code>, <code>:allow_blank</code>, and <code>:strict</code>. See <code>ActiveModel::Validation#validates</code> for more information</p> <div class=\"method-source-code\" id=\"validates_confirmation_of-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/confirmation.rb, line 62\ndef validates_confirmation_of(*attr_names)\n  validates_with ConfirmationValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_exclusion_of\"> <span class=\"method-name\">validates_exclusion_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates that the value of the specified attribute is not in a particular enumerable object.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_exclusion_of :username, in: %w( admin superuser ), message: \"You don't belong here\"\n  validates_exclusion_of :age, in: 30..60, message: 'This site is only for under 30 and over 60'\n  validates_exclusion_of :format, in: %w( mov avi ), message: \"extension %{value} is not allowed\"\n  validates_exclusion_of :password, in: -&gt;(person) { [person.username, person.first_name] },\n                         message: 'should not be the same as your username or first name'\n  validates_exclusion_of :karma, in: :reserved_karmas\nend\n</pre> <p>Configuration options:</p> <ul>\n<li> <p><code>:in</code> - An enumerable object of items that the value shouldn't be part of. This can be supplied as a proc, lambda or symbol which returns an enumerable. If the enumerable is a range the test is performed with</p> </li>\n<li> <p><code>:within</code> - A synonym(or alias) for <code>:in</code> <code>Range#cover?</code>, otherwise with <code>include?</code>.</p> </li>\n<li> <p><code>:message</code> - Specifies a custom error message (default is: “is reserved”).</p> </li>\n</ul> <p>There is also a list of default options supported by every validator: <code>:if</code>, <code>:unless</code>, <code>:on</code>, <code>:allow_nil</code>, <code>:allow_blank</code>, and <code>:strict</code>. See <code>ActiveModel::Validation#validates</code> for more information</p> <div class=\"method-source-code\" id=\"validates_exclusion_of-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/exclusion.rb, line 41\ndef validates_exclusion_of(*attr_names)\n  validates_with ExclusionValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_format_of\"> <span class=\"method-name\">validates_format_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates whether the value of the specified attribute is of the correct form, going by the regular expression provided. You can require that the attribute matches the regular expression:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_format_of :email, with: /\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\z/i, on: :create\nend\n</pre> <p>Alternatively, you can require that the specified attribute does <em>not</em> match the regular expression:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_format_of :email, without: /NOSPAM/\nend\n</pre> <p>You can also provide a proc or lambda which will determine the regular expression that will be used to validate the attribute.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  # Admin can have number as a first letter in their screen name\n  validates_format_of :screen_name,\n                      with: -&gt;(person) { person.admin? ? /\\A[a-z0-9][a-z0-9_\\-]*\\z/i : /\\A[a-z][a-z0-9_\\-]*\\z/i }\nend\n</pre> <p>Note: use <code>\\A</code> and <code>\\Z</code> to match the start and end of the string, <code>^</code> and <code>$</code> match the start/end of a line.</p> <p>Due to frequent misuse of <code>^</code> and <code>$</code>, you need to pass the <code>multiline: true</code> option in case you use any of these two anchors in the provided regular expression. In most cases, you should be using <code>\\A</code> and <code>\\z</code>.</p> <p>You must pass either <code>:with</code> or <code>:without</code> as an option. In addition, both must be a regular expression or a proc or lambda, or else an exception will be raised.</p> <p>Configuration options:</p> <ul>\n<li> <p><code>:message</code> - A custom error message (default is: “is invalid”).</p> </li>\n<li> <p><code>:with</code> - Regular expression that if the attribute matches will result in a successful validation. This can be provided as a proc or lambda returning regular expression which will be called at runtime.</p> </li>\n<li> <p><code>:without</code> - Regular expression that if the attribute does not match will result in a successful validation. This can be provided as a proc or lambda returning regular expression which will be called at runtime.</p> </li>\n<li> <p><code>:multiline</code> - Set to true if your regular expression contains anchors that match the beginning or end of lines as opposed to the beginning or end of the string. These anchors are <code>^</code> and <code>$</code>.</p> </li>\n</ul> <p>There is also a list of default options supported by every validator: <code>:if</code>, <code>:unless</code>, <code>:on</code>, <code>:allow_nil</code>, <code>:allow_blank</code>, and <code>:strict</code>. See <code>ActiveModel::Validation#validates</code> for more information</p> <div class=\"method-source-code\" id=\"validates_format_of-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/format.rb, line 108\ndef validates_format_of(*attr_names)\n  validates_with FormatValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_inclusion_of\"> <span class=\"method-name\">validates_inclusion_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates whether the value of the specified attribute is available in a particular enumerable object.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_inclusion_of :gender, in: %w( m f )\n  validates_inclusion_of :age, in: 0..99\n  validates_inclusion_of :format, in: %w( jpg gif png ), message: \"extension %{value} is not included in the list\"\n  validates_inclusion_of :states, in: -&gt;(person) { STATES[person.country] }\n  validates_inclusion_of :karma, in: :available_karmas\nend\n</pre> <p>Configuration options:</p> <ul>\n<li> <p><code>:in</code> - An enumerable object of available items. This can be supplied as a proc, lambda or symbol which returns an enumerable. If the enumerable is a numerical range the test is performed with <code>Range#cover?</code>, otherwise with <code>include?</code>. When using a proc or lambda the instance under validation is passed as an argument.</p> </li>\n<li> <p><code>:within</code> - A synonym(or alias) for <code>:in</code></p> </li>\n<li> <p><code>:message</code> - Specifies a custom error message (default is: “is not included in the list”).</p> </li>\n</ul> <p>There is also a list of default options supported by every validator: <code>:if</code>, <code>:unless</code>, <code>:on</code>, <code>:allow_nil</code>, <code>:allow_blank</code>, and <code>:strict</code>. See <code>ActiveModel::Validation#validates</code> for more information</p> <div class=\"method-source-code\" id=\"validates_inclusion_of-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/inclusion.rb, line 41\ndef validates_inclusion_of(*attr_names)\n  validates_with InclusionValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_length_of\"> <span class=\"method-name\">validates_length_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates that the specified attribute matches the length restrictions supplied. Only one option can be used at a time:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_length_of :first_name, maximum: 30\n  validates_length_of :last_name, maximum: 30, message: \"less than 30 if you don't mind\"\n  validates_length_of :fax, in: 7..32, allow_nil: true\n  validates_length_of :phone, in: 7..32, allow_blank: true\n  validates_length_of :user_name, within: 6..20, too_long: 'pick a shorter name', too_short: 'pick a longer name'\n  validates_length_of :zip_code, minimum: 5, too_short: 'please enter at least 5 characters'\n  validates_length_of :smurf_leader, is: 4, message: \"papa is spelled with 4 characters... don't play me.\"\n  validates_length_of :essay, minimum: 100, too_short: 'Your essay must be at least 100 words.',\n                      tokenizer: -&gt;(str) { str.scan(/\\w+/) }\nend\n</pre> <p>Configuration options:</p> <ul>\n<li> <p><code>:minimum</code> - The minimum size of the attribute.</p> </li>\n<li> <p><code>:maximum</code> - The maximum size of the attribute. Allows <code>nil</code> by default if not used with :minimum.</p> </li>\n<li> <p><code>:is</code> - The exact size of the attribute.</p> </li>\n<li> <p><code>:within</code> - A range specifying the minimum and maximum size of the attribute.</p> </li>\n<li> <p><code>:in</code> - A synonym (or alias) for <code>:within</code>.</p> </li>\n<li> <p><code>:allow_nil</code> - Attribute may be <code>nil</code>; skip validation.</p> </li>\n<li> <p><code>:allow_blank</code> - Attribute may be blank; skip validation.</p> </li>\n<li> <p><code>:too_long</code> - The error message if the attribute goes over the maximum (default is: “is too long (maximum is %{count} characters)”).</p> </li>\n<li> <p><code>:too_short</code> - The error message if the attribute goes under the minimum (default is: “is too short (min is %{count} characters)”).</p> </li>\n<li> <p><code>:wrong_length</code> - The error message if using the <code>:is</code> method and the attribute is the wrong size (default is: “is the wrong length (should be %{count} characters)”).</p> </li>\n<li> <p><code>:message</code> - The error message to use for a <code>:minimum</code>, <code>:maximum</code>, or <code>:is</code> violation. An alias of the appropriate <code>too_long</code>/<code>too_short</code>/<code>wrong_length</code> message.</p> </li>\n<li> <p><code>:tokenizer</code> - Specifies how to split up the attribute string. (e.g. <code>tokenizer: -&gt;(str) { str.scan(/\\w+/) }</code> to count words as in above example). Defaults to <code>-&gt;(value) { value.split(//)\n}</code> which counts individual characters.</p> </li>\n</ul> <p>There is also a list of default options supported by every validator: <code>:if</code>, <code>:unless</code>, <code>:on</code> and <code>:strict</code>. See <code>ActiveModel::Validation#validates</code> for more information</p> <div class=\"method-source-code\" id=\"validates_length_of-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/length.rb, line 119\ndef validates_length_of(*attr_names)\n  validates_with LengthValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"helpermethods#method-i-validates_size_of\">validates_size_of</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_numericality_of\"> <span class=\"method-name\">validates_numericality_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates whether the value of the specified attribute is numeric by trying to convert it to a float with <a href=\"../../kernel\">Kernel</a>.Float (if <code>only_integer</code> is <code>false</code>) or applying it to the regular expression <code>/\\A[+\\-]?\\d+\\Z/</code> (if <code>only_integer</code> is set to <code>true</code>).</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_numericality_of :value, on: :create\nend\n</pre> <p>Configuration options:</p> <ul>\n<li> <p><code>:message</code> - A custom error message (default is: “is not a number”).</p> </li>\n<li> <p><code>:only_integer</code> - Specifies whether the value has to be an integer, e.g. an integral value (default is <code>false</code>).</p> </li>\n<li> <p><code>:allow_nil</code> - Skip validation if attribute is <code>nil</code> (default is <code>false</code>). Notice that for fixnum and float columns empty strings are converted to <code>nil</code>.</p> </li>\n<li> <p><code>:greater_than</code> - Specifies the value must be greater than the supplied value.</p> </li>\n<li> <p><code>:greater_than_or_equal_to</code> - Specifies the value must be greater than or equal the supplied value.</p> </li>\n<li> <p><code>:equal_to</code> - Specifies the value must be equal to the supplied value.</p> </li>\n<li> <p><code>:less_than</code> - Specifies the value must be less than the supplied value.</p> </li>\n<li> <p><code>:less_than_or_equal_to</code> - Specifies the value must be less than or equal the supplied value.</p> </li>\n<li> <p><code>:other_than</code> - Specifies the value must be other than the supplied value.</p> </li>\n<li> <p><code>:odd</code> - Specifies the value must be an odd number.</p> </li>\n<li> <p><code>:even</code> - Specifies the value must be an even number.</p> </li>\n</ul> <p>There is also a list of default options supported by every validator: <code>:if</code>, <code>:unless</code>, <code>:on</code>, <code>:allow_nil</code>, <code>:allow_blank</code>, and <code>:strict</code> . See <code>ActiveModel::Validation#validates</code> for more information</p> <p>The following checks can also be supplied with a proc or a symbol which corresponds to a method:</p> <ul>\n<li> <p><code>:greater_than</code></p> </li>\n<li> <p><code>:greater_than_or_equal_to</code></p> </li>\n<li> <p><code>:equal_to</code></p> </li>\n<li> <p><code>:less_than</code></p> </li>\n<li> <p><code>:less_than_or_equal_to</code></p> </li>\n<li> <p><code>:only_integer</code></p> </li>\n</ul> <p>For example:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_numericality_of :width, less_than: -&gt;(person) { person.height }\n  validates_numericality_of :width, greater_than: :minimum_weight\nend\n</pre> <div class=\"method-source-code\" id=\"validates_numericality_of-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/numericality.rb, line 154\ndef validates_numericality_of(*attr_names)\n  validates_with NumericalityValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_presence_of\"> <span class=\"method-name\">validates_presence_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates that the specified attributes are not blank (as defined by <a href=\"../../object#method-i-blank-3F\">Object#blank?</a>). Happens by default on save.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_presence_of :first_name\nend\n</pre> <p>The first_name attribute must be in the object and it cannot be blank.</p> <p>If you want to validate the presence of a boolean field (where the real values are <code>true</code> and <code>false</code>), you will want to use <code>validates_inclusion_of :field_name, in: [true, false]</code>.</p> <p>This is due to the way <a href=\"../../object#method-i-blank-3F\">Object#blank?</a> handles boolean values: <code>false.blank? # =&gt; true</code>.</p> <p>Configuration options:</p> <ul><li> <p><code>:message</code> - A custom error message (default is: “can't be blank”).</p> </li></ul> <p>There is also a list of default options supported by every validator: <code>:if</code>, <code>:unless</code>, <code>:on</code>, <code>:allow_nil</code>, <code>:allow_blank</code>, and <code>:strict</code>. See <code>ActiveModel::Validation#validates</code> for more information</p> <div class=\"method-source-code\" id=\"validates_presence_of-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validations/presence.rb, line 34\ndef validates_presence_of(*attr_names)\n  validates_with PresenceValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-validates_size_of\"> <span class=\"method-name\">validates_size_of</span><span class=\"method-args\">(*attr_names)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"helpermethods#method-i-validates_length_of\">validates_length_of</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activemodel/validator":"<h1 id=\"class-ActiveModel::Validator\" class=\"class\"> class ActiveModel::Validator </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h2 id=\"class-ActiveModel::Validator-label-Active+Model+Validator\">Active Model Validator</h2> <p>A simple base class that can be used along with <a href=\"validations/classmethods#method-i-validates_with\">ActiveModel::Validations::ClassMethods#validates_with</a></p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n  validates_with MyValidator\nend\n\nclass MyValidator &lt; ActiveModel::Validator\n  def validate(record)\n    if some_complex_logic\n      record.errors[:base] = \"This record is invalid\"\n    end\n  end\n\n  private\n    def some_complex_logic\n      # ...\n    end\nend\n</pre> <p>Any class that inherits from <a href=\"validator\">ActiveModel::Validator</a> must implement a method called <code>validate</code> which accepts a <code>record</code>.</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n  validates_with MyValidator\nend\n\nclass MyValidator &lt; ActiveModel::Validator\n  def validate(record)\n    record # =&gt; The person instance being validated\n    options # =&gt; Any non-standard options passed to validates_with\n  end\nend\n</pre> <p>To cause a validation error, you must add to the <code>record</code>'s errors directly from within the validators message.</p> <pre class=\"ruby\">class MyValidator &lt; ActiveModel::Validator\n  def validate(record)\n    record.errors.add :base, \"This is some custom error message\"\n    record.errors.add :first_name, \"This is some complex validation\"\n    # etc...\n  end\nend\n</pre> <p>To add behavior to the initialize method, use the following signature:</p> <pre class=\"ruby\">class MyValidator &lt; ActiveModel::Validator\n  def initialize(options)\n    super\n    @my_custom_field = options[:field_name] || :first_name\n  end\nend\n</pre> <p>Note that the validator is initialized only once for the whole application life cycle, and not on each validation run.</p> <p>The easiest way to add custom validators for validating individual attributes is with the convenient <code>ActiveModel::EachValidator</code>.</p> <pre class=\"ruby\">class TitleValidator &lt; ActiveModel::EachValidator\n  def validate_each(record, attribute, value)\n    record.errors.add attribute, 'must be Mr., Mrs., or Dr.' unless %w(Mr. Mrs. Dr.).include?(value)\n  end\nend\n</pre> <p>This can now be used in combination with the <code>validates</code> method (see <code>ActiveModel::Validations::ClassMethods.validates</code> for more on this).</p> <pre class=\"ruby\">class Person\n  include ActiveModel::Validations\n  attr_accessor :title\n\n  validates :title, presence: true, title: true\nend\n</pre> <p>It can be useful to access the class that is using that validator when there are prerequisites such as an <code>attr_accessor</code> being present. This class is accessible via +<a href=\"#\">options</a>+ in the constructor. To setup your validator override the constructor.</p> <pre class=\"ruby\">class MyValidator &lt; ActiveModel::Validator\n  def initialize(options={})\n    super\n    options[:class].send :attr_accessor, :custom_attribute\n  end\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-options\"> <span class=\"method-name\">options</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-kind\"> <span class=\"method-name\">kind</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the kind of the validator.</p> <pre class=\"ruby\">PresenceValidator.kind   # =&gt; :presence\nUniquenessValidator.kind # =&gt; :uniqueness\n</pre> <div class=\"method-source-code\" id=\"kind-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validator.rb, line 102\ndef self.kind\n  @kind ||= name.split('::').last.underscore.sub(/_validator$/, '').to_sym unless anonymous?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Accepts options that will be made available through the <code>options</code> reader.</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validator.rb, line 107\ndef initialize(options = {})\n  @options  = options.except(:class).freeze\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-kind\"> <span class=\"method-name\">kind</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the kind for this validator.</p> <pre class=\"ruby\">PresenceValidator.new.kind   # =&gt; :presence\nUniquenessValidator.new.kind # =&gt; :uniqueness\n</pre> <div class=\"method-source-code\" id=\"kind-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validator.rb, line 115\ndef kind\n  self.class.kind\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validate\"> <span class=\"method-name\">validate</span><span class=\"method-args\">(record)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Override this method in subclasses with validation logic, adding errors to the records <code>errors</code> array where necessary.</p> <div class=\"method-source-code\" id=\"validate-source\"> <pre class=\"ruby\"># File activemodel/lib/active_model/validator.rb, line 121\ndef validate(record)\n  raise NotImplementedError, \"Subclasses must implement a validate(record) method.\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord":"<h1 id=\"module-ActiveRecord\" class=\"module\"> module ActiveRecord </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-gem_version\"> <span class=\"method-name\">gem_version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Active Record as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"gem_version-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/gem_version.rb, line 3\ndef self.gem_version\n  Gem::Version.new VERSION::STRING\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-version\"> <span class=\"method-name\">version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded <a href=\"activerecord\">ActiveRecord</a> as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"version-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/version.rb, line 5\ndef self.version\n  gem_version\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/activerecorderror":"<h1 id=\"class-ActiveRecord::ActiveRecordError\" class=\"class\"> class ActiveRecord::ActiveRecordError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">StandardError</dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActiveRecord::ActiveRecordError-label-Active+Record+Errors\">Active Record Errors</h1> <p>Generic Active Record exception class.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/adapternotfound":"<h1 id=\"class-ActiveRecord::AdapterNotFound\" class=\"class\"> class ActiveRecord::AdapterNotFound </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when Active Record cannot find database adapter specified in <code>config/database.yml</code> or programmatically.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/adapternotspecified":"<h1 id=\"class-ActiveRecord::AdapterNotSpecified\" class=\"class\"> class ActiveRecord::AdapterNotSpecified </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when adapter not specified on connection (or configuration file <code>config/database.yml</code> misses adapter field).</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/aggregations/classmethods":"<h1 id=\"module-ActiveRecord::Aggregations::ClassMethods\" class=\"module\"> module ActiveRecord::Aggregations::ClassMethods </h1> <section class=\"description\"> <p>Active Record implements aggregation through a macro-like class method called <code>composed_of</code> for representing attributes as value objects. It expresses relationships like “Account [is] composed of Money [among other things]” or “Person [is] composed of [an] address”. Each call to the macro adds a description of how the value objects are created from the attributes of the entity object (when the entity is initialized either as a new object or from finding an existing object) and how it can be turned back into attributes (when the entity is saved to the database).</p> <pre class=\"ruby\">class Customer &lt; ActiveRecord::Base\n  composed_of :balance, class_name: \"Money\", mapping: %w(balance amount)\n  composed_of :address, mapping: [ %w(address_street street), %w(address_city city) ]\nend\n</pre> <p>The customer class now has the following methods to manipulate the value objects:</p> <ul>\n<li> <p><code>Customer#balance, Customer#balance=(money)</code></p> </li>\n<li> <p><code>Customer#address, Customer#address=(address)</code></p> </li>\n</ul> <p>These methods will operate with value objects like the ones described below:</p> <pre class=\"ruby\">class Money\n  include Comparable\n  attr_reader :amount, :currency\n  EXCHANGE_RATES = { \"USD_TO_DKK\" =&gt; 6 }\n\n  def initialize(amount, currency = \"USD\")\n    @amount, @currency = amount, currency\n  end\n\n  def exchange_to(other_currency)\n    exchanged_amount = (amount * EXCHANGE_RATES[\"#{currency}_TO_#{other_currency}\"]).floor\n    Money.new(exchanged_amount, other_currency)\n  end\n\n  def ==(other_money)\n    amount == other_money.amount &amp;&amp; currency == other_money.currency\n  end\n\n  def &lt;=&gt;(other_money)\n    if currency == other_money.currency\n      amount &lt;=&gt; other_money.amount\n    else\n      amount &lt;=&gt; other_money.exchange_to(currency).amount\n    end\n  end\nend\n\nclass Address\n  attr_reader :street, :city\n  def initialize(street, city)\n    @street, @city = street, city\n  end\n\n  def close_to?(other_address)\n    city == other_address.city\n  end\n\n  def ==(other_address)\n    city == other_address.city &amp;&amp; street == other_address.street\n  end\nend\n</pre> <p>Now it's possible to access attributes from the database through the value objects instead. If you choose to name the composition the same as the attribute's name, it will be the only way to access that attribute. That's the case with our <code>balance</code> attribute. You interact with the value objects just like you would with any other attribute:</p> <pre class=\"ruby\">customer.balance = Money.new(20)     # sets the Money value object and the attribute\ncustomer.balance                     # =&gt; Money value object\ncustomer.balance.exchange_to(\"DKK\")  # =&gt; Money.new(120, \"DKK\")\ncustomer.balance &gt; Money.new(10)     # =&gt; true\ncustomer.balance == Money.new(20)    # =&gt; true\ncustomer.balance &lt; Money.new(5)      # =&gt; false\n</pre> <p>Value objects can also be composed of multiple attributes, such as the case of Address. The order of the mappings will determine the order of the parameters.</p> <pre class=\"ruby\">customer.address_street = \"Hyancintvej\"\ncustomer.address_city   = \"Copenhagen\"\ncustomer.address        # =&gt; Address.new(\"Hyancintvej\", \"Copenhagen\")\n\ncustomer.address_street = \"Vesterbrogade\"\ncustomer.address        # =&gt; Address.new(\"Hyancintvej\", \"Copenhagen\")\ncustomer.clear_aggregation_cache\ncustomer.address        # =&gt; Address.new(\"Vesterbrogade\", \"Copenhagen\")\n\ncustomer.address = Address.new(\"May Street\", \"Chicago\")\ncustomer.address_street # =&gt; \"May Street\"\ncustomer.address_city   # =&gt; \"Chicago\"\n</pre> <h2 id=\"module-ActiveRecord::Aggregations::ClassMethods-label-Writing+value+objects\">Writing value objects</h2> <p>Value objects are immutable and interchangeable objects that represent a given value, such as a Money object representing $5. Two Money objects both representing $5 should be equal (through methods such as <code>==</code> and <code>&lt;=&gt;</code> from Comparable if ranking makes sense). This is unlike entity objects where equality is determined by identity. An entity class such as Customer can easily have two different objects that both have an address on Hyancintvej. Entity identity is determined by object or relational unique identifiers (such as primary keys). Normal <a href=\"../base\">ActiveRecord::Base</a> classes are entity objects.</p> <p>It's also important to treat the value objects as immutable. Don't allow the Money object to have its amount changed after creation. Create a new Money object with the new value instead. The Money#exchange_to method is an example of this. It returns a new value object instead of changing its own values. Active Record won't persist value objects that have been changed through means other than the writer method.</p> <p>The immutable requirement is enforced by Active Record by freezing any object assigned as a value object. Attempting to change it afterwards will result in a RuntimeError.</p> <p>Read more about value objects on <a href=\"http://c2.com/cgi/wiki?ValueObject\">c2.com/cgi/wiki?ValueObject</a> and on the dangers of not keeping value objects immutable on <a href=\"http://c2.com/cgi/wiki?ValueObjectsShouldBeImmutable\">c2.com/cgi/wiki?ValueObjectsShouldBeImmutable</a></p> <h2 id=\"module-ActiveRecord::Aggregations::ClassMethods-label-Custom+constructors+and+converters\">Custom constructors and converters</h2> <p>By default value objects are initialized by calling the <code>new</code> constructor of the value class passing each of the mapped attributes, in the order specified by the <code>:mapping</code> option, as arguments. If the value class doesn't support this convention then <code>composed_of</code> allows a custom constructor to be specified.</p> <p>When a new value is assigned to the value object, the default assumption is that the new value is an instance of the value class. Specifying a custom converter allows the new value to be automatically converted to an instance of value class if necessary.</p> <p>For example, the NetworkResource model has <code>network_address</code> and <code>cidr_range</code> attributes that should be aggregated using the NetAddr::CIDR value class (<a href=\"http://www.ruby-doc.org/gems/docs/n/netaddr-1.5.0/NetAddr/CIDR.html\">www.ruby-doc.org/gems/docs/n/netaddr-1.5.0/NetAddr/CIDR.html</a>). The constructor for the value class is called <code>create</code> and it expects a CIDR address string as a parameter. New values can be assigned to the value object using either another NetAddr::CIDR object, a string or an array. The <code>:constructor</code> and <code>:converter</code> options can be used to meet these requirements:</p> <pre class=\"ruby\">class NetworkResource &lt; ActiveRecord::Base\n  composed_of :cidr,\n              class_name: 'NetAddr::CIDR',\n              mapping: [ %w(network_address network), %w(cidr_range bits) ],\n              allow_nil: true,\n              constructor: Proc.new { |network_address, cidr_range| NetAddr::CIDR.create(\"#{network_address}/#{cidr_range}\") },\n              converter: Proc.new { |value| NetAddr::CIDR.create(value.is_a?(Array) ? value.join('/') : value) }\nend\n\n# This calls the :constructor\nnetwork_resource = NetworkResource.new(network_address: '192.168.0.1', cidr_range: 24)\n\n# These assignments will both use the :converter\nnetwork_resource.cidr = [ '192.168.2.1', 8 ]\nnetwork_resource.cidr = '192.168.0.1/24'\n\n# This assignment won't use the :converter as the value is already an instance of the value class\nnetwork_resource.cidr = NetAddr::CIDR.create('192.168.2.1/8')\n\n# Saving and then reloading will use the :constructor on reload\nnetwork_resource.save\nnetwork_resource.reload\n</pre> <h2 id=\"module-ActiveRecord::Aggregations::ClassMethods-label-Finding+records+by+a+value+object\">Finding records by a value object</h2> <p>Once a <code>composed_of</code> relationship is specified for a model, records can be loaded from the database by specifying an instance of the value object in the conditions hash. The following example finds all customers with <code>balance_amount</code> equal to 20 and <code>balance_currency</code> equal to “USD”:</p> <pre class=\"ruby\">Customer.where(balance: Money.new(20, \"USD\"))\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-composed_of\"> <span class=\"method-name\">composed_of</span><span class=\"method-args\">(part_id, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds reader and writer methods for manipulating a value object: <code>composed_of :address</code> adds <code>address</code> and <code>address=(new_address)</code> methods.</p> <p>Options are:</p> <ul>\n<li> <p><code>:class_name</code> - Specifies the class name of the association. Use it only if that name can't be inferred from the part id. So <code>composed_of :address</code> will by default be linked to the Address class, but if the real class name is CompanyAddress, you'll have to specify it with this option.</p> </li>\n<li> <p><code>:mapping</code> - Specifies the mapping of entity attributes to attributes of the value object. Each mapping is represented as an array where the first item is the name of the entity attribute and the second item is the name of the attribute in the value object. The order in which mappings are defined determines the order in which attributes are sent to the value class constructor.</p> </li>\n<li> <p><code>:allow_nil</code> - Specifies that the value object will not be instantiated when all mapped attributes are <code>nil</code>. Setting the value object to <code>nil</code> has the effect of writing <code>nil</code> to all mapped attributes. This defaults to <code>false</code>.</p> </li>\n<li> <p><code>:constructor</code> - A symbol specifying the name of the constructor method or a Proc that is called to initialize the value object. The constructor is passed all of the mapped attributes, in the order that they are defined in the <code>:mapping option</code>, as arguments and uses them to instantiate a <code>:class_name</code> object. The default is <code>:new</code>.</p> </li>\n<li> <p><code>:converter</code> - A symbol specifying the name of a class method of <code>:class_name</code> or a Proc that is called when a new value is assigned to the value object. The converter is passed the single value that is used in the assignment and is only called if the new value is not an instance of <code>:class_name</code>. If <code>:allow_nil</code> is set to true, the converter can return nil to skip the assignment.</p> </li>\n</ul> <p>Option examples:</p> <pre class=\"ruby\">composed_of :temperature, mapping: %w(reading celsius)\ncomposed_of :balance, class_name: \"Money\", mapping: %w(balance amount),\n                      converter: Proc.new { |balance| balance.to_money }\ncomposed_of :address, mapping: [ %w(address_street street), %w(address_city city) ]\ncomposed_of :gps_location\ncomposed_of :gps_location, allow_nil: true\ncomposed_of :ip_address,\n            class_name: 'IPAddr',\n            mapping: %w(ip to_i),\n            constructor: Proc.new { |ip| IPAddr.new(ip, Socket::AF_INET) },\n            converter: Proc.new { |ip| ip.is_a?(Integer) ? IPAddr.new(ip, Socket::AF_INET) : IPAddr.new(ip.to_s) }\n</pre> <div class=\"method-source-code\" id=\"composed_of-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/aggregations.rb, line 212\ndef composed_of(part_id, options = {})\n  options.assert_valid_keys(:class_name, :mapping, :allow_nil, :constructor, :converter)\n\n  name        = part_id.id2name\n  class_name  = options[:class_name]  || name.camelize\n  mapping     = options[:mapping]     || [ name, name ]\n  mapping     = [ mapping ] unless mapping.first.is_a?(Array)\n  allow_nil   = options[:allow_nil]   || false\n  constructor = options[:constructor] || :new\n  converter   = options[:converter]\n\n  reader_method(name, class_name, mapping, allow_nil, constructor)\n  writer_method(name, class_name, mapping, allow_nil, converter)\n\n  reflection = ActiveRecord::Reflection.create(:composed_of, part_id, nil, options, self)\n  Reflection.add_aggregate_reflection self, part_id, reflection\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/associationtypemismatch":"<h1 id=\"class-ActiveRecord::AssociationTypeMismatch\" class=\"class\"> class ActiveRecord::AssociationTypeMismatch </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when an object assigned to an association has an incorrect type.</p> <pre class=\"ruby\">class Ticket &lt; ActiveRecord::Base\n  has_many :patches\nend\n\nclass Patch &lt; ActiveRecord::Base\n  belongs_to :ticket\nend\n\n# Comments are not patches, this assignment raises AssociationTypeMismatch.\n@ticket.patches &lt;&lt; Comment.new(content: \"Please attach tests to your patch.\")\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/associations/builder":"<h1 id=\"module-ActiveRecord::Associations::Builder\" class=\"module\"> module ActiveRecord::Associations::Builder </h1> <section class=\"description\"> <p>This is the parent Association class which defines the variables used by all associations.</p> <p>The hierarchy is defined as follows:</p> <pre class=\"ruby\">Association\n  - SingularAssociation\n    - BelongsToAssociation\n    - HasOneAssociation\n  - CollectionAssociation\n    - HasManyAssociation\n</pre> <p>This class is inherited by the has_one and belongs_to association classes</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/associations/classmethods":"<h1 id=\"module-ActiveRecord::Associations::ClassMethods\" class=\"module\"> module ActiveRecord::Associations::ClassMethods </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n\n</dl> <section class=\"description\"> <p>Associations are a set of macro-like class methods for tying objects together through foreign keys. They express relationships like “Project has one Project Manager” or “Project belongs to a Portfolio”. Each macro adds a number of methods to the class which are specialized according to the collection or association symbol and the options hash. It works much the same way as Ruby's own <code>attr*</code> methods.</p> <pre class=\"ruby\">class Project &lt; ActiveRecord::Base\n  belongs_to              :portfolio\n  has_one                 :project_manager\n  has_many                :milestones\n  has_and_belongs_to_many :categories\nend\n</pre> <p>The project class now has the following methods (and more) to ease the traversal and manipulation of its relationships:</p> <ul>\n<li> <p><code>Project#portfolio, Project#portfolio=(portfolio),\nProject#portfolio.nil?</code></p> </li>\n<li> <p><code>Project#project_manager, Project#project_manager=(project_manager),\nProject#project_manager.nil?,</code></p> </li>\n<li> <p><code>Project#milestones.empty?, Project#milestones.size,\nProject#milestones, Project#milestones&lt;&lt;(milestone),</code> <code>Project#milestones.delete(milestone),\nProject#milestones.destroy(milestone),\nProject#milestones.find(milestone_id),</code> <code>Project#milestones.build, Project#milestones.create</code></p> </li>\n<li> <p><code>Project#categories.empty?, Project#categories.size,\nProject#categories, Project#categories&lt;&lt;(category1),</code> <code>Project#categories.delete(category1),\nProject#categories.destroy(category1)</code></p> </li>\n</ul> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-A+word+of+warning\">A word of warning</h3> <p>Don't create associations that have the same name as instance methods of <code>ActiveRecord::Base</code>. Since the association adds a method with that name to its model, it will override the inherited method and break things. For instance, <code>attributes</code> and <code>connection</code> would be bad choices for association names.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Auto-generated+methods\">Auto-generated methods</h2> <p>See also Instance Public methods below for more details.</p> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-Singular+associations+-28one-to-one-29\">Singular associations (one-to-one)</h3> <pre>                                  |            |  belongs_to  |\ngenerated methods                 | belongs_to | :polymorphic | has_one\n----------------------------------+------------+--------------+---------\nother(force_reload=false)         |     X      |      X       |    X\nother=(other)                     |     X      |      X       |    X\nbuild_other(attributes={})        |     X      |              |    X\ncreate_other(attributes={})       |     X      |              |    X\ncreate_other!(attributes={})      |     X      |              |    X</pre> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-Collection+associations+-28one-to-many+-2F+many-to-many-29\">Collection associations (one-to-many / many-to-many)</h3> <pre>                                  |       |          | has_many\ngenerated methods                 | habtm | has_many | :through\n----------------------------------+-------+----------+----------\nothers(force_reload=false)        |   X   |    X     |    X\nothers=(other,other,...)          |   X   |    X     |    X\nother_ids                         |   X   |    X     |    X\nother_ids=(id,id,...)             |   X   |    X     |    X\nothers&lt;&lt;                          |   X   |    X     |    X\nothers.push                       |   X   |    X     |    X\nothers.concat                     |   X   |    X     |    X\nothers.build(attributes={})       |   X   |    X     |    X\nothers.create(attributes={})      |   X   |    X     |    X\nothers.create!(attributes={})     |   X   |    X     |    X\nothers.size                       |   X   |    X     |    X\nothers.length                     |   X   |    X     |    X\nothers.count                      |   X   |    X     |    X\nothers.sum(*args)                 |   X   |    X     |    X\nothers.empty?                     |   X   |    X     |    X\nothers.clear                      |   X   |    X     |    X\nothers.delete(other,other,...)    |   X   |    X     |    X\nothers.delete_all                 |   X   |    X     |    X\nothers.destroy(other,other,...)   |   X   |    X     |    X\nothers.destroy_all                |   X   |    X     |    X\nothers.find(*args)                |   X   |    X     |    X\nothers.exists?                    |   X   |    X     |    X\nothers.distinct                   |   X   |    X     |    X\nothers.uniq                       |   X   |    X     |    X\nothers.reset                      |   X   |    X     |    X</pre> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-Overriding+generated+methods\">Overriding generated methods</h3> <p>Association methods are generated in a module that is included into the model class, which allows you to easily override with your own methods and call the original generated method with <code>super</code>. For example:</p> <pre class=\"ruby\">class Car &lt; ActiveRecord::Base\n  belongs_to :owner\n  belongs_to :old_owner\n  def owner=(new_owner)\n    self.old_owner = self.owner\n    super\n  end\nend\n</pre> <p>If your model class is <code>Project</code>, the module is named <code>Project::GeneratedFeatureMethods</code>. The GeneratedFeatureMethods module is included in the model class immediately after the (anonymous) generated attributes methods module, meaning an association will override the methods for an attribute with the same name.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Cardinality+and+associations\">Cardinality and associations</h2> <p>Active Record associations can be used to describe one-to-one, one-to-many and many-to-many relationships between models. Each model uses an association to describe its role in the relation. The <code>belongs_to</code> association is always used in the model that has the foreign key.</p> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-One-to-one\">One-to-one</h3> <p>Use <code>has_one</code> in the base, and <code>belongs_to</code> in the associated model.</p> <pre class=\"ruby\">class Employee &lt; ActiveRecord::Base\n  has_one :office\nend\nclass Office &lt; ActiveRecord::Base\n  belongs_to :employee    # foreign key - employee_id\nend\n</pre> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-One-to-many\">One-to-many</h3> <p>Use <code>has_many</code> in the base, and <code>belongs_to</code> in the associated model.</p> <pre class=\"ruby\">class Manager &lt; ActiveRecord::Base\n  has_many :employees\nend\nclass Employee &lt; ActiveRecord::Base\n  belongs_to :manager     # foreign key - manager_id\nend\n</pre> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-Many-to-many\">Many-to-many</h3> <p>There are two ways to build a many-to-many relationship.</p> <p>The first way uses a <code>has_many</code> association with the <code>:through</code> option and a join model, so there are two stages of associations.</p> <pre class=\"ruby\">class Assignment &lt; ActiveRecord::Base\n  belongs_to :programmer  # foreign key - programmer_id\n  belongs_to :project     # foreign key - project_id\nend\nclass Programmer &lt; ActiveRecord::Base\n  has_many :assignments\n  has_many :projects, through: :assignments\nend\nclass Project &lt; ActiveRecord::Base\n  has_many :assignments\n  has_many :programmers, through: :assignments\nend\n</pre> <p>For the second way, use <code>has_and_belongs_to_many</code> in both models. This requires a join table that has no corresponding model or primary key.</p> <pre class=\"ruby\">class Programmer &lt; ActiveRecord::Base\n  has_and_belongs_to_many :projects       # foreign keys in the join table\nend\nclass Project &lt; ActiveRecord::Base\n  has_and_belongs_to_many :programmers    # foreign keys in the join table\nend\n</pre> <p>Choosing which way to build a many-to-many relationship is not always simple. If you need to work with the relationship model as its own entity, use <code>has_many :through</code>. Use <code>has_and_belongs_to_many</code> when working with legacy schemas or when you never work directly with the relationship itself.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Is+it+a+belongs_to+or+has_one+association-3F\">Is it a <code>belongs_to</code> or <code>has_one</code> association?</h2> <p>Both express a 1-1 relationship. The difference is mostly where to place the foreign key, which goes on the table for the class declaring the <code>belongs_to</code> relationship.</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  # I reference an account.\n  belongs_to :account\nend\n\nclass Account &lt; ActiveRecord::Base\n  # One user references me.\n  has_one :user\nend\n</pre> <p>The tables for these classes could look something like:</p> <pre>CREATE TABLE users (\n  id int(11) NOT NULL auto_increment,\n  account_id int(11) default NULL,\n  name varchar default NULL,\n  PRIMARY KEY  (id)\n)\n\nCREATE TABLE accounts (\n  id int(11) NOT NULL auto_increment,\n  name varchar default NULL,\n  PRIMARY KEY  (id)\n)</pre> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Unsaved+objects+and+associations\">Unsaved objects and associations</h2> <p>You can manipulate objects and associations before they are saved to the database, but there is some special behavior you should be aware of, mostly involving the saving of associated objects.</p> <p>You can set the <code>:autosave</code> option on a <code>has_one</code>, <code>belongs_to</code>, <code>has_many</code>, or <code>has_and_belongs_to_many</code> association. Setting it to <code>true</code> will <em>always</em> save the members, whereas setting it to <code>false</code> will <em>never</em> save the members. More details about <code>:autosave</code> option is available at <a href=\"../autosaveassociation\">AutosaveAssociation</a>.</p> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-One-to-one+associations\">One-to-one associations</h3> <ul>\n<li> <p>Assigning an object to a <code>has_one</code> association automatically saves that object and the object being replaced (if there is one), in order to update their foreign keys - except if the parent object is unsaved (<code>new_record? == true</code>).</p> </li>\n<li> <p>If either of these saves fail (due to one of the objects being invalid), an <code>ActiveRecord::RecordNotSaved</code> exception is raised and the assignment is cancelled.</p> </li>\n<li> <p>If you wish to assign an object to a <code>has_one</code> association without saving it, use the <code>build_association</code> method (documented below). The object being replaced will still be saved to update its foreign key.</p> </li>\n<li> <p>Assigning an object to a <code>belongs_to</code> association does not save the object, since the foreign key field belongs on the parent. It does not save the parent either.</p> </li>\n</ul> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-Collections\">Collections</h3> <ul>\n<li> <p>Adding an object to a collection (<code>has_many</code> or <code>has_and_belongs_to_many</code>) automatically saves that object, except if the parent object (the owner of the collection) is not yet stored in the database.</p> </li>\n<li> <p>If saving any of the objects being added to a collection (via <code>push</code> or similar) fails, then <code>push</code> returns <code>false</code>.</p> </li>\n<li> <p>If saving fails while replacing the collection (via <code>association=</code>), an <code>ActiveRecord::RecordNotSaved</code> exception is raised and the assignment is cancelled.</p> </li>\n<li> <p>You can add an object to a collection without automatically saving it by using the <code>collection.build</code> method (documented below).</p> </li>\n<li> <p>All unsaved (<code>new_record? == true</code>) members of the collection are automatically saved when the parent is saved.</p> </li>\n</ul> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Customizing+the+query\">Customizing the query</h2> <p>Associations are built from <code>Relation</code>s, and you can use the <code>Relation</code> syntax to customize them. For example, to add a condition:</p> <pre class=\"ruby\">class Blog &lt; ActiveRecord::Base\n  has_many :published_posts, -&gt; { where published: true }, class_name: 'Post'\nend\n</pre> <p>Inside the <code>-&gt; { ... }</code> block you can use all of the usual <code>Relation</code> methods.</p> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-Accessing+the+owner+object\">Accessing the owner object</h3> <p>Sometimes it is useful to have access to the owner object when building the query. The owner is passed as a parameter to the block. For example, the following association would find all events that occur on the user's birthday:</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  has_many :birthday_events, -&gt;(user) { where starts_on: user.birthday }, class_name: 'Event'\nend\n</pre> <p>Note: Joining, eager loading and preloading of these associations is not fully possible. These operations happen before instance creation and the scope will be called with a <code>nil</code> argument. This can lead to unexpected behavior and is deprecated.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Association+callbacks\">Association callbacks</h2> <p>Similar to the normal callbacks that hook into the life cycle of an Active Record object, you can also define callbacks that get triggered when you add an object to or remove an object from an association collection.</p> <pre>class Project\n  has_and_belongs_to_many :developers, after_add: :evaluate_velocity\n\n  def evaluate_velocity(developer)\n    ...\n  end\nend</pre> <p>It's possible to stack callbacks by passing them as an array. Example:</p> <pre class=\"ruby\">class Project\n  has_and_belongs_to_many :developers,\n                          after_add: [:evaluate_velocity, Proc.new { |p, d| p.shipping_date = Time.now}]\nend\n</pre> <p>Possible callbacks are: <code>before_add</code>, <code>after_add</code>, <code>before_remove</code> and <code>after_remove</code>.</p> <p>If any of the <code>before_add</code> callbacks throw an exception, the object will not be added to the collection.</p> <p>Similarly, if any of the <code>before_remove</code> callbacks throw an exception, the object will not be removed from the collection.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Association+extensions\">Association extensions</h2> <p>The proxy objects that control the access to associations can be extended through anonymous modules. This is especially beneficial for adding new finders, creators, and other factory-type methods that are only used as part of this association.</p> <pre class=\"ruby\">class Account &lt; ActiveRecord::Base\n  has_many :people do\n    def find_or_create_by_name(name)\n      first_name, last_name = name.split(\" \", 2)\n      find_or_create_by(first_name: first_name, last_name: last_name)\n    end\n  end\nend\n\nperson = Account.first.people.find_or_create_by_name(\"David Heinemeier Hansson\")\nperson.first_name # =&gt; \"David\"\nperson.last_name  # =&gt; \"Heinemeier Hansson\"\n</pre> <p>If you need to share the same extensions between many associations, you can use a named extension module.</p> <pre class=\"ruby\">module FindOrCreateByNameExtension\n  def find_or_create_by_name(name)\n    first_name, last_name = name.split(\" \", 2)\n    find_or_create_by(first_name: first_name, last_name: last_name)\n  end\nend\n\nclass Account &lt; ActiveRecord::Base\n  has_many :people, -&gt; { extending FindOrCreateByNameExtension }\nend\n\nclass Company &lt; ActiveRecord::Base\n  has_many :people, -&gt; { extending FindOrCreateByNameExtension }\nend\n</pre> <p>Some extensions can only be made to work with knowledge of the association's internals. Extensions can access relevant state using the following methods (where <code>items</code> is the name of the association):</p> <ul>\n<li> <p><code>record.association(:items).owner</code> - Returns the object the association is part of.</p> </li>\n<li> <p><code>record.association(:items).reflection</code> - Returns the reflection object that describes the association.</p> </li>\n<li> <p><code>record.association(:items).target</code> - Returns the associated object for <code>belongs_to</code> and <code>has_one</code>, or the collection of associated objects for <code>has_many</code> and <code>has_and_belongs_to_many</code>.</p> </li>\n</ul> <p>However, inside the actual extension code, you will not have access to the <code>record</code> as above. In this case, you can access <code>proxy_association</code>. For example, <code>record.association(:items)</code> and <code>record.items.proxy_association</code> will return the same object, allowing you to make calls like <code>proxy_association.owner</code> inside association extensions.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Association+Join+Models\">Association Join Models</h2> <p>Has Many associations can be configured with the <code>:through</code> option to use an explicit join model to retrieve the data. This operates similarly to a <code>has_and_belongs_to_many</code> association. The advantage is that you're able to add validations, callbacks, and extra attributes on the join model. Consider the following schema:</p> <pre class=\"ruby\">class Author &lt; ActiveRecord::Base\n  has_many :authorships\n  has_many :books, through: :authorships\nend\n\nclass Authorship &lt; ActiveRecord::Base\n  belongs_to :author\n  belongs_to :book\nend\n\n@author = Author.first\n@author.authorships.collect { |a| a.book } # selects all books that the author's authorships belong to\n@author.books                              # selects all books by using the Authorship join model\n</pre> <p>You can also go through a <code>has_many</code> association on the join model:</p> <pre class=\"ruby\">class Firm &lt; ActiveRecord::Base\n  has_many   :clients\n  has_many   :invoices, through: :clients\nend\n\nclass Client &lt; ActiveRecord::Base\n  belongs_to :firm\n  has_many   :invoices\nend\n\nclass Invoice &lt; ActiveRecord::Base\n  belongs_to :client\nend\n\n@firm = Firm.first\n@firm.clients.flat_map { |c| c.invoices } # select all invoices for all clients of the firm\n@firm.invoices                            # selects all invoices by going through the Client join model\n</pre> <p>Similarly you can go through a <code>has_one</code> association on the join model:</p> <pre class=\"ruby\">class Group &lt; ActiveRecord::Base\n  has_many   :users\n  has_many   :avatars, through: :users\nend\n\nclass User &lt; ActiveRecord::Base\n  belongs_to :group\n  has_one    :avatar\nend\n\nclass Avatar &lt; ActiveRecord::Base\n  belongs_to :user\nend\n\n@group = Group.first\n@group.users.collect { |u| u.avatar }.compact # select all avatars for all users in the group\n@group.avatars                                # selects all avatars by going through the User join model.\n</pre> <p>An important caveat with going through <code>has_one</code> or <code>has_many</code> associations on the join model is that these associations are <strong>read-only</strong>. For example, the following would not work following the previous example:</p> <pre class=\"ruby\">@group.avatars &lt;&lt; Avatar.new   # this would work if User belonged_to Avatar rather than the other way around\n@group.avatars.delete(@group.avatars.last)  # so would this\n</pre> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Setting+Inverses\">Setting Inverses</h2> <p>If you are using a <code>belongs_to</code> on the join model, it is a good idea to set the <code>:inverse_of</code> option on the <code>belongs_to</code>, which will mean that the following example works correctly (where <code>tags</code> is a <code>has_many</code> <code>:through</code> association):</p> <pre class=\"ruby\">@post = Post.first\n@tag = @post.tags.build name: \"ruby\"\n@tag.save\n</pre> <p>The last line ought to save the through record (a <code>Taggable</code>). This will only work if the <code>:inverse_of</code> is set:</p> <pre class=\"ruby\">class Taggable &lt; ActiveRecord::Base\n  belongs_to :post\n  belongs_to :tag, inverse_of: :taggings\nend\n</pre> <p>If you do not set the <code>:inverse_of</code> record, the association will do its best to match itself up with the correct inverse. Automatic inverse detection only works on <code>has_many</code>, <code>has_one</code>, and <code>belongs_to</code> associations.</p> <p>Extra options on the associations, as defined in the <code>AssociationReflection::INVALID_AUTOMATIC_INVERSE_OPTIONS</code> constant, will also prevent the association's inverse from being found automatically.</p> <p>The automatic guessing of the inverse association uses a heuristic based on the name of the class, so it may not work for all associations, especially the ones with non-standard names.</p> <p>You can turn off the automatic detection of inverse associations by setting the <code>:inverse_of</code> option to <code>false</code> like so:</p> <pre class=\"ruby\">class Taggable &lt; ActiveRecord::Base\n  belongs_to :tag, inverse_of: false\nend\n</pre> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Nested+Associations\">Nested Associations</h2> <p>You can actually specify <strong>any</strong> association with the <code>:through</code> option, including an association which has a <code>:through</code> option itself. For example:</p> <pre class=\"ruby\">class Author &lt; ActiveRecord::Base\n  has_many :posts\n  has_many :comments, through: :posts\n  has_many :commenters, through: :comments\nend\n\nclass Post &lt; ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment &lt; ActiveRecord::Base\n  belongs_to :commenter\nend\n\n@author = Author.first\n@author.commenters # =&gt; People who commented on posts written by the author\n</pre> <p>An equivalent way of setting up this association this would be:</p> <pre class=\"ruby\">class Author &lt; ActiveRecord::Base\n  has_many :posts\n  has_many :commenters, through: :posts\nend\n\nclass Post &lt; ActiveRecord::Base\n  has_many :comments\n  has_many :commenters, through: :comments\nend\n\nclass Comment &lt; ActiveRecord::Base\n  belongs_to :commenter\nend\n</pre> <p>When using a nested association, you will not be able to modify the association because there is not enough information to know what modification to make. For example, if you tried to add a <code>Commenter</code> in the example above, there would be no way to tell how to set up the intermediate <code>Post</code> and <code>Comment</code> objects.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Polymorphic+Associations\">Polymorphic Associations</h2> <p>Polymorphic associations on models are not restricted on what types of models they can be associated with. Rather, they specify an interface that a <code>has_many</code> association must adhere to.</p> <pre class=\"ruby\">class Asset &lt; ActiveRecord::Base\n  belongs_to :attachable, polymorphic: true\nend\n\nclass Post &lt; ActiveRecord::Base\n  has_many :assets, as: :attachable         # The :as option specifies the polymorphic interface to use.\nend\n\n@asset.attachable = @post\n</pre> <p>This works by using a type column in addition to a foreign key to specify the associated record. In the Asset example, you'd need an <code>attachable_id</code> integer column and an <code>attachable_type</code> string column.</p> <p>Using polymorphic associations in combination with single table inheritance (STI) is a little tricky. In order for the associations to work as expected, ensure that you store the base model for the STI models in the type column of the polymorphic association. To continue with the asset example above, suppose there are guest posts and member posts that use the posts table for STI. In this case, there must be a <code>type</code> column in the posts table.</p> <p>Note: The <code>attachable_type=</code> method is being called when assigning an <code>attachable</code>. The <code>class_name</code> of the <code>attachable</code> is passed as a <a href=\"../../string\">String</a>.</p> <pre class=\"ruby\">class Asset &lt; ActiveRecord::Base\n  belongs_to :attachable, polymorphic: true\n\n  def attachable_type=(class_name)\n     super(class_name.constantize.base_class.to_s)\n  end\nend\n\nclass Post &lt; ActiveRecord::Base\n  # because we store \"Post\" in attachable_type now dependent: :destroy will work\n  has_many :assets, as: :attachable, dependent: :destroy\nend\n\nclass GuestPost &lt; Post\nend\n\nclass MemberPost &lt; Post\nend\n</pre> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Caching\">Caching</h2> <p>All of the methods are built on a simple caching principle that will keep the result of the last query around unless specifically instructed not to. The cache is even shared across methods to make it even cheaper to use the macro-added methods without worrying too much about performance at the first go.</p> <pre class=\"ruby\">project.milestones             # fetches milestones from the database\nproject.milestones.size        # uses the milestone cache\nproject.milestones.empty?      # uses the milestone cache\nproject.milestones(true).size  # fetches milestones from the database\nproject.milestones             # uses the milestone cache\n</pre> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Eager+loading+of+associations\">Eager loading of associations</h2> <p>Eager loading is a way to find objects of a certain class and a number of named associations. It is one of the easiest ways to prevent the dreaded N+1 problem in which fetching 100 posts that each need to display their author triggers 101 database queries. Through the use of eager loading, the number of queries will be reduced from 101 to 2.</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  belongs_to :author\n  has_many   :comments\nend\n</pre> <p>Consider the following loop using the class above:</p> <pre class=\"ruby\">Post.all.each do |post|\n  puts \"Post:            \" + post.title\n  puts \"Written by:      \" + post.author.name\n  puts \"Last comment on: \" + post.comments.first.created_on\nend\n</pre> <p>To iterate over these one hundred posts, we'll generate 201 database queries. Let's first just optimize it for retrieving the author:</p> <pre>Post.includes(:author).each do |post|</pre> <p>This references the name of the <code>belongs_to</code> association that also used the <code>:author</code> symbol. After loading the posts, find will collect the <code>author_id</code> from each one and load all the referenced authors with one query. Doing so will cut down the number of queries from 201 to 102.</p> <p>We can improve upon the situation further by referencing both associations in the finder with:</p> <pre>Post.includes(:author, :comments).each do |post|</pre> <p>This will load all comments with a single query. This reduces the total number of queries to 3. In general, the number of queries will be 1 plus the number of associations named (except if some of the associations are polymorphic <code>belongs_to</code> - see below).</p> <p>To include a deep hierarchy of associations, use a hash:</p> <pre>Post.includes(:author, { comments: { author: :gravatar } }).each do |post|</pre> <p>The above code will load all the comments and all of their associated authors and gravatars. You can mix and match any combination of symbols, arrays, and hashes to retrieve the associations you want to load.</p> <p>All of this power shouldn't fool you into thinking that you can pull out huge amounts of data with no performance penalty just because you've reduced the number of queries. The database still needs to send all the data to Active Record and it still needs to be processed. So it's no catch-all for performance problems, but it's a great way to cut down on the number of queries in a situation as the one described above.</p> <p>Since only one table is loaded at a time, conditions or orders cannot reference tables other than the main one. If this is the case, Active Record falls back to the previously used LEFT OUTER JOIN based strategy. For example:</p> <pre class=\"ruby\">Post.includes([:author, :comments]).where(['comments.approved = ?', true])\n</pre> <p>This will result in a single SQL query with joins along the lines of: <code>LEFT OUTER JOIN comments ON comments.post_id = posts.id</code> and <code>LEFT OUTER JOIN authors ON authors.id = posts.author_id</code>. Note that using conditions like this can have unintended consequences. In the above example posts with no approved comments are not returned at all, because the conditions apply to the SQL statement as a whole and not just to the association.</p> <p>You must disambiguate column references for this fallback to happen, for example <code>order: \"author.name DESC\"</code> will work but <code>order: \"name DESC\"</code> will not.</p> <p>If you want to load all posts (including posts with no approved comments) then write your own LEFT OUTER JOIN query using ON</p> <pre class=\"ruby\">Post.joins(\"LEFT OUTER JOIN comments ON comments.post_id = posts.id AND comments.approved = '1'\")\n</pre> <p>In this case it is usually more natural to include an association which has conditions defined on it:</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  has_many :approved_comments, -&gt; { where approved: true }, class_name: 'Comment'\nend\n\nPost.includes(:approved_comments)\n</pre> <p>This will load posts and eager load the <code>approved_comments</code> association, which contains only those comments that have been approved.</p> <p>If you eager load an association with a specified <code>:limit</code> option, it will be ignored, returning all the associated objects:</p> <pre class=\"ruby\">class Picture &lt; ActiveRecord::Base\n  has_many :most_recent_comments, -&gt; { order('id DESC').limit(10) }, class_name: 'Comment'\nend\n\nPicture.includes(:most_recent_comments).first.most_recent_comments # =&gt; returns all associated comments.\n</pre> <p>Eager loading is supported with polymorphic associations.</p> <pre class=\"ruby\">class Address &lt; ActiveRecord::Base\n  belongs_to :addressable, polymorphic: true\nend\n</pre> <p>A call that tries to eager load the addressable model</p> <pre class=\"ruby\">Address.includes(:addressable)\n</pre> <p>This will execute one query to load the addresses and load the addressables with one query per addressable type. For example if all the addressables are either of class Person or Company then a total of 3 queries will be executed. The list of addressable types to load is determined on the back of the addresses loaded. This is not supported if Active Record has to fallback to the previous implementation of eager loading and will raise <code>ActiveRecord::EagerLoadPolymorphicError</code>. The reason is that the parent model's type is a column value so its corresponding table name cannot be put in the <code>FROM</code>/<code>JOIN</code> clauses of that query.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Table+Aliasing\">Table Aliasing</h2> <p>Active Record uses table aliasing in the case that a table is referenced multiple times in a join. If a table is referenced only once, the standard table name is used. The second time, the table is aliased as <code>#{reflection_name}_#{parent_table_name}</code>. Indexes are appended for any more successive uses of the table name.</p> <pre class=\"ruby\">Post.joins(:comments)\n# =&gt; SELECT ... FROM posts INNER JOIN comments ON ...\nPost.joins(:special_comments) # STI\n# =&gt; SELECT ... FROM posts INNER JOIN comments ON ... AND comments.type = 'SpecialComment'\nPost.joins(:comments, :special_comments) # special_comments is the reflection name, posts is the parent table name\n# =&gt; SELECT ... FROM posts INNER JOIN comments ON ... INNER JOIN comments special_comments_posts\n</pre> <p>Acts as tree example:</p> <pre>TreeMixin.joins(:children)\n# =&gt; SELECT ... FROM mixins INNER JOIN mixins childrens_mixins ...\nTreeMixin.joins(children: :parent)\n# =&gt; SELECT ... FROM mixins INNER JOIN mixins childrens_mixins ...\n                            INNER JOIN parents_mixins ...\nTreeMixin.joins(children: {parent: :children})\n# =&gt; SELECT ... FROM mixins INNER JOIN mixins childrens_mixins ...\n                            INNER JOIN parents_mixins ...\n                            INNER JOIN mixins childrens_mixins_2</pre> <p>Has and Belongs to Many join tables use the same idea, but add a <code>_join</code> suffix:</p> <pre class=\"ruby\">Post.joins(:categories)\n# =&gt; SELECT ... FROM posts INNER JOIN categories_posts ... INNER JOIN categories ...\nPost.joins(categories: :posts)\n# =&gt; SELECT ... FROM posts INNER JOIN categories_posts ... INNER JOIN categories ...\n                           INNER JOIN categories_posts posts_categories_join INNER JOIN posts posts_categories\nPost.joins(categories: {posts: :categories})\n# =&gt; SELECT ... FROM posts INNER JOIN categories_posts ... INNER JOIN categories ...\n                           INNER JOIN categories_posts posts_categories_join INNER JOIN posts posts_categories\n                           INNER JOIN categories_posts categories_posts_join INNER JOIN categories categories_posts_2\n</pre> <p>If you wish to specify your own custom joins using <code>joins</code> method, those table names will take precedence over the eager associations:</p> <pre>Post.joins(:comments).joins(\"inner join comments ...\")\n# =&gt; SELECT ... FROM posts INNER JOIN comments_posts ON ... INNER JOIN comments ...\nPost.joins(:comments, :special_comments).joins(\"inner join comments ...\")\n# =&gt; SELECT ... FROM posts INNER JOIN comments comments_posts ON ...\n                           INNER JOIN comments special_comments_posts ...\n                           INNER JOIN comments ...</pre> <p>Table aliases are automatically truncated according to the maximum length of table identifiers according to the specific database.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Modules\">Modules</h2> <p>By default, associations will look for objects within the current module scope. Consider:</p> <pre class=\"ruby\">module MyApplication\n  module Business\n    class Firm &lt; ActiveRecord::Base\n      has_many :clients\n    end\n\n    class Client &lt; ActiveRecord::Base; end\n  end\nend\n</pre> <p>When <code>Firm#clients</code> is called, it will in turn call <code>MyApplication::Business::Client.find_all_by_firm_id(firm.id)</code>. If you want to associate with a class in another module scope, this can be done by specifying the complete class name.</p> <pre class=\"ruby\">module MyApplication\n  module Business\n    class Firm &lt; ActiveRecord::Base; end\n  end\n\n  module Billing\n    class Account &lt; ActiveRecord::Base\n      belongs_to :firm, class_name: \"MyApplication::Business::Firm\"\n    end\n  end\nend\n</pre> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Bi-directional+associations\">Bi-directional associations</h2> <p>When you specify an association there is usually an association on the associated model that specifies the same relationship in reverse. For example, with the following models:</p> <pre class=\"ruby\">class Dungeon &lt; ActiveRecord::Base\n  has_many :traps\n  has_one :evil_wizard\nend\n\nclass Trap &lt; ActiveRecord::Base\n  belongs_to :dungeon\nend\n\nclass EvilWizard &lt; ActiveRecord::Base\n  belongs_to :dungeon\nend\n</pre> <p>The <code>traps</code> association on <code>Dungeon</code> and the <code>dungeon</code> association on <code>Trap</code> are the inverse of each other and the inverse of the <code>dungeon</code> association on <code>EvilWizard</code> is the <code>evil_wizard</code> association on <code>Dungeon</code> (and vice-versa). By default, Active Record doesn't know anything about these inverse relationships and so no object loading optimization is possible. For example:</p> <pre class=\"ruby\">d = Dungeon.first\nt = d.traps.first\nd.level == t.dungeon.level # =&gt; true\nd.level = 10\nd.level == t.dungeon.level # =&gt; false\n</pre> <p>The <code>Dungeon</code> instances <code>d</code> and <code>t.dungeon</code> in the above example refer to the same object data from the database, but are actually different in-memory copies of that data. Specifying the <code>:inverse_of</code> option on associations lets you tell Active Record about inverse relationships and it will optimise object loading. For example, if we changed our model definitions to:</p> <pre class=\"ruby\">class Dungeon &lt; ActiveRecord::Base\n  has_many :traps, inverse_of: :dungeon\n  has_one :evil_wizard, inverse_of: :dungeon\nend\n\nclass Trap &lt; ActiveRecord::Base\n  belongs_to :dungeon, inverse_of: :traps\nend\n\nclass EvilWizard &lt; ActiveRecord::Base\n  belongs_to :dungeon, inverse_of: :evil_wizard\nend\n</pre> <p>Then, from our code snippet above, <code>d</code> and <code>t.dungeon</code> are actually the same in-memory instance and our final <code>d.level == t.dungeon.level</code> will return <code>true</code>.</p> <p>There are limitations to <code>:inverse_of</code> support:</p> <ul>\n<li> <p>does not work with <code>:through</code> associations.</p> </li>\n<li> <p>does not work with <code>:polymorphic</code> associations.</p> </li>\n<li> <p>for <code>belongs_to</code> associations <code>has_many</code> inverse associations are ignored.</p> </li>\n</ul> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Deleting+from+associations\">Deleting from associations</h2> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-Dependent+associations\">Dependent associations</h3> <p><code>has_many</code>, <code>has_one</code> and <code>belongs_to</code> associations support the <code>:dependent</code> option. This allows you to specify that associated records should be deleted when the owner is deleted.</p> <p>For example:</p> <pre class=\"ruby\">class Author\n  has_many :posts, dependent: :destroy\nend\nAuthor.find(1).destroy # =&gt; Will destroy all of the author's posts, too\n</pre> <p>The <code>:dependent</code> option can have different values which specify how the deletion is done. For more information, see the documentation for this option on the different specific association types. When no option is given, the behavior is to do nothing with the associated records when destroying a record.</p> <p>Note that <code>:dependent</code> is implemented using Rails' callback system, which works by processing callbacks in order. Therefore, other callbacks declared either before or after the <code>:dependent</code> option can affect what it does.</p> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-Delete+or+destroy-3F\">Delete or destroy?</h3> <p><code>has_many</code> and <code>has_and_belongs_to_many</code> associations have the methods <code>destroy</code>, <code>delete</code>, <code>destroy_all</code> and <code>delete_all</code>.</p> <p>For <code>has_and_belongs_to_many</code>, <code>delete</code> and <code>destroy</code> are the same: they cause the records in the join table to be removed.</p> <p>For <code>has_many</code>, <code>destroy</code> and <code>destroy_all</code> will always call the <code>destroy</code> method of the record(s) being removed so that callbacks are run. However <code>delete</code> and <code>delete_all</code> will either do the deletion according to the strategy specified by the <code>:dependent</code> option, or if no <code>:dependent</code> option is given, then it will follow the default strategy. The default strategy is to do nothing (leave the foreign keys with the parent ids set), except for <code>has_many</code> <code>:through</code>, where the default strategy is <code>delete_all</code> (delete the join records, without running their callbacks).</p> <p>There is also a <code>clear</code> method which is the same as <code>delete_all</code>, except that it returns the association rather than the records which have been deleted.</p> <h3 id=\"module-ActiveRecord::Associations::ClassMethods-label-What+gets+deleted-3F\">What gets deleted?</h3> <p>There is a potential pitfall here: <code>has_and_belongs_to_many</code> and <code>has_many</code> <code>:through</code> associations have records in join tables, as well as the associated records. So when we call one of these deletion methods, what exactly should be deleted?</p> <p>The answer is that it is assumed that deletion on an association is about removing the <em>link</em> between the owner and the associated object(s), rather than necessarily the associated objects themselves. So with <code>has_and_belongs_to_many</code> and <code>has_many</code> <code>:through</code>, the join records will be deleted, but the associated records won't.</p> <p>This makes sense if you think about it: if you were to call <code>post.tags.delete(Tag.find_by(name: 'food'))</code> you would want the 'food' tag to be unlinked from the post, rather than for the tag itself to be removed from the database.</p> <p>However, there are examples where this strategy doesn't make sense. For example, suppose a person has many projects, and each project has many tasks. If we deleted one of a person's tasks, we would probably not want the project to be deleted. In this scenario, the delete method won't actually work: it can only be used if the association on the join model is a <code>belongs_to</code>. In other situations you are expected to perform operations directly on either the associated records or the <code>:through</code> association.</p> <p>With a regular <code>has_many</code> there is no distinction between the “associated records” and the “link”, so there is only one choice for what gets deleted.</p> <p>With <code>has_and_belongs_to_many</code> and <code>has_many</code> <code>:through</code>, if you want to delete the associated records themselves, you can always do something along the lines of <code>person.tasks.each(&amp;:destroy)</code>.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Type+safety+with+ActiveRecord-3A-3AAssociationTypeMismatch\">\n<a href=\"../type\">Type</a> safety with <code>ActiveRecord::AssociationTypeMismatch</code>\n</h2> <p>If you attempt to assign an object to an association that doesn't match the inferred or specified <code>:class_name</code>, you'll get an <code>ActiveRecord::AssociationTypeMismatch</code>.</p> <h2 id=\"module-ActiveRecord::Associations::ClassMethods-label-Options\">Options</h2> <p>All of the association macros can be specialized through options. This makes cases more complex than the simple and guessable ones possible.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-belongs_to\"> <span class=\"method-name\">belongs_to</span><span class=\"method-args\">(name, scope = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a one-to-one association with another class. This method should only be used if this class contains the foreign key. If the other class contains the foreign key, then you should use <code>has_one</code> instead. See also ActiveRecord::Associations::ClassMethods's overview on when to use <code>has_one</code> and when to use <code>belongs_to</code>.</p> <p>Methods will be added for retrieval and query for a single associated object, for which this object holds an id:</p> <p><code>association</code> is a placeholder for the symbol passed as the <code>name</code> argument, so <code>belongs_to :author</code> would add among others <code>author.nil?</code>.</p> <dl class=\"rdoc-list label-list\">\n<dt>association(force_reload = false) </dt>\n<dd> <p>Returns the associated object. <code>nil</code> is returned if none is found.</p> </dd>\n<dt>association=(associate) </dt>\n<dd> <p>Assigns the associate object, extracts the primary key, and sets it as the foreign key.</p> </dd>\n<dt>build_association(attributes = {}) </dt>\n<dd> <p>Returns a new object of the associated type that has been instantiated with <code>attributes</code> and linked to this object through a foreign key, but has not yet been saved.</p> </dd>\n<dt>create_association(attributes = {}) </dt>\n<dd> <p>Returns a new object of the associated type that has been instantiated with <code>attributes</code>, linked to this object through a foreign key, and that has already been saved (if it passed the validation).</p> </dd>\n<dt>create_association!(attributes = {}) </dt>\n<dd> <p>Does the same as <code>create_association</code>, but raises <code>ActiveRecord::RecordInvalid</code> if the record is invalid.</p> </dd>\n</dl> <h3 id=\"method-i-belongs_to-label-Example\">Example</h3> <p>A Post class declares <code>belongs_to :author</code>, which will add:</p> <ul>\n<li> <p><code>Post#author</code> (similar to <code>Author.find(author_id)</code>)</p> </li>\n<li> <p><code>Post#author=(author)</code> (similar to <code>post.author_id =\nauthor.id</code>)</p> </li>\n<li> <p><code>Post#build_author</code> (similar to <code>post.author =\nAuthor.new</code>)</p> </li>\n<li> <p><code>Post#create_author</code> (similar to <code>post.author = Author.new;\npost.author.save; post.author</code>)</p> </li>\n<li> <p><code>Post#create_author!</code> (similar to <code>post.author =\nAuthor.new; post.author.save!; post.author</code>)</p> </li>\n</ul> <p>The declaration can also include an <code>options</code> hash to specialize the behavior of the association.</p> <h3 id=\"method-i-belongs_to-label-Scopes\">Scopes</h3> <p>You can pass a second argument <code>scope</code> as a callable (i.e. proc or lambda) to retrieve a specific record or customize the generated query when you access the associated object.</p> <p>Scope examples:</p> <pre class=\"ruby\">belongs_to :user, -&gt; { where(id: 2) }\nbelongs_to :user, -&gt; { joins(:friends) }\nbelongs_to :level, -&gt;(level) { where(\"game_level &gt; ?\", level.current) }\n</pre> <h3 id=\"method-i-belongs_to-label-Options\">Options</h3> <dl class=\"rdoc-list label-list\">\n<dt>:class_name </dt>\n<dd> <p>Specify the class name of the association. Use it only if that name can't be inferred from the association name. So <code>belongs_to\n:author</code> will by default be linked to the Author class, but if the real class name is Person, you'll have to specify it with this option.</p> </dd>\n<dt>:foreign_key </dt>\n<dd> <p>Specify the foreign key used for the association. By default this is guessed to be the name of the association with an “_id” suffix. So a class that defines a <code>belongs_to :person</code> association will use “person_id” as the default <code>:foreign_key</code>. Similarly, <code>belongs_to :favorite_person, class_name: \"Person\"</code> will use a foreign key of “favorite_person_id”.</p> </dd>\n<dt>:foreign_type </dt>\n<dd> <p>Specify the column used to store the associated object's type, if this is a polymorphic association. By default this is guessed to be the name of the association with a “_type” suffix. So a class that defines a <code>belongs_to :taggable, polymorphic: true</code> association will use “taggable_type” as the default <code>:foreign_type</code>.</p> </dd>\n<dt>:primary_key </dt>\n<dd> <p>Specify the method that returns the primary key of associated object used for the association. By default this is id.</p> </dd>\n<dt>:dependent </dt>\n<dd> <p>If set to <code>:destroy</code>, the associated object is destroyed when this object is. If set to <code>:delete</code>, the associated object is deleted <strong>without</strong> calling its destroy method. This option should not be specified when <code>belongs_to</code> is used in conjunction with a <code>has_many</code> relationship on another class because of the potential to leave orphaned records behind.</p> </dd>\n<dt>:counter_cache </dt>\n<dd> <p>Caches the number of belonging objects on the associate class through the use of <code>increment_counter</code> and <code>decrement_counter</code>. The counter cache is incremented when an object of this class is created and decremented when it's destroyed. This requires that a column named <code>#{table_name}_count</code> (such as <code>comments_count</code> for a belonging Comment class) is used on the associate class (such as a Post class) - that is the migration for <code>#{table_name}_count</code> is created on the associate class (such that <code>Post.comments_count</code> will return the count cached, see note below). You can also specify a custom counter cache column by providing a column name instead of a <code>true</code>/<code>false</code> value to this option (e.g., <code>counter_cache: :my_custom_counter</code>.) Note: Specifying a counter cache will add it to that model's list of readonly attributes using <code>attr_readonly</code>.</p> </dd>\n<dt>:polymorphic </dt>\n<dd> <p>Specify this association is a polymorphic association by passing <code>true</code>. Note: If you've enabled the counter cache, then you may want to add the counter cache attribute to the <code>attr_readonly</code> list in the associated classes (e.g. <code>class\nPost; attr_readonly :comments_count; end</code>).</p> </dd>\n<dt>:validate </dt>\n<dd> <p>If <code>false</code>, don't validate the associated objects when saving the parent object. <code>false</code> by default.</p> </dd>\n<dt>:autosave </dt>\n<dd> <p>If true, always save the associated object or destroy it if marked for destruction, when saving the parent object. If false, never save or destroy the associated object. By default, only save the associated object if it's a new record.</p> <p>Note that <code>accepts_nested_attributes_for</code> sets <code>:autosave</code> to <code>true</code>.</p> </dd>\n<dt>:touch </dt>\n<dd> <p>If true, the associated object will be touched (the updated_at/on attributes set to current time) when this record is either saved or destroyed. If you specify a symbol, that attribute will be updated with the current time in addition to the updated_at/on attribute.</p> </dd>\n<dt>:inverse_of </dt>\n<dd> <p>Specifies the name of the <code>has_one</code> or <code>has_many</code> association on the associated object that is the inverse of this <code>belongs_to</code> association. Does not work in combination with the <code>:polymorphic</code> options. See ActiveRecord::Associations::ClassMethods's overview on Bi-directional associations for more detail.</p> </dd>\n<dt>:required </dt>\n<dd> <p>When set to <code>true</code>, the association will also have its presence validated. This will validate the association itself, not the id. You can use <code>:inverse_of</code> to avoid an extra query during validation.</p> </dd>\n</dl> <p>Option examples:</p> <pre class=\"ruby\">belongs_to :firm, foreign_key: \"client_of\"\nbelongs_to :person, primary_key: \"name\", foreign_key: \"person_name\"\nbelongs_to :author, class_name: \"Person\", foreign_key: \"author_id\"\nbelongs_to :valid_coupon, -&gt;(o) { where \"discounts &gt; ?\", o.payments_count },\n                          class_name: \"Coupon\", foreign_key: \"coupon_id\"\nbelongs_to :attachable, polymorphic: true\nbelongs_to :project, -&gt; { readonly }\nbelongs_to :post, counter_cache: true\nbelongs_to :company, touch: true\nbelongs_to :company, touch: :employees_last_updated_at\nbelongs_to :company, required: true\n</pre> <div class=\"method-source-code\" id=\"belongs_to-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations.rb, line 1514\ndef belongs_to(name, scope = nil, options = {})\n  reflection = Builder::BelongsTo.build(self, name, scope, options)\n  Reflection.add_reflection self, name, reflection\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-has_and_belongs_to_many\"> <span class=\"method-name\">has_and_belongs_to_many</span><span class=\"method-args\">(name, scope = nil, options = {}, &amp;extension)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a many-to-many relationship with another class. This associates two classes via an intermediate join table. Unless the join table is explicitly specified as an option, it is guessed using the lexical order of the class names. So a join between Developer and Project will give the default join table name of “developers_projects” because “D” precedes “P” alphabetically. Note that this precedence is calculated using the <code>&lt;</code> operator for <a href=\"../../string\">String</a>. This means that if the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered of higher lexical precedence than the shorter one. For example, one would expect the tables “paper_boxes” and “papers” to generate a join table name of “papers_paper_boxes” because of the length of the name “paper_boxes”, but it in fact generates a join table name of “paper_boxes_papers”. Be aware of this caveat, and use the custom <code>:join_table</code> option if you need to. If your tables share a common prefix, it will only appear once at the beginning. For example, the tables “catalog_categories” and “catalog_products” generate a join table name of “catalog_categories_products”.</p> <p>The join table should not have a primary key or a model associated with it. You must manually generate the join table with a migration such as this:</p> <pre class=\"ruby\">class CreateDevelopersProjectsJoinTable &lt; ActiveRecord::Migration\n  def change\n    create_table :developers_projects, id: false do |t|\n      t.integer :developer_id\n      t.integer :project_id\n    end\n  end\nend\n</pre> <p>It's also a good idea to add indexes to each of those columns to speed up the joins process. However, in MySQL it is advised to add a compound index for both of the columns as MySQL only uses one index per table during the lookup.</p> <p>Adds the following methods for retrieval and query:</p> <p><code>collection</code> is a placeholder for the symbol passed as the <code>name</code> argument, so <code>has_and_belongs_to_many\n:categories</code> would add among others <code>categories.empty?</code>.</p> <dl class=\"rdoc-list label-list\">\n<dt>collection(force_reload = false) </dt>\n<dd> <p>Returns an array of all the associated objects. An empty array is returned if none are found.</p> </dd>\n<dt>collection&lt;&lt;(object, …) </dt>\n<dd> <p>Adds one or more objects to the collection by creating associations in the join table (<code>collection.push</code> and <code>collection.concat</code> are aliases to this method). Note that this operation instantly fires update SQL without waiting for the save or update call on the parent object, unless the parent object is a new record.</p> </dd>\n<dt>collection.delete(object, …) </dt>\n<dd> <p>Removes one or more objects from the collection by removing their associations from the join table. This does not destroy the objects.</p> </dd>\n<dt>collection.destroy(object, …) </dt>\n<dd> <p>Removes one or more objects from the collection by running destroy on each association in the join table, overriding any dependent option. This does not destroy the objects.</p> </dd>\n<dt>collection=objects </dt>\n<dd> <p>Replaces the collection's content by deleting and adding objects as appropriate.</p> </dd>\n<dt>collection_singular_ids </dt>\n<dd> <p>Returns an array of the associated objects' ids.</p> </dd>\n<dt>collection_singular_ids=ids </dt>\n<dd> <p>Replace the collection by the objects identified by the primary keys in <code>ids</code>.</p> </dd>\n<dt>collection.clear </dt>\n<dd> <p>Removes every object from the collection. This does not destroy the objects.</p> </dd>\n<dt>collection.empty? </dt>\n<dd> <p>Returns <code>true</code> if there are no associated objects.</p> </dd>\n<dt>collection.size </dt>\n<dd> <p>Returns the number of associated objects.</p> </dd>\n<dt>collection.find(id) </dt>\n<dd> <p>Finds an associated object responding to the <code>id</code> and that meets the condition that it has to be associated with this object. Uses the same rules as <code>ActiveRecord::Base.find</code>.</p> </dd>\n<dt>collection.exists?(…) </dt>\n<dd> <p>Checks whether an associated object with the given conditions exists. Uses the same rules as <code>ActiveRecord::Base.exists?</code>.</p> </dd>\n<dt>collection.build(attributes = {}) </dt>\n<dd> <p>Returns a new object of the collection type that has been instantiated with <code>attributes</code> and linked to this object through the join table, but has not yet been saved.</p> </dd>\n<dt>collection.create(attributes = {}) </dt>\n<dd> <p>Returns a new object of the collection type that has been instantiated with <code>attributes</code>, linked to this object through the join table, and that has already been saved (if it passed the validation).</p> </dd>\n</dl> <h3 id=\"method-i-has_and_belongs_to_many-label-Example\">Example</h3> <p>A Developer class declares <code>has_and_belongs_to_many :projects</code>, which will add:</p> <ul>\n<li> <p><code>Developer#projects</code></p> </li>\n<li> <p><code>Developer#projects&lt;&lt;</code></p> </li>\n<li> <p><code>Developer#projects.delete</code></p> </li>\n<li> <p><code>Developer#projects.destroy</code></p> </li>\n<li> <p><code>Developer#projects=</code></p> </li>\n<li> <p><code>Developer#project_ids</code></p> </li>\n<li> <p><code>Developer#project_ids=</code></p> </li>\n<li> <p><code>Developer#projects.clear</code></p> </li>\n<li> <p><code>Developer#projects.empty?</code></p> </li>\n<li> <p><code>Developer#projects.size</code></p> </li>\n<li> <p><code>Developer#projects.find(id)</code></p> </li>\n<li> <p><code>Developer#projects.exists?(...)</code></p> </li>\n<li> <p><code>Developer#projects.build</code> (similar to <code>Project.new(\"developer_id\" =&gt; id)</code>)</p> </li>\n<li> <p><code>Developer#projects.create</code> (similar to <code>c =\nProject.new(\"developer_id\" =&gt; id); c.save; c</code>)</p> </li>\n</ul> <p>The declaration may include an <code>options</code> hash to specialize the behavior of the association.</p> <h3 id=\"method-i-has_and_belongs_to_many-label-Scopes\">Scopes</h3> <p>You can pass a second argument <code>scope</code> as a callable (i.e. proc or lambda) to retrieve a specific set of records or customize the generated query when you access the associated collection.</p> <p>Scope examples:</p> <pre class=\"ruby\">has_and_belongs_to_many :projects, -&gt; { includes :milestones, :manager }\nhas_and_belongs_to_many :categories, -&gt;(category) {\n  where(\"default_category = ?\", category.name)\n}\n</pre> <h3 id=\"method-i-has_and_belongs_to_many-label-Extensions\">Extensions</h3> <p>The <code>extension</code> argument allows you to pass a block into a <a href=\"classmethods#method-i-has_and_belongs_to_many\">#has_and_belongs_to_many</a> association. This is useful for adding new finders, creators and other factory-type methods to be used as part of the association.</p> <p>Extension examples:</p> <pre class=\"ruby\">has_and_belongs_to_many :contractors do\n  def find_or_create_by_name(name)\n    first_name, last_name = name.split(\" \", 2)\n    find_or_create_by(first_name: first_name, last_name: last_name)\n  end\nend\n</pre> <h3 id=\"method-i-has_and_belongs_to_many-label-Options\">Options</h3> <dl class=\"rdoc-list label-list\">\n<dt>:class_name </dt>\n<dd> <p>Specify the class name of the association. Use it only if that name can't be inferred from the association name. So <code>has_and_belongs_to_many :projects</code> will by default be linked to the Project class, but if the real class name is SuperProject, you'll have to specify it with this option.</p> </dd>\n<dt>:join_table </dt>\n<dd> <p>Specify the name of the join table if the default based on lexical order isn't what you want. <strong>WARNING:</strong> If you're overwriting the table name of either class, the <code>table_name</code> method MUST be declared underneath any <code>has_and_belongs_to_many</code> declaration in order to work.</p> </dd>\n<dt>:foreign_key </dt>\n<dd> <p>Specify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and “_id” suffixed. So a Person class that makes a <code>has_and_belongs_to_many</code> association to Project will use “person_id” as the default <code>:foreign_key</code>.</p> </dd>\n<dt>:association_foreign_key </dt>\n<dd> <p>Specify the foreign key used for the association on the receiving side of the association. By default this is guessed to be the name of the associated class in lower-case and “_id” suffixed. So if a Person class makes a <code>has_and_belongs_to_many</code> association to Project, the association will use “project_id” as the default <code>:association_foreign_key</code>.</p> </dd>\n<dt>:readonly </dt>\n<dd> <p>If true, all the associated objects are readonly through the association.</p> </dd>\n<dt>:validate </dt>\n<dd> <p>If <code>false</code>, don't validate the associated objects when saving the parent object. <code>true</code> by default.</p> </dd>\n<dt>:autosave </dt>\n<dd> <p>If true, always save the associated objects or destroy them if marked for destruction, when saving the parent object. If false, never save or destroy the associated objects. By default, only save associated objects that are new records.</p> <p>Note that <code>accepts_nested_attributes_for</code> sets <code>:autosave</code> to <code>true</code>.</p> </dd>\n</dl> <p>Option examples:</p> <pre class=\"ruby\">has_and_belongs_to_many :projects\nhas_and_belongs_to_many :projects, -&gt; { includes :milestones, :manager }\nhas_and_belongs_to_many :nations, class_name: \"Country\"\nhas_and_belongs_to_many :categories, join_table: \"prods_cats\"\nhas_and_belongs_to_many :categories, -&gt; { readonly }\n</pre> <div class=\"method-source-code\" id=\"has_and_belongs_to_many-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations.rb, line 1679\n      def has_and_belongs_to_many(name, scope = nil, options = {}, &amp;extension)\n        if scope.is_a?(Hash)\n          options = scope\n          scope   = nil\n        end\n\n        habtm_reflection = ActiveRecord::Reflection::HasAndBelongsToManyReflection.new(name, scope, options, self)\n\n        builder = Builder::HasAndBelongsToMany.new name, self, options\n\n        join_model = builder.through_model\n\n        # FIXME: we should move this to the internal constants. Also people\n        # should never directly access this constant so I'm not happy about\n        # setting it.\n        const_set join_model.name, join_model\n\n        middle_reflection = builder.middle_reflection join_model\n\n        Builder::HasMany.define_callbacks self, middle_reflection\n        Reflection.add_reflection self, middle_reflection.name, middle_reflection\n        middle_reflection.parent_reflection = [name.to_s, habtm_reflection]\n\n        include Module.new {\n          class_eval \"          def destroy_associations\n            association(:#{middle_reflection.name}).delete_all(:delete_all)\n            association(:#{name}).reset\n            super\n          end\n\", __FILE__, __LINE__ + 1\n        }\n\n        hm_options = {}\n        hm_options[:through] = middle_reflection.name\n        hm_options[:source] = join_model.right_reflection.name\n\n        [:before_add, :after_add, :before_remove, :after_remove, :autosave, :validate, :join_table, :class_name, :extend].each do |k|\n          hm_options[k] = options[k] if options.key? k\n        end\n\n        has_many name, scope, hm_options, &amp;extension\n        self._reflections[name.to_s].parent_reflection = [name.to_s, habtm_reflection]\n      end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-has_many\"> <span class=\"method-name\">has_many</span><span class=\"method-args\">(name, scope = nil, options = {}, &amp;extension)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a one-to-many association. The following methods for retrieval and query of collections of associated objects will be added:</p> <p><code>collection</code> is a placeholder for the symbol passed as the <code>name</code> argument, so <code>has_many :clients</code> would add among others <code>clients.empty?</code>.</p> <dl class=\"rdoc-list label-list\">\n<dt>collection(force_reload = false) </dt>\n<dd> <p>Returns an array of all the associated objects. An empty array is returned if none are found.</p> </dd>\n<dt>collection&lt;&lt;(object, …) </dt>\n<dd> <p>Adds one or more objects to the collection by setting their foreign keys to the collection's primary key. Note that this operation instantly fires update SQL without waiting for the save or update call on the parent object, unless the parent object is a new record.</p> </dd>\n<dt>collection.delete(object, …) </dt>\n<dd> <p>Removes one or more objects from the collection by setting their foreign keys to <code>NULL</code>. Objects will be in addition destroyed if they're associated with <code>dependent: :destroy</code>, and deleted if they're associated with <code>dependent: :delete_all</code>.</p> <p>If the <code>:through</code> option is used, then the join records are deleted (rather than nullified) by default, but you can specify <code>dependent: :destroy</code> or <code>dependent: :nullify</code> to override this.</p> </dd>\n<dt>collection.destroy(object, …) </dt>\n<dd> <p>Removes one or more objects from the collection by running <code>destroy</code> on each record, regardless of any dependent option, ensuring callbacks are run.</p> <p>If the <code>:through</code> option is used, then the join records are destroyed instead, not the objects themselves.</p> </dd>\n<dt>collection=objects </dt>\n<dd> <p>Replaces the collections content by deleting and adding objects as appropriate. If the <code>:through</code> option is true callbacks in the join models are triggered except destroy callbacks, since deletion is direct.</p> </dd>\n<dt>collection_singular_ids </dt>\n<dd> <p>Returns an array of the associated objects' ids</p> </dd>\n<dt>collection_singular_ids=ids </dt>\n<dd> <p>Replace the collection with the objects identified by the primary keys in <code>ids</code>. This method loads the models and calls <code>collection=</code>. See above.</p> </dd>\n<dt>collection.clear </dt>\n<dd> <p>Removes every object from the collection. This destroys the associated objects if they are associated with <code>dependent: :destroy</code>, deletes them directly from the database if <code>dependent:\n:delete_all</code>, otherwise sets their foreign keys to <code>NULL</code>. If the <code>:through</code> option is true no destroy callbacks are invoked on the join models. Join models are directly deleted.</p> </dd>\n<dt>collection.empty? </dt>\n<dd> <p>Returns <code>true</code> if there are no associated objects.</p> </dd>\n<dt>collection.size </dt>\n<dd> <p>Returns the number of associated objects.</p> </dd>\n<dt>collection.find(…) </dt>\n<dd> <p>Finds an associated object according to the same rules as <code>ActiveRecord::Base.find</code>.</p> </dd>\n<dt>collection.exists?(…) </dt>\n<dd> <p>Checks whether an associated object with the given conditions exists. Uses the same rules as <code>ActiveRecord::Base.exists?</code>.</p> </dd>\n<dt>collection.build(attributes = {}, …) </dt>\n<dd> <p>Returns one or more new objects of the collection type that have been instantiated with <code>attributes</code> and linked to this object through a foreign key, but have not yet been saved.</p> </dd>\n<dt>collection.create(attributes = {}) </dt>\n<dd> <p>Returns a new object of the collection type that has been instantiated with <code>attributes</code>, linked to this object through a foreign key, and that has already been saved (if it passed the validation). <strong>Note</strong>: This only works if the base model already exists in the DB, not if it is a new (unsaved) record!</p> </dd>\n<dt>collection.create!(attributes = {}) </dt>\n<dd> <p>Does the same as <code>collection.create</code>, but raises <code>ActiveRecord::RecordInvalid</code> if the record is invalid.</p> </dd>\n</dl> <h3 id=\"method-i-has_many-label-Example\">Example</h3> <p>A <code>Firm</code> class declares <code>has_many :clients</code>, which will add:</p> <ul>\n<li> <p><code>Firm#clients</code> (similar to <code>Client.where(firm_id:\nid)</code>)</p> </li>\n<li> <p><code>Firm#clients&lt;&lt;</code></p> </li>\n<li> <p><code>Firm#clients.delete</code></p> </li>\n<li> <p><code>Firm#clients.destroy</code></p> </li>\n<li> <p><code>Firm#clients=</code></p> </li>\n<li> <p><code>Firm#client_ids</code></p> </li>\n<li> <p><code>Firm#client_ids=</code></p> </li>\n<li> <p><code>Firm#clients.clear</code></p> </li>\n<li> <p><code>Firm#clients.empty?</code> (similar to <code>firm.clients.size ==\n0</code>)</p> </li>\n<li> <p><code>Firm#clients.size</code> (similar to <code>Client.count \"firm_id\n= #{id}\"</code>)</p> </li>\n<li> <p><code>Firm#clients.find</code> (similar to <code>Client.where(firm_id:\nid).find(id)</code>)</p> </li>\n<li> <p><code>Firm#clients.exists?(name: 'ACME')</code> (similar to <code>Client.exists?(name: 'ACME', firm_id: firm.id)</code>)</p> </li>\n<li> <p><code>Firm#clients.build</code> (similar to <code>Client.new(\"firm_id\" =&gt; id)</code>)</p> </li>\n<li> <p><code>Firm#clients.create</code> (similar to <code>c =\nClient.new(\"firm_id\" =&gt; id); c.save; c</code>)</p> </li>\n<li> <p><code>Firm#clients.create!</code> (similar to <code>c =\nClient.new(\"firm_id\" =&gt; id); c.save!</code>)</p> </li>\n</ul> <p>The declaration can also include an <code>options</code> hash to specialize the behavior of the association.</p> <h3 id=\"method-i-has_many-label-Scopes\">Scopes</h3> <p>You can pass a second argument <code>scope</code> as a callable (i.e. proc or lambda) to retrieve a specific set of records or customize the generated query when you access the associated collection.</p> <p>Scope examples:</p> <pre class=\"ruby\">has_many :comments, -&gt; { where(author_id: 1) }\nhas_many :employees, -&gt; { joins(:address) }\nhas_many :posts, -&gt;(post) { where(\"max_post_length &gt; ?\", post.length) }\n</pre> <h3 id=\"method-i-has_many-label-Extensions\">Extensions</h3> <p>The <code>extension</code> argument allows you to pass a block into a <a href=\"classmethods#method-i-has_many\">#has_many</a> association. This is useful for adding new finders, creators and other factory-type methods to be used as part of the association.</p> <p>Extension examples:</p> <pre class=\"ruby\">has_many :employees do\n  def find_or_create_by_name(name)\n    first_name, last_name = name.split(\" \", 2)\n    find_or_create_by(first_name: first_name, last_name: last_name)\n  end\nend\n</pre> <h3 id=\"method-i-has_many-label-Options\">Options</h3> <dl class=\"rdoc-list label-list\">\n<dt>:class_name </dt>\n<dd> <p>Specify the class name of the association. Use it only if that name can't be inferred from the association name. So <code>has_many\n:products</code> will by default be linked to the Product class, but if the real class name is SpecialProduct, you'll have to specify it with this option.</p> </dd>\n<dt>:foreign_key </dt>\n<dd> <p>Specify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and “_id” suffixed. So a Person class that makes a <code>has_many</code> association will use “person_id” as the default <code>:foreign_key</code>.</p> </dd>\n<dt>:foreign_type </dt>\n<dd> <p>Specify the column used to store the associated object's type, if this is a polymorphic association. By default this is guessed to be the name of the polymorphic association specified on “as” option with a “_type” suffix. So a class that defines a <code>has_many :tags, as: :taggable</code> association will use “taggable_type” as the default <code>:foreign_type</code>.</p> </dd>\n<dt>:primary_key </dt>\n<dd> <p>Specify the name of the column to use as the primary key for the association. By default this is <code>id</code>.</p> </dd>\n<dt>:dependent </dt>\n<dd> <p>Controls what happens to the associated objects when their owner is destroyed. Note that these are implemented as callbacks, and Rails executes callbacks in order. Therefore, other similar callbacks may affect the <code>:dependent</code> behavior, and the <code>:dependent</code> behavior may affect other callbacks.</p> <ul>\n<li> <p><code>:destroy</code> causes all the associated objects to also be destroyed.</p> </li>\n<li> <p><code>:delete_all</code> causes all the associated objects to be deleted directly from the database (so callbacks will not be executed).</p> </li>\n<li> <p><code>:nullify</code> causes the foreign keys to be set to <code>NULL</code>. <a href=\"../callbacks\">Callbacks</a> are not executed.</p> </li>\n<li> <p><code>:restrict_with_exception</code> causes an exception to be raised if there are any associated records.</p> </li>\n<li> <p><code>:restrict_with_error</code> causes an error to be added to the owner if there are any associated objects.</p> </li>\n</ul> <p>If using with the <code>:through</code> option, the association on the join model must be a <code>belongs_to</code>, and the records which get deleted are the join records, rather than the associated records.</p> </dd>\n<dt>:counter_cache </dt>\n<dd> <p>This option can be used to configure a custom named <code>:counter_cache.</code> You only need this option, when you customized the name of your <code>:counter_cache</code> on the <code>belongs_to</code> association.</p> </dd>\n<dt>:as </dt>\n<dd> <p>Specifies a polymorphic interface (See <code>belongs_to</code>).</p> </dd>\n<dt>:through </dt>\n<dd> <p>Specifies an association through which to perform the query. This can be any other type of association, including other <code>:through</code> associations. Options for <code>:class_name</code>, <code>:primary_key</code> and <code>:foreign_key</code> are ignored, as the association uses the source reflection.</p> <p>If the association on the join model is a <code>belongs_to</code>, the collection can be modified and the records on the <code>:through</code> model will be automatically created and removed as appropriate. Otherwise, the collection is read-only, so you should manipulate the <code>:through</code> association directly.</p> <p>If you are going to modify the association (rather than just read from it), then it is a good idea to set the <code>:inverse_of</code> option on the source association on the join model. This allows associated records to be built which will automatically create the appropriate join model records when they are saved. (See the 'Association Join Models' section above.)</p> </dd>\n<dt>:source </dt>\n<dd> <p>Specifies the source association name used by <code>has_many\n:through</code> queries. Only use it if the name cannot be inferred from the association. <code>has_many :subscribers, through:\n:subscriptions</code> will look for either <code>:subscribers</code> or <code>:subscriber</code> on Subscription, unless a <code>:source</code> is given.</p> </dd>\n<dt>:source_type </dt>\n<dd> <p>Specifies type of the source association used by <code>has_many\n:through</code> queries where the source association is a polymorphic <code>belongs_to</code>.</p> </dd>\n<dt>:validate </dt>\n<dd> <p>If <code>false</code>, don't validate the associated objects when saving the parent object. true by default.</p> </dd>\n<dt>:autosave </dt>\n<dd> <p>If true, always save the associated objects or destroy them if marked for destruction, when saving the parent object. If false, never save or destroy the associated objects. By default, only save associated objects that are new records. This option is implemented as a <code>before_save</code> callback. Because callbacks are run in the order they are defined, associated objects may need to be explicitly saved in any user-defined <code>before_save</code> callbacks.</p> <p>Note that <code>accepts_nested_attributes_for</code> sets <code>:autosave</code> to <code>true</code>.</p> </dd>\n<dt>:inverse_of </dt>\n<dd> <p>Specifies the name of the <code>belongs_to</code> association on the associated object that is the inverse of this <code>has_many</code> association. Does not work in combination with <code>:through</code> or <code>:as</code> options. See ActiveRecord::Associations::ClassMethods's overview on Bi-directional associations for more detail.</p> </dd>\n</dl> <p>Option examples:</p> <pre class=\"ruby\">has_many :comments, -&gt; { order \"posted_on\" }\nhas_many :comments, -&gt; { includes :author }\nhas_many :people, -&gt; { where(deleted: false).order(\"name\") }, class_name: \"Person\"\nhas_many :tracks, -&gt; { order \"position\" }, dependent: :destroy\nhas_many :comments, dependent: :nullify\nhas_many :tags, as: :taggable\nhas_many :reports, -&gt; { readonly }\nhas_many :subscribers, through: :subscriptions, source: :user\n</pre> <div class=\"method-source-code\" id=\"has_many-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations.rb, line 1258\ndef has_many(name, scope = nil, options = {}, &amp;extension)\n  reflection = Builder::HasMany.build(self, name, scope, options, &amp;extension)\n  Reflection.add_reflection self, name, reflection\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-has_one\"> <span class=\"method-name\">has_one</span><span class=\"method-args\">(name, scope = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a one-to-one association with another class. This method should only be used if the other class contains the foreign key. If the current class contains the foreign key, then you should use <code>belongs_to</code> instead. See also ActiveRecord::Associations::ClassMethods's overview on when to use <code>has_one</code> and when to use <code>belongs_to</code>.</p> <p>The following methods for retrieval and query of a single associated object will be added:</p> <p><code>association</code> is a placeholder for the symbol passed as the <code>name</code> argument, so <code>has_one :manager</code> would add among others <code>manager.nil?</code>.</p> <dl class=\"rdoc-list label-list\">\n<dt>association(force_reload = false) </dt>\n<dd> <p>Returns the associated object. <code>nil</code> is returned if none is found.</p> </dd>\n<dt>association=(associate) </dt>\n<dd> <p>Assigns the associate object, extracts the primary key, sets it as the foreign key, and saves the associate object. To avoid database inconsistencies, permanently deletes an existing associated object when assigning a new one, even if the new one isn't saved to database.</p> </dd>\n<dt>build_association(attributes = {}) </dt>\n<dd> <p>Returns a new object of the associated type that has been instantiated with <code>attributes</code> and linked to this object through a foreign key, but has not yet been saved.</p> </dd>\n<dt>create_association(attributes = {}) </dt>\n<dd> <p>Returns a new object of the associated type that has been instantiated with <code>attributes</code>, linked to this object through a foreign key, and that has already been saved (if it passed the validation).</p> </dd>\n<dt>create_association!(attributes = {}) </dt>\n<dd> <p>Does the same as <code>create_association</code>, but raises <code>ActiveRecord::RecordInvalid</code> if the record is invalid.</p> </dd>\n</dl> <h3 id=\"method-i-has_one-label-Example\">Example</h3> <p>An Account class declares <code>has_one :beneficiary</code>, which will add:</p> <ul>\n<li> <p><code>Account#beneficiary</code> (similar to <code>Beneficiary.where(account_id: id).first</code>)</p> </li>\n<li> <p><code>Account#beneficiary=(beneficiary)</code> (similar to <code>beneficiary.account_id = account.id; beneficiary.save</code>)</p> </li>\n<li> <p><code>Account#build_beneficiary</code> (similar to <code>Beneficiary.new(\"account_id\" =&gt; id)</code>)</p> </li>\n<li> <p><code>Account#create_beneficiary</code> (similar to <code>b =\nBeneficiary.new(\"account_id\" =&gt; id); b.save; b</code>)</p> </li>\n<li> <p><code>Account#create_beneficiary!</code> (similar to <code>b =\nBeneficiary.new(\"account_id\" =&gt; id); b.save!; b</code>)</p> </li>\n</ul> <h3 id=\"method-i-has_one-label-Scopes\">Scopes</h3> <p>You can pass a second argument <code>scope</code> as a callable (i.e. proc or lambda) to retrieve a specific record or customize the generated query when you access the associated object.</p> <p>Scope examples:</p> <pre class=\"ruby\">has_one :author, -&gt; { where(comment_id: 1) }\nhas_one :employer, -&gt; { joins(:company) }\nhas_one :dob, -&gt;(dob) { where(\"Date.new(2000, 01, 01) &gt; ?\", dob) }\n</pre> <h3 id=\"method-i-has_one-label-Options\">Options</h3> <p>The declaration can also include an <code>options</code> hash to specialize the behavior of the association.</p> <p>Options are:</p> <dl class=\"rdoc-list label-list\">\n<dt>:class_name </dt>\n<dd> <p>Specify the class name of the association. Use it only if that name can't be inferred from the association name. So <code>has_one\n:manager</code> will by default be linked to the Manager class, but if the real class name is Person, you'll have to specify it with this option.</p> </dd>\n<dt>:dependent </dt>\n<dd> <p>Controls what happens to the associated object when its owner is destroyed:</p> <ul>\n<li> <p><code>:destroy</code> causes the associated object to also be destroyed</p> </li>\n<li> <p><code>:delete</code> causes the associated object to be deleted directly from the database (so callbacks will not execute)</p> </li>\n<li> <p><code>:nullify</code> causes the foreign key to be set to <code>NULL</code>. <a href=\"../callbacks\">Callbacks</a> are not executed.</p> </li>\n<li> <p><code>:restrict_with_exception</code> causes an exception to be raised if there is an associated record</p> </li>\n<li> <p><code>:restrict_with_error</code> causes an error to be added to the owner if there is an associated object</p> </li>\n</ul> </dd>\n<dt>:foreign_key </dt>\n<dd> <p>Specify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and “_id” suffixed. So a Person class that makes a <code>has_one</code> association will use “person_id” as the default <code>:foreign_key</code>.</p> </dd>\n<dt>:foreign_type </dt>\n<dd> <p>Specify the column used to store the associated object's type, if this is a polymorphic association. By default this is guessed to be the name of the polymorphic association specified on “as” option with a “_type” suffix. So a class that defines a <code>has_one :tag, as: :taggable</code> association will use “taggable_type” as the default <code>:foreign_type</code>.</p> </dd>\n<dt>:primary_key </dt>\n<dd> <p>Specify the method that returns the primary key used for the association. By default this is <code>id</code>.</p> </dd>\n<dt>:as </dt>\n<dd> <p>Specifies a polymorphic interface (See <code>belongs_to</code>).</p> </dd>\n<dt>:through </dt>\n<dd> <p>Specifies a Join Model through which to perform the query. Options for <code>:class_name</code>, <code>:primary_key</code>, and <code>:foreign_key</code> are ignored, as the association uses the source reflection. You can only use a <code>:through</code> query through a <code>has_one</code> or <code>belongs_to</code> association on the join model.</p> </dd>\n<dt>:source </dt>\n<dd> <p>Specifies the source association name used by <code>has_one :through</code> queries. Only use it if the name cannot be inferred from the association. <code>has_one :favorite, through: :favorites</code> will look for a <code>:favorite</code> on Favorite, unless a <code>:source</code> is given.</p> </dd>\n<dt>:source_type </dt>\n<dd> <p>Specifies type of the source association used by <code>has_one\n:through</code> queries where the source association is a polymorphic <code>belongs_to</code>.</p> </dd>\n<dt>:validate </dt>\n<dd> <p>If <code>false</code>, don't validate the associated object when saving the parent object. <code>false</code> by default.</p> </dd>\n<dt>:autosave </dt>\n<dd> <p>If true, always save the associated object or destroy it if marked for destruction, when saving the parent object. If false, never save or destroy the associated object. By default, only save the associated object if it's a new record.</p> <p>Note that <code>accepts_nested_attributes_for</code> sets <code>:autosave</code> to <code>true</code>.</p> </dd>\n<dt>:inverse_of </dt>\n<dd> <p>Specifies the name of the <code>belongs_to</code> association on the associated object that is the inverse of this <code>has_one</code> association. Does not work in combination with <code>:through</code> or <code>:as</code> options. See ActiveRecord::Associations::ClassMethods's overview on Bi-directional associations for more detail.</p> </dd>\n<dt>:required </dt>\n<dd> <p>When set to <code>true</code>, the association will also have its presence validated. This will validate the association itself, not the id. You can use <code>:inverse_of</code> to avoid an extra query during validation.</p> </dd>\n</dl> <p>Option examples:</p> <pre class=\"ruby\">has_one :credit_card, dependent: :destroy  # destroys the associated credit card\nhas_one :credit_card, dependent: :nullify  # updates the associated records foreign\n                                              # key value to NULL rather than destroying it\nhas_one :last_comment, -&gt; { order 'posted_on' }, class_name: \"Comment\"\nhas_one :project_manager, -&gt; { where role: 'project_manager' }, class_name: \"Person\"\nhas_one :attachment, as: :attachable\nhas_one :boss, -&gt; { readonly }\nhas_one :club, through: :membership\nhas_one :primary_address, -&gt; { where primary: true }, through: :addressables, source: :addressable\nhas_one :credit_card, required: true\n</pre> <div class=\"method-source-code\" id=\"has_one-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations.rb, line 1385\ndef has_one(name, scope = nil, options = {})\n  reflection = Builder::HasOne.build(self, name, scope, options)\n  Reflection.add_reflection self, name, reflection\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/associations/collectionproxy":"<h1 id=\"class-ActiveRecord::Associations::CollectionProxy\" class=\"class\"> class ActiveRecord::Associations::CollectionProxy </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Relation</dd>\n</dl> <section class=\"description\"> <p>Association proxies in Active Record are middlemen between the object that holds the association, known as the <code>@owner</code>, and the actual associated object, known as the <code>@target</code>. The kind of association any proxy is about is available in <code>@reflection</code>. That's an instance of the class ActiveRecord::Reflection::AssociationReflection.</p> <p>For example, given</p> <pre class=\"ruby\">class Blog &lt; ActiveRecord::Base\n  has_many :posts\nend\n\nblog = Blog.first\n</pre> <p>the association proxy in <code>blog.posts</code> has the object in <code>blog</code> as <code>@owner</code>, the collection of its posts as <code>@target</code>, and the <code>@reflection</code> object represents a <code>:has_many</code> macro.</p> <p>This class delegates unknown methods to <code>@target</code> via <code>method_missing</code>.</p> <p>The <code>@target</code> object is not loaded until needed. For example,</p> <pre class=\"ruby\">blog.posts.count\n</pre> <p>is computed directly through SQL and does not trigger by itself the instantiation of the actual post records.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3C\"> <span class=\"method-name\">&lt;&lt;</span><span class=\"method-args\">(*records)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds one or more <code>records</code> to the collection by setting their foreign keys to the association's primary key. Returns <code>self</code>, so several appends may be chained together.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.size # =&gt; 0\nperson.pets &lt;&lt; Pet.new(name: 'Fancy-Fancy')\nperson.pets &lt;&lt; [Pet.new(name: 'Spook'), Pet.new(name: 'Choo-Choo')]\nperson.pets.size # =&gt; 3\n\nperson.id # =&gt; 1\nperson.pets\n# =&gt; [\n#      #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#      #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#      #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n</pre> <div class=\"method-source-code\" id=\"3C-3C-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 969\ndef &lt;&lt;(*records)\n  proxy_association.concat(records) &amp;&amp; self\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"collectionproxy#method-i-push\">push</a>, <a href=\"collectionproxy#method-i-append\">append</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D\"> <span class=\"method-name\">==</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>Array#==</code>. Returns <code>true</code> if the two arrays contain the same number of elements and if each element is equal to the corresponding element in the <code>other</code> array, otherwise returns <code>false</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets\n# =&gt; [\n#      #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#      #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;\n#    ]\n\nother = person.pets.to_ary\n\nperson.pets == other\n# =&gt; true\n\nother = [Pet.new(id: 1), Pet.new(id: 2)]\n\nperson.pets == other\n# =&gt; false\n</pre> <div class=\"method-source-code\" id=\"3D-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 907\ndef ==(other)\n  load_target == other\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-any-3F\"> <span class=\"method-name\">any?</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the collection is not empty.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count # =&gt; 0\nperson.pets.any?  # =&gt; false\n\nperson.pets &lt;&lt; Pet.new(name: 'Snoop')\nperson.pets.count # =&gt; 0\nperson.pets.any?  # =&gt; true\n</pre> <p>You can also pass a <code>block</code> to define criteria. The behavior is the same, it returns true if the collection based on the criteria is not empty.</p> <pre class=\"ruby\">person.pets\n# =&gt; [#&lt;Pet name: \"Snoop\", group: \"dogs\"&gt;]\n\nperson.pets.any? do |pet|\n  pet.group == 'cats'\nend\n# =&gt; false\n\nperson.pets.any? do |pet|\n  pet.group == 'dogs'\nend\n# =&gt; true\n</pre> <div class=\"method-source-code\" id=\"any-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 805\ndef any?(&amp;block)\n  @association.any?(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-append\"> <span class=\"method-name\">append</span><span class=\"method-args\">(*records)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"collectionproxy#method-i-3C-3C\">&lt;&lt;</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-arel\"> <span class=\"method-name\">arel</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"arel-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 861\ndef arel\n  scope.arel\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-build\"> <span class=\"method-name\">build</span><span class=\"method-args\">(attributes = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new object of the collection type that has been instantiated with <code>attributes</code> and linked to this object, but have not yet been saved. You can pass an array of attributes hashes, this will return an array with the new objects.</p> <pre class=\"ruby\">class Person\n  has_many :pets\nend\n\nperson.pets.build\n# =&gt; #&lt;Pet id: nil, name: nil, person_id: 1&gt;\n\nperson.pets.build(name: 'Fancy-Fancy')\n# =&gt; #&lt;Pet id: nil, name: \"Fancy-Fancy\", person_id: 1&gt;\n\nperson.pets.build([{name: 'Spook'}, {name: 'Choo-Choo'}, {name: 'Brain'}])\n# =&gt; [\n#      #&lt;Pet id: nil, name: \"Spook\", person_id: 1&gt;,\n#      #&lt;Pet id: nil, name: \"Choo-Choo\", person_id: 1&gt;,\n#      #&lt;Pet id: nil, name: \"Brain\", person_id: 1&gt;\n#    ]\n\nperson.pets.size  # =&gt; 5 # size of the collection\nperson.pets.count # =&gt; 0 # count from database\n</pre> <div class=\"method-source-code\" id=\"build-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 258\ndef build(attributes = {}, &amp;block)\n  @association.build(attributes, &amp;block)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"collectionproxy#method-i-new\">new</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>delete_all</code>. The difference is that returns <code>self</code>, instead of an array with the deleted objects, so methods can be chained. See <code>delete_all</code> for more information.</p> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 982\ndef clear\n  delete_all\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-concat\"> <span class=\"method-name\">concat</span><span class=\"method-args\">(*records)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add one or more records to the collection by setting their foreign keys to the association's primary key. Since &lt;&lt; flattens its argument list and inserts each record, <code>push</code> and <code>concat</code> behave identically. Returns <code>self</code> so method calls may be chained.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.size # =&gt; 0\nperson.pets.concat(Pet.new(name: 'Fancy-Fancy'))\nperson.pets.concat(Pet.new(name: 'Spook'), Pet.new(name: 'Choo-Choo'))\nperson.pets.size # =&gt; 3\n\nperson.id # =&gt; 1\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.concat([Pet.new(name: 'Brain'), Pet.new(name: 'Benny')])\nperson.pets.size # =&gt; 5\n</pre> <div class=\"method-source-code\" id=\"concat-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 333\ndef concat(*records)\n  @association.concat(*records)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-count\"> <span class=\"method-name\">count</span><span class=\"method-args\">(column_name = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Count all records using SQL.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n</pre> <div class=\"method-source-code\" id=\"count-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 696\ndef count(column_name = nil, options = {})\n  # TODO: Remove options argument as soon we remove support to\n  # activerecord-deprecated_finders.\n  @association.count(column_name, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create\"> <span class=\"method-name\">create</span><span class=\"method-args\">(attributes = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new object of the collection type that has been instantiated with attributes, linked to this object and that has already been saved (if it passes the validations).</p> <pre class=\"ruby\">class Person\n  has_many :pets\nend\n\nperson.pets.create(name: 'Fancy-Fancy')\n# =&gt; #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;\n\nperson.pets.create([{name: 'Spook'}, {name: 'Choo-Choo'}])\n# =&gt; [\n#      #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#      #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.size  # =&gt; 3\nperson.pets.count # =&gt; 3\n\nperson.pets.find(1, 2, 3)\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n</pre> <div class=\"method-source-code\" id=\"create-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 289\ndef create(attributes = {}, &amp;block)\n  @association.create(attributes, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create-21\"> <span class=\"method-name\">create!</span><span class=\"method-args\">(attributes = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Like <code>create</code>, except that if the record is invalid, raises an exception.</p> <pre class=\"ruby\">class Person\n  has_many :pets\nend\n\nclass Pet\n  validates :name, presence: true\nend\n\nperson.pets.create!(name: nil)\n# =&gt; ActiveRecord::RecordInvalid: Validation failed: Name can't be blank\n</pre> <div class=\"method-source-code\" id=\"create-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 305\ndef create!(attributes = {}, &amp;block)\n  @association.create!(attributes, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(*records)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes the <code>records</code> supplied from the collection according to the strategy specified by the <code>:dependent</code> option. If no <code>:dependent</code> option is given, then it will follow the default strategy. Returns an array with the deleted records.</p> <p>For +has_many :through+ associations, the default deletion strategy is <code>:delete_all</code>.</p> <p>For <code>has_many</code> associations, the default deletion strategy is <code>:nullify</code>. This sets the foreign keys to <code>NULL</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets # dependent: :nullify option by default\nend\n\nperson.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.delete(Pet.find(1))\n# =&gt; [#&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;]\n\nperson.pets.size # =&gt; 2\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nPet.find(1)\n# =&gt; #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: nil&gt;\n</pre> <p>If it is set to <code>:destroy</code> all the <code>records</code> are removed by calling their <code>destroy</code> method. See <code>destroy</code> for more information.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets, dependent: :destroy\nend\n\nperson.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.delete(Pet.find(1), Pet.find(3))\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.size # =&gt; 1\nperson.pets\n# =&gt; [#&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;]\n\nPet.find(1, 3)\n# =&gt; ActiveRecord::RecordNotFound: Couldn't find all Pets with IDs (1, 3)\n</pre> <p>If it is set to <code>:delete_all</code>, all the <code>records</code> are deleted <strong>without</strong> calling their <code>destroy</code> method.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets, dependent: :delete_all\nend\n\nperson.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.delete(Pet.find(1))\n# =&gt; [#&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;]\n\nperson.pets.size # =&gt; 2\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nPet.find(1)\n# =&gt; ActiveRecord::RecordNotFound: Couldn't find Pet with id=1\n</pre> <p>You can pass <code>Fixnum</code> or <code>String</code> values, it finds the records responding to the <code>id</code> and executes delete on them.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.delete(\"1\")\n# =&gt; [#&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;]\n\nperson.pets.delete(2, 3)\n# =&gt; [\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n</pre> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 588\ndef delete(*records)\n  @association.delete(*records)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_all\"> <span class=\"method-name\">delete_all</span><span class=\"method-args\">(dependent = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes all the records from the collection according to the strategy specified by the <code>:dependent</code> option. If no <code>:dependent</code> option is given, then it will follow the default strategy.</p> <p>For +has_many :through+ associations, the default deletion strategy is <code>:delete_all</code>.</p> <p>For <code>has_many</code> associations, the default deletion strategy is <code>:nullify</code>. This sets the foreign keys to <code>NULL</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets # dependent: :nullify option by default\nend\n\nperson.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.delete_all\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.size # =&gt; 0\nperson.pets      # =&gt; []\n\nPet.find(1, 2, 3)\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: nil&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: nil&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: nil&gt;\n#    ]\n</pre> <p>Both <code>has_many</code> and +has_many :through+ dependencies default to the <code>:delete_all</code> strategy if the <code>:dependent</code> option is set to <code>:destroy</code>. Records are not instantiated and callbacks will not be fired.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets, dependent: :destroy\nend\n\nperson.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.delete_all\n\nPet.find(1, 2, 3)\n# =&gt; ActiveRecord::RecordNotFound\n</pre> <p>If it is set to <code>:delete_all</code>, all the objects are deleted <strong>without</strong> calling their <code>destroy</code> method.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets, dependent: :delete_all\nend\n\nperson.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.delete_all\n\nPet.find(1, 2, 3)\n# =&gt; ActiveRecord::RecordNotFound\n</pre> <div class=\"method-source-code\" id=\"delete_all-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 442\ndef delete_all(dependent = nil)\n  @association.delete_all(dependent)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroy\"> <span class=\"method-name\">destroy</span><span class=\"method-args\">(*records)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destroys the <code>records</code> supplied and removes them from the collection. This method will <em>always</em> remove record from the database ignoring the <code>:dependent</code> option. Returns an array with the removed records.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.destroy(Pet.find(1))\n# =&gt; [#&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;]\n\nperson.pets.size # =&gt; 2\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.destroy(Pet.find(2), Pet.find(3))\n# =&gt; [\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.size  # =&gt; 0\nperson.pets       # =&gt; []\n\nPet.find(1, 2, 3) # =&gt; ActiveRecord::RecordNotFound: Couldn't find all Pets with IDs (1, 2, 3)\n</pre> <p>You can pass <code>Fixnum</code> or <code>String</code> values, it finds the records responding to the <code>id</code> and then deletes them from the database.</p> <pre class=\"ruby\">person.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 4, name: \"Benny\", person_id: 1&gt;,\n#       #&lt;Pet id: 5, name: \"Brain\", person_id: 1&gt;,\n#       #&lt;Pet id: 6, name: \"Boss\",  person_id: 1&gt;\n#    ]\n\nperson.pets.destroy(\"4\")\n# =&gt; #&lt;Pet id: 4, name: \"Benny\", person_id: 1&gt;\n\nperson.pets.size # =&gt; 2\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 5, name: \"Brain\", person_id: 1&gt;,\n#       #&lt;Pet id: 6, name: \"Boss\",  person_id: 1&gt;\n#    ]\n\nperson.pets.destroy(5, 6)\n# =&gt; [\n#       #&lt;Pet id: 5, name: \"Brain\", person_id: 1&gt;,\n#       #&lt;Pet id: 6, name: \"Boss\",  person_id: 1&gt;\n#    ]\n\nperson.pets.size  # =&gt; 0\nperson.pets       # =&gt; []\n\nPet.find(4, 5, 6) # =&gt; ActiveRecord::RecordNotFound: Couldn't find all Pets with IDs (4, 5, 6)\n</pre> <div class=\"method-source-code\" id=\"destroy-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 660\ndef destroy(*records)\n  @association.destroy(*records)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroy_all\"> <span class=\"method-name\">destroy_all</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes the records of the collection directly from the database ignoring the <code>:dependent</code> option. Records are instantiated and it invokes <code>before_remove</code>, <code>after_remove</code> , <code>before_destroy</code> and <code>after_destroy</code> callbacks.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.size # =&gt; 3\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.destroy_all\n\nperson.pets.size # =&gt; 0\nperson.pets      # =&gt; []\n\nPet.find(1) # =&gt; Couldn't find Pet with id=1\n</pre> <div class=\"method-source-code\" id=\"destroy_all-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 469\ndef destroy_all\n  @association.destroy_all\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-distinct\"> <span class=\"method-name\">distinct</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies whether the records should be unique or not.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.select(:name)\n# =&gt; [\n#      #&lt;Pet name: \"Fancy-Fancy\"&gt;,\n#      #&lt;Pet name: \"Fancy-Fancy\"&gt;\n#    ]\n\nperson.pets.select(:name).distinct\n# =&gt; [#&lt;Pet name: \"Fancy-Fancy\"&gt;]\n</pre> <div class=\"method-source-code\" id=\"distinct-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 678\ndef distinct\n  @association.distinct\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"collectionproxy#method-i-uniq\">uniq</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-empty-3F\"> <span class=\"method-name\">empty?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the collection is empty. If the collection has been loaded it is equivalent to <code>collection.size.zero?</code>. If the collection has not been loaded, it is equivalent to <code>collection.exists?</code>. If the collection has not already been loaded and you are going to fetch the records anyway it is better to check <code>collection.length.zero?</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count  # =&gt; 1\nperson.pets.empty? # =&gt; false\n\nperson.pets.delete_all\n\nperson.pets.count  # =&gt; 0\nperson.pets.empty? # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"empty-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 772\ndef empty?\n  @association.empty?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fifth\"> <span class=\"method-name\">fifth</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>first</code> except returns only the fifth record.</p> <div class=\"method-source-code\" id=\"fifth-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 190\ndef fifth(*args)\n  @association.fifth(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find\"> <span class=\"method-name\">find</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Finds an object in the collection responding to the <code>id</code>. Uses the same rules as <code>ActiveRecord::Base.find</code>. Returns <code>ActiveRecord::RecordNotFound</code> error if the object cannot be found.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.find(1) # =&gt; #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;\nperson.pets.find(4) # =&gt; ActiveRecord::RecordNotFound: Couldn't find Pet with id=4\n\nperson.pets.find(2) { |pet| pet.name.downcase! }\n# =&gt; #&lt;Pet id: 2, name: \"fancy-fancy\", person_id: 1&gt;\n\nperson.pets.find(2, 3)\n# =&gt; [\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n</pre> <div class=\"method-source-code\" id=\"find-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 140\ndef find(*args, &amp;block)\n  @association.find(*args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-first\"> <span class=\"method-name\">first</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the first record, or the first <code>n</code> records, from the collection. If the collection is empty, the first form returns <code>nil</code>, and the second form returns an empty array.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.first # =&gt; #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;\n\nperson.pets.first(2)\n# =&gt; [\n#      #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#      #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;\n#    ]\n\nanother_person_without.pets          # =&gt; []\nanother_person_without.pets.first    # =&gt; nil\nanother_person_without.pets.first(3) # =&gt; []\n</pre> <div class=\"method-source-code\" id=\"first-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 170\ndef first(*args)\n  @association.first(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-forty_two\"> <span class=\"method-name\">forty_two</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>first</code> except returns only the forty second record. Also known as accessing “the reddit”.</p> <div class=\"method-source-code\" id=\"forty_two-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 196\ndef forty_two(*args)\n  @association.forty_two(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fourth\"> <span class=\"method-name\">fourth</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>first</code> except returns only the fourth record.</p> <div class=\"method-source-code\" id=\"fourth-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 185\ndef fourth(*args)\n  @association.fourth(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-include-3F\"> <span class=\"method-name\">include?</span><span class=\"method-args\">(record)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the given <code>record</code> is present in the collection.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets # =&gt; [#&lt;Pet id: 20, name: \"Snoop\"&gt;]\n\nperson.pets.include?(Pet.find(20)) # =&gt; true\nperson.pets.include?(Pet.find(21)) # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"include-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 857\ndef include?(record)\n  !!@association.include?(record)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last\"> <span class=\"method-name\">last</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the last record, or the last <code>n</code> records, from the collection. If the collection is empty, the first form returns <code>nil</code>, and the second form returns an empty array.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.last # =&gt; #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n\nperson.pets.last(2)\n# =&gt; [\n#      #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#      #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nanother_person_without.pets         # =&gt; []\nanother_person_without.pets.last    # =&gt; nil\nanother_person_without.pets.last(3) # =&gt; []\n</pre> <div class=\"method-source-code\" id=\"last-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 226\ndef last(*args)\n  @association.last(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-length\"> <span class=\"method-name\">length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the size of the collection calling <code>size</code> on the target. If the collection has been already loaded, <code>length</code> and <code>size</code> are equivalent. If not and you are going to need the records anyway this method will take one less query. Otherwise <code>size</code> is more efficient.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.length # =&gt; 3\n# executes something like SELECT \"pets\".* FROM \"pets\" WHERE \"pets\".\"person_id\" = 1\n\n# Because the collection is loaded, you can\n# call the collection with no additional queries:\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n</pre> <div class=\"method-source-code\" id=\"length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 750\ndef length\n  @association.length\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load_target\"> <span class=\"method-name\">load_target</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"load_target-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 44\ndef load_target\n  @association.load_target\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-loaded-3F\"> <span class=\"method-name\">loaded?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the association has been loaded, otherwise <code>false</code>.</p> <pre class=\"ruby\">person.pets.loaded? # =&gt; false\nperson.pets\nperson.pets.loaded? # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"loaded-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 53\ndef loaded?\n  @association.loaded?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-many-3F\"> <span class=\"method-name\">many?</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the collection has more than one record. Equivalent to <code>collection.size &gt; 1</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count # =&gt; 1\nperson.pets.many? # =&gt; false\n\nperson.pets &lt;&lt; Pet.new(name: 'Snoopy')\nperson.pets.count # =&gt; 2\nperson.pets.many? # =&gt; true\n</pre> <p>You can also pass a <code>block</code> to define criteria. The behavior is the same, it returns true if the collection based on the criteria has more than one record.</p> <pre class=\"ruby\">person.pets\n# =&gt; [\n#      #&lt;Pet name: \"Gorby\", group: \"cats\"&gt;,\n#      #&lt;Pet name: \"Puff\", group: \"cats\"&gt;,\n#      #&lt;Pet name: \"Snoop\", group: \"dogs\"&gt;\n#    ]\n\nperson.pets.many? do |pet|\n  pet.group == 'dogs'\nend\n# =&gt; false\n\nperson.pets.many? do |pet|\n  pet.group == 'cats'\nend\n# =&gt; true\n</pre> <div class=\"method-source-code\" id=\"many-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 843\ndef many?(&amp;block)\n  @association.many?(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(attributes = {}, &amp;block)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"collectionproxy#method-i-build\">build</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prepend\"> <span class=\"method-name\">prepend</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"prepend-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 975\ndef prepend(*args)\n  raise NoMethodError, \"prepend on association is not defined. Please use &lt;&lt; or append\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-proxy_association\"> <span class=\"method-name\">proxy_association</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"proxy_association-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 865\ndef proxy_association\n  @association\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-push\"> <span class=\"method-name\">push</span><span class=\"method-args\">(*records)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"collectionproxy#method-i-3C-3C\">&lt;&lt;</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reload\"> <span class=\"method-name\">reload</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reloads the collection from the database. Returns <code>self</code>. Equivalent to <code>collection(true)</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets # fetches pets from the database\n# =&gt; [#&lt;Pet id: 1, name: \"Snoop\", group: \"dogs\", person_id: 1&gt;]\n\nperson.pets # uses the pets cache\n# =&gt; [#&lt;Pet id: 1, name: \"Snoop\", group: \"dogs\", person_id: 1&gt;]\n\nperson.pets.reload # fetches pets from the database\n# =&gt; [#&lt;Pet id: 1, name: \"Snoop\", group: \"dogs\", person_id: 1&gt;]\n\nperson.pets(true)  # fetches pets from the database\n# =&gt; [#&lt;Pet id: 1, name: \"Snoop\", group: \"dogs\", person_id: 1&gt;]\n</pre> <div class=\"method-source-code\" id=\"reload-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 1005\ndef reload\n  proxy_association.reload\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-replace\"> <span class=\"method-name\">replace</span><span class=\"method-args\">(other_array)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces this collection with <code>other_array</code>. This will perform a diff and delete/add only records that have changed.</p> <pre>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets\n# =&gt; [#&lt;Pet id: 1, name: \"Gorby\", group: \"cats\", person_id: 1&gt;]\n\nother_pets = [Pet.new(name: 'Puff', group: 'celebrities']\n\nperson.pets.replace(other_pets)\n\nperson.pets\n# =&gt; [#&lt;Pet id: 2, name: \"Puff\", group: \"celebrities\", person_id: 1&gt;]</pre> <p>If the supplied array has an incorrect association type, it raises an <code>ActiveRecord::AssociationTypeMismatch</code> error:</p> <pre class=\"ruby\">person.pets.replace([\"doo\", \"ggie\", \"gaga\"])\n# =&gt; ActiveRecord::AssociationTypeMismatch: Pet expected, got String\n</pre> <div class=\"method-source-code\" id=\"replace-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 359\ndef replace(other_array)\n  @association.replace(other_array)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset\"> <span class=\"method-name\">reset</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Unloads the association. Returns <code>self</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets # fetches pets from the database\n# =&gt; [#&lt;Pet id: 1, name: \"Snoop\", group: \"dogs\", person_id: 1&gt;]\n\nperson.pets # uses the pets cache\n# =&gt; [#&lt;Pet id: 1, name: \"Snoop\", group: \"dogs\", person_id: 1&gt;]\n\nperson.pets.reset # clears the pets cache\n\nperson.pets  # fetches pets from the database\n# =&gt; [#&lt;Pet id: 1, name: \"Snoop\", group: \"dogs\", person_id: 1&gt;]\n</pre> <div class=\"method-source-code\" id=\"reset-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 1026\ndef reset\n  proxy_association.reset\n  proxy_association.reset_scope\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-scope\"> <span class=\"method-name\">scope</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <code>Relation</code> object for the records in this association</p> <div class=\"method-source-code\" id=\"scope-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 878\ndef scope\n  @association.scope\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"collectionproxy#method-i-spawn\">spawn</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-scoping\"> <span class=\"method-name\">scoping</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>We don't want this object to be put on the scoping stack, because that could create an infinite loop where we call an @association method, which gets the current scope, which is this object, which delegates to @association, and so on.</p> <div class=\"method-source-code\" id=\"scoping-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 873\ndef scoping\n  @association.scope.scoping { yield }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-second\"> <span class=\"method-name\">second</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>first</code> except returns only the second record.</p> <div class=\"method-source-code\" id=\"second-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 175\ndef second(*args)\n  @association.second(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select\"> <span class=\"method-name\">select</span><span class=\"method-args\">(*fields, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Works in two ways.</p> <p><strong>First:</strong> Specify a subset of fields to be selected from the result set.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.select(:name)\n# =&gt; [\n#      #&lt;Pet id: nil, name: \"Fancy-Fancy\"&gt;,\n#      #&lt;Pet id: nil, name: \"Spook\"&gt;,\n#      #&lt;Pet id: nil, name: \"Choo-Choo\"&gt;\n#    ]\n\nperson.pets.select(:id, :name )\n# =&gt; [\n#      #&lt;Pet id: 1, name: \"Fancy-Fancy\"&gt;,\n#      #&lt;Pet id: 2, name: \"Spook\"&gt;,\n#      #&lt;Pet id: 3, name: \"Choo-Choo\"&gt;\n#    ]\n</pre> <p>Be careful because this also means you're initializing a model object with only the fields that you've selected. If you attempt to access a field except <code>id</code> that is not in the initialized record you'll receive:</p> <pre class=\"ruby\">person.pets.select(:name).first.person_id\n# =&gt; ActiveModel::MissingAttributeError: missing attribute: person_id\n</pre> <p><strong>Second:</strong> You can pass a block so it can be used just like Array#select. This builds an array of objects from the database for the scope, converting them into an array and iterating through them using Array#select.</p> <pre class=\"ruby\">person.pets.select { |pet| pet.name =~ /oo/ }\n# =&gt; [\n#      #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#      #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.select(:name) { |pet| pet.name =~ /oo/ }\n# =&gt; [\n#      #&lt;Pet id: 2, name: \"Spook\"&gt;,\n#      #&lt;Pet id: 3, name: \"Choo-Choo\"&gt;\n#    ]\n</pre> <div class=\"method-source-code\" id=\"select-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 110\ndef select(*fields, &amp;block)\n  @association.select(*fields, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-size\"> <span class=\"method-name\">size</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the size of the collection. If the collection hasn't been loaded, it executes a <code>SELECT COUNT(*)</code> query. Else it calls <code>collection.size</code>.</p> <p>If the collection has been already loaded <code>size</code> and <code>length</code> are equivalent. If not and you are going to need the records anyway <code>length</code> will take one less query. Otherwise <code>size</code> is more efficient.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.size # =&gt; 3\n# executes something like SELECT COUNT(*) FROM \"pets\" WHERE \"pets\".\"person_id\" = 1\n\nperson.pets # This will execute a SELECT * FROM query\n# =&gt; [\n#       #&lt;Pet id: 1, name: \"Fancy-Fancy\", person_id: 1&gt;,\n#       #&lt;Pet id: 2, name: \"Spook\", person_id: 1&gt;,\n#       #&lt;Pet id: 3, name: \"Choo-Choo\", person_id: 1&gt;\n#    ]\n\nperson.pets.size # =&gt; 3\n# Because the collection is already loaded, this will behave like\n# collection.size and no SQL count query is executed.\n</pre> <div class=\"method-source-code\" id=\"size-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 726\ndef size\n  @association.size\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-spawn\"> <span class=\"method-name\">spawn</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"collectionproxy#method-i-scope\">scope</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-take\"> <span class=\"method-name\">take</span><span class=\"method-args\">(n = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"take-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 230\ndef take(n = nil)\n  @association.take(n)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-target\"> <span class=\"method-name\">target</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"target-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 40\ndef target\n  @association.target\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-third\"> <span class=\"method-name\">third</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>first</code> except returns only the third record.</p> <div class=\"method-source-code\" id=\"third-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 180\ndef third(*args)\n  @association.third(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_a\"> <span class=\"method-name\">to_a</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"collectionproxy#method-i-to_ary\">to_ary</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_ary\"> <span class=\"method-name\">to_ary</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new array of objects from the collection. If the collection hasn't been loaded, it fetches the records from the database.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets\n# =&gt; [\n#       #&lt;Pet id: 4, name: \"Benny\", person_id: 1&gt;,\n#       #&lt;Pet id: 5, name: \"Brain\", person_id: 1&gt;,\n#       #&lt;Pet id: 6, name: \"Boss\",  person_id: 1&gt;\n#    ]\n\nother_pets = person.pets.to_ary\n# =&gt; [\n#       #&lt;Pet id: 4, name: \"Benny\", person_id: 1&gt;,\n#       #&lt;Pet id: 5, name: \"Brain\", person_id: 1&gt;,\n#       #&lt;Pet id: 6, name: \"Boss\",  person_id: 1&gt;\n#    ]\n\nother_pets.replace([Pet.new(name: 'BooGoo')])\n\nother_pets\n# =&gt; [#&lt;Pet id: nil, name: \"BooGoo\", person_id: 1&gt;]\n\nperson.pets\n# This is not affected by replace\n# =&gt; [\n#       #&lt;Pet id: 4, name: \"Benny\", person_id: 1&gt;,\n#       #&lt;Pet id: 5, name: \"Brain\", person_id: 1&gt;,\n#       #&lt;Pet id: 6, name: \"Boss\",  person_id: 1&gt;\n#    ]\n</pre> <div class=\"method-source-code\" id=\"to_ary-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/associations/collection_proxy.rb, line 944\ndef to_ary\n  load_target.dup\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"collectionproxy#method-i-to_a\">to_a</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-uniq\"> <span class=\"method-name\">uniq</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"collectionproxy#method-i-distinct\">distinct</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributeassignment":"<h1 id=\"module-ActiveRecord::AttributeAssignment\" class=\"module\"> module ActiveRecord::AttributeAssignment </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assign_attributes\"> <span class=\"method-name\">assign_attributes</span><span class=\"method-args\">(new_attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to set all the attributes by passing in a hash of attributes with keys matching the attribute names (which again matches the column names).</p> <p>If the passed hash responds to <code>permitted?</code> method and the return value of this method is <code>false</code> an <code>ActiveModel::ForbiddenAttributesError</code> exception is raised.</p> <pre class=\"ruby\">cat = Cat.new(name: \"Gorby\", status: \"yawning\")\ncat.attributes # =&gt;  { \"name\" =&gt; \"Gorby\", \"status\" =&gt; \"yawning\", \"created_at\" =&gt; nil, \"updated_at\" =&gt; nil}\ncat.assign_attributes(status: \"sleeping\")\ncat.attributes # =&gt;  { \"name\" =&gt; \"Gorby\", \"status\" =&gt; \"sleeping\", \"created_at\" =&gt; nil, \"updated_at\" =&gt; nil }\n</pre> <p>New attributes will be persisted in the database when the object is saved.</p> <p>Aliased to <code>attributes=</code>.</p> <div class=\"method-source-code\" id=\"assign_attributes-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_assignment.rb, line 23\ndef assign_attributes(new_attributes)\n  if !new_attributes.respond_to?(:stringify_keys)\n    raise ArgumentError, \"When assigning attributes, you must pass a hash as an argument.\"\n  end\n  return if new_attributes.blank?\n\n  attributes                  = new_attributes.stringify_keys\n  multi_parameter_attributes  = []\n  nested_parameter_attributes = []\n\n  attributes = sanitize_for_mass_assignment(attributes)\n\n  attributes.each do |k, v|\n    if k.include?(\"(\")\n      multi_parameter_attributes &lt;&lt; [ k, v ]\n    elsif v.is_a?(Hash)\n      nested_parameter_attributes &lt;&lt; [ k, v ]\n    else\n      _assign_attribute(k, v)\n    end\n  end\n\n  assign_nested_parameter_attributes(nested_parameter_attributes) unless nested_parameter_attributes.empty?\n  assign_multiparameter_attributes(multi_parameter_attributes) unless multi_parameter_attributes.empty?\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"attributeassignment#method-i-attributes-3D\">attributes=</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-attributes-3D\"> <span class=\"method-name\">attributes=</span><span class=\"method-args\">(new_attributes)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"attributeassignment#method-i-assign_attributes\">assign_attributes</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributeassignmenterror":"<h1 id=\"class-ActiveRecord::AttributeAssignmentError\" class=\"class\"> class ActiveRecord::AttributeAssignmentError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when an error occurred while doing a mass assignment to an attribute through the <code>attributes=</code> method. The exception has an <code>attribute</code> property that is the name of the offending attribute.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-attribute\"> <span class=\"method-name\">attribute</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-exception\"> <span class=\"method-name\">exception</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(message, exception, attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/errors.rb, line 200\ndef initialize(message, exception, attribute)\n  super(message)\n  @exception = exception\n  @attribute = attribute\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributemethods":"<h1 id=\"module-ActiveRecord::AttributeMethods\" class=\"module\"> module ActiveRecord::AttributeMethods </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"../activemodel/attributemethods\">ActiveModel::AttributeMethods</a>, <a class=\"include\" href=\"attributemethods/read\">ActiveRecord::AttributeMethods::Read</a>, <a class=\"include\" href=\"attributemethods/write\">ActiveRecord::AttributeMethods::Write</a>, <a class=\"include\" href=\"attributemethods/beforetypecast\">ActiveRecord::AttributeMethods::BeforeTypeCast</a>, <a class=\"include\" href=\"attributemethods/query\">ActiveRecord::AttributeMethods::Query</a>, <a class=\"include\" href=\"attributemethods/primarykey\">ActiveRecord::AttributeMethods::PrimaryKey</a>, <a class=\"include\" href=\"attributemethods/timezoneconversion\">ActiveRecord::AttributeMethods::TimeZoneConversion</a>, <a class=\"include\" href=\"attributemethods/serialization\">ActiveRecord::AttributeMethods::Serialization</a>\n</dd>\n</dl> <section class=\"description\"> <h1 id=\"module-ActiveRecord::AttributeMethods-label-Active+Record+Attribute+Methods\">Active Record Attribute Methods</h1> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"AttrNames\">AttrNames </dt>\n\n<dt id=\"BLACKLISTED_CLASS_METHODS\">BLACKLISTED_CLASS_METHODS </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(attr_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the value of the attribute identified by <code>attr_name</code> after it has been typecast (for example, “2004-12-12” in a date column is cast to a date object, like Date.new(2004, 12, 12)). It raises <code>ActiveModel::MissingAttributeError</code> if the identified attribute is missing.</p> <p>Note: <code>:id</code> is always present.</p> <p>Alias for the <code>read_attribute</code> method.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  belongs_to :organization\nend\n\nperson = Person.new(name: 'Francesco', age: '22')\nperson[:name] # =&gt; \"Francesco\"\nperson[:age]  # =&gt; 22\n\nperson = Person.select('id').first\nperson[:name]            # =&gt; ActiveModel::MissingAttributeError: missing attribute: name\nperson[:organization_id] # =&gt; ActiveModel::MissingAttributeError: missing attribute: organization_id\n</pre> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 358\ndef [](attr_name)\n  read_attribute(attr_name) { |n| missing_attribute(n, caller) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(attr_name, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Updates the attribute identified by <code>attr_name</code> with the specified <code>value</code>. (Alias for the protected <code>write_attribute</code> method).</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nperson = Person.new\nperson[:age] = '22'\nperson[:age] # =&gt; 22\nperson[:age] # =&gt; Fixnum\n</pre> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 372\ndef []=(attr_name, value)\n  write_attribute(attr_name, value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_for_inspect\"> <span class=\"method-name\">attribute_for_inspect</span><span class=\"method-args\">(attr_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an <code>#inspect</code>-like string for the value of the attribute <code>attr_name</code>. <a href=\"../string\">String</a> attributes are truncated up to 50 characters, <a href=\"../date\">Date</a> and <a href=\"../time\">Time</a> attributes are returned in the <code>:db</code> format, <a href=\"../array\">Array</a> attributes are truncated up to 10 values. Other attributes return the value of <code>#inspect</code> without modification.</p> <pre class=\"ruby\">person = Person.create!(name: 'David Heinemeier Hansson ' * 3)\n\nperson.attribute_for_inspect(:name)\n# =&gt; \"\\\"David Heinemeier Hansson David Heinemeier Hansson ...\\\"\"\n\nperson.attribute_for_inspect(:created_at)\n# =&gt; \"\\\"2012-10-22 00:15:07\\\"\"\n\nperson.attribute_for_inspect(:tag_ids)\n# =&gt; \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...]\"\n</pre> <div class=\"method-source-code\" id=\"attribute_for_inspect-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 304\ndef attribute_for_inspect(attr_name)\n  value = read_attribute(attr_name)\n\n  if value.is_a?(String) &amp;&amp; value.length &gt; 50\n    \"#{value[0, 50]}...\".inspect\n  elsif value.is_a?(Date) || value.is_a?(Time)\n    %Q(\"#{value.to_s(:db)}\")\n  elsif value.is_a?(Array) &amp;&amp; value.size &gt; 10\n    inspected = value.first(10).inspect\n    %Q(#{inspected[0...-1]}, ...])\n  else\n    value.inspect\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_names\"> <span class=\"method-name\">attribute_names</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of names for the attributes available on this object.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nperson = Person.new\nperson.attribute_names\n# =&gt; [\"id\", \"created_at\", \"updated_at\", \"name\", \"age\"]\n</pre> <div class=\"method-source-code\" id=\"attribute_names-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 271\ndef attribute_names\n  @attributes.keys\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_present-3F\"> <span class=\"method-name\">attribute_present?</span><span class=\"method-args\">(attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the specified <code>attribute</code> has been set by the user or by a database load and is neither <code>nil</code> nor <code>empty?</code> (the latter only applies to objects that respond to <code>empty?</code>, most notably Strings). Otherwise, <code>false</code>. Note that it always returns <code>true</code> with boolean attributes.</p> <pre class=\"ruby\">class Task &lt; ActiveRecord::Base\nend\n\ntask = Task.new(title: '', is_done: false)\ntask.attribute_present?(:title)   # =&gt; false\ntask.attribute_present?(:is_done) # =&gt; true\ntask.title = 'Buy milk'\ntask.is_done = true\ntask.attribute_present?(:title)   # =&gt; true\ntask.attribute_present?(:is_done) # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"attribute_present-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 334\ndef attribute_present?(attribute)\n  value = _read_attribute(attribute)\n  !value.nil? &amp;&amp; !(value.respond_to?(:empty?) &amp;&amp; value.empty?)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attributes\"> <span class=\"method-name\">attributes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash of all the attributes with their names as keys and the values of the attributes as values.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nperson = Person.create(name: 'Francesco', age: 22)\nperson.attributes\n# =&gt; {\"id\"=&gt;3, \"created_at\"=&gt;Sun, 21 Oct 2012 04:53:04, \"updated_at\"=&gt;Sun, 21 Oct 2012 04:53:04, \"name\"=&gt;\"Francesco\", \"age\"=&gt;22}\n</pre> <div class=\"method-source-code\" id=\"attributes-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 283\ndef attributes\n  @attributes.to_hash\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-has_attribute-3F\"> <span class=\"method-name\">has_attribute?</span><span class=\"method-args\">(attr_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the given attribute is in the attributes hash, otherwise <code>false</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nperson = Person.new\nperson.has_attribute?(:name)    # =&gt; true\nperson.has_attribute?('age')    # =&gt; true\nperson.has_attribute?(:nothing) # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"has_attribute-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 259\ndef has_attribute?(attr_name)\n  @attributes.key?(attr_name.to_s)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to-3F\"> <span class=\"method-name\">respond_to?</span><span class=\"method-args\">(name, include_private = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A Person object with a name attribute can ask <code>person.respond_to?(:name)</code>, <code>person.respond_to?(:name=)</code>, and <code>person.respond_to?(:name?)</code> which will all return <code>true</code>. It also define the attribute methods if they have not been generated.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nperson = Person.new\nperson.respond_to(:name)    # =&gt; true\nperson.respond_to(:name=)   # =&gt; true\nperson.respond_to(:name?)   # =&gt; true\nperson.respond_to('age')    # =&gt; true\nperson.respond_to('age=')   # =&gt; true\nperson.respond_to('age?')   # =&gt; true\nperson.respond_to(:nothing) # =&gt; false\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../activemodel/attributemethods#method-i-respond_to-3F\">ActiveModel::AttributeMethods#respond_to?</a> </div> <div class=\"method-source-code\" id=\"respond_to-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 235\ndef respond_to?(name, include_private = false)\n  return false unless super\n  name = name.to_s\n\n  # If the result is true then check for the select case.\n  # For queries selecting a subset of columns, return false for unselected columns.\n  # We check defined?(@attributes) not to issue warnings if called on objects that\n  # have been allocated but not yet initialized.\n  if defined?(@attributes) &amp;&amp; self.class.column_names.include?(name)\n    return has_attribute?(name)\n  end\n\n  return true\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributemethods/beforetypecast":"<h1 id=\"module-ActiveRecord::AttributeMethods::BeforeTypeCast\" class=\"module\"> module ActiveRecord::AttributeMethods::BeforeTypeCast </h1> <section class=\"description\"> <h1 id=\"module-ActiveRecord::AttributeMethods::BeforeTypeCast-label-Active+Record+Attribute+Methods+Before+Type+Cast\">Active Record Attribute Methods Before <a href=\"../type\">Type</a> Cast</h1> <p><code>ActiveRecord::AttributeMethods::BeforeTypeCast</code> provides a way to read the value of the attributes before typecasting and deserialization.</p> <pre class=\"ruby\">class Task &lt; ActiveRecord::Base\nend\n\ntask = Task.new(id: '1', completed_on: '2012-10-21')\ntask.id           # =&gt; 1\ntask.completed_on # =&gt; Sun, 21 Oct 2012\n\ntask.attributes_before_type_cast\n# =&gt; {\"id\"=&gt;\"1\", \"completed_on\"=&gt;\"2012-10-21\", ... }\ntask.read_attribute_before_type_cast('id')           # =&gt; \"1\"\ntask.read_attribute_before_type_cast('completed_on') # =&gt; \"2012-10-21\"\n</pre> <p>In addition to <a href=\"beforetypecast#method-i-read_attribute_before_type_cast\">read_attribute_before_type_cast</a> and <a href=\"beforetypecast#method-i-attributes_before_type_cast\">attributes_before_type_cast</a>, it declares a method for all attributes with the <code>*_before_type_cast</code> suffix.</p> <pre class=\"ruby\">task.id_before_type_cast           # =&gt; \"1\"\ntask.completed_on_before_type_cast # =&gt; \"2012-10-21\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attributes_before_type_cast\"> <span class=\"method-name\">attributes_before_type_cast</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash of attributes before typecasting and deserialization.</p> <pre class=\"ruby\">class Task &lt; ActiveRecord::Base\nend\n\ntask = Task.new(title: nil, is_done: true, completed_on: '2012-10-21')\ntask.attributes\n# =&gt; {\"id\"=&gt;nil, \"title\"=&gt;nil, \"is_done\"=&gt;true, \"completed_on\"=&gt;Sun, 21 Oct 2012, \"created_at\"=&gt;nil, \"updated_at\"=&gt;nil}\ntask.attributes_before_type_cast\n# =&gt; {\"id\"=&gt;nil, \"title\"=&gt;nil, \"is_done\"=&gt;true, \"completed_on\"=&gt;\"2012-10-21\", \"created_at\"=&gt;nil, \"updated_at\"=&gt;nil}\n</pre> <div class=\"method-source-code\" id=\"attributes_before_type_cast-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/before_type_cast.rb, line 60\ndef attributes_before_type_cast\n  @attributes.values_before_type_cast\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read_attribute_before_type_cast\"> <span class=\"method-name\">read_attribute_before_type_cast</span><span class=\"method-args\">(attr_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the value of the attribute identified by <code>attr_name</code> before typecasting and deserialization.</p> <pre class=\"ruby\">class Task &lt; ActiveRecord::Base\nend\n\ntask = Task.new(id: '1', completed_on: '2012-10-21')\ntask.read_attribute('id')                            # =&gt; 1\ntask.read_attribute_before_type_cast('id')           # =&gt; '1'\ntask.read_attribute('completed_on')                  # =&gt; Sun, 21 Oct 2012\ntask.read_attribute_before_type_cast('completed_on') # =&gt; \"2012-10-21\"\ntask.read_attribute_before_type_cast(:completed_on)  # =&gt; \"2012-10-21\"\n</pre> <div class=\"method-source-code\" id=\"read_attribute_before_type_cast-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/before_type_cast.rb, line 46\ndef read_attribute_before_type_cast(attr_name)\n  @attributes[attr_name.to_s].value_before_type_cast\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributemethods/classmethods":"<h1 id=\"module-ActiveRecord::AttributeMethods::ClassMethods\" class=\"module\"> module ActiveRecord::AttributeMethods::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_method-3F\"> <span class=\"method-name\">attribute_method?</span><span class=\"method-args\">(attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if <code>attribute</code> is an attribute method and table exists, <code>false</code> otherwise.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nPerson.attribute_method?('name')   # =&gt; true\nPerson.attribute_method?(:age=)    # =&gt; true\nPerson.attribute_method?(:nothing) # =&gt; false\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"attribute_method-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 174\ndef attribute_method?(attribute)\n  super || (table_exists? &amp;&amp; column_names.include?(attribute.to_s.sub(/=$/, '')))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_names\"> <span class=\"method-name\">attribute_names</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of column names as strings if it's not an abstract class and table exists. Otherwise it returns an empty array.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nPerson.attribute_names\n# =&gt; [\"id\", \"created_at\", \"updated_at\", \"name\", \"age\"]\n</pre> <div class=\"method-source-code\" id=\"attribute_names-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 186\ndef attribute_names\n  @attribute_names ||= if !abstract_class? &amp;&amp; table_exists?\n      column_names\n    else\n      []\n    end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-class_method_defined_within-3F\"> <span class=\"method-name\">class_method_defined_within?</span><span class=\"method-args\">(name, klass, superklass = klass.superclass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"class_method_defined_within-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 153\ndef class_method_defined_within?(name, klass, superklass = klass.superclass) # :nodoc\n  if klass.respond_to?(name, true)\n    if superklass.respond_to?(name, true)\n      klass.method(name).owner != superklass.method(name).owner\n    else\n      true\n    end\n  else\n    false\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column_for_attribute\"> <span class=\"method-name\">column_for_attribute</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the column object for the named attribute. Returns nil if the named attribute does not exist.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\nend\n\nperson = Person.new\nperson.column_for_attribute(:name) # the result depends on the ConnectionAdapter\n# =&gt; #&lt;ActiveRecord::ConnectionAdapters::Column:0x007ff4ab083980 @name=\"name\", @sql_type=\"varchar(255)\", @null=true, ...&gt;\n\nperson.column_for_attribute(:nothing)\n# =&gt; nil\n</pre> <div class=\"method-source-code\" id=\"column_for_attribute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 206\n      def column_for_attribute(name)\n        column = columns_hash[name.to_s]\n        if column.nil?\n          ActiveSupport::Deprecation.warn(\"            `#column_for_attribute` will return a null object for non-existent\n            columns in Rails 5. Use `#has_attribute?` if you need to check for\n            an attribute's existence.\n\".squish)\n        end\n        column\n      end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dangerous_class_method-3F\"> <span class=\"method-name\">dangerous_class_method?</span><span class=\"method-args\">(method_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A class method is 'dangerous' if it is already (re)defined by Active Record, but not by any ancestors. (So 'puts' is not dangerous but 'new' is.)</p> <div class=\"method-source-code\" id=\"dangerous_class_method-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 149\ndef dangerous_class_method?(method_name)\n  BLACKLISTED_CLASS_METHODS.include?(method_name.to_s) || class_method_defined_within?(method_name, Base)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-instance_method_already_implemented-3F\"> <span class=\"method-name\">instance_method_already_implemented?</span><span class=\"method-args\">(method_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Raises a <code>ActiveRecord::DangerousAttributeError</code> exception when an Active Record method is defined in the model, otherwise <code>false</code>.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  def save\n    'already defined by Active Record'\n  end\nend\n\nPerson.instance_method_already_implemented?(:save)\n# =&gt; ActiveRecord::DangerousAttributeError: save is defined by ActiveRecord\n\nPerson.instance_method_already_implemented?(:name)\n# =&gt; false\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"instance_method_already_implemented-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods.rb, line 113\ndef instance_method_already_implemented?(method_name)\n  if dangerous_attribute_method?(method_name)\n    raise DangerousAttributeError, \"#{method_name} is defined by Active Record. Check to make sure that you don't have an attribute or method with the same name.\"\n  end\n\n  if superclass == Base\n    super\n  else\n    # If ThisClass &lt; ... &lt; SomeSuperClass &lt; ... &lt; Base and SomeSuperClass\n    # defines its own attribute method, then we don't want to overwrite that.\n    defined = method_defined_within?(method_name, superclass, Base) &amp;&amp;\n      ! superclass.instance_method(method_name).owner.is_a?(GeneratedAttributeMethods)\n    defined || super\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributemethods/primarykey":"<h1 id=\"module-ActiveRecord::AttributeMethods::PrimaryKey\" class=\"module\"> module ActiveRecord::AttributeMethods::PrimaryKey </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-id\"> <span class=\"method-name\">id</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the primary key value.</p> <div class=\"method-source-code\" id=\"id-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 17\ndef id\n  if pk = self.class.primary_key\n    sync_with_transaction_state\n    _read_attribute(pk)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-id-3D\"> <span class=\"method-name\">id=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the primary key value.</p> <div class=\"method-source-code\" id=\"id-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 25\ndef id=(value)\n  sync_with_transaction_state\n  write_attribute(self.class.primary_key, value) if self.class.primary_key\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-id-3F\"> <span class=\"method-name\">id?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Queries the primary key value.</p> <div class=\"method-source-code\" id=\"id-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 31\ndef id?\n  sync_with_transaction_state\n  query_attribute(self.class.primary_key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-id_before_type_cast\"> <span class=\"method-name\">id_before_type_cast</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the primary key value before type cast.</p> <div class=\"method-source-code\" id=\"id_before_type_cast-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 37\ndef id_before_type_cast\n  sync_with_transaction_state\n  read_attribute_before_type_cast(self.class.primary_key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-id_was\"> <span class=\"method-name\">id_was</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the primary key previous value.</p> <div class=\"method-source-code\" id=\"id_was-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 43\ndef id_was\n  sync_with_transaction_state\n  attribute_was(self.class.primary_key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_key\"> <span class=\"method-name\">to_key</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns this record's primary key value wrapped in an <a href=\"../../array\">Array</a> if one is available.</p> <div class=\"method-source-code\" id=\"to_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 10\ndef to_key\n  sync_with_transaction_state\n  key = self.id\n  [key] if key\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_method-3F\"> <span class=\"method-name\">attribute_method?</span><span class=\"method-args\">(attr_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"attribute_method-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 50\ndef attribute_method?(attr_name)\n  attr_name == 'id' || super\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributemethods/primarykey/classmethods":"<h1 id=\"module-ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods\" class=\"module\"> module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ID_ATTRIBUTE_METHODS\">ID_ATTRIBUTE_METHODS </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dangerous_attribute_method-3F\"> <span class=\"method-name\">dangerous_attribute_method?</span><span class=\"method-args\">(method_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"dangerous_attribute_method-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 65\ndef dangerous_attribute_method?(method_name)\n  super &amp;&amp; !ID_ATTRIBUTE_METHODS.include?(method_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-define_method_attribute\"> <span class=\"method-name\">define_method_attribute</span><span class=\"method-args\">(attr_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"define_method_attribute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 55\ndef define_method_attribute(attr_name)\n  super\n\n  if attr_name == primary_key &amp;&amp; attr_name != 'id'\n    generated_attribute_methods.send(:alias_method, :id, primary_key)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-primary_key\"> <span class=\"method-name\">primary_key</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines the primary key field – can be overridden in subclasses. Overwriting will negate any effect of the <code>primary_key_prefix_type</code> setting, though.</p> <div class=\"method-source-code\" id=\"primary_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 72\ndef primary_key\n  @primary_key = reset_primary_key unless defined? @primary_key\n  @primary_key\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-primary_key-3D\"> <span class=\"method-name\">primary_key=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the name of the primary key column.</p> <pre class=\"ruby\">class Project &lt; ActiveRecord::Base\n  self.primary_key = 'sysid'\nend\n</pre> <p>You can also define the <code>primary_key</code> method yourself:</p> <pre class=\"ruby\">class Project &lt; ActiveRecord::Base\n  def self.primary_key\n    'foo_' + super\n  end\nend\n\nProject.primary_key # =&gt; \"foo_id\"\n</pre> <div class=\"method-source-code\" id=\"primary_key-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 120\ndef primary_key=(value)\n  @primary_key        = value &amp;&amp; value.to_s\n  @quoted_primary_key = nil\n  @attributes_builder = nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_primary_key\"> <span class=\"method-name\">quoted_primary_key</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a quoted version of the primary key name, used to construct SQL statements.</p> <div class=\"method-source-code\" id=\"quoted_primary_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/primary_key.rb, line 79\ndef quoted_primary_key\n  @quoted_primary_key ||= connection.quote_column_name(primary_key)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributemethods/read":"<h1 id=\"module-ActiveRecord::AttributeMethods::Read\" class=\"module\"> module ActiveRecord::AttributeMethods::Read </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ID\">ID </dt>\n\n<dt id=\"ReaderMethodCache\">ReaderMethodCache </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read_attribute\"> <span class=\"method-name\">read_attribute</span><span class=\"method-args\">(attr_name, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the value of the attribute identified by <code>attr_name</code> after it has been typecast (for example, “2004-12-12” in a date column is cast to a date object, like Date.new(2004, 12, 12)).</p> <div class=\"method-source-code\" id=\"read_attribute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/read.rb, line 84\ndef read_attribute(attr_name, &amp;block)\n  name = attr_name.to_s\n  name = self.class.primary_key if name == ID\n  _read_attribute(name, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributemethods/serialization/classmethods":"<h1 id=\"module-ActiveRecord::AttributeMethods::Serialization::ClassMethods\" class=\"module\"> module ActiveRecord::AttributeMethods::Serialization::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serialize\"> <span class=\"method-name\">serialize</span><span class=\"method-args\">(attr_name, class_name_or_coder = Object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If you have an attribute that needs to be saved to the database as an object, and retrieved as the same object, then specify the name of that attribute using this method and it will be handled automatically. The serialization is done through YAML. If <code>class_name</code> is specified, the serialized object must be of that class on assignment and retrieval. Otherwise <code>SerializationTypeMismatch</code> will be raised.</p> <h4 id=\"method-i-serialize-label-Parameters\">Parameters</h4> <ul>\n<li> <p><code>attr_name</code> - The field name that should be serialized.</p> </li>\n<li> <p><code>class_name_or_coder</code> - Optional, a coder object, which responds to `.load` / `.dump` or a class name that the object type should be equal to.</p> </li>\n</ul> <h4 id=\"method-i-serialize-label-Example\">Example</h4> <pre class=\"ruby\"># Serialize a preferences attribute.\nclass User &lt; ActiveRecord::Base\n  serialize :preferences\nend\n\n# Serialize preferences using JSON as coder.\nclass User &lt; ActiveRecord::Base\n  serialize :preferences, JSON\nend\n\n# Serialize preferences as Hash using YAML coder.\nclass User &lt; ActiveRecord::Base\n  serialize :preferences, Hash\nend\n</pre> <div class=\"method-source-code\" id=\"serialize-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/serialization.rb, line 38\ndef serialize(attr_name, class_name_or_coder = Object)\n  # When ::JSON is used, force it to go through the Active Support JSON encoder\n  # to ensure special objects (e.g. Active Record models) are dumped correctly\n  # using the #as_json hook.\n  coder = if class_name_or_coder == ::JSON\n            Coders::JSON\n          elsif [:load, :dump].all? { |x| class_name_or_coder.respond_to?(x) }\n            class_name_or_coder\n          else\n            Coders::YAMLColumn.new(class_name_or_coder)\n          end\n\n  decorate_attribute_type(attr_name, :serialize) do |type|\n    Type::Serialized.new(type, coder)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serialized_attributes\"> <span class=\"method-name\">serialized_attributes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"serialized_attributes-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/serialization.rb, line 55\n        def serialized_attributes\n          ActiveSupport::Deprecation.warn(\"            `serialized_attributes` is deprecated without replacement, and will\n            be removed in Rails 5.0.\n\".squish)\n\n          @serialized_attributes ||= Hash[\n            columns.select { |t| t.cast_type.is_a?(Type::Serialized) }.map { |c|\n              [c.name, c.cast_type.coder]\n            }\n          ]\n        end</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/attributemethods/write":"<h1 id=\"module-ActiveRecord::AttributeMethods::Write\" class=\"module\"> module ActiveRecord::AttributeMethods::Write </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"WriterMethodCache\">WriterMethodCache </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-raw_write_attribute\"> <span class=\"method-name\">raw_write_attribute</span><span class=\"method-args\">(attr_name, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"raw_write_attribute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/write.rb, line 59\ndef raw_write_attribute(attr_name, value)\n  write_attribute_with_type_cast(attr_name, value, false)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write_attribute\"> <span class=\"method-name\">write_attribute</span><span class=\"method-args\">(attr_name, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Updates the attribute identified by <code>attr_name</code> with the specified <code>value</code>. Empty strings for fixnum and float columns are turned into <code>nil</code>.</p> <div class=\"method-source-code\" id=\"write_attribute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/attribute_methods/write.rb, line 55\ndef write_attribute(attr_name, value)\n  write_attribute_with_type_cast(attr_name, value, true)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/autosaveassociation":"<h1 id=\"module-ActiveRecord::AutosaveAssociation\" class=\"module\"> module ActiveRecord::AutosaveAssociation </h1> <section class=\"description\"> <h1 id=\"module-ActiveRecord::AutosaveAssociation-label-Active+Record+Autosave+Association\">Active Record Autosave Association</h1> <p><code>AutosaveAssociation</code> is a module that takes care of automatically saving associated records when their parent is saved. In addition to saving, it also destroys any associated records that were marked for destruction. (See <code>mark_for_destruction</code> and <code>marked_for_destruction?</code>).</p> <p>Saving of the parent, its associations, and the destruction of marked associations, all happen inside a transaction. This should never leave the database in an inconsistent state.</p> <p>If validations for any of the associations fail, their error messages will be applied to the parent.</p> <p>Note that it also means that associations marked for destruction won't be destroyed directly. They will however still be marked for destruction.</p> <p>Note that <code>autosave: false</code> is not same as not declaring <code>:autosave</code>. When the <code>:autosave</code> option is not present then new association records are saved but the updated association records are not saved.</p> <h2 id=\"module-ActiveRecord::AutosaveAssociation-label-Validation\">Validation</h2> <p>Children records are validated unless <code>:validate</code> is <code>false</code>.</p> <h2 id=\"module-ActiveRecord::AutosaveAssociation-label-Callbacks\"><a href=\"callbacks\">Callbacks</a></h2> <p>Association with autosave option defines several callbacks on your model (before_save, after_create, after_update). Please note that callbacks are executed in the order they were defined in model. You should avoid modifying the association content, before autosave callbacks are executed. Placing your callbacks after associations is usually a good practice.</p> <h3 id=\"module-ActiveRecord::AutosaveAssociation-label-One-to-one+Example\">One-to-one Example</h3> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  has_one :author, autosave: true\nend\n</pre> <p>Saving changes to the parent and its associated model can now be performed automatically <em>and</em> atomically:</p> <pre class=\"ruby\">post = Post.find(1)\npost.title       # =&gt; \"The current global position of migrating ducks\"\npost.author.name # =&gt; \"alloy\"\n\npost.title = \"On the migration of ducks\"\npost.author.name = \"Eloy Duran\"\n\npost.save\npost.reload\npost.title       # =&gt; \"On the migration of ducks\"\npost.author.name # =&gt; \"Eloy Duran\"\n</pre> <p>Destroying an associated model, as part of the parent's save action, is as simple as marking it for destruction:</p> <pre class=\"ruby\">post.author.mark_for_destruction\npost.author.marked_for_destruction? # =&gt; true\n</pre> <p>Note that the model is <em>not</em> yet removed from the database:</p> <pre class=\"ruby\">id = post.author.id\nAuthor.find_by(id: id).nil? # =&gt; false\n\npost.save\npost.reload.author # =&gt; nil\n</pre> <p>Now it <em>is</em> removed from the database:</p> <pre class=\"ruby\">Author.find_by(id: id).nil? # =&gt; true\n</pre> <h3 id=\"module-ActiveRecord::AutosaveAssociation-label-One-to-many+Example\">One-to-many Example</h3> <p>When <code>:autosave</code> is not declared new children are saved when their parent is saved:</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  has_many :comments # :autosave option is not declared\nend\n\npost = Post.new(title: 'ruby rocks')\npost.comments.build(body: 'hello world')\npost.save # =&gt; saves both post and comment\n\npost = Post.create(title: 'ruby rocks')\npost.comments.build(body: 'hello world')\npost.save # =&gt; saves both post and comment\n\npost = Post.create(title: 'ruby rocks')\npost.comments.create(body: 'hello world')\npost.save # =&gt; saves both post and comment\n</pre> <p>When <code>:autosave</code> is true all children are saved, no matter whether they are new records or not:</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  has_many :comments, autosave: true\nend\n\npost = Post.create(title: 'ruby rocks')\npost.comments.create(body: 'hello world')\npost.comments[0].body = 'hi everyone'\npost.comments.build(body: \"good morning.\")\npost.title += \"!\"\npost.save # =&gt; saves both post and comments.\n</pre> <p>Destroying one of the associated models as part of the parent's save action is as simple as marking it for destruction:</p> <pre class=\"ruby\">post.comments # =&gt; [#&lt;Comment id: 1, ...&gt;, #&lt;Comment id: 2, ...]&gt;\npost.comments[1].mark_for_destruction\npost.comments[1].marked_for_destruction? # =&gt; true\npost.comments.length # =&gt; 2\n</pre> <p>Note that the model is <em>not</em> yet removed from the database:</p> <pre class=\"ruby\">id = post.comments.last.id\nComment.find_by(id: id).nil? # =&gt; false\n\npost.save\npost.reload.comments.length # =&gt; 1\n</pre> <p>Now it <em>is</em> removed from the database:</p> <pre class=\"ruby\">Comment.find_by(id: id).nil? # =&gt; true\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-changed_for_autosave-3F\"> <span class=\"method-name\">changed_for_autosave?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns whether or not this record has been changed in any way (including whether any of its nested autosave associations are likewise changed)</p> <div class=\"method-source-code\" id=\"changed_for_autosave-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/autosave_association.rb, line 261\ndef changed_for_autosave?\n  new_record? || changed? || marked_for_destruction? || nested_records_changed_for_autosave?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroyed_by_association\"> <span class=\"method-name\">destroyed_by_association</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the association for the parent being destroyed.</p> <p>Used to avoid updating the counter cache unnecessarily.</p> <div class=\"method-source-code\" id=\"destroyed_by_association-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/autosave_association.rb, line 255\ndef destroyed_by_association\n  @destroyed_by_association\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroyed_by_association-3D\"> <span class=\"method-name\">destroyed_by_association=</span><span class=\"method-args\">(reflection)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Records the association that is being destroyed and destroying this record in the process.</p> <div class=\"method-source-code\" id=\"destroyed_by_association-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/autosave_association.rb, line 248\ndef destroyed_by_association=(reflection)\n  @destroyed_by_association = reflection\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mark_for_destruction\"> <span class=\"method-name\">mark_for_destruction</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Marks this record to be destroyed as part of the parents save transaction. This does <em>not</em> actually destroy the record instantly, rather child record will be destroyed when <code>parent.save</code> is called.</p> <p>Only useful if the <code>:autosave</code> option on the parent is enabled for this associated model.</p> <div class=\"method-source-code\" id=\"mark_for_destruction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/autosave_association.rb, line 235\ndef mark_for_destruction\n  @marked_for_destruction = true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-marked_for_destruction-3F\"> <span class=\"method-name\">marked_for_destruction?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns whether or not this record will be destroyed as part of the parents save transaction.</p> <p>Only useful if the <code>:autosave</code> option on the parent is enabled for this associated model.</p> <div class=\"method-source-code\" id=\"marked_for_destruction-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/autosave_association.rb, line 242\ndef marked_for_destruction?\n  @marked_for_destruction\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reload\"> <span class=\"method-name\">reload</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reloads the attributes of the object as usual and clears <code>marked_for_destruction</code> flag.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"reload-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/autosave_association.rb, line 224\ndef reload(options = nil)\n  @marked_for_destruction = false\n  @destroyed_by_association = nil\n  super\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/base":"<h1 id=\"class-ActiveRecord::Base\" class=\"class\"> class ActiveRecord::Base </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"core\">ActiveRecord::Core</a>, <a class=\"include\" href=\"persistence\">ActiveRecord::Persistence</a>, <a class=\"include\" href=\"readonlyattributes\">ActiveRecord::ReadonlyAttributes</a>, <a class=\"include\" href=\"modelschema\">ActiveRecord::ModelSchema</a>, <a class=\"include\" href=\"inheritance\">ActiveRecord::Inheritance</a>, <a class=\"include\" href=\"scoping\">ActiveRecord::Scoping</a>, <span class=\"include\">ActiveRecord::Sanitization</span>, <a class=\"include\" href=\"attributeassignment\">ActiveRecord::AttributeAssignment</a>, <a class=\"include\" href=\"../activemodel/conversion\">ActiveModel::Conversion</a>, <a class=\"include\" href=\"integration\">ActiveRecord::Integration</a>, <a class=\"include\" href=\"validations\">ActiveRecord::Validations</a>, <a class=\"include\" href=\"countercache\">ActiveRecord::CounterCache</a>, <a class=\"include\" href=\"locking/optimistic\">ActiveRecord::Locking::Optimistic</a>, <a class=\"include\" href=\"locking/pessimistic\">ActiveRecord::Locking::Pessimistic</a>, <a class=\"include\" href=\"attributemethods\">ActiveRecord::AttributeMethods</a>, <a class=\"include\" href=\"callbacks\">ActiveRecord::Callbacks</a>, <a class=\"include\" href=\"timestamp\">ActiveRecord::Timestamp</a>, <a class=\"include\" href=\"associations\">ActiveRecord::Associations</a>, <a class=\"include\" href=\"../activemodel/securepassword\">ActiveModel::SecurePassword</a>, <a class=\"include\" href=\"autosaveassociation\">ActiveRecord::AutosaveAssociation</a>, <a class=\"include\" href=\"nestedattributes\">ActiveRecord::NestedAttributes</a>, <a class=\"include\" href=\"aggregations\">ActiveRecord::Aggregations</a>, <a class=\"include\" href=\"transactions\">ActiveRecord::Transactions</a>, <a class=\"include\" href=\"notouching\">ActiveRecord::NoTouching</a>, <a class=\"include\" href=\"reflection\">ActiveRecord::Reflection</a>, <a class=\"include\" href=\"attributemethods/serialization\">ActiveRecord::AttributeMethods::Serialization</a>, <a class=\"include\" href=\"store\">ActiveRecord::Store</a>\n</dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActiveRecord::Base-label-Active+Record\">Active Record</h1> <p>Active Record objects don't specify their attributes directly, but rather infer them from the table definition with which they're linked. Adding, removing, and changing attributes and their type is done directly in the database. Any change is instantly reflected in the Active Record objects. The mapping that binds a given Active Record class to a certain database table will happen automatically in most common cases, but can be overwritten for the uncommon ones.</p> <p>See the mapping rules in table_name and the full example in <span>files/activerecord/README_rdoc.html</span> for more insight.</p> <h2 id=\"class-ActiveRecord::Base-label-Creation\">Creation</h2> <p>Active Records accept constructor parameters either in a hash or as a block. The hash method is especially useful when you're receiving the data from somewhere else, like an HTTP request. It works like this:</p> <pre class=\"ruby\">user = User.new(name: \"David\", occupation: \"Code Artist\")\nuser.name # =&gt; \"David\"\n</pre> <p>You can also use block initialization:</p> <pre class=\"ruby\">user = User.new do |u|\n  u.name = \"David\"\n  u.occupation = \"Code Artist\"\nend\n</pre> <p>And of course you can just create a bare object and specify the attributes after the fact:</p> <pre class=\"ruby\">user = User.new\nuser.name = \"David\"\nuser.occupation = \"Code Artist\"\n</pre> <h2 id=\"class-ActiveRecord::Base-label-Conditions\">Conditions</h2> <p>Conditions can either be specified as a string, array, or hash representing the WHERE-part of an SQL statement. The array form is to be used when the condition input is tainted and requires sanitization. The string form can be used for statements that don't involve tainted data. The hash form works much like the array form, except only equality and range is possible. Examples:</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  def self.authenticate_unsafely(user_name, password)\n    where(\"user_name = '#{user_name}' AND password = '#{password}'\").first\n  end\n\n  def self.authenticate_safely(user_name, password)\n    where(\"user_name = ? AND password = ?\", user_name, password).first\n  end\n\n  def self.authenticate_safely_simply(user_name, password)\n    where(user_name: user_name, password: password).first\n  end\nend\n</pre> <p>The <code>authenticate_unsafely</code> method inserts the parameters directly into the query and is thus susceptible to SQL-injection attacks if the <code>user_name</code> and <code>password</code> parameters come directly from an HTTP request. The <code>authenticate_safely</code> and <code>authenticate_safely_simply</code> both will sanitize the <code>user_name</code> and <code>password</code> before inserting them in the query, which will ensure that an attacker can't escape the query and fake the login (or worse).</p> <p>When using multiple parameters in the conditions, it can easily become hard to read exactly what the fourth or fifth question mark is supposed to represent. In those cases, you can resort to named bind variables instead. That's done by replacing the question marks with symbols and supplying a hash with values for the matching symbol keys:</p> <pre class=\"ruby\">Company.where(\n  \"id = :id AND name = :name AND division = :division AND created_at &gt; :accounting_date\",\n  { id: 3, name: \"37signals\", division: \"First\", accounting_date: '2005-01-01' }\n).first\n</pre> <p>Similarly, a simple hash without a statement will generate conditions based on equality with the SQL AND operator. For instance:</p> <pre class=\"ruby\">Student.where(first_name: \"Harvey\", status: 1)\nStudent.where(params[:student])\n</pre> <p>A range may be used in the hash to use the SQL BETWEEN operator:</p> <pre class=\"ruby\">Student.where(grade: 9..12)\n</pre> <p>An array may be used in the hash to use the SQL IN operator:</p> <pre class=\"ruby\">Student.where(grade: [9,11,12])\n</pre> <p>When joining tables, nested hashes or keys written in the form 'table_name.column_name' can be used to qualify the table name of a particular condition. For instance:</p> <pre class=\"ruby\">Student.joins(:schools).where(schools: { category: 'public' })\nStudent.joins(:schools).where('schools.category' =&gt; 'public' )\n</pre> <h2 id=\"class-ActiveRecord::Base-label-Overwriting+default+accessors\">Overwriting default accessors</h2> <p>All column values are automatically available through basic accessors on the Active Record object, but sometimes you want to specialize this behavior. This can be done by overwriting the default accessors (using the same name as the attribute) and calling <code>super</code> to actually change things.</p> <pre class=\"ruby\">class Song &lt; ActiveRecord::Base\n  # Uses an integer of seconds to hold the length of the song\n\n  def length=(minutes)\n    super(minutes.to_i * 60)\n  end\n\n  def length\n    super / 60\n  end\nend\n</pre> <p>You can alternatively use <code>self[:attribute]=(value)</code> and <code>self[:attribute]</code> or <code>write_attribute(:attribute,\nvalue)</code> and <code>read_attribute(:attribute)</code>.</p> <h2 id=\"class-ActiveRecord::Base-label-Attribute+query+methods\">Attribute query methods</h2> <p>In addition to the basic accessors, query methods are also automatically available on the Active Record object. Query methods allow you to test whether an attribute value is present. For numeric values, present is defined as non-zero.</p> <p>For example, an Active Record User with the <code>name</code> attribute has a <code>name?</code> method that you can call to determine whether the user has a name:</p> <pre class=\"ruby\">user = User.new(name: \"David\")\nuser.name? # =&gt; true\n\nanonymous = User.new(name: \"\")\nanonymous.name? # =&gt; false\n</pre> <h2 id=\"class-ActiveRecord::Base-label-Accessing+attributes+before+they+have+been+typecasted\">Accessing attributes before they have been typecasted</h2> <p>Sometimes you want to be able to read the raw attribute data without having the column-determined typecast run its course first. That can be done by using the <code>&lt;attribute&gt;_before_type_cast</code> accessors that all attributes have. For example, if your Account model has a <code>balance</code> attribute, you can call <code>account.balance_before_type_cast</code> or <code>account.id_before_type_cast</code>.</p> <p>This is especially useful in validation situations where the user might supply a string for an integer field and you want to display the original string back in an error message. Accessing the attribute normally would typecast the string to 0, which isn't what you want.</p> <h2 id=\"class-ActiveRecord::Base-label-Dynamic+attribute-based+finders\">Dynamic attribute-based finders</h2> <p>Dynamic attribute-based finders are a mildly deprecated way of getting (and/or creating) objects by simple queries without turning to SQL. They work by appending the name of an attribute to <code>find_by_</code> like <code>Person.find_by_user_name</code>. Instead of writing <code>Person.find_by(user_name: user_name)</code>, you can use <code>Person.find_by_user_name(user_name)</code>.</p> <p>It's possible to add an exclamation point (!) on the end of the dynamic finders to get them to raise an <code>ActiveRecord::RecordNotFound</code> error if they do not return any records, like <code>Person.find_by_last_name!</code>.</p> <p>It's also possible to use multiple attributes in the same find by separating them with “<em>and</em>”.</p> <pre class=\"ruby\">Person.find_by(user_name: user_name, password: password)\nPerson.find_by_user_name_and_password(user_name, password) # with dynamic finder\n</pre> <p>It's even possible to call these dynamic finder methods on relations and named scopes.</p> <pre class=\"ruby\">Payment.order(\"created_on\").find_by_amount(50)\n</pre> <h2 id=\"class-ActiveRecord::Base-label-Saving+arrays-2C+hashes-2C+and+other+non-mappable+objects+in+text+columns\">Saving arrays, hashes, and other non-mappable objects in text columns</h2> <p>Active Record can serialize any object in text columns using YAML. To do so, you must specify this with a call to the class method <code>serialize</code>. This makes it possible to store arrays, hashes, and other non-mappable objects without doing any additional work.</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  serialize :preferences\nend\n\nuser = User.create(preferences: { \"background\" =&gt; \"black\", \"display\" =&gt; large })\nUser.find(user.id).preferences # =&gt; { \"background\" =&gt; \"black\", \"display\" =&gt; large }\n</pre> <p>You can also specify a class option as the second parameter that'll raise an exception if a serialized object is retrieved as a descendant of a class not in the hierarchy.</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  serialize :preferences, Hash\nend\n\nuser = User.create(preferences: %w( one two three ))\nUser.find(user.id).preferences    # raises SerializationTypeMismatch\n</pre> <p>When you specify a class option, the default value for that attribute will be a new instance of that class.</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  serialize :preferences, OpenStruct\nend\n\nuser = User.new\nuser.preferences.theme_color = \"red\"\n</pre> <h2 id=\"class-ActiveRecord::Base-label-Single+table+inheritance\">Single table inheritance</h2> <p>Active Record allows inheritance by storing the name of the class in a column that is named “type” by default. See <a href=\"inheritance\">ActiveRecord::Inheritance</a> for more details.</p> <h2 id=\"class-ActiveRecord::Base-label-Connection+to+multiple+databases+in+different+models\">Connection to multiple databases in different models</h2> <p>Connections are usually created through ActiveRecord::Base.establish_connection and retrieved by ActiveRecord::Base.connection. All classes inheriting from <a href=\"base\">ActiveRecord::Base</a> will use this connection. But you can also set a class-specific connection. For example, if Course is an <a href=\"base\">ActiveRecord::Base</a>, but resides in a different database, you can just say <code>Course.establish_connection</code> and Course and all of its subclasses will use this connection instead.</p> <p>This feature is implemented by keeping a connection pool in <a href=\"base\">ActiveRecord::Base</a> that is a <a href=\"../hash\">Hash</a> indexed by the class. If a connection is requested, the retrieve_connection method will go up the class-hierarchy until a connection is found in the connection pool.</p> <h2 id=\"class-ActiveRecord::Base-label-Exceptions\">Exceptions</h2> <ul>\n<li> <p><a href=\"activerecorderror\">ActiveRecordError</a> - Generic error class and superclass of all other errors raised by Active Record.</p> </li>\n<li> <p><a href=\"adapternotspecified\">AdapterNotSpecified</a> - The configuration hash used in <code>establish_connection</code> didn't include an <code>:adapter</code> key.</p> </li>\n<li> <p><a href=\"adapternotfound\">AdapterNotFound</a> - The <code>:adapter</code> key used in <code>establish_connection</code> specified a non-existent adapter (or a bad spelling of an existing one).</p> </li>\n<li> <p><a href=\"associationtypemismatch\">AssociationTypeMismatch</a> - The object assigned to the association wasn't of the type specified in the association definition.</p> </li>\n<li> <p><a href=\"attributeassignmenterror\">AttributeAssignmentError</a> - An error occurred while doing a mass assignment through the <code>attributes=</code> method. You can inspect the <code>attribute</code> property of the exception object to determine which attribute triggered the error.</p> </li>\n<li> <p><a href=\"connectionnotestablished\">ConnectionNotEstablished</a> - No connection has been established. Use <code>establish_connection</code> before querying.</p> </li>\n<li> <p><a href=\"multiparameterassignmenterrors\">MultiparameterAssignmentErrors</a> - Collection of errors that occurred during a mass assignment using the <code>attributes=</code> method. The <code>errors</code> property of this exception contains an array of <a href=\"attributeassignmenterror\">AttributeAssignmentError</a> objects that should be inspected to determine which attributes triggered the errors.</p> </li>\n<li> <p><a href=\"recordinvalid\">RecordInvalid</a> - raised by save! and create! when the record is invalid.</p> </li>\n<li> <p><a href=\"recordnotfound\">RecordNotFound</a> - No record responded to the <code>find</code> method. Either the row with the given ID doesn't exist or the row didn't meet the additional restrictions. Some <code>find</code> calls do not raise this exception to signal nothing was found, please check its documentation for further details.</p> </li>\n<li> <p><a href=\"serializationtypemismatch\">SerializationTypeMismatch</a> - The serialized object wasn't of the class specified as the second parameter.</p> </li>\n<li> <p><a href=\"statementinvalid\">StatementInvalid</a> - The database server rejected the SQL statement. The precise error is added in the message.</p> </li>\n</ul> <p><strong>Note</strong>: The attributes listed are class-level attributes (accessible from both the class and instance level). So it's possible to assign a logger to the class through <code>Base.logger=</code> which will then be used by all instances in the current object space.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/batches":"<h1 id=\"module-ActiveRecord::Batches\" class=\"module\"> module ActiveRecord::Batches </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_each\"> <span class=\"method-name\">find_each</span><span class=\"method-args\">(options = {}) { |record| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Looping through a collection of records from the database (using the <code>all</code> method, for example) is very inefficient since it will try to instantiate all the objects at once.</p> <p>In that case, batch processing methods allow you to work with the records in batches, thereby greatly reducing memory consumption.</p> <p>The <a href=\"batches#method-i-find_each\">find_each</a> method uses <a href=\"batches#method-i-find_in_batches\">find_in_batches</a> with a batch size of 1000 (or as specified by the <code>:batch_size</code> option).</p> <pre class=\"ruby\">Person.find_each do |person|\n  person.do_awesome_stuff\nend\n\nPerson.where(\"age &gt; 21\").find_each do |person|\n  person.party_all_night!\nend\n</pre> <p>If you do not provide a block to <a href=\"batches#method-i-find_each\">find_each</a>, it will return an Enumerator for chaining with other methods:</p> <pre class=\"ruby\">Person.find_each.with_index do |person, index|\n  person.award_trophy(index + 1)\nend\n</pre> <h4 id=\"method-i-find_each-label-Options\">Options</h4> <ul>\n<li> <p><code>:batch_size</code> - Specifies the size of the batch. Default to 1000.</p> </li>\n<li> <p><code>:start</code> - Specifies the starting point for the batch processing.</p> </li>\n</ul> <p>This is especially useful if you want multiple workers dealing with the same processing queue. You can make worker 1 handle all the records between id 0 and 10,000 and worker 2 handle from 10,000 and beyond (by setting the <code>:start</code> option on that worker).</p> <pre class=\"ruby\"># Let's process for a batch of 2000 records, skipping the first 2000 rows\nPerson.find_each(start: 2000, batch_size: 2000) do |person|\n  person.party_all_night!\nend\n</pre> <p>NOTE: It's not possible to set the order. That is automatically set to ascending on the primary key (“id ASC”) to make the batch ordering work. This also means that this method only works with integer-based primary keys.</p> <p>NOTE: You can't set the limit either, that's used to control the batch sizes.</p> <div class=\"method-source-code\" id=\"find_each-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/batches.rb, line 48\ndef find_each(options = {})\n  if block_given?\n    find_in_batches(options) do |records|\n      records.each { |record| yield record }\n    end\n  else\n    enum_for :find_each, options do\n      options[:start] ? where(table[primary_key].gteq(options[:start])).size : size\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_in_batches\"> <span class=\"method-name\">find_in_batches</span><span class=\"method-args\">(options = {}) { |records| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Yields each batch of records that was found by the find <code>options</code> as an array.</p> <pre class=\"ruby\">Person.where(\"age &gt; 21\").find_in_batches do |group|\n  sleep(50) # Make sure it doesn't get too crowded in there!\n  group.each { |person| person.party_all_night! }\nend\n</pre> <p>If you do not provide a block to <a href=\"batches#method-i-find_in_batches\">find_in_batches</a>, it will return an Enumerator for chaining with other methods:</p> <pre class=\"ruby\">Person.find_in_batches.with_index do |group, batch|\n  puts \"Processing group ##{batch}\"\n  group.each(&amp;:recover_from_last_night!)\nend\n</pre> <p>To be yielded each record one by one, use <a href=\"batches#method-i-find_each\">find_each</a> instead.</p> <h4 id=\"method-i-find_in_batches-label-Options\">Options</h4> <ul>\n<li> <p><code>:batch_size</code> - Specifies the size of the batch. Default to 1000.</p> </li>\n<li> <p><code>:start</code> - Specifies the starting point for the batch processing.</p> </li>\n</ul> <p>This is especially useful if you want multiple workers dealing with the same processing queue. You can make worker 1 handle all the records between id 0 and 10,000 and worker 2 handle from 10,000 and beyond (by setting the <code>:start</code> option on that worker).</p> <pre class=\"ruby\"># Let's process the next 2000 records\nPerson.find_in_batches(start: 2000, batch_size: 2000) do |group|\n  group.each { |person| person.party_all_night! }\nend\n</pre> <p>NOTE: It's not possible to set the order. That is automatically set to ascending on the primary key (“id ASC”) to make the batch ordering work. This also means that this method only works with integer-based primary keys.</p> <p>NOTE: You can't set the limit either, that's used to control the batch sizes.</p> <div class=\"method-source-code\" id=\"find_in_batches-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/batches.rb, line 98\ndef find_in_batches(options = {})\n  options.assert_valid_keys(:start, :batch_size)\n\n  relation = self\n  start = options[:start]\n  batch_size = options[:batch_size] || 1000\n\n  unless block_given?\n    return to_enum(:find_in_batches, options) do\n      total = start ? where(table[primary_key].gteq(start)).size : size\n      (total - 1).div(batch_size) + 1\n    end\n  end\n\n  if logger &amp;&amp; (arel.orders.present? || arel.taken.present?)\n    logger.warn(\"Scoped order and limit are ignored, it's forced to be batch order and batch size\")\n  end\n\n  relation = relation.reorder(batch_order).limit(batch_size)\n  records = start ? relation.where(table[primary_key].gteq(start)).to_a : relation.to_a\n\n  while records.any?\n    records_size = records.size\n    primary_key_offset = records.last.id\n    raise \"Primary key not included in the custom select clause\" unless primary_key_offset\n\n    yield records\n\n    break if records_size &lt; batch_size\n\n    records = relation.where(table[primary_key].gt(primary_key_offset)).to_a\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/calculations":"<h1 id=\"module-ActiveRecord::Calculations\" class=\"module\"> module ActiveRecord::Calculations </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-average\"> <span class=\"method-name\">average</span><span class=\"method-args\">(column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calculates the average value on a given column. Returns <code>nil</code> if there's no row. See <code>calculate</code> for examples with options.</p> <pre class=\"ruby\">Person.average(:age) # =&gt; 35.8\n</pre> <div class=\"method-source-code\" id=\"average-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/calculations.rb, line 49\ndef average(column_name, options = {})\n  # TODO: Remove options argument as soon we remove support to\n  # activerecord-deprecated_finders.\n  calculate(:average, column_name, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-calculate\"> <span class=\"method-name\">calculate</span><span class=\"method-args\">(operation, column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This calculates aggregate values in the given column. Methods for count, sum, average, minimum, and maximum have been added as shortcuts.</p> <p>There are two basic forms of output:</p> <pre>* Single aggregate value: The single value is type cast to Fixnum for COUNT, Float\n  for AVG, and the given column's type for everything else.\n\n* Grouped values: This returns an ordered hash of the values and groups them. It\n  takes either a column name, or the name of a belongs_to association.\n\n    values = Person.group('last_name').maximum(:age)\n    puts values[\"Drake\"]\n    # =&gt; 43\n\n    drake  = Family.find_by(last_name: 'Drake')\n    values = Person.group(:family).maximum(:age) # Person belongs_to :family\n    puts values[drake]\n    # =&gt; 43\n\n    values.each do |family, max_age|\n    ...\n    end\n\nPerson.calculate(:count, :all) # The same as Person.count\nPerson.average(:age) # SELECT AVG(age) FROM people...\n\n# Selects the minimum age for any family without any minors\nPerson.group(:last_name).having(\"min(age) &gt; 17\").minimum(:age)\n\nPerson.sum(\"2 * age\")</pre> <div class=\"method-source-code\" id=\"calculate-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/calculations.rb, line 117\ndef calculate(operation, column_name, options = {})\n  # TODO: Remove options argument as soon we remove support to\n  # activerecord-deprecated_finders.\n  if column_name.is_a?(Symbol) &amp;&amp; attribute_alias?(column_name)\n    column_name = attribute_alias(column_name)\n  end\n\n  if has_include?(column_name)\n    construct_relation_for_association_calculations.calculate(operation, column_name, options)\n  else\n    perform_calculation(operation, column_name, options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-count\"> <span class=\"method-name\">count</span><span class=\"method-args\">(column_name = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Count the records.</p> <pre class=\"ruby\">Person.count\n# =&gt; the total count of all people\n\nPerson.count(:age)\n# =&gt; returns the total count of all people whose age is present in database\n\nPerson.count(:all)\n# =&gt; performs a COUNT(*) (:all is an alias for '*')\n\nPerson.distinct.count(:age)\n# =&gt; counts the number of different age values\n</pre> <p>If <code>count</code> is used with <code>group</code>, it returns a <a href=\"../hash\">Hash</a> whose keys represent the aggregated column, and the values are the respective amounts:</p> <pre class=\"ruby\">Person.group(:city).count\n# =&gt; { 'Rome' =&gt; 5, 'Paris' =&gt; 3 }\n</pre> <p>If <code>count</code> is used with <code>group</code> for multiple columns, it returns a <a href=\"../hash\">Hash</a> whose keys are an array containing the individual values of each column and the value of each key would be the <code>count</code>.</p> <pre>Article.group(:status, :category).count\n# =&gt;  {[\"draft\", \"business\"]=&gt;10, [\"draft\", \"technology\"]=&gt;4,\n       [\"published\", \"business\"]=&gt;0, [\"published\", \"technology\"]=&gt;2}</pre> <p>If <code>count</code> is used with <code>select</code>, it will count the selected columns:</p> <pre class=\"ruby\">Person.select(:age).count\n# =&gt; counts the number of different age values\n</pre> <p>Note: not all valid <code>select</code> expressions are valid <code>count</code> expressions. The specifics differ between databases. In invalid cases, an error from the database is thrown.</p> <div class=\"method-source-code\" id=\"count-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/calculations.rb, line 38\ndef count(column_name = nil, options = {})\n  # TODO: Remove options argument as soon we remove support to\n  # activerecord-deprecated_finders.\n  column_name, options = nil, column_name if column_name.is_a?(Hash)\n  calculate(:count, column_name, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ids\"> <span class=\"method-name\">ids</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Pluck all the ID's for the relation using the table's primary key</p> <pre class=\"ruby\">Person.ids # SELECT people.id FROM people\nPerson.joins(:companies).ids # SELECT people.id FROM people INNER JOIN companies ON companies.person_id = people.id\n</pre> <div class=\"method-source-code\" id=\"ids-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/calculations.rb, line 189\ndef ids\n  pluck primary_key\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-maximum\"> <span class=\"method-name\">maximum</span><span class=\"method-args\">(column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calculates the maximum value on a given column. The value is returned with the same data type of the column, or <code>nil</code> if there's no row. See <code>calculate</code> for examples with options.</p> <pre class=\"ruby\">Person.maximum(:age) # =&gt; 93\n</pre> <div class=\"method-source-code\" id=\"maximum-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/calculations.rb, line 71\ndef maximum(column_name, options = {})\n  # TODO: Remove options argument as soon we remove support to\n  # activerecord-deprecated_finders.\n  calculate(:maximum, column_name, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-minimum\"> <span class=\"method-name\">minimum</span><span class=\"method-args\">(column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calculates the minimum value on a given column. The value is returned with the same data type of the column, or <code>nil</code> if there's no row. See <code>calculate</code> for examples with options.</p> <pre class=\"ruby\">Person.minimum(:age) # =&gt; 7\n</pre> <div class=\"method-source-code\" id=\"minimum-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/calculations.rb, line 60\ndef minimum(column_name, options = {})\n  # TODO: Remove options argument as soon we remove support to\n  # activerecord-deprecated_finders.\n  calculate(:minimum, column_name, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pluck\"> <span class=\"method-name\">pluck</span><span class=\"method-args\">(*column_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Use <code>pluck</code> as a shortcut to select one or more attributes without loading a bunch of records just to grab the attributes you want.</p> <pre class=\"ruby\">Person.pluck(:name)\n</pre> <p>instead of</p> <pre class=\"ruby\">Person.all.map(&amp;:name)\n</pre> <p>Pluck returns an <code>Array</code> of attribute values type-casted to match the plucked column names, if they can be deduced. Plucking an SQL fragment returns <a href=\"../string\">String</a> values by default.</p> <pre class=\"ruby\">Person.pluck(:id)\n# SELECT people.id FROM people\n# =&gt; [1, 2, 3]\n\nPerson.pluck(:id, :name)\n# SELECT people.id, people.name FROM people\n# =&gt; [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]\n\nPerson.pluck('DISTINCT role')\n# SELECT DISTINCT role FROM people\n# =&gt; ['admin', 'member', 'guest']\n\nPerson.where(age: 21).limit(5).pluck(:id)\n# SELECT people.id FROM people WHERE people.age = 21 LIMIT 5\n# =&gt; [2, 3]\n\nPerson.pluck('DATEDIFF(updated_at, created_at)')\n# SELECT DATEDIFF(updated_at, created_at) FROM people\n# =&gt; ['0', '27761', '173']\n</pre> <div class=\"method-source-code\" id=\"pluck-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/calculations.rb, line 164\ndef pluck(*column_names)\n  column_names.map! do |column_name|\n    if column_name.is_a?(Symbol) &amp;&amp; attribute_alias?(column_name)\n      attribute_alias(column_name)\n    else\n      column_name.to_s\n    end\n  end\n\n  if has_include?(column_names.first)\n    construct_relation_for_association_calculations.pluck(*column_names)\n  else\n    relation = spawn\n    relation.select_values = column_names.map { |cn|\n      columns_hash.key?(cn) ? arel_table[cn] : cn\n    }\n    result = klass.connection.select_all(relation.arel, nil, relation.arel.bind_values + bind_values)\n    result.cast_values(klass.column_types)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sum\"> <span class=\"method-name\">sum</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calculates the sum of values on a given column. The value is returned with the same data type of the column, 0 if there's no row. See <code>calculate</code> for examples with options.</p> <pre class=\"ruby\">Person.sum(:age) # =&gt; 4562\n</pre> <div class=\"method-source-code\" id=\"sum-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/calculations.rb, line 82\ndef sum(*args)\n  calculate(:sum, *args)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/callbacks":"<h1 id=\"module-ActiveRecord::Callbacks\" class=\"module\"> module ActiveRecord::Callbacks </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../activemodel/validations/callbacks\">ActiveModel::Validations::Callbacks</a></dd>\n</dl> <section class=\"description\"> <h1 id=\"module-ActiveRecord::Callbacks-label-Active+Record+Callbacks\">Active Record <a href=\"callbacks\">Callbacks</a>\n</h1> <p><a href=\"callbacks\">Callbacks</a> are hooks into the life cycle of an Active Record object that allow you to trigger logic before or after an alteration of the object state. This can be used to make sure that associated and dependent objects are deleted when <code>destroy</code> is called (by overwriting <code>before_destroy</code>) or to massage attributes before they're validated (by overwriting <code>before_validation</code>). As an example of the callbacks initiated, consider the <code>Base#save</code> call for a new record:</p> <ul>\n<li> <p>(-) <code>save</code></p> </li>\n<li> <p>(-) <code>valid</code></p> </li>\n<li> <p>(1) <code>before_validation</code></p> </li>\n<li> <p>(-) <code>validate</code></p> </li>\n<li> <p>(2) <code>after_validation</code></p> </li>\n<li> <p>(3) <code>before_save</code></p> </li>\n<li> <p>(4) <code>before_create</code></p> </li>\n<li> <p>(-) <code>create</code></p> </li>\n<li> <p>(5) <code>after_create</code></p> </li>\n<li> <p>(6) <code>after_save</code></p> </li>\n<li> <p>(7) <code>after_commit</code></p> </li>\n</ul> <p>Also, an <code>after_rollback</code> callback can be configured to be triggered whenever a rollback is issued. Check out <code>ActiveRecord::Transactions</code> for more details about <code>after_commit</code> and <code>after_rollback</code>.</p> <p>Additionally, an <code>after_touch</code> callback is triggered whenever an object is touched.</p> <p>Lastly an <code>after_find</code> and <code>after_initialize</code> callback is triggered for each object that is found and instantiated by a finder, with <code>after_initialize</code> being triggered after new objects are instantiated as well.</p> <p>There are nineteen callbacks in total, which give you immense power to react and prepare for each state in the Active Record life cycle. The sequence for calling <code>Base#save</code> for an existing record is similar, except that each <code>_create</code> callback is replaced by the corresponding <code>_update</code> callback.</p> <p>Examples:</p> <pre class=\"ruby\">class CreditCard &lt; ActiveRecord::Base\n  # Strip everything but digits, so the user can specify \"555 234 34\" or\n  # \"5552-3434\" and both will mean \"55523434\"\n  before_validation(on: :create) do\n    self.number = number.gsub(/[^0-9]/, \"\") if attribute_present?(\"number\")\n  end\nend\n\nclass Subscription &lt; ActiveRecord::Base\n  before_create :record_signup\n\n  private\n    def record_signup\n      self.signed_up_on = Date.today\n    end\nend\n\nclass Firm &lt; ActiveRecord::Base\n  # Destroys the associated clients and people when the firm is destroyed\n  before_destroy { |record| Person.destroy_all \"firm_id = #{record.id}\"   }\n  before_destroy { |record| Client.destroy_all \"client_of = #{record.id}\" }\nend\n</pre> <h2 id=\"module-ActiveRecord::Callbacks-label-Inheritable+callback+queues\">Inheritable callback queues</h2> <p>Besides the overwritable callback methods, it's also possible to register callbacks through the use of the callback macros. Their main advantage is that the macros add behavior into a callback queue that is kept intact down through an inheritance hierarchy.</p> <pre class=\"ruby\">class Topic &lt; ActiveRecord::Base\n  before_destroy :destroy_author\nend\n\nclass Reply &lt; Topic\n  before_destroy :destroy_readers\nend\n</pre> <p>Now, when <code>Topic#destroy</code> is run only <code>destroy_author</code> is called. When <code>Reply#destroy</code> is run, both <code>destroy_author</code> and <code>destroy_readers</code> are called. Contrast this to the following situation where the <code>before_destroy</code> method is overridden:</p> <pre class=\"ruby\">class Topic &lt; ActiveRecord::Base\n  def before_destroy() destroy_author end\nend\n\nclass Reply &lt; Topic\n  def before_destroy() destroy_readers end\nend\n</pre> <p>In that case, <code>Reply#destroy</code> would only run <code>destroy_readers</code> and <em>not</em> <code>destroy_author</code>. So, use the callback macros when you want to ensure that a certain callback is called for the entire hierarchy, and use the regular overwritable methods when you want to leave it up to each descendant to decide whether they want to call <code>super</code> and trigger the inherited callbacks.</p> <p><strong>IMPORTANT:</strong> In order for inheritance to work for the callback queues, you must specify the callbacks before specifying the associations. Otherwise, you might trigger the loading of a child before the parent has registered the callbacks and they won't be inherited.</p> <h2 id=\"module-ActiveRecord::Callbacks-label-Types+of+callbacks\">Types of callbacks</h2> <p>There are four types of callbacks accepted by the callback macros: <a href=\"../method\">Method</a> references (symbol), callback objects, inline methods (using a proc), and inline eval methods (using a string). <a href=\"../method\">Method</a> references and callback objects are the recommended approaches, inline methods using a proc are sometimes appropriate (such as for creating mix-ins), and inline eval methods are deprecated.</p> <p>The method reference callbacks work by specifying a protected or private method available in the object, like this:</p> <pre class=\"ruby\">class Topic &lt; ActiveRecord::Base\n  before_destroy :delete_parents\n\n  private\n    def delete_parents\n      self.class.delete_all \"parent_id = #{id}\"\n    end\nend\n</pre> <p>The callback objects have methods named after the callback called with the record as the only parameter, such as:</p> <pre class=\"ruby\">class BankAccount &lt; ActiveRecord::Base\n  before_save      EncryptionWrapper.new\n  after_save       EncryptionWrapper.new\n  after_initialize EncryptionWrapper.new\nend\n\nclass EncryptionWrapper\n  def before_save(record)\n    record.credit_card_number = encrypt(record.credit_card_number)\n  end\n\n  def after_save(record)\n    record.credit_card_number = decrypt(record.credit_card_number)\n  end\n\n  alias_method :after_initialize, :after_save\n\n  private\n    def encrypt(value)\n      # Secrecy is committed\n    end\n\n    def decrypt(value)\n      # Secrecy is unveiled\n    end\nend\n</pre> <p>So you specify the object you want messaged on a given callback. When that callback is triggered, the object has a method by the name of the callback messaged. You can make these callbacks more flexible by passing in other initialization data such as the name of the attribute to work with:</p> <pre class=\"ruby\">class BankAccount &lt; ActiveRecord::Base\n  before_save      EncryptionWrapper.new(\"credit_card_number\")\n  after_save       EncryptionWrapper.new(\"credit_card_number\")\n  after_initialize EncryptionWrapper.new(\"credit_card_number\")\nend\n\nclass EncryptionWrapper\n  def initialize(attribute)\n    @attribute = attribute\n  end\n\n  def before_save(record)\n    record.send(\"#{@attribute}=\", encrypt(record.send(\"#{@attribute}\")))\n  end\n\n  def after_save(record)\n    record.send(\"#{@attribute}=\", decrypt(record.send(\"#{@attribute}\")))\n  end\n\n  alias_method :after_initialize, :after_save\n\n  private\n    def encrypt(value)\n      # Secrecy is committed\n    end\n\n    def decrypt(value)\n      # Secrecy is unveiled\n    end\nend\n</pre> <p>The callback macros usually accept a symbol for the method they're supposed to run, but you can also pass a “method string”, which will then be evaluated within the binding of the callback. Example:</p> <pre class=\"ruby\">class Topic &lt; ActiveRecord::Base\n  before_destroy 'self.class.delete_all \"parent_id = #{id}\"'\nend\n</pre> <p>Notice that single quotes (') are used so the <code>#{id}</code> part isn't evaluated until the callback is triggered. Also note that these inline callbacks can be stacked just like the regular ones:</p> <pre class=\"ruby\">class Topic &lt; ActiveRecord::Base\n  before_destroy 'self.class.delete_all \"parent_id = #{id}\"',\n                 'puts \"Evaluated after parents are destroyed\"'\nend\n</pre> <h2 id=\"module-ActiveRecord::Callbacks-label-before_validation-2A+returning+statements\">\n<code>before_validation*</code> returning statements</h2> <p>If the returning value of a <code>before_validation</code> callback can be evaluated to <code>false</code>, the process will be aborted and <code>Base#save</code> will return <code>false</code>. If <a href=\"validations#method-i-save-21\">ActiveRecord::Validations#save!</a> is called it will raise a <a href=\"recordinvalid\">ActiveRecord::RecordInvalid</a> exception. Nothing will be appended to the errors object.</p> <h2 id=\"module-ActiveRecord::Callbacks-label-Canceling+callbacks\">Canceling callbacks</h2> <p>If a <code>before_*</code> callback returns <code>false</code>, all the later callbacks and the associated action are cancelled. <a href=\"callbacks\">Callbacks</a> are generally run in the order they are defined, with the exception of callbacks defined as methods on the model, which are called last.</p> <h2 id=\"module-ActiveRecord::Callbacks-label-Ordering+callbacks\">Ordering callbacks</h2> <p>Sometimes the code needs that the callbacks execute in a specific order. For example, a <code>before_destroy</code> callback (<code>log_children</code> in this case) should be executed before the children get destroyed by the +dependent: destroy+ option.</p> <p>Let's look at the code below:</p> <pre class=\"ruby\">class Topic &lt; ActiveRecord::Base\n  has_many :children, dependent: destroy\n\n  before_destroy :log_children\n\n  private\n    def log_children\n      # Child processing\n    end\nend\n</pre> <p>In this case, the problem is that when the <code>before_destroy</code> callback is executed, the children are not available because the <code>destroy</code> callback gets executed first. You can use the <code>prepend</code> option on the <code>before_destroy</code> callback to avoid this.</p> <pre class=\"ruby\">class Topic &lt; ActiveRecord::Base\n  has_many :children, dependent: destroy\n\n  before_destroy :log_children, prepend: true\n\n  private\n    def log_children\n      # Child processing\n    end\nend\n</pre> <p>This way, the <code>before_destroy</code> gets executed before the <code>dependent: destroy</code> is called, and the data is still available.</p> <h2 id=\"module-ActiveRecord::Callbacks-label-Transactions\"><a href=\"transactions\">Transactions</a></h2> <p>The entire callback chain of a <code>save</code>, <code>save!</code>, or <code>destroy</code> call runs within a transaction. That includes <code>after_*</code> hooks. If everything goes fine a COMMIT is executed once the chain has been completed.</p> <p>If a <code>before_*</code> callback cancels the action a ROLLBACK is issued. You can also trigger a ROLLBACK raising an exception in any of the callbacks, including <code>after_*</code> hooks. Note, however, that in that case the client needs to be aware of it because an ordinary <code>save</code> will raise such exception instead of quietly returning <code>false</code>.</p> <h2 id=\"module-ActiveRecord::Callbacks-label-Debugging+callbacks\">Debugging callbacks</h2> <p>The callback chain is accessible via the <code>_*_callbacks</code> method on an object. <a href=\"../activemodel\">ActiveModel</a> <a href=\"callbacks\">Callbacks</a> support <code>:before</code>, <code>:after</code> and <code>:around</code> as values for the <code>kind</code> property. The <code>kind</code> property defines what part of the chain the callback runs in.</p> <p>To find all callbacks in the before_save callback chain:</p> <pre class=\"ruby\">Topic._save_callbacks.select { |cb| cb.kind.eql?(:before) }\n</pre> <p>Returns an array of callback objects that form the before_save chain.</p> <p>To further check if the before_save chain contains a proc defined as <code>rest_when_dead</code> use the <code>filter</code> property of the callback object:</p> <pre class=\"ruby\">Topic._save_callbacks.select { |cb| cb.kind.eql?(:before) }.collect(&amp;:filter).include?(:rest_when_dead)\n</pre> <p>Returns true or false depending on whether the proc is contained in the before_save callback chain on a Topic model.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"CALLBACKS\">CALLBACKS </dt>\n\n</dl> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/configurationerror":"<h1 id=\"class-ActiveRecord::ConfigurationError\" class=\"class\"> class ActiveRecord::ConfigurationError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when association is being configured improperly or user tries to use offset and limit together with <code>has_many</code> or <code>has_and_belongs_to_many</code> associations.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/abstractadapter":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::AbstractAdapter\" class=\"class\"> class ActiveRecord::ConnectionAdapters::AbstractAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"quoting\">ActiveRecord::ConnectionAdapters::Quoting</a>, <a class=\"include\" href=\"databasestatements\">ActiveRecord::ConnectionAdapters::DatabaseStatements</a>, <a class=\"include\" href=\"schemastatements\">ActiveRecord::ConnectionAdapters::SchemaStatements</a>, <a class=\"include\" href=\"databaselimits\">ActiveRecord::ConnectionAdapters::DatabaseLimits</a>, <a class=\"include\" href=\"querycache\">ActiveRecord::ConnectionAdapters::QueryCache</a>, <a class=\"include\" href=\"../../activesupport/callbacks\">ActiveSupport::Callbacks</a>, <a class=\"include\" href=\"columndumper\">ActiveRecord::ConnectionAdapters::ColumnDumper</a>\n</dd>\n</dl> <section class=\"description\"> <p>Active Record supports multiple database systems. <a href=\"abstractadapter\">AbstractAdapter</a> and related classes form the abstraction layer which makes this possible. An <a href=\"abstractadapter\">AbstractAdapter</a> represents a connection to a database, and provides an abstract interface for database-specific functionality such as establishing a connection, escaping values, building the right SQL fragments for ':offset' and ':limit' options, etc.</p> <p>All the concrete database adapters follow the interface laid down in this class. ActiveRecord::Base.connection returns an <a href=\"abstractadapter\">AbstractAdapter</a> object, which you can use.</p> <p>Most of the methods in the adapter are useful during migrations. Most notably, the instance methods provided by SchemaStatement are very useful.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ADAPTER_NAME\">ADAPTER_NAME </dt>\n\n<dt id=\"SIMPLE_INT\">SIMPLE_INT </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-in_use-3F\"> <span class=\"method-name\">in_use?</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-logger\"> <span class=\"method-name\">logger</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-owner\"> <span class=\"method-name\">owner</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-pool\"> <span class=\"method-name\">pool</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-prepared_statements\"> <span class=\"method-name\">prepared_statements</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-schema_cache\"> <span class=\"method-name\">schema_cache</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-visitor\"> <span class=\"method-name\">visitor</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-type_cast_config_to_boolean\"> <span class=\"method-name\">type_cast_config_to_boolean</span><span class=\"method-args\">(config)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"type_cast_config_to_boolean-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 91\ndef self.type_cast_config_to_boolean(config)\n  if config == \"false\"\n    false\n  else\n    config\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-type_cast_config_to_integer\"> <span class=\"method-name\">type_cast_config_to_integer</span><span class=\"method-args\">(config)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"type_cast_config_to_integer-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 83\ndef self.type_cast_config_to_integer(config)\n  if config =~ SIMPLE_INT\n    config.to_i\n  else\n    config\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-active-3F\"> <span class=\"method-name\">active?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Checks whether the connection to the database is still active. This includes checking whether the database is actually capable of responding, i.e. whether the connection isn't stale.</p> <div class=\"method-source-code\" id=\"active-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 284\ndef active?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-adapter_name\"> <span class=\"method-name\">adapter_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the human-readable name of the adapter. Use mixed case - one can always use downcase if needed.</p> <div class=\"method-source-code\" id=\"adapter_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 168\ndef adapter_name\n  self.class::ADAPTER_NAME\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-case_insensitive_comparison\"> <span class=\"method-name\">case_insensitive_comparison</span><span class=\"method-args\">(table, attribute, column, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"case_insensitive_comparison-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 357\ndef case_insensitive_comparison(table, attribute, column, value)\n  table[attribute].lower.eq(table.lower(value))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-case_sensitive_comparison\"> <span class=\"method-name\">case_sensitive_comparison</span><span class=\"method-args\">(table, attribute, column, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"case_sensitive_comparison-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 351\ndef case_sensitive_comparison(table, attribute, column, value)\n  table_attr = table[attribute]\n  value = case_sensitive_modifier(value, table_attr) unless value.nil?\n  table_attr.eq(value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-case_sensitive_modifier\"> <span class=\"method-name\">case_sensitive_modifier</span><span class=\"method-args\">(node, table_attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"case_sensitive_modifier-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 347\ndef case_sensitive_modifier(node, table_attribute)\n  node\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_cache-21\"> <span class=\"method-name\">clear_cache!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clear any caching the database adapter may be doing, for example clearing the prepared statement cache. This is database specific.</p> <div class=\"method-source-code\" id=\"clear_cache-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 315\ndef clear_cache!\n  # this should be overridden by concrete adapters\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-close\"> <span class=\"method-name\">close</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Check the connection back in to the connection pool</p> <div class=\"method-source-code\" id=\"close-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 366\ndef close\n  pool.checkin self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collector\"> <span class=\"method-name\">collector</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"collector-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 126\ndef collector\n  if prepared_statements\n    SQLString.new\n  else\n    BindCollector.new\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_savepoint\"> <span class=\"method-name\">create_savepoint</span><span class=\"method-args\">(name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"create_savepoint-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 341\ndef create_savepoint(name = nil)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-current_savepoint_name\"> <span class=\"method-name\">current_savepoint_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"current_savepoint_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 361\ndef current_savepoint_name\n  current_transaction.savepoint_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disable_extension\"> <span class=\"method-name\">disable_extension</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This is meant to be implemented by the adapters that support extensions</p> <div class=\"method-source-code\" id=\"disable_extension-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 247\ndef disable_extension(name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disable_referential_integrity\"> <span class=\"method-name\">disable_referential_integrity</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Override to turn off referential integrity while executing <code>&amp;block</code>.</p> <div class=\"method-source-code\" id=\"disable_referential_integrity-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 275\ndef disable_referential_integrity\n  yield\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disconnect-21\"> <span class=\"method-name\">disconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disconnects from the database if already connected. Otherwise, this method does nothing.</p> <div class=\"method-source-code\" id=\"disconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 297\ndef disconnect!\n  clear_cache!\n  reset_transaction\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-enable_extension\"> <span class=\"method-name\">enable_extension</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This is meant to be implemented by the adapters that support extensions</p> <div class=\"method-source-code\" id=\"enable_extension-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 251\ndef enable_extension(name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-expire\"> <span class=\"method-name\">expire</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"expire-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 155\ndef expire\n  @owner = nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extensions\"> <span class=\"method-name\">extensions</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A list of extensions, to be filled in by adapters that support them.</p> <div class=\"method-source-code\" id=\"extensions-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 255\ndef extensions\n  []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_algorithms\"> <span class=\"method-name\">index_algorithms</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A list of index algorithms, to be filled by adapters that support them.</p> <div class=\"method-source-code\" id=\"index_algorithms-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 260\ndef index_algorithms\n  {}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-lease\"> <span class=\"method-name\">lease</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"lease-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 142\ndef lease\n  synchronize do\n    unless in_use?\n      @owner = Thread.current\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-new_column\"> <span class=\"method-name\">new_column</span><span class=\"method-args\">(name, default, cast_type, sql_type = nil, null = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 376\ndef new_column(name, default, cast_type, sql_type = nil, null = true)\n  Column.new(name, default, cast_type, sql_type, null)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prefetch_primary_key-3F\"> <span class=\"method-name\">prefetch_primary_key?</span><span class=\"method-args\">(table_name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Should primary key values be selected from their corresponding sequence before the insert statement? If true, next_sequence_value is called before each insert to set the record's primary key.</p> <div class=\"method-source-code\" id=\"prefetch_primary_key-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 201\ndef prefetch_primary_key?(table_name = nil)\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-raw_connection\"> <span class=\"method-name\">raw_connection</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Provides access to the underlying database driver for this adapter. For example, this method returns a <a href=\"../../mysql\">Mysql</a> object in case of <a href=\"mysqladapter\">MysqlAdapter</a>, and a PGconn object in case of <a href=\"postgresqladapter\">PostgreSQLAdapter</a>.</p> <p>This is useful for when you need to call a proprietary method such as PostgreSQL's lo_* methods.</p> <div class=\"method-source-code\" id=\"raw_connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 337\ndef raw_connection\n  @connection\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reconnect-21\"> <span class=\"method-name\">reconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disconnects from the database if already connected, and establishes a new connection with the database. Implementors should call super if they override the default implementation.</p> <div class=\"method-source-code\" id=\"reconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 290\ndef reconnect!\n  clear_cache!\n  reset_transaction\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-release_savepoint\"> <span class=\"method-name\">release_savepoint</span><span class=\"method-args\">(name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"release_savepoint-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 344\ndef release_savepoint(name = nil)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-requires_reloading-3F\"> <span class=\"method-name\">requires_reloading?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if its required to reload the connection between requests for development mode.</p> <div class=\"method-source-code\" id=\"requires_reloading-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 320\ndef requires_reloading?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset-21\"> <span class=\"method-name\">reset!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reset the state of this connection, directing the DBMS to clear transactions and other connection-related server-side state. Usually a database-dependent operation.</p> <p>The default implementation does nothing; the implementation should be overridden by concrete adapters.</p> <div class=\"method-source-code\" id=\"reset-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 308\ndef reset!\n  # this should be overridden by concrete adapters\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-schema_cache-3D\"> <span class=\"method-name\">schema_cache=</span><span class=\"method-args\">(cache)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"schema_cache-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 150\ndef schema_cache=(cache)\n  cache.connection = self\n  @schema_cache = cache\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-schema_creation\"> <span class=\"method-name\">schema_creation</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"schema_creation-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 138\ndef schema_creation\n  SchemaCreation.new self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-substitute_at\"> <span class=\"method-name\">substitute_at</span><span class=\"method-args\">(column, _unused = 0)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a bind substitution value given a bind <code>column</code> NOTE: The column param is currently being used by the sqlserver-adapter</p> <div class=\"method-source-code\" id=\"substitute_at-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 268\ndef substitute_at(column, _unused = 0)\n  Arel::Nodes::BindParam.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_bulk_alter-3F\"> <span class=\"method-name\">supports_bulk_alter?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_bulk_alter-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 189\ndef supports_bulk_alter?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_ddl_transactions-3F\"> <span class=\"method-name\">supports_ddl_transactions?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support DDL rollbacks in transactions? That is, would CREATE TABLE or ALTER TABLE get rolled back by a transaction?</p> <div class=\"method-source-code\" id=\"supports_ddl_transactions-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 185\ndef supports_ddl_transactions?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_explain-3F\"> <span class=\"method-name\">supports_explain?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support explain?</p> <div class=\"method-source-code\" id=\"supports_explain-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 216\ndef supports_explain?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_extensions-3F\"> <span class=\"method-name\">supports_extensions?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support database extensions?</p> <div class=\"method-source-code\" id=\"supports_extensions-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 226\ndef supports_extensions?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_foreign_keys-3F\"> <span class=\"method-name\">supports_foreign_keys?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support creating foreign key constraints?</p> <div class=\"method-source-code\" id=\"supports_foreign_keys-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 237\ndef supports_foreign_keys?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_index_sort_order-3F\"> <span class=\"method-name\">supports_index_sort_order?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support index sort order?</p> <div class=\"method-source-code\" id=\"supports_index_sort_order-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 206\ndef supports_index_sort_order?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_indexes_in_create-3F\"> <span class=\"method-name\">supports_indexes_in_create?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support creating indexes in the same statement as creating the table?</p> <div class=\"method-source-code\" id=\"supports_indexes_in_create-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 232\ndef supports_indexes_in_create?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_migrations-3F\"> <span class=\"method-name\">supports_migrations?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support migrations?</p> <div class=\"method-source-code\" id=\"supports_migrations-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 173\ndef supports_migrations?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_partial_index-3F\"> <span class=\"method-name\">supports_partial_index?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support partial indices?</p> <div class=\"method-source-code\" id=\"supports_partial_index-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 211\ndef supports_partial_index?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_primary_key-3F\"> <span class=\"method-name\">supports_primary_key?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Can this adapter determine the primary key for tables not attached to an Active Record class, such as join tables?</p> <div class=\"method-source-code\" id=\"supports_primary_key-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 179\ndef supports_primary_key?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_savepoints-3F\"> <span class=\"method-name\">supports_savepoints?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support savepoints?</p> <div class=\"method-source-code\" id=\"supports_savepoints-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 194\ndef supports_savepoints?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_transaction_isolation-3F\"> <span class=\"method-name\">supports_transaction_isolation?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support setting the isolation level for a transaction?</p> <div class=\"method-source-code\" id=\"supports_transaction_isolation-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 221\ndef supports_transaction_isolation?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_views-3F\"> <span class=\"method-name\">supports_views?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this adapter support views?</p> <div class=\"method-source-code\" id=\"supports_views-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 242\ndef supports_views?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unprepared_statement\"> <span class=\"method-name\">unprepared_statement</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"unprepared_statement-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 159\ndef unprepared_statement\n  old_prepared_statements, @prepared_statements = @prepared_statements, false\n  yield\nensure\n  @prepared_statements = old_prepared_statements\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-valid_type-3F\"> <span class=\"method-name\">valid_type?</span><span class=\"method-args\">(type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"valid_type-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 134\ndef valid_type?(type)\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-verify-21\"> <span class=\"method-name\">verify!</span><span class=\"method-args\">(*ignored)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Checks whether the connection to the database is still active (i.e. not stale). This is done under the hood by calling <code>active?</code>. If the connection is no longer active, then this method will reconnect to the database.</p> <div class=\"method-source-code\" id=\"verify-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 327\ndef verify!(*ignored)\n  reconnect! unless active?\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-log\"> <span class=\"method-name\">log</span><span class=\"method-args\">(sql, name = \"SQL\", binds = [], statement_name = nil) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"log-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 466\ndef log(sql, name = \"SQL\", binds = [], statement_name = nil)\n  @instrumenter.instrument(\n    \"sql.active_record\",\n    :sql            =&gt; sql,\n    :name           =&gt; name,\n    :connection_id  =&gt; object_id,\n    :statement_name =&gt; statement_name,\n    :binds          =&gt; binds) { yield }\nrescue =&gt; e\n  raise translate_exception_class(e, sql)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-translate_exception\"> <span class=\"method-name\">translate_exception</span><span class=\"method-args\">(exception, message)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"translate_exception-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 478\ndef translate_exception(exception, message)\n  # override in derived class\n  ActiveRecord::StatementInvalid.new(message, exception)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-translate_exception_class\"> <span class=\"method-name\">translate_exception_class</span><span class=\"method-args\">(e, sql)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"translate_exception_class-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 453\ndef translate_exception_class(e, sql)\n  begin\n    message = \"#{e.class.name}: #{e.message}: #{sql}\"\n  rescue Encoding::CompatibilityError\n    message = \"#{e.class.name}: #{e.message.force_encoding sql.encoding}: #{sql}\"\n  end\n\n  @logger.error message if @logger\n  exception = translate_exception(e, message)\n  exception.set_backtrace e.backtrace\n  exception\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-without_prepared_statement-3F\"> <span class=\"method-name\">without_prepared_statement?</span><span class=\"method-args\">(binds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"without_prepared_statement-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 483\ndef without_prepared_statement?(binds)\n  !prepared_statements || binds.empty?\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/abstractmysqladapter":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter\" class=\"class\"> class ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"abstractadapter\">ActiveRecord::ConnectionAdapters::AbstractAdapter</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"INDEX_TYPES\">INDEX_TYPES </dt>\n\n<dt id=\"INDEX_USINGS\">INDEX_USINGS </dt>\n\n<dt id=\"LOST_CONNECTION_ERROR_MESSAGES\">LOST_CONNECTION_ERROR_MESSAGES </dt>\n\n<dt id=\"NATIVE_DATABASE_TYPES\">NATIVE_DATABASE_TYPES </dt>\n\n<dt id=\"QUOTED_FALSE\">QUOTED_FALSE </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-emulate_booleans\"> <span class=\"method-name\">emulate_booleans</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>By default, the <a href=\"mysqladapter\">MysqlAdapter</a> will consider all columns of type <code>tinyint(1)</code> as boolean. If you wish to disable this emulation (which was the default behavior in versions 0.13.1 and earlier) you can add the following line to your application.rb file:</p> <pre>ActiveRecord::ConnectionAdapters::Mysql[2]Adapter.emulate_booleans = false</pre> <div class=\"method-source-code\" id=\"emulate_booleans-source\"> <pre class=\"c\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 139\nclass_attribute :emulate_booleans\n</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(connection, logger, connection_options, config)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>FIXME: Make the first parameter more similar for the two adapters</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"querycache#method-c-new\">ActiveRecord::ConnectionAdapters::QueryCache.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 168\ndef initialize(connection, logger, connection_options, config)\n  super(connection, logger)\n  @connection_options, @config = connection_options, config\n  @quoted_column_names, @quoted_table_names = {}, {}\n\n  @visitor = Arel::Visitors::MySQL.new self\n\n  if self.class.type_cast_config_to_boolean(config.fetch(:prepared_statements) { true })\n    @prepared_statements = true\n  else\n    @prepared_statements = false\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-begin_db_transaction\"> <span class=\"method-name\">begin_db_transaction</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"begin_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 320\ndef begin_db_transaction\n  execute \"BEGIN\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-begin_isolated_db_transaction\"> <span class=\"method-name\">begin_isolated_db_transaction</span><span class=\"method-args\">(isolation)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"begin_isolated_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 324\ndef begin_isolated_db_transaction(isolation)\n  execute \"SET TRANSACTION ISOLATION LEVEL #{transaction_isolation_levels.fetch(isolation)}\"\n  begin_db_transaction\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-case_insensitive_comparison\"> <span class=\"method-name\">case_insensitive_comparison</span><span class=\"method-args\">(table, attribute, column, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-case_insensitive_comparison\">ActiveRecord::ConnectionAdapters::AbstractAdapter#case_insensitive_comparison</a> </div> <div class=\"method-source-code\" id=\"case_insensitive_comparison-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 643\ndef case_insensitive_comparison(table, attribute, column, value)\n  if column.case_sensitive?\n    super\n  else\n    table[attribute].eq(value)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-case_sensitive_comparison\"> <span class=\"method-name\">case_sensitive_comparison</span><span class=\"method-args\">(table, attribute, column, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-case_sensitive_comparison\">ActiveRecord::ConnectionAdapters::AbstractAdapter#case_sensitive_comparison</a> </div> <div class=\"method-source-code\" id=\"case_sensitive_comparison-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 635\ndef case_sensitive_comparison(table, attribute, column, value)\n  if column.case_sensitive?\n    table[attribute].eq(value)\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-case_sensitive_modifier\"> <span class=\"method-name\">case_sensitive_modifier</span><span class=\"method-args\">(node, table_attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"case_sensitive_modifier-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 630\ndef case_sensitive_modifier(node, table_attribute)\n  node = Arel::Nodes.build_quoted node, table_attribute\n  Arel::Nodes::Bin.new(node)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_column_null\"> <span class=\"method-name\">change_column_null</span><span class=\"method-args\">(table_name, column_name, null, default = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"change_column_null-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 514\ndef change_column_null(table_name, column_name, null, default = nil)\n  column = column_for(table_name, column_name)\n\n  unless null || default.nil?\n    execute(\"UPDATE #{quote_table_name(table_name)} SET #{quote_column_name(column_name)}=#{quote(default)} WHERE #{quote_column_name(column_name)} IS NULL\")\n  end\n\n  change_column table_name, column_name, column.sql_type, :null =&gt; null\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-charset\"> <span class=\"method-name\">charset</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the database character set.</p> <div class=\"method-source-code\" id=\"charset-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 392\ndef charset\n  show_variable 'character_set_database'\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_cache-21\"> <span class=\"method-name\">clear_cache!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-clear_cache-21\">ActiveRecord::ConnectionAdapters::AbstractAdapter#clear_cache!</a> </div> <div class=\"method-source-code\" id=\"clear_cache-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 298\ndef clear_cache!\n  super\n  reload_type_map\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collation\"> <span class=\"method-name\">collation</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the database collation strategy.</p> <div class=\"method-source-code\" id=\"collation-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 397\ndef collation\n  show_variable 'collation_database'\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_database\"> <span class=\"method-name\">create_database</span><span class=\"method-args\">(name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new MySQL database with optional <code>:charset</code> and <code>:collation</code>. Charset defaults to utf8.</p> <p>Example:</p> <pre class=\"ruby\">create_database 'charset_test', charset: 'latin1', collation: 'latin1_bin'\ncreate_database 'matt_development'\ncreate_database 'matt_development', charset: :big5\n</pre> <div class=\"method-source-code\" id=\"create_database-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 371\ndef create_database(name, options = {})\n  if options[:collation]\n    execute \"CREATE DATABASE `#{name}` DEFAULT CHARACTER SET `#{options[:charset] || 'utf8'}` COLLATE `#{options[:collation]}`\"\n  else\n    execute \"CREATE DATABASE `#{name}` DEFAULT CHARACTER SET `#{options[:charset] || 'utf8'}`\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-current_database\"> <span class=\"method-name\">current_database</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"current_database-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 387\ndef current_database\n  select_value 'SELECT DATABASE() as db'\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-drop_table\"> <span class=\"method-name\">drop_table</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"drop_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 495\ndef drop_table(table_name, options = {})\n  execute \"DROP#{' TEMPORARY' if options[:temporary]} TABLE #{quote_table_name(table_name)}#{' CASCADE' if options[:force] == :cascade}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-empty_insert_statement_value\"> <span class=\"method-name\">empty_insert_statement_value</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"empty_insert_statement_value-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 349\ndef empty_insert_statement_value\n  \"VALUES ()\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-execute\"> <span class=\"method-name\">execute</span><span class=\"method-args\">(sql, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes the SQL statement in the context of this connection.</p> <div class=\"method-source-code\" id=\"execute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 304\ndef execute(sql, name = nil)\n  log(sql, name) { @connection.query(sql) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-foreign_keys\"> <span class=\"method-name\">foreign_keys</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"foreign_keys-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 538\n      def foreign_keys(table_name)\n        fk_info = select_all \"          SELECT fk.referenced_table_name as 'to_table'\n                ,fk.referenced_column_name as 'primary_key'\n                ,fk.column_name as 'column'\n                ,fk.constraint_name as 'name'\n          FROM information_schema.key_column_usage fk\n          WHERE fk.referenced_column_name is not null\n            AND fk.table_schema = '#{@config[:database]}'\n            AND fk.table_name = '#{table_name}'\n\".strip_heredoc\n\n        create_table_info = select_one(\"SHOW CREATE TABLE #{quote_table_name(table_name)}\")[\"Create Table\"]\n\n        fk_info.map do |row|\n          options = {\n            column: row['column'],\n            name: row['name'],\n            primary_key: row['primary_key']\n          }\n\n          options[:on_update] = extract_foreign_key_action(create_table_info, row['name'], \"UPDATE\")\n          options[:on_delete] = extract_foreign_key_action(create_table_info, row['name'], \"DELETE\")\n\n          ForeignKeyDefinition.new(table_name, row['to_table'], options)\n        end\n      end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_algorithms\"> <span class=\"method-name\">index_algorithms</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"index_algorithms-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 225\ndef index_algorithms\n  { default: 'ALGORITHM = DEFAULT', copy: 'ALGORITHM = COPY', inplace: 'ALGORITHM = INPLACE' }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-native_database_types\"> <span class=\"method-name\">native_database_types</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"native_database_types-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 221\ndef native_database_types\n  NATIVE_DATABASE_TYPES\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pk_and_sequence_for\"> <span class=\"method-name\">pk_and_sequence_for</span><span class=\"method-args\">(table)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a table's primary key and belonging sequence.</p> <div class=\"method-source-code\" id=\"pk_and_sequence_for-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 612\ndef pk_and_sequence_for(table)\n  execute_and_free(\"SHOW CREATE TABLE #{quote_table_name(table)}\", 'SCHEMA') do |result|\n    create_table = each_hash(result).first[:\"Create Table\"]\n    if create_table.to_s =~ /PRIMARY KEY\\s+(?:USING\\s+\\w+\\s+)?\\((.+)\\)/\n      keys = $1.split(\",\").map { |key| key.delete('`\"') }\n      keys.length == 1 ? [keys.first, nil] : nil\n    else\n      nil\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-primary_key\"> <span class=\"method-name\">primary_key</span><span class=\"method-args\">(table)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns just a table's primary key</p> <div class=\"method-source-code\" id=\"primary_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 625\ndef primary_key(table)\n  pk_and_sequence = pk_and_sequence_for(table)\n  pk_and_sequence &amp;&amp; pk_and_sequence.first\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_false\"> <span class=\"method-name\">quoted_false</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"quoted_false-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 273\ndef quoted_false\n  QUOTED_FALSE\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_true\"> <span class=\"method-name\">quoted_true</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"quoted_true-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 265\ndef quoted_true\n  QUOTED_TRUE\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-recreate_database\"> <span class=\"method-name\">recreate_database</span><span class=\"method-args\">(name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Drops the database specified on the <code>name</code> attribute and creates it again using the provided <code>options</code>.</p> <div class=\"method-source-code\" id=\"recreate_database-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 357\ndef recreate_database(name, options = {})\n  drop_database(name)\n  sql = create_database(name, options)\n  reconnect!\n  sql\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_index\"> <span class=\"method-name\">rename_index</span><span class=\"method-args\">(table_name, old_name, new_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"schemastatements#method-i-rename_index\">ActiveRecord::ConnectionAdapters::SchemaStatements#rename_index</a> </div> <div class=\"method-source-code\" id=\"rename_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 499\ndef rename_index(table_name, old_name, new_name)\n  if supports_rename_index?\n    validate_index_length!(table_name, new_name)\n\n    execute \"ALTER TABLE #{quote_table_name(table_name)} RENAME INDEX #{quote_table_name(old_name)} TO #{quote_table_name(new_name)}\"\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_table\"> <span class=\"method-name\">rename_table</span><span class=\"method-args\">(table_name, new_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Renames a table.</p> <p>Example:</p> <pre class=\"ruby\">rename_table('octopuses', 'octopi')\n</pre> <div class=\"method-source-code\" id=\"rename_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 490\ndef rename_table(table_name, new_name)\n  execute \"RENAME TABLE #{quote_table_name(table_name)} TO #{quote_table_name(new_name)}\"\n  rename_table_indexes(table_name, new_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-schema_creation\"> <span class=\"method-name\">schema_creation</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"schema_creation-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 57\ndef schema_creation\n  SchemaCreation.new self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-show_variable\"> <span class=\"method-name\">show_variable</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>SHOW VARIABLES LIKE 'name'</p> <div class=\"method-source-code\" id=\"show_variable-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 606\ndef show_variable(name)\n  variables = select_all(\"SHOW VARIABLES LIKE '#{name}'\", 'SCHEMA')\n  variables.first['Value'] unless variables.empty?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-strict_mode-3F\"> <span class=\"method-name\">strict_mode?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"strict_mode-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 651\ndef strict_mode?\n  self.class.type_cast_config_to_boolean(@config.fetch(:strict, true))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_foreign_keys-3F\"> <span class=\"method-name\">supports_foreign_keys?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_foreign_keys-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 213\ndef supports_foreign_keys?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_index_sort_order-3F\"> <span class=\"method-name\">supports_index_sort_order?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Technically MySQL allows to create indexes with the sort order syntax but at the moment (5.5) it doesn't yet implement them</p> <div class=\"method-source-code\" id=\"supports_index_sort_order-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 197\ndef supports_index_sort_order?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_indexes_in_create-3F\"> <span class=\"method-name\">supports_indexes_in_create?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_indexes_in_create-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 209\ndef supports_indexes_in_create?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_migrations-3F\"> <span class=\"method-name\">supports_migrations?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true, since this connection adapter supports migrations.</p> <div class=\"method-source-code\" id=\"supports_migrations-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 183\ndef supports_migrations?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_primary_key-3F\"> <span class=\"method-name\">supports_primary_key?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_primary_key-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 187\ndef supports_primary_key?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_transaction_isolation-3F\"> <span class=\"method-name\">supports_transaction_isolation?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>MySQL 4 technically support transaction isolation, but it is affected by a bug where the transaction level gets persisted for the whole session:</p> <p><a href=\"http://bugs.mysql.com/bug.php?id=39170\">bugs.mysql.com/bug.php?id=39170</a></p> <div class=\"method-source-code\" id=\"supports_transaction_isolation-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 205\ndef supports_transaction_isolation?\n  version[0] &gt;= 5\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_views-3F\"> <span class=\"method-name\">supports_views?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_views-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 217\ndef supports_views?\n  version[0] &gt;= 5\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_exists-3F\"> <span class=\"method-name\">table_exists?</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"table_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 415\ndef table_exists?(name)\n  return false unless name.present?\n  return true if tables(nil, nil, name).any?\n\n  name          = name.to_s\n  schema, table = name.split('.', 2)\n\n  unless table # A table was provided without a schema\n    table  = schema\n    schema = nil\n  end\n\n  tables(nil, schema, table).any?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-truncate\"> <span class=\"method-name\">truncate</span><span class=\"method-args\">(table_name, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"truncate-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 411\ndef truncate(table_name, name = nil)\n  execute \"TRUNCATE TABLE #{quote_table_name(table_name)}\", name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-type_to_sql\"> <span class=\"method-name\">type_to_sql</span><span class=\"method-args\">(type, limit = nil, precision = nil, scale = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Maps logical Rails types to MySQL-specific data types.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"type_to_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 567\ndef type_to_sql(type, limit = nil, precision = nil, scale = nil)\n  case type.to_s\n  when 'binary'\n    case limit\n    when 0..0xfff;           \"varbinary(#{limit})\"\n    when nil;                \"blob\"\n    when 0x1000..0xffffffff; \"blob(#{limit})\"\n    else raise(ActiveRecordError, \"No binary type has character length #{limit}\")\n    end\n  when 'integer'\n    case limit\n    when 1; 'tinyint'\n    when 2; 'smallint'\n    when 3; 'mediumint'\n    when nil, 4, 11; 'int(11)'  # compatibility with MySQL default\n    when 5..8; 'bigint'\n    else raise(ActiveRecordError, \"No integer type has byte size #{limit}\")\n    end\n  when 'text'\n    case limit\n    when 0..0xff;               'tinytext'\n    when nil, 0x100..0xffff;    'text'\n    when 0x10000..0xffffff;     'mediumtext'\n    when 0x1000000..0xffffffff; 'longtext'\n    else raise(ActiveRecordError, \"No text type has character length #{limit}\")\n    end\n  when 'datetime'\n    return super unless precision\n\n    case precision\n      when 0..6; \"datetime(#{precision})\"\n      else raise(ActiveRecordError, \"No datetime type has precision of #{precision}. The allowed range of precision is from 0 to 6.\")\n    end\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unquoted_false\"> <span class=\"method-name\">unquoted_false</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"unquoted_false-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 277\ndef unquoted_false\n  0\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unquoted_true\"> <span class=\"method-name\">unquoted_true</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"unquoted_true-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 269\ndef unquoted_true\n  1\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-valid_type-3F\"> <span class=\"method-name\">valid_type?</span><span class=\"method-args\">(type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"valid_type-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 655\ndef valid_type?(type)\n  !native_database_types[type].nil?\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_column_sql\"> <span class=\"method-name\">add_column_sql</span><span class=\"method-args\">(table_name, column_name, type, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"add_column_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 757\ndef add_column_sql(table_name, column_name, type, options = {})\n  td = create_table_definition table_name, options[:temporary], options[:options]\n  cd = td.new_column_definition(column_name, type, options)\n  schema_creation.visit_AddColumn cd\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_index_length\"> <span class=\"method-name\">add_index_length</span><span class=\"method-args\">(option_strings, column_names, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"add_index_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 721\ndef add_index_length(option_strings, column_names, options = {})\n  if options.is_a?(Hash) &amp;&amp; length = options[:length]\n    case length\n    when Hash\n      column_names.each {|name| option_strings[name] += \"(#{length[name]})\" if length.has_key?(name) &amp;&amp; length[name].present?}\n    when Fixnum\n      column_names.each {|name| option_strings[name] += \"(#{length})\"}\n    end\n  end\n\n  return option_strings\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_index_sql\"> <span class=\"method-name\">add_index_sql</span><span class=\"method-args\">(table_name, column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"add_index_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 799\ndef add_index_sql(table_name, column_name, options = {})\n  index_name, index_type, index_columns = add_index_options(table_name, column_name, options)\n  \"ADD #{index_type} INDEX #{index_name} (#{index_columns})\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_timestamps_sql\"> <span class=\"method-name\">add_timestamps_sql</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"add_timestamps_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 809\ndef add_timestamps_sql(table_name, options = {})\n  [add_column_sql(table_name, :created_at, :datetime, options), add_column_sql(table_name, :updated_at, :datetime, options)]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_column_sql\"> <span class=\"method-name\">change_column_sql</span><span class=\"method-args\">(table_name, column_name, type, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"change_column_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 763\ndef change_column_sql(table_name, column_name, type, options = {})\n  column = column_for(table_name, column_name)\n\n  unless options_include_default?(options)\n    options[:default] = column.default\n  end\n\n  unless options.has_key?(:null)\n    options[:null] = column.null\n  end\n\n  options[:name] = column.name\n  schema_creation.accept ChangeColumnDefinition.new column, type, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_columns_for_index\"> <span class=\"method-name\">quoted_columns_for_index</span><span class=\"method-args\">(column_names, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"quoted_columns_for_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 734\ndef quoted_columns_for_index(column_names, options = {})\n  option_strings = Hash[column_names.map {|name| [name, '']}]\n\n  # add index length\n  option_strings = add_index_length(option_strings, column_names, options)\n\n  # add index sort order\n  option_strings = add_index_sort_order(option_strings, column_names, options)\n\n  column_names.map {|name| quote_column_name(name) + option_strings[name]}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_column_sql\"> <span class=\"method-name\">remove_column_sql</span><span class=\"method-args\">(table_name, column_name, type = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"remove_column_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 791\ndef remove_column_sql(table_name, column_name, type = nil, options = {})\n  \"DROP #{quote_column_name(column_name)}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_columns_sql\"> <span class=\"method-name\">remove_columns_sql</span><span class=\"method-args\">(table_name, *column_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"remove_columns_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 795\ndef remove_columns_sql(table_name, *column_names)\n  column_names.map {|column_name| remove_column_sql(table_name, column_name) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_index_sql\"> <span class=\"method-name\">remove_index_sql</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"remove_index_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 804\ndef remove_index_sql(table_name, options = {})\n  index_name = index_name_for_remove(table_name, options)\n  \"DROP INDEX #{index_name}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_timestamps_sql\"> <span class=\"method-name\">remove_timestamps_sql</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"remove_timestamps_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 813\ndef remove_timestamps_sql(table_name, options = {})\n  [remove_column_sql(table_name, :updated_at), remove_column_sql(table_name, :created_at)]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_column_sql\"> <span class=\"method-name\">rename_column_sql</span><span class=\"method-args\">(table_name, column_name, new_column_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"rename_column_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 778\ndef rename_column_sql(table_name, column_name, new_column_name)\n  column  = column_for(table_name, column_name)\n  options = {\n    name: new_column_name,\n    default: column.default,\n    null: column.null,\n    auto_increment: column.extra == \"auto_increment\"\n  }\n\n  current_type = select_one(\"SHOW COLUMNS FROM #{quote_table_name(table_name)} LIKE '#{column_name}'\", 'SCHEMA')[\"Type\"]\n  schema_creation.accept ChangeColumnDefinition.new column, current_type, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-subquery_for\"> <span class=\"method-name\">subquery_for</span><span class=\"method-args\">(key, select)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>MySQL is too stupid to create a temporary table for use subquery, so we have to give it some prompting in the form of a subsubquery. Ugh!</p> <div class=\"method-source-code\" id=\"subquery_for-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 712\ndef subquery_for(key, select)\n  subsubselect = select.clone\n  subsubselect.projections = [key]\n\n  subselect = Arel::SelectManager.new(select.engine)\n  subselect.project Arel.sql(key.name)\n  subselect.from subsubselect.as('__active_record_temp')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-translate_exception\"> <span class=\"method-name\">translate_exception</span><span class=\"method-args\">(exception, message)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-translate_exception\">ActiveRecord::ConnectionAdapters::AbstractAdapter#translate_exception</a> </div> <div class=\"method-source-code\" id=\"translate_exception-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb, line 746\ndef translate_exception(exception, message)\n  case error_number(exception)\n  when 1062\n    RecordNotUnique.new(message, exception)\n  when 1452\n    InvalidForeignKey.new(message, exception)\n  else\n    super\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/columndumper":"<h1 id=\"module-ActiveRecord::ConnectionAdapters::ColumnDumper\" class=\"module\"> module ActiveRecord::ConnectionAdapters::ColumnDumper </h1> <section class=\"description\"> <p>The goal of this module is to move Adapter specific column definitions to the Adapter instead of having it in the schema dumper itself. This code represents the normal case. We can then redefine how certain data types may be handled in the schema dumper on the Adapter level by over-writing this code inside the database specific adapters</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column_spec\"> <span class=\"method-name\">column_spec</span><span class=\"method-args\">(column, types)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"column_spec-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_dumper.rb, line 9\ndef column_spec(column, types)\n  spec = prepare_column_options(column, types)\n  (spec.keys - [:name, :type]).each{ |k| spec[k].insert(0, \"#{k}: \")}\n  spec\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-migration_keys\"> <span class=\"method-name\">migration_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Lists the valid migration options</p> <div class=\"method-source-code\" id=\"migration_keys-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_dumper.rb, line 36\ndef migration_keys\n  [:name, :limit, :precision, :scale, :default, :null]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prepare_column_options\"> <span class=\"method-name\">prepare_column_options</span><span class=\"method-args\">(column, types)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This can be overridden on a Adapter level basis to support other extended datatypes (Example: Adding an array option in the <a href=\"postgresqladapter\">PostgreSQLAdapter</a>)</p> <div class=\"method-source-code\" id=\"prepare_column_options-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_dumper.rb, line 18\ndef prepare_column_options(column, types)\n  spec = {}\n  spec[:name]      = column.name.inspect\n  spec[:type]      = column.type.to_s\n  spec[:null]      = 'false' unless column.null\n\n  limit = column.limit || types[column.type][:limit]\n  spec[:limit]     = limit.inspect if limit\n  spec[:precision] = column.precision.inspect if column.precision\n  spec[:scale]     = column.scale.inspect if column.scale\n\n  default = schema_default(column) if column.has_default?\n  spec[:default]   = default unless default.nil?\n\n  spec\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/connectionhandler":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::ConnectionHandler\" class=\"class\"> class ActiveRecord::ConnectionAdapters::ConnectionHandler </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"connectionhandler\">ConnectionHandler</a> is a collection of <a href=\"connectionpool\">ConnectionPool</a> objects. It is used for keeping separate connection pools for Active Record models that connect to different databases.</p> <p>For example, suppose that you have 5 models, with the following hierarchy:</p> <pre class=\"ruby\">class Author &lt; ActiveRecord::Base\nend\n\nclass BankAccount &lt; ActiveRecord::Base\nend\n\nclass Book &lt; ActiveRecord::Base\n  establish_connection \"library_db\"\nend\n\nclass ScaryBook &lt; Book\nend\n\nclass GoodBook &lt; Book\nend\n</pre> <p>And a database.yml that looked like this:</p> <pre>development:\n  database: my_application\n  host: localhost\n\nlibrary_db:\n  database: library\n  host: some.library.org</pre> <p>Your primary database in the development environment is “my_application” but the Book model connects to a separate database called “library_db” (this can even be a database on a different machine).</p> <p>Book, ScaryBook and GoodBook will all use the same connection pool to “library_db” while Author, BankAccount, and any other models you create will use the default connection pool to “my_application”.</p> <p>The various connection pools are managed by a single instance of <a href=\"connectionhandler\">ConnectionHandler</a> accessible via <a href=\"../core#method-c-connection_handler\">ActiveRecord::Core.connection_handler</a>. All Active Record models use this handler to determine the connection pool that they should use.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 511\ndef initialize\n  # These caches are keyed by klass.name, NOT klass. Keying them by klass\n  # alone would lead to memory leaks in development mode as all previous\n  # instances of the class would stay in memory.\n  @owner_to_pool = ThreadSafe::Cache.new(:initial_capacity =&gt; 2) do |h,k|\n    h[k] = ThreadSafe::Cache.new(:initial_capacity =&gt; 2)\n  end\n  @class_to_pool = ThreadSafe::Cache.new(:initial_capacity =&gt; 2) do |h,k|\n    h[k] = ThreadSafe::Cache.new\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-active_connections-3F\"> <span class=\"method-name\">active_connections?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if there are any active connections among the connection pools that the <a href=\"connectionhandler\">ConnectionHandler</a> is managing.</p> <div class=\"method-source-code\" id=\"active_connections-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 544\ndef active_connections?\n  connection_pool_list.any?(&amp;:active_connection?)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_active_connections-21\"> <span class=\"method-name\">clear_active_connections!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns any connections in use by the current thread back to the pool, and also returns connections to the pool cached by threads that are no longer alive.</p> <div class=\"method-source-code\" id=\"clear_active_connections-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 551\ndef clear_active_connections!\n  connection_pool_list.each(&amp;:release_connection)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_all_connections-21\"> <span class=\"method-name\">clear_all_connections!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"clear_all_connections-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 560\ndef clear_all_connections!\n  connection_pool_list.each(&amp;:disconnect!)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_reloadable_connections-21\"> <span class=\"method-name\">clear_reloadable_connections!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears the cache which maps classes.</p> <div class=\"method-source-code\" id=\"clear_reloadable_connections-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 556\ndef clear_reloadable_connections!\n  connection_pool_list.each(&amp;:clear_reloadable_connections!)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connected-3F\"> <span class=\"method-name\">connected?</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if a connection that's accessible to this class has already been opened.</p> <div class=\"method-source-code\" id=\"connected-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 578\ndef connected?(klass)\n  conn = retrieve_connection_pool(klass)\n  conn &amp;&amp; conn.connected?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection_pool_list\"> <span class=\"method-name\">connection_pool_list</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"connection_pool_list-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 523\ndef connection_pool_list\n  owner_to_pool.values.compact\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection_pools\"> <span class=\"method-name\">connection_pools</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"connection_pools-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 527\n      def connection_pools\n        ActiveSupport::Deprecation.warn(\"          In the next release, this will return the same as `#connection_pool_list`.\n          (An array of pools, rather than a hash mapping specs to pools.)\n\".squish)\n\n        Hash[connection_pool_list.map { |pool| [pool.spec, pool] }]\n      end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-establish_connection\"> <span class=\"method-name\">establish_connection</span><span class=\"method-args\">(owner, spec)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"establish_connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 536\ndef establish_connection(owner, spec)\n  @class_to_pool.clear\n  raise RuntimeError, \"Anonymous class is not allowed.\" unless owner.name\n  owner_to_pool[owner.name] = ConnectionAdapters::ConnectionPool.new(spec)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_connection\"> <span class=\"method-name\">remove_connection</span><span class=\"method-args\">(owner)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove the connection for this class. This will close the active connection and the defined connection (if they exist). The result can be used as an argument for <a href=\"connectionhandler#method-i-establish_connection\">#establish_connection</a>, for easily re-establishing the connection.</p> <div class=\"method-source-code\" id=\"remove_connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 587\ndef remove_connection(owner)\n  if pool = owner_to_pool.delete(owner.name)\n    @class_to_pool.clear\n    pool.automatic_reconnect = false\n    pool.disconnect!\n    pool.spec.config\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-retrieve_connection_pool\"> <span class=\"method-name\">retrieve_connection_pool</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Retrieving the connection pool happens a lot so we cache it in @class_to_pool. This makes retrieving the connection pool O(1) once the process is warm. When a connection is established or removed, we invalidate the cache.</p> <p>Ideally we would use fetch here, as <a href=\"klass\">class_to_pool</a> may sometimes be nil. However, benchmarking (<a href=\"https://gist.github.com/jonleighton/3552829\">gist.github.com/jonleighton/3552829</a>) showed that fetch is significantly slower than []. So in the nil case, no caching will take place, but that's ok since the nil case is not the common one that we wish to optimise for.</p> <div class=\"method-source-code\" id=\"retrieve_connection_pool-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 605\ndef retrieve_connection_pool(klass)\n  class_to_pool[klass.name] ||= begin\n    until pool = pool_for(klass)\n      klass = klass.superclass\n      break unless klass &lt;= Base\n    end\n\n    class_to_pool[klass.name] = pool\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/connectionpool":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::ConnectionPool\" class=\"class\"> class ActiveRecord::ConnectionAdapters::ConnectionPool </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n\n</dl> <section class=\"description\"> <p>Connection pool base class for managing Active Record database connections.</p> <h2 id=\"class-ActiveRecord::ConnectionAdapters::ConnectionPool-label-Introduction\">Introduction</h2> <p>A connection pool synchronizes thread access to a limited number of database connections. The basic idea is that each thread checks out a database connection from the pool, uses that connection, and checks the connection back in. <a href=\"connectionpool\">ConnectionPool</a> is completely thread-safe, and will ensure that a connection cannot be used by two threads at the same time, as long as ConnectionPool's contract is correctly followed. It will also handle cases in which there are more threads than connections: if all connections have been checked out, and a thread tries to checkout a connection anyway, then <a href=\"connectionpool\">ConnectionPool</a> will wait until some other thread has checked in a connection.</p> <h2 id=\"class-ActiveRecord::ConnectionAdapters::ConnectionPool-label-Obtaining+-28checking+out-29+a+connection\">Obtaining (checking out) a connection</h2> <p>Connections can be obtained and used from a connection pool in several ways:</p> <ol>\n<li> <p>Simply use ActiveRecord::Base.connection as with Active Record 2.1 and earlier (pre-connection-pooling). Eventually, when you're done with the connection(s) and wish it to be returned to the pool, you call ActiveRecord::Base.clear_active_connections!. This will be the default behavior for Active Record when used in conjunction with Action Pack's request handling cycle.</p> </li>\n<li> <p>Manually check out a connection from the pool with ActiveRecord::Base.connection_pool.checkout. You are responsible for returning this connection to the pool when finished by calling ActiveRecord::Base.connection_pool.checkin(connection).</p> </li>\n<li> <p>Use ActiveRecord::Base.connection_pool.with_connection(&amp;block), which obtains a connection, yields it as the sole argument to the block, and returns it to the pool after the block completes.</p> </li>\n</ol> <p>Connections in the pool are actually <a href=\"abstractadapter\">AbstractAdapter</a> objects (or objects compatible with AbstractAdapter's interface).</p> <h2 id=\"class-ActiveRecord::ConnectionAdapters::ConnectionPool-label-Options\">Options</h2> <p>There are several connection-pooling-related options that you can add to your database connection configuration:</p> <ul>\n<li> <p><code>pool</code>: number indicating size of connection pool (default 5)</p> </li>\n<li> <p><code>checkout_timeout</code>: number of seconds to block and wait for a connection before giving up and raising a timeout error (default 5 seconds).</p> </li>\n<li> <p><code>reaping_frequency</code>: frequency in seconds to periodically run the <a href=\"connectionpool/reaper\">Reaper</a>, which attempts to find and recover connections from dead threads, which can occur if a programmer forgets to close a connection at the end of a thread or a thread dies unexpectedly. Regardless of this setting, the <a href=\"connectionpool/reaper\">Reaper</a> will be invoked before every blocking wait. (Default nil, which means don't schedule the <a href=\"connectionpool/reaper\">Reaper</a>).</p> </li>\n</ul> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-automatic_reconnect\"> <span class=\"method-name\">automatic_reconnect</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-checkout_timeout\"> <span class=\"method-name\">checkout_timeout</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-connections\"> <span class=\"method-name\">connections</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-reaper\"> <span class=\"method-name\">reaper</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-size\"> <span class=\"method-name\">size</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-spec\"> <span class=\"method-name\">spec</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(spec)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a new <a href=\"connectionpool\">ConnectionPool</a> object. <code>spec</code> is a ConnectionSpecification object which describes database connection information (e.g. adapter, host name, username, password, etc), as well as the maximum size for this <a href=\"connectionpool\">ConnectionPool</a>.</p> <p>The default <a href=\"connectionpool\">ConnectionPool</a> maximum size is 5.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 233\ndef initialize(spec)\n  super()\n\n  @spec = spec\n\n  @checkout_timeout = (spec.config[:checkout_timeout] &amp;&amp; spec.config[:checkout_timeout].to_f) || 5\n  @reaper = Reaper.new(self, (spec.config[:reaping_frequency] &amp;&amp; spec.config[:reaping_frequency].to_f))\n  @reaper.run\n\n  # default max pool size to 5\n  @size = (spec.config[:pool] &amp;&amp; spec.config[:pool].to_i) || 5\n\n  # The cache of reserved connections mapped to threads\n  @reserved_connections = ThreadSafe::Cache.new(:initial_capacity =&gt; @size)\n\n  @connections         = []\n  @automatic_reconnect = true\n\n  @available = Queue.new self\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-active_connection-3F\"> <span class=\"method-name\">active_connection?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is there an open connection that is being used for the current thread?</p> <div class=\"method-source-code\" id=\"active_connection-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 268\ndef active_connection?\n  synchronize do\n    @reserved_connections.fetch(current_connection_id) {\n      return false\n    }.in_use?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-checkin\"> <span class=\"method-name\">checkin</span><span class=\"method-args\">(conn)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Check-in a database connection back into the pool, indicating that you no longer need this connection.</p> <p><code>conn</code>: an <a href=\"abstractadapter\">AbstractAdapter</a> object, which was obtained by earlier by calling <code>checkout</code> on this pool.</p> <div class=\"method-source-code\" id=\"checkin-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 360\ndef checkin(conn)\n  synchronize do\n    owner = conn.owner\n\n    conn.run_callbacks :checkin do\n      conn.expire\n    end\n\n    release conn, owner\n\n    @available.add conn\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-checkout\"> <span class=\"method-name\">checkout</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Check-out a database connection from the pool, indicating that you want to use it. You should call <a href=\"connectionpool#method-i-checkin\">checkin</a> when you no longer need this.</p> <p>This is done by either returning and leasing existing connection, or by creating a new connection and leasing it.</p> <p>If all connections are leased and the pool is at capacity (meaning the number of currently leased connections is greater than or equal to the size limit set), an <a href=\"../connectiontimeouterror\">ActiveRecord::ConnectionTimeoutError</a> exception will be raised.</p> <p>Returns: an <a href=\"abstractadapter\">AbstractAdapter</a> object.</p> <p>Raises:</p> <ul><li> <p>ConnectionTimeoutError: no connection can be obtained from the pool.</p> </li></ul> <div class=\"method-source-code\" id=\"checkout-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 347\ndef checkout\n  synchronize do\n    conn = acquire_connection\n    conn.lease\n    checkout_and_verify(conn)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_reloadable_connections-21\"> <span class=\"method-name\">clear_reloadable_connections!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears the cache which maps classes.</p> <div class=\"method-source-code\" id=\"clear_reloadable_connections-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 316\ndef clear_reloadable_connections!\n  synchronize do\n    @reserved_connections.clear\n    @connections.each do |conn|\n      checkin conn\n      conn.disconnect! if conn.requires_reloading?\n    end\n    @connections.delete_if do |conn|\n      conn.requires_reloading?\n    end\n    @available.clear\n    @connections.each do |conn|\n      @available.add conn\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connected-3F\"> <span class=\"method-name\">connected?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if a connection has already been opened.</p> <div class=\"method-source-code\" id=\"connected-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 298\ndef connected?\n  synchronize { @connections.any? }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection\"> <span class=\"method-name\">connection</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Retrieve the connection associated with the current thread, or call <a href=\"connectionpool#method-i-checkout\">checkout</a> to obtain one if necessary.</p> <p><a href=\"connectionpool#method-i-connection\">connection</a> can be called any number of times; the connection is held in a hash keyed by the thread id.</p> <div class=\"method-source-code\" id=\"connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 259\ndef connection\n  # this is correctly done double-checked locking\n  # (ThreadSafe::Cache's lookups have volatile semantics)\n  @reserved_connections[current_connection_id] || synchronize do\n    @reserved_connections[current_connection_id] ||= checkout\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disconnect-21\"> <span class=\"method-name\">disconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disconnects all connections in the pool, and clears the pool.</p> <div class=\"method-source-code\" id=\"disconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 303\ndef disconnect!\n  synchronize do\n    @reserved_connections.clear\n    @connections.each do |conn|\n      checkin conn\n      conn.disconnect!\n    end\n    @connections = []\n    @available.clear\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reap\"> <span class=\"method-name\">reap</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Recover lost connections for the pool. A lost connection can occur if a programmer forgets to checkin a connection at the end of a thread or a thread dies unexpectedly.</p> <div class=\"method-source-code\" id=\"reap-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 390\ndef reap\n  stale_connections = synchronize do\n    @connections.select do |conn|\n      conn.in_use? &amp;&amp; !conn.owner.alive?\n    end\n  end\n\n  stale_connections.each do |conn|\n    synchronize do\n      if conn.active?\n        conn.reset!\n        checkin conn\n      else\n        remove conn\n      end\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-release_connection\"> <span class=\"method-name\">release_connection</span><span class=\"method-args\">(with_id = current_connection_id)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Signal that the thread is finished with the current connection. <a href=\"connectionpool#method-i-release_connection\">release_connection</a> releases the connection-thread association and returns the connection to the pool.</p> <div class=\"method-source-code\" id=\"release_connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 279\ndef release_connection(with_id = current_connection_id)\n  synchronize do\n    conn = @reserved_connections.delete(with_id)\n    checkin conn if conn\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove\"> <span class=\"method-name\">remove</span><span class=\"method-args\">(conn)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove a connection from the connection pool. The connection will remain open and active but will no longer be managed by this pool.</p> <div class=\"method-source-code\" id=\"remove-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 376\ndef remove(conn)\n  synchronize do\n    @connections.delete conn\n    @available.delete conn\n\n    release conn, conn.owner\n\n    @available.add checkout_new_connection if @available.any_waiting?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_connection\"> <span class=\"method-name\">with_connection</span><span class=\"method-args\">() { |connection| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If a connection already exists yield it to the block. If no connection exists checkout a connection, yield it to the block, and checkin the connection when finished.</p> <div class=\"method-source-code\" id=\"with_connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 289\ndef with_connection\n  connection_id = current_connection_id\n  fresh_connection = true unless active_connection?\n  yield connection\nensure\n  release_connection(connection_id) if fresh_connection\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/connectionpool/queue":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::ConnectionPool::Queue\" class=\"class\"> class ActiveRecord::ConnectionAdapters::ConnectionPool::Queue </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Threadsafe, fair, FIFO queue. Meant to be used by <a href=\"../connectionpool\">ConnectionPool</a> with which it shares a Monitor. But could be a generic <a href=\"queue\">Queue</a>.</p> <p>The <a href=\"queue\">Queue</a> in stdlib's 'thread' could replace this class except stdlib's doesn't support waiting with a timeout.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(lock = Monitor.new)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 74\ndef initialize(lock = Monitor.new)\n  @lock = lock\n  @cond = @lock.new_cond\n  @num_waiting = 0\n  @queue = []\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add\"> <span class=\"method-name\">add</span><span class=\"method-args\">(element)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add <code>element</code> to the queue. Never blocks.</p> <div class=\"method-source-code\" id=\"add-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 97\ndef add(element)\n  synchronize do\n    @queue.push element\n    @cond.signal\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-any_waiting-3F\"> <span class=\"method-name\">any_waiting?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Test if any threads are currently waiting on the queue.</p> <div class=\"method-source-code\" id=\"any_waiting-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 82\ndef any_waiting?\n  synchronize do\n    @num_waiting &gt; 0\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove all elements from the queue.</p> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 112\ndef clear\n  synchronize do\n    @queue.clear\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(element)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If <code>element</code> is in the queue, remove and return it, or nil.</p> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 105\ndef delete(element)\n  synchronize do\n    @queue.delete(element)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-num_waiting\"> <span class=\"method-name\">num_waiting</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the number of threads currently waiting on this queue.</p> <div class=\"method-source-code\" id=\"num_waiting-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 90\ndef num_waiting\n  synchronize do\n    @num_waiting\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-poll\"> <span class=\"method-name\">poll</span><span class=\"method-args\">(timeout = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove the head of the queue.</p> <p>If <code>timeout</code> is not given, remove and return the head the queue if the number of available elements is strictly greater than the number of threads currently waiting (that is, don't jump ahead in line). Otherwise, return nil.</p> <p>If <code>timeout</code> is given, block if it there is no element available, waiting up to <code>timeout</code> seconds for an element to become available.</p> <p>Raises:</p> <ul><li> <p><a href=\"../../connectiontimeouterror\">ConnectionTimeoutError</a> if <code>timeout</code> is given and no element</p> </li></ul> <p>becomes available after <code>timeout</code> seconds,</p> <div class=\"method-source-code\" id=\"poll-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 132\ndef poll(timeout = nil)\n  synchronize do\n    if timeout\n      no_wait_poll || wait_poll(timeout)\n    else\n      no_wait_poll\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/connectionpool/reaper":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper\" class=\"class\"> class ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Every <code>frequency</code> seconds, the reaper will call <code>reap</code> on <code>pool</code>. A reaper instantiated with a nil frequency will never reap the connection pool.</p> <p>Configure the frequency by setting “reaping_frequency” in your database yaml file.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-frequency\"> <span class=\"method-name\">frequency</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-pool\"> <span class=\"method-name\">pool</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(pool, frequency)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 206\ndef initialize(pool, frequency)\n  @pool      = pool\n  @frequency = frequency\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-run\"> <span class=\"method-name\">run</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"run-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb, line 211\ndef run\n  return unless frequency\n  Thread.new(frequency, pool) { |t, p|\n    while true\n      sleep t\n      p.reap\n    end\n  }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/databaselimits":"<h1 id=\"module-ActiveRecord::ConnectionAdapters::DatabaseLimits\" class=\"module\"> module ActiveRecord::ConnectionAdapters::DatabaseLimits </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-allowed_index_name_length\"> <span class=\"method-name\">allowed_index_name_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum allowed length for an index name. This limit is enforced by rails and Is less than or equal to <code>index_name_length</code>. The gap between <code>index_name_length</code> is to allow internal rails operations to use prefixes in temporary operations.</p> <div class=\"method-source-code\" id=\"allowed_index_name_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 25\ndef allowed_index_name_length\n  index_name_length\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column_name_length\"> <span class=\"method-name\">column_name_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum length of a column name.</p> <div class=\"method-source-code\" id=\"column_name_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 11\ndef column_name_length\n  64\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-columns_per_multicolumn_index\"> <span class=\"method-name\">columns_per_multicolumn_index</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum number of columns in a multicolumn index.</p> <div class=\"method-source-code\" id=\"columns_per_multicolumn_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 45\ndef columns_per_multicolumn_index\n  16\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-columns_per_table\"> <span class=\"method-name\">columns_per_table</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum number of columns per table.</p> <div class=\"method-source-code\" id=\"columns_per_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 35\ndef columns_per_table\n  1024\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-in_clause_length\"> <span class=\"method-name\">in_clause_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum number of elements in an IN (x,y,z) clause. nil means no limit.</p> <div class=\"method-source-code\" id=\"in_clause_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 51\ndef in_clause_length\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_name_length\"> <span class=\"method-name\">index_name_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum length of an index name.</p> <div class=\"method-source-code\" id=\"index_name_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 30\ndef index_name_length\n  64\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-indexes_per_table\"> <span class=\"method-name\">indexes_per_table</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum number of indexes per table.</p> <div class=\"method-source-code\" id=\"indexes_per_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 40\ndef indexes_per_table\n  16\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-joins_per_query\"> <span class=\"method-name\">joins_per_query</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns maximum number of joins in a single query.</p> <div class=\"method-source-code\" id=\"joins_per_query-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 61\ndef joins_per_query\n  256\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sql_query_length\"> <span class=\"method-name\">sql_query_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum length of an SQL query.</p> <div class=\"method-source-code\" id=\"sql_query_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 56\ndef sql_query_length\n  1048575\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_alias_length\"> <span class=\"method-name\">table_alias_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum length of a table alias.</p> <div class=\"method-source-code\" id=\"table_alias_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 6\ndef table_alias_length\n  255\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_name_length\"> <span class=\"method-name\">table_name_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the maximum length of a table name.</p> <div class=\"method-source-code\" id=\"table_name_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_limits.rb, line 16\ndef table_name_length\n  64\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/databasestatements":"<h1 id=\"module-ActiveRecord::ConnectionAdapters::DatabaseStatements\" class=\"module\"> module ActiveRecord::ConnectionAdapters::DatabaseStatements </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 4\ndef initialize\n  super\n  reset_transaction\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_transaction_record\"> <span class=\"method-name\">add_transaction_record</span><span class=\"method-args\">(record)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register a record with the current transaction so that its after_commit and after_rollback callbacks can be called.</p> <div class=\"method-source-code\" id=\"add_transaction_record-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 233\ndef add_transaction_record(record)\n  current_transaction.add_record(record)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-begin_db_transaction\"> <span class=\"method-name\">begin_db_transaction</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Begins the transaction (and turns off auto-committing).</p> <div class=\"method-source-code\" id=\"begin_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 242\ndef begin_db_transaction()    end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-begin_isolated_db_transaction\"> <span class=\"method-name\">begin_isolated_db_transaction</span><span class=\"method-args\">(isolation)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Begins the transaction with the isolation level set. Raises an error by default; adapters that support setting the isolation level should implement this method.</p> <div class=\"method-source-code\" id=\"begin_isolated_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 256\ndef begin_isolated_db_transaction(isolation)\n  raise ActiveRecord::TransactionIsolationError, \"adapter does not support setting transaction isolation\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-commit_db_transaction\"> <span class=\"method-name\">commit_db_transaction</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Commits the transaction (and turns on auto-committing).</p> <div class=\"method-source-code\" id=\"commit_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 261\ndef commit_db_transaction()   end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(arel, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes the delete statement and returns the number of rows affected.</p> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 118\ndef delete(arel, name = nil, binds = [])\n  exec_delete(to_sql(arel, binds), name, binds)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_delete\"> <span class=\"method-name\">exec_delete</span><span class=\"method-args\">(sql, name, binds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes delete <code>sql</code> statement in the context of this connection using <code>binds</code> as the bind substitutes. <code>name</code> is logged along with the executed <code>sql</code> statement.</p> <div class=\"method-source-code\" id=\"exec_delete-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 82\ndef exec_delete(sql, name, binds)\n  exec_query(sql, name, binds)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_insert\"> <span class=\"method-name\">exec_insert</span><span class=\"method-args\">(sql, name, binds, pk = nil, sequence_name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes insert <code>sql</code> statement in the context of this connection using <code>binds</code> as the bind substitutes. <code>name</code> is logged along with the executed <code>sql</code> statement.</p> <div class=\"method-source-code\" id=\"exec_insert-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 75\ndef exec_insert(sql, name, binds, pk = nil, sequence_name = nil)\n  exec_query(sql, name, binds)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_query\"> <span class=\"method-name\">exec_query</span><span class=\"method-args\">(sql, name = 'SQL', binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes <code>sql</code> statement in the context of this connection using <code>binds</code> as the bind substitutes. <code>name</code> is logged along with the executed <code>sql</code> statement.</p> <div class=\"method-source-code\" id=\"exec_query-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 69\ndef exec_query(sql, name = 'SQL', binds = [])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_update\"> <span class=\"method-name\">exec_update</span><span class=\"method-args\">(sql, name, binds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes update <code>sql</code> statement in the context of this connection using <code>binds</code> as the bind substitutes. <code>name</code> is logged along with the executed <code>sql</code> statement.</p> <div class=\"method-source-code\" id=\"exec_update-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 94\ndef exec_update(sql, name, binds)\n  exec_query(sql, name, binds)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-execute\"> <span class=\"method-name\">execute</span><span class=\"method-args\">(sql, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes the SQL statement in the context of this connection.</p> <div class=\"method-source-code\" id=\"execute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 62\ndef execute(sql, name = nil)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-insert\"> <span class=\"method-name\">insert</span><span class=\"method-args\">(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the last auto-generated ID from the affected table.</p> <p><code>id_value</code> will be returned unless the value is nil, in which case the database will attempt to calculate the last inserted id and return that value.</p> <p>If the next id was calculated in advance (as in Oracle), it should be passed in as <code>id_value</code>.</p> <div class=\"method-source-code\" id=\"insert-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 106\ndef insert(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])\n  sql, binds = sql_for_insert(to_sql(arel, binds), pk, id_value, sequence_name, binds)\n  value      = exec_insert(sql, name, binds, pk, sequence_name)\n  id_value || last_inserted_id(value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rollback_db_transaction\"> <span class=\"method-name\">rollback_db_transaction</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Rolls back the transaction (and turns on auto-committing). Must be done if the transaction block raises an exception or returns false.</p> <div class=\"method-source-code\" id=\"rollback_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 265\ndef rollback_db_transaction\n  exec_rollback_db_transaction\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_all\"> <span class=\"method-name\">select_all</span><span class=\"method-args\">(arel, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an <a href=\"../result\">ActiveRecord::Result</a> instance.</p> <div class=\"method-source-code\" id=\"select_all-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 30\ndef select_all(arel, name = nil, binds = [])\n  arel, binds = binds_from_relation arel, binds\n  select(to_sql(arel, binds), name, binds)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_one\"> <span class=\"method-name\">select_one</span><span class=\"method-args\">(arel, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a record hash with the column names as keys and column values as values.</p> <div class=\"method-source-code\" id=\"select_one-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 37\ndef select_one(arel, name = nil, binds = [])\n  select_all(arel, name, binds).first\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_rows\"> <span class=\"method-name\">select_rows</span><span class=\"method-args\">(sql, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of arrays containing the field values. Order is the same as that returned by <code>columns</code>.</p> <div class=\"method-source-code\" id=\"select_rows-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 57\ndef select_rows(sql, name = nil, binds = [])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_value\"> <span class=\"method-name\">select_value</span><span class=\"method-args\">(arel, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a single value from a record</p> <div class=\"method-source-code\" id=\"select_value-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 42\ndef select_value(arel, name = nil, binds = [])\n  if result = select_one(arel, name, binds)\n    result.values.first\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_values\"> <span class=\"method-name\">select_values</span><span class=\"method-args\">(arel, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of the values of the first column in a select:</p> <pre>select_values(\"SELECT id FROM companies LIMIT 3\") =&gt; [1,2,3]</pre> <div class=\"method-source-code\" id=\"select_values-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 50\ndef select_values(arel, name = nil)\n  arel, binds = binds_from_relation arel, []\n  select_rows(to_sql(arel, binds), name, binds).map(&amp;:first)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_statement_cache-3F\"> <span class=\"method-name\">supports_statement_cache?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> when the connection adapter supports prepared statement caching, otherwise returns <code>false</code></p> <div class=\"method-source-code\" id=\"supports_statement_cache-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 124\ndef supports_statement_cache?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_sql\"> <span class=\"method-name\">to_sql</span><span class=\"method-args\">(arel, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts an arel AST to SQL</p> <div class=\"method-source-code\" id=\"to_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 10\ndef to_sql(arel, binds = [])\n  if arel.respond_to?(:ast)\n    collected = visitor.accept(arel.ast, collector)\n    collected.compile(binds.dup, self)\n  else\n    arel\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transaction\"> <span class=\"method-name\">transaction</span><span class=\"method-args\">(options = {}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the given block in a database transaction, and returns the result of the block.</p> <h2 id=\"method-i-transaction-label-Nested+transactions+support\">Nested transactions support</h2> <p>Most databases don't support true nested transactions. At the time of writing, the only database that supports true nested transactions that we're aware of, is MS-SQL.</p> <p>In order to get around this problem, <a href=\"databasestatements#method-i-transaction\">transaction</a> will emulate the effect of nested transactions, by using savepoints: <a href=\"http://dev.mysql.com/doc/refman/5.0/en/savepoint.html\">dev.mysql.com/doc/refman/5.0/en/savepoint.html</a> Savepoints are supported by MySQL and <a href=\"postgresql\">PostgreSQL</a>. SQLite3 version &gt;= '3.6.8' supports savepoints.</p> <p>It is safe to call this method if a database transaction is already open, i.e. if <a href=\"databasestatements#method-i-transaction\">transaction</a> is called within another <a href=\"databasestatements#method-i-transaction\">transaction</a> block. In case of a nested call, <a href=\"databasestatements#method-i-transaction\">transaction</a> will behave as follows:</p> <ul>\n<li> <p>The block will be run without doing anything. All database statements that happen within the block are effectively appended to the already open database transaction.</p> </li>\n<li> <p>However, if <code>:requires_new</code> is set, the block will be wrapped in a database savepoint acting as a sub-transaction.</p> </li>\n</ul> <h3 id=\"method-i-transaction-label-Caveats\">Caveats</h3> <p>MySQL doesn't support DDL transactions. If you perform a DDL operation, then any created savepoints will be automatically released. For example, if you've created a savepoint, then you execute a CREATE TABLE statement, then the savepoint that was created will be automatically released.</p> <p>This means that, on MySQL, you shouldn't execute DDL operations inside a <a href=\"databasestatements#method-i-transaction\">transaction</a> call that you know might create a savepoint. Otherwise, <a href=\"databasestatements#method-i-transaction\">transaction</a> will raise exceptions when it tries to release the already-automatically-released savepoints:</p> <pre>Model.connection.transaction do  # BEGIN\n  Model.connection.transaction(requires_new: true) do  # CREATE SAVEPOINT active_record_1\n    Model.connection.create_table(...)\n    # active_record_1 now automatically released\n  end  # RELEASE SAVEPOINT active_record_1  &lt;--- BOOM! database error!\nend</pre> <h2 id=\"method-i-transaction-label-Transaction+isolation\">Transaction isolation</h2> <p>If your database supports setting the isolation level for a transaction, you can set it like so:</p> <pre class=\"ruby\">Post.transaction(isolation: :serializable) do\n  # ...\nend\n</pre> <p>Valid isolation levels are:</p> <ul>\n<li> <p><code>:read_uncommitted</code></p> </li>\n<li> <p><code>:read_committed</code></p> </li>\n<li> <p><code>:repeatable_read</code></p> </li>\n<li> <p><code>:serializable</code></p> </li>\n</ul> <p>You should consult the documentation for your database to understand the semantics of these different levels:</p> <ul>\n<li> <p><a href=\"http://www.postgresql.org/docs/9.1/static/transaction-iso.html\">www.postgresql.org/docs/9.1/static/transaction-iso.html</a></p> </li>\n<li> <p><a href=\"https://dev.mysql.com/doc/refman/5.0/en/set-transaction.html\">dev.mysql.com/doc/refman/5.0/en/set-transaction.html</a></p> </li>\n</ul> <p>An <code>ActiveRecord::TransactionIsolationError</code> will be raised if:</p> <ul>\n<li> <p>The adapter does not support setting the isolation level</p> </li>\n<li> <p>You are joining an existing open transaction</p> </li>\n<li> <p>You are creating a nested (savepoint) transaction</p> </li>\n</ul> <p>The mysql, mysql2 and postgresql adapters support setting the transaction isolation level. However, support is disabled for MySQL versions below 5, because they are affected by a <a href=\"http://bugs.mysql.com/bug.php?id=39170\">bug</a> which means the isolation level gets persisted outside the transaction.</p> <div class=\"method-source-code\" id=\"transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 204\ndef transaction(options = {})\n  options.assert_valid_keys :requires_new, :joinable, :isolation\n\n  if !options[:requires_new] &amp;&amp; current_transaction.joinable?\n    if options[:isolation]\n      raise ActiveRecord::TransactionIsolationError, \"cannot set isolation when joining a transaction\"\n    end\n    yield\n  else\n    transaction_manager.within_new_transaction(options) { yield }\n  end\nrescue ActiveRecord::Rollback\n  # rollbacks are silently swallowed\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transaction_isolation_levels\"> <span class=\"method-name\">transaction_isolation_levels</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"transaction_isolation_levels-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 244\ndef transaction_isolation_levels\n  {\n    read_uncommitted: \"READ UNCOMMITTED\",\n    read_committed:   \"READ COMMITTED\",\n    repeatable_read:  \"REPEATABLE READ\",\n    serializable:     \"SERIALIZABLE\"\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transaction_open-3F\"> <span class=\"method-name\">transaction_open?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"transaction_open-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 223\ndef transaction_open?\n  current_transaction.open?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transaction_state\"> <span class=\"method-name\">transaction_state</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"transaction_state-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 237\ndef transaction_state\n  current_transaction.state\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-truncate\"> <span class=\"method-name\">truncate</span><span class=\"method-args\">(table_name, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes the truncate statement.</p> <div class=\"method-source-code\" id=\"truncate-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 87\ndef truncate(table_name, name = nil)\n  raise NotImplementedError\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update\"> <span class=\"method-name\">update</span><span class=\"method-args\">(arel, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes the update statement and returns the number of rows affected.</p> <div class=\"method-source-code\" id=\"update-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 113\ndef update(arel, name = nil, binds = [])\n  exec_update(to_sql(arel, binds), name, binds)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/mysql2adapter":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::Mysql2Adapter\" class=\"class\"> class ActiveRecord::ConnectionAdapters::Mysql2Adapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"abstractmysqladapter\">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ADAPTER_NAME\">ADAPTER_NAME </dt>\n\n<dt id=\"MAX_INDEX_LENGTH_FOR_UTF8MB4\">MAX_INDEX_LENGTH_FOR_UTF8MB4 </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(connection, logger, connection_options, config)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractmysqladapter#method-c-new\">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 34\ndef initialize(connection, logger, connection_options, config)\n  super\n  @prepared_statements = false\n  configure_connection\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-active-3F\"> <span class=\"method-name\">active?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"active-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 89\ndef active?\n  return false unless @connection\n  @connection.ping\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-create\"> <span class=\"method-name\">create</span><span class=\"method-args\">(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"mysql2adapter#method-i-insert_sql\">insert_sql</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disconnect-21\"> <span class=\"method-name\">disconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disconnects from the database if already connected. Otherwise, this method does nothing.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-disconnect-21\">ActiveRecord::ConnectionAdapters::AbstractAdapter#disconnect!</a> </div> <div class=\"method-source-code\" id=\"disconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 103\ndef disconnect!\n  super\n  unless @connection.nil?\n    @connection.close\n    @connection = nil\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-error_number\"> <span class=\"method-name\">error_number</span><span class=\"method-args\">(exception)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"error_number-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 65\ndef error_number(exception)\n  exception.error_number if exception.respond_to?(:error_number)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_delete\"> <span class=\"method-name\">exec_delete</span><span class=\"method-args\">(sql, name, binds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_delete-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 251\ndef exec_delete(sql, name, binds)\n  execute to_sql(sql, binds), name\n  @connection.affected_rows\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"mysql2adapter#method-i-exec_update\">exec_update</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_insert\"> <span class=\"method-name\">exec_insert</span><span class=\"method-args\">(sql, name, binds, pk = nil, sequence_name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_insert-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 247\ndef exec_insert(sql, name, binds, pk = nil, sequence_name = nil)\n  execute to_sql(sql, binds), name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_query\"> <span class=\"method-name\">exec_query</span><span class=\"method-args\">(sql, name = 'SQL', binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_query-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 234\ndef exec_query(sql, name = 'SQL', binds = [])\n  result = execute(sql, name)\n  ActiveRecord::Result.new(result.fields, result.to_a)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"mysql2adapter#method-i-exec_without_stmt\">exec_without_stmt</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-exec_update\"> <span class=\"method-name\">exec_update</span><span class=\"method-args\">(sql, name, binds)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"mysql2adapter#method-i-exec_delete\">exec_delete</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-exec_without_stmt\"> <span class=\"method-name\">exec_without_stmt</span><span class=\"method-args\">(sql, name = 'SQL', binds = [])</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"mysql2adapter#method-i-exec_query\">exec_query</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-execute\"> <span class=\"method-name\">execute</span><span class=\"method-args\">(sql, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes the SQL statement in the context of this connection.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractmysqladapter#method-i-execute\">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter#execute</a> </div> <div class=\"method-source-code\" id=\"execute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 224\ndef execute(sql, name = nil)\n  if @connection\n    # make sure we carry over any changes to ActiveRecord::Base.default_timezone that have been\n    # made since we established the connection\n    @connection.query_options[:database_timezone] = ActiveRecord::Base.default_timezone\n  end\n\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-explain\"> <span class=\"method-name\">explain</span><span class=\"method-args\">(arel, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"explain-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 115\ndef explain(arel, binds = [])\n  sql     = \"EXPLAIN #{to_sql(arel, binds.dup)}\"\n  start   = Time.now\n  result  = exec_query(sql, 'EXPLAIN', binds)\n  elapsed = Time.now - start\n\n  ExplainPrettyPrinter.new.pp(result, elapsed)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initialize_schema_migrations_table\"> <span class=\"method-name\">initialize_schema_migrations_table</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"initialize_schema_migrations_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 41\ndef initialize_schema_migrations_table\n  if charset == 'utf8mb4'\n    ActiveRecord::SchemaMigration.create_table(MAX_INDEX_LENGTH_FOR_UTF8MB4)\n  else\n    ActiveRecord::SchemaMigration.create_table\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-insert_sql\"> <span class=\"method-name\">insert_sql</span><span class=\"method-args\">(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"insert_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 241\ndef insert_sql(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)\n  super\n  id_value || @connection.last_id\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"mysql2adapter#method-i-create\">create</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last_inserted_id\"> <span class=\"method-name\">last_inserted_id</span><span class=\"method-args\">(result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"last_inserted_id-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 257\ndef last_inserted_id(result)\n  @connection.last_id\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote_string\"> <span class=\"method-name\">quote_string</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"quote_string-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 73\ndef quote_string(string)\n  @connection.escape(string)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_date\"> <span class=\"method-name\">quoted_date</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"quoting#method-i-quoted_date\">ActiveRecord::ConnectionAdapters::Quoting#quoted_date</a> </div> <div class=\"method-source-code\" id=\"quoted_date-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 77\ndef quoted_date(value)\n  if value.acts_like?(:time) &amp;&amp; value.respond_to?(:usec)\n    \"#{super}.#{sprintf(\"%06d\", value.usec)}\"\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reconnect-21\"> <span class=\"method-name\">reconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-reconnect-21\">ActiveRecord::ConnectionAdapters::AbstractAdapter#reconnect!</a> </div> <div class=\"method-source-code\" id=\"reconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 94\ndef reconnect!\n  super\n  disconnect!\n  connect\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"mysql2adapter#method-i-reset-21\">reset!</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-reset-21\"> <span class=\"method-name\">reset!</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"mysql2adapter#method-i-reconnect-21\">reconnect!</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_rows\"> <span class=\"method-name\">select_rows</span><span class=\"method-args\">(sql, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of arrays containing the field values. Order is the same as that returned by <code>columns</code>.</p> <div class=\"method-source-code\" id=\"select_rows-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 219\ndef select_rows(sql, name = nil, binds = [])\n  execute(sql, name).to_a\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_explain-3F\"> <span class=\"method-name\">supports_explain?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_explain-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb, line 49\ndef supports_explain?\n  true\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/mysqladapter":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::MysqlAdapter\" class=\"class\"> class ActiveRecord::ConnectionAdapters::MysqlAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"abstractmysqladapter\">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter</a></dd>\n</dl> <section class=\"description\"> <p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based MySQL adapter that comes bundled with Active Record, and with the faster C-based MySQL/Ruby adapter (available both as a gem and from <a href=\"http://www.tmtm.org/en/mysql/ruby\">www.tmtm.org/en/mysql/ruby</a>/).</p> <p>Options:</p> <ul>\n<li> <p><code>:host</code> - Defaults to “localhost”.</p> </li>\n<li> <p><code>:port</code> - Defaults to 3306.</p> </li>\n<li> <p><code>:socket</code> - Defaults to “/tmp/mysql.sock”.</p> </li>\n<li> <p><code>:username</code> - Defaults to “root”</p> </li>\n<li> <p><code>:password</code> - Defaults to nothing.</p> </li>\n<li> <p><code>:database</code> - The name of the database. No default, must be provided.</p> </li>\n<li> <p><code>:encoding</code> - (Optional) Sets the client encoding by executing “SET NAMES &lt;encoding&gt;” after connection.</p> </li>\n<li> <p><code>:reconnect</code> - Defaults to false (See MySQL documentation: <a href=\"http://dev.mysql.com/doc/refman/5.0/en/auto-reconnect.html\">dev.mysql.com/doc/refman/5.0/en/auto-reconnect.html</a>).</p> </li>\n<li> <p><code>:strict</code> - Defaults to true. Enable STRICT_ALL_TABLES. (See MySQL documentation: <a href=\"http://dev.mysql.com/doc/refman/5.0/en/sql-mode.html\">dev.mysql.com/doc/refman/5.0/en/sql-mode.html</a>)</p> </li>\n<li> <p><code>:variables</code> - (Optional) A hash session variables to send as <code>SET @@SESSION.key = value</code> on each database connection. Use the value <code>:default</code> to set a variable to its DEFAULT value. (See MySQL documentation: <a href=\"http://dev.mysql.com/doc/refman/5.0/en/set-statement.html\">dev.mysql.com/doc/refman/5.0/en/set-statement.html</a>).</p> </li>\n<li> <p><code>:sslca</code> - Necessary to use MySQL with an SSL connection.</p> </li>\n<li> <p><code>:sslkey</code> - Necessary to use MySQL with an SSL connection.</p> </li>\n<li> <p><code>:sslcert</code> - Necessary to use MySQL with an SSL connection.</p> </li>\n<li> <p><code>:sslcapath</code> - Necessary to use MySQL with an SSL connection.</p> </li>\n<li> <p><code>:sslcipher</code> - Necessary to use MySQL with an SSL connection.</p> </li>\n</ul> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ADAPTER_NAME\">ADAPTER_NAME </dt>\n\n<dt id=\"ENCODINGS\">ENCODINGS </dt>\n<dd>\n<p>Taken from here:</p> <pre class=\"ruby\">https://github.com/tmtm/ruby-mysql/blob/master/lib/mysql/charset.rb\n</pre> <p>Author: TOMITA Masahiro &lt;tommy@tmtm.org&gt;</p> </dd>\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(connection, logger, connection_options, config)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractmysqladapter#method-c-new\">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 103\ndef initialize(connection, logger, connection_options, config)\n  super\n  @statements = StatementPool.new(@connection,\n                                  self.class.type_cast_config_to_integer(config.fetch(:statement_limit) { 1000 }))\n  @client_encoding = nil\n  connect\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-active-3F\"> <span class=\"method-name\">active?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"active-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 144\ndef active?\n  if @connection.respond_to?(:stat)\n    @connection.stat\n  else\n    @connection.query 'select 1'\n  end\n\n  # mysql-ruby doesn't raise an exception when stat fails.\n  if @connection.respond_to?(:errno)\n    @connection.errno.zero?\n  else\n    true\n  end\nrescue Mysql::Error\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_cache-21\"> <span class=\"method-name\">clear_cache!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears the prepared statements cache.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractmysqladapter#method-i-clear_cache-21\">ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter#clear_cache!</a> </div> <div class=\"method-source-code\" id=\"clear_cache-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 195\ndef clear_cache!\n  super\n  @statements.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-client_encoding\"> <span class=\"method-name\">client_encoding</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the client encoding for this database</p> <div class=\"method-source-code\" id=\"client_encoding-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 244\ndef client_encoding\n  return @client_encoding if @client_encoding\n\n  result = exec_query(\n    \"SHOW VARIABLES WHERE Variable_name = 'character_set_client'\",\n    'SCHEMA')\n  @client_encoding = ENCODINGS[result.rows.last.last]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disconnect-21\"> <span class=\"method-name\">disconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disconnects from the database if already connected. Otherwise, this method does nothing.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-disconnect-21\">ActiveRecord::ConnectionAdapters::AbstractAdapter#disconnect!</a> </div> <div class=\"method-source-code\" id=\"disconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 169\ndef disconnect!\n  super\n  @connection.close rescue nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_query\"> <span class=\"method-name\">exec_query</span><span class=\"method-args\">(sql, name = 'SQL', binds = []) { |affected_rows| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_query-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 253\ndef exec_query(sql, name = 'SQL', binds = [])\n  if without_prepared_statement?(binds)\n    result_set, affected_rows = exec_without_stmt(sql, name)\n  else\n    result_set, affected_rows = exec_stmt(sql, name, binds)\n  end\n\n  yield affected_rows if block_given?\n\n  result_set\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last_inserted_id\"> <span class=\"method-name\">last_inserted_id</span><span class=\"method-args\">(result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"last_inserted_id-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 265\ndef last_inserted_id(result)\n  @connection.insert_id\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reconnect-21\"> <span class=\"method-name\">reconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-reconnect-21\">ActiveRecord::ConnectionAdapters::AbstractAdapter#reconnect!</a> </div> <div class=\"method-source-code\" id=\"reconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 161\ndef reconnect!\n  super\n  disconnect!\n  connect\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset-21\"> <span class=\"method-name\">reset!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"reset-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 174\ndef reset!\n  if @connection.respond_to?(:change_user)\n    # See http://bugs.mysql.com/bug.php?id=33540 -- the workaround way to\n    # reset the connection is to change the user to the same user.\n    @connection.change_user(@config[:username], @config[:password], @config[:database])\n    configure_connection\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_rows\"> <span class=\"method-name\">select_rows</span><span class=\"method-args\">(sql, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"select_rows-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 187\ndef select_rows(sql, name = nil, binds = [])\n  @connection.query_with_result = true\n  rows = exec_query(sql, name, binds).rows\n  @connection.more_results &amp;&amp; @connection.next_result    # invoking stored procedures with CLIENT_MULTI_RESULTS requires this to tidy up else connection will be dropped\n  rows\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_statement_cache-3F\"> <span class=\"method-name\">supports_statement_cache?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true, since this connection adapter supports prepared statement caching.</p> <div class=\"method-source-code\" id=\"supports_statement_cache-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 113\ndef supports_statement_cache?\n  true\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/postgresql/databasestatements":"<h1 id=\"module-ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements\" class=\"module\"> module ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-begin_db_transaction\"> <span class=\"method-name\">begin_db_transaction</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Begins a transaction.</p> <div class=\"method-source-code\" id=\"begin_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 211\ndef begin_db_transaction\n  execute \"BEGIN\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-begin_isolated_db_transaction\"> <span class=\"method-name\">begin_isolated_db_transaction</span><span class=\"method-args\">(isolation)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"begin_isolated_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 215\ndef begin_isolated_db_transaction(isolation)\n  begin_db_transaction\n  execute \"SET TRANSACTION ISOLATION LEVEL #{transaction_isolation_levels.fetch(isolation)}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-commit_db_transaction\"> <span class=\"method-name\">commit_db_transaction</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Commits a transaction.</p> <div class=\"method-source-code\" id=\"commit_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 221\ndef commit_db_transaction\n  execute \"COMMIT\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create\"> <span class=\"method-name\">create</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"create-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 93\ndef create\n  super.insert\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_delete\"> <span class=\"method-name\">exec_delete</span><span class=\"method-args\">(sql, name = 'SQL', binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_delete-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 172\ndef exec_delete(sql, name = 'SQL', binds = [])\n  execute_and_clear(sql, name, binds) {|result| result.cmd_tuples }\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"databasestatements#method-i-exec_update\">exec_update</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_insert\"> <span class=\"method-name\">exec_insert</span><span class=\"method-args\">(sql, name, binds, pk = nil, sequence_name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_insert-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 191\ndef exec_insert(sql, name, binds, pk = nil, sequence_name = nil)\n  val = exec_query(sql, name, binds)\n  if !use_insert_returning? &amp;&amp; pk\n    unless sequence_name\n      table_ref = extract_table_ref_from_insert_sql(sql)\n      sequence_name = default_sequence_name(table_ref, pk)\n      return val unless sequence_name\n    end\n    last_insert_id_result(sequence_name)\n  else\n    val\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_query\"> <span class=\"method-name\">exec_query</span><span class=\"method-args\">(sql, name = 'SQL', binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_query-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 159\ndef exec_query(sql, name = 'SQL', binds = [])\n  execute_and_clear(sql, name, binds) do |result|\n    types = {}\n    fields = result.fields\n    fields.each_with_index do |fname, i|\n      ftype = result.ftype i\n      fmod  = result.fmod i\n      types[fname] = get_oid_type(ftype, fmod, fname)\n    end\n    ActiveRecord::Result.new(fields, result.values, types)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_rollback_db_transaction\"> <span class=\"method-name\">exec_rollback_db_transaction</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Aborts a transaction.</p> <div class=\"method-source-code\" id=\"exec_rollback_db_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 226\ndef exec_rollback_db_transaction\n  execute \"ROLLBACK\"\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-exec_update\"> <span class=\"method-name\">exec_update</span><span class=\"method-args\">(sql, name = 'SQL', binds = [])</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"databasestatements#method-i-exec_delete\">exec_delete</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-execute\"> <span class=\"method-name\">execute</span><span class=\"method-args\">(sql, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes an SQL statement, returning a PGresult object on success or raising a PGError exception otherwise.</p> <div class=\"method-source-code\" id=\"execute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 153\ndef execute(sql, name = nil)\n  log(sql, name) do\n    @connection.async_exec(sql)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-explain\"> <span class=\"method-name\">explain</span><span class=\"method-args\">(arel, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"explain-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 5\ndef explain(arel, binds = [])\n  sql = \"EXPLAIN #{to_sql(arel, binds)}\"\n  ExplainPrettyPrinter.new.pp(exec_query(sql, 'EXPLAIN', binds))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-insert_sql\"> <span class=\"method-name\">insert_sql</span><span class=\"method-args\">(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes an INSERT query and returns the new record's ID</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"insert_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 76\ndef insert_sql(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)\n  unless pk\n    # Extract the table from the insert sql. Yuck.\n    table_ref = extract_table_ref_from_insert_sql(sql)\n    pk = primary_key(table_ref) if table_ref\n  end\n\n  if pk &amp;&amp; use_insert_returning?\n    select_value(\"#{sql} RETURNING #{quote_column_name(pk)}\")\n  elsif pk\n    super\n    last_insert_id_value(sequence_name || default_sequence_name(table_ref, pk))\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_rows\"> <span class=\"method-name\">select_rows</span><span class=\"method-args\">(sql, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes a SELECT query and returns an array of rows. Each row is an array of field values.</p> <div class=\"method-source-code\" id=\"select_rows-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 69\ndef select_rows(sql, name = nil, binds = [])\n  execute_and_clear(sql, name, binds) do |result|\n    result.values\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_value\"> <span class=\"method-name\">select_value</span><span class=\"method-args\">(arel, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"select_value-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 47\ndef select_value(arel, name = nil, binds = [])\n  arel, binds = binds_from_relation arel, binds\n  sql = to_sql(arel, binds)\n  execute_and_clear(sql, name, binds) do |result|\n    result.getvalue(0, 0) if result.ntuples &gt; 0 &amp;&amp; result.nfields &gt; 0\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_values\"> <span class=\"method-name\">select_values</span><span class=\"method-args\">(arel, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"select_values-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 55\ndef select_values(arel, name = nil)\n  arel, binds = binds_from_relation arel, []\n  sql = to_sql(arel, binds)\n  execute_and_clear(sql, name, binds) do |result|\n    if result.nfields &gt; 0\n      result.column_values(0)\n    else\n      []\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sql_for_insert\"> <span class=\"method-name\">sql_for_insert</span><span class=\"method-args\">(sql, pk, id_value, sequence_name, binds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"sql_for_insert-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 177\ndef sql_for_insert(sql, pk, id_value, sequence_name, binds)\n  unless pk\n    # Extract the table from the insert sql. Yuck.\n    table_ref = extract_table_ref_from_insert_sql(sql)\n    pk = primary_key(table_ref) if table_ref\n  end\n\n  if pk &amp;&amp; use_insert_returning?\n    sql = \"#{sql} RETURNING #{quote_column_name(pk)}\"\n  end\n\n  [sql, binds]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update_sql\"> <span class=\"method-name\">update_sql</span><span class=\"method-args\">(sql, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes an UPDATE query and returns the number of affected tuples.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"update_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb, line 206\ndef update_sql(sql, name = nil)\n  super.cmd_tuples\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/postgresql/quoting":"<h1 id=\"module-ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting\" class=\"module\"> module ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-escape_bytea\"> <span class=\"method-name\">escape_bytea</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Escapes binary strings for bytea input to the database.</p> <div class=\"method-source-code\" id=\"escape_bytea-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/quoting.rb, line 6\ndef escape_bytea(value)\n  @connection.escape_bytea(value) if value\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote_table_name\"> <span class=\"method-name\">quote_table_name</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Checks the following cases:</p> <ul>\n<li> <p>table_name</p> </li>\n<li> <p>“table.name”</p> </li>\n<li> <p>schema_name.table_name</p> </li>\n<li> <p>schema_name.“table.name”</p> </li>\n<li> <p>“schema.name”.table_name</p> </li>\n<li> <p>“schema.name”.“table.name”</p> </li>\n</ul> <div class=\"method-source-code\" id=\"quote_table_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/quoting.rb, line 30\ndef quote_table_name(name)\n  Utils.extract_schema_qualified_name(name.to_s).quoted\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote_table_name_for_assignment\"> <span class=\"method-name\">quote_table_name_for_assignment</span><span class=\"method-args\">(table, attr)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"quote_table_name_for_assignment-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/quoting.rb, line 34\ndef quote_table_name_for_assignment(table, attr)\n  quote_column_name(attr)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unescape_bytea\"> <span class=\"method-name\">unescape_bytea</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Unescapes bytea output from a database to the binary string it represents. NOTE: This is NOT an inverse of <a href=\"quoting#method-i-escape_bytea\">#escape_bytea</a>! This is only to be used on escaped binary output from database drive.</p> <div class=\"method-source-code\" id=\"unescape_bytea-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/quoting.rb, line 13\ndef unescape_bytea(value)\n  @connection.unescape_bytea(value) if value\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/postgresql/schemastatements":"<h1 id=\"module-ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements\" class=\"module\"> module ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_column\"> <span class=\"method-name\">change_column</span><span class=\"method-args\">(table_name, column_name, type, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Changes the column of a table.</p> <div class=\"method-source-code\" id=\"change_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 427\ndef change_column(table_name, column_name, type, options = {})\n  clear_cache!\n  quoted_table_name = quote_table_name(table_name)\n  sql_type = type_to_sql(type, options[:limit], options[:precision], options[:scale])\n  sql_type &lt;&lt; \"[]\" if options[:array]\n  sql = \"ALTER TABLE #{quoted_table_name} ALTER COLUMN #{quote_column_name(column_name)} TYPE #{sql_type}\"\n  sql &lt;&lt; \" USING #{options[:using]}\" if options[:using]\n  if options[:cast_as]\n    sql &lt;&lt; \" USING CAST(#{quote_column_name(column_name)} AS #{type_to_sql(options[:cast_as], options[:limit], options[:precision], options[:scale])})\"\n  end\n  execute sql\n\n  change_column_default(table_name, column_name, options[:default]) if options_include_default?(options)\n  change_column_null(table_name, column_name, options[:null], options[:default]) if options.key?(:null)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_column_default\"> <span class=\"method-name\">change_column_default</span><span class=\"method-args\">(table_name, column_name, default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Changes the default value of a table column.</p> <div class=\"method-source-code\" id=\"change_column_default-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 444\ndef change_column_default(table_name, column_name, default)\n  clear_cache!\n  column = column_for(table_name, column_name)\n  return unless column\n\n  alter_column_query = \"ALTER TABLE #{quote_table_name(table_name)} ALTER COLUMN #{quote_column_name(column_name)} %s\"\n  if default.nil?\n    # &lt;tt&gt;DEFAULT NULL&lt;/tt&gt; results in the same behavior as &lt;tt&gt;DROP DEFAULT&lt;/tt&gt;. However, PostgreSQL will\n    # cast the default to the columns type, which leaves us with a default like \"default NULL::character varying\".\n    execute alter_column_query % \"DROP DEFAULT\"\n  else\n    execute alter_column_query % \"SET DEFAULT #{quote_default_value(default, column)}\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_column_null\"> <span class=\"method-name\">change_column_null</span><span class=\"method-args\">(table_name, column_name, null, default = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"change_column_null-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 459\ndef change_column_null(table_name, column_name, null, default = nil)\n  clear_cache!\n  unless null || default.nil?\n    column = column_for(table_name, column_name)\n    execute(\"UPDATE #{quote_table_name(table_name)} SET #{quote_column_name(column_name)}=#{quote_default_value(default, column)} WHERE #{quote_column_name(column_name)} IS NULL\") if column\n  end\n  execute(\"ALTER TABLE #{quote_table_name(table_name)} ALTER #{quote_column_name(column_name)} #{null ? 'DROP' : 'SET'} NOT NULL\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-client_min_messages\"> <span class=\"method-name\">client_min_messages</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current client message level.</p> <div class=\"method-source-code\" id=\"client_min_messages-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 269\ndef client_min_messages\n  query('SHOW client_min_messages', 'SCHEMA')[0][0]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-client_min_messages-3D\"> <span class=\"method-name\">client_min_messages=</span><span class=\"method-args\">(level)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the client message level.</p> <div class=\"method-source-code\" id=\"client_min_messages-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 274\ndef client_min_messages=(level)\n  execute(\"SET client_min_messages TO '#{level}'\", 'SCHEMA')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collation\"> <span class=\"method-name\">collation</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current database collation.</p> <div class=\"method-source-code\" id=\"collation-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 217\n        def collation\n          query(\"            SELECT pg_database.datcollate FROM pg_database WHERE pg_database.datname LIKE '#{current_database}'\n\", 'SCHEMA')[0][0]\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-columns\"> <span class=\"method-name\">columns</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the list of all column definitions for a table.</p> <div class=\"method-source-code\" id=\"columns-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 184\ndef columns(table_name)\n  # Limit, precision, and scale are all handled by the superclass.\n  column_definitions(table_name).map do |column_name, type, default, notnull, oid, fmod|\n    oid = get_oid_type(oid.to_i, fmod.to_i, column_name, type)\n    default_value = extract_value_from_default(oid, default)\n    default_function = extract_default_function(default_value, default)\n    new_column(column_name, default_value, oid, type, notnull == 'f', default_function)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_database\"> <span class=\"method-name\">create_database</span><span class=\"method-args\">(name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"../postgresql\">PostgreSQL</a> database. Options include <code>:owner</code>, <code>:template</code>, <code>:encoding</code> (defaults to utf8), <code>:collation</code>, <code>:ctype</code>, <code>:tablespace</code>, and <code>:connection_limit</code> (note that MySQL uses <code>:charset</code> while <a href=\"../postgresql\">PostgreSQL</a> uses <code>:encoding</code>).</p> <p>Example:</p> <pre class=\"ruby\">create_database config[:database], config\ncreate_database 'foo_development', encoding: 'unicode'\n</pre> <div class=\"method-source-code\" id=\"create_database-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 54\ndef create_database(name, options = {})\n  options = { encoding: 'utf8' }.merge!(options.symbolize_keys)\n\n  option_string = options.inject(\"\") do |memo, (key, value)|\n    memo += case key\n    when :owner\n      \" OWNER = \\\"#{value}\\\"\"\n    when :template\n      \" TEMPLATE = \\\"#{value}\\\"\"\n    when :encoding\n      \" ENCODING = '#{value}'\"\n    when :collation\n      \" LC_COLLATE = '#{value}'\"\n    when :ctype\n      \" LC_CTYPE = '#{value}'\"\n    when :tablespace\n      \" TABLESPACE = \\\"#{value}\\\"\"\n    when :connection_limit\n      \" CONNECTION LIMIT = #{value}\"\n    else\n      \"\"\n    end\n  end\n\n  execute \"CREATE DATABASE #{quote_table_name(name)}#{option_string}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_schema\"> <span class=\"method-name\">create_schema</span><span class=\"method-args\">(schema_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a schema for the given schema name.</p> <div class=\"method-source-code\" id=\"create_schema-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 242\ndef create_schema schema_name\n  execute \"CREATE SCHEMA #{schema_name}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ctype\"> <span class=\"method-name\">ctype</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current database ctype.</p> <div class=\"method-source-code\" id=\"ctype-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 224\n        def ctype\n          query(\"            SELECT pg_database.datctype FROM pg_database WHERE pg_database.datname LIKE '#{current_database}'\n\", 'SCHEMA')[0][0]\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-current_database\"> <span class=\"method-name\">current_database</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current database name.</p> <div class=\"method-source-code\" id=\"current_database-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 199\ndef current_database\n  query('select current_database()', 'SCHEMA')[0][0]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-current_schema\"> <span class=\"method-name\">current_schema</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current schema name.</p> <div class=\"method-source-code\" id=\"current_schema-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 204\ndef current_schema\n  query('SELECT current_schema', 'SCHEMA')[0][0]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-drop_schema\"> <span class=\"method-name\">drop_schema</span><span class=\"method-args\">(schema_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Drops the schema for the given schema name.</p> <div class=\"method-source-code\" id=\"drop_schema-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 247\ndef drop_schema schema_name\n  execute \"DROP SCHEMA #{schema_name} CASCADE\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-drop_table\"> <span class=\"method-name\">drop_table</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"drop_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 115\ndef drop_table(table_name, options = {})\n  execute \"DROP TABLE #{quote_table_name(table_name)}#{' CASCADE' if options[:force] == :cascade}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encoding\"> <span class=\"method-name\">encoding</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current database encoding format.</p> <div class=\"method-source-code\" id=\"encoding-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 209\n        def encoding\n          query(\"            SELECT pg_encoding_to_char(pg_database.encoding) FROM pg_database\n            WHERE pg_database.datname LIKE '#{current_database}'\n\", 'SCHEMA')[0][0]\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-foreign_keys\"> <span class=\"method-name\">foreign_keys</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"foreign_keys-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 490\n        def foreign_keys(table_name)\n          fk_info = select_all \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\n            FROM pg_constraint c\n            JOIN pg_class t1 ON c.conrelid = t1.oid\n            JOIN pg_class t2 ON c.confrelid = t2.oid\n            JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid\n            JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid\n            JOIN pg_namespace t3 ON c.connamespace = t3.oid\n            WHERE c.contype = 'f'\n              AND t1.relname = #{quote(table_name)}\n              AND t3.nspname = ANY (current_schemas(false))\n            ORDER BY c.conname\n\".strip_heredoc\n\n          fk_info.map do |row|\n            options = {\n              column: row['column'],\n              name: row['name'],\n              primary_key: row['primary_key']\n            }\n\n            options[:on_delete] = extract_foreign_key_action(row['on_delete'])\n            options[:on_update] = extract_foreign_key_action(row['on_update'])\n\n            ForeignKeyDefinition.new(table_name, row['to_table'], options)\n          end\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_name_exists-3F\"> <span class=\"method-name\">index_name_exists?</span><span class=\"method-args\">(table_name, index_name, default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"index_name_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 128\n        def index_name_exists?(table_name, index_name, default)\n          exec_query(\"            SELECT COUNT(*)\n            FROM pg_class t\n            INNER JOIN pg_index d ON t.oid = d.indrelid\n            INNER JOIN pg_class i ON d.indexrelid = i.oid\n            WHERE i.relkind = 'i'\n              AND i.relname = '#{index_name}'\n              AND t.relname = '#{table_name}'\n              AND i.relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname = ANY (current_schemas(false)) )\n\", 'SCHEMA').rows.first[0].to_i &gt; 0\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_name_length\"> <span class=\"method-name\">index_name_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"index_name_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 527\ndef index_name_length\n  63\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-indexes\"> <span class=\"method-name\">indexes</span><span class=\"method-args\">(table_name, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of indexes for the given table.</p> <div class=\"method-source-code\" id=\"indexes-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 142\n        def indexes(table_name, name = nil)\n           result = query(\"             SELECT distinct i.relname, d.indisunique, d.indkey, pg_get_indexdef(d.indexrelid), t.oid\n             FROM pg_class t\n             INNER JOIN pg_index d ON t.oid = d.indrelid\n             INNER JOIN pg_class i ON d.indexrelid = i.oid\n             WHERE i.relkind = 'i'\n               AND d.indisprimary = 'f'\n               AND t.relname = '#{table_name}'\n               AND i.relnamespace IN (SELECT oid FROM pg_namespace WHERE nspname = ANY (current_schemas(false)) )\n            ORDER BY i.relname\n\", 'SCHEMA')\n\n          result.map do |row|\n            index_name = row[0]\n            unique = row[1] == 't'\n            indkey = row[2].split(\" \")\n            inddef = row[3]\n            oid = row[4]\n\n            columns = Hash[query(\"            SELECT a.attnum, a.attname\n            FROM pg_attribute a\n            WHERE a.attrelid = #{oid}\n            AND a.attnum IN (#{indkey.join(\",\")})\n\", \"SCHEMA\")]\n\n            column_names = columns.values_at(*indkey).compact\n\n            unless column_names.empty?\n              # add info on sort order for columns (only desc order is explicitly specified, asc is the default)\n              desc_order_columns = inddef.scan(/(\\w+) DESC/).flatten\n              orders = desc_order_columns.any? ? Hash[desc_order_columns.map {|order_column| [order_column, :desc]}] : {}\n              where = inddef.scan(/WHERE (.+)$/).flatten[0]\n              using = inddef.scan(/USING (.+?) /).flatten[0].to_sym\n\n              IndexDefinition.new(table_name, index_name, unique, column_names, [], orders, where, nil, using)\n            end\n          end.compact\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-primary_key\"> <span class=\"method-name\">primary_key</span><span class=\"method-args\">(table)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns just a table's primary key</p> <div class=\"method-source-code\" id=\"primary_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 388\n        def primary_key(table)\n          pks = exec_query(\"            SELECT attr.attname\n            FROM pg_attribute attr\n            INNER JOIN pg_constraint cons ON attr.attrelid = cons.conrelid AND attr.attnum = any(cons.conkey)\n            WHERE cons.contype = 'p'\n              AND cons.conrelid = '#{quote_table_name(table)}'::regclass\n\", 'SCHEMA').rows\n          return nil unless pks.count == 1\n          pks[0][0]\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_index\"> <span class=\"method-name\">rename_index</span><span class=\"method-args\">(table_name, old_name, new_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"rename_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 484\ndef rename_index(table_name, old_name, new_name)\n  validate_index_length!(table_name, new_name)\n\n  execute \"ALTER INDEX #{quote_column_name(old_name)} RENAME TO #{quote_table_name(new_name)}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_table\"> <span class=\"method-name\">rename_table</span><span class=\"method-args\">(table_name, new_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Renames a table. Also renames a table's primary key sequence if the sequence name exists and matches the Active Record default.</p> <p>Example:</p> <pre class=\"ruby\">rename_table('octopuses', 'octopi')\n</pre> <div class=\"method-source-code\" id=\"rename_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 406\ndef rename_table(table_name, new_name)\n  clear_cache!\n  execute \"ALTER TABLE #{quote_table_name(table_name)} RENAME TO #{quote_table_name(new_name)}\"\n  pk, seq = pk_and_sequence_for(new_name)\n  if seq &amp;&amp; seq.identifier == \"#{table_name}_#{pk}_seq\"\n    new_seq = \"#{new_name}_#{pk}_seq\"\n    idx = \"#{table_name}_pkey\"\n    new_idx = \"#{new_name}_pkey\"\n    execute \"ALTER TABLE #{quote_table_name(seq)} RENAME TO #{quote_table_name(new_seq)}\"\n    execute \"ALTER INDEX #{quote_table_name(idx)} RENAME TO #{quote_table_name(new_idx)}\"\n  end\n\n  rename_table_indexes(table_name, new_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-schema_exists-3F\"> <span class=\"method-name\">schema_exists?</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if schema exists.</p> <div class=\"method-source-code\" id=\"schema_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 120\n        def schema_exists?(name)\n          exec_query(\"            SELECT COUNT(*)\n            FROM pg_namespace\n            WHERE nspname = '#{name}'\n\", 'SCHEMA').rows.first[0].to_i &gt; 0\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-schema_names\"> <span class=\"method-name\">schema_names</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of schema names.</p> <div class=\"method-source-code\" id=\"schema_names-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 231\n        def schema_names\n          query(\"            SELECT nspname\n              FROM pg_namespace\n             WHERE nspname !~ '^pg_.*'\n               AND nspname NOT IN ('information_schema')\n             ORDER by nspname;\n\", 'SCHEMA').flatten\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-schema_search_path\"> <span class=\"method-name\">schema_search_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the active schema search path.</p> <div class=\"method-source-code\" id=\"schema_search_path-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 264\ndef schema_search_path\n  @schema_search_path ||= query('SHOW search_path', 'SCHEMA')[0][0]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-schema_search_path-3D\"> <span class=\"method-name\">schema_search_path=</span><span class=\"method-args\">(schema_csv)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the schema search path to a string of comma-separated schema names. Names beginning with $ have to be quoted (e.g. $user =&gt; '$user'). See: <a href=\"http://www.postgresql.org/docs/current/static/ddl-schemas.html\">www.postgresql.org/docs/current/static/ddl-schemas.html</a></p> <p>This should be not be called manually but set in database.yml.</p> <div class=\"method-source-code\" id=\"schema_search_path-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 256\ndef schema_search_path=(schema_csv)\n  if schema_csv\n    execute(\"SET search_path TO #{schema_csv}\", 'SCHEMA')\n    @schema_search_path = schema_csv\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serial_sequence\"> <span class=\"method-name\">serial_sequence</span><span class=\"method-args\">(table, column)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"serial_sequence-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 287\n        def serial_sequence(table, column)\n          result = exec_query(\"            SELECT pg_get_serial_sequence('#{table}', '#{column}')\n\", 'SCHEMA')\n          result.rows.first.first\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_exists-3F\"> <span class=\"method-name\">table_exists?</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if table exists. If the schema is not specified as part of <code>name</code> then it will only find tables within the current schema search path (regardless of permissions to access tables in other schemas)</p> <div class=\"method-source-code\" id=\"table_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 101\n        def table_exists?(name)\n          name = Utils.extract_schema_qualified_name(name.to_s)\n          return false unless name.identifier\n\n          exec_query(\"              SELECT COUNT(*)\n              FROM pg_class c\n              LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n              WHERE c.relkind IN ('r','v','m') -- (r)elation/table, (v)iew, (m)aterialized view\n              AND c.relname = '#{name.identifier}'\n              AND n.nspname = #{name.schema ? \"'#{name.schema}'\" : 'ANY (current_schemas(false))'}\n\", 'SCHEMA').rows.first[0].to_i &gt; 0\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tables\"> <span class=\"method-name\">tables</span><span class=\"method-args\">(name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the list of all tables in the schema search path or a specified schema.</p> <div class=\"method-source-code\" id=\"tables-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 90\n        def tables(name = nil)\n          query(\"            SELECT tablename\n            FROM pg_tables\n            WHERE schemaname = ANY (current_schemas(false))\n\", 'SCHEMA').map { |row| row[0] }\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-type_to_sql\"> <span class=\"method-name\">type_to_sql</span><span class=\"method-args\">(type, limit = nil, precision = nil, scale = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Maps logical Rails types to PostgreSQL-specific data types.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"type_to_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb, line 532\ndef type_to_sql(type, limit = nil, precision = nil, scale = nil)\n  case type.to_s\n  when 'binary'\n    # PostgreSQL doesn't support limits on binary (bytea) columns.\n    # The hard limit is 1Gb, because of a 32-bit size field, and TOAST.\n    case limit\n    when nil, 0..0x3fffffff; super(type)\n    else raise(ActiveRecordError, \"No binary type has byte size #{limit}.\")\n    end\n  when 'text'\n    # PostgreSQL doesn't support limits on text columns.\n    # The hard limit is 1Gb, according to section 8.3 in the manual.\n    case limit\n    when nil, 0..0x3fffffff; super(type)\n    else raise(ActiveRecordError, \"The limit on text can be at most 1GB - 1byte.\")\n    end\n  when 'integer'\n    return 'integer' unless limit\n\n    case limit\n      when 1, 2; 'smallint'\n      when 3, 4; 'integer'\n      when 5..8; 'bigint'\n      else raise(ActiveRecordError, \"No integer type has byte size #{limit}. Use a numeric with precision 0 instead.\")\n    end\n  when 'datetime'\n    return super unless precision\n\n    case precision\n      when 0..6; \"timestamp(#{precision})\"\n      else raise(ActiveRecordError, \"No timestamp type has precision of #{precision}. The allowed range of precision is from 0 to 6\")\n    end\n  else\n    super\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/postgresql/tabledefinition":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition\" class=\"class\"> class ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../tabledefinition\">ActiveRecord::ConnectionAdapters::TableDefinition</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"columnmethods\">ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-primary_key\"> <span class=\"method-name\">primary_key</span><span class=\"method-args\">(name, type = :primary_key, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines the primary key field. Use of the native <a href=\"../postgresql\">PostgreSQL</a> UUID type is supported, and can be used by defining your tables as such:</p> <pre class=\"ruby\">create_table :stuffs, id: :uuid do |t|\n  t.string :content\n  t.timestamps\nend\n</pre> <p>By default, this will use the +uuid_generate_v4()+ function from the <code>uuid-ossp</code> extension, which MUST be enabled on your database. To enable the <code>uuid-ossp</code> extension, you can use the <code>enable_extension</code> method in your migrations. To use a UUID primary key without <code>uuid-ossp</code> enabled, you can set the <code>:default</code> option to <code>nil</code>:</p> <pre class=\"ruby\">create_table :stuffs, id: false do |t|\n  t.primary_key :id, :uuid, default: nil\n  t.uuid :foo_id\n  t.timestamps\nend\n</pre> <p>You may also pass a different UUID generation function from <code>uuid-ossp</code> or another library.</p> <p>Note that setting the UUID primary key default value to <code>nil</code> will require you to assure that you always provide a UUID value before saving a record (as primary keys cannot be <code>nil</code>). This might be done via the <code>SecureRandom.uuid</code> method and a <code>before_save</code> callback, for instance.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../tabledefinition#method-i-primary_key\">ActiveRecord::ConnectionAdapters::TableDefinition#primary_key</a> </div> <div class=\"method-source-code\" id=\"primary_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql/schema_definitions.rb, line 127\ndef primary_key(name, type = :primary_key, options = {})\n  return super unless type == :uuid\n  options[:default] = options.fetch(:default, 'uuid_generate_v4()')\n  options[:primary_key] = true\n  column name, type, options\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/postgresqladapter":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::PostgreSQLAdapter\" class=\"class\"> class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"abstractadapter\">ActiveRecord::ConnectionAdapters::AbstractAdapter</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"postgresql/quoting\">ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting</a>, <a class=\"include\" href=\"postgresql/schemastatements\">ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements</a>, <a class=\"include\" href=\"postgresql/databasestatements\">ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements</a>\n</dd>\n</dl> <section class=\"description\"> <p>The <a href=\"postgresql\">PostgreSQL</a> adapter works with the native C (<a href=\"https://bitbucket.org/ged/ruby-pg\">bitbucket.org/ged/ruby-pg</a>) driver.</p> <p>Options:</p> <ul>\n<li> <p><code>:host</code> - Defaults to a Unix-domain socket in /tmp. On machines without Unix-domain sockets, the default is to connect to localhost.</p> </li>\n<li> <p><code>:port</code> - Defaults to 5432.</p> </li>\n<li> <p><code>:username</code> - Defaults to be the same as the operating system name of the user running the application.</p> </li>\n<li> <p><code>:password</code> - Password to be used if the server demands password authentication.</p> </li>\n<li> <p><code>:database</code> - Defaults to be the same as the user name.</p> </li>\n<li> <p><code>:schema_search_path</code> - An optional schema search path for the connection given as a string of comma-separated schema names. This is backward-compatible with the <code>:schema_order</code> option.</p> </li>\n<li> <p><code>:encoding</code> - An optional client encoding that is used in a <code>SET client_encoding TO &lt;encoding&gt;</code> call on the connection.</p> </li>\n<li> <p><code>:min_messages</code> - An optional client min messages that is used in a <code>SET client_min_messages TO &lt;min_messages&gt;</code> call on the connection.</p> </li>\n<li> <p><code>:variables</code> - An optional hash of additional parameters that will be used in <code>SET SESSION key = val</code> calls on the connection.</p> </li>\n<li> <p><code>:insert_returning</code> - An optional boolean to control the use of <code>RETURNING</code> for <code>INSERT</code> statements defaults to true.</p> </li>\n</ul> <p>Any further options are used as connection parameters to libpq. See <a href=\"http://www.postgresql.org/docs/9.1/static/libpq-connect.html\">www.postgresql.org/docs/9.1/static/libpq-connect.html</a> for the list of parameters.</p> <p>In addition, default connection parameters of libpq can be set per environment variables. See <a href=\"http://www.postgresql.org/docs/9.1/static/libpq-envars.html\">www.postgresql.org/docs/9.1/static/libpq-envars.html</a> .</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ADAPTER_NAME\">ADAPTER_NAME </dt>\n\n<dt id=\"FOREIGN_KEY_VIOLATION\">FOREIGN_KEY_VIOLATION </dt>\n<dd>\n<p>See <a href=\"http://www.postgresql.org/docs/9.1/static/errcodes-appendix.html\">www.postgresql.org/docs/9.1/static/errcodes-appendix.html</a></p> </dd>\n<dt id=\"NATIVE_DATABASE_TYPES\">NATIVE_DATABASE_TYPES </dt>\n\n<dt id=\"UNIQUE_VIOLATION\">UNIQUE_VIOLATION </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(connection, logger, connection_parameters, config)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Initializes and connects a <a href=\"postgresql\">PostgreSQL</a> adapter.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"querycache#method-c-new\">ActiveRecord::ConnectionAdapters::QueryCache.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 226\ndef initialize(connection, logger, connection_parameters, config)\n  super(connection, logger)\n\n  @visitor = Arel::Visitors::PostgreSQL.new self\n  if self.class.type_cast_config_to_boolean(config.fetch(:prepared_statements) { true })\n    @prepared_statements = true\n  else\n    @prepared_statements = false\n  end\n\n  @connection_parameters, @config = connection_parameters, config\n\n  # @local_tz is initialized as nil to avoid warnings when connect tries to use it\n  @local_tz = nil\n  @table_alias_length = nil\n\n  connect\n  @statements = StatementPool.new @connection,\n                                  self.class.type_cast_config_to_integer(config.fetch(:statement_limit) { 1000 })\n\n  if postgresql_version &lt; 80200\n    raise \"Your version of PostgreSQL (#{postgresql_version}) is too old, please upgrade!\"\n  end\n\n  @type_map = Type::HashLookupTypeMap.new\n  initialize_type_map(type_map)\n  @local_tz = execute('SHOW TIME ZONE', 'SCHEMA').first[\"TimeZone\"]\n  @use_insert_returning = @config.key?(:insert_returning) ? self.class.type_cast_config_to_boolean(@config[:insert_returning]) : true\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-active-3F\"> <span class=\"method-name\">active?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this connection alive and ready for queries?</p> <div class=\"method-source-code\" id=\"active-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 266\ndef active?\n  @connection.query 'SELECT 1'\n  true\nrescue PGError\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_cache-21\"> <span class=\"method-name\">clear_cache!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears the prepared statements cache.</p> <div class=\"method-source-code\" id=\"clear_cache-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 257\ndef clear_cache!\n  @statements.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disable_extension\"> <span class=\"method-name\">disable_extension</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"disable_extension-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 347\ndef disable_extension(name)\n  exec_query(\"DROP EXTENSION IF EXISTS \\\"#{name}\\\" CASCADE\").tap {\n    reload_type_map\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disconnect-21\"> <span class=\"method-name\">disconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disconnects from the database if already connected. Otherwise, this method does nothing.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-disconnect-21\">ActiveRecord::ConnectionAdapters::AbstractAdapter#disconnect!</a> </div> <div class=\"method-source-code\" id=\"disconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 292\ndef disconnect!\n  super\n  @connection.close rescue nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-enable_extension\"> <span class=\"method-name\">enable_extension</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"enable_extension-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 341\ndef enable_extension(name)\n  exec_query(\"CREATE EXTENSION IF NOT EXISTS \\\"#{name}\\\"\").tap {\n    reload_type_map\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extension_enabled-3F\"> <span class=\"method-name\">extension_enabled?</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"extension_enabled-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 353\ndef extension_enabled?(name)\n  if supports_extensions?\n    res = exec_query \"SELECT EXISTS(SELECT * FROM pg_available_extensions WHERE name = '#{name}' AND installed_version IS NOT NULL) as enabled\",\n      'SCHEMA'\n    res.cast_values.first\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extensions\"> <span class=\"method-name\">extensions</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-extensions\">ActiveRecord::ConnectionAdapters::AbstractAdapter#extensions</a> </div> <div class=\"method-source-code\" id=\"extensions-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 361\ndef extensions\n  if supports_extensions?\n    exec_query(\"SELECT extname from pg_extension\", \"SCHEMA\").cast_values\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_algorithms\"> <span class=\"method-name\">index_algorithms</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"index_algorithms-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 168\ndef index_algorithms\n  { concurrently: 'CONCURRENTLY' }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-migration_keys\"> <span class=\"method-name\">migration_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds <code>:array</code> as a valid migration key</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"columndumper#method-i-migration_keys\">ActiveRecord::ConnectionAdapters::ColumnDumper#migration_keys</a> </div> <div class=\"method-source-code\" id=\"migration_keys-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 138\ndef migration_keys\n  super + [:array]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reconnect-21\"> <span class=\"method-name\">reconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Close then reopen the connection.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-reconnect-21\">ActiveRecord::ConnectionAdapters::AbstractAdapter#reconnect!</a> </div> <div class=\"method-source-code\" id=\"reconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 274\ndef reconnect!\n  super\n  @connection.reset\n  configure_connection\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset-21\"> <span class=\"method-name\">reset!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"reset-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 280\ndef reset!\n  clear_cache!\n  reset_transaction\n  unless @connection.transaction_status == ::PG::PQTRANS_IDLE\n    @connection.query 'ROLLBACK'\n  end\n  @connection.query 'DISCARD ALL'\n  configure_connection\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-session_auth-3D\"> <span class=\"method-name\">session_auth=</span><span class=\"method-args\">(user)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the authorized user for this session</p> <div class=\"method-source-code\" id=\"session_auth-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 375\ndef session_auth=(user)\n  clear_cache!\n  exec_query \"SET SESSION AUTHORIZATION #{user}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_standard_conforming_strings\"> <span class=\"method-name\">set_standard_conforming_strings</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enable standard-conforming strings if available.</p> <div class=\"method-source-code\" id=\"set_standard_conforming_strings-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 312\ndef set_standard_conforming_strings\n  old, self.client_min_messages = client_min_messages, 'panic'\n  execute('SET standard_conforming_strings = on', 'SCHEMA') rescue nil\nensure\n  self.client_min_messages = old\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_ddl_transactions-3F\"> <span class=\"method-name\">supports_ddl_transactions?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_ddl_transactions-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 319\ndef supports_ddl_transactions?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_explain-3F\"> <span class=\"method-name\">supports_explain?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_explain-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 323\ndef supports_explain?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_extensions-3F\"> <span class=\"method-name\">supports_extensions?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if pg &gt; 9.1</p> <div class=\"method-source-code\" id=\"supports_extensions-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 328\ndef supports_extensions?\n  postgresql_version &gt;= 90100\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_foreign_keys-3F\"> <span class=\"method-name\">supports_foreign_keys?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_foreign_keys-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 160\ndef supports_foreign_keys?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_index_sort_order-3F\"> <span class=\"method-name\">supports_index_sort_order?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_index_sort_order-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 148\ndef supports_index_sort_order?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_materialized_views-3F\"> <span class=\"method-name\">supports_materialized_views?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_materialized_views-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 337\ndef supports_materialized_views?\n  postgresql_version &gt;= 90300\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_migrations-3F\"> <span class=\"method-name\">supports_migrations?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true, since this connection adapter supports migrations.</p> <div class=\"method-source-code\" id=\"supports_migrations-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 302\ndef supports_migrations?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_partial_index-3F\"> <span class=\"method-name\">supports_partial_index?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_partial_index-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 152\ndef supports_partial_index?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_ranges-3F\"> <span class=\"method-name\">supports_ranges?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"../../range\">Range</a> datatypes weren't introduced until <a href=\"postgresql\">PostgreSQL</a> 9.2</p> <div class=\"method-source-code\" id=\"supports_ranges-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 333\ndef supports_ranges?\n  postgresql_version &gt;= 90200\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_statement_cache-3F\"> <span class=\"method-name\">supports_statement_cache?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code>, since this connection adapter supports prepared statement caching.</p> <div class=\"method-source-code\" id=\"supports_statement_cache-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 144\ndef supports_statement_cache?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_transaction_isolation-3F\"> <span class=\"method-name\">supports_transaction_isolation?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_transaction_isolation-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 156\ndef supports_transaction_isolation?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_views-3F\"> <span class=\"method-name\">supports_views?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_views-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 164\ndef supports_views?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_alias_length\"> <span class=\"method-name\">table_alias_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the configured supported identifier length supported by <a href=\"postgresql\">PostgreSQL</a></p> <div class=\"method-source-code\" id=\"table_alias_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 370\ndef table_alias_length\n  @table_alias_length ||= query('SHOW max_identifier_length', 'SCHEMA')[0][0].to_i\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-truncate\"> <span class=\"method-name\">truncate</span><span class=\"method-args\">(table_name, name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"truncate-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 261\ndef truncate(table_name, name = nil)\n  exec_query \"TRUNCATE TABLE #{quote_table_name(table_name)}\", name, []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-use_insert_returning-3F\"> <span class=\"method-name\">use_insert_returning?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"use_insert_returning-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 380\ndef use_insert_returning?\n  @use_insert_returning\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-valid_type-3F\"> <span class=\"method-name\">valid_type?</span><span class=\"method-args\">(type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"valid_type-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 384\ndef valid_type?(type)\n  !native_database_types[type].nil?\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-postgresql_version\"> <span class=\"method-name\">postgresql_version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the connected <a href=\"postgresql\">PostgreSQL</a> server.</p> <div class=\"method-source-code\" id=\"postgresql_version-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 410\ndef postgresql_version\n  @connection.server_version\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-translate_exception\"> <span class=\"method-name\">translate_exception</span><span class=\"method-args\">(exception, message)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-translate_exception\">ActiveRecord::ConnectionAdapters::AbstractAdapter#translate_exception</a> </div> <div class=\"method-source-code\" id=\"translate_exception-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 418\ndef translate_exception(exception, message)\n  return exception unless exception.respond_to?(:result)\n\n  case exception.result.try(:error_field, PGresult::PG_DIAG_SQLSTATE)\n  when UNIQUE_VIOLATION\n    RecordNotUnique.new(message, exception)\n  when FOREIGN_KEY_VIOLATION\n    InvalidForeignKey.new(message, exception)\n  else\n    super\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/querycache":"<h1 id=\"module-ActiveRecord::ConnectionAdapters::QueryCache\" class=\"module\"> module ActiveRecord::ConnectionAdapters::QueryCache </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-query_cache\"> <span class=\"method-name\">query_cache</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-query_cache_enabled\"> <span class=\"method-name\">query_cache_enabled</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-dirties_query_cache\"> <span class=\"method-name\">dirties_query_cache</span><span class=\"method-args\">(base, *method_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"dirties_query_cache-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 9\n        def dirties_query_cache(base, *method_names)\n          method_names.each do |method_name|\n            base.class_eval \"              def #{method_name}(*)\n                clear_query_cache if @query_cache_enabled\n                super\n              end\n\", __FILE__, __LINE__ + 1\n          end\n        end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(*)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 23\ndef initialize(*)\n  super\n  @query_cache         = Hash.new { |h,sql| h[sql] = {} }\n  @query_cache_enabled = false\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cache\"> <span class=\"method-name\">cache</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enable the query cache within the block.</p> <div class=\"method-source-code\" id=\"cache-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 30\ndef cache\n  old, @query_cache_enabled = @query_cache_enabled, true\n  yield\nensure\n  @query_cache_enabled = old\n  clear_query_cache unless @query_cache_enabled\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_query_cache\"> <span class=\"method-name\">clear_query_cache</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears the query cache.</p> <p>One reason you may wish to call this method explicitly is between queries that ask the database to randomize results. Otherwise the cache would see the same SQL query and repeatedly return the same result each time, silently undermining the randomness you were expecting.</p> <div class=\"method-source-code\" id=\"clear_query_cache-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 60\ndef clear_query_cache\n  @query_cache.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disable_query_cache-21\"> <span class=\"method-name\">disable_query_cache!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"disable_query_cache-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 42\ndef disable_query_cache!\n  @query_cache_enabled = false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-enable_query_cache-21\"> <span class=\"method-name\">enable_query_cache!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"enable_query_cache-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 38\ndef enable_query_cache!\n  @query_cache_enabled = true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_all\"> <span class=\"method-name\">select_all</span><span class=\"method-args\">(arel, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"select_all-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 64\ndef select_all(arel, name = nil, binds = [])\n  if @query_cache_enabled &amp;&amp; !locked?(arel)\n    arel, binds = binds_from_relation arel, binds\n    sql = to_sql(arel, binds)\n    cache_sql(sql, binds) { super(sql, name, binds) }\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-uncached\"> <span class=\"method-name\">uncached</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disable the query cache within the block.</p> <div class=\"method-source-code\" id=\"uncached-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 47\ndef uncached\n  old, @query_cache_enabled = @query_cache_enabled, false\n  yield\nensure\n  @query_cache_enabled = old\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/quoting":"<h1 id=\"module-ActiveRecord::ConnectionAdapters::Quoting\" class=\"module\"> module ActiveRecord::ConnectionAdapters::Quoting </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote\"> <span class=\"method-name\">quote</span><span class=\"method-args\">(value, column = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Quotes the column value to help prevent <a href=\"http://en.wikipedia.org/wiki/SQL_injection\">SQL injection attacks</a>.</p> <div class=\"method-source-code\" id=\"quote-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 8\ndef quote(value, column = nil)\n  # records are quoted as their primary key\n  return value.quoted_id if value.respond_to?(:quoted_id)\n\n  if column\n    value = column.cast_type.type_cast_for_database(value)\n  end\n\n  _quote(value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote_column_name\"> <span class=\"method-name\">quote_column_name</span><span class=\"method-args\">(column_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Quotes the column name. Defaults to no quoting.</p> <div class=\"method-source-code\" id=\"quote_column_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 44\ndef quote_column_name(column_name)\n  column_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote_string\"> <span class=\"method-name\">quote_string</span><span class=\"method-args\">(s)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Quotes a string, escaping any ' (single quote) and \\ (backslash) characters.</p> <div class=\"method-source-code\" id=\"quote_string-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 39\ndef quote_string(s)\n  s.gsub(/\\/, '\\&amp;\\&amp;').gsub(/'/, \"''\") # ' (for ruby-mode)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote_table_name\"> <span class=\"method-name\">quote_table_name</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Quotes the table name. Defaults to column name quoting.</p> <div class=\"method-source-code\" id=\"quote_table_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 49\ndef quote_table_name(table_name)\n  quote_column_name(table_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote_table_name_for_assignment\"> <span class=\"method-name\">quote_table_name_for_assignment</span><span class=\"method-args\">(table, attr)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Override to return the quoted table name for assignment. Defaults to table quoting.</p> <p>This works for mysql and mysql2 where table.column can be used to resolve ambiguity.</p> <p>We override this in the sqlite3 and postgresql adapters to use only the column name (as per syntax requirements).</p> <div class=\"method-source-code\" id=\"quote_table_name_for_assignment-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 61\ndef quote_table_name_for_assignment(table, attr)\n  quote_table_name(\"#{table}.#{attr}\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_date\"> <span class=\"method-name\">quoted_date</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"quoted_date-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 81\ndef quoted_date(value)\n  if value.acts_like?(:time)\n    zone_conversion_method = ActiveRecord::Base.default_timezone == :utc ? :getutc : :getlocal\n\n    if value.respond_to?(zone_conversion_method)\n      value = value.send(zone_conversion_method)\n    end\n  end\n\n  value.to_s(:db)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_false\"> <span class=\"method-name\">quoted_false</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"quoted_false-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 73\ndef quoted_false\n  \"'f'\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_true\"> <span class=\"method-name\">quoted_true</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"quoted_true-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 65\ndef quoted_true\n  \"'t'\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-type_cast\"> <span class=\"method-name\">type_cast</span><span class=\"method-args\">(value, column)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Cast a <code>value</code> to a type that the database understands. For example, SQLite does not understand dates, so this method will convert a <a href=\"../../date\">Date</a> to a <a href=\"../../string\">String</a>.</p> <div class=\"method-source-code\" id=\"type_cast-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 22\ndef type_cast(value, column)\n  if value.respond_to?(:quoted_id) &amp;&amp; value.respond_to?(:id)\n    return value.id\n  end\n\n  if column\n    value = column.cast_type.type_cast_for_database(value)\n  end\n\n  _type_cast(value)\nrescue TypeError\n  to_type = column ? \" to #{column.type}\" : \"\"\n  raise TypeError, \"can't cast #{value.class}#{to_type}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unquoted_false\"> <span class=\"method-name\">unquoted_false</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"unquoted_false-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 77\ndef unquoted_false\n  'f'\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unquoted_true\"> <span class=\"method-name\">unquoted_true</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"unquoted_true-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 69\ndef unquoted_true\n  't'\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/sqlite3adapter":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::SQLite3Adapter\" class=\"class\"> class ActiveRecord::ConnectionAdapters::SQLite3Adapter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"abstractadapter\">ActiveRecord::ConnectionAdapters::AbstractAdapter</a></dd>\n</dl> <section class=\"description\"> <p>The SQLite3 adapter works SQLite 3.6.16 or newer with the sqlite3-ruby drivers (available as gem from <a href=\"https://rubygems.org/gems/sqlite3\">rubygems.org/gems/sqlite3</a>).</p> <p>Options:</p> <ul><li> <p><code>:database</code> - Path to the database file.</p> </li></ul> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ADAPTER_NAME\">ADAPTER_NAME </dt>\n\n<dt id=\"NATIVE_DATABASE_TYPES\">NATIVE_DATABASE_TYPES </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(connection, logger, connection_options, config)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"querycache#method-c-new\">ActiveRecord::ConnectionAdapters::QueryCache.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 124\ndef initialize(connection, logger, connection_options, config)\n  super(connection, logger)\n\n  @active     = nil\n  @statements = StatementPool.new(@connection,\n                                  self.class.type_cast_config_to_integer(config.fetch(:statement_limit) { 1000 }))\n  @config = config\n\n  @visitor = Arel::Visitors::SQLite.new self\n\n  if self.class.type_cast_config_to_boolean(config.fetch(:prepared_statements) { true })\n    @prepared_statements = true\n  else\n    @prepared_statements = false\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-active-3F\"> <span class=\"method-name\">active?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"active-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 176\ndef active?\n  @active != false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-allowed_index_name_length\"> <span class=\"method-name\">allowed_index_name_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns 62. SQLite supports index names up to 64 characters. The rest is used by rails internally to perform temporary rename operations</p> <div class=\"method-source-code\" id=\"allowed_index_name_length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 200\ndef allowed_index_name_length\n  index_name_length - 2\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_column_null\"> <span class=\"method-name\">change_column_null</span><span class=\"method-args\">(table_name, column_name, null, default = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"change_column_null-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 473\ndef change_column_null(table_name, column_name, null, default = nil)\n  unless null || default.nil?\n    exec_query(\"UPDATE #{quote_table_name(table_name)} SET #{quote_column_name(column_name)}=#{quote(default)} WHERE #{quote_column_name(column_name)} IS NULL\")\n  end\n  alter_table(table_name) do |definition|\n    definition[column_name].null = null\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_cache-21\"> <span class=\"method-name\">clear_cache!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears the prepared statements cache.</p> <div class=\"method-source-code\" id=\"clear_cache-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 189\ndef clear_cache!\n  @statements.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-disconnect-21\"> <span class=\"method-name\">disconnect!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disconnects from the database if already connected. Otherwise, this method does nothing.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-disconnect-21\">ActiveRecord::ConnectionAdapters::AbstractAdapter#disconnect!</a> </div> <div class=\"method-source-code\" id=\"disconnect-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 182\ndef disconnect!\n  super\n  @active = false\n  @connection.close rescue nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encoding\"> <span class=\"method-name\">encoding</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current database encoding format as a string, eg: 'UTF-8'</p> <div class=\"method-source-code\" id=\"encoding-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 209\ndef encoding\n  @connection.encoding.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_delete\"> <span class=\"method-name\">exec_delete</span><span class=\"method-args\">(sql, name = 'SQL', binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_delete-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 318\ndef exec_delete(sql, name = 'SQL', binds = [])\n  exec_query(sql, name, binds)\n  @connection.changes\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"sqlite3adapter#method-i-exec_update\">exec_update</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_query\"> <span class=\"method-name\">exec_query</span><span class=\"method-args\">(sql, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_query-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 288\ndef exec_query(sql, name = nil, binds = [])\n  type_casted_binds = binds.map { |col, val|\n    [col, type_cast(val, col)]\n  }\n\n  log(sql, name, type_casted_binds) do\n    # Don't cache statements if they are not prepared\n    if without_prepared_statement?(binds)\n      stmt    = @connection.prepare(sql)\n      begin\n        cols    = stmt.columns\n        records = stmt.to_a\n      ensure\n        stmt.close\n      end\n      stmt = records\n    else\n      cache = @statements[sql] ||= {\n        :stmt =&gt; @connection.prepare(sql)\n      }\n      stmt = cache[:stmt]\n      cols = cache[:cols] ||= stmt.columns\n      stmt.reset!\n      stmt.bind_params type_casted_binds.map { |_, val| val }\n    end\n\n    ActiveRecord::Result.new(cols, stmt.to_a)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-exec_update\"> <span class=\"method-name\">exec_update</span><span class=\"method-args\">(sql, name = 'SQL', binds = [])</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"sqlite3adapter#method-i-exec_delete\">exec_delete</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-explain\"> <span class=\"method-name\">explain</span><span class=\"method-args\">(arel, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"explain-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 269\ndef explain(arel, binds = [])\n  sql = \"EXPLAIN QUERY PLAN #{to_sql(arel, binds)}\"\n  ExplainPrettyPrinter.new.pp(exec_query(sql, 'EXPLAIN', []))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last_inserted_id\"> <span class=\"method-name\">last_inserted_id</span><span class=\"method-args\">(result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"last_inserted_id-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 324\ndef last_inserted_id(result)\n  @connection.last_insert_row_id\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote_table_name_for_assignment\"> <span class=\"method-name\">quote_table_name_for_assignment</span><span class=\"method-args\">(table, attr)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"quote_table_name_for_assignment-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 247\ndef quote_table_name_for_assignment(table, attr)\n  quote_column_name(attr)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_table\"> <span class=\"method-name\">rename_table</span><span class=\"method-args\">(table_name, new_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Renames a table.</p> <p>Example:</p> <pre class=\"ruby\">rename_table('octopuses', 'octopi')\n</pre> <div class=\"method-source-code\" id=\"rename_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 440\ndef rename_table(table_name, new_name)\n  exec_query \"ALTER TABLE #{quote_table_name(table_name)} RENAME TO #{quote_table_name(new_name)}\"\n  rename_table_indexes(table_name, new_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-requires_reloading-3F\"> <span class=\"method-name\">requires_reloading?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"requires_reloading-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 168\ndef requires_reloading?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select_rows\"> <span class=\"method-name\">select_rows</span><span class=\"method-args\">(sql, name = nil, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"select_rows-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 348\ndef select_rows(sql, name = nil, binds = [])\n  exec_query(sql, name, binds).rows\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_ddl_transactions-3F\"> <span class=\"method-name\">supports_ddl_transactions?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_ddl_transactions-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 141\ndef supports_ddl_transactions?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_explain-3F\"> <span class=\"method-name\">supports_explain?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_explain-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 213\ndef supports_explain?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_index_sort_order-3F\"> <span class=\"method-name\">supports_index_sort_order?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_index_sort_order-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 193\ndef supports_index_sort_order?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_partial_index-3F\"> <span class=\"method-name\">supports_partial_index?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_partial_index-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 149\ndef supports_partial_index?\n  sqlite_version &gt;= '3.8.0'\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_savepoints-3F\"> <span class=\"method-name\">supports_savepoints?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_savepoints-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 145\ndef supports_savepoints?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_statement_cache-3F\"> <span class=\"method-name\">supports_statement_cache?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true, since this connection adapter supports prepared statement caching.</p> <div class=\"method-source-code\" id=\"supports_statement_cache-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 155\ndef supports_statement_cache?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-supports_views-3F\"> <span class=\"method-name\">supports_views?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"supports_views-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 172\ndef supports_views?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_exists-3F\"> <span class=\"method-name\">table_exists?</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"table_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 379\ndef table_exists?(table_name)\n  table_name &amp;&amp; tables(nil, table_name).any?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-valid_alter_table_type-3F\"> <span class=\"method-name\">valid_alter_table_type?</span><span class=\"method-args\">(type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See: <a href=\"http://www.sqlite.org/lang_altertable.html\">www.sqlite.org/lang_altertable.html</a> SQLite has an additional restriction on the ALTER TABLE statement</p> <div class=\"method-source-code\" id=\"valid_alter_table_type-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 447\ndef valid_alter_table_type?(type)\n  type.to_sym != :primary_key\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initialize_type_map\"> <span class=\"method-name\">initialize_type_map</span><span class=\"method-args\">(m)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"initialize_type_map-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 504\ndef initialize_type_map(m)\n  super\n  m.register_type(/binary/i, SQLite3Binary.new)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sqlite_version\"> <span class=\"method-name\">sqlite_version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"sqlite_version-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 604\ndef sqlite_version\n  @sqlite_version ||= SQLite3Adapter::Version.new(select_value('select sqlite_version(*)'))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_structure\"> <span class=\"method-name\">table_structure</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"table_structure-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 509\ndef table_structure(table_name)\n  structure = exec_query(\"PRAGMA table_info(#{quote_table_name(table_name)})\", 'SCHEMA').to_hash\n  raise(ActiveRecord::StatementInvalid, \"Could not find table '#{table_name}'\") if structure.empty?\n  structure\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-translate_exception\"> <span class=\"method-name\">translate_exception</span><span class=\"method-args\">(exception, message)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"abstractadapter#method-i-translate_exception\">ActiveRecord::ConnectionAdapters::AbstractAdapter#translate_exception</a> </div> <div class=\"method-source-code\" id=\"translate_exception-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb, line 608\ndef translate_exception(exception, message)\n  case exception.message\n  # SQLite 3.8.2 returns a newly formatted error message:\n  #   UNIQUE constraint failed: *table_name*.*column_name*\n  # Older versions of SQLite return:\n  #   column *column_name* is not unique\n  when /column(s)? .* (is|are) not unique/, /UNIQUE constraint failed: .*/\n    RecordNotUnique.new(message, exception)\n  else\n    super\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/schemacache":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::SchemaCache\" class=\"class\"> class ActiveRecord::ConnectionAdapters::SchemaCache </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-connection\"> <span class=\"method-name\">connection</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-version\"> <span class=\"method-name\">version</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(conn)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 7\ndef initialize(conn)\n  @connection = conn\n\n  @columns      = {}\n  @columns_hash = {}\n  @primary_keys = {}\n  @tables       = {}\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add\"> <span class=\"method-name\">add</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add internal cache for table with <code>table_name</code>.</p> <div class=\"method-source-code\" id=\"add-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 29\ndef add(table_name)\n  if table_exists?(table_name)\n    primary_keys(table_name)\n    columns(table_name)\n    columns_hash(table_name)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear-21\"> <span class=\"method-name\">clear!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears out internal caches</p> <div class=\"method-source-code\" id=\"clear-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 55\ndef clear!\n  @columns.clear\n  @columns_hash.clear\n  @primary_keys.clear\n  @tables.clear\n  @version = nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_table_cache-21\"> <span class=\"method-name\">clear_table_cache!</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clear out internal caches for table with <code>table_name</code>.</p> <div class=\"method-source-code\" id=\"clear_table_cache-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 70\ndef clear_table_cache!(table_name)\n  @columns.delete table_name\n  @columns_hash.delete table_name\n  @primary_keys.delete table_name\n  @tables.delete table_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-columns\"> <span class=\"method-name\">columns</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the columns for a table</p> <div class=\"method-source-code\" id=\"columns-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 42\ndef columns(table_name)\n  @columns[table_name] ||= connection.columns(table_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-columns_hash\"> <span class=\"method-name\">columns_hash</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the columns for a table as a hash, key is the column name value is the column object.</p> <div class=\"method-source-code\" id=\"columns_hash-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 48\ndef columns_hash(table_name)\n  @columns_hash[table_name] ||= Hash[columns(table_name).map { |col|\n    [col.name, col]\n  }]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-marshal_dump\"> <span class=\"method-name\">marshal_dump</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"marshal_dump-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 77\ndef marshal_dump\n  # if we get current version during initialization, it happens stack over flow.\n  @version = ActiveRecord::Migrator.current_version\n  [@version, @columns, @columns_hash, @primary_keys, @tables]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-marshal_load\"> <span class=\"method-name\">marshal_load</span><span class=\"method-args\">(array)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"marshal_load-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 83\ndef marshal_load(array)\n  @version, @columns, @columns_hash, @primary_keys, @tables = array\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-primary_keys\"> <span class=\"method-name\">primary_keys</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"primary_keys-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 16\ndef primary_keys(table_name)\n  @primary_keys[table_name] ||= table_exists?(table_name) ? connection.primary_key(table_name) : nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-size\"> <span class=\"method-name\">size</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"size-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 63\ndef size\n  [@columns, @columns_hash, @primary_keys, @tables].map { |x|\n    x.size\n  }.inject :+\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_exists-3F\"> <span class=\"method-name\">table_exists?</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A cached lookup for table existence.</p> <div class=\"method-source-code\" id=\"table_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 21\ndef table_exists?(name)\n  prepare_tables if @tables.empty?\n  return @tables[name] if @tables.key? name\n\n  @tables[name] = connection.table_exists?(name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tables\"> <span class=\"method-name\">tables</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"tables-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/schema_cache.rb, line 37\ndef tables(name)\n  @tables[name]\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/schemastatements":"<h1 id=\"module-ActiveRecord::ConnectionAdapters::SchemaStatements\" class=\"module\"> module ActiveRecord::ConnectionAdapters::SchemaStatements </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-add_belongs_to\"> <span class=\"method-name\">add_belongs_to</span><span class=\"method-args\">(table_name, ref_name, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"schemastatements#method-i-add_reference\">add_reference</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_column\"> <span class=\"method-name\">add_column</span><span class=\"method-args\">(table_name, column_name, type, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a new column to the named table. See <a href=\"tabledefinition#method-i-column\">ActiveRecord::ConnectionAdapters::TableDefinition#column</a> for details of the options you can use.</p> <div class=\"method-source-code\" id=\"add_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 390\ndef add_column(table_name, column_name, type, options = {})\n  at = create_alter_table table_name\n  at.add_column(column_name, type, options)\n  execute schema_creation.accept at\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_foreign_key\"> <span class=\"method-name\">add_foreign_key</span><span class=\"method-args\">(from_table, to_table, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a new foreign key. <code>from_table</code> is the table with the key column, <code>to_table</code> contains the referenced primary key.</p> <p>The foreign key will be named after the following pattern: <code>fk_rails_&lt;identifier&gt;</code>. <code>identifier</code> is a 10 character long string which is deterministically generated from the <code>from_table</code> and <code>column</code>. A custom name can be specified with the <code>:name</code> option.</p> <h6 id=\"method-i-add_foreign_key-label-Creating+a+simple+foreign+key\">Creating a simple foreign key</h6> <pre class=\"ruby\">add_foreign_key :articles, :authors\n</pre> <p>generates:</p> <pre>ALTER TABLE \"articles\" ADD CONSTRAINT articles_author_id_fk FOREIGN KEY (\"author_id\") REFERENCES \"authors\" (\"id\")</pre> <h6 id=\"method-i-add_foreign_key-label-Creating+a+foreign+key+on+a+specific+column\">Creating a foreign key on a specific column</h6> <pre class=\"ruby\">add_foreign_key :articles, :users, column: :author_id, primary_key: :lng_id\n</pre> <p>generates:</p> <pre>ALTER TABLE \"articles\" ADD CONSTRAINT fk_rails_58ca3d3a82 FOREIGN KEY (\"author_id\") REFERENCES \"users\" (\"lng_id\")</pre> <h6 id=\"method-i-add_foreign_key-label-Creating+a+cascading+foreign+key\">Creating a cascading foreign key</h6> <pre class=\"ruby\">add_foreign_key :articles, :authors, on_delete: :cascade\n</pre> <p>generates:</p> <pre>ALTER TABLE \"articles\" ADD CONSTRAINT articles_author_id_fk FOREIGN KEY (\"author_id\") REFERENCES \"authors\" (\"id\") ON DELETE CASCADE</pre> <p>The <code>options</code> hash can include the following keys:</p> <dl class=\"rdoc-list label-list\">\n<dt>\n<code>:column</code> </dt>\n<dd> <p>The foreign key column name on <code>from_table</code>. Defaults to <code>to_table.singularize + \"_id\"</code></p> </dd>\n<dt>\n<code>:primary_key</code> </dt>\n<dd> <p>The primary key column name on <code>to_table</code>. Defaults to <code>id</code>.</p> </dd>\n<dt>\n<code>:name</code> </dt>\n<dd> <p>The constraint name. Defaults to <code>fk_rails_&lt;identifier&gt;</code>.</p> </dd>\n<dt>\n<code>:on_delete</code> </dt>\n<dd> <p>Action that happens <code>ON DELETE</code>. Valid values are <code>:nullify</code>, <code>:cascade:</code> and <code>:restrict</code></p> </dd>\n<dt>\n<code>:on_update</code> </dt>\n<dd> <p>Action that happens <code>ON UPDATE</code>. Valid values are <code>:nullify</code>, <code>:cascade:</code> and <code>:restrict</code></p> </dd>\n</dl> <div class=\"method-source-code\" id=\"add_foreign_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 747\ndef add_foreign_key(from_table, to_table, options = {})\n  return unless supports_foreign_keys?\n\n  options[:column] ||= foreign_key_column_for(to_table)\n\n  options = {\n    column: options[:column],\n    primary_key: options[:primary_key],\n    name: foreign_key_name(from_table, options),\n    on_delete: options[:on_delete],\n    on_update: options[:on_update]\n  }\n  at = create_alter_table from_table\n  at.add_foreign_key to_table, options\n\n  execute schema_creation.accept(at)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_index\"> <span class=\"method-name\">add_index</span><span class=\"method-args\">(table_name, column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a new index to the table. <code>column_name</code> can be a single <a href=\"../../symbol\">Symbol</a>, or an <a href=\"../../array\">Array</a> of Symbols.</p> <p>The index will be named after the table and the column name(s), unless you pass <code>:name</code> as an option.</p> <h6 id=\"method-i-add_index-label-Creating+a+simple+index\">Creating a simple index</h6> <pre class=\"ruby\">add_index(:suppliers, :name)\n</pre> <p>generates:</p> <pre class=\"ruby\">CREATE INDEX suppliers_name_index ON suppliers(name)\n</pre> <h6 id=\"method-i-add_index-label-Creating+a+unique+index\">Creating a unique index</h6> <pre class=\"ruby\">add_index(:accounts, [:branch_id, :party_id], unique: true)\n</pre> <p>generates:</p> <pre class=\"ruby\">CREATE UNIQUE INDEX accounts_branch_id_party_id_index ON accounts(branch_id, party_id)\n</pre> <h6 id=\"method-i-add_index-label-Creating+a+named+index\">Creating a named index</h6> <pre class=\"ruby\">add_index(:accounts, [:branch_id, :party_id], unique: true, name: 'by_branch_party')\n</pre> <p>generates:</p> <pre class=\"ruby\">CREATE UNIQUE INDEX by_branch_party ON accounts(branch_id, party_id)\n</pre> <h6 id=\"method-i-add_index-label-Creating+an+index+with+specific+key+length\">Creating an index with specific key length</h6> <pre class=\"ruby\">add_index(:accounts, :name, name: 'by_name', length: 10)\n</pre> <p>generates:</p> <pre class=\"ruby\">CREATE INDEX by_name ON accounts(name(10))\n\nadd_index(:accounts, [:name, :surname], name: 'by_name_surname', length: {name: 10, surname: 15})\n</pre> <p>generates:</p> <pre class=\"ruby\">CREATE INDEX by_name_surname ON accounts(name(10), surname(15))\n</pre> <p>Note: SQLite doesn't support index length.</p> <h6 id=\"method-i-add_index-label-Creating+an+index+with+a+sort+order+-28desc+or+asc-2C+asc+is+the+default-29\">Creating an index with a sort order (desc or asc, asc is the default)</h6> <pre class=\"ruby\">add_index(:accounts, [:branch_id, :party_id, :surname], order: {branch_id: :desc, party_id: :asc})\n</pre> <p>generates:</p> <pre>CREATE INDEX by_branch_desc_party ON accounts(branch_id DESC, party_id ASC, surname)</pre> <p>Note: MySQL doesn't yet support index order (it accepts the syntax but ignores it).</p> <h6 id=\"method-i-add_index-label-Creating+a+partial+index\">Creating a partial index</h6> <pre class=\"ruby\">add_index(:accounts, [:branch_id, :party_id], unique: true, where: \"active\")\n</pre> <p>generates:</p> <pre>CREATE UNIQUE INDEX index_accounts_on_branch_id_and_party_id ON accounts(branch_id, party_id) WHERE active</pre> <p>Note: Partial indexes are only supported for <a href=\"postgresql\">PostgreSQL</a> and SQLite 3.8.0+.</p> <h6 id=\"method-i-add_index-label-Creating+an+index+with+a+specific+method\">Creating an index with a specific method</h6> <pre class=\"ruby\">add_index(:developers, :name, using: 'btree')\n</pre> <p>generates:</p> <pre class=\"ruby\">CREATE INDEX index_developers_on_name ON developers USING btree (name) -- PostgreSQL\nCREATE INDEX index_developers_on_name USING btree ON developers (name) -- MySQL\n</pre> <p>Note: only supported by <a href=\"postgresql\">PostgreSQL</a> and MySQL</p> <h6 id=\"method-i-add_index-label-Creating+an+index+with+a+specific+type\">Creating an index with a specific type</h6> <pre class=\"ruby\">add_index(:developers, :name, type: :fulltext)\n</pre> <p>generates:</p> <pre class=\"ruby\">CREATE FULLTEXT INDEX index_developers_on_name ON developers (name) -- MySQL\n</pre> <p>Note: only supported by MySQL. Supported: <code>:fulltext</code> and <code>:spatial</code> on MyISAM tables.</p> <div class=\"method-source-code\" id=\"add_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 555\ndef add_index(table_name, column_name, options = {})\n  index_name, index_type, index_columns, index_options = add_index_options(table_name, column_name, options)\n  execute \"CREATE #{index_type} INDEX #{quote_column_name(index_name)} ON #{quote_table_name(table_name)} (#{index_columns})#{index_options}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_reference\"> <span class=\"method-name\">add_reference</span><span class=\"method-args\">(table_name, ref_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a reference. The reference column is an integer by default, the <code>:type</code> option can be used to specify a different type. Optionally adds a <code>_type</code> column, if <code>:polymorphic</code> option is provided. <code>add_reference</code> and <code>add_belongs_to</code> are acceptable.</p> <p>The <code>options</code> hash can include the following keys:</p> <dl class=\"rdoc-list label-list\">\n<dt>\n<code>:type</code> </dt>\n<dd> <p>The reference column type. Defaults to <code>:integer</code>.</p> </dd>\n<dt>\n<code>:index</code> </dt>\n<dd> <p>Add an appropriate index. Defaults to false.</p> </dd>\n<dt>\n<code>:foreign_key</code> </dt>\n<dd> <p>Add an appropriate foreign key. Defaults to false.</p> </dd>\n<dt>\n<code>:polymorphic</code> </dt>\n<dd> <p>Wether an additional <code>_type</code> column should be added. Defaults to false.</p> </dd>\n</dl> <h6 id=\"method-i-add_reference-label-Create+a+user_id+integer+column\">Create a user_id integer column</h6> <pre class=\"ruby\">add_reference(:products, :user)\n</pre> <h6 id=\"method-i-add_reference-label-Create+a+user_id+string+column\">Create a user_id string column</h6> <pre class=\"ruby\">add_reference(:products, :user, type: :string)\n</pre> <h6 id=\"method-i-add_reference-label-Create+supplier_id-2C+supplier_type+columns+and+appropriate+index\">Create supplier_id, supplier_type columns and appropriate index</h6> <pre class=\"ruby\">add_reference(:products, :supplier, polymorphic: true, index: true)\n</pre> <div class=\"method-source-code\" id=\"add_reference-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 653\ndef add_reference(table_name, ref_name, options = {})\n  polymorphic = options.delete(:polymorphic)\n  index_options = options.delete(:index)\n  type = options.delete(:type) || :integer\n  foreign_key_options = options.delete(:foreign_key)\n\n  if polymorphic &amp;&amp; foreign_key_options\n    raise ArgumentError, \"Cannot add a foreign key to a polymorphic relation\"\n  end\n\n  add_column(table_name, \"#{ref_name}_id\", type, options)\n  add_column(table_name, \"#{ref_name}_type\", :string, polymorphic.is_a?(Hash) ? polymorphic : options) if polymorphic\n  add_index(table_name, polymorphic ? %w[type id].map{ |t| \"#{ref_name}_#{t}\" } : \"#{ref_name}_id\", index_options.is_a?(Hash) ? index_options : {}) if index_options\n  if foreign_key_options\n    to_table = Base.pluralize_table_names ? ref_name.to_s.pluralize : ref_name\n    add_foreign_key(table_name, to_table, foreign_key_options.is_a?(Hash) ? foreign_key_options : {})\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"schemastatements#method-i-add_belongs_to\">add_belongs_to</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_timestamps\"> <span class=\"method-name\">add_timestamps</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>) columns to <code>table_name</code>. Additional options (like <code>null:\nfalse</code>) are forwarded to <a href=\"schemastatements#method-i-add_column\">add_column</a>.</p> <pre class=\"ruby\">add_timestamps(:suppliers, null: false)\n</pre> <div class=\"method-source-code\" id=\"add_timestamps-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 890\ndef add_timestamps(table_name, options = {})\n  emit_warning_if_null_unspecified(:add_timestamps, options)\n  add_column table_name, :created_at, :datetime, options\n  add_column table_name, :updated_at, :datetime, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assume_migrated_upto_version\"> <span class=\"method-name\">assume_migrated_upto_version</span><span class=\"method-args\">(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"assume_migrated_upto_version-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 822\ndef assume_migrated_upto_version(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)\n  migrations_paths = Array(migrations_paths)\n  version = version.to_i\n  sm_table = quote_table_name(ActiveRecord::Migrator.schema_migrations_table_name)\n\n  migrated = select_values(\"SELECT version FROM #{sm_table}\").map { |v| v.to_i }\n  paths = migrations_paths.map {|p| \"#{p}/[0-9]*_*.rb\" }\n  versions = Dir[*paths].map do |filename|\n    filename.split('/').last.split('_').first.to_i\n  end\n\n  unless migrated.include?(version)\n    execute \"INSERT INTO #{sm_table} (version) VALUES ('#{version}')\"\n  end\n\n  inserted = Set.new\n  (versions - migrated).each do |v|\n    if inserted.include?(v)\n      raise \"Duplicate migration #{v}. Please renumber your migrations to resolve the conflict.\"\n    elsif v &lt; version\n      execute \"INSERT INTO #{sm_table} (version) VALUES ('#{v}')\"\n      inserted &lt;&lt; v\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_column\"> <span class=\"method-name\">change_column</span><span class=\"method-args\">(table_name, column_name, type, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Changes the column's definition according to the new options. See <a href=\"tabledefinition#method-i-column\">ActiveRecord::ConnectionAdapters::TableDefinition#column</a> for details of the options you can use.</p> <pre class=\"ruby\">change_column(:suppliers, :name, :string, limit: 80)\nchange_column(:accounts, :description, :text)\n</pre> <div class=\"method-source-code\" id=\"change_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 424\ndef change_column(table_name, column_name, type, options = {})\n  raise NotImplementedError, \"change_column is not implemented\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_column_default\"> <span class=\"method-name\">change_column_default</span><span class=\"method-args\">(table_name, column_name, default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets a new default value for a column:</p> <pre class=\"ruby\">change_column_default(:suppliers, :qualification, 'new')\nchange_column_default(:accounts, :authorized, 1)\n</pre> <p>Setting the default to <code>nil</code> effectively drops the default:</p> <pre class=\"ruby\">change_column_default(:users, :email, nil)\n</pre> <div class=\"method-source-code\" id=\"change_column_default-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 437\ndef change_column_default(table_name, column_name, default)\n  raise NotImplementedError, \"change_column_default is not implemented\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_column_null\"> <span class=\"method-name\">change_column_null</span><span class=\"method-args\">(table_name, column_name, null, default = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets or removes a +NOT NULL+ constraint on a column. The <code>null</code> flag indicates whether the value can be <code>NULL</code>. For example</p> <pre class=\"ruby\">change_column_null(:users, :nickname, false)\n</pre> <p>says nicknames cannot be <code>NULL</code> (adds the constraint), whereas</p> <pre class=\"ruby\">change_column_null(:users, :nickname, true)\n</pre> <p>allows them to be <code>NULL</code> (drops the constraint).</p> <p>The method accepts an optional fourth argument to replace existing +NULL+s with some other value. Use that one when enabling the constraint if needed, since otherwise those rows would not be valid.</p> <p>Please note the fourth argument does not set a column's default.</p> <div class=\"method-source-code\" id=\"change_column_null-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 457\ndef change_column_null(table_name, column_name, null, default = nil)\n  raise NotImplementedError, \"change_column_null is not implemented\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_table\"> <span class=\"method-name\">change_table</span><span class=\"method-args\">(table_name, options = {}) { |update_table_definition(table_name, recorder)| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A block for changing columns in <code>table</code>.</p> <pre class=\"ruby\"># change_table() yields a Table instance\nchange_table(:suppliers) do |t|\n  t.column :name, :string, limit: 60\n  # Other column alterations here\nend\n</pre> <p>The <code>options</code> hash can include the following keys:</p> <dl class=\"rdoc-list label-list\">\n<dt>\n<code>:bulk</code> </dt>\n<dd> <p>Set this to true to make this a bulk alter query, such as</p> <pre>ALTER TABLE `users` ADD COLUMN age INT(11), ADD COLUMN birthdate DATETIME ...</pre> <p>Defaults to false.</p> </dd>\n</dl> <h6 id=\"method-i-change_table-label-Add+a+column\">Add a column</h6> <pre class=\"ruby\">change_table(:suppliers) do |t|\n  t.column :name, :string, limit: 60\nend\n</pre> <h6 id=\"method-i-change_table-label-Add+2+integer+columns\">Add 2 integer columns</h6> <pre class=\"ruby\">change_table(:suppliers) do |t|\n  t.integer :width, :height, null: false, default: 0\nend\n</pre> <h6 id=\"method-i-change_table-label-Add+created_at-2Fupdated_at+columns\">Add created_at/updated_at columns</h6> <pre class=\"ruby\">change_table(:suppliers) do |t|\n  t.timestamps\nend\n</pre> <h6 id=\"method-i-change_table-label-Add+a+foreign+key+column\">Add a foreign key column</h6> <pre class=\"ruby\">change_table(:suppliers) do |t|\n  t.references :company\nend\n</pre> <p>Creates a <code>company_id(integer)</code> column.</p> <h6 id=\"method-i-change_table-label-Add+a+polymorphic+foreign+key+column\">Add a polymorphic foreign key column</h6> <pre class=\"ruby\">change_table(:suppliers) do |t|\n  t.belongs_to :company, polymorphic: true\nend\n</pre> <p>Creates <code>company_type(varchar)</code> and <code>company_id(integer)</code> columns.</p> <h6 id=\"method-i-change_table-label-Remove+a+column\">Remove a column</h6> <pre class=\"ruby\">change_table(:suppliers) do |t|\n  t.remove :company\nend\n</pre> <h6 id=\"method-i-change_table-label-Remove+several+columns\">Remove several columns</h6> <pre class=\"ruby\">change_table(:suppliers) do |t|\n  t.remove :company_id\n  t.remove :width, :height\nend\n</pre> <h6 id=\"method-i-change_table-label-Remove+an+index\">Remove an index</h6> <pre class=\"ruby\">change_table(:suppliers) do |t|\n  t.remove_index :company_id\nend\n</pre> <p>See also <a href=\"table\">Table</a> for details on all of the various column transformation.</p> <div class=\"method-source-code\" id=\"change_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 357\ndef change_table(table_name, options = {})\n  if supports_bulk_alter? &amp;&amp; options[:bulk]\n    recorder = ActiveRecord::Migration::CommandRecorder.new(self)\n    yield update_table_definition(table_name, recorder)\n    bulk_change_table(table_name, recorder.commands)\n  else\n    yield update_table_definition(table_name, self)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column_exists-3F\"> <span class=\"method-name\">column_exists?</span><span class=\"method-args\">(table_name, column_name, type = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Checks to see if a column exists in a given table.</p> <pre class=\"ruby\"># Check a column exists\ncolumn_exists?(:suppliers, :name)\n\n# Check a column exists of a particular type\ncolumn_exists?(:suppliers, :name, :string)\n\n# Check a column exists with a specific definition\ncolumn_exists?(:suppliers, :name, :string, limit: 100)\ncolumn_exists?(:suppliers, :name, :string, default: 'default')\ncolumn_exists?(:suppliers, :name, :string, null: false)\ncolumn_exists?(:suppliers, :tax, :decimal, precision: 8, scale: 2)\n</pre> <div class=\"method-source-code\" id=\"column_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 76\ndef column_exists?(table_name, column_name, type = nil, options = {})\n  column_name = column_name.to_s\n  columns(table_name).any?{ |c| c.name == column_name &amp;&amp;\n                                (!type                     || c.type == type) &amp;&amp;\n                                (!options.key?(:limit)     || c.limit == options[:limit]) &amp;&amp;\n                                (!options.key?(:precision) || c.precision == options[:precision]) &amp;&amp;\n                                (!options.key?(:scale)     || c.scale == options[:scale]) &amp;&amp;\n                                (!options.key?(:default)   || c.default == options[:default]) &amp;&amp;\n                                (!options.key?(:null)      || c.null == options[:null]) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-columns\"> <span class=\"method-name\">columns</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of Column objects for the table specified by <code>table_name</code>. See the concrete implementation for details on the expected parameter values.</p> <div class=\"method-source-code\" id=\"columns-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 60\ndef columns(table_name) end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_join_table\"> <span class=\"method-name\">create_join_table</span><span class=\"method-args\">(table_1, table_2, options = {}) { |td| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a new join table with the name created using the lexical order of the first two arguments. These arguments can be a <a href=\"../../string\">String</a> or a <a href=\"../../symbol\">Symbol</a>.</p> <pre class=\"ruby\"># Creates a table called 'assemblies_parts' with no id.\ncreate_join_table(:assemblies, :parts)\n</pre> <p>You can pass a <code>options</code> hash can include the following keys:</p> <dl class=\"rdoc-list label-list\">\n<dt>\n<code>:table_name</code> </dt>\n<dd> <p>Sets the table name overriding the default</p> </dd>\n<dt>\n<code>:column_options</code> </dt>\n<dd> <p>Any extra options you want appended to the columns definition.</p> </dd>\n<dt>\n<code>:options</code> </dt>\n<dd> <p>Any extra options you want appended to the table definition.</p> </dd>\n<dt>\n<code>:temporary</code> </dt>\n<dd> <p>Make a temporary table.</p> </dd>\n<dt>\n<code>:force</code> </dt>\n<dd> <p>Set to true to drop the table before creating it. Defaults to false.</p> </dd>\n</dl> <p>Note that <code>create_join_table</code> does not create any indices by default; you can use its block form to do so yourself:</p> <pre class=\"ruby\">create_join_table :products, :categories do |t|\n  t.index :product_id\n  t.index :category_id\nend\n</pre> <h6 id=\"method-i-create_join_table-label-Add+a+backend+specific+option+to+the+generated+SQL+-28MySQL-29\">Add a backend specific option to the generated SQL (MySQL)</h6> <pre class=\"ruby\">create_join_table(:assemblies, :parts, options: 'ENGINE=InnoDB DEFAULT CHARSET=utf8')\n</pre> <p>generates:</p> <pre>CREATE TABLE assemblies_parts (\n  assembly_id int NOT NULL,\n  part_id int NOT NULL,\n) ENGINE=InnoDB DEFAULT CHARSET=utf8</pre> <div class=\"method-source-code\" id=\"create_join_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 261\ndef create_join_table(table_1, table_2, options = {})\n  join_table_name = find_join_table_name(table_1, table_2, options)\n\n  column_options = options.delete(:column_options) || {}\n  column_options.reverse_merge!(null: false)\n\n  t1_column, t2_column = [table_1, table_2].map{ |t| t.to_s.singularize.foreign_key }\n\n  create_table(join_table_name, options.merge!(id: false)) do |td|\n    td.integer t1_column, column_options\n    td.integer t2_column, column_options\n    yield td if block_given?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_table\"> <span class=\"method-name\">create_table</span><span class=\"method-args\">(table_name, options = {}) { |td| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a new table with the name <code>table_name</code>. <code>table_name</code> may either be a <a href=\"../../string\">String</a> or a <a href=\"../../symbol\">Symbol</a>.</p> <p>There are two ways to work with <code>create_table</code>. You can use the block form or the regular form, like this:</p> <h3 id=\"method-i-create_table-label-Block+form\">Block form</h3> <pre class=\"ruby\"># create_table() passes a TableDefinition object to the block.\n# This form will not only create the table, but also columns for the\n# table.\n\ncreate_table(:suppliers) do |t|\n  t.column :name, :string, limit: 60\n  # Other fields here\nend\n</pre> <h3 id=\"method-i-create_table-label-Block+form-2C+with+shorthand\">Block form, with shorthand</h3> <pre class=\"ruby\"># You can also use the column types as method calls, rather than calling the column method.\ncreate_table(:suppliers) do |t|\n  t.string :name, limit: 60\n  # Other fields here\nend\n</pre> <h3 id=\"method-i-create_table-label-Regular+form\">Regular form</h3> <pre class=\"ruby\"># Creates a table called 'suppliers' with no columns.\ncreate_table(:suppliers)\n# Add a column to 'suppliers'.\nadd_column(:suppliers, :name, :string, {limit: 60})\n</pre> <p>The <code>options</code> hash can include the following keys:</p> <dl class=\"rdoc-list label-list\">\n<dt>\n<code>:id</code> </dt>\n<dd> <p>Whether to automatically add a primary key column. Defaults to true. Join tables for <code>has_and_belongs_to_many</code> should set it to false.</p> </dd>\n<dt>\n<code>:primary_key</code> </dt>\n<dd> <p>The name of the primary key, if one is to be added automatically. Defaults to <code>id</code>. If <code>:id</code> is false this option is ignored.</p> <p>Note that Active Record models will automatically detect their primary key. This can be avoided by using <code>self.primary_key=</code> on the model to define the key explicitly.</p> </dd>\n<dt>\n<code>:options</code> </dt>\n<dd> <p>Any extra options you want appended to the table definition.</p> </dd>\n<dt>\n<code>:temporary</code> </dt>\n<dd> <p>Make a temporary table.</p> </dd>\n<dt>\n<code>:force</code> </dt>\n<dd> <p>Set to true to drop the table before creating it. Set to <code>:cascade</code> to drop dependent objects as well. Defaults to false.</p> </dd>\n<dt>\n<code>:as</code> </dt>\n<dd> <p>SQL to use to generate the table. When this option is used, the block is ignored, as are the <code>:id</code> and <code>:primary_key</code> options.</p> </dd>\n</dl> <h6 id=\"method-i-create_table-label-Add+a+backend+specific+option+to+the+generated+SQL+-28MySQL-29\">Add a backend specific option to the generated SQL (MySQL)</h6> <pre class=\"ruby\">create_table(:suppliers, options: 'ENGINE=InnoDB DEFAULT CHARSET=utf8')\n</pre> <p>generates:</p> <pre>CREATE TABLE suppliers (\n  id int(11) DEFAULT NULL auto_increment PRIMARY KEY\n) ENGINE=InnoDB DEFAULT CHARSET=utf8</pre> <h6 id=\"method-i-create_table-label-Rename+the+primary+key+column\">Rename the primary key column</h6> <pre class=\"ruby\">create_table(:objects, primary_key: 'guid') do |t|\n  t.column :name, :string, limit: 80\nend\n</pre> <p>generates:</p> <pre>CREATE TABLE objects (\n  guid int(11) DEFAULT NULL auto_increment PRIMARY KEY,\n  name varchar(80)\n)</pre> <h6 id=\"method-i-create_table-label-Do+not+add+a+primary+key+column\">Do not add a primary key column</h6> <pre class=\"ruby\">create_table(:categories_suppliers, id: false) do |t|\n  t.column :category_id, :integer\n  t.column :supplier_id, :integer\nend\n</pre> <p>generates:</p> <pre>CREATE TABLE categories_suppliers (\n  category_id int,\n  supplier_id int\n)</pre> <h6 id=\"method-i-create_table-label-Create+a+temporary+table+based+on+a+query\">Create a temporary table based on a query</h6> <pre class=\"ruby\">create_table(:long_query, temporary: true,\n  as: \"SELECT * FROM orders INNER JOIN line_items ON order_id=orders.id\")\n</pre> <p>generates:</p> <pre>CREATE TEMPORARY TABLE long_query AS\n  SELECT * FROM orders INNER JOIN line_items ON order_id=orders.id</pre> <p>See also <a href=\"tabledefinition#method-i-column\">ActiveRecord::ConnectionAdapters::TableDefinition#column</a> for details on how to create columns.</p> <div class=\"method-source-code\" id=\"create_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 191\ndef create_table(table_name, options = {})\n  td = create_table_definition table_name, options[:temporary], options[:options], options[:as]\n\n  if options[:id] != false &amp;&amp; !options[:as]\n    pk = options.fetch(:primary_key) do\n      Base.get_primary_key table_name.to_s.singularize\n    end\n\n    td.primary_key pk, options.fetch(:id, :primary_key), options\n  end\n\n  yield td if block_given?\n\n  if options[:force] &amp;&amp; table_exists?(table_name)\n    drop_table(table_name, options)\n  end\n\n  result = execute schema_creation.accept td\n\n  unless supports_indexes_in_create?\n    td.indexes.each_pair do |column_name, index_options|\n      add_index(table_name, column_name, index_options)\n    end\n  end\n\n  td.foreign_keys.each_pair do |other_table_name, foreign_key_options|\n    add_foreign_key(table_name, other_table_name, foreign_key_options)\n  end\n\n  result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-drop_join_table\"> <span class=\"method-name\">drop_join_table</span><span class=\"method-args\">(table_1, table_2, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Drops the join table specified by the given arguments. See <code>create_join_table</code> for details.</p> <p>Although this command ignores the block if one is given, it can be helpful to provide one in a migration's <code>change</code> method so it can be reverted. In that case, the block will be used by create_join_table.</p> <div class=\"method-source-code\" id=\"drop_join_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 282\ndef drop_join_table(table_1, table_2, options = {})\n  join_table_name = find_join_table_name(table_1, table_2, options)\n  drop_table(join_table_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-drop_table\"> <span class=\"method-name\">drop_table</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Drops a table from the database.</p> <dl class=\"rdoc-list label-list\">\n<dt>\n<code>:force</code> </dt>\n<dd> <p>Set to <code>:cascade</code> to drop dependent objects as well. Defaults to false.</p> </dd>\n</dl> <p>Although this command ignores most <code>options</code> and the block if one is given, it can be helpful to provide these in a migration's <code>change</code> method so it can be reverted. In that case, <code>options</code> and the block will be used by create_table.</p> <div class=\"method-source-code\" id=\"drop_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 384\ndef drop_table(table_name, options = {})\n  execute \"DROP TABLE #{quote_table_name(table_name)}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-foreign_keys\"> <span class=\"method-name\">foreign_keys</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of foreign keys for the given table. The foreign keys are represented as <code>ForeignKeyDefinition</code> objects.</p> <div class=\"method-source-code\" id=\"foreign_keys-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 701\ndef foreign_keys(table_name)\n  raise NotImplementedError, \"foreign_keys is not implemented\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_exists-3F\"> <span class=\"method-name\">index_exists?</span><span class=\"method-args\">(table_name, column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Checks to see if an index exists on a table for a given index definition.</p> <pre class=\"ruby\"># Check an index exists\nindex_exists?(:suppliers, :company_id)\n\n# Check an index on multiple columns exists\nindex_exists?(:suppliers, [:company_id, :company_type])\n\n# Check a unique index exists\nindex_exists?(:suppliers, :company_id, unique: true)\n\n# Check an index with a custom name exists\nindex_exists?(:suppliers, :company_id, name: \"idx_company_id\")\n</pre> <div class=\"method-source-code\" id=\"index_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 47\ndef index_exists?(table_name, column_name, options = {})\n  column_names = Array(column_name).map(&amp;:to_s)\n  index_name = options.key?(:name) ? options[:name].to_s : index_name(table_name, column: column_names)\n  checks = []\n  checks &lt;&lt; lambda { |i| i.name == index_name }\n  checks &lt;&lt; lambda { |i| i.columns == column_names }\n  checks &lt;&lt; lambda { |i| i.unique } if options[:unique]\n\n  indexes(table_name).any? { |i| checks.all? { |check| check[i] } }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_name_exists-3F\"> <span class=\"method-name\">index_name_exists?</span><span class=\"method-args\">(table_name, index_name, default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Verifies the existence of an index with a given name.</p> <p>The default argument is returned if the underlying implementation does not define the indexes method, as there's no way to determine the correct answer in that case.</p> <div class=\"method-source-code\" id=\"index_name_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 620\ndef index_name_exists?(table_name, index_name, default)\n  return default unless respond_to?(:indexes)\n  index_name = index_name.to_s\n  indexes(table_name).detect { |i| i.name == index_name }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initialize_schema_migrations_table\"> <span class=\"method-name\">initialize_schema_migrations_table</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Should not be called normally, but this operation is non-destructive. The migrations module handles this automatically.</p> <div class=\"method-source-code\" id=\"initialize_schema_migrations_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 818\ndef initialize_schema_migrations_table\n  ActiveRecord::SchemaMigration.create_table\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-native_database_types\"> <span class=\"method-name\">native_database_types</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash of mappings from the abstract data types to the native database types. See <a href=\"tabledefinition#method-i-column\">ActiveRecord::ConnectionAdapters::TableDefinition#column</a> for details on the recognized abstract data types.</p> <div class=\"method-source-code\" id=\"native_database_types-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 13\ndef native_database_types\n  {}\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-remove_belongs_to\"> <span class=\"method-name\">remove_belongs_to</span><span class=\"method-args\">(table_name, ref_name, options = {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"schemastatements#method-i-remove_reference\">remove_reference</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_column\"> <span class=\"method-name\">remove_column</span><span class=\"method-args\">(table_name, column_name, type = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the column from the table definition.</p> <pre class=\"ruby\">remove_column(:suppliers, :qualification)\n</pre> <p>The <code>type</code> and <code>options</code> parameters will be ignored if present. It can be helpful to provide these in a migration's <code>change</code> method so it can be reverted. In that case, <code>type</code> and <code>options</code> will be used by add_column.</p> <div class=\"method-source-code\" id=\"remove_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 414\ndef remove_column(table_name, column_name, type = nil, options = {})\n  execute \"ALTER TABLE #{quote_table_name(table_name)} DROP #{quote_column_name(column_name)}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_columns\"> <span class=\"method-name\">remove_columns</span><span class=\"method-args\">(table_name, *column_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the given columns from the table definition.</p> <pre class=\"ruby\">remove_columns(:suppliers, :qualification, :experience)\n</pre> <div class=\"method-source-code\" id=\"remove_columns-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 400\ndef remove_columns(table_name, *column_names)\n  raise ArgumentError.new(\"You must specify at least one column name. Example: remove_columns(:people, :first_name)\") if column_names.empty?\n  column_names.each do |column_name|\n    remove_column(table_name, column_name)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_foreign_key\"> <span class=\"method-name\">remove_foreign_key</span><span class=\"method-args\">(from_table, options_or_to_table = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the given foreign key from the table.</p> <p>Removes the foreign key on <code>accounts.branch_id</code>.</p> <pre class=\"ruby\">remove_foreign_key :accounts, :branches\n</pre> <p>Removes the foreign key on <code>accounts.owner_id</code>.</p> <pre class=\"ruby\">remove_foreign_key :accounts, column: :owner_id\n</pre> <p>Removes the foreign key named <code>special_fk_name</code> on the <code>accounts</code> table.</p> <pre class=\"ruby\">remove_foreign_key :accounts, name: :special_fk_name\n</pre> <div class=\"method-source-code\" id=\"remove_foreign_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 779\ndef remove_foreign_key(from_table, options_or_to_table = {})\n  return unless supports_foreign_keys?\n\n  if options_or_to_table.is_a?(Hash)\n    options = options_or_to_table\n  else\n    options = { column: foreign_key_column_for(options_or_to_table) }\n  end\n\n  fk_name_to_delete = options.fetch(:name) do\n    fk_to_delete = foreign_keys(from_table).detect {|fk| fk.column == options[:column].to_s }\n\n    if fk_to_delete\n      fk_to_delete.name\n    else\n      raise ArgumentError, \"Table '#{from_table}' has no foreign key on column '#{options[:column]}'\"\n    end\n  end\n\n  at = create_alter_table from_table\n  at.drop_foreign_key fk_name_to_delete\n\n  execute schema_creation.accept(at)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_index\"> <span class=\"method-name\">remove_index</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the given index from the table.</p> <p>Removes the <code>index_accounts_on_column</code> in the <code>accounts</code> table.</p> <pre class=\"ruby\">remove_index :accounts, :column\n</pre> <p>Removes the index named <code>index_accounts_on_branch_id</code> in the <code>accounts</code> table.</p> <pre class=\"ruby\">remove_index :accounts, column: :branch_id\n</pre> <p>Removes the index named <code>index_accounts_on_branch_id_and_party_id</code> in the <code>accounts</code> table.</p> <pre class=\"ruby\">remove_index :accounts, column: [:branch_id, :party_id]\n</pre> <p>Removes the index named <code>by_branch_party</code> in the <code>accounts</code> table.</p> <pre class=\"ruby\">remove_index :accounts, name: :by_branch_party\n</pre> <div class=\"method-source-code\" id=\"remove_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 578\ndef remove_index(table_name, options = {})\n  remove_index!(table_name, index_name_for_remove(table_name, options))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_reference\"> <span class=\"method-name\">remove_reference</span><span class=\"method-args\">(table_name, ref_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the reference(s). Also removes a <code>type</code> column if one exists. <code>remove_reference</code>, <code>remove_references</code> and <code>remove_belongs_to</code> are acceptable.</p> <h6 id=\"method-i-remove_reference-label-Remove+the+reference\">Remove the reference</h6> <pre class=\"ruby\">remove_reference(:products, :user, index: true)\n</pre> <h6 id=\"method-i-remove_reference-label-Remove+polymorphic+reference\">Remove polymorphic reference</h6> <pre class=\"ruby\">remove_reference(:products, :supplier, polymorphic: true)\n</pre> <h6 id=\"method-i-remove_reference-label-Remove+the+reference+with+a+foreign+key\">Remove the reference with a foreign key</h6> <pre class=\"ruby\">remove_reference(:products, :user, index: true, foreign_key: true)\n</pre> <div class=\"method-source-code\" id=\"remove_reference-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 688\ndef remove_reference(table_name, ref_name, options = {})\n  if options[:foreign_key]\n    to_table = Base.pluralize_table_names ? ref_name.to_s.pluralize : ref_name\n    remove_foreign_key(table_name, to_table)\n  end\n\n  remove_column(table_name, \"#{ref_name}_id\")\n  remove_column(table_name, \"#{ref_name}_type\") if options[:polymorphic]\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"schemastatements#method-i-remove_belongs_to\">remove_belongs_to</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_timestamps\"> <span class=\"method-name\">remove_timestamps</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the timestamp columns (<code>created_at</code> and <code>updated_at</code>) from the table definition.</p> <pre class=\"ruby\">remove_timestamps(:suppliers)\n</pre> <div class=\"method-source-code\" id=\"remove_timestamps-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 900\ndef remove_timestamps(table_name, options = {})\n  remove_column table_name, :updated_at\n  remove_column table_name, :created_at\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_column\"> <span class=\"method-name\">rename_column</span><span class=\"method-args\">(table_name, column_name, new_column_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Renames a column.</p> <pre class=\"ruby\">rename_column(:suppliers, :description, :name)\n</pre> <div class=\"method-source-code\" id=\"rename_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 465\ndef rename_column(table_name, column_name, new_column_name)\n  raise NotImplementedError, \"rename_column is not implemented\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_index\"> <span class=\"method-name\">rename_index</span><span class=\"method-args\">(table_name, old_name, new_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Renames an index.</p> <p>Rename the <code>index_people_on_last_name</code> index to <code>index_users_on_last_name</code>:</p> <pre class=\"ruby\">rename_index :people, 'index_people_on_last_name', 'index_users_on_last_name'\n</pre> <div class=\"method-source-code\" id=\"rename_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 592\ndef rename_index(table_name, old_name, new_name)\n  validate_index_length!(table_name, new_name)\n\n  # this is a naive implementation; some DBs may support this more efficiently (Postgres, for instance)\n  old_index_def = indexes(table_name).detect { |i| i.name == old_name }\n  return unless old_index_def\n  add_index(table_name, old_index_def.columns, name: new_name, unique: old_index_def.unique)\n  remove_index(table_name, name: old_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_table\"> <span class=\"method-name\">rename_table</span><span class=\"method-args\">(table_name, new_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Renames a table.</p> <pre class=\"ruby\">rename_table('octopuses', 'octopi')\n</pre> <div class=\"method-source-code\" id=\"rename_table-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 371\ndef rename_table(table_name, new_name)\n  raise NotImplementedError, \"rename_table is not implemented\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_alias_for\"> <span class=\"method-name\">table_alias_for</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Truncates a table alias according to the limits of the current adapter.</p> <div class=\"method-source-code\" id=\"table_alias_for-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 18\ndef table_alias_for(table_name)\n  table_name[0...table_alias_length].tr('.', '_')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_exists-3F\"> <span class=\"method-name\">table_exists?</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Checks to see if the table <code>table_name</code> exists on the database.</p> <pre class=\"ruby\">table_exists?(:developers)\n</pre> <div class=\"method-source-code\" id=\"table_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 26\ndef table_exists?(table_name)\n  tables.include?(table_name.to_s)\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_index_sort_order\"> <span class=\"method-name\">add_index_sort_order</span><span class=\"method-args\">(option_strings, column_names, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"add_index_sort_order-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 944\ndef add_index_sort_order(option_strings, column_names, options = {})\n  if options.is_a?(Hash) &amp;&amp; order = options[:order]\n    case order\n    when Hash\n      column_names.each {|name| option_strings[name] += \" #{order[name].upcase}\" if order.has_key?(name)}\n    when String\n      column_names.each {|name| option_strings[name] += \" #{order.upcase}\"}\n    end\n  end\n\n  return option_strings\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_name_for_remove\"> <span class=\"method-name\">index_name_for_remove</span><span class=\"method-args\">(table_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"index_name_for_remove-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 973\ndef index_name_for_remove(table_name, options = {})\n  index_name = index_name(table_name, options)\n\n  unless index_name_exists?(table_name, index_name, true)\n    if options.is_a?(Hash) &amp;&amp; options.has_key?(:name)\n      options_without_column = options.dup\n      options_without_column.delete :column\n      index_name_without_column = index_name(table_name, options_without_column)\n\n      return index_name_without_column if index_name_exists?(table_name, index_name_without_column, false)\n    end\n\n    raise ArgumentError, \"Index name '#{index_name}' on table '#{table_name}' does not exist\"\n  end\n\n  index_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-options_include_default-3F\"> <span class=\"method-name\">options_include_default?</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"options_include_default-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 969\ndef options_include_default?(options)\n  options.include?(:default) &amp;&amp; !(options[:null] == false &amp;&amp; options[:default].nil?)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_columns_for_index\"> <span class=\"method-name\">quoted_columns_for_index</span><span class=\"method-args\">(column_names, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Overridden by the MySQL adapter for supporting index lengths</p> <div class=\"method-source-code\" id=\"quoted_columns_for_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 958\ndef quoted_columns_for_index(column_names, options = {})\n  option_strings = Hash[column_names.map {|name| [name, '']}]\n\n  # add index sort order if supported\n  if supports_index_sort_order?\n    option_strings = add_index_sort_order(option_strings, column_names, options)\n  end\n\n  column_names.map {|name| quote_column_name(name) + option_strings[name]}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_column_indexes\"> <span class=\"method-name\">rename_column_indexes</span><span class=\"method-args\">(table_name, column_name, new_column_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"rename_column_indexes-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 1000\ndef rename_column_indexes(table_name, column_name, new_column_name)\n  column_name, new_column_name = column_name.to_s, new_column_name.to_s\n  indexes(table_name).each do |index|\n    next unless index.columns.include?(new_column_name)\n    old_columns = index.columns.dup\n    old_columns[old_columns.index(new_column_name)] = column_name\n    generated_index_name = index_name(table_name, column: old_columns)\n    if generated_index_name == index.name\n      rename_index table_name, generated_index_name, index_name(table_name, column: index.columns)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_table_indexes\"> <span class=\"method-name\">rename_table_indexes</span><span class=\"method-args\">(table_name, new_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"rename_table_indexes-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 991\ndef rename_table_indexes(table_name, new_name)\n  indexes(new_name).each do |index|\n    generated_index_name = index_name(table_name, column: index.columns)\n    if generated_index_name == index.name\n      rename_index new_name, generated_index_name, index_name(new_name, column: index.columns)\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/table":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::Table\" class=\"class\"> class ActiveRecord::ConnectionAdapters::Table </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Represents an SQL table in an abstract way for updating a table. Also see <a href=\"tabledefinition\">TableDefinition</a> and <a href=\"schemastatements#method-i-create_table\">ActiveRecord::ConnectionAdapters::SchemaStatements#create_table</a></p> <p>Available transformations are:</p> <pre class=\"ruby\">change_table :table do |t|\n  t.column\n  t.index\n  t.rename_index\n  t.timestamps\n  t.change\n  t.change_default\n  t.rename\n  t.references\n  t.belongs_to\n  t.string\n  t.text\n  t.integer\n  t.float\n  t.decimal\n  t.datetime\n  t.timestamp\n  t.time\n  t.date\n  t.binary\n  t.boolean\n  t.remove\n  t.remove_references\n  t.remove_belongs_to\n  t.remove_index\n  t.remove_timestamps\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-name\"> <span class=\"method-name\">name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(table_name, base)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 432\ndef initialize(table_name, base)\n  @name = table_name\n  @base = base\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-belongs_to\"> <span class=\"method-name\">belongs_to</span><span class=\"method-args\">(*args)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"table#method-i-references\">references</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change\"> <span class=\"method-name\">change</span><span class=\"method-args\">(column_name, type, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Changes the column's definition according to the new options. See <a href=\"tabledefinition#method-i-column\">ActiveRecord::ConnectionAdapters::TableDefinition#column</a> for details of the options you can use.</p> <pre class=\"ruby\">t.change(:name, :string, limit: 80)\nt.change(:description, :text)\n</pre> <div class=\"method-source-code\" id=\"change-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 488\ndef change(column_name, type, options = {})\n  @base.change_column(name, column_name, type, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change_default\"> <span class=\"method-name\">change_default</span><span class=\"method-args\">(column_name, default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets a new default value for a column. See <a href=\"schemastatements#method-i-change_column_default\">ActiveRecord::ConnectionAdapters::SchemaStatements#change_column_default</a></p> <pre class=\"ruby\">t.change_default(:qualification, 'new')\nt.change_default(:authorized, 1)\n</pre> <div class=\"method-source-code\" id=\"change_default-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 496\ndef change_default(column_name, default)\n  @base.change_column_default(name, column_name, default)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column\"> <span class=\"method-name\">column</span><span class=\"method-args\">(column_name, type, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a new column to the named table. See <a href=\"tabledefinition#method-i-column\">ActiveRecord::ConnectionAdapters::TableDefinition#column</a> for details of the options you can use.</p> <h6 id=\"method-i-column-label-Creating+a+simple+column\">Creating a simple column</h6> <pre class=\"ruby\">t.column(:name, :string)\n</pre> <div class=\"method-source-code\" id=\"column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 442\ndef column(column_name, type, options = {})\n  @base.add_column(name, column_name, type, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column_exists-3F\"> <span class=\"method-name\">column_exists?</span><span class=\"method-args\">(column_name, type = nil, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Checks to see if a column exists. See <a href=\"schemastatements#method-i-column_exists-3F\">ActiveRecord::ConnectionAdapters::SchemaStatements#column_exists?</a></p> <div class=\"method-source-code\" id=\"column_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 447\ndef column_exists?(column_name, type = nil, options = {})\n  @base.column_exists?(name, column_name, type, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index\"> <span class=\"method-name\">index</span><span class=\"method-args\">(column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a new index to the table. <code>column_name</code> can be a single <a href=\"../../symbol\">Symbol</a>, or an <a href=\"../../array\">Array</a> of Symbols. See <a href=\"schemastatements#method-i-add_index\">ActiveRecord::ConnectionAdapters::SchemaStatements#add_index</a></p> <h6 id=\"method-i-index-label-Creating+a+simple+index\">Creating a simple index</h6> <pre class=\"ruby\">t.index(:name)\n</pre> <h6 id=\"method-i-index-label-Creating+a+unique+index\">Creating a unique index</h6> <pre class=\"ruby\">t.index([:branch_id, :party_id], unique: true)\n</pre> <h6 id=\"method-i-index-label-Creating+a+named+index\">Creating a named index</h6> <pre class=\"ruby\">t.index([:branch_id, :party_id], unique: true, name: 'by_branch_party')\n</pre> <div class=\"method-source-code\" id=\"index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 460\ndef index(column_name, options = {})\n  @base.add_index(name, column_name, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_exists-3F\"> <span class=\"method-name\">index_exists?</span><span class=\"method-args\">(column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Checks to see if an index exists. See <a href=\"schemastatements#method-i-index_exists-3F\">ActiveRecord::ConnectionAdapters::SchemaStatements#index_exists?</a></p> <div class=\"method-source-code\" id=\"index_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 465\ndef index_exists?(column_name, options = {})\n  @base.index_exists?(name, column_name, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-references\"> <span class=\"method-name\">references</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a reference.</p> <pre class=\"ruby\">t.references(:user)\nt.belongs_to(:supplier, foreign_key: true)\n</pre> <p>See <a href=\"schemastatements#method-i-add_reference\">ActiveRecord::ConnectionAdapters::SchemaStatements#add_reference</a> for details of the options you can use.</p> <div class=\"method-source-code\" id=\"references-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 542\ndef references(*args)\n  options = args.extract_options!\n  args.each do |ref_name|\n    @base.add_reference(name, ref_name, options)\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"table#method-i-belongs_to\">belongs_to</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove\"> <span class=\"method-name\">remove</span><span class=\"method-args\">(*column_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the column(s) from the table definition.</p> <pre class=\"ruby\">t.remove(:qualification)\nt.remove(:qualification, :experience)\n</pre> <div class=\"method-source-code\" id=\"remove-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 504\ndef remove(*column_names)\n  @base.remove_columns(name, *column_names)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-remove_belongs_to\"> <span class=\"method-name\">remove_belongs_to</span><span class=\"method-args\">(*args)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"table#method-i-remove_references\">remove_references</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_index\"> <span class=\"method-name\">remove_index</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the given index from the table.</p> <h6 id=\"method-i-remove_index-label-Remove+the+index_table_name_on_column+in+the+table_name+table\">Remove the index_table_name_on_column in the table_name table</h6> <pre class=\"ruby\">t.remove_index :column\n</pre> <h6 id=\"method-i-remove_index-label-Remove+the+index+named+index_table_name_on_branch_id+in+the+table_name+table\">Remove the index named index_table_name_on_branch_id in the table_name table</h6> <pre class=\"ruby\">t.remove_index column: :branch_id\n</pre> <h6 id=\"method-i-remove_index-label-Remove+the+index+named+index_table_name_on_branch_id_and_party_id+in+the+table_name+table\">Remove the index named index_table_name_on_branch_id_and_party_id in the table_name table</h6> <pre class=\"ruby\">t.remove_index column: [:branch_id, :party_id]\n</pre> <h6 id=\"method-i-remove_index-label-Remove+the+index+named+by_branch_party+in+the+table_name+table\">Remove the index named by_branch_party in the table_name table</h6> <pre class=\"ruby\">t.remove_index name: :by_branch_party\n</pre> <div class=\"method-source-code\" id=\"remove_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 518\ndef remove_index(options = {})\n  @base.remove_index(name, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_references\"> <span class=\"method-name\">remove_references</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes a reference. Optionally removes a <code>type</code> column. <code>remove_references</code> and <code>remove_belongs_to</code> are acceptable.</p> <pre class=\"ruby\">t.remove_references(:user)\nt.remove_belongs_to(:supplier, polymorphic: true)\n</pre> <p>See <a href=\"schemastatements#method-i-remove_reference\">ActiveRecord::ConnectionAdapters::SchemaStatements#remove_reference</a></p> <div class=\"method-source-code\" id=\"remove_references-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 557\ndef remove_references(*args)\n  options = args.extract_options!\n  args.each do |ref_name|\n    @base.remove_reference(name, ref_name, options)\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"table#method-i-remove_belongs_to\">remove_belongs_to</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_timestamps\"> <span class=\"method-name\">remove_timestamps</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the timestamp columns (<code>created_at</code> and <code>updated_at</code>) from the table.</p> <pre class=\"ruby\">t.remove_timestamps\n</pre> <div class=\"method-source-code\" id=\"remove_timestamps-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 525\ndef remove_timestamps(options = {})\n  @base.remove_timestamps(name, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename\"> <span class=\"method-name\">rename</span><span class=\"method-args\">(column_name, new_column_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Renames a column.</p> <pre class=\"ruby\">t.rename(:description, :name)\n</pre> <div class=\"method-source-code\" id=\"rename-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 532\ndef rename(column_name, new_column_name)\n  @base.rename_column(name, column_name, new_column_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rename_index\"> <span class=\"method-name\">rename_index</span><span class=\"method-args\">(index_name, new_index_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Renames the given index on the table.</p> <pre class=\"ruby\">t.rename_index(:user_id, :account_id)\n</pre> <div class=\"method-source-code\" id=\"rename_index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 472\ndef rename_index(index_name, new_index_name)\n  @base.rename_index(name, index_name, new_index_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-timestamps\"> <span class=\"method-name\">timestamps</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>) columns to the table. See <a href=\"schemastatements#method-i-add_timestamps\">ActiveRecord::ConnectionAdapters::SchemaStatements#add_timestamps</a></p> <pre class=\"ruby\">t.timestamps null: false\n</pre> <div class=\"method-source-code\" id=\"timestamps-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 479\ndef timestamps(options = {})\n  @base.add_timestamps(name, options)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionadapters/tabledefinition":"<h1 id=\"class-ActiveRecord::ConnectionAdapters::TableDefinition\" class=\"class\"> class ActiveRecord::ConnectionAdapters::TableDefinition </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Represents the schema of an SQL table in an abstract way. This class provides methods for manipulating the schema representation.</p> <p>Inside migration files, the <code>t</code> object in <code>create_table</code> is actually of this type:</p> <pre>class SomeMigration &lt; ActiveRecord::Migration\n  def up\n    create_table :foo do |t|\n      puts t.class  # =&gt; \"ActiveRecord::ConnectionAdapters::TableDefinition\"\n    end\n  end\n\n  def down\n    ...\n  end\nend</pre> <p>The table definitions The Columns are stored as a ColumnDefinition in the <code>columns</code> attribute.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-as\"> <span class=\"method-name\">as</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-foreign_keys\"> <span class=\"method-name\">foreign_keys</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-indexes\"> <span class=\"method-name\">indexes</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>An array of ColumnDefinition objects, representing the column changes that have been defined.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-name\"> <span class=\"method-name\">name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-options\"> <span class=\"method-name\">options</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-temporary\"> <span class=\"method-name\">temporary</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(types, name, temporary, options, as = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 99\ndef initialize(types, name, temporary, options, as = nil)\n  @columns_hash = {}\n  @indexes = {}\n  @foreign_keys = {}\n  @native = types\n  @temporary = temporary\n  @options = options\n  @as = as\n  @name = name\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a ColumnDefinition for the column with name <code>name</code>.</p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 119\ndef [](name)\n  @columns_hash[name.to_s]\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-belongs_to\"> <span class=\"method-name\">belongs_to</span><span class=\"method-args\">(*args)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"tabledefinition#method-i-references\">references</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column\"> <span class=\"method-name\">column</span><span class=\"method-args\">(name, type, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Instantiates a new column for the table. The <code>type</code> parameter is normally one of the migrations native types, which is one of the following: <code>:primary_key</code>, <code>:string</code>, <code>:text</code>, <code>:integer</code>, <code>:float</code>, <code>:decimal</code>, <code>:datetime</code>, <code>:time</code>, <code>:date</code>, <code>:binary</code>, <code>:boolean</code>.</p> <p>You may use a type not in this list as long as it is supported by your database (for example, “polygon” in MySQL), but this will not be database agnostic and should usually be avoided.</p> <p>Available options are (none of these exists by default):</p> <ul>\n<li> <p><code>:limit</code> - Requests a maximum column length. This is number of characters for <code>:string</code> and <code>:text</code> columns and number of bytes for <code>:binary</code> and <code>:integer</code> columns.</p> </li>\n<li> <p><code>:default</code> - The column's default value. Use nil for NULL.</p> </li>\n<li> <p><code>:null</code> - Allows or disallows <code>NULL</code> values in the column. This option could have been named <code>:null_allowed</code>.</p> </li>\n<li> <p><code>:precision</code> - Specifies the precision for a <code>:decimal</code> column.</p> </li>\n<li> <p><code>:scale</code> - Specifies the scale for a <code>:decimal</code> column.</p> </li>\n<li> <p><code>:index</code> - Create an index for the column. Can be either <code>true</code> or an options hash.</p> </li>\n</ul> <p>Note: The precision is the total number of significant digits and the scale is the number of digits that can be stored following the decimal point. For example, the number 123.45 has a precision of 5 and a scale of 2. A decimal with a precision of 5 and a scale of 2 can range from -999.99 to 999.99.</p> <p>Please be aware of different RDBMS implementations behavior with <code>:decimal</code> columns:</p> <ul>\n<li> <p>The SQL standard says the default scale should be 0, <code>:scale</code> &lt;= <code>:precision</code>, and makes no comments about the requirements of <code>:precision</code>.</p> </li>\n<li> <p>MySQL: <code>:precision</code> [1..63], <code>:scale</code> [0..30]. Default is (10,0).</p> </li>\n<li> <p>PostgreSQL: <code>:precision</code> [1..infinity], <code>:scale</code> [0..infinity]. No default.</p> </li>\n<li> <p>SQLite2: Any <code>:precision</code> and <code>:scale</code> may be used. Internal storage as strings. No default.</p> </li>\n<li> <p>SQLite3: No restrictions on <code>:precision</code> and <code>:scale</code>, but the maximum supported <code>:precision</code> is 16. No default.</p> </li>\n<li> <p>Oracle: <code>:precision</code> [1..38], <code>:scale</code> [-84..127]. Default is (38,0).</p> </li>\n<li> <p>DB2: <code>:precision</code> [1..63], <code>:scale</code> [0..62]. Default unknown.</p> </li>\n<li> <p>SqlServer?: <code>:precision</code> [1..38], <code>:scale</code> [0..38]. Default (38,0).</p> </li>\n</ul> <p>This method returns <code>self</code>.</p> <h2 id=\"method-i-column-label-Examples\">Examples</h2> <pre class=\"ruby\"># Assuming +td+ is an instance of TableDefinition\ntd.column(:granted, :boolean)\n# granted BOOLEAN\n\ntd.column(:picture, :binary, limit: 2.megabytes)\n# =&gt; picture BLOB(2097152)\n\ntd.column(:sales_stage, :string, limit: 20, default: 'new', null: false)\n# =&gt; sales_stage VARCHAR(20) DEFAULT 'new' NOT NULL\n\ntd.column(:bill_gates_money, :decimal, precision: 15, scale: 2)\n# =&gt; bill_gates_money DECIMAL(15,2)\n\ntd.column(:sensor_reading, :decimal, precision: 30, scale: 20)\n# =&gt; sensor_reading DECIMAL(30,20)\n\n# While &lt;tt&gt;:scale&lt;/tt&gt; defaults to zero on most databases, it\n# probably wouldn't hurt to include it.\ntd.column(:huge_integer, :decimal, precision: 30)\n# =&gt; huge_integer DECIMAL(30)\n\n# Defines a column with a database-specific type.\ntd.column(:foo, 'polygon')\n# =&gt; foo polygon\n</pre> <h2 id=\"method-i-column-label-Short-hand+examples\">Short-hand examples</h2> <p>Instead of calling <code>column</code> directly, you can also work with the short-hand definitions for the default types. They use the type as the method name instead of as a parameter and allow for multiple columns to be defined in a single statement.</p> <p>What can be written like this with the regular calls to column:</p> <pre class=\"ruby\">create_table :products do |t|\n  t.column :shop_id,     :integer\n  t.column :creator_id,  :integer\n  t.column :item_number, :string\n  t.column :name,        :string, default: \"Untitled\"\n  t.column :value,       :string, default: \"Untitled\"\n  t.column :created_at,  :datetime\n  t.column :updated_at,  :datetime\nend\nadd_index :products, :item_number\n</pre> <p>can also be written as follows using the short-hand:</p> <pre class=\"ruby\">create_table :products do |t|\n  t.integer :shop_id, :creator_id\n  t.string  :item_number, index: true\n  t.string  :name, :value, default: \"Untitled\"\n  t.timestamps null: false\nend\n</pre> <p>There's a short-hand method for each of the type values declared at the top. And then there's <a href=\"tabledefinition#method-i-timestamps\">#timestamps</a> that'll add <code>created_at</code> and <code>updated_at</code> as datetimes.</p> <p><a href=\"tabledefinition#method-i-references\">#references</a> will add an appropriately-named _id column, plus a corresponding _type column if the <code>:polymorphic</code> option is supplied. If <code>:polymorphic</code> is a hash of options, these will be used when creating the <code>_type</code> column. The <code>:index</code> option will also create an index, similar to calling <code>add_index</code>. So what can be written like this:</p> <pre class=\"ruby\">create_table :taggings do |t|\n  t.integer :tag_id, :tagger_id, :taggable_id\n  t.string  :tagger_type\n  t.string  :taggable_type, default: 'Photo'\nend\nadd_index :taggings, :tag_id, name: 'index_taggings_on_tag_id'\nadd_index :taggings, [:tagger_id, :tagger_type]\n</pre> <p>Can also be written as follows using references:</p> <pre class=\"ruby\">create_table :taggings do |t|\n  t.references :tag, index: { name: 'index_taggings_on_tag_id' }\n  t.references :tagger, polymorphic: true, index: true\n  t.references :taggable, polymorphic: { default: 'Photo' }\nend\n</pre> <div class=\"method-source-code\" id=\"column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 256\ndef column(name, type, options = {})\n  name = name.to_s\n  type = type.to_sym\n  options = options.dup\n\n  if @columns_hash[name] &amp;&amp; @columns_hash[name].primary_key?\n    raise ArgumentError, \"you can't redefine the primary key column '#{name}'. To define a custom primary key, pass { id: false } to create_table.\"\n  end\n\n  index_options = options.delete(:index)\n  index(name, index_options.is_a?(Hash) ? index_options : {}) if index_options\n  @columns_hash[name] = new_column_definition(name, type, options)\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-columns\"> <span class=\"method-name\">columns</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"columns-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 110\ndef columns; @columns_hash.values; end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index\"> <span class=\"method-name\">index</span><span class=\"method-args\">(column_name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds index options to the indexes hash, keyed by column name This is primarily used to track indexes that need to be created after the table</p> <pre class=\"ruby\">index(:account_id, name: 'index_projects_on_account_id')\n</pre> <div class=\"method-source-code\" id=\"index-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 287\ndef index(column_name, options = {})\n  indexes[column_name] = options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-primary_key\"> <span class=\"method-name\">primary_key</span><span class=\"method-args\">(name, type = :primary_key, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Appends a primary key definition to the table definition. Can be called multiple times, but this is probably not a good idea.</p> <div class=\"method-source-code\" id=\"primary_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 114\ndef primary_key(name, type = :primary_key, options = {})\n  column(name, type, options.merge(:primary_key =&gt; true))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-references\"> <span class=\"method-name\">references</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a reference.</p> <pre class=\"ruby\">t.references(:user)\nt.belongs_to(:supplier, foreign_key: true)\n</pre> <p>See <a href=\"schemastatements#method-i-add_reference\">ActiveRecord::ConnectionAdapters::SchemaStatements#add_reference</a> for details of the options you can use.</p> <div class=\"method-source-code\" id=\"references-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 312\ndef references(*args)\n  options = args.extract_options!\n  polymorphic = options.delete(:polymorphic)\n  index_options = options.delete(:index)\n  foreign_key_options = options.delete(:foreign_key)\n  type = options.delete(:type) || :integer\n\n  if polymorphic &amp;&amp; foreign_key_options\n    raise ArgumentError, \"Cannot add a foreign key on a polymorphic relation\"\n  end\n\n  args.each do |col|\n    column(\"#{col}_id\", type, options)\n    column(\"#{col}_type\", :string, polymorphic.is_a?(Hash) ? polymorphic : options) if polymorphic\n    index(polymorphic ? %w(type id).map { |t| \"#{col}_#{t}\" } : \"#{col}_id\", index_options.is_a?(Hash) ? index_options : {}) if index_options\n    if foreign_key_options\n      to_table = Base.pluralize_table_names ? col.to_s.pluralize : col.to_s\n      foreign_key(to_table, foreign_key_options.is_a?(Hash) ? foreign_key_options : {})\n    end\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"tabledefinition#method-i-belongs_to\">belongs_to</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_column\"> <span class=\"method-name\">remove_column</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"remove_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 271\ndef remove_column(name)\n  @columns_hash.delete name.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-timestamps\"> <span class=\"method-name\">timestamps</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Appends <code>:datetime</code> columns <code>:created_at</code> and <code>:updated_at</code> to the table. See <a href=\"schemastatements#method-i-add_timestamps\">ActiveRecord::ConnectionAdapters::SchemaStatements#add_timestamps</a></p> <pre class=\"ruby\">t.timestamps null: false\n</pre> <div class=\"method-source-code\" id=\"timestamps-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 299\ndef timestamps(*args)\n  options = args.extract_options!\n  emit_warning_if_null_unspecified(:timestamps, options)\n  column(:created_at, :datetime, options)\n  column(:updated_at, :datetime, options)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionhandling":"<h1 id=\"module-ActiveRecord::ConnectionHandling\" class=\"module\"> module ActiveRecord::ConnectionHandling </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DEFAULT_ENV\">DEFAULT_ENV </dt>\n\n<dt id=\"RAILS_ENV\">RAILS_ENV </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connected-3F\"> <span class=\"method-name\">connected?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if Active Record is connected.</p> <div class=\"method-source-code\" id=\"connected-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_handling.rb, line 117\ndef connected?\n  connection_handler.connected?(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection\"> <span class=\"method-name\">connection</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the connection currently associated with the class. This can also be used to “borrow” the connection to do database work unrelated to any of the specific Active Records.</p> <div class=\"method-source-code\" id=\"connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_handling.rb, line 86\ndef connection\n  retrieve_connection\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection_config\"> <span class=\"method-name\">connection_config</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the configuration of the associated connection as a hash:</p> <pre class=\"ruby\">ActiveRecord::Base.connection_config\n# =&gt; {pool: 5, timeout: 5000, database: \"db/development.sqlite3\", adapter: \"sqlite3\"}\n</pre> <p>Please use only for reading.</p> <div class=\"method-source-code\" id=\"connection_config-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_handling.rb, line 104\ndef connection_config\n  connection_pool.spec.config\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection_id\"> <span class=\"method-name\">connection_id</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"connection_id-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_handling.rb, line 90\ndef connection_id\n  ActiveRecord::RuntimeRegistry.connection_id\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection_id-3D\"> <span class=\"method-name\">connection_id=</span><span class=\"method-args\">(connection_id)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"connection_id-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_handling.rb, line 94\ndef connection_id=(connection_id)\n  ActiveRecord::RuntimeRegistry.connection_id = connection_id\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection_pool\"> <span class=\"method-name\">connection_pool</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"connection_pool-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_handling.rb, line 108\ndef connection_pool\n  connection_handler.retrieve_connection_pool(self) or raise ConnectionNotEstablished\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-establish_connection\"> <span class=\"method-name\">establish_connection</span><span class=\"method-args\">(spec = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Establishes the connection to the database. Accepts a hash as input where the <code>:adapter</code> key must be specified with the name of a database adapter (in lower-case) example for regular databases (MySQL, Postgresql, etc):</p> <pre class=\"ruby\">ActiveRecord::Base.establish_connection(\n  adapter:  \"mysql\",\n  host:     \"localhost\",\n  username: \"myuser\",\n  password: \"mypass\",\n  database: \"somedatabase\"\n)\n</pre> <p>Example for SQLite database:</p> <pre class=\"ruby\">ActiveRecord::Base.establish_connection(\n  adapter:  \"sqlite3\",\n  database: \"path/to/dbfile\"\n)\n</pre> <p>Also accepts keys as strings (for parsing from YAML for example):</p> <pre class=\"ruby\">ActiveRecord::Base.establish_connection(\n  \"adapter\"  =&gt; \"sqlite3\",\n  \"database\" =&gt; \"path/to/dbfile\"\n)\n</pre> <p>Or a URL:</p> <pre class=\"ruby\">ActiveRecord::Base.establish_connection(\n  \"postgres://myuser:mypass@localhost/somedatabase\"\n)\n</pre> <p>In case <code>ActiveRecord::Base.configurations</code> is set (Rails automatically loads the contents of config/database.yml into it), a symbol can also be given as argument, representing a key in the configuration hash:</p> <pre class=\"ruby\">ActiveRecord::Base.establish_connection(:production)\n</pre> <p>The exceptions <a href=\"adapternotspecified\">AdapterNotSpecified</a>, <a href=\"adapternotfound\">AdapterNotFound</a> and ArgumentError may be returned on an error.</p> <div class=\"method-source-code\" id=\"establish_connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_handling.rb, line 47\ndef establish_connection(spec = nil)\n  spec     ||= DEFAULT_ENV.call.to_sym\n  resolver =   ConnectionAdapters::ConnectionSpecification::Resolver.new configurations\n  spec     =   resolver.spec(spec)\n\n  unless respond_to?(spec.adapter_method)\n    raise AdapterNotFound, \"database configuration specifies nonexistent #{spec.config[:adapter]} adapter\"\n  end\n\n  remove_connection\n  connection_handler.establish_connection self, spec\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_connection\"> <span class=\"method-name\">remove_connection</span><span class=\"method-args\">(klass = self)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"remove_connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_handling.rb, line 121\ndef remove_connection(klass = self)\n  connection_handler.remove_connection(klass)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-retrieve_connection\"> <span class=\"method-name\">retrieve_connection</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"retrieve_connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/connection_handling.rb, line 112\ndef retrieve_connection\n  connection_handler.retrieve_connection(self)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectionnotestablished":"<h1 id=\"class-ActiveRecord::ConnectionNotEstablished\" class=\"class\"> class ActiveRecord::ConnectionNotEstablished </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when connection to the database could not been established (for example when <code>connection=</code> is given a nil object).</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/connectiontimeouterror":"<h1 id=\"class-ActiveRecord::ConnectionTimeoutError\" class=\"class\"> class ActiveRecord::ConnectionTimeoutError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">ConnectionNotEstablished</dd>\n</dl> <section class=\"description\"> <p>Raised when a connection could not be obtained within the connection acquisition timeout period: because max connections in pool are in use.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/core":"<h1 id=\"module-ActiveRecord::Core\" class=\"module\"> module ActiveRecord::Core </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-configurations\"> <span class=\"method-name\">configurations</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns fully resolved configurations hash</p> <div class=\"method-source-code\" id=\"configurations-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 51\ndef self.configurations\n  @@configurations\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-configurations-3D\"> <span class=\"method-name\">configurations=</span><span class=\"method-args\">(config)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Contains the database configuration - as is typically stored in config/database.yml - as a <a href=\"../hash\">Hash</a>.</p> <p>For example, the following database.yml…</p> <pre>development:\n  adapter: sqlite3\n  database: db/development.sqlite3\n\nproduction:\n  adapter: sqlite3\n  database: db/production.sqlite3</pre> <p>…would result in <a href=\"core#method-c-configurations\">::configurations</a> to look like this:</p> <pre class=\"ruby\">{\n   'development' =&gt; {\n      'adapter'  =&gt; 'sqlite3',\n      'database' =&gt; 'db/development.sqlite3'\n   },\n   'production' =&gt; {\n      'adapter'  =&gt; 'sqlite3',\n      'database' =&gt; 'db/production.sqlite3'\n   }\n}\n</pre> <div class=\"method-source-code\" id=\"configurations-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 45\ndef self.configurations=(config)\n  @@configurations = ActiveRecord::ConnectionHandling::MergeAndResolveDefaultUrlConfig.new(config).resolve\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-connection_handler\"> <span class=\"method-name\">connection_handler</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"connection_handler-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 100\ndef self.connection_handler\n  ActiveRecord::RuntimeRegistry.connection_handler || default_connection_handler\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-connection_handler-3D\"> <span class=\"method-name\">connection_handler=</span><span class=\"method-args\">(handler)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"connection_handler-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 104\ndef self.connection_handler=(handler)\n  ActiveRecord::RuntimeRegistry.connection_handler = handler\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-disable_implicit_join_references-3D\"> <span class=\"method-name\">disable_implicit_join_references=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"disable_implicit_join_references-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 90\n      def self.disable_implicit_join_references=(value)\n        ActiveSupport::Deprecation.warn(\"          Implicit join references were removed with Rails 4.1.\n          Make sure to remove this configuration because it does nothing.\n\".squish)\n      end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(attributes = nil, options = {}) { |self| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>New objects can be instantiated as either empty (pass no construction parameter) or pre-set with attributes but not yet saved (pass a hash with key names matching the associated table column names). In both instances, valid attribute keys are determined by the column names of the associated table – hence you can't have attributes that aren't part of the table columns.</p> <h4 id=\"method-c-new-label-Example-3A\">Example:</h4> <pre class=\"ruby\"># Instantiates a single new object\nUser.new(first_name: 'Jamie')\n</pre> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 272\ndef initialize(attributes = nil, options = {})\n  @attributes = self.class._default_attributes.dup\n  self.class.define_attribute_methods\n\n  init_internals\n  initialize_internals_callback\n\n  # +options+ argument is only needed to make protected_attributes gem easier to hook.\n  # Remove it when we drop support to this gem.\n  init_attributes(attributes, options) if attributes\n\n  yield self if block_given?\n  run_callbacks :initialize\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3D-3E\"> <span class=\"method-name\">&lt;=&gt;</span><span class=\"method-args\">(other_object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows sort on objects</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"3C-3D-3E-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 418\ndef &lt;=&gt;(other_object)\n  if other_object.is_a?(self.class)\n    self.to_key &lt;=&gt; other_object.to_key\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D\"> <span class=\"method-name\">==</span><span class=\"method-args\">(comparison_object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if <code>comparison_object</code> is the same exact object, or <code>comparison_object</code> is of the same type and <code>self</code> has an ID and it is equal to <code>comparison_object.id</code>.</p> <p>Note that new records are different from any other record by definition, unless the other record is the receiver itself. Besides, if you fetch existing records with <code>select</code> and leave the ID out, you're on your own, this predicate will return false.</p> <p>Note also that destroying a record preserves its ID in the model instance, so deleted models are still comparable.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"3D-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 386\ndef ==(comparison_object)\n  super ||\n    comparison_object.instance_of?(self.class) &amp;&amp;\n    !id.nil? &amp;&amp;\n    comparison_object.id == id\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"core#method-i-eql-3F\">eql?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clone\"> <span class=\"method-name\">clone</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Identical to Ruby's clone method. This is a “shallow” copy. Be warned that your attributes are not copied. That means that modifying attributes of the clone will modify the original, since they will both point to the same attributes hash. If you need a copy of your attributes hash, please use the <a href=\"core#method-i-dup\">dup</a> method.</p> <pre class=\"ruby\">user = User.first\nnew_user = user.clone\nuser.name               # =&gt; \"Bob\"\nnew_user.name = \"Joe\"\nuser.name               # =&gt; \"Joe\"\n\nuser.object_id == new_user.object_id            # =&gt; false\nuser.name.object_id == new_user.name.object_id  # =&gt; true\n\nuser.name.object_id == user.dup.name.object_id  # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"clone-source\"> <pre class=\"c\"># File activerecord/lib/active_record/core.rb, line 333\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection_handler\"> <span class=\"method-name\">connection_handler</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"connection_handler-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 437\ndef connection_handler\n  self.class.connection_handler\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dup\"> <span class=\"method-name\">dup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Duped objects have no id assigned and are treated as new records. Note that this is a “shallow” copy as it copies the object's attributes only, not its associations. The extent of a “deep” copy is application specific and is therefore left to the application to implement according to its need. The dup method does not preserve the timestamps (created|updated)_(at|on).</p> <div class=\"method-source-code\" id=\"dup-source\"> <pre class=\"c\"># File activerecord/lib/active_record/core.rb, line 342\n    </pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encode_with\"> <span class=\"method-name\">encode_with</span><span class=\"method-args\">(coder)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Populate <code>coder</code> with attributes about this record that should be serialized. The structure of <code>coder</code> defined in this method is guaranteed to match the structure of <code>coder</code> passed to the <code>init_with</code> method.</p> <p>Example:</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\nend\ncoder = {}\nPost.new.encode_with(coder)\ncoder # =&gt; {\"attributes\" =&gt; {\"id\" =&gt; nil, ... }}\n</pre> <div class=\"method-source-code\" id=\"encode_with-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 370\ndef encode_with(coder)\n  # FIXME: Remove this when we better serialize attributes\n  coder['raw_attributes'] = attributes_before_type_cast\n  coder['attributes'] = @attributes\n  coder['new_record'] = new_record?\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-eql-3F\"> <span class=\"method-name\">eql?</span><span class=\"method-args\">(comparison_object)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"core#method-i-3D-3D\">==</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-freeze\"> <span class=\"method-name\">freeze</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clone and freeze the attributes hash such that associations are still accessible, even on destroyed records, but cloned models will not be frozen.</p> <div class=\"method-source-code\" id=\"freeze-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 407\ndef freeze\n  @attributes = @attributes.clone.freeze\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-frozen-3F\"> <span class=\"method-name\">frozen?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the attributes hash has been frozen.</p> <div class=\"method-source-code\" id=\"frozen-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 413\ndef frozen?\n  @attributes.frozen?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-hash\"> <span class=\"method-name\">hash</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delegates to id in order to allow two records of the same type and id to work with something like:</p> <pre class=\"ruby\">[ Person.find(1), Person.find(2), Person.find(3) ] &amp; [ Person.find(1), Person.find(4) ] # =&gt; [ Person.find(1) ]\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"hash-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 396\ndef hash\n  if id\n    id.hash\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-init_with\"> <span class=\"method-name\">init_with</span><span class=\"method-args\">(coder)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Initialize an empty model object from <code>coder</code>. <code>coder</code> should be the result of previously encoding an Active Record model, using `encode_with`</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\nend\n\nold_post = Post.new(title: \"hello world\")\ncoder = {}\nold_post.encode_with(coder)\n\npost = Post.allocate\npost.init_with(coder)\npost.title # =&gt; 'hello world'\n</pre> <div class=\"method-source-code\" id=\"init_with-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 301\ndef init_with(coder)\n  @attributes = coder['attributes']\n\n  init_internals\n\n  @new_record = coder['new_record']\n\n  self.class.define_attribute_methods\n\n  run_callbacks :find\n  run_callbacks :initialize\n\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the contents of the record as a nicely formatted string.</p> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 442\ndef inspect\n  # We check defined?(@attributes) not to issue warnings if the object is\n  # allocated but not initialized.\n  inspection = if defined?(@attributes) &amp;&amp; @attributes\n                 self.class.column_names.collect { |name|\n                   if has_attribute?(name)\n                     \"#{name}: #{attribute_for_inspect(name)}\"\n                   end\n                 }.compact.join(\", \")\n               else\n                 \"not initialized\"\n               end\n  \"#&lt;#{self.class} #{inspection}&gt;\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pretty_print\"> <span class=\"method-name\">pretty_print</span><span class=\"method-args\">(pp)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Takes a PP and prettily prints this record to it, allowing you to get a nice result from `pp record` when pp is required.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"pretty_print-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 459\ndef pretty_print(pp)\n  return super if custom_inspect_method_defined?\n  pp.object_address_group(self) do\n    if defined?(@attributes) &amp;&amp; @attributes\n      column_names = self.class.column_names.select { |name| has_attribute?(name) || new_record? }\n      pp.seplist(column_names, proc { pp.text ',' }) do |column_name|\n        column_value = read_attribute(column_name)\n        pp.breakable ' '\n        pp.group(1) do\n          pp.text column_name\n          pp.text ':'\n          pp.breakable\n          pp.pp column_value\n        end\n      end\n    else\n      pp.breakable ' '\n      pp.text 'not initialized'\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-readonly-21\"> <span class=\"method-name\">readonly!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Marks this record as read only.</p> <div class=\"method-source-code\" id=\"readonly-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 433\ndef readonly!\n  @readonly = true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-readonly-3F\"> <span class=\"method-name\">readonly?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the record is read only. Records loaded through joins with piggy-back attributes will be marked as read only since they cannot be saved.</p> <div class=\"method-source-code\" id=\"readonly-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 428\ndef readonly?\n  @readonly\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-slice\"> <span class=\"method-name\">slice</span><span class=\"method-args\">(*methods)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash of the given methods with their names as keys and returned values as values.</p> <div class=\"method-source-code\" id=\"slice-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 482\ndef slice(*methods)\n  Hash[methods.map! { |method| [method, public_send(method)] }].with_indifferent_access\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/core/classmethods":"<h1 id=\"module-ActiveRecord::Core::ClassMethods\" class=\"module\"> module ActiveRecord::Core::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D-3D\"> <span class=\"method-name\">===</span><span class=\"method-args\">(object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Overwrite the default class equality method to provide support for association proxies.</p> <div class=\"method-source-code\" id=\"3D-3D-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 228\ndef ===(object)\n  object.is_a?(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-allocate\"> <span class=\"method-name\">allocate</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"allocate-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 112\ndef allocate\n  define_attribute_methods\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-generated_association_methods\"> <span class=\"method-name\">generated_association_methods</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"generated_association_methods-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 203\ndef generated_association_methods\n  @generated_association_methods ||= begin\n    mod = const_set(:GeneratedAssociationMethods, Module.new)\n    include mod\n    mod\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string like 'Post(id:integer, title:string, body:text)'</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/core.rb, line 212\ndef inspect\n  if self == Base\n    super\n  elsif abstract_class?\n    \"#{super}(abstract)\"\n  elsif !connected?\n    \"#{super} (call '#{super}.connection' to establish a connection)\"\n  elsif table_exists?\n    attr_list = columns.map { |c| \"#{c.name}: #{c.type}\" } * ', '\n    \"#{super}(#{attr_list})\"\n  else\n    \"#{super}(Table doesn't exist)\"\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/countercache/classmethods":"<h1 id=\"module-ActiveRecord::CounterCache::ClassMethods\" class=\"module\"> module ActiveRecord::CounterCache::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decrement_counter\"> <span class=\"method-name\">decrement_counter</span><span class=\"method-args\">(counter_name, id)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Decrement a numeric field by one, via a direct SQL update.</p> <p>This works the same as <a href=\"classmethods#method-i-increment_counter\">#increment_counter</a> but reduces the column value by 1 instead of increasing it.</p> <h4 id=\"method-i-decrement_counter-label-Parameters\">Parameters</h4> <ul>\n<li> <p><code>counter_name</code> - The name of the field that should be decremented.</p> </li>\n<li> <p><code>id</code> - The id of the object that should be decremented or an <a href=\"../../array\">Array</a> of ids.</p> </li>\n</ul> <h4 id=\"method-i-decrement_counter-label-Examples\">Examples</h4> <pre class=\"ruby\"># Decrement the post_count column for the record with an id of 5\nDiscussionBoard.decrement_counter(:post_count, 5)\n</pre> <div class=\"method-source-code\" id=\"decrement_counter-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/counter_cache.rb, line 121\ndef decrement_counter(counter_name, id)\n  update_counters(id, counter_name =&gt; -1)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-increment_counter\"> <span class=\"method-name\">increment_counter</span><span class=\"method-args\">(counter_name, id)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Increment a numeric field by one, via a direct SQL update.</p> <p>This method is used primarily for maintaining counter_cache columns that are used to store aggregate values. For example, a DiscussionBoard may cache posts_count and comments_count to avoid running an SQL query to calculate the number of posts and comments there are, each time it is displayed.</p> <h4 id=\"method-i-increment_counter-label-Parameters\">Parameters</h4> <ul>\n<li> <p><code>counter_name</code> - The name of the field that should be incremented.</p> </li>\n<li> <p><code>id</code> - The id of the object that should be incremented or an <a href=\"../../array\">Array</a> of ids.</p> </li>\n</ul> <h4 id=\"method-i-increment_counter-label-Examples\">Examples</h4> <pre class=\"ruby\"># Increment the post_count column for the record with an id of 5\nDiscussionBoard.increment_counter(:post_count, 5)\n</pre> <div class=\"method-source-code\" id=\"increment_counter-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/counter_cache.rb, line 103\ndef increment_counter(counter_name, id)\n  update_counters(id, counter_name =&gt; 1)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset_counters\"> <span class=\"method-name\">reset_counters</span><span class=\"method-args\">(id, *counters)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Resets one or more counter caches to their correct value using an SQL count query. This is useful when adding new counter caches, or if the counter has been corrupted or modified directly by SQL.</p> <h4 id=\"method-i-reset_counters-label-Parameters\">Parameters</h4> <ul>\n<li> <p><code>id</code> - The id of the object you wish to reset a counter on.</p> </li>\n<li> <p><code>counters</code> - One or more association counters to reset. Association name or counter name can be given.</p> </li>\n</ul> <h4 id=\"method-i-reset_counters-label-Examples\">Examples</h4> <pre class=\"ruby\"># For Post with id #1 records reset the comments_count\nPost.reset_counters(1, :comments)\n</pre> <div class=\"method-source-code\" id=\"reset_counters-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/counter_cache.rb, line 20\ndef reset_counters(id, *counters)\n  object = find(id)\n  counters.each do |counter_association|\n    has_many_association = _reflect_on_association(counter_association)\n    unless has_many_association\n      has_many = reflect_on_all_associations(:has_many)\n      has_many_association = has_many.find { |association| association.counter_cache_column &amp;&amp; association.counter_cache_column.to_sym == counter_association.to_sym }\n      counter_association = has_many_association.plural_name if has_many_association\n    end\n    raise ArgumentError, \"'#{self.name}' has no association called '#{counter_association}'\" unless has_many_association\n\n    if has_many_association.is_a? ActiveRecord::Reflection::ThroughReflection\n      has_many_association = has_many_association.through_reflection\n    end\n\n    foreign_key  = has_many_association.foreign_key.to_s\n    child_class  = has_many_association.klass\n    reflection   = child_class._reflections.values.find { |e| e.belongs_to? &amp;&amp; e.foreign_key.to_s == foreign_key &amp;&amp; e.options[:counter_cache].present? }\n    counter_name = reflection.counter_cache_column\n\n    stmt = unscoped.where(arel_table[primary_key].eq(object.id)).arel.compile_update({\n      arel_table[counter_name] =&gt; object.send(counter_association).count(:all)\n    }, primary_key)\n    connection.update stmt\n  end\n  return true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update_counters\"> <span class=\"method-name\">update_counters</span><span class=\"method-args\">(id, counters)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A generic “counter updater” implementation, intended primarily to be used by <a href=\"classmethods#method-i-increment_counter\">#increment_counter</a> and <a href=\"classmethods#method-i-decrement_counter\">#decrement_counter</a>, but which may also be useful on its own. It simply does a direct SQL update for the record with the given ID, altering the given hash of counters by the amount given by the corresponding value:</p> <h4 id=\"method-i-update_counters-label-Parameters\">Parameters</h4> <ul>\n<li> <p><code>id</code> - The id of the object you wish to update a counter on or an <a href=\"../../array\">Array</a> of ids.</p> </li>\n<li> <p><code>counters</code> - A <a href=\"../../hash\">Hash</a> containing the names of the fields to update as keys and the amount to update the field by as values.</p> </li>\n</ul> <h4 id=\"method-i-update_counters-label-Examples\">Examples</h4> <pre class=\"ruby\"># For the Post with id of 5, decrement the comment_count by 1, and\n# increment the action_count by 1\nPost.update_counters 5, comment_count: -1, action_count: 1\n# Executes the following SQL:\n# UPDATE posts\n#    SET comment_count = COALESCE(comment_count, 0) - 1,\n#        action_count = COALESCE(action_count, 0) + 1\n#  WHERE id = 5\n\n# For the Posts with id of 10 and 15, increment the comment_count by 1\nPost.update_counters [10, 15], comment_count: 1\n# Executes the following SQL:\n# UPDATE posts\n#    SET comment_count = COALESCE(comment_count, 0) + 1\n#  WHERE id IN (10, 15)\n</pre> <div class=\"method-source-code\" id=\"update_counters-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/counter_cache.rb, line 77\ndef update_counters(id, counters)\n  updates = counters.map do |counter_name, value|\n    operator = value &lt; 0 ? '-' : '+'\n    quoted_column = connection.quote_column_name(counter_name)\n    \"#{quoted_column} = COALESCE(#{quoted_column}, 0) #{operator} #{value.abs}\"\n  end\n\n  unscoped.where(primary_key =&gt; id).update_all updates.join(', ')\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/dangerousattributeerror":"<h1 id=\"class-ActiveRecord::DangerousAttributeError\" class=\"class\"> class ActiveRecord::DangerousAttributeError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when attribute has a name reserved by Active Record (when attribute has name of one of Active Record instance methods).</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/enum":"<h1 id=\"module-ActiveRecord::Enum\" class=\"module\"> module ActiveRecord::Enum </h1> <section class=\"description\"> <p>Declare an enum attribute where the values map to integers in the database, but can be queried by name. Example:</p> <pre class=\"ruby\">class Conversation &lt; ActiveRecord::Base\n  enum status: [ :active, :archived ]\nend\n\n# conversation.update! status: 0\nconversation.active!\nconversation.active? # =&gt; true\nconversation.status  # =&gt; \"active\"\n\n# conversation.update! status: 1\nconversation.archived!\nconversation.archived? # =&gt; true\nconversation.status    # =&gt; \"archived\"\n\n# conversation.update! status: 1\nconversation.status = \"archived\"\n\n# conversation.update! status: nil\nconversation.status = nil\nconversation.status.nil? # =&gt; true\nconversation.status      # =&gt; nil\n</pre> <p>Scopes based on the allowed values of the enum field will be provided as well. With the above example:</p> <pre class=\"ruby\">Conversation.active\nConversation.archived\n</pre> <p>You can set the default value from the database declaration, like:</p> <pre class=\"ruby\">create_table :conversations do |t|\n  t.column :status, :integer, default: 0\nend\n</pre> <p>Good practice is to let the first declared status be the default.</p> <p>Finally, it's also possible to explicitly map the relation between attribute and database integer with a <code>Hash</code>:</p> <pre class=\"ruby\">class Conversation &lt; ActiveRecord::Base\n  enum status: { active: 0, archived: 1 }\nend\n</pre> <p>Note that when an <code>Array</code> is used, the implicit mapping from the values to database integers is derived from the order the values appear in the array. In the example, <code>:active</code> is mapped to <code>0</code> as it's the first element, and <code>:archived</code> is mapped to <code>1</code>. In general, the <code>i</code>-th element is mapped to <code>i-1</code> in the database.</p> <p>Therefore, once a value is added to the enum array, its position in the array must be maintained, and new values should only be added to the end of the array. To remove unused values, the explicit <code>Hash</code> syntax should be used.</p> <p>In rare circumstances you might need to access the mapping directly. The mappings are exposed through a class method with the pluralized attribute name:</p> <pre class=\"ruby\">Conversation.statuses # =&gt; { \"active\" =&gt; 0, \"archived\" =&gt; 1 }\n</pre> <p>Use that class method when you need to know the ordinal value of an enum:</p> <pre class=\"ruby\">Conversation.where(\"status &lt;&gt; ?\", Conversation.statuses[:archived])\n</pre> <p>Where conditions on an enum attribute must use the ordinal value of an enum.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ENUM_CONFLICT_MESSAGE\">ENUM_CONFLICT_MESSAGE </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-enum\"> <span class=\"method-name\">enum</span><span class=\"method-args\">(definitions)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"enum-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/enum.rb, line 82\ndef enum(definitions)\n  klass = self\n  definitions.each do |name, values|\n    # statuses = { }\n    enum_values = ActiveSupport::HashWithIndifferentAccess.new\n    name        = name.to_sym\n\n    # def self.statuses statuses end\n    detect_enum_conflict!(name, name.to_s.pluralize, true)\n    klass.singleton_class.send(:define_method, name.to_s.pluralize) { enum_values }\n\n    _enum_methods_module.module_eval do\n      # def status=(value) self[:status] = statuses[value] end\n      klass.send(:detect_enum_conflict!, name, \"#{name}=\")\n      define_method(\"#{name}=\") { |value|\n        if enum_values.has_key?(value) || value.blank?\n          self[name] = enum_values[value]\n        elsif enum_values.has_value?(value)\n          # Assigning a value directly is not a end-user feature, hence it's not documented.\n          # This is used internally to make building objects from the generated scopes work\n          # as expected, i.e. +Conversation.archived.build.archived?+ should be true.\n          self[name] = value\n        else\n          raise ArgumentError, \"'#{value}' is not a valid #{name}\"\n        end\n      }\n\n      # def status() statuses.key self[:status] end\n      klass.send(:detect_enum_conflict!, name, name)\n      define_method(name) { enum_values.key self[name] }\n\n      # def status_before_type_cast() statuses.key self[:status] end\n      klass.send(:detect_enum_conflict!, name, \"#{name}_before_type_cast\")\n      define_method(\"#{name}_before_type_cast\") { enum_values.key self[name] }\n\n      pairs = values.respond_to?(:each_pair) ? values.each_pair : values.each_with_index\n      pairs.each do |value, i|\n        enum_values[value] = i\n\n        # def active?() status == 0 end\n        klass.send(:detect_enum_conflict!, name, \"#{value}?\")\n        define_method(\"#{value}?\") { self[name] == i }\n\n        # def active!() update! status: :active end\n        klass.send(:detect_enum_conflict!, name, \"#{value}!\")\n        define_method(\"#{value}!\") { update! name =&gt; value }\n\n        # scope :active, -&gt; { where status: 0 }\n        klass.send(:detect_enum_conflict!, name, value, true)\n        klass.scope value, -&gt; { klass.where name =&gt; i }\n      end\n    end\n    defined_enums[name.to_s] = enum_values\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/findermethods":"<h1 id=\"module-ActiveRecord::FinderMethods\" class=\"module\"> module ActiveRecord::FinderMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ONE_AS_ONE\">ONE_AS_ONE </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exists-3F\"> <span class=\"method-name\">exists?</span><span class=\"method-args\">(conditions = :none)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if a record exists in the table that matches the <code>id</code> or conditions given, or <code>false</code> otherwise. The argument can take six forms:</p> <ul>\n<li> <p><a href=\"../integer\">Integer</a> - Finds the record with this primary key.</p> </li>\n<li> <p><a href=\"../string\">String</a> - Finds the record with a primary key corresponding to this string (such as <code>'5'</code>).</p> </li>\n<li> <p><a href=\"../array\">Array</a> - Finds the record that matches these <code>find</code>-style conditions (such as <code>['name LIKE ?',\n\"%#{query}%\"]</code>).</p> </li>\n<li> <p><a href=\"../hash\">Hash</a> - Finds the record that matches these <code>find</code>-style conditions (such as <code>{name:\n'David'}</code>).</p> </li>\n<li> <p><code>false</code> - Returns always <code>false</code>.</p> </li>\n<li> <p>No args - Returns <code>false</code> if the table is empty, <code>true</code> otherwise.</p> </li>\n</ul> <p>For more information about specifying conditions as a hash or array, see the Conditions section in the introduction to <code>ActiveRecord::Base</code>.</p> <p>Note: You can't pass in a condition as a string (like <code>name =\n'Jamie'</code>), since it would be sanitized and then queried against the primary key column, like <code>id = 'name =\n\\'Jamie\\''</code>.</p> <pre class=\"ruby\">Person.exists?(5)\nPerson.exists?('5')\nPerson.exists?(['name LIKE ?', \"%#{query}%\"])\nPerson.exists?(id: [1, 4, 8])\nPerson.exists?(name: 'David')\nPerson.exists?(false)\nPerson.exists?\n</pre> <div class=\"method-source-code\" id=\"exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 277\n    def exists?(conditions = :none)\n      if Base === conditions\n        conditions = conditions.id\n        ActiveSupport::Deprecation.warn(\"          You are passing an instance of ActiveRecord::Base to `exists?`.\n          Please pass the id of the object by calling `.id`\n\".squish)\n      end\n\n      return false if !conditions\n\n      relation = apply_join_dependency(self, construct_join_dependency)\n      return false if ActiveRecord::NullRelation === relation\n\n      relation = relation.except(:select, :order).select(ONE_AS_ONE).limit(1)\n\n      case conditions\n      when Array, Hash\n        relation = relation.where(conditions)\n      else\n        unless conditions == :none\n          relation = relation.where(primary_key =&gt; conditions)\n        end\n      end\n\n      connection.select_value(relation, \"#{name} Exists\", relation.arel.bind_values + relation.bind_values) ? true : false\n    end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fifth\"> <span class=\"method-name\">fifth</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find the fifth record. If no order is defined it will order by primary key.</p> <pre class=\"ruby\">Person.fifth # returns the fifth object fetched by SELECT * FROM people\nPerson.offset(3).fifth # returns the fifth object from OFFSET 3 (which is OFFSET 7)\nPerson.where([\"user_name = :u\", { u: user_name }]).fifth\n</pre> <div class=\"method-source-code\" id=\"fifth-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 224\ndef fifth\n  find_nth(4, offset_index)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fifth-21\"> <span class=\"method-name\">fifth!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>fifth</code> but raises <code>ActiveRecord::RecordNotFound</code> if no record is found.</p> <div class=\"method-source-code\" id=\"fifth-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 230\ndef fifth!\n  find_nth! 4\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find\"> <span class=\"method-name\">find</span><span class=\"method-args\">(*args) { |*block_args| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find by id - This can either be a specific id (1), a list of ids (1, 5, 6), or an array of ids ([5, 6, 10]). If no record can be found for all of the listed ids, then <a href=\"recordnotfound\">RecordNotFound</a> will be raised. If the primary key is an integer, find by id coerces its arguments using <code>to_i</code>.</p> <pre class=\"ruby\">Person.find(1)          # returns the object for ID = 1\nPerson.find(\"1\")        # returns the object for ID = 1\nPerson.find(\"31-sarah\") # returns the object for ID = 31\nPerson.find(1, 2, 6)    # returns an array for objects with IDs in (1, 2, 6)\nPerson.find([7, 17])    # returns an array for objects with IDs in (7, 17)\nPerson.find([1])        # returns an array for the object with ID = 1\nPerson.where(\"administrator = 1\").order(\"created_on DESC\").find(1)\n</pre> <p><code>ActiveRecord::RecordNotFound</code> will be raised if one or more ids are not found.</p> <p>NOTE: The returned records may not be in the same order as the ids you provide since database rows are unordered. You'd need to provide an explicit <code>order</code> option if you want the results are sorted.</p> <h4 id=\"method-i-find-label-Find+with+lock\">Find with lock</h4> <p>Example for find with a lock: Imagine two concurrent transactions: each will read <code>person.visits == 2</code>, add 1 to it, and save, resulting in two saves of <code>person.visits = 3</code>. By locking the row, the second transaction has to wait until the first is finished; we get the expected <code>person.visits == 4</code>.</p> <pre class=\"ruby\">Person.transaction do\n  person = Person.lock(true).find(1)\n  person.visits += 1\n  person.save!\nend\n</pre> <h4 id=\"method-i-find-label-Variations+of+find\">Variations of <code>find</code>\n</h4> <pre class=\"ruby\">Person.where(name: 'Spartacus', rating: 4)\n# returns a chainable list (which can be empty).\n\nPerson.find_by(name: 'Spartacus', rating: 4)\n# returns the first item or nil.\n\nPerson.where(name: 'Spartacus', rating: 4).first_or_initialize\n# returns the first item or returns a new instance (requires you call .save to persist against the database).\n\nPerson.where(name: 'Spartacus', rating: 4).first_or_create\n# returns the first item or creates it and returns it, available since Rails 3.2.1.\n</pre> <h4 id=\"method-i-find-label-Alternatives+for+find\">Alternatives for <code>find</code>\n</h4> <pre class=\"ruby\">Person.where(name: 'Spartacus', rating: 4).exists?(conditions = :none)\n# returns a boolean indicating if any record with the given conditions exist.\n\nPerson.where(name: 'Spartacus', rating: 4).select(\"field1, field2, field3\")\n# returns a chainable list of instances with only the mentioned fields.\n\nPerson.where(name: 'Spartacus', rating: 4).ids\n# returns an Array of ids, available since Rails 3.2.1.\n\nPerson.where(name: 'Spartacus', rating: 4).pluck(:field1, :field2)\n# returns an Array of the required fields, available since Rails 3.1.\n</pre> <div class=\"method-source-code\" id=\"find-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 67\ndef find(*args)\n  if block_given?\n    to_a.find(*args) { |*block_args| yield(*block_args) }\n  else\n    find_with_ids(*args)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_by\"> <span class=\"method-name\">find_by</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Finds the first record matching the specified conditions. There is no implied ordering so if order matters, you should specify it yourself.</p> <p>If no record is found, returns <code>nil</code>.</p> <pre class=\"ruby\">Post.find_by name: 'Spartacus', rating: 4\nPost.find_by \"published_at &lt; ?\", 2.weeks.ago\n</pre> <div class=\"method-source-code\" id=\"find_by-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 83\ndef find_by(*args)\n  where(*args).take\nrescue RangeError\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_by-21\"> <span class=\"method-name\">find_by!</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Like <code>find_by</code>, except that if no record is found, raises an <code>ActiveRecord::RecordNotFound</code> error.</p> <div class=\"method-source-code\" id=\"find_by-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 91\ndef find_by!(*args)\n  where(*args).take!\nrescue RangeError\n  raise RecordNotFound, \"Couldn't find #{@klass.name} with an out of range value\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-first\"> <span class=\"method-name\">first</span><span class=\"method-args\">(limit = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find the first record (or first N records if a parameter is supplied). If no order is defined it will order by primary key.</p> <pre class=\"ruby\">Person.first # returns the first object fetched by SELECT * FROM people ORDER BY people.id LIMIT 1\nPerson.where([\"user_name = ?\", user_name]).first\nPerson.where([\"user_name = :u\", { u: user_name }]).first\nPerson.order(\"created_on DESC\").offset(5).first\nPerson.first(3) # returns the first three objects fetched by SELECT * FROM people ORDER BY people.id LIMIT 3\n</pre> <div class=\"method-source-code\" id=\"first-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 123\ndef first(limit = nil)\n  if limit\n    find_nth_with_limit(offset_index, limit)\n  else\n    find_nth(0, offset_index)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-first-21\"> <span class=\"method-name\">first!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>first</code> but raises <code>ActiveRecord::RecordNotFound</code> if no record is found. Note that <code>first!</code> accepts no arguments.</p> <div class=\"method-source-code\" id=\"first-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 133\ndef first!\n  find_nth! 0\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-forty_two\"> <span class=\"method-name\">forty_two</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find the forty-second record. Also known as accessing “the reddit”. If no order is defined it will order by primary key.</p> <pre class=\"ruby\">Person.forty_two # returns the forty-second object fetched by SELECT * FROM people\nPerson.offset(3).forty_two # returns the forty-second object from OFFSET 3 (which is OFFSET 44)\nPerson.where([\"user_name = :u\", { u: user_name }]).forty_two\n</pre> <div class=\"method-source-code\" id=\"forty_two-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 240\ndef forty_two\n  find_nth(41, offset_index)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-forty_two-21\"> <span class=\"method-name\">forty_two!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>forty_two</code> but raises <code>ActiveRecord::RecordNotFound</code> if no record is found.</p> <div class=\"method-source-code\" id=\"forty_two-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 246\ndef forty_two!\n  find_nth! 41\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fourth\"> <span class=\"method-name\">fourth</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find the fourth record. If no order is defined it will order by primary key.</p> <pre class=\"ruby\">Person.fourth # returns the fourth object fetched by SELECT * FROM people\nPerson.offset(3).fourth # returns the fourth object from OFFSET 3 (which is OFFSET 6)\nPerson.where([\"user_name = :u\", { u: user_name }]).fourth\n</pre> <div class=\"method-source-code\" id=\"fourth-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 208\ndef fourth\n  find_nth(3, offset_index)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fourth-21\"> <span class=\"method-name\">fourth!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>fourth</code> but raises <code>ActiveRecord::RecordNotFound</code> if no record is found.</p> <div class=\"method-source-code\" id=\"fourth-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 214\ndef fourth!\n  find_nth! 3\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last\"> <span class=\"method-name\">last</span><span class=\"method-args\">(limit = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find the last record (or last N records if a parameter is supplied). If no order is defined it will order by primary key.</p> <pre class=\"ruby\">Person.last # returns the last object fetched by SELECT * FROM people\nPerson.where([\"user_name = ?\", user_name]).last\nPerson.order(\"created_on DESC\").offset(5).last\nPerson.last(3) # returns the last three objects fetched by SELECT * FROM people.\n</pre> <p>Take note that in that last case, the results are sorted in ascending order:</p> <pre>[#&lt;Person id:2&gt;, #&lt;Person id:3&gt;, #&lt;Person id:4&gt;]</pre> <p>and not:</p> <pre>[#&lt;Person id:4&gt;, #&lt;Person id:3&gt;, #&lt;Person id:2&gt;]</pre> <div class=\"method-source-code\" id=\"last-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 152\ndef last(limit = nil)\n  if limit\n    if order_values.empty? &amp;&amp; primary_key\n      order(arel_table[primary_key].desc).limit(limit).reverse\n    else\n      to_a.last(limit)\n    end\n  else\n    find_last\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last-21\"> <span class=\"method-name\">last!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>last</code> but raises <code>ActiveRecord::RecordNotFound</code> if no record is found. Note that <code>last!</code> accepts no arguments.</p> <div class=\"method-source-code\" id=\"last-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 166\ndef last!\n  last or raise RecordNotFound.new(\"Couldn't find #{@klass.name} with [#{arel.where_sql}]\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-second\"> <span class=\"method-name\">second</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find the second record. If no order is defined it will order by primary key.</p> <pre class=\"ruby\">Person.second # returns the second object fetched by SELECT * FROM people\nPerson.offset(3).second # returns the second object from OFFSET 3 (which is OFFSET 4)\nPerson.where([\"user_name = :u\", { u: user_name }]).second\n</pre> <div class=\"method-source-code\" id=\"second-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 176\ndef second\n  find_nth(1, offset_index)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-second-21\"> <span class=\"method-name\">second!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>second</code> but raises <code>ActiveRecord::RecordNotFound</code> if no record is found.</p> <div class=\"method-source-code\" id=\"second-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 182\ndef second!\n  find_nth! 1\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-take\"> <span class=\"method-name\">take</span><span class=\"method-args\">(limit = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Gives a record (or N records if a parameter is supplied) without any implied order. The order will depend on the database implementation. If an order is supplied it will be respected.</p> <pre class=\"ruby\">Person.take # returns an object fetched by SELECT * FROM people LIMIT 1\nPerson.take(5) # returns 5 objects fetched by SELECT * FROM people LIMIT 5\nPerson.where([\"name LIKE '%?'\", name]).take\n</pre> <div class=\"method-source-code\" id=\"take-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 104\ndef take(limit = nil)\n  limit ? limit(limit).to_a : find_take\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-take-21\"> <span class=\"method-name\">take!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>take</code> but raises <code>ActiveRecord::RecordNotFound</code> if no record is found. Note that <code>take!</code> accepts no arguments.</p> <div class=\"method-source-code\" id=\"take-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 110\ndef take!\n  take or raise RecordNotFound.new(\"Couldn't find #{@klass.name} with [#{arel.where_sql}]\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-third\"> <span class=\"method-name\">third</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find the third record. If no order is defined it will order by primary key.</p> <pre class=\"ruby\">Person.third # returns the third object fetched by SELECT * FROM people\nPerson.offset(3).third # returns the third object from OFFSET 3 (which is OFFSET 5)\nPerson.where([\"user_name = :u\", { u: user_name }]).third\n</pre> <div class=\"method-source-code\" id=\"third-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 192\ndef third\n  find_nth(2, offset_index)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-third-21\"> <span class=\"method-name\">third!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>third</code> but raises <code>ActiveRecord::RecordNotFound</code> if no record is found.</p> <div class=\"method-source-code\" id=\"third-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 198\ndef third!\n  find_nth! 2\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_last\"> <span class=\"method-name\">find_last</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_last-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 503\ndef find_last\n  if loaded?\n    @records.last\n  else\n    @last ||=\n      if limit_value\n        to_a.last\n      else\n        reverse_order.limit(1).to_a.first\n      end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_nth\"> <span class=\"method-name\">find_nth</span><span class=\"method-args\">(index, offset)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_nth-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 479\ndef find_nth(index, offset)\n  if loaded?\n    @records[index]\n  else\n    offset += index\n    @offsets[offset] ||= find_nth_with_limit(offset, 1).first\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_nth-21\"> <span class=\"method-name\">find_nth!</span><span class=\"method-args\">(index)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_nth-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 488\ndef find_nth!(index)\n  find_nth(index, offset_index) or raise RecordNotFound.new(\"Couldn't find #{@klass.name} with [#{arel.where_sql}]\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_nth_with_limit\"> <span class=\"method-name\">find_nth_with_limit</span><span class=\"method-args\">(offset, limit)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_nth_with_limit-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 492\ndef find_nth_with_limit(offset, limit)\n  relation = if order_values.empty? &amp;&amp; primary_key\n               order(arel_table[primary_key].asc)\n             else\n               self\n             end\n\n  relation = relation.offset(offset) unless offset.zero?\n  relation.limit(limit).to_a\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_one\"> <span class=\"method-name\">find_one</span><span class=\"method-args\">(id)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_one-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 432\n    def find_one(id)\n      if ActiveRecord::Base === id\n        id = id.id\n        ActiveSupport::Deprecation.warn(\"          You are passing an instance of ActiveRecord::Base to `find`.\n          Please pass the id of the object by calling `.id`\n\".squish)\n      end\n\n      relation = where(primary_key =&gt; id)\n      record = relation.take\n\n      raise_record_not_found_exception!(id, 0, 1) unless record\n\n      record\n    end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_some\"> <span class=\"method-name\">find_some</span><span class=\"method-args\">(ids)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_some-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 449\ndef find_some(ids)\n  result = where(primary_key =&gt; ids).to_a\n\n  expected_size =\n    if limit_value &amp;&amp; ids.size &gt; limit_value\n      limit_value\n    else\n      ids.size\n    end\n\n  # 11 ids with limit 3, offset 9 should give 2 results.\n  if offset_value &amp;&amp; (ids.size - offset_value &lt; expected_size)\n    expected_size = ids.size - offset_value\n  end\n\n  if result.size == expected_size\n    result\n  else\n    raise_record_not_found_exception!(ids, result.size, expected_size)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_take\"> <span class=\"method-name\">find_take</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_take-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 471\ndef find_take\n  if loaded?\n    @records.first\n  else\n    @take ||= limit(1).to_a.first\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_with_ids\"> <span class=\"method-name\">find_with_ids</span><span class=\"method-args\">(*ids)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_with_ids-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/finder_methods.rb, line 411\ndef find_with_ids(*ids)\n  raise UnknownPrimaryKey.new(@klass) if primary_key.nil?\n\n  expects_array = ids.first.kind_of?(Array)\n  return ids.first if expects_array &amp;&amp; ids.first.empty?\n\n  ids = ids.flatten.compact.uniq\n\n  case ids.size\n  when 0\n    raise RecordNotFound, \"Couldn't find #{@klass.name} without an ID\"\n  when 1\n    result = find_one(ids.first)\n    expects_array ? [ result ] : result\n  else\n    find_some(ids)\n  end\nrescue RangeError\n  raise RecordNotFound, \"Couldn't find #{@klass.name} with an out of range ID\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/fixtureset":"<h1 id=\"class-ActiveRecord::FixtureSet\" class=\"class\"> class ActiveRecord::FixtureSet </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Fixtures are a way of organizing data that you want to test against; in short, sample data.</p> <p>They are stored in YAML files, one file per model, which are placed in the directory appointed by <code>ActiveSupport::TestCase.fixture_path=(path)</code> (this is automatically configured for Rails, so you can just put your files in <code>&lt;your-rails-app&gt;/test/fixtures/</code>). The fixture file ends with the <code>.yml</code> file extension, for example: <code>&lt;your-rails-app&gt;/test/fixtures/web_sites.yml</code>).</p> <p>The format of a fixture file looks like this:</p> <pre>rubyonrails:\n  id: 1\n  name: Ruby on Rails\n  url: http://www.rubyonrails.org\n\ngoogle:\n  id: 2\n  name: Google\n  url: http://www.google.com</pre> <p>This fixture file includes two fixtures. Each YAML fixture (ie. record) is given a name and is followed by an indented list of key/value pairs in the “key: value” format. Records are separated by a blank line for your viewing pleasure.</p> <p>Note: Fixtures are unordered. If you want ordered fixtures, use the omap YAML type. See <a href=\"http://yaml.org/type/omap.html\">yaml.org/type/omap.html</a> for the specification. You will need ordered fixtures when you have foreign key constraints on keys in the same table. This is commonly needed for tree structures. Example:</p> <pre>--- !omap\n- parent:\n    id:         1\n    parent_id:  NULL\n    title:      Parent\n- child:\n    id:         2\n    parent_id:  1\n    title:      Child</pre> <h1 id=\"class-ActiveRecord::FixtureSet-label-Using+Fixtures+in+Test+Cases\">Using Fixtures in Test Cases</h1> <p>Since fixtures are a testing construct, we use them in our unit and functional tests. There are two ways to use the fixtures, but first let's take a look at a sample unit test:</p> <pre class=\"ruby\">require 'test_helper'\n\nclass WebSiteTest &lt; ActiveSupport::TestCase\n  test \"web_site_count\" do\n    assert_equal 2, WebSite.count\n  end\nend\n</pre> <p>By default, <code>test_helper.rb</code> will load all of your fixtures into your test database, so this test will succeed.</p> <p>The testing environment will automatically load the all fixtures into the database before each test. To ensure consistent data, the environment deletes the fixtures before running the load.</p> <p>In addition to being available in the database, the fixture's data may also be accessed by using a special dynamic method, which has the same name as the model, and accepts the name of the fixture to instantiate:</p> <pre class=\"ruby\">test \"find\" do\n  assert_equal \"Ruby on Rails\", web_sites(:rubyonrails).name\nend\n</pre> <p>Alternatively, you may enable auto-instantiation of the fixture data. For instance, take the following tests:</p> <pre class=\"ruby\">test \"find_alt_method_1\" do\n  assert_equal \"Ruby on Rails\", @web_sites['rubyonrails']['name']\nend\n\ntest \"find_alt_method_2\" do\n  assert_equal \"Ruby on Rails\", @rubyonrails.name\nend\n</pre> <p>In order to use these methods to access fixtured data within your testcases, you must specify one of the following in your <code>ActiveSupport::TestCase</code>-derived class:</p> <ul>\n<li> <p>to fully enable instantiated fixtures (enable alternate methods #1 and #2 above)</p> <pre class=\"ruby\">self.use_instantiated_fixtures = true\n</pre> </li>\n<li> <p>create only the hash for the fixtures, do not 'find' each instance (enable alternate method #1 only)</p> <pre class=\"ruby\">self.use_instantiated_fixtures = :no_instances\n</pre> </li>\n</ul> <p>Using either of these alternate methods incurs a performance hit, as the fixtured data must be fully traversed in the database to create the fixture hash and/or instance variables. This is expensive for large sets of fixtured data.</p> <h1 id=\"class-ActiveRecord::FixtureSet-label-Dynamic+fixtures+with+ERB\">Dynamic fixtures with <a href=\"../erb\">ERB</a>\n</h1> <p>Some times you don't care about the content of the fixtures as much as you care about the volume. In these cases, you can mix <a href=\"../erb\">ERB</a> in with your YAML fixtures to create a bunch of fixtures for load testing, like:</p> <pre>&lt;% 1.upto(1000) do |i| %&gt;\nfix_&lt;%= i %&gt;:\n  id: &lt;%= i %&gt;\n  name: guy_&lt;%= 1 %&gt;\n&lt;% end %&gt;</pre> <p>This will create 1000 very simple fixtures.</p> <p>Using <a href=\"../erb\">ERB</a>, you can also inject dynamic values into your fixtures with inserts like <code>&lt;%=\nDate.today.strftime(\"%Y-%m-%d\") %&gt;</code>. This is however a feature to be used with some caution. The point of fixtures are that they're stable units of predictable sample data. If you feel that you need to inject dynamic values, then perhaps you should reexamine whether your application is properly testable. Hence, dynamic values in fixtures are to be considered a code smell.</p> <p>Helper methods defined in a fixture will not be available in other fixtures, to prevent against unwanted inter-test dependencies. Methods used by multiple fixtures should be defined in a module that is included in <code>ActiveRecord::FixtureSet.context_class</code>.</p> <ul>\n<li> <p>define a helper method in `test_helper.rb`</p> <pre class=\"ruby\">module FixtureFileHelpers\n  def file_sha(path)\n    Digest::SHA2.hexdigest(File.read(Rails.root.join('test/fixtures', path)))\n  end\nend\nActiveRecord::FixtureSet.context_class.send :include, FixtureFileHelpers\n</pre> </li>\n<li> <p>use the helper method in a fixture</p> <pre>photo:\n  name: kitten.png\n  sha: &lt;%= file_sha 'files/kitten.png' %&gt;</pre> </li>\n</ul> <h1 id=\"class-ActiveRecord::FixtureSet-label-Transactional+Fixtures\">Transactional Fixtures</h1> <p>Test cases can use begin+rollback to isolate their changes to the database instead of having to delete+insert for every test case.</p> <pre class=\"ruby\">class FooTest &lt; ActiveSupport::TestCase\n  self.use_transactional_fixtures = true\n\n  test \"godzilla\" do\n    assert !Foo.all.empty?\n    Foo.destroy_all\n    assert Foo.all.empty?\n  end\n\n  test \"godzilla aftermath\" do\n    assert !Foo.all.empty?\n  end\nend\n</pre> <p>If you preload your test database with all fixture data (probably in the rake task) and use transactional fixtures, then you may omit all fixtures declarations in your test cases since all the data's already there and every case rolls back its changes.</p> <p>In order to use instantiated fixtures with preloaded data, set <code>self.pre_loaded_fixtures</code> to true. This will provide access to fixture data for every table that has been loaded through fixtures (depending on the value of <code>use_instantiated_fixtures</code>).</p> <p>When <strong>not</strong> to use transactional fixtures:</p> <ol>\n<li> <p>You're testing whether a transaction works correctly. Nested transactions don't commit until all parent transactions commit, particularly, the fixtures transaction which is begun in setup and rolled back in teardown. Thus, you won't be able to verify the results of your transaction until Active Record supports nested transactions or savepoints (in progress).</p> </li>\n<li> <p>Your database does not support transactions. Every Active Record database supports transactions except MySQL MyISAM. Use InnoDB, MaxDB, or NDB instead.</p> </li>\n</ol> <h1 id=\"class-ActiveRecord::FixtureSet-label-Advanced+Fixtures\">Advanced Fixtures</h1> <p>Fixtures that don't specify an ID get some extra features:</p> <ul>\n<li> <p>Stable, autogenerated IDs</p> </li>\n<li> <p>Label references for associations (belongs_to, has_one, has_many)</p> </li>\n<li> <p>HABTM associations as inline lists</p> </li>\n</ul> <p>There are some more advanced features available even if the id is specified:</p> <ul>\n<li> <p>Autofilled timestamp columns</p> </li>\n<li> <p>Fixture label interpolation</p> </li>\n<li> <p>Support for YAML defaults</p> </li>\n</ul> <h2 id=\"class-ActiveRecord::FixtureSet-label-Stable-2C+Autogenerated+IDs\">Stable, Autogenerated IDs</h2> <p>Here, have a monkey fixture:</p> <pre>george:\n  id: 1\n  name: George the Monkey\n\nreginald:\n  id: 2\n  name: Reginald the Pirate</pre> <p>Each of these fixtures has two unique identifiers: one for the database and one for the humans. Why don't we generate the primary key instead? Hashing each fixture's label yields a consistent ID:</p> <pre>george: # generated id: 503576764\n  name: George the Monkey\n\nreginald: # generated id: 324201669\n  name: Reginald the Pirate</pre> <p>Active Record looks at the fixture's model class, discovers the correct primary key, and generates it right before inserting the fixture into the database.</p> <p>The generated ID for a given label is constant, so we can discover any fixture's ID without loading anything, as long as we know the label.</p> <h2 id=\"class-ActiveRecord::FixtureSet-label-Label+references+for+associations+-28belongs_to-2C+has_one-2C+has_many-29\">Label references for associations (belongs_to, has_one, has_many)</h2> <p>Specifying foreign keys in fixtures can be very fragile, not to mention difficult to read. Since Active Record can figure out the ID of any fixture from its label, you can specify FK's by label instead of ID.</p> <h3 id=\"class-ActiveRecord::FixtureSet-label-belongs_to\">belongs_to</h3> <p>Let's break out some more monkeys and pirates.</p> <pre>### in pirates.yml\n\nreginald:\n  id: 1\n  name: Reginald the Pirate\n  monkey_id: 1\n\n### in monkeys.yml\n\ngeorge:\n  id: 1\n  name: George the Monkey\n  pirate_id: 1</pre> <p>Add a few more monkeys and pirates and break this into multiple files, and it gets pretty hard to keep track of what's going on. Let's use labels instead of IDs:</p> <pre>### in pirates.yml\n\nreginald:\n  name: Reginald the Pirate\n  monkey: george\n\n### in monkeys.yml\n\ngeorge:\n  name: George the Monkey\n  pirate: reginald</pre> <p>Pow! All is made clear. Active Record reflects on the fixture's model class, finds all the <code>belongs_to</code> associations, and allows you to specify a target <strong>label</strong> for the <strong>association</strong> (monkey: george) rather than a target <strong>id</strong> for the <strong>FK</strong> (<code>monkey_id:\n1</code>).</p> <h4 id=\"class-ActiveRecord::FixtureSet-label-Polymorphic+belongs_to\">Polymorphic belongs_to</h4> <p>Supporting polymorphic relationships is a little bit more complicated, since Active Record needs to know what type your association is pointing at. Something like this should look familiar:</p> <pre>### in fruit.rb\n\nbelongs_to :eater, polymorphic: true\n\n### in fruits.yml\n\napple:\n  id: 1\n  name: apple\n  eater_id: 1\n  eater_type: Monkey</pre> <p>Can we do better? You bet!</p> <pre>apple:\n  eater: george (Monkey)</pre> <p>Just provide the polymorphic target type and Active Record will take care of the rest.</p> <h3 id=\"class-ActiveRecord::FixtureSet-label-has_and_belongs_to_many\">has_and_belongs_to_many</h3> <p><a href=\"../time\">Time</a> to give our monkey some fruit.</p> <pre>### in monkeys.yml\n\ngeorge:\n  id: 1\n  name: George the Monkey\n\n### in fruits.yml\n\napple:\n  id: 1\n  name: apple\n\norange:\n  id: 2\n  name: orange\n\ngrape:\n  id: 3\n  name: grape\n\n### in fruits_monkeys.yml\n\napple_george:\n  fruit_id: 1\n  monkey_id: 1\n\norange_george:\n  fruit_id: 2\n  monkey_id: 1\n\ngrape_george:\n  fruit_id: 3\n  monkey_id: 1</pre> <p>Let's make the HABTM fixture go away.</p> <pre>### in monkeys.yml\n\ngeorge:\n  id: 1\n  name: George the Monkey\n  fruits: apple, orange, grape\n\n### in fruits.yml\n\napple:\n  name: apple\n\norange:\n  name: orange\n\ngrape:\n  name: grape</pre> <p>Zap! No more fruits_monkeys.yml file. We've specified the list of fruits on George's fixture, but we could've just as easily specified a list of monkeys on each fruit. As with <code>belongs_to</code>, Active Record reflects on the fixture's model class and discovers the <code>has_and_belongs_to_many</code> associations.</p> <h2 id=\"class-ActiveRecord::FixtureSet-label-Autofilled+Timestamp+Columns\">Autofilled <a href=\"timestamp\">Timestamp</a> Columns</h2> <p>If your table/model specifies any of Active Record's standard timestamp columns (<code>created_at</code>, <code>created_on</code>, <code>updated_at</code>, <code>updated_on</code>), they will automatically be set to <code>Time.now</code>.</p> <p>If you've set specific values, they'll be left alone.</p> <h2 id=\"class-ActiveRecord::FixtureSet-label-Fixture+label+interpolation\">Fixture label interpolation</h2> <p>The label of the current fixture is always available as a column value:</p> <pre>geeksomnia:\n  name: Geeksomnia's Account\n  subdomain: $LABEL\n  email: $LABEL@email.com</pre> <p>Also, sometimes (like when porting older join table fixtures) you'll need to be able to get a hold of the identifier for a given label. <a href=\"../erb\">ERB</a> to the rescue:</p> <pre>george_reginald:\n  monkey_id: &lt;%= ActiveRecord::FixtureSet.identify(:reginald) %&gt;\n  pirate_id: &lt;%= ActiveRecord::FixtureSet.identify(:george) %&gt;</pre> <h2 id=\"class-ActiveRecord::FixtureSet-label-Support+for+YAML+defaults\">Support for YAML defaults</h2> <p>You can set and reuse defaults in your fixtures YAML file. This is the same technique used in the <code>database.yml</code> file to specify defaults:</p> <pre>DEFAULTS: &amp;DEFAULTS\n  created_on: &lt;%= 3.weeks.ago.to_s(:db) %&gt;\n\nfirst:\n  name: Smurf\n  &lt;&lt;: *DEFAULTS\n\nsecond:\n  name: Fraggle\n  &lt;&lt;: *DEFAULTS</pre> <p>Any fixture labeled “DEFAULTS” is safely ignored.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"MAX_ID\">MAX_ID </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-config\"> <span class=\"method-name\">config</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-fixtures\"> <span class=\"method-name\">fixtures</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-model_class\"> <span class=\"method-name\">model_class</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-name\"> <span class=\"method-name\">name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-table_name\"> <span class=\"method-name\">table_name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-cache_fixtures\"> <span class=\"method-name\">cache_fixtures</span><span class=\"method-args\">(connection, fixtures_map)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"cache_fixtures-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 439\ndef self.cache_fixtures(connection, fixtures_map)\n  cache_for_connection(connection).update(fixtures_map)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-cache_for_connection\"> <span class=\"method-name\">cache_for_connection</span><span class=\"method-args\">(connection)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"cache_for_connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 423\ndef self.cache_for_connection(connection)\n  @@all_cached_fixtures[connection]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-cached_fixtures\"> <span class=\"method-name\">cached_fixtures</span><span class=\"method-args\">(connection, keys_to_fetch = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"cached_fixtures-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 431\ndef self.cached_fixtures(connection, keys_to_fetch = nil)\n  if keys_to_fetch\n    cache_for_connection(connection).values_at(*keys_to_fetch)\n  else\n    cache_for_connection(connection).values\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-context_class\"> <span class=\"method-name\">context_class</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Superclass for the evaluation contexts used by <a href=\"../erb\">ERB</a> fixtures.</p> <div class=\"method-source-code\" id=\"context_class-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 562\ndef self.context_class\n  @context_class ||= Class.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-create_fixtures\"> <span class=\"method-name\">create_fixtures</span><span class=\"method-args\">(fixtures_directory, fixture_set_names, class_names = {}, config = ActiveRecord::Base) { |: connection| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"create_fixtures-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 496\ndef self.create_fixtures(fixtures_directory, fixture_set_names, class_names = {}, config = ActiveRecord::Base)\n  fixture_set_names = Array(fixture_set_names).map(&amp;:to_s)\n  class_names = ClassCache.new class_names, config\n\n  # FIXME: Apparently JK uses this.\n  connection = block_given? ? yield : ActiveRecord::Base.connection\n\n  files_to_read = fixture_set_names.reject { |fs_name|\n    fixture_is_cached?(connection, fs_name)\n  }\n\n  unless files_to_read.empty?\n    connection.disable_referential_integrity do\n      fixtures_map = {}\n\n      fixture_sets = files_to_read.map do |fs_name|\n        klass = class_names[fs_name]\n        conn = klass ? klass.connection : connection\n        fixtures_map[fs_name] = new( # ActiveRecord::FixtureSet.new\n          conn,\n          fs_name,\n          klass,\n          ::File.join(fixtures_directory, fs_name))\n      end\n\n      update_all_loaded_fixtures fixtures_map\n\n      connection.transaction(:requires_new =&gt; true) do\n        fixture_sets.each do |fs|\n          conn = fs.model_class.respond_to?(:connection) ? fs.model_class.connection : connection\n          table_rows = fs.table_rows\n\n          table_rows.each_key do |table|\n            conn.delete \"DELETE FROM #{conn.quote_table_name(table)}\", 'Fixture Delete'\n          end\n\n          table_rows.each do |fixture_set_name, rows|\n            rows.each do |row|\n              conn.insert_fixture(row, fixture_set_name)\n            end\n          end\n\n          # Cap primary key sequences to max(pk).\n          if conn.respond_to?(:reset_pk_sequence!)\n            conn.reset_pk_sequence!(fs.table_name)\n          end\n        end\n      end\n\n      cache_fixtures(connection, fixtures_map)\n    end\n  end\n  cached_fixtures(connection, fixture_set_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-fixture_is_cached-3F\"> <span class=\"method-name\">fixture_is_cached?</span><span class=\"method-args\">(connection, table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"fixture_is_cached-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 427\ndef self.fixture_is_cached?(connection, table_name)\n  cache_for_connection(connection)[table_name]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-identify\"> <span class=\"method-name\">identify</span><span class=\"method-args\">(label, column_type = :integer)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a consistent, platform-independent identifier for <code>label</code>. <a href=\"../integer\">Integer</a> identifiers are values less than 2^30. UUIDs are RFC 4122 version 5 SHA-1 hashes.</p> <div class=\"method-source-code\" id=\"identify-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 553\ndef self.identify(label, column_type = :integer)\n  if column_type == :uuid\n    Digest::UUID.uuid_v5(Digest::UUID::OID_NAMESPACE, label.to_s)\n  else\n    Zlib.crc32(label.to_s) % MAX_ID\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-instantiate_all_loaded_fixtures\"> <span class=\"method-name\">instantiate_all_loaded_fixtures</span><span class=\"method-args\">(object, load_instances = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"instantiate_all_loaded_fixtures-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 455\ndef self.instantiate_all_loaded_fixtures(object, load_instances = true)\n  all_loaded_fixtures.each_value do |fixture_set|\n    instantiate_fixtures(object, fixture_set, load_instances)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-instantiate_fixtures\"> <span class=\"method-name\">instantiate_fixtures</span><span class=\"method-args\">(object, fixture_set, load_instances = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"instantiate_fixtures-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 443\ndef self.instantiate_fixtures(object, fixture_set, load_instances = true)\n  if load_instances\n    fixture_set.each do |fixture_name, fixture|\n      begin\n        object.instance_variable_set \"@#{fixture_name}\", fixture.find\n      rescue FixtureClassNotFound\n        nil\n      end\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(connection, name, class_name, path, config = ActiveRecord::Base)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 572\ndef initialize(connection, name, class_name, path, config = ActiveRecord::Base)\n  @name     = name\n  @path     = path\n  @config   = config\n  @model_class = nil\n\n  if class_name.is_a?(Class) # TODO: Should be an AR::Base type class, or any?\n    @model_class = class_name\n  else\n    @model_class = class_name.safe_constantize if class_name\n  end\n\n  @connection  = connection\n\n  @table_name = ( model_class.respond_to?(:table_name) ?\n                  model_class.table_name :\n                  self.class.default_fixture_table_name(name, config) )\n\n  @fixtures = read_fixture_files path, @model_class\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-reset_cache\"> <span class=\"method-name\">reset_cache</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"reset_cache-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 419\ndef self.reset_cache\n  @@all_cached_fixtures.clear\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(x)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 593\ndef [](x)\n  fixtures[x]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(k,v)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 597\ndef []=(k,v)\n  fixtures[k] = v\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 601\ndef each(&amp;block)\n  fixtures.each(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-size\"> <span class=\"method-name\">size</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"size-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 605\ndef size\n  fixtures.size\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_rows\"> <span class=\"method-name\">table_rows</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash of rows to be inserted. The key is the table, the value is a list of rows to insert to that table.</p> <div class=\"method-source-code\" id=\"table_rows-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 611\ndef table_rows\n  now = config.default_timezone == :utc ? Time.now.utc : Time.now\n  now = now.to_s(:db)\n\n  # allow a standard key to be used for doing defaults in YAML\n  fixtures.delete('DEFAULTS')\n\n  # track any join tables we need to insert later\n  rows = Hash.new { |h,table| h[table] = [] }\n\n  rows[table_name] = fixtures.map do |label, fixture|\n    row = fixture.to_hash\n\n    if model_class\n      # fill in timestamp columns if they aren't specified and the model is set to record_timestamps\n      if model_class.record_timestamps\n        timestamp_column_names.each do |c_name|\n          row[c_name] = now unless row.key?(c_name)\n        end\n      end\n\n      # interpolate the fixture label\n      row.each do |key, value|\n        row[key] = value.gsub(\"$LABEL\", label.to_s) if value.is_a?(String)\n      end\n\n      # generate a primary key if necessary\n      if has_primary_key_column? &amp;&amp; !row.include?(primary_key_name)\n        row[primary_key_name] = ActiveRecord::FixtureSet.identify(label, primary_key_type)\n      end\n\n      # If STI is used, find the correct subclass for association reflection\n      reflection_class =\n        if row.include?(inheritance_column_name)\n          row[inheritance_column_name].constantize rescue model_class\n        else\n          model_class\n        end\n\n      reflection_class._reflections.each_value do |association|\n        case association.macro\n        when :belongs_to\n          # Do not replace association name with association foreign key if they are named the same\n          fk_name = (association.options[:foreign_key] || \"#{association.name}_id\").to_s\n\n          if association.name.to_s != fk_name &amp;&amp; value = row.delete(association.name.to_s)\n            if association.polymorphic? &amp;&amp; value.sub!(/\\s*\\(([^\\)]*)\\)\\s*$/, \"\")\n              # support polymorphic belongs_to as \"label (Type)\"\n              row[association.foreign_type] = $1\n            end\n\n            fk_type = reflection_class.columns_hash[fk_name].type\n            row[fk_name] = ActiveRecord::FixtureSet.identify(value, fk_type)\n          end\n        when :has_many\n          if association.options[:through]\n            add_join_records(rows, row, HasManyThroughProxy.new(association))\n          end\n        end\n      end\n    end\n\n    row\n  end\n  rows\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/immutablerelation":"<h1 id=\"class-ActiveRecord::ImmutableRelation\" class=\"class\"> class ActiveRecord::ImmutableRelation </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when a relation cannot be mutated because it's already loaded.</p> <pre class=\"ruby\">class Task &lt; ActiveRecord::Base\nend\n\nrelation = Task.all\nrelation.loaded? # =&gt; true\n\n# Methods which try to mutate a loaded relation fail.\nrelation.where!(title: 'TODO')  # =&gt; ActiveRecord::ImmutableRelation\nrelation.limit!(5)              # =&gt; ActiveRecord::ImmutableRelation\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/inheritance":"<h1 id=\"module-ActiveRecord::Inheritance\" class=\"module\"> module ActiveRecord::Inheritance </h1> <section class=\"description\"> <h2 id=\"module-ActiveRecord::Inheritance-label-Single+table+inheritance\">Single table inheritance</h2> <p>Active Record allows inheritance by storing the name of the class in a column that by default is named “type” (can be changed by overwriting <code>Base.inheritance_column</code>). This means that an inheritance looking like this:</p> <pre class=\"ruby\">class Company &lt; ActiveRecord::Base; end\nclass Firm &lt; Company; end\nclass Client &lt; Company; end\nclass PriorityClient &lt; Client; end\n</pre> <p>When you do <code>Firm.create(name: \"37signals\")</code>, this record will be saved in the companies table with type = “Firm”. You can then fetch this row again using <code>Company.where(name:\n'37signals').first</code> and it will return a Firm object.</p> <p>Be aware that because the type column is an attribute on the record every new subclass will instantly be marked as dirty and the type column will be included in the list of changed attributes on the record. This is different from non STI classes:</p> <pre class=\"ruby\">Company.new.changed? # =&gt; false\nFirm.new.changed?    # =&gt; true\nFirm.new.changes     # =&gt; {\"type\"=&gt;[\"\",\"Firm\"]}\n</pre> <p>If you don't have a type column defined in your table, single-table inheritance won't be triggered. In that case, it'll work just like normal subclasses with no special magic for differentiating between them or reloading the right type with find.</p> <p>Note, all the attributes for all the cases are kept in the same table. Read more: <a href=\"http://www.martinfowler.com/eaaCatalog/singleTableInheritance.html\">www.martinfowler.com/eaaCatalog/singleTableInheritance.html</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initialize_dup\"> <span class=\"method-name\">initialize_dup</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"initialize_dup-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/inheritance.rb, line 223\ndef initialize_dup(other)\n  super\n  ensure_proper_type\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/inheritance/classmethods":"<h1 id=\"module-ActiveRecord::Inheritance::ClassMethods\" class=\"module\"> module ActiveRecord::Inheritance::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-abstract_class\"> <span class=\"method-name\">abstract_class</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Set this to true if this is an abstract class (see <code>abstract_class?</code>). If you are using inheritance with <a href=\"../../activerecord\">ActiveRecord</a> and don't want child classes to utilize the implied STI table name of the parent class, this will need to be true. For example, given the following:</p> <pre class=\"ruby\">class SuperClass &lt; ActiveRecord::Base\n  self.abstract_class = true\nend\nclass Child &lt; SuperClass\n  self.table_name = 'the_table_i_really_want'\nend\n</pre> <p><code>self.abstract_class = true</code> is required to make <code>Child&lt;.find,.create, or any Arel method&gt;</code> use <code>the_table_i_really_want</code> instead of a table called <code>super_classes</code></p> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-abstract_class-3F\"> <span class=\"method-name\">abstract_class?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns whether this class is an abstract class or not.</p> <div class=\"method-source-code\" id=\"abstract_class-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/inheritance.rb, line 130\ndef abstract_class?\n  defined?(@abstract_class) &amp;&amp; @abstract_class == true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-base_class\"> <span class=\"method-name\">base_class</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the class descending directly from <a href=\"../base\">ActiveRecord::Base</a>, or an abstract class, if any, in the inheritance hierarchy.</p> <p>If A extends AR::Base, A.base_class will return A. If B descends from A through some arbitrarily deep hierarchy, B.base_class will return A.</p> <p>If B &lt; A and C &lt; B and if A is an <a href=\"classmethods#attribute-i-abstract_class\">#abstract_class</a> then both B.base_class and C.base_class would return B as the answer since A is an abstract_class.</p> <div class=\"method-source-code\" id=\"base_class-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/inheritance.rb, line 100\ndef base_class\n  unless self &lt; Base\n    raise ActiveRecordError, \"#{name} doesn't belong in a hierarchy descending from ActiveRecord\"\n  end\n\n  if superclass == Base || superclass.abstract_class?\n    self\n  else\n    superclass.base_class\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-descends_from_active_record-3F\"> <span class=\"method-name\">descends_from_active_record?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if this does not need STI type condition. Returns <code>false</code> if STI type condition needs to be applied.</p> <div class=\"method-source-code\" id=\"descends_from_active_record-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/inheritance.rb, line 67\ndef descends_from_active_record?\n  if self == Base\n    false\n  elsif superclass.abstract_class?\n    superclass.descends_from_active_record?\n  else\n    superclass == Base || !columns_hash.include?(inheritance_column)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Determines if one of the attributes passed in is the inheritance column, and if the inheritance column is attr accessible, it initializes an instance of the given subclass instead of the base class.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/inheritance.rb, line 48\ndef new(*args, &amp;block)\n  if abstract_class? || self == Base\n    raise NotImplementedError, \"#{self} is an abstract class and cannot be instantiated.\"\n  end\n\n  attrs = args.first\n  if subclass_from_attributes?(attrs)\n    subclass = subclass_from_attributes(attrs)\n  end\n\n  if subclass\n    subclass.new(*args, &amp;block)\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sti_name\"> <span class=\"method-name\">sti_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"sti_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/inheritance.rb, line 134\ndef sti_name\n  store_full_sti_class ? name : name.demodulize\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-symbolized_base_class\"> <span class=\"method-name\">symbolized_base_class</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"symbolized_base_class-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/inheritance.rb, line 82\ndef symbolized_base_class\n  ActiveSupport::Deprecation.warn('`ActiveRecord::Base.symbolized_base_class` is deprecated and will be removed without replacement.')\n  @symbolized_base_class ||= base_class.to_s.to_sym\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-symbolized_sti_name\"> <span class=\"method-name\">symbolized_sti_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"symbolized_sti_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/inheritance.rb, line 87\ndef symbolized_sti_name\n  ActiveSupport::Deprecation.warn('`ActiveRecord::Base.symbolized_sti_name` is deprecated and will be removed without replacement.')\n  @symbolized_sti_name ||= sti_name.present? ? sti_name.to_sym : symbolized_base_class\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compute_type\"> <span class=\"method-name\">compute_type</span><span class=\"method-args\">(type_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the class type of the record using the current module as a prefix. So descendants of MyApp::Business::Account would appear as MyApp::Business::AccountSubclass.</p> <div class=\"method-source-code\" id=\"compute_type-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/inheritance.rb, line 142\ndef compute_type(type_name)\n  if type_name.match(/^::/)\n    # If the type is prefixed with a scope operator then we assume that\n    # the type_name is an absolute reference.\n    ActiveSupport::Dependencies.constantize(type_name)\n  else\n    # Build a list of candidates to search for\n    candidates = []\n    name.scan(/::|$/) { candidates.unshift \"#{$`}::#{type_name}\" }\n    candidates &lt;&lt; type_name\n\n    candidates.each do |candidate|\n      constant = ActiveSupport::Dependencies.safe_constantize(candidate)\n      return constant if candidate == constant.to_s\n    end\n\n    raise NameError.new(\"uninitialized constant #{candidates.first}\", candidates.first)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/integration":"<h1 id=\"module-ActiveRecord::Integration\" class=\"module\"> module ActiveRecord::Integration </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cache_key\"> <span class=\"method-name\">cache_key</span><span class=\"method-args\">(*timestamp_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a cache key that can be used to identify this record.</p> <pre class=\"ruby\">Product.new.cache_key     # =&gt; \"products/new\"\nProduct.find(5).cache_key # =&gt; \"products/5\" (updated_at not available)\nPerson.find(5).cache_key  # =&gt; \"people/5-20071224150000\" (updated_at available)\n</pre> <p>You can also pass a list of named timestamps, and the newest in the list will be used to generate the key:</p> <pre class=\"ruby\">Person.find(5).cache_key(:updated_at, :last_reviewed_at)\n</pre> <div class=\"method-source-code\" id=\"cache_key-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/integration.rb, line 55\ndef cache_key(*timestamp_names)\n  case\n  when new_record?\n    \"#{model_name.cache_key}/new\"\n  when timestamp_names.any?\n    timestamp = max_updated_column_timestamp(timestamp_names)\n    timestamp = timestamp.utc.to_s(cache_timestamp_format)\n    \"#{model_name.cache_key}/#{id}-#{timestamp}\"\n  when timestamp = max_updated_column_timestamp\n    timestamp = timestamp.utc.to_s(cache_timestamp_format)\n    \"#{model_name.cache_key}/#{id}-#{timestamp}\"\n  else\n    \"#{model_name.cache_key}/#{id}\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_param\"> <span class=\"method-name\">to_param</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../string\">String</a>, which Action Pack uses for constructing an URL to this object. The default implementation returns this record's id as a <a href=\"../string\">String</a>, or nil if this record's unsaved.</p> <p>For example, suppose that you have a User model, and that you have a <code>resources :users</code> route. Normally, <code>user_path</code> will construct a path with the user object's 'id' in it:</p> <pre class=\"ruby\">user = User.find_by(name: 'Phusion')\nuser_path(user)  # =&gt; \"/users/1\"\n</pre> <p>You can override <code>to_param</code> in your model to make <code>user_path</code> construct a path using the user's name instead of the user's id:</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  def to_param  # overridden\n    name\n  end\nend\n\nuser = User.find_by(name: 'Phusion')\nuser_path(user)  # =&gt; \"/users/Phusion\"\n</pre> <div class=\"method-source-code\" id=\"to_param-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/integration.rb, line 40\ndef to_param\n  # We can't use alias_method here, because method 'id' optimizes itself on the fly.\n  id &amp;&amp; id.to_s # Be sure to stringify the id for routes\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/integration/classmethods":"<h1 id=\"module-ActiveRecord::Integration::ClassMethods\" class=\"module\"> module ActiveRecord::Integration::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_param\"> <span class=\"method-name\">to_param</span><span class=\"method-args\">(method_name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines your model's <code>to_param</code> method to generate “pretty” URLs using <code>method_name</code>, which can be any attribute or method that responds to <code>to_s</code>.</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  to_param :name\nend\n\nuser = User.find_by(name: 'Fancy Pants')\nuser.id         # =&gt; 123\nuser_path(user) # =&gt; \"/users/123-fancy-pants\"\n</pre> <p>Values longer than 20 characters will be truncated. The value is truncated word by word.</p> <pre class=\"ruby\">user = User.find_by(name: 'David HeinemeierHansson')\nuser.id         # =&gt; 125\nuser_path(user) # =&gt; \"/users/125-david\"\n</pre> <p>Because the generated param begins with the record's <code>id</code>, it is suitable for passing to <code>find</code>. In a controller, for example:</p> <pre class=\"ruby\">params[:id]               # =&gt; \"123-fancy-pants\"\nUser.find(params[:id]).id # =&gt; 123\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"to_param-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/integration.rb, line 96\ndef to_param(method_name = nil)\n  if method_name.nil?\n    super()\n  else\n    define_method :to_param do\n      if (default = super()) &amp;&amp;\n           (result = send(method_name).to_s).present? &amp;&amp;\n             (param = result.squish.truncate(20, separator: /\\s/, omission: nil).parameterize).present?\n        \"#{default}-#{param}\"\n      else\n        default\n      end\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/invalidforeignkey":"<h1 id=\"class-ActiveRecord::InvalidForeignKey\" class=\"class\"> class ActiveRecord::InvalidForeignKey </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"wrappeddatabaseexception\">ActiveRecord::WrappedDatabaseException</a></dd>\n</dl> <section class=\"description\"> <p>Raised when a record cannot be inserted or updated because it references a non-existent record.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/irreversiblemigration":"<h1 id=\"class-ActiveRecord::IrreversibleMigration\" class=\"class\"> class ActiveRecord::IrreversibleMigration </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">ActiveRecord::MigrationError</dd>\n</dl> <section class=\"description\"> <p>Exception that can be raised to stop migrations from going backwards.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/locking/optimistic":"<h1 id=\"module-ActiveRecord::Locking::Optimistic\" class=\"module\"> module ActiveRecord::Locking::Optimistic </h1> <section class=\"description\"> <h2 id=\"module-ActiveRecord::Locking::Optimistic-label-What+is+Optimistic+Locking\">What is <a href=\"optimistic\">Optimistic</a> <a href=\"../locking\">Locking</a>\n</h2> <p><a href=\"optimistic\">Optimistic</a> locking allows multiple users to access the same record for edits, and assumes a minimum of conflicts with the data. It does this by checking whether another process has made changes to a record since it was opened, an <code>ActiveRecord::StaleObjectError</code> exception is thrown if that has occurred and the update is ignored.</p> <p>Check out <code>ActiveRecord::Locking::Pessimistic</code> for an alternative.</p> <h2 id=\"module-ActiveRecord::Locking::Optimistic-label-Usage\">Usage</h2> <p>Active Records support optimistic locking if the field <code>lock_version</code> is present. Each update to the record increments the <code>lock_version</code> column and the locking facilities ensure that records instantiated twice will let the last one saved raise a <code>StaleObjectError</code> if the first was also updated. Example:</p> <pre class=\"ruby\">p1 = Person.find(1)\np2 = Person.find(1)\n\np1.first_name = \"Michael\"\np1.save\n\np2.first_name = \"should fail\"\np2.save # Raises a ActiveRecord::StaleObjectError\n</pre> <p><a href=\"optimistic\">Optimistic</a> locking will also check for stale data when objects are destroyed. Example:</p> <pre class=\"ruby\">p1 = Person.find(1)\np2 = Person.find(1)\n\np1.first_name = \"Michael\"\np1.save\n\np2.destroy # Raises a ActiveRecord::StaleObjectError\n</pre> <p>You're then responsible for dealing with the conflict by rescuing the exception and either rolling back, merging, or otherwise apply the business logic needed to resolve the conflict.</p> <p>This locking mechanism will function inside a single Ruby process. To make it work across all web requests, the recommended approach is to add <code>lock_version</code> as a hidden field to your form.</p> <p>This behavior can be turned off by setting <code>ActiveRecord::Base.lock_optimistically = false</code>. To override the name of the <code>lock_version</code> column, set the <code>locking_column</code> class attribute:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  self.locking_column = :lock_person\nend\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/locking/optimistic/classmethods":"<h1 id=\"module-ActiveRecord::Locking::Optimistic::ClassMethods\" class=\"module\"> module ActiveRecord::Locking::Optimistic::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DEFAULT_LOCKING_COLUMN\">DEFAULT_LOCKING_COLUMN </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-locking_column\"> <span class=\"method-name\">locking_column</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The version column used for optimistic locking. Defaults to <code>lock_version</code>.</p> <div class=\"method-source-code\" id=\"locking_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/locking/optimistic.rb, line 156\ndef locking_column\n  reset_locking_column unless defined?(@locking_column)\n  @locking_column\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-locking_column-3D\"> <span class=\"method-name\">locking_column=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the column to use for optimistic locking. Defaults to <code>lock_version</code>.</p> <div class=\"method-source-code\" id=\"locking_column-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/locking/optimistic.rb, line 150\ndef locking_column=(value)\n  clear_caches_calculated_from_columns\n  @locking_column = value.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-locking_enabled-3F\"> <span class=\"method-name\">locking_enabled?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the <code>lock_optimistically</code> flag is set to true (which it is, by default) and the table includes the <code>locking_column</code> column (defaults to <code>lock_version</code>).</p> <div class=\"method-source-code\" id=\"locking_enabled-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/locking/optimistic.rb, line 145\ndef locking_enabled?\n  lock_optimistically &amp;&amp; columns_hash[locking_column]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset_locking_column\"> <span class=\"method-name\">reset_locking_column</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reset the column used for optimistic locking back to the <code>lock_version</code> default.</p> <div class=\"method-source-code\" id=\"reset_locking_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/locking/optimistic.rb, line 162\ndef reset_locking_column\n  self.locking_column = DEFAULT_LOCKING_COLUMN\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update_counters\"> <span class=\"method-name\">update_counters</span><span class=\"method-args\">(id, counters)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Make sure the lock version column gets updated when counters are updated.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"update_counters-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/locking/optimistic.rb, line 168\ndef update_counters(id, counters)\n  counters = counters.merge(locking_column =&gt; 1) if locking_enabled?\n  super\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/locking/pessimistic":"<h1 id=\"module-ActiveRecord::Locking::Pessimistic\" class=\"module\"> module ActiveRecord::Locking::Pessimistic </h1> <section class=\"description\"> <p><a href=\"pessimistic\">Locking::Pessimistic</a> provides support for row-level locking using SELECT … FOR UPDATE and other lock types.</p> <p>Chain <code>ActiveRecord::Base#find</code> to <code>ActiveRecord::QueryMethods#lock</code> to obtain an exclusive lock on the selected rows:</p> <pre class=\"ruby\"># select * from accounts where id=1 for update\nAccount.lock.find(1)\n</pre> <p>Call <code>lock('some locking clause')</code> to use a database-specific locking clause of your own such as 'LOCK IN SHARE MODE' or 'FOR UPDATE NOWAIT'. Example:</p> <pre class=\"ruby\">Account.transaction do\n  # select * from accounts where name = 'shugo' limit 1 for update\n  shugo = Account.where(\"name = 'shugo'\").lock(true).first\n  yuko = Account.where(\"name = 'yuko'\").lock(true).first\n  shugo.balance -= 100\n  shugo.save!\n  yuko.balance += 100\n  yuko.save!\nend\n</pre> <p>You can also use <code>ActiveRecord::Base#lock!</code> method to lock one record by id. This may be better if you don't need to lock every row. Example:</p> <pre>Account.transaction do\n  # select * from accounts where ...\n  accounts = Account.where(...)\n  account1 = accounts.detect { |account| ... }\n  account2 = accounts.detect { |account| ... }\n  # select * from accounts where id=? for update\n  account1.lock!\n  account2.lock!\n  account1.balance -= 100\n  account1.save!\n  account2.balance += 100\n  account2.save!\nend</pre> <p>You can start a transaction and acquire the lock in one go by calling <code>with_lock</code> with a block. The block is called from within a transaction, the object is already locked. Example:</p> <pre class=\"ruby\">account = Account.first\naccount.with_lock do\n  # This block is called within a transaction,\n  # account is already locked.\n  account.balance -= 100\n  account.save!\nend\n</pre> <p>Database-specific information on row locking:</p> <pre>MySQL: http://dev.mysql.com/doc/refman/5.1/en/innodb-locking-reads.html\nPostgreSQL: http://www.postgresql.org/docs/current/interactive/sql-select.html#SQL-FOR-UPDATE-SHARE</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-lock-21\"> <span class=\"method-name\">lock!</span><span class=\"method-args\">(lock = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Obtain a row lock on this record. Reloads the record to obtain the requested lock. Pass an SQL locking clause to append the end of the SELECT statement or pass true for “FOR UPDATE” (the default, an exclusive row lock). Returns the locked record.</p> <div class=\"method-source-code\" id=\"lock-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/locking/pessimistic.rb, line 61\ndef lock!(lock = true)\n  reload(:lock =&gt; lock) if persisted?\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_lock\"> <span class=\"method-name\">with_lock</span><span class=\"method-args\">(lock = true) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps the passed block in a transaction, locking the object before yielding. You can pass the SQL locking clause as argument (see <code>lock!</code>).</p> <div class=\"method-source-code\" id=\"with_lock-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/locking/pessimistic.rb, line 69\ndef with_lock(lock = true)\n  transaction do\n    lock!(lock)\n    yield\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/migration":"<h1 id=\"class-ActiveRecord::Migration\" class=\"class\"> class ActiveRecord::Migration </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActiveRecord::Migration-label-Active+Record+Migrations\">Active Record Migrations</h1> <p>Migrations can manage the evolution of a schema used by several physical databases. It's a solution to the common problem of adding a field to make a new feature work in your local database, but being unsure of how to push that change to other developers and to the production server. With migrations, you can describe the transformations in self-contained classes that can be checked into version control systems and executed against another database that might be one, two, or five versions behind.</p> <p>Example of a simple migration:</p> <pre class=\"ruby\">class AddSsl &lt; ActiveRecord::Migration\n  def up\n    add_column :accounts, :ssl_enabled, :boolean, default: true\n  end\n\n  def down\n    remove_column :accounts, :ssl_enabled\n  end\nend\n</pre> <p>This migration will add a boolean flag to the accounts table and remove it if you're backing out of the migration. It shows how all migrations have two methods <code>up</code> and <code>down</code> that describes the transformations required to implement or remove the migration. These methods can consist of both the migration specific methods like <code>add_column</code> and <code>remove_column</code>, but may also contain regular Ruby code for generating data needed for the transformations.</p> <p>Example of a more complex migration that also needs to initialize data:</p> <pre class=\"ruby\">class AddSystemSettings &lt; ActiveRecord::Migration\n  def up\n    create_table :system_settings do |t|\n      t.string  :name\n      t.string  :label\n      t.text    :value\n      t.string  :type\n      t.integer :position\n    end\n\n    SystemSetting.create  name:  'notice',\n                          label: 'Use notice?',\n                          value: 1\n  end\n\n  def down\n    drop_table :system_settings\n  end\nend\n</pre> <p>This migration first adds the <code>system_settings</code> table, then creates the very first row in it using the Active Record model that relies on the table. It also uses the more advanced <code>create_table</code> syntax where you can specify a complete table schema in one block call.</p> <h2 id=\"class-ActiveRecord::Migration-label-Available+transformations\">Available transformations</h2> <ul>\n<li> <p><code>create_table(name, options)</code>: Creates a table called <code>name</code> and makes the table object available to a block that can then add columns to it, following the same format as <code>add_column</code>. See example above. The options hash is for fragments like “DEFAULT CHARSET=UTF-8” that are appended to the create table definition.</p> </li>\n<li> <p><code>drop_table(name)</code>: Drops the table called <code>name</code>.</p> </li>\n<li> <p><code>change_table(name, options)</code>: Allows to make column alterations to the table called <code>name</code>. It makes the table object available to a block that can then add/remove columns, indexes or foreign keys to it.</p> </li>\n<li> <p><code>rename_table(old_name, new_name)</code>: Renames the table called <code>old_name</code> to <code>new_name</code>.</p> </li>\n<li> <p><code>add_column(table_name, column_name, type, options)</code>: Adds a new column to the table called <code>table_name</code> named <code>column_name</code> specified to be one of the following types: <code>:string</code>, <code>:text</code>, <code>:integer</code>, <code>:float</code>, <code>:decimal</code>, <code>:datetime</code>, <code>:timestamp</code>, <code>:time</code>, <code>:date</code>, <code>:binary</code>, <code>:boolean</code>. A default value can be specified by passing an <code>options</code> hash like <code>{ default: 11\n}</code>. Other options include <code>:limit</code> and <code>:null</code> (e.g. <code>{ limit: 50, null: false }</code>) – see <a href=\"connectionadapters/tabledefinition#method-i-column\">ActiveRecord::ConnectionAdapters::TableDefinition#column</a> for details.</p> </li>\n<li> <p><code>rename_column(table_name, column_name, new_column_name)</code>: Renames a column but keeps the type and content.</p> </li>\n<li> <p><code>change_column(table_name, column_name, type, options)</code>: Changes the column to a different type using the same parameters as add_column.</p> </li>\n<li> <p><code>remove_column(table_name, column_name, type, options)</code>: Removes the column named <code>column_name</code> from the table called <code>table_name</code>.</p> </li>\n<li> <p><code>add_index(table_name, column_names, options)</code>: Adds a new index with the name of the column. Other options include <code>:name</code>, <code>:unique</code> (e.g. <code>{ name: 'users_name_index',\nunique: true }</code>) and <code>:order</code> (e.g. <code>{ order: { name:\n:desc } }</code>).</p> </li>\n<li> <p><code>remove_index(table_name, column: column_name)</code>: Removes the index specified by <code>column_name</code>.</p> </li>\n<li> <p><code>remove_index(table_name, name: index_name)</code>: Removes the index specified by <code>index_name</code>.</p> </li>\n</ul> <h2 id=\"class-ActiveRecord::Migration-label-Irreversible+transformations\">Irreversible transformations</h2> <p>Some transformations are destructive in a manner that cannot be reversed. Migrations of that kind should raise an <code>ActiveRecord::IrreversibleMigration</code> exception in their <code>down</code> method.</p> <h2 id=\"class-ActiveRecord::Migration-label-Running+migrations+from+within+Rails\">Running migrations from within Rails</h2> <p>The Rails package has several tools to help create and apply migrations.</p> <p>To generate a new migration, you can use</p> <pre class=\"ruby\">rails generate migration MyNewMigration\n</pre> <p>where MyNewMigration is the name of your migration. The generator will create an empty migration file <code>timestamp_my_new_migration.rb</code> in the <code>db/migrate/</code> directory where <code>timestamp</code> is the UTC formatted date and time that the migration was generated.</p> <p>There is a special syntactic shortcut to generate migrations that add fields to a table.</p> <pre class=\"ruby\">rails generate migration add_fieldname_to_tablename fieldname:string\n</pre> <p>This will generate the file <code>timestamp_add_fieldname_to_tablename</code>, which will look like this:</p> <pre class=\"ruby\">class AddFieldnameToTablename &lt; ActiveRecord::Migration\n  def change\n    add_column :tablenames, :field, :string\n  end\nend\n</pre> <p>To run migrations against the currently configured database, use <code>rake\ndb:migrate</code>. This will update the database by running all of the pending migrations, creating the <code>schema_migrations</code> table (see “About the schema_migrations table” section below) if missing. It will also invoke the db:schema:dump task, which will update your db/schema.rb file to match the structure of your database.</p> <p>To roll the database back to a previous migration version, use <code>rake\ndb:migrate VERSION=X</code> where <code>X</code> is the version to which you wish to downgrade. Alternatively, you can also use the STEP option if you wish to rollback last few migrations. <code>rake db:migrate\nSTEP=2</code> will rollback the latest two migrations.</p> <p>If any of the migrations throw an <code>ActiveRecord::IrreversibleMigration</code> exception, that step will fail and you'll have some manual work to do.</p> <h2 id=\"class-ActiveRecord::Migration-label-Database+support\">Database support</h2> <p>Migrations are currently supported in MySQL, PostgreSQL, SQLite, SQL Server, and Oracle (all supported databases except DB2).</p> <h2 id=\"class-ActiveRecord::Migration-label-More+examples\">More examples</h2> <p>Not all migrations change the schema. Some just fix the data:</p> <pre class=\"ruby\">class RemoveEmptyTags &lt; ActiveRecord::Migration\n  def up\n    Tag.all.each { |tag| tag.destroy if tag.pages.empty? }\n  end\n\n  def down\n    # not much we can do to restore deleted data\n    raise ActiveRecord::IrreversibleMigration, \"Can't recover the deleted tags\"\n  end\nend\n</pre> <p>Others remove columns when they migrate up instead of down:</p> <pre class=\"ruby\">class RemoveUnnecessaryItemAttributes &lt; ActiveRecord::Migration\n  def up\n    remove_column :items, :incomplete_items_count\n    remove_column :items, :completed_items_count\n  end\n\n  def down\n    add_column :items, :incomplete_items_count\n    add_column :items, :completed_items_count\n  end\nend\n</pre> <p>And sometimes you need to do something in SQL not abstracted directly by migrations:</p> <pre class=\"ruby\">class MakeJoinUnique &lt; ActiveRecord::Migration\n  def up\n    execute \"ALTER TABLE `pages_linked_pages` ADD UNIQUE `page_id_linked_page_id` (`page_id`,`linked_page_id`)\"\n  end\n\n  def down\n    execute \"ALTER TABLE `pages_linked_pages` DROP INDEX `page_id_linked_page_id`\"\n  end\nend\n</pre> <h2 id=\"class-ActiveRecord::Migration-label-Using+a+model+after+changing+its+table\">Using a model after changing its table</h2> <p>Sometimes you'll want to add a column in a migration and populate it immediately after. In that case, you'll need to make a call to <code>Base#reset_column_information</code> in order to ensure that the model has the latest column data from after the new column was added. Example:</p> <pre class=\"ruby\">class AddPeopleSalary &lt; ActiveRecord::Migration\n  def up\n    add_column :people, :salary, :integer\n    Person.reset_column_information\n    Person.all.each do |p|\n      p.update_attribute :salary, SalaryCalculator.compute(p)\n    end\n  end\nend\n</pre> <h2 id=\"class-ActiveRecord::Migration-label-Controlling+verbosity\">Controlling verbosity</h2> <p>By default, migrations will describe the actions they are taking, writing them to the console as they happen, along with benchmarks describing how long each step took.</p> <p>You can quiet them down by setting ActiveRecord::Migration.verbose = false.</p> <p>You can also insert your own messages and benchmarks by using the <code>say_with_time</code> method:</p> <pre>def up\n  ...\n  say_with_time \"Updating salaries...\" do\n    Person.all.each do |p|\n      p.update_attribute :salary, SalaryCalculator.compute(p)\n    end\n  end\n  ...\nend</pre> <p>The phrase “Updating salaries…” would then be printed, along with the benchmark for the block when the block completes.</p> <h2 id=\"class-ActiveRecord::Migration-label-About+the+schema_migrations+table\">About the schema_migrations table</h2> <p>Rails versions 2.0 and prior used to create a table called <code>schema_info</code> when using migrations. This table contained the version of the schema as of the last applied migration.</p> <p>Starting with Rails 2.1, the <code>schema_info</code> table is (automatically) replaced by the <code>schema_migrations</code> table, which contains the version numbers of all the migrations applied.</p> <p>As a result, it is now possible to add migration files that are numbered lower than the current schema version: when migrating up, those never-applied “interleaved” migrations will be automatically applied, and when migrating down, never-applied “interleaved” migrations will be skipped.</p> <h2 id=\"class-ActiveRecord::Migration-label-Timestamped+Migrations\">Timestamped Migrations</h2> <p>By default, Rails generates migrations that look like:</p> <pre>20080717013526_your_migration_name.rb</pre> <p>The prefix is a generation timestamp (in UTC).</p> <p>If you'd prefer to use numeric prefixes, you can turn timestamped migrations off by setting:</p> <pre class=\"ruby\">config.active_record.timestamped_migrations = false\n</pre> <p>In application.rb.</p> <h2 id=\"class-ActiveRecord::Migration-label-Reversible+Migrations\">Reversible Migrations</h2> <p>Reversible migrations are migrations that know how to go <code>down</code> for you. You simply supply the <code>up</code> logic, and the <a href=\"migration\">Migration</a> system figures out how to execute the down commands for you.</p> <p>To define a reversible migration, define the <code>change</code> method in your migration like this:</p> <pre class=\"ruby\">class TenderloveMigration &lt; ActiveRecord::Migration\n  def change\n    create_table(:horses) do |t|\n      t.column :content, :text\n      t.column :remind_at, :datetime\n    end\n  end\nend\n</pre> <p>This migration will create the horses table for you on the way up, and automatically figure out how to drop the table on the way down.</p> <p>Some commands like <code>remove_column</code> cannot be reversed. If you care to define how to move up and down in these cases, you should define the <code>up</code> and <code>down</code> methods as before.</p> <p>If a command cannot be reversed, an <code>ActiveRecord::IrreversibleMigration</code> exception will be raised when the migration is moving down.</p> <p>For a list of commands that are reversible, please see <code>ActiveRecord::Migration::CommandRecorder</code>.</p> <h2 id=\"class-ActiveRecord::Migration-label-Transactional+Migrations\">Transactional Migrations</h2> <p>If the database adapter supports DDL transactions, all migrations will automatically be wrapped in a transaction. There are queries that you can't execute inside a transaction though, and for these situations you can turn the automatic transactions off.</p> <pre class=\"ruby\">class ChangeEnum &lt; ActiveRecord::Migration\n  disable_ddl_transaction!\n\n  def up\n    execute \"ALTER TYPE model_size ADD VALUE 'new_value'\"\n  end\nend\n</pre> <p>Remember that you can still open your own transactions, even if you are in a <a href=\"migration\">Migration</a> with <code>self.disable_ddl_transaction!</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-name\"> <span class=\"method-name\">name</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-version\"> <span class=\"method-name\">version</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-check_pending-21\"> <span class=\"method-name\">check_pending!</span><span class=\"method-args\">(connection = Base.connection)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"check_pending-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 391\ndef check_pending!(connection = Base.connection)\n  raise ActiveRecord::PendingMigrationError if ActiveRecord::Migrator.needs_migration?(connection)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-disable_ddl_transaction-21\"> <span class=\"method-name\">disable_ddl_transaction!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disable DDL transactions for this migration.</p> <div class=\"method-source-code\" id=\"disable_ddl_transaction-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 424\ndef disable_ddl_transaction!\n  @disable_ddl_transaction = true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-load_schema_if_pending-21\"> <span class=\"method-name\">load_schema_if_pending!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"load_schema_if_pending-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 395\ndef load_schema_if_pending!\n  if ActiveRecord::Migrator.needs_migration? || !ActiveRecord::Migrator.any_migrations?\n    # Roundrip to Rake to allow plugins to hook into database initialization.\n    FileUtils.cd Rails.root do\n      current_config = Base.connection_config\n      Base.clear_all_connections!\n      system(\"bin/rake db:test:prepare\")\n      # Establish a new connection, the old database may be gone (db:test:prepare uses purge)\n      Base.establish_connection(current_config)\n    end\n    check_pending!\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-migrate\"> <span class=\"method-name\">migrate</span><span class=\"method-args\">(direction)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"migrate-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 419\ndef migrate(direction)\n  new.migrate direction\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(name = self.class.name, version = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 436\ndef initialize(name = self.class.name, version = nil)\n  @name       = name\n  @version    = version\n  @connection = nil\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-announce\"> <span class=\"method-name\">announce</span><span class=\"method-args\">(message)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"announce-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 618\ndef announce(message)\n  text = \"#{version} #{name}: #{message}\"\n  length = [0, 75 - text.length].max\n  write \"== %s %s\" % [text, \"=\" * length]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-connection\"> <span class=\"method-name\">connection</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"connection-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 644\ndef connection\n  @connection || ActiveRecord::Base.connection\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-copy\"> <span class=\"method-name\">copy</span><span class=\"method-args\">(destination, sources, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"copy-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 665\ndef copy(destination, sources, options = {})\n  copied = []\n\n  FileUtils.mkdir_p(destination) unless File.exist?(destination)\n\n  destination_migrations = ActiveRecord::Migrator.migrations(destination)\n  last = destination_migrations.last\n  sources.each do |scope, path|\n    source_migrations = ActiveRecord::Migrator.migrations(path)\n\n    source_migrations.each do |migration|\n      source = File.binread(migration.filename)\n      inserted_comment = \"# This migration comes from #{scope} (originally #{migration.version})\\n\"\n      if /\\A#.*\\b(?:en)?coding:\\s*\\S+/ =~ source\n        # If we have a magic comment in the original migration,\n        # insert our comment after the first newline(end of the magic comment line)\n        # so the magic keep working.\n        # Note that magic comments must be at the first line(except sh-bang).\n        source[/\\n/] = \"\\n#{inserted_comment}\"\n      else\n        source = \"#{inserted_comment}#{source}\"\n      end\n\n      if duplicate = destination_migrations.detect { |m| m.name == migration.name }\n        if options[:on_skip] &amp;&amp; duplicate.scope != scope.to_s\n          options[:on_skip].call(scope, migration)\n        end\n        next\n      end\n\n      migration.version = next_migration_number(last ? last.version + 1 : 0).to_i\n      new_path = File.join(destination, \"#{migration.version}_#{migration.name.underscore}.#{scope}.rb\")\n      old_path, migration.filename = migration.filename, new_path\n      last = migration\n\n      File.binwrite(migration.filename, source)\n      copied &lt;&lt; migration\n      options[:on_copy].call(scope, migration, old_path) if options[:on_copy]\n      destination_migrations &lt;&lt; migration\n    end\n  end\n\n  copied\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-down\"> <span class=\"method-name\">down</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"down-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 571\ndef down\n  self.class.delegate = self\n  return unless self.class.respond_to?(:down)\n  self.class.down\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exec_migration\"> <span class=\"method-name\">exec_migration</span><span class=\"method-args\">(conn, direction)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exec_migration-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 599\ndef exec_migration(conn, direction)\n  @connection = conn\n  if respond_to?(:change)\n    if direction == :down\n      revert { change }\n    else\n      change\n    end\n  else\n    send(direction)\n  end\nensure\n  @connection = nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method_missing\"> <span class=\"method-name\">method_missing</span><span class=\"method-args\">(method, *arguments, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"method_missing-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 648\ndef method_missing(method, *arguments, &amp;block)\n  arg_list = arguments.map{ |a| a.inspect } * ', '\n\n  say_with_time \"#{method}(#{arg_list})\" do\n    unless @connection.respond_to? :revert\n      unless arguments.empty? || [:execute, :enable_extension, :disable_extension].include?(method)\n        arguments[0] = proper_table_name(arguments.first, table_name_options)\n        if [:rename_table, :add_foreign_key].include?(method)\n          arguments[1] = proper_table_name(arguments.second, table_name_options)\n        end\n      end\n    end\n    return super unless connection.respond_to?(method)\n    connection.send(method, *arguments, &amp;block)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-migrate\"> <span class=\"method-name\">migrate</span><span class=\"method-args\">(direction)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Execute this migration in the named direction</p> <div class=\"method-source-code\" id=\"migrate-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 578\ndef migrate(direction)\n  return unless respond_to?(direction)\n\n  case direction\n  when :up   then announce \"migrating\"\n  when :down then announce \"reverting\"\n  end\n\n  time   = nil\n  ActiveRecord::Base.connection_pool.with_connection do |conn|\n    time = Benchmark.measure do\n      exec_migration(conn, direction)\n    end\n  end\n\n  case direction\n  when :up   then announce \"migrated (%.4fs)\" % time.real; write\n  when :down then announce \"reverted (%.4fs)\" % time.real; write\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-next_migration_number\"> <span class=\"method-name\">next_migration_number</span><span class=\"method-args\">(number)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Determines the version number of the next migration.</p> <div class=\"method-source-code\" id=\"next_migration_number-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 722\ndef next_migration_number(number)\n  if ActiveRecord::Base.timestamped_migrations\n    [Time.now.utc.strftime(\"%Y%m%d%H%M%S\"), \"%.14d\" % number].max\n  else\n    SchemaMigration.normalize_migration_number(number)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-proper_table_name\"> <span class=\"method-name\">proper_table_name</span><span class=\"method-args\">(name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Finds the correct table name given an Active Record object. Uses the Active Record object's own table_name, or pre/suffix from the options passed in.</p> <div class=\"method-source-code\" id=\"proper_table_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 713\ndef proper_table_name(name, options = {})\n  if name.respond_to? :table_name\n    name.table_name\n  else\n    \"#{options[:table_name_prefix]}#{name}#{options[:table_name_suffix]}\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reversible\"> <span class=\"method-name\">reversible</span><span class=\"method-args\">() { |helper| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Used to specify an operation that can be run in one direction or another. Call the methods <code>up</code> and <code>down</code> of the yielded object to run a block only in one given direction. The whole block will be called in the right order within the migration.</p> <p>In the following example, the looping on users will always be done when the three columns 'first_name', 'last_name' and 'full_name' exist, even when migrating down:</p> <pre class=\"ruby\">class SplitNameMigration &lt; ActiveRecord::Migration\n  def change\n    add_column :users, :first_name, :string\n    add_column :users, :last_name, :string\n\n    reversible do |dir|\n      User.reset_column_information\n      User.all.each do |u|\n        dir.up   { u.first_name, u.last_name = u.full_name.split(' ') }\n        dir.down { u.full_name = \"#{u.first_name} #{u.last_name}\" }\n        u.save\n      end\n    end\n\n    revert { add_column :users, :full_name, :string }\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"reversible-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 542\ndef reversible\n  helper = ReversibleBlockHelper.new(reverting?)\n  execute_block{ yield helper }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-revert\"> <span class=\"method-name\">revert</span><span class=\"method-args\">(*migration_classes) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reverses the migration commands for the given block and the given migrations.</p> <p>The following migration will remove the table 'horses' and create the table 'apples' on the way up, and the reverse on the way down.</p> <pre class=\"ruby\">class FixTLMigration &lt; ActiveRecord::Migration\n  def change\n    revert do\n      create_table(:horses) do |t|\n        t.text :content\n        t.datetime :remind_at\n      end\n    end\n    create_table(:apples) do |t|\n      t.string :variety\n    end\n  end\nend\n</pre> <p>Or equivalently, if <code>TenderloveMigration</code> is defined as in the documentation for Migration:</p> <pre class=\"ruby\">require_relative '2012121212_tenderlove_migration'\n\nclass FixupTLMigration &lt; ActiveRecord::Migration\n  def change\n    revert TenderloveMigration\n\n    create_table(:apples) do |t|\n      t.string :variety\n    end\n  end\nend\n</pre> <p>This command can be nested.</p> <div class=\"method-source-code\" id=\"revert-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 483\ndef revert(*migration_classes)\n  run(*migration_classes.reverse, revert: true) unless migration_classes.empty?\n  if block_given?\n    if @connection.respond_to? :revert\n      @connection.revert { yield }\n    else\n      recorder = CommandRecorder.new(@connection)\n      @connection = recorder\n      suppress_messages do\n        @connection.revert { yield }\n      end\n      @connection = recorder.delegate\n      recorder.commands.each do |cmd, args, block|\n        send(cmd, *args, &amp;block)\n      end\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reverting-3F\"> <span class=\"method-name\">reverting?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"reverting-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 502\ndef reverting?\n  @connection.respond_to?(:reverting) &amp;&amp; @connection.reverting\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-run\"> <span class=\"method-name\">run</span><span class=\"method-args\">(*migration_classes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the given migration classes. Last argument can specify options:</p> <ul>\n<li> <p>:direction (default is :up)</p> </li>\n<li> <p>:revert (default is false)</p> </li>\n</ul> <div class=\"method-source-code\" id=\"run-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 551\ndef run(*migration_classes)\n  opts = migration_classes.extract_options!\n  dir = opts[:direction] || :up\n  dir = (dir == :down ? :up : :down) if opts[:revert]\n  if reverting?\n    # If in revert and going :up, say, we want to execute :down without reverting, so\n    revert { run(*migration_classes, direction: dir, revert: true) }\n  else\n    migration_classes.each do |migration_class|\n      migration_class.new.exec_migration(@connection, dir)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-say\"> <span class=\"method-name\">say</span><span class=\"method-args\">(message, subitem=false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"say-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 624\ndef say(message, subitem=false)\n  write \"#{subitem ? \"   -&gt;\" : \"--\"} #{message}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-say_with_time\"> <span class=\"method-name\">say_with_time</span><span class=\"method-args\">(message) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"say_with_time-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 628\ndef say_with_time(message)\n  say(message)\n  result = nil\n  time = Benchmark.measure { result = yield }\n  say \"%.4fs\" % time.real, :subitem\n  say(\"#{result} rows\", :subitem) if result.is_a?(Integer)\n  result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-suppress_messages\"> <span class=\"method-name\">suppress_messages</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"suppress_messages-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 637\ndef suppress_messages\n  save, self.verbose = verbose, false\n  yield\nensure\n  self.verbose = save\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_name_options\"> <span class=\"method-name\">table_name_options</span><span class=\"method-args\">(config = ActiveRecord::Base)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"table_name_options-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 730\ndef table_name_options(config = ActiveRecord::Base)\n  {\n    table_name_prefix: config.table_name_prefix,\n    table_name_suffix: config.table_name_suffix\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-up\"> <span class=\"method-name\">up</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"up-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 565\ndef up\n  self.class.delegate = self\n  return unless self.class.respond_to?(:up)\n  self.class.up\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write\"> <span class=\"method-name\">write</span><span class=\"method-args\">(text=\"\")</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"write-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 614\ndef write(text=\"\")\n  puts(text) if verbose\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/migration/checkpending":"<h1 id=\"class-ActiveRecord::Migration::CheckPending\" class=\"class\"> class ActiveRecord::Migration::CheckPending </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>This class is used to verify that all migrations have been run before loading a web page if config.active_record.migration_error is set to :page_load</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(app)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 364\ndef initialize(app)\n  @app = app\n  @last_check = 0\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 369\ndef call(env)\n  if connection.supports_migrations?\n    mtime = ActiveRecord::Migrator.last_migration.mtime.to_i\n    if @last_check &lt; mtime\n      ActiveRecord::Migration.check_pending!(connection)\n      @last_check = mtime\n    end\n  end\n  @app.call(env)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/migration/commandrecorder":"<h1 id=\"class-ActiveRecord::Migration::CommandRecorder\" class=\"class\"> class ActiveRecord::Migration::CommandRecorder </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"commandrecorder/straightreversions\">ActiveRecord::Migration::CommandRecorder::StraightReversions</a></dd>\n</dl> <section class=\"description\"> <p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done during a migration and knows how to reverse those commands. The <a href=\"commandrecorder\">CommandRecorder</a> knows how to invert the following commands:</p> <ul>\n<li> <p>add_column</p> </li>\n<li> <p>add_index</p> </li>\n<li> <p>add_timestamps</p> </li>\n<li> <p>create_table</p> </li>\n<li> <p>create_join_table</p> </li>\n<li> <p>remove_timestamps</p> </li>\n<li> <p>rename_column</p> </li>\n<li> <p>rename_index</p> </li>\n<li> <p>rename_table</p> </li>\n</ul> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-commands\"> <span class=\"method-name\">commands</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-delegate\"> <span class=\"method-name\">delegate</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-reverting\"> <span class=\"method-name\">reverting</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(delegate = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration/command_recorder.rb, line 21\ndef initialize(delegate = nil)\n  @commands = []\n  @delegate = delegate\n  @reverting = false\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inverse_of\"> <span class=\"method-name\">inverse_of</span><span class=\"method-args\">(command, args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the inverse of the given command. For example:</p> <pre class=\"ruby\">recorder.inverse_of(:rename_table, [:old, :new])\n# =&gt; [:rename_table, [:new, :old]]\n</pre> <p>This method will raise an <code>IrreversibleMigration</code> exception if it cannot invert the <code>command</code>.</p> <div class=\"method-source-code\" id=\"inverse_of-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration/command_recorder.rb, line 63\ndef inverse_of(command, args, &amp;block)\n  method = :\"invert_#{command}\"\n  raise IrreversibleMigration unless respond_to?(method, true)\n  send(method, args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-record\"> <span class=\"method-name\">record</span><span class=\"method-args\">(*command, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>record <code>command</code>. <code>command</code> should be a method name and arguments. For example:</p> <pre class=\"ruby\">recorder.record(:method_name, [:arg1, :arg2])\n</pre> <div class=\"method-source-code\" id=\"record-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration/command_recorder.rb, line 48\ndef record(*command, &amp;block)\n  if @reverting\n    @commands &lt;&lt; inverse_of(*command, &amp;block)\n  else\n    @commands &lt;&lt; (command &lt;&lt; block)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-revert\"> <span class=\"method-name\">revert</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>While executing the given block, the recorded will be in reverting mode. All commands recorded will end up being recorded reverted and in reverse order. For example:</p> <pre class=\"ruby\">recorder.revert{ recorder.record(:rename_table, [:old, :new]) }\n# same effect as recorder.record(:rename_table, [:new, :old])\n</pre> <div class=\"method-source-code\" id=\"revert-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration/command_recorder.rb, line 34\ndef revert\n  @reverting = !@reverting\n  previous = @commands\n  @commands = []\n  yield\nensure\n  @commands = previous.concat(@commands.reverse)\n  @reverting = !@reverting\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/migrationproxy":"<h1 id=\"class-ActiveRecord::MigrationProxy\" class=\"class\"> class ActiveRecord::MigrationProxy </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Struct.new(:name, :version, :filename, :scope)</dd>\n</dl> <section class=\"description\"> <p><a href=\"migrationproxy\">MigrationProxy</a> is used to defer loading of the actual migration classes until they are needed</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(name, version, filename, scope)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 751\ndef initialize(name, version, filename, scope)\n  super\n  @migration = nil\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-basename\"> <span class=\"method-name\">basename</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"basename-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 756\ndef basename\n  File.basename(filename)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mtime\"> <span class=\"method-name\">mtime</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"mtime-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/migration.rb, line 760\ndef mtime\n  File.mtime filename\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/modelschema/classmethods":"<h1 id=\"module-ActiveRecord::ModelSchema::ClassMethods\" class=\"module\"> module ActiveRecord::ModelSchema::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column_defaults\"> <span class=\"method-name\">column_defaults</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash where the keys are column names and the values are default values when instantiating the AR object for this table.</p> <div class=\"method-source-code\" id=\"column_defaults-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 249\ndef column_defaults\n  _default_attributes.to_hash\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column_names\"> <span class=\"method-name\">column_names</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of column names as strings.</p> <div class=\"method-source-code\" id=\"column_names-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 259\ndef column_names\n  @column_names ||= columns.map { |column| column.name }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content_columns\"> <span class=\"method-name\">content_columns</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of column objects where the primary id, all columns ending in “_id” or “_count”, and columns used for single table inheritance have been removed.</p> <div class=\"method-source-code\" id=\"content_columns-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 265\ndef content_columns\n  @content_columns ||= columns.reject { |c| c.name == primary_key || c.name =~ /(_id|_count)$/ || c.name == inheritance_column }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inheritance_column\"> <span class=\"method-name\">inheritance_column</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines the name of the table column which will store the class name on single-table inheritance situations.</p> <p>The default inheritance column name is <code>type</code>, which means it's a reserved word inside Active Record. To be able to use single-table inheritance with another column name, or to use the column <code>type</code> in your own model for something else, you can set <code>inheritance_column</code>:</p> <pre class=\"ruby\">self.inheritance_column = 'zoink'\n</pre> <div class=\"method-source-code\" id=\"inheritance_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 186\ndef inheritance_column\n  (@inheritance_column ||= nil) || superclass.inheritance_column\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inheritance_column-3D\"> <span class=\"method-name\">inheritance_column=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the value of <a href=\"classmethods#method-i-inheritance_column\">#inheritance_column</a></p> <div class=\"method-source-code\" id=\"inheritance_column-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 191\ndef inheritance_column=(value)\n  @inheritance_column = value.to_s\n  @explicit_inheritance_column = true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quoted_table_name\"> <span class=\"method-name\">quoted_table_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a quoted version of the table name, used to construct SQL statements.</p> <div class=\"method-source-code\" id=\"quoted_table_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 154\ndef quoted_table_name\n  @quoted_table_name ||= connection.quote_table_name(table_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset_column_information\"> <span class=\"method-name\">reset_column_information</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Resets all the cached information about columns, which will cause them to be reloaded on the next request.</p> <p>The most common usage pattern for this method is probably in a migration, when just after creating a table you want to populate it with some default values, eg:</p> <pre class=\"ruby\">class CreateJobLevels &lt; ActiveRecord::Migration\n  def up\n    create_table :job_levels do |t|\n      t.integer :id\n      t.string :name\n\n      t.timestamps\n    end\n\n    JobLevel.reset_column_information\n    %w{assistant executive manager director}.each do |type|\n      JobLevel.create(name: type)\n    end\n  end\n\n  def down\n    drop_table :job_levels\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"reset_column_information-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 295\ndef reset_column_information\n  connection.clear_cache!\n  undefine_attribute_methods\n  connection.schema_cache.clear_table_cache!(table_name) if table_exists?\n\n  @arel_engine        = nil\n  @column_names       = nil\n  @column_types       = nil\n  @content_columns    = nil\n  @default_attributes = nil\n  @inheritance_column = nil unless defined?(@explicit_inheritance_column) &amp;&amp; @explicit_inheritance_column\n  @relation           = nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sequence_name\"> <span class=\"method-name\">sequence_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"sequence_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 196\ndef sequence_name\n  if base_class == self\n    @sequence_name ||= reset_sequence_name\n  else\n    (@sequence_name ||= nil) || base_class.sequence_name\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sequence_name-3D\"> <span class=\"method-name\">sequence_name=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the name of the sequence to use when generating ids to the given value, or (if the value is nil or false) to the value returned by the given block. This is required for Oracle and is useful for any database which relies on sequences for primary key generation.</p> <p>If a sequence name is not explicitly set when using Oracle, it will default to the commonly used pattern of: #{table_name}_seq</p> <p>If a sequence name is not explicitly set when using PostgreSQL, it will discover the sequence corresponding to your primary key for you.</p> <pre class=\"ruby\">class Project &lt; ActiveRecord::Base\n  self.sequence_name = \"projectseq\"   # default would have been \"project_seq\"\nend\n</pre> <div class=\"method-source-code\" id=\"sequence_name-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 223\ndef sequence_name=(value)\n  @sequence_name          = value.to_s\n  @explicit_sequence_name = true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_exists-3F\"> <span class=\"method-name\">table_exists?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Indicates whether the table associated with this class exists</p> <div class=\"method-source-code\" id=\"table_exists-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 229\ndef table_exists?\n  connection.schema_cache.table_exists?(table_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_name\"> <span class=\"method-name\">table_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Guesses the table name (in forced lower-case) based on the name of the class in the inheritance hierarchy descending directly from <a href=\"../base\">ActiveRecord::Base</a>. So if the hierarchy looks like: Reply &lt; Message &lt; <a href=\"../base\">ActiveRecord::Base</a>, then Message is used to guess the table name even when called on Reply. The rules used to do the guess are handled by the Inflector class in Active Support, which knows almost all common English inflections. You can add new inflections in config/initializers/inflections.rb.</p> <p>Nested classes are given table names prefixed by the singular form of the parent's table name. Enclosing modules are not considered.</p> <h4 id=\"method-i-table_name-label-Examples\">Examples</h4> <pre>class Invoice &lt; ActiveRecord::Base\nend\n\nfile                  class               table_name\ninvoice.rb            Invoice             invoices\n\nclass Invoice &lt; ActiveRecord::Base\n  class Lineitem &lt; ActiveRecord::Base\n  end\nend\n\nfile                  class               table_name\ninvoice.rb            Invoice::Lineitem   invoice_lineitems\n\nmodule Invoice\n  class Lineitem &lt; ActiveRecord::Base\n  end\nend\n\nfile                  class               table_name\ninvoice/lineitem.rb   Invoice::Lineitem   lineitems</pre> <p>Additionally, the class-level <code>table_name_prefix</code> is prepended and the <code>table_name_suffix</code> is appended. So if you have “myapp_” as a prefix, the table name guess for an Invoice class becomes “myapp_invoices”. Invoice::Lineitem becomes “myapp_invoice_lineitems”.</p> <p>You can also set your own table name explicitly:</p> <pre class=\"ruby\">class Mouse &lt; ActiveRecord::Base\n  self.table_name = \"mice\"\nend\n</pre> <p>Alternatively, you can override the <a href=\"classmethods#method-i-table_name\">#table_name</a> method to define your own computation. (Possibly using <code>super</code> to manipulate the default table name.) Example:</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  def self.table_name\n    \"special_\" + super\n  end\nend\nPost.table_name # =&gt; \"special_posts\"\n</pre> <div class=\"method-source-code\" id=\"table_name-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 125\ndef table_name\n  reset_table_name unless defined?(@table_name)\n  @table_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_name-3D\"> <span class=\"method-name\">table_name=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the table name explicitly. Example:</p> <pre class=\"ruby\">class Project &lt; ActiveRecord::Base\n  self.table_name = \"project\"\nend\n</pre> <p>You can also just define your own <code>self.table_name</code> method; see the documentation for ActiveRecord::Base#table_name.</p> <div class=\"method-source-code\" id=\"table_name-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/model_schema.rb, line 138\ndef table_name=(value)\n  value = value &amp;&amp; value.to_s\n\n  if defined?(@table_name)\n    return if value == @table_name\n    reset_column_information if connected?\n  end\n\n  @table_name        = value\n  @quoted_table_name = nil\n  @arel_table        = nil\n  @sequence_name     = nil unless defined?(@explicit_sequence_name) &amp;&amp; @explicit_sequence_name\n  @relation          = Relation.create(self, arel_table)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/multiparameterassignmenterrors":"<h1 id=\"class-ActiveRecord::MultiparameterAssignmentErrors\" class=\"class\"> class ActiveRecord::MultiparameterAssignmentErrors </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when there are multiple errors while doing a mass assignment through the <code>attributes</code> method. The exception has an <code>errors</code> property that contains an array of <a href=\"attributeassignmenterror\">AttributeAssignmentError</a> objects, each corresponding to the error while assigning to an attribute.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-errors\"> <span class=\"method-name\">errors</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(errors)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/errors.rb, line 213\ndef initialize(errors)\n  @errors = errors\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/nestedattributes/classmethods":"<h1 id=\"module-ActiveRecord::NestedAttributes::ClassMethods\" class=\"module\"> module ActiveRecord::NestedAttributes::ClassMethods </h1> <section class=\"description\"> <h1 id=\"module-ActiveRecord::NestedAttributes::ClassMethods-label-Active+Record+Nested+Attributes\">Active Record Nested Attributes</h1> <p>Nested attributes allow you to save attributes on associated records through the parent. By default nested attribute updating is turned off and you can enable it using the <a href=\"classmethods#method-i-accepts_nested_attributes_for\">#accepts_nested_attributes_for</a> class method. When you enable nested attributes an attribute writer is defined on the model.</p> <p>The attribute writer is named after the association, which means that in the following example, two new methods are added to your model:</p> <p><code>author_attributes=(attributes)</code> and <code>pages_attributes=(attributes)</code>.</p> <pre class=\"ruby\">class Book &lt; ActiveRecord::Base\n  has_one :author\n  has_many :pages\n\n  accepts_nested_attributes_for :author, :pages\nend\n</pre> <p>Note that the <code>:autosave</code> option is automatically enabled on every association that <a href=\"classmethods#method-i-accepts_nested_attributes_for\">#accepts_nested_attributes_for</a> is used for.</p> <h3 id=\"module-ActiveRecord::NestedAttributes::ClassMethods-label-One-to-one\">One-to-one</h3> <p>Consider a Member model that has one Avatar:</p> <pre class=\"ruby\">class Member &lt; ActiveRecord::Base\n  has_one :avatar\n  accepts_nested_attributes_for :avatar\nend\n</pre> <p>Enabling nested attributes on a one-to-one association allows you to create the member and avatar in one go:</p> <pre class=\"ruby\">params = { member: { name: 'Jack', avatar_attributes: { icon: 'smiling' } } }\nmember = Member.create(params[:member])\nmember.avatar.id # =&gt; 2\nmember.avatar.icon # =&gt; 'smiling'\n</pre> <p>It also allows you to update the avatar through the member:</p> <pre class=\"ruby\">params = { member: { avatar_attributes: { id: '2', icon: 'sad' } } }\nmember.update params[:member]\nmember.avatar.icon # =&gt; 'sad'\n</pre> <p>By default you will only be able to set and update attributes on the associated model. If you want to destroy the associated model through the attributes hash, you have to enable it first using the <code>:allow_destroy</code> option.</p> <pre class=\"ruby\">class Member &lt; ActiveRecord::Base\n  has_one :avatar\n  accepts_nested_attributes_for :avatar, allow_destroy: true\nend\n</pre> <p>Now, when you add the <code>_destroy</code> key to the attributes hash, with a value that evaluates to <code>true</code>, you will destroy the associated model:</p> <pre class=\"ruby\">member.avatar_attributes = { id: '2', _destroy: '1' }\nmember.avatar.marked_for_destruction? # =&gt; true\nmember.save\nmember.reload.avatar # =&gt; nil\n</pre> <p>Note that the model will <em>not</em> be destroyed until the parent is saved.</p> <h3 id=\"module-ActiveRecord::NestedAttributes::ClassMethods-label-One-to-many\">One-to-many</h3> <p>Consider a member that has a number of posts:</p> <pre class=\"ruby\">class Member &lt; ActiveRecord::Base\n  has_many :posts\n  accepts_nested_attributes_for :posts\nend\n</pre> <p>You can now set or update attributes on the associated posts through an attribute hash for a member: include the key <code>:posts_attributes</code> with an array of hashes of post attributes as a value.</p> <p>For each hash that does <em>not</em> have an <code>id</code> key a new record will be instantiated, unless the hash also contains a <code>_destroy</code> key that evaluates to <code>true</code>.</p> <pre class=\"ruby\">params = { member: {\n  name: 'joe', posts_attributes: [\n    { title: 'Kari, the awesome Ruby documentation browser!' },\n    { title: 'The egalitarian assumption of the modern citizen' },\n    { title: '', _destroy: '1' } # this will be ignored\n  ]\n}}\n\nmember = Member.create(params[:member])\nmember.posts.length # =&gt; 2\nmember.posts.first.title # =&gt; 'Kari, the awesome Ruby documentation browser!'\nmember.posts.second.title # =&gt; 'The egalitarian assumption of the modern citizen'\n</pre> <p>You may also set a :reject_if proc to silently ignore any new record hashes if they fail to pass your criteria. For example, the previous example could be rewritten as:</p> <pre class=\"ruby\">class Member &lt; ActiveRecord::Base\n  has_many :posts\n  accepts_nested_attributes_for :posts, reject_if: proc { |attributes| attributes['title'].blank? }\nend\n\nparams = { member: {\n  name: 'joe', posts_attributes: [\n    { title: 'Kari, the awesome Ruby documentation browser!' },\n    { title: 'The egalitarian assumption of the modern citizen' },\n    { title: '' } # this will be ignored because of the :reject_if proc\n  ]\n}}\n\nmember = Member.create(params[:member])\nmember.posts.length # =&gt; 2\nmember.posts.first.title # =&gt; 'Kari, the awesome Ruby documentation browser!'\nmember.posts.second.title # =&gt; 'The egalitarian assumption of the modern citizen'\n</pre> <p>Alternatively, :reject_if also accepts a symbol for using methods:</p> <pre class=\"ruby\">class Member &lt; ActiveRecord::Base\n  has_many :posts\n  accepts_nested_attributes_for :posts, reject_if: :new_record?\nend\n\nclass Member &lt; ActiveRecord::Base\n  has_many :posts\n  accepts_nested_attributes_for :posts, reject_if: :reject_posts\n\n  def reject_posts(attributed)\n    attributed['title'].blank?\n  end\nend\n</pre> <p>If the hash contains an <code>id</code> key that matches an already associated record, the matching record will be modified:</p> <pre class=\"ruby\">member.attributes = {\n  name: 'Joe',\n  posts_attributes: [\n    { id: 1, title: '[UPDATED] An, as of yet, undisclosed awesome Ruby documentation browser!' },\n    { id: 2, title: '[UPDATED] other post' }\n  ]\n}\n\nmember.posts.first.title # =&gt; '[UPDATED] An, as of yet, undisclosed awesome Ruby documentation browser!'\nmember.posts.second.title # =&gt; '[UPDATED] other post'\n</pre> <p>By default the associated records are protected from being destroyed. If you want to destroy any of the associated records through the attributes hash, you have to enable it first using the <code>:allow_destroy</code> option. This will allow you to also use the <code>_destroy</code> key to destroy existing records:</p> <pre class=\"ruby\">class Member &lt; ActiveRecord::Base\n  has_many :posts\n  accepts_nested_attributes_for :posts, allow_destroy: true\nend\n\nparams = { member: {\n  posts_attributes: [{ id: '2', _destroy: '1' }]\n}}\n\nmember.attributes = params[:member]\nmember.posts.detect { |p| p.id == 2 }.marked_for_destruction? # =&gt; true\nmember.posts.length # =&gt; 2\nmember.save\nmember.reload.posts.length # =&gt; 1\n</pre> <p>Nested attributes for an associated collection can also be passed in the form of a hash of hashes instead of an array of hashes:</p> <pre class=\"ruby\">Member.create(name:             'joe',\n              posts_attributes: { first:  { title: 'Foo' },\n                                  second: { title: 'Bar' } })\n</pre> <p>has the same effect as</p> <pre class=\"ruby\">Member.create(name:             'joe',\n              posts_attributes: [ { title: 'Foo' },\n                                  { title: 'Bar' } ])\n</pre> <p>The keys of the hash which is the value for <code>:posts_attributes</code> are ignored in this case. However, it is not allowed to use +'id'+ or <code>:id</code> for one of such keys, otherwise the hash will be wrapped in an array and interpreted as an attribute hash for a single post.</p> <p>Passing attributes for an associated collection in the form of a hash of hashes can be used with hashes generated from HTTP/HTML parameters, where there maybe no natural way to submit an array of hashes.</p> <h3 id=\"module-ActiveRecord::NestedAttributes::ClassMethods-label-Saving\">Saving</h3> <p>All changes to models, including the destruction of those marked for destruction, are saved and destroyed automatically and atomically when the parent model is saved. This happens inside the transaction initiated by the parents save method. See <a href=\"../autosaveassociation\">ActiveRecord::AutosaveAssociation</a>.</p> <h3 id=\"module-ActiveRecord::NestedAttributes::ClassMethods-label-Validating+the+presence+of+a+parent+model\">Validating the presence of a parent model</h3> <p>If you want to validate that a child record is associated with a parent record, you can use <code>validates_presence_of</code> and <code>inverse_of</code> as this example illustrates:</p> <pre class=\"ruby\">class Member &lt; ActiveRecord::Base\n  has_many :posts, inverse_of: :member\n  accepts_nested_attributes_for :posts\nend\n\nclass Post &lt; ActiveRecord::Base\n  belongs_to :member, inverse_of: :posts\n  validates_presence_of :member\nend\n</pre> <p>Note that if you do not specify the <code>inverse_of</code> option, then Active Record will try to automatically guess the inverse association based on heuristics.</p> <p>For one-to-one nested associations, if you build the new (in-memory) child object yourself before assignment, then this module will not overwrite it, e.g.:</p> <pre class=\"ruby\">class Member &lt; ActiveRecord::Base\n  has_one :avatar\n  accepts_nested_attributes_for :avatar\n\n  def avatar\n    super || build_avatar(width: 200)\n  end\nend\n\nmember = Member.new\nmember.avatar_attributes = {icon: 'sad'}\nmember.avatar.width # =&gt; 200\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"REJECT_ALL_BLANK_PROC\">REJECT_ALL_BLANK_PROC </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-accepts_nested_attributes_for\"> <span class=\"method-name\">accepts_nested_attributes_for</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines an attributes writer for the specified association(s).</p> <p>Supported options:</p> <dl class=\"rdoc-list label-list\">\n<dt>:allow_destroy </dt>\n<dd> <p>If true, destroys any members from the attributes hash with a <code>_destroy</code> key and a value that evaluates to <code>true</code> (eg. 1, '1', true, or 'true'). This option is off by default.</p> </dd>\n<dt>:reject_if </dt>\n<dd> <p>Allows you to specify a Proc or a <a href=\"../../symbol\">Symbol</a> pointing to a method that checks whether a record should be built for a certain attribute hash. The hash is passed to the supplied Proc or the method and it should return either <code>true</code> or <code>false</code>. When no :reject_if is specified, a record will be built for all attribute hashes that do not have a <code>_destroy</code> value that evaluates to true. Passing <code>:all_blank</code> instead of a Proc will create a proc that will reject a record where all the attributes are blank excluding any value for _destroy.</p> </dd>\n<dt>:limit </dt>\n<dd> <p>Allows you to specify the maximum number of the associated records that can be processed with the nested attributes. Limit also can be specified as a Proc or a <a href=\"../../symbol\">Symbol</a> pointing to a method that should return number. If the size of the nested attributes array exceeds the specified limit, <a href=\"toomanyrecords\">NestedAttributes::TooManyRecords</a> exception is raised. If omitted, any number associations can be processed. Note that the :limit option is only applicable to one-to-many associations.</p> </dd>\n<dt>:update_only </dt>\n<dd> <p>For a one-to-one association, this option allows you to specify how nested attributes are to be used when an associated record already exists. In general, an existing record may either be updated with the new set of attribute values or be replaced by a wholly new record containing those values. By default the :update_only option is <code>false</code> and the nested attributes are used to update the existing record only if they include the record's <code>:id</code> value. Otherwise a new record will be instantiated and used to replace the existing one. However if the :update_only option is <code>true</code>, the nested attributes are used to update the record's attributes always, regardless of whether the <code>:id</code> is present. The option is ignored for collection associations.</p> </dd>\n</dl> <p>Examples:</p> <pre class=\"ruby\"># creates avatar_attributes=\naccepts_nested_attributes_for :avatar, reject_if: proc { |attributes| attributes['name'].blank? }\n# creates avatar_attributes=\naccepts_nested_attributes_for :avatar, reject_if: :all_blank\n# creates avatar_attributes= and posts_attributes=\naccepts_nested_attributes_for :avatar, :posts, allow_destroy: true\n</pre> <div class=\"method-source-code\" id=\"accepts_nested_attributes_for-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/nested_attributes.rb, line 301\ndef accepts_nested_attributes_for(*attr_names)\n  options = { :allow_destroy =&gt; false, :update_only =&gt; false }\n  options.update(attr_names.extract_options!)\n  options.assert_valid_keys(:allow_destroy, :reject_if, :limit, :update_only)\n  options[:reject_if] = REJECT_ALL_BLANK_PROC if options[:reject_if] == :all_blank\n\n  attr_names.each do |association_name|\n    if reflection = _reflect_on_association(association_name)\n      reflection.autosave = true\n      define_autosave_validation_callbacks(reflection)\n\n      nested_attributes_options = self.nested_attributes_options.dup\n      nested_attributes_options[association_name.to_sym] = options\n      self.nested_attributes_options = nested_attributes_options\n\n      type = (reflection.collection? ? :collection : :one_to_one)\n      generate_association_writer(association_name, type)\n    else\n      raise ArgumentError, \"No association found for name `#{association_name}'. Has it been defined yet?\"\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/nodatabaseerror":"<h1 id=\"class-ActiveRecord::NoDatabaseError\" class=\"class\"> class ActiveRecord::NoDatabaseError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"statementinvalid\">ActiveRecord::StatementInvalid</a></dd>\n</dl> <section class=\"description\"> <p>Raised when a given database does not exist.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/notouching/classmethods":"<h1 id=\"module-ActiveRecord::NoTouching::ClassMethods\" class=\"module\"> module ActiveRecord::NoTouching::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-no_touching\"> <span class=\"method-name\">no_touching</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Lets you selectively disable calls to `touch` for the duration of a block.</p> <h4 id=\"method-i-no_touching-label-Examples\">Examples</h4> <pre class=\"ruby\">ActiveRecord::Base.no_touching do\n  Project.first.touch  # does nothing\n  Message.first.touch  # does nothing\nend\n\nProject.no_touching do\n  Project.first.touch  # does nothing\n  Message.first.touch  # works, but does not touch the associated project\nend\n</pre> <div class=\"method-source-code\" id=\"no_touching-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/no_touching.rb, line 21\ndef no_touching(&amp;block)\n  NoTouching.apply_to(self, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/persistence":"<h1 id=\"module-ActiveRecord::Persistence\" class=\"module\"> module ActiveRecord::Persistence </h1> <section class=\"description\"> <h1 id=\"module-ActiveRecord::Persistence-label-Active+Record+Persistence\">Active Record <a href=\"persistence\">Persistence</a>\n</h1> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-becomes\"> <span class=\"method-name\">becomes</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an instance of the specified <code>klass</code> with the attributes of the current record. This is mostly useful in relation to single-table inheritance structures where you want a subclass to appear as the superclass. This can be used along with record identification in Action Pack to allow, say, <code>Client &lt; Company</code> to do something like render <code>partial: @client.becomes(Company)</code> to render that instance using the companies/company partial instead of clients/client.</p> <p>Note: The new instance will share a link to the same attributes as the original class. So any change to the attributes in either instance will affect the other.</p> <div class=\"method-source-code\" id=\"becomes-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 198\ndef becomes(klass)\n  became = klass.new\n  became.instance_variable_set(\"@attributes\", @attributes)\n  changed_attributes = @changed_attributes if defined?(@changed_attributes)\n  became.instance_variable_set(\"@changed_attributes\", changed_attributes || {})\n  became.instance_variable_set(\"@new_record\", new_record?)\n  became.instance_variable_set(\"@destroyed\", destroyed?)\n  became.instance_variable_set(\"@errors\", errors)\n  became\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-becomes-21\"> <span class=\"method-name\">becomes!</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wrapper around <code>becomes</code> that also changes the instance's sti column value. This is especially useful if you want to persist the changed class in your database.</p> <p>Note: The old instance's sti column value will be changed too, as both objects share the same set of attributes.</p> <div class=\"method-source-code\" id=\"becomes-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 215\ndef becomes!(klass)\n  became = becomes(klass)\n  sti_type = nil\n  if !klass.descends_from_active_record?\n    sti_type = klass.sti_name\n  end\n  became.public_send(\"#{klass.inheritance_column}=\", sti_type)\n  became\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decrement\"> <span class=\"method-name\">decrement</span><span class=\"method-args\">(attribute, by = 1)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Initializes <code>attribute</code> to zero if <code>nil</code> and subtracts the value passed as <code>by</code> (default is 1). The decrement is performed directly on the underlying attribute, no setter is invoked. Only makes sense for number-based attributes. Returns <code>self</code>.</p> <div class=\"method-source-code\" id=\"decrement-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 328\ndef decrement(attribute, by = 1)\n  self[attribute] ||= 0\n  self[attribute] -= by\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decrement-21\"> <span class=\"method-name\">decrement!</span><span class=\"method-args\">(attribute, by = 1)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wrapper around <code>decrement</code> that saves the record. This method differs from its non-bang version in that it passes through the attribute setter. Saving is not subjected to validation checks. Returns <code>true</code> if the record could be saved.</p> <div class=\"method-source-code\" id=\"decrement-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 338\ndef decrement!(attribute, by = 1)\n  decrement(attribute, by).update_attribute(attribute, self[attribute])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes the record in the database and freezes this instance to reflect that no changes should be made (since they can't be persisted). Returns the frozen instance.</p> <p>The row is simply removed with an SQL <code>DELETE</code> statement on the record's primary key, and no callbacks are executed.</p> <p>To enforce the object's <code>before_destroy</code> and <code>after_destroy</code> callbacks or any <code>:dependent</code> association options, use <code>#destroy</code>.</p> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 155\ndef delete\n  self.class.delete(id) if persisted?\n  @destroyed = true\n  freeze\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroy\"> <span class=\"method-name\">destroy</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes the record in the database and freezes this instance to reflect that no changes should be made (since they can't be persisted).</p> <p>There's a series of callbacks associated with <code>destroy</code>. If the <code>before_destroy</code> callback return <code>false</code> the action is cancelled and <code>destroy</code> returns <code>false</code>. See <a href=\"callbacks\">ActiveRecord::Callbacks</a> for further details.</p> <div class=\"method-source-code\" id=\"destroy-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 168\ndef destroy\n  raise ReadOnlyRecord, \"#{self.class} is marked as readonly\" if readonly?\n  destroy_associations\n  self.class.connection.add_transaction_record(self)\n  destroy_row if persisted?\n  @destroyed = true\n  freeze\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroy-21\"> <span class=\"method-name\">destroy!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes the record in the database and freezes this instance to reflect that no changes should be made (since they can't be persisted).</p> <p>There's a series of callbacks associated with <code>destroy!</code>. If the <code>before_destroy</code> callback return <code>false</code> the action is cancelled and <code>destroy!</code> raises <a href=\"recordnotdestroyed\">ActiveRecord::RecordNotDestroyed</a>. See <a href=\"callbacks\">ActiveRecord::Callbacks</a> for further details.</p> <div class=\"method-source-code\" id=\"destroy-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 184\ndef destroy!\n  destroy || raise(RecordNotDestroyed.new(\"Failed to destroy the record\", self))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroyed-3F\"> <span class=\"method-name\">destroyed?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this object has been destroyed, otherwise returns false.</p> <div class=\"method-source-code\" id=\"destroyed-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 91\ndef destroyed?\n  sync_with_transaction_state\n  @destroyed\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-increment\"> <span class=\"method-name\">increment</span><span class=\"method-args\">(attribute, by = 1)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the value passed as <code>by</code> (default is 1). The increment is performed directly on the underlying attribute, no setter is invoked. Only makes sense for number-based attributes. Returns <code>self</code>.</p> <div class=\"method-source-code\" id=\"increment-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 311\ndef increment(attribute, by = 1)\n  self[attribute] ||= 0\n  self[attribute] += by\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-increment-21\"> <span class=\"method-name\">increment!</span><span class=\"method-args\">(attribute, by = 1)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wrapper around <code>increment</code> that saves the record. This method differs from its non-bang version in that it passes through the attribute setter. Saving is not subjected to validation checks. Returns <code>true</code> if the record could be saved.</p> <div class=\"method-source-code\" id=\"increment-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 321\ndef increment!(attribute, by = 1)\n  increment(attribute, by).update_attribute(attribute, self[attribute])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-new_record-3F\"> <span class=\"method-name\">new_record?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this object hasn't been saved yet – that is, a record for the object doesn't exist in the database yet; otherwise, returns false.</p> <div class=\"method-source-code\" id=\"new_record-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 85\ndef new_record?\n  sync_with_transaction_state\n  @new_record\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-persisted-3F\"> <span class=\"method-name\">persisted?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the record is persisted, i.e. it's not a new record and it was not destroyed, otherwise returns false.</p> <div class=\"method-source-code\" id=\"persisted-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 98\ndef persisted?\n  !(new_record? || destroyed?)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reload\"> <span class=\"method-name\">reload</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reloads the record from the database.</p> <p>This method finds record by its primary key (which could be assigned manually) and modifies the receiver in-place:</p> <pre class=\"ruby\">account = Account.new\n# =&gt; #&lt;Account id: nil, email: nil&gt;\naccount.id = 1\naccount.reload\n# Account Load (1.2ms)  SELECT \"accounts\".* FROM \"accounts\" WHERE \"accounts\".\"id\" = $1 LIMIT 1  [[\"id\", 1]]\n# =&gt; #&lt;Account id: 1, email: 'account@example.com'&gt;\n</pre> <p>Attributes are reloaded from the database, and caches busted, in particular the associations cache and the <a href=\"querycache\">QueryCache</a>.</p> <p>If the record no longer exists in the database <code>ActiveRecord::RecordNotFound</code> is raised. Otherwise, in addition to the in-place modification the method returns <code>self</code> for convenience.</p> <p>The optional <code>:lock</code> flag option allows you to lock the reloaded record:</p> <pre class=\"ruby\">reload(lock: true) # reload with pessimistic locking\n</pre> <p>Reloading is commonly used in test suites to test something is actually written to the database, or when some action modifies the corresponding row in the database but not the object in memory:</p> <pre class=\"ruby\">assert account.deposit!(25)\nassert_equal 25, account.credit        # check it is updated in memory\nassert_equal 25, account.reload.credit # check it is also persisted\n</pre> <p>Another common use case is optimistic locking handling:</p> <pre class=\"ruby\">def with_optimistic_retry\n  begin\n    yield\n  rescue ActiveRecord::StaleObjectError\n    begin\n      # Reload lock_version in particular.\n      reload\n    rescue ActiveRecord::RecordNotFound\n      # If the record is gone there is nothing to do.\n    else\n      retry\n    end\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"reload-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 407\ndef reload(options = nil)\n  clear_aggregation_cache\n  clear_association_cache\n  self.class.connection.clear_query_cache\n\n  fresh_object =\n    if options &amp;&amp; options[:lock]\n      self.class.unscoped { self.class.lock(options[:lock]).find(id) }\n    else\n      self.class.unscoped { self.class.find(id) }\n    end\n\n  @attributes = fresh_object.instance_variable_get('@attributes')\n  @new_record = false\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-save\"> <span class=\"method-name\">save</span><span class=\"method-args\">(*)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Saves the model.</p> <p>If the model is new a record gets created in the database, otherwise the existing record gets updated.</p> <p>By default, save always run validations. If any of them fail the action is cancelled and <code>save</code> returns <code>false</code>. However, if you supply validate: false, validations are bypassed altogether. See <a href=\"validations\">ActiveRecord::Validations</a> for more information.</p> <p>There's a series of callbacks associated with <code>save</code>. If any of the <code>before_*</code> callbacks return <code>false</code> the action is cancelled and <code>save</code> returns <code>false</code>. See <a href=\"callbacks\">ActiveRecord::Callbacks</a> for further details.</p> <p>Attributes marked as readonly are silently ignored if the record is being updated.</p> <div class=\"method-source-code\" id=\"save-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 119\ndef save(*)\n  create_or_update\nrescue ActiveRecord::RecordInvalid\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-save-21\"> <span class=\"method-name\">save!</span><span class=\"method-args\">(*)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Saves the model.</p> <p>If the model is new a record gets created in the database, otherwise the existing record gets updated.</p> <p>With <code>save!</code> validations always run. If any of them fail <a href=\"recordinvalid\">ActiveRecord::RecordInvalid</a> gets raised. See <a href=\"validations\">ActiveRecord::Validations</a> for more information.</p> <p>There's a series of callbacks associated with <code>save!</code>. If any of the <code>before_*</code> callbacks return <code>false</code> the action is cancelled and <code>save!</code> raises <a href=\"recordnotsaved\">ActiveRecord::RecordNotSaved</a>. See <a href=\"callbacks\">ActiveRecord::Callbacks</a> for further details.</p> <p>Attributes marked as readonly are silently ignored if the record is being updated.</p> <div class=\"method-source-code\" id=\"save-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 141\ndef save!(*)\n  create_or_update || raise(RecordNotSaved.new(\"Failed to save the record\", self))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-toggle\"> <span class=\"method-name\">toggle</span><span class=\"method-args\">(attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Assigns to <code>attribute</code> the boolean opposite of <code>attribute?</code>. So if the predicate returns <code>true</code> the attribute will become <code>false</code>. This method toggles directly the underlying value without calling any setter. Returns <code>self</code>.</p> <div class=\"method-source-code\" id=\"toggle-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 346\ndef toggle(attribute)\n  self[attribute] = !send(\"#{attribute}?\")\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-toggle-21\"> <span class=\"method-name\">toggle!</span><span class=\"method-args\">(attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wrapper around <code>toggle</code> that saves the record. This method differs from its non-bang version in that it passes through the attribute setter. Saving is not subjected to validation checks. Returns <code>true</code> if the record could be saved.</p> <div class=\"method-source-code\" id=\"toggle-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 355\ndef toggle!(attribute)\n  toggle(attribute).update_attribute(attribute, self[attribute])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-touch\"> <span class=\"method-name\">touch</span><span class=\"method-args\">(*names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Saves the record with the updated_at/on attributes set to the current time. Please note that no validation is performed and only the <code>after_touch</code>, <code>after_commit</code> and <code>after_rollback</code> callbacks are executed.</p> <p>If attribute names are passed, they are updated along with updated_at/on attributes.</p> <pre class=\"ruby\">product.touch                         # updates updated_at/on\nproduct.touch(:designed_at)           # updates the designed_at attribute and updated_at/on\nproduct.touch(:started_at, :ended_at) # updates started_at, ended_at and updated_at/on attributes\n</pre> <p>If used along with <code>belongs_to</code> then <code>touch</code> will invoke <code>touch</code> method on associated object.</p> <pre class=\"ruby\">class Brake &lt; ActiveRecord::Base\n  belongs_to :car, touch: true\nend\n\nclass Car &lt; ActiveRecord::Base\n  belongs_to :corporation, touch: true\nend\n\n# triggers @brake.car.touch and @brake.car.corporation.touch\n@brake.touch\n</pre> <p>Note that <code>touch</code> must be used on a persisted object, or else an <a href=\"activerecorderror\">ActiveRecordError</a> will be thrown. For example:</p> <pre class=\"ruby\">ball = Ball.new\nball.touch(:updated_at)   # =&gt; raises ActiveRecordError\n</pre> <div class=\"method-source-code\" id=\"touch-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 455\ndef touch(*names)\n  raise ActiveRecordError, \"cannot touch on a new record object\" unless persisted?\n\n  attributes = timestamp_attributes_for_update_in_model\n  attributes.concat(names)\n\n  unless attributes.empty?\n    current_time = current_time_from_proper_timezone\n    changes = {}\n\n    attributes.each do |column|\n      column = column.to_s\n      changes[column] = write_attribute(column, current_time)\n    end\n\n    changes[self.class.locking_column] = increment_lock if locking_enabled?\n\n    clear_attribute_changes(changes.keys)\n    primary_key = self.class.primary_key\n    self.class.unscoped.where(primary_key =&gt; self[primary_key]).update_all(changes) == 1\n  else\n    true\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update\"> <span class=\"method-name\">update</span><span class=\"method-args\">(attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Updates the attributes of the model from the passed-in hash and saves the record, all wrapped in a transaction. If the object is invalid, the saving will fail and false will be returned.</p> <div class=\"method-source-code\" id=\"update-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 247\ndef update(attributes)\n  # The following transaction covers any possible database side-effects of the\n  # attributes assignment. For example, setting the IDs of a child collection.\n  with_transaction_returning_status do\n    assign_attributes(attributes)\n    save\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"persistence#method-i-update_attributes\">update_attributes</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update-21\"> <span class=\"method-name\">update!</span><span class=\"method-args\">(attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Updates its receiver just like <code>update</code> but calls <code>save!</code> instead of <code>save</code>, so an exception is raised if the record is invalid.</p> <div class=\"method-source-code\" id=\"update-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 260\ndef update!(attributes)\n  # The following transaction covers any possible database side-effects of the\n  # attributes assignment. For example, setting the IDs of a child collection.\n  with_transaction_returning_status do\n    assign_attributes(attributes)\n    save!\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"persistence#method-i-update_attributes-21\">update_attributes!</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update_attribute\"> <span class=\"method-name\">update_attribute</span><span class=\"method-args\">(name, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Updates a single attribute and saves the record. This is especially useful for boolean flags on existing records. Also note that</p> <ul>\n<li> <p>Validation is skipped.</p> </li>\n<li> <p><a href=\"callbacks\">Callbacks</a> are invoked.</p> </li>\n<li> <p>updated_at/updated_on column is updated if that column is available.</p> </li>\n<li> <p>Updates all the attributes that are dirty in this object.</p> </li>\n</ul> <p>This method raises an <code>ActiveRecord::ActiveRecordError</code> if the attribute is marked as readonly.</p> <p>See also <code>update_column</code>.</p> <div class=\"method-source-code\" id=\"update_attribute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 237\ndef update_attribute(name, value)\n  name = name.to_s\n  verify_readonly_attribute(name)\n  send(\"#{name}=\", value)\n  save(validate: false)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-update_attributes\"> <span class=\"method-name\">update_attributes</span><span class=\"method-args\">(attributes)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"persistence#method-i-update\">update</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-update_attributes-21\"> <span class=\"method-name\">update_attributes!</span><span class=\"method-args\">(attributes)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"persistence#method-i-update-21\">update!</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update_column\"> <span class=\"method-name\">update_column</span><span class=\"method-args\">(name, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equivalent to <code>update_columns(name =&gt; value)</code>.</p> <div class=\"method-source-code\" id=\"update_column-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 272\ndef update_column(name, value)\n  update_columns(name =&gt; value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update_columns\"> <span class=\"method-name\">update_columns</span><span class=\"method-args\">(attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Updates the attributes directly in the database issuing an UPDATE SQL statement and sets them in the receiver:</p> <pre class=\"ruby\">user.update_columns(last_request_at: Time.current)\n</pre> <p>This is the fastest way to update attributes because it goes straight to the database, but take into account that in consequence the regular update procedures are totally bypassed. In particular:</p> <ul>\n<li> <p><a href=\"validations\">Validations</a> are skipped.</p> </li>\n<li> <p><a href=\"callbacks\">Callbacks</a> are skipped.</p> </li>\n<li> <p><code>updated_at</code>/<code>updated_on</code> are not updated.</p> </li>\n</ul> <p>This method raises an <code>ActiveRecord::ActiveRecordError</code> when called on new objects, or when at least one of the attributes is marked as readonly.</p> <div class=\"method-source-code\" id=\"update_columns-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 291\ndef update_columns(attributes)\n  raise ActiveRecordError, \"cannot update a new record\" if new_record?\n  raise ActiveRecordError, \"cannot update a destroyed record\" if destroyed?\n\n  attributes.each_key do |key|\n    verify_readonly_attribute(key.to_s)\n  end\n\n  updated_count = self.class.unscoped.where(self.class.primary_key =&gt; id).update_all(attributes)\n\n  attributes.each do |k, v|\n    raw_write_attribute(k, v)\n  end\n\n  updated_count == 1\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/persistence/classmethods":"<h1 id=\"module-ActiveRecord::Persistence::ClassMethods\" class=\"module\"> module ActiveRecord::Persistence::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create\"> <span class=\"method-name\">create</span><span class=\"method-args\">(attributes = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates an object (or multiple objects) and saves it to the database, if validations pass. The resulting object is returned whether the object was saved successfully to the database or not.</p> <p>The <code>attributes</code> parameter can be either a <a href=\"../../hash\">Hash</a> or an <a href=\"../../array\">Array</a> of Hashes. These Hashes describe the attributes on the objects that are to be created.</p> <h4 id=\"method-i-create-label-Examples\">Examples</h4> <pre class=\"ruby\"># Create a single new object\nUser.create(first_name: 'Jamie')\n\n# Create an Array of new objects\nUser.create([{ first_name: 'Jamie' }, { first_name: 'Jeremy' }])\n\n# Create a single object and pass it into a block to set other attributes.\nUser.create(first_name: 'Jamie') do |u|\n  u.is_admin = false\nend\n\n# Creating an Array of new objects using a block, where the block is executed for each object:\nUser.create([{ first_name: 'Jamie' }, { first_name: 'Jeremy' }]) do |u|\n  u.is_admin = false\nend\n</pre> <div class=\"method-source-code\" id=\"create-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 29\ndef create(attributes = nil, &amp;block)\n  if attributes.is_a?(Array)\n    attributes.collect { |attr| create(attr, &amp;block) }\n  else\n    object = new(attributes, &amp;block)\n    object.save\n    object\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create-21\"> <span class=\"method-name\">create!</span><span class=\"method-args\">(attributes = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates an object (or multiple objects) and saves it to the database, if validations pass. Raises a <a href=\"../recordinvalid\">RecordInvalid</a> error if validations fail, unlike Base#create.</p> <p>The <code>attributes</code> parameter can be either a <a href=\"../../hash\">Hash</a> or an <a href=\"../../array\">Array</a> of Hashes. These describe which attributes to be created on the object, or multiple objects when given an <a href=\"../../array\">Array</a> of Hashes.</p> <div class=\"method-source-code\" id=\"create-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 46\ndef create!(attributes = nil, &amp;block)\n  if attributes.is_a?(Array)\n    attributes.collect { |attr| create!(attr, &amp;block) }\n  else\n    object = new(attributes, &amp;block)\n    object.save!\n    object\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-instantiate\"> <span class=\"method-name\">instantiate</span><span class=\"method-args\">(attributes, column_types = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Given an attributes hash, <code>instantiate</code> returns a new instance of the appropriate class. Accepts only keys as strings.</p> <p>For example, <code>Post.all</code> may return Comments, Messages, and Emails by storing the record's subclass in a <code>type</code> attribute. By calling <code>instantiate</code> instead of <code>new</code>, finder methods ensure they get new instances of the appropriate class for each record.</p> <p>See +ActiveRecord::Inheritance#discriminate_class_for_record+ to see how this “single-table” inheritance mapping is implemented.</p> <div class=\"method-source-code\" id=\"instantiate-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/persistence.rb, line 66\ndef instantiate(attributes, column_types = {})\n  klass = discriminate_class_for_record(attributes)\n  attributes = klass.attributes_builder.build_from_database(attributes, column_types)\n  klass.allocate.init_with('attributes' =&gt; attributes, 'new_record' =&gt; false)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/preparedstatementinvalid":"<h1 id=\"class-ActiveRecord::PreparedStatementInvalid\" class=\"class\"> class ActiveRecord::PreparedStatementInvalid </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when number of bind variables in statement given to <code>:condition</code> key (for example, when using <code>find</code> method) does not match number of expected values supplied.</p> <p>For example, when there are two placeholders with only one value supplied:</p> <pre class=\"ruby\">Location.where(\"lat = ? AND lng = ?\", 53.7362)\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/querycache/classmethods":"<h1 id=\"module-ActiveRecord::QueryCache::ClassMethods\" class=\"module\"> module ActiveRecord::QueryCache::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cache\"> <span class=\"method-name\">cache</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enable the query cache within the block if Active Record is configured. If it's not, it will execute the given block.</p> <div class=\"method-source-code\" id=\"cache-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/query_cache.rb, line 7\ndef cache(&amp;block)\n  if ActiveRecord::Base.connected?\n    connection.cache(&amp;block)\n  else\n    yield\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-uncached\"> <span class=\"method-name\">uncached</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Disable the query cache within the block if Active Record is configured. If it's not, it will execute the given block.</p> <div class=\"method-source-code\" id=\"uncached-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/query_cache.rb, line 17\ndef uncached(&amp;block)\n  if ActiveRecord::Base.connected?\n    connection.uncached(&amp;block)\n  else\n    yield\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/querymethods":"<h1 id=\"module-ActiveRecord::QueryMethods\" class=\"module\"> module ActiveRecord::QueryMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"VALID_UNSCOPING_VALUES\">VALID_UNSCOPING_VALUES </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_with\"> <span class=\"method-name\">create_with</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets attributes to be used when creating new records from a relation object.</p> <pre class=\"ruby\">users = User.where(name: 'Oscar')\nusers.new.name # =&gt; 'Oscar'\n\nusers = users.create_with(name: 'DHH')\nusers.new.name # =&gt; 'DHH'\n</pre> <p>You can pass <code>nil</code> to <code>create_with</code> to reset attributes:</p> <pre class=\"ruby\">users = users.create_with(nil)\nusers.new.name # =&gt; 'Oscar'\n</pre> <div class=\"method-source-code\" id=\"create_with-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 726\ndef create_with(value)\n  spawn.create_with!(value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-distinct\"> <span class=\"method-name\">distinct</span><span class=\"method-args\">(value = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies whether the records should be unique or not. For example:</p> <pre class=\"ruby\">User.select(:name)\n# =&gt; Might return two records with the same name\n\nUser.select(:name).distinct\n# =&gt; Returns 1 record per distinct name\n\nUser.select(:name).distinct.distinct(false)\n# =&gt; You can also remove the uniqueness\n</pre> <div class=\"method-source-code\" id=\"distinct-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 776\ndef distinct(value = true)\n  spawn.distinct!(value)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"querymethods#method-i-uniq\">uniq</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eager_load\"> <span class=\"method-name\">eager_load</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Forces eager loading by performing a LEFT OUTER JOIN on <code>args</code>:</p> <pre>User.eager_load(:posts)\n=&gt; SELECT \"users\".\"id\" AS t0_r0, \"users\".\"name\" AS t0_r1, ...\nFROM \"users\" LEFT OUTER JOIN \"posts\" ON \"posts\".\"user_id\" =\n\"users\".\"id\"</pre> <div class=\"method-source-code\" id=\"eager_load-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 163\ndef eager_load(*args)\n  check_if_method_has_arguments!(:eager_load, args)\n  spawn.eager_load!(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extending\"> <span class=\"method-name\">extending</span><span class=\"method-args\">(*modules, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Used to extend a scope with additional methods, either through a module or through a block provided.</p> <p>The object returned is a relation, which can be further extended.</p> <h3 id=\"method-i-extending-label-Using+a+module\">Using a module</h3> <pre class=\"ruby\">module Pagination\n  def page(number)\n    # pagination code goes here\n  end\nend\n\nscope = Model.all.extending(Pagination)\nscope.page(params[:page])\n</pre> <p>You can also pass a list of modules:</p> <pre class=\"ruby\">scope = Model.all.extending(Pagination, SomethingElse)\n</pre> <h3 id=\"method-i-extending-label-Using+a+block\">Using a block</h3> <pre class=\"ruby\">scope = Model.all.extending do\n  def page(number)\n    # pagination code goes here\n  end\nend\nscope.page(params[:page])\n</pre> <p>You can also use a block and a module list:</p> <pre class=\"ruby\">scope = Model.all.extending(Pagination) do\n  def per_page(number)\n    # pagination code goes here\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"extending-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 824\ndef extending(*modules, &amp;block)\n  if modules.any? || block\n    spawn.extending!(*modules, &amp;block)\n  else\n    self\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-from\"> <span class=\"method-name\">from</span><span class=\"method-args\">(value, subquery_name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies table from which the records will be fetched. For example:</p> <pre class=\"ruby\">Topic.select('title').from('posts')\n# =&gt; SELECT title FROM posts\n</pre> <p>Can accept other relation objects. For example:</p> <pre class=\"ruby\">Topic.select('title').from(Topic.approved)\n# =&gt; SELECT title FROM (SELECT * FROM topics WHERE approved = 't') subquery\n\nTopic.select('a.title').from(Topic.approved, :a)\n# =&gt; SELECT a.title FROM (SELECT * FROM topics WHERE approved = 't') a\n</pre> <div class=\"method-source-code\" id=\"from-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 754\ndef from(value, subquery_name = nil)\n  spawn.from!(value, subquery_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-group\"> <span class=\"method-name\">group</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows to specify a group attribute:</p> <pre>User.group(:name)\n=&gt; SELECT \"users\".* FROM \"users\" GROUP BY name</pre> <p>Returns an array with distinct records based on the <code>group</code> attribute:</p> <pre>User.select([:id, :name])\n=&gt; [#&lt;User id: 1, name: \"Oscar\"&gt;, #&lt;User id: 2, name: \"Oscar\"&gt;, #&lt;User id: 3, name: \"Foo\"&gt;\n\nUser.group(:name)\n=&gt; [#&lt;User id: 3, name: \"Foo\", ...&gt;, #&lt;User id: 2, name: \"Oscar\", ...&gt;]\n\nUser.group('name AS grouped_name, age')\n=&gt; [#&lt;User id: 3, name: \"Foo\", age: 21, ...&gt;, #&lt;User id: 2, name: \"Oscar\", age: 21, ...&gt;, #&lt;User id: 5, name: \"Foo\", age: 23, ...&gt;]</pre> <p>Passing in an array of attributes to group by is also supported.</p> <pre>User.select([:id, :first_name]).group(:id, :first_name).first(3)\n=&gt; [#&lt;User id: 1, first_name: \"Bill\"&gt;, #&lt;User id: 2, first_name: \"Earl\"&gt;, #&lt;User id: 3, first_name: \"Beto\"&gt;]</pre> <div class=\"method-source-code\" id=\"group-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 286\ndef group(*args)\n  check_if_method_has_arguments!(:group, args)\n  spawn.group!(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-having\"> <span class=\"method-name\">having</span><span class=\"method-args\">(opts, *rest)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows to specify a HAVING clause. Note that you can't use HAVING without also specifying a GROUP clause.</p> <pre class=\"ruby\">Order.having('SUM(price) &gt; 30').group('user_id')\n</pre> <div class=\"method-source-code\" id=\"having-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 604\ndef having(opts, *rest)\n  opts.blank? ? self : spawn.having!(opts, *rest)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-includes\"> <span class=\"method-name\">includes</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specify relationships to be included in the result set. For example:</p> <pre class=\"ruby\">users = User.includes(:address)\nusers.each do |user|\n  user.address.city\nend\n</pre> <p>allows you to access the <code>address</code> attribute of the <code>User</code> model without firing an additional query. This will often result in a performance improvement over a simple <code>join</code>.</p> <p>You can also specify multiple relationships, like this:</p> <pre class=\"ruby\">users = User.includes(:address, :friends)\n</pre> <p>Loading nested relationships is possible using a Hash:</p> <pre class=\"ruby\">users = User.includes(:address, friends: [:address, :followers])\n</pre> <h3 id=\"method-i-includes-label-conditions\">conditions</h3> <p>If you want to add conditions to your included models you'll have to explicitly reference them. For example:</p> <pre class=\"ruby\">User.includes(:posts).where('posts.name = ?', 'example')\n</pre> <p>Will throw an error, but this will work:</p> <pre class=\"ruby\">User.includes(:posts).where('posts.name = ?', 'example').references(:posts)\n</pre> <p>Note that <code>includes</code> works with association names while <code>references</code> needs the actual table name.</p> <div class=\"method-source-code\" id=\"includes-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 144\ndef includes(*args)\n  check_if_method_has_arguments!(:includes, args)\n  spawn.includes!(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-joins\"> <span class=\"method-name\">joins</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a joins on <code>args</code>:</p> <pre>User.joins(:posts)\n=&gt; SELECT \"users\".* FROM \"users\" INNER JOIN \"posts\" ON \"posts\".\"user_id\" = \"users\".\"id\"</pre> <p>You can use strings in order to customize your joins:</p> <pre>User.joins(\"LEFT JOIN bookmarks ON bookmarks.bookmarkable_type = 'Post' AND bookmarks.user_id = users.id\")\n=&gt; SELECT \"users\".* FROM \"users\" LEFT JOIN bookmarks ON bookmarks.bookmarkable_type = 'Post' AND bookmarks.user_id = users.id</pre> <div class=\"method-source-code\" id=\"joins-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 428\ndef joins(*args)\n  check_if_method_has_arguments!(:joins, args)\n  spawn.joins!(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-limit\"> <span class=\"method-name\">limit</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a limit for the number of records to retrieve.</p> <pre class=\"ruby\">User.limit(10) # generated SQL has 'LIMIT 10'\n\nUser.limit(10).limit(20) # generated SQL has 'LIMIT 20'\n</pre> <div class=\"method-source-code\" id=\"limit-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 620\ndef limit(value)\n  spawn.limit!(value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-lock\"> <span class=\"method-name\">lock</span><span class=\"method-args\">(locks = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies locking settings (default to <code>true</code>). For more information on locking, please see <code>ActiveRecord::Locking</code>.</p> <div class=\"method-source-code\" id=\"lock-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 647\ndef lock(locks = true)\n  spawn.lock!(locks)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-none\"> <span class=\"method-name\">none</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a chainable relation with zero records.</p> <p>The returned relation implements the Null <a href=\"../object\">Object</a> pattern. It is an object with defined null behavior and always returns an empty array of records without querying the database.</p> <p>Any subsequent condition chained to the returned relation will continue generating an empty relation and will not fire any query to the database.</p> <p>Used in cases where a method or scope could return zero records but the result needs to be chainable.</p> <p>For example:</p> <pre class=\"ruby\">@posts = current_user.visible_posts.where(name: params[:name])\n# =&gt; the visible_posts method is expected to return a chainable Relation\n\ndef visible_posts\n  case role\n  when 'Country Manager'\n    Post.where(country: country)\n  when 'Reviewer'\n    Post.published\n  when 'Bad User'\n    Post.none # It can't be chained if [] is returned.\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"none-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 690\ndef none\n  where(\"1=0\").extending!(NullRelation)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-offset\"> <span class=\"method-name\">offset</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies the number of rows to skip before returning rows.</p> <pre class=\"ruby\">User.offset(10) # generated SQL has \"OFFSET 10\"\n</pre> <p>Should be used with order.</p> <pre class=\"ruby\">User.offset(10).order(\"name ASC\")\n</pre> <div class=\"method-source-code\" id=\"offset-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 636\ndef offset(value)\n  spawn.offset!(value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-order\"> <span class=\"method-name\">order</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows to specify an order attribute:</p> <pre>User.order(:name)\n=&gt; SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"name\" ASC\n\nUser.order(email: :desc)\n=&gt; SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"email\" DESC\n\nUser.order(:name, email: :desc)\n=&gt; SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"name\" ASC, \"users\".\"email\" DESC\n\nUser.order('name')\n=&gt; SELECT \"users\".* FROM \"users\" ORDER BY name\n\nUser.order('name DESC')\n=&gt; SELECT \"users\".* FROM \"users\" ORDER BY name DESC\n\nUser.order('name DESC, email')\n=&gt; SELECT \"users\".* FROM \"users\" ORDER BY name DESC, email</pre> <div class=\"method-source-code\" id=\"order-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 317\ndef order(*args)\n  check_if_method_has_arguments!(:order, args)\n  spawn.order!(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-preload\"> <span class=\"method-name\">preload</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows preloading of <code>args</code>, in the same way that <code>includes</code> does:</p> <pre>User.preload(:posts)\n=&gt; SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"user_id\" IN (1, 2, 3)</pre> <div class=\"method-source-code\" id=\"preload-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 177\ndef preload(*args)\n  check_if_method_has_arguments!(:preload, args)\n  spawn.preload!(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-readonly\"> <span class=\"method-name\">readonly</span><span class=\"method-args\">(value = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets readonly attributes for the returned relation. If value is true (default), attempting to update a record will result in an error.</p> <pre>users = User.readonly\nusers.first.save\n=&gt; ActiveRecord::ReadOnlyRecord: ActiveRecord::ReadOnlyRecord</pre> <div class=\"method-source-code\" id=\"readonly-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 704\ndef readonly(value = true)\n  spawn.readonly!(value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-references\"> <span class=\"method-name\">references</span><span class=\"method-args\">(*table_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Use to indicate that the given <code>table_names</code> are referenced by an SQL string, and should therefore be JOINed in any query rather than loaded separately. This method only works in conjunction with <code>includes</code>. See <a href=\"querymethods#method-i-includes\">includes</a> for more details.</p> <pre class=\"ruby\">User.includes(:posts).where(\"posts.name = 'foo'\")\n# =&gt; Doesn't JOIN the posts table, resulting in an error.\n\nUser.includes(:posts).where(\"posts.name = 'foo'\").references(:posts)\n# =&gt; Query now knows the string references posts, so adds a JOIN\n</pre> <div class=\"method-source-code\" id=\"references-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 197\ndef references(*table_names)\n  check_if_method_has_arguments!(:references, table_names)\n  spawn.references!(*table_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reorder\"> <span class=\"method-name\">reorder</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces any existing order defined on the relation with the specified order.</p> <pre class=\"ruby\">User.order('email DESC').reorder('id ASC') # generated SQL has 'ORDER BY id ASC'\n</pre> <p>Subsequent calls to order on the same relation will be appended. For example:</p> <pre class=\"ruby\">User.order('email DESC').reorder('id ASC').order('name ASC')\n</pre> <p>generates a query with 'ORDER BY id ASC, name ASC'.</p> <div class=\"method-source-code\" id=\"reorder-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 338\ndef reorder(*args)\n  check_if_method_has_arguments!(:reorder, args)\n  spawn.reorder!(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reverse_order\"> <span class=\"method-name\">reverse_order</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reverse the existing order clause on the relation.</p> <pre class=\"ruby\">User.order('name ASC').reverse_order # generated SQL has 'ORDER BY name DESC'\n</pre> <div class=\"method-source-code\" id=\"reverse_order-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 845\ndef reverse_order\n  spawn.reverse_order!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rewhere\"> <span class=\"method-name\">rewhere</span><span class=\"method-args\">(conditions)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to change a previously set where condition for a given attribute, instead of appending to that condition.</p> <pre class=\"ruby\">Post.where(trashed: true).where(trashed: false)                       # =&gt; WHERE `trashed` = 1 AND `trashed` = 0\nPost.where(trashed: true).rewhere(trashed: false)                     # =&gt; WHERE `trashed` = 0\nPost.where(active: true).where(trashed: true).rewhere(trashed: false) # =&gt; WHERE `active` = 1 AND `trashed` = 0\n</pre> <p>This is short-hand for unscope(where: conditions.keys).where(conditions). Note that unlike reorder, we're only unscoping the named conditions – not the entire where statement.</p> <div class=\"method-source-code\" id=\"rewhere-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 596\ndef rewhere(conditions)\n  unscope(where: conditions.keys).where(conditions)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select\"> <span class=\"method-name\">select</span><span class=\"method-args\">(*fields) { |*block_args| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Works in two unique ways.</p> <p>First: takes a block so it can be used just like Array#select.</p> <pre class=\"ruby\">Model.all.select { |m| m.field == value }\n</pre> <p>This will build an array of objects from the database for the scope, converting them into an array and iterating through them using Array#select.</p> <p>Second: Modifies the SELECT statement for the query so that only certain fields are retrieved:</p> <pre class=\"ruby\">Model.select(:field)\n# =&gt; [#&lt;Model id: nil, field: \"value\"&gt;]\n</pre> <p>Although in the above example it looks as though this method returns an array, it actually returns a relation object and can have other query methods appended to it, such as the other methods in <a href=\"querymethods\">ActiveRecord::QueryMethods</a>.</p> <p>The argument to the method can also be an array of fields.</p> <pre class=\"ruby\">Model.select(:field, :other_field, :and_one_more)\n# =&gt; [#&lt;Model id: nil, field: \"value\", other_field: \"value\", and_one_more: \"value\"&gt;]\n</pre> <p>You can also use one or more strings, which will be used unchanged as SELECT fields.</p> <pre class=\"ruby\">Model.select('field AS field_one', 'other_field AS field_two')\n# =&gt; [#&lt;Model id: nil, field: \"value\", other_field: \"value\"&gt;]\n</pre> <p>If an alias was specified, it will be accessible from the resulting objects:</p> <pre class=\"ruby\">Model.select('field AS field_one').first.field_one\n# =&gt; \"value\"\n</pre> <p>Accessing attributes of an object that do not have fields retrieved by a select except <code>id</code> will throw <code>ActiveModel::MissingAttributeError</code>:</p> <pre class=\"ruby\">Model.select(:field).first.other_field\n# =&gt; ActiveModel::MissingAttributeError: missing attribute: other_field\n</pre> <div class=\"method-source-code\" id=\"select-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 249\ndef select(*fields)\n  if block_given?\n    to_a.select { |*block_args| yield(*block_args) }\n  else\n    raise ArgumentError, 'Call this with at least one field' if fields.empty?\n    spawn._select!(*fields)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-uniq\"> <span class=\"method-name\">uniq</span><span class=\"method-args\">(value = true)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"querymethods#method-i-distinct\">distinct</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unscope\"> <span class=\"method-name\">unscope</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes an unwanted relation that is already defined on a chain of relations. This is useful when passing around chains of relations and would like to modify the relations without reconstructing the entire chain.</p> <pre class=\"ruby\">User.order('email DESC').unscope(:order) == User.all\n</pre> <p>The method arguments are symbols which correspond to the names of the methods which should be unscoped. The valid arguments are given in <a href=\"querymethods#VALID_UNSCOPING_VALUES\">VALID_UNSCOPING_VALUES</a>. The method can also be called with multiple arguments. For example:</p> <pre class=\"ruby\">User.order('email DESC').select('id').where(name: \"John\")\n    .unscope(:order, :select, :where) == User.all\n</pre> <p>One can additionally pass a hash as an argument to unscope specific :where values. This is done by passing a hash with a single key-value pair. The key should be :where and the value should be the where value to unscope. For example:</p> <pre>User.where(name: \"John\", active: true).unscope(where: :name)\n    == User.where(active: true)</pre> <p>This method is similar to <code>except</code>, but unlike <code>except</code>, it persists across merges:</p> <pre>User.order('email').merge(User.except(:order))\n    == User.order('email')\n\nUser.order('email').merge(User.unscope(:order))\n    == User.all</pre> <p>This means it can be used in association definitions:</p> <pre class=\"ruby\">has_many :comments, -&gt; { unscope where: :trashed }\n</pre> <div class=\"method-source-code\" id=\"unscope-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 388\ndef unscope(*args)\n  check_if_method_has_arguments!(:unscope, args)\n  spawn.unscope!(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-where\"> <span class=\"method-name\">where</span><span class=\"method-args\">(opts = :chain, *rest)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new relation, which is the result of filtering the current relation according to the conditions in the arguments.</p> <p><a href=\"querymethods#method-i-where\">where</a> accepts conditions in one of several formats. In the examples below, the resulting SQL is given as an illustration; the actual query generated may be different depending on the database adapter.</p> <h3 id=\"method-i-where-label-string\">string</h3> <p>A single string, without additional arguments, is passed to the query constructor as an SQL fragment, and used in the where clause of the query.</p> <pre class=\"ruby\">Client.where(\"orders_count = '2'\")\n# SELECT * from clients where orders_count = '2';\n</pre> <p>Note that building your own string from user input may expose your application to injection attacks if not done properly. As an alternative, it is recommended to use one of the following methods.</p> <h3 id=\"method-i-where-label-array\">array</h3> <p>If an array is passed, then the first element of the array is treated as a template, and the remaining elements are inserted into the template to generate the condition. Active Record takes care of building the query to avoid injection attacks, and will convert from the ruby type to the database type where needed. Elements are inserted into the string in the order in which they appear.</p> <pre class=\"ruby\">User.where([\"name = ? and email = ?\", \"Joe\", \"joe@example.com\"])\n# SELECT * FROM users WHERE name = 'Joe' AND email = 'joe@example.com';\n</pre> <p>Alternatively, you can use named placeholders in the template, and pass a hash as the second element of the array. The names in the template are replaced with the corresponding values from the hash.</p> <pre class=\"ruby\">User.where([\"name = :name and email = :email\", { name: \"Joe\", email: \"joe@example.com\" }])\n# SELECT * FROM users WHERE name = 'Joe' AND email = 'joe@example.com';\n</pre> <p>This can make for more readable code in complex queries.</p> <p>Lastly, you can use sprintf-style % escapes in the template. This works slightly differently than the previous methods; you are responsible for ensuring that the values in the template are properly quoted. The values are passed to the connector for quoting, but the caller is responsible for ensuring they are enclosed in quotes in the resulting SQL. After quoting, the values are inserted using the same escapes as the Ruby core method <code>Kernel::sprintf</code>.</p> <pre class=\"ruby\">User.where([\"name = '%s' and email = '%s'\", \"Joe\", \"joe@example.com\"])\n# SELECT * FROM users WHERE name = 'Joe' AND email = 'joe@example.com';\n</pre> <p>If <a href=\"querymethods#method-i-where\">where</a> is called with multiple arguments, these are treated as if they were passed as the elements of a single array.</p> <pre class=\"ruby\">User.where(\"name = :name and email = :email\", { name: \"Joe\", email: \"joe@example.com\" })\n# SELECT * FROM users WHERE name = 'Joe' AND email = 'joe@example.com';\n</pre> <p>When using strings to specify conditions, you can use any operator available from the database. While this provides the most flexibility, you can also unintentionally introduce dependencies on the underlying database. If your code is intended for general consumption, test with multiple database backends.</p> <h3 id=\"method-i-where-label-hash\">hash</h3> <p><a href=\"querymethods#method-i-where\">where</a> will also accept a hash condition, in which the keys are fields and the values are values to be searched for.</p> <p>Fields can be symbols or strings. Values can be single values, arrays, or ranges.</p> <pre class=\"ruby\">User.where({ name: \"Joe\", email: \"joe@example.com\" })\n# SELECT * FROM users WHERE name = 'Joe' AND email = 'joe@example.com'\n\nUser.where({ name: [\"Alice\", \"Bob\"]})\n# SELECT * FROM users WHERE name IN ('Alice', 'Bob')\n\nUser.where({ created_at: (Time.now.midnight - 1.day)..Time.now.midnight })\n# SELECT * FROM users WHERE (created_at BETWEEN '2012-06-09 07:00:00.000000' AND '2012-06-10 07:00:00.000000')\n</pre> <p>In the case of a belongs_to relationship, an association key can be used to specify the model if an <a href=\"../activerecord\">ActiveRecord</a> object is used as the value.</p> <pre class=\"ruby\">author = Author.find(1)\n\n# The following queries will be equivalent:\nPost.where(author: author)\nPost.where(author_id: author)\n</pre> <p>This also works with polymorphic belongs_to relationships:</p> <pre class=\"ruby\">treasure = Treasure.create(name: 'gold coins')\ntreasure.price_estimates &lt;&lt; PriceEstimate.create(price: 125)\n\n# The following queries will be equivalent:\nPriceEstimate.where(estimate_of: treasure)\nPriceEstimate.where(estimate_of_type: 'Treasure', estimate_of_id: treasure)\n</pre> <h3 id=\"method-i-where-label-Joins\">Joins</h3> <p>If the relation is the result of a join, you may create a condition which uses any of the tables in the join. For string and array conditions, use the table name in the condition.</p> <pre class=\"ruby\">User.joins(:posts).where(\"posts.created_at &lt; ?\", Time.now)\n</pre> <p>For hash conditions, you can either use the table name in the key, or use a sub-hash.</p> <pre class=\"ruby\">User.joins(:posts).where({ \"posts.published\" =&gt; true })\nUser.joins(:posts).where({ posts: { published: true } })\n</pre> <h3 id=\"method-i-where-label-no+argument\">no argument</h3> <p>If no argument is passed, <a href=\"querymethods#method-i-where\">where</a> returns a new instance of <a href=\"querymethods/wherechain\">WhereChain</a>, that can be chained with not to return a new relation that negates the where clause.</p> <pre class=\"ruby\">User.where.not(name: \"Jon\")\n# SELECT * FROM users WHERE name != 'Jon'\n</pre> <p>See <a href=\"querymethods/wherechain\">WhereChain</a> for more details on not.</p> <h3 id=\"method-i-where-label-blank+condition\">blank condition</h3> <p>If the condition is any blank-ish object, then <a href=\"querymethods#method-i-where\">where</a> is a no-op and returns the current relation.</p> <div class=\"method-source-code\" id=\"where-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 568\ndef where(opts = :chain, *rest)\n  if opts == :chain\n    WhereChain.new(spawn)\n  elsif opts.blank?\n    self\n  else\n    spawn.where!(opts, *rest)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/querymethods/wherechain":"<h1 id=\"class-ActiveRecord::QueryMethods::WhereChain\" class=\"class\"> class ActiveRecord::QueryMethods::WhereChain </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"wherechain\">WhereChain</a> objects act as placeholder for queries in which where does not have any parameter. In this case, where must be chained with <a href=\"wherechain#method-i-not\">not</a> to return a new relation.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(scope)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 14\ndef initialize(scope)\n  @scope = scope\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-not\"> <span class=\"method-name\">not</span><span class=\"method-args\">(opts, *rest)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new relation expressing WHERE + NOT condition according to the conditions in the arguments.</p> <p><code>not</code> accepts conditions as a string, array, or hash. See where for more details on each format.</p> <pre class=\"ruby\">User.where.not(\"name = 'Jon'\")\n# SELECT * FROM users WHERE NOT (name = 'Jon')\n\nUser.where.not([\"name = ?\", \"Jon\"])\n# SELECT * FROM users WHERE NOT (name = 'Jon')\n\nUser.where.not(name: \"Jon\")\n# SELECT * FROM users WHERE name != 'Jon'\n\nUser.where.not(name: nil)\n# SELECT * FROM users WHERE name IS NOT NULL\n\nUser.where.not(name: %w(Ko1 Nobu))\n# SELECT * FROM users WHERE name NOT IN ('Ko1', 'Nobu')\n\nUser.where.not(name: \"Jon\", role: \"admin\")\n# SELECT * FROM users WHERE name != 'Jon' AND role != 'admin'\n</pre> <div class=\"method-source-code\" id=\"not-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/query_methods.rb, line 41\ndef not(opts, *rest)\n  where_value = @scope.send(:build_where, opts, rest).map do |rel|\n    case rel\n    when NilClass\n      raise ArgumentError, 'Invalid argument for .where.not(), got nil.'\n    when Arel::Nodes::In\n      Arel::Nodes::NotIn.new(rel.left, rel.right)\n    when Arel::Nodes::Equality\n      Arel::Nodes::NotEqual.new(rel.left, rel.right)\n    when String\n      Arel::Nodes::Not.new(Arel::Nodes::SqlLiteral.new(rel))\n    else\n      Arel::Nodes::Not.new(rel)\n    end\n  end\n\n  @scope.references!(PredicateBuilder.references(opts)) if Hash === opts\n  @scope.where_values += where_value\n  @scope\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/querying":"<h1 id=\"module-ActiveRecord::Querying\" class=\"module\"> module ActiveRecord::Querying </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-count_by_sql\"> <span class=\"method-name\">count_by_sql</span><span class=\"method-args\">(sql)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the result of an SQL statement that should only include a COUNT(*) in the SELECT part. The use of this method should be restricted to complicated SQL queries that can't be executed using the <a href=\"calculations\">ActiveRecord::Calculations</a> class methods. Look into those before using this.</p> <h4 id=\"method-i-count_by_sql-label-Parameters\">Parameters</h4> <ul><li> <p><code>sql</code> - An SQL statement which should return a count query from the database, see the example below.</p> <p>Product.count_by_sql “SELECT COUNT(*) FROM sales s, customers c WHERE s.customer_id = c.id”</p> </li></ul> <div class=\"method-source-code\" id=\"count_by_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/querying.rb, line 63\ndef count_by_sql(sql)\n  sql = sanitize_conditions(sql)\n  connection.select_value(sql, \"#{name} Count\").to_i\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_by_sql\"> <span class=\"method-name\">find_by_sql</span><span class=\"method-args\">(sql, binds = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Executes a custom SQL query against your database and returns all the results. The results will be returned as an array with columns requested encapsulated as attributes of the model you call this method from. If you call <code>Product.find_by_sql</code> then the results will be returned in a <code>Product</code> object with the attributes you specified in the SQL query.</p> <p>If you call a complicated SQL query which spans multiple tables the columns specified by the SELECT will be attributes of the model, whether or not they are columns of the corresponding table.</p> <p>The <code>sql</code> parameter is a full SQL query as a string. It will be called as is, there will be no database agnostic conversions performed. This should be a last resort because using, for example, MySQL specific terms will lock you to using that particular database engine or require you to change your call if you switch engines.</p> <pre class=\"ruby\"># A simple SQL query spanning multiple tables\nPost.find_by_sql \"SELECT p.title, c.author FROM posts p, comments c WHERE p.id = c.post_id\"\n# =&gt; [#&lt;Post:0x36bff9c @attributes={\"title\"=&gt;\"Ruby Meetup\", \"first_name\"=&gt;\"Quentin\"}&gt;, ...]\n</pre> <p>You can use the same string replacement techniques as you can with <code>ActiveRecord::QueryMethods#where</code>:</p> <pre class=\"ruby\">Post.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created &gt; ?\", author_id, start_date]\nPost.find_by_sql [\"SELECT body FROM comments WHERE author = :user_id OR approved_by = :user_id\", { :user_id =&gt; user_id }]\n</pre> <div class=\"method-source-code\" id=\"find_by_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/querying.rb, line 38\ndef find_by_sql(sql, binds = [])\n  result_set = connection.select_all(sanitize_sql(sql), \"#{name} Load\", binds)\n  column_types = result_set.column_types.dup\n  columns_hash.each_key { |k| column_types.delete k }\n  message_bus = ActiveSupport::Notifications.instrumenter\n\n  payload = {\n    record_count: result_set.length,\n    class_name: name\n  }\n\n  message_bus.instrument('instantiation.active_record', payload) do\n    result_set.map { |record| instantiate(record, column_types) }\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/readonlyrecord":"<h1 id=\"class-ActiveRecord::ReadOnlyRecord\" class=\"class\"> class ActiveRecord::ReadOnlyRecord </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised on attempt to update record that is instantiated as read only.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/readonlyattributes/classmethods":"<h1 id=\"module-ActiveRecord::ReadonlyAttributes::ClassMethods\" class=\"module\"> module ActiveRecord::ReadonlyAttributes::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attr_readonly\"> <span class=\"method-name\">attr_readonly</span><span class=\"method-args\">(*attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Attributes listed as readonly will be used to create a new record but update operations will ignore these fields.</p> <div class=\"method-source-code\" id=\"attr_readonly-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/readonly_attributes.rb, line 13\ndef attr_readonly(*attributes)\n  self._attr_readonly = Set.new(attributes.map { |a| a.to_s }) + (self._attr_readonly || [])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-readonly_attributes\"> <span class=\"method-name\">readonly_attributes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of all the attributes that have been specified as readonly.</p> <div class=\"method-source-code\" id=\"readonly_attributes-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/readonly_attributes.rb, line 18\ndef readonly_attributes\n  self._attr_readonly\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/recordinvalid":"<h1 id=\"class-ActiveRecord::RecordInvalid\" class=\"class\"> class ActiveRecord::RecordInvalid </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActiveRecord::RecordInvalid-label-Active+Record+RecordInvalid\">Active Record <a href=\"recordinvalid\">RecordInvalid</a>\n</h1> <p>Raised by <code>save!</code> and <code>create!</code> when the record is invalid. Use the <code>record</code> method to retrieve the record which did not validate.</p> <pre class=\"ruby\">begin\n  complex_operation_that_internally_calls_save!\nrescue ActiveRecord::RecordInvalid =&gt; invalid\n  puts invalid.record.errors\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-record\"> <span class=\"method-name\">record</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(record)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/validations.rb, line 15\ndef initialize(record)\n  @record = record\n  errors = @record.errors.full_messages.join(\", \")\n  super(I18n.t(:\"#{@record.class.i18n_scope}.errors.messages.record_invalid\", :errors =&gt; errors, :default =&gt; :\"errors.messages.record_invalid\"))\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/recordnotdestroyed":"<h1 id=\"class-ActiveRecord::RecordNotDestroyed\" class=\"class\"> class ActiveRecord::RecordNotDestroyed </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised by <a href=\"persistence#method-i-destroy-21\">ActiveRecord::Persistence#destroy!</a> when a call to destroy would return false.</p> <pre class=\"ruby\">begin\n  complex_operation_that_internally_calls_destroy!\nrescue ActiveRecord::RecordNotDestroyed =&gt; invalid\n  puts invalid.record.errors\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-record\"> <span class=\"method-name\">record</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(message, record = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/errors.rb, line 74\ndef initialize(message, record = nil)\n  @record = record\n  super(message)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/recordnotfound":"<h1 id=\"class-ActiveRecord::RecordNotFound\" class=\"class\"> class ActiveRecord::RecordNotFound </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when Active Record cannot find record by given id or set of ids.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/recordnotsaved":"<h1 id=\"class-ActiveRecord::RecordNotSaved\" class=\"class\"> class ActiveRecord::RecordNotSaved </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised by <a href=\"validations#method-i-save-21\">ActiveRecord::Validations#save!</a> and ActiveRecord::Base.create! methods when record cannot be saved because record is invalid.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-record\"> <span class=\"method-name\">record</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(message, record = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/errors.rb, line 57\ndef initialize(message, record = nil)\n  @record = record\n  super(message)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/recordnotunique":"<h1 id=\"class-ActiveRecord::RecordNotUnique\" class=\"class\"> class ActiveRecord::RecordNotUnique </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"wrappeddatabaseexception\">ActiveRecord::WrappedDatabaseException</a></dd>\n</dl> <section class=\"description\"> <p>Raised when a record cannot be inserted because it would violate a uniqueness constraint.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/reflection/classmethods":"<h1 id=\"module-ActiveRecord::Reflection::ClassMethods\" class=\"module\"> module ActiveRecord::Reflection::ClassMethods </h1> <section class=\"description\"> <p>Reflection enables interrogating of Active Record classes and objects about their associations and aggregations. This information can, for example, be used in a form builder that takes an Active Record object and creates input fields for all of the attributes depending on their type and displays the associations to other objects.</p> <p><a href=\"macroreflection\">MacroReflection</a> class has info for AggregateReflection and AssociationReflection classes.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reflect_on_aggregation\"> <span class=\"method-name\">reflect_on_aggregation</span><span class=\"method-args\">(aggregation)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the AggregateReflection object for the named <code>aggregation</code> (use the symbol).</p> <pre class=\"ruby\">Account.reflect_on_aggregation(:balance) # =&gt; the balance AggregateReflection\n</pre> <div class=\"method-source-code\" id=\"reflect_on_aggregation-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 60\ndef reflect_on_aggregation(aggregation)\n  aggregate_reflections[aggregation.to_s]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reflect_on_all_aggregations\"> <span class=\"method-name\">reflect_on_all_aggregations</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of AggregateReflection objects for all the aggregations in the class.</p> <div class=\"method-source-code\" id=\"reflect_on_all_aggregations-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 52\ndef reflect_on_all_aggregations\n  aggregate_reflections.values\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reflect_on_all_associations\"> <span class=\"method-name\">reflect_on_all_associations</span><span class=\"method-args\">(macro = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of AssociationReflection objects for all the associations in the class. If you only want to reflect on a certain association type, pass in the symbol (<code>:has_many</code>, <code>:has_one</code>, <code>:belongs_to</code>) as the first parameter.</p> <p>Example:</p> <pre>Account.reflect_on_all_associations             # returns an array of all associations\nAccount.reflect_on_all_associations(:has_many)  # returns an array of all has_many associations\n\n@api public</pre> <div class=\"method-source-code\" id=\"reflect_on_all_associations-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 93\ndef reflect_on_all_associations(macro = nil)\n  association_reflections = reflections.values\n  macro ? association_reflections.select { |reflection| reflection.macro == macro } : association_reflections\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reflect_on_all_autosave_associations\"> <span class=\"method-name\">reflect_on_all_autosave_associations</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of AssociationReflection objects for all associations which have <code>:autosave</code> enabled.</p> <pre>@api public</pre> <div class=\"method-source-code\" id=\"reflect_on_all_autosave_associations-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 116\ndef reflect_on_all_autosave_associations\n  reflections.values.select { |reflection| reflection.options[:autosave] }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reflect_on_association\"> <span class=\"method-name\">reflect_on_association</span><span class=\"method-args\">(association)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the AssociationReflection object for the <code>association</code> (use the symbol).</p> <pre>Account.reflect_on_association(:owner)             # returns the owner AssociationReflection\nInvoice.reflect_on_association(:line_items).macro  # returns :has_many\n\n@api public</pre> <div class=\"method-source-code\" id=\"reflect_on_association-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 104\ndef reflect_on_association(association)\n  reflections[association.to_s]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reflections\"> <span class=\"method-name\">reflections</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../../hash\">Hash</a> of name of the reflection as the key and a AssociationReflection as the value.</p> <pre class=\"ruby\">Account.reflections # =&gt; {\"balance\" =&gt; AggregateReflection}\n</pre> <p>@api public</p> <div class=\"method-source-code\" id=\"reflections-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 69\ndef reflections\n  ref = {}\n  _reflections.each do |name, reflection|\n    parent_name, parent_reflection = reflection.parent_reflection\n    if parent_name\n      ref[parent_name] = parent_reflection\n    else\n      ref[name] = reflection\n    end\n  end\n  ref\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/reflection/macroreflection":"<h1 id=\"class-ActiveRecord::Reflection::MacroReflection\" class=\"class\"> class ActiveRecord::Reflection::MacroReflection </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">ActiveRecord::Reflection::AbstractReflection</dd>\n</dl> <section class=\"description\"> <p><a href=\"../base\">Base</a> class for AggregateReflection and AssociationReflection. Objects of AggregateReflection and AssociationReflection are returned by the <a href=\"classmethods\">Reflection::ClassMethods</a>.</p> <pre class=\"ruby\">MacroReflection\n  AssociationReflection\n    AggregateReflection\n    HasManyReflection\n    HasOneReflection\n    BelongsToReflection\n      ThroughReflection\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-active_record\"> <span class=\"method-name\">active_record</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-name\"> <span class=\"method-name\">name</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>Returns the name of the macro.</p> <p><code>composed_of :balance, class_name: 'Money'</code> returns <code>:balance</code> <code>has_many :clients</code> returns <code>:clients</code></p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-options\"> <span class=\"method-name\">options</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>Returns the hash of options used for the macro.</p> <p><code>composed_of :balance, class_name: 'Money'</code> returns <code>{ class_name: \"Money\" }</code> <code>has_many\n:clients</code> returns <code>{}</code></p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-scope\"> <span class=\"method-name\">scope</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(name, scope, options, active_record)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 194\ndef initialize(name, scope, options, active_record)\n  @name          = name\n  @scope         = scope\n  @options       = options\n  @active_record = active_record\n  @klass         = options[:anonymous_class]\n  @plural_name   = active_record.pluralize_table_names ?\n                      name.to_s.pluralize : name.to_s\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D\"> <span class=\"method-name\">==</span><span class=\"method-args\">(other_aggregation)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if <code>self</code> and <code>other_aggregation</code> have the same <code>name</code> attribute, <code>active_record</code> attribute, and <code>other_aggregation</code> has an options hash assigned to it.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"3D-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 227\ndef ==(other_aggregation)\n  super ||\n    other_aggregation.kind_of?(self.class) &amp;&amp;\n    name == other_aggregation.name &amp;&amp;\n    !other_aggregation.options.nil? &amp;&amp;\n    active_record == other_aggregation.active_record\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-autosave-3D\"> <span class=\"method-name\">autosave=</span><span class=\"method-args\">(autosave)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"autosave-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 204\ndef autosave=(autosave)\n  @automatic_inverse_of = false\n  @options[:autosave] = autosave\n  _, parent_reflection = self.parent_reflection\n  if parent_reflection\n    parent_reflection.autosave = autosave\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compute_class\"> <span class=\"method-name\">compute_class</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"compute_class-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 221\ndef compute_class(name)\n  name.constantize\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-klass\"> <span class=\"method-name\">klass</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the class for the macro.</p> <p><code>composed_of :balance, class_name: 'Money'</code> returns the Money class <code>has_many :clients</code> returns the Client class</p> <div class=\"method-source-code\" id=\"klass-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/reflection.rb, line 217\ndef klass\n  @klass ||= compute_class(class_name)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/relation":"<h1 id=\"class-ActiveRecord::Relation\" class=\"class\"> class ActiveRecord::Relation </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"findermethods\">ActiveRecord::FinderMethods</a>, <a class=\"include\" href=\"calculations\">ActiveRecord::Calculations</a>, <a class=\"include\" href=\"spawnmethods\">ActiveRecord::SpawnMethods</a>, <a class=\"include\" href=\"querymethods\">ActiveRecord::QueryMethods</a>, <a class=\"include\" href=\"batches\">ActiveRecord::Batches</a>, <a class=\"include\" href=\"explain\">ActiveRecord::Explain</a>, <a class=\"include\" href=\"delegation\">ActiveRecord::Delegation</a>\n</dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActiveRecord::Relation-label-Active+Record+Relation\">Active Record <a href=\"relation\">Relation</a>\n</h1> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"INVALID_METHODS_FOR_DELETE_ALL\">INVALID_METHODS_FOR_DELETE_ALL </dt>\n\n<dt id=\"MULTI_VALUE_METHODS\">MULTI_VALUE_METHODS </dt>\n\n<dt id=\"SINGLE_VALUE_METHODS\">SINGLE_VALUE_METHODS </dt>\n\n<dt id=\"VALUE_METHODS\">VALUE_METHODS </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-klass\"> <span class=\"method-name\">klass</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-loaded\"> <span class=\"method-name\">loaded</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-loaded-3F\"> <span class=\"method-name\">loaded?</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-model\"> <span class=\"method-name\">model</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-table\"> <span class=\"method-name\">table</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(klass, table, values = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 22\ndef initialize(klass, table, values = {})\n  @klass  = klass\n  @table  = table\n  @values = values\n  @offsets = {}\n  @loaded = false\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D\"> <span class=\"method-name\">==</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Compares two relations for equality.</p> <div class=\"method-source-code\" id=\"3D-3D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 603\ndef ==(other)\n  case other\n  when Associations::CollectionProxy, AssociationRelation\n    self == other.to_a\n  when Relation\n    other.to_sql == to_sql\n  when Array\n    to_a == other\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-any-3F\"> <span class=\"method-name\">any?</span><span class=\"method-args\">() { |*block_args| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if there are any records.</p> <div class=\"method-source-code\" id=\"any-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 273\ndef any?\n  if block_given?\n    to_a.any? { |*block_args| yield(*block_args) }\n  else\n    !empty?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-blank-3F\"> <span class=\"method-name\">blank?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if relation is blank.</p> <div class=\"method-source-code\" id=\"blank-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 619\ndef blank?\n  to_a.blank?\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-build\"> <span class=\"method-name\">build</span><span class=\"method-args\">(*args, &amp;block)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"relation#method-i-new\">new</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create\"> <span class=\"method-name\">create</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Tries to create a new record with the same scoped attributes defined in the relation. Returns the initialized object if validation fails.</p> <p>Expects arguments in the same format as <code>Base.create</code>.</p> <h4 id=\"method-i-create-label-Examples\">Examples</h4> <pre class=\"ruby\">users = User.where(name: 'Oscar')\nusers.create # #&lt;User id: 3, name: \"oscar\", ...&gt;\n\nusers.create(name: 'fxn')\nusers.create # #&lt;User id: 4, name: \"fxn\", ...&gt;\n\nusers.create { |user| user.name = 'tenderlove' }\n# #&lt;User id: 5, name: \"tenderlove\", ...&gt;\n\nusers.create(name: nil) # validation on name\n# #&lt;User id: nil, name: nil, ...&gt;\n</pre> <div class=\"method-source-code\" id=\"create-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 141\ndef create(*args, &amp;block)\n  scoping { @klass.create(*args, &amp;block) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create-21\"> <span class=\"method-name\">create!</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Similar to <a href=\"relation#method-i-create\">create</a>, but calls <code>create!</code> on the base class. Raises an exception if a validation error occurs.</p> <p>Expects arguments in the same format as <code>Base.create!</code>.</p> <div class=\"method-source-code\" id=\"create-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 149\ndef create!(*args, &amp;block)\n  scoping { @klass.create!(*args, &amp;block) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(id_or_array)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes the row with a primary key matching the <code>id</code> argument, using a SQL <code>DELETE</code> statement, and returns the number of rows deleted. Active Record objects are not instantiated, so the object's callbacks are not executed, including any <code>:dependent</code> association options.</p> <p>You can delete multiple rows at once by passing an <a href=\"../array\">Array</a> of <code>id</code>s.</p> <p>Note: Although it is often much faster than the alternative, <code>#destroy</code>, skipping callbacks might bypass business logic in your application that ensures referential integrity or performs other essential jobs.</p> <h4 id=\"method-i-delete-label-Examples\">Examples</h4> <pre class=\"ruby\"># Delete a single row\nTodo.delete(1)\n\n# Delete multiple rows\nTodo.delete([2,3,4])\n</pre> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 502\ndef delete(id_or_array)\n  where(primary_key =&gt; id_or_array).delete_all\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_all\"> <span class=\"method-name\">delete_all</span><span class=\"method-args\">(conditions = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes the records matching <code>conditions</code> without instantiating the records first, and hence not calling the <code>destroy</code> method nor invoking callbacks. This is a single SQL DELETE statement that goes straight to the database, much more efficient than <code>destroy_all</code>. Be careful with relations though, in particular <code>:dependent</code> rules defined on associations are not honored. Returns the number of rows affected.</p> <pre class=\"ruby\">Post.delete_all(\"person_id = 5 AND (category = 'Something' OR category = 'Else')\")\nPost.delete_all([\"person_id = ? AND (category = ? OR category = ?)\", 5, 'Something', 'Else'])\nPost.where(person_id: 5).where(category: ['Something', 'Else']).delete_all\n</pre> <p>Both calls delete the affected posts all at once with a single DELETE statement. If you need to destroy dependent associations or call your <code>before_*</code> or <code>after_destroy</code> callbacks, use the <code>destroy_all</code> method instead.</p> <p>If an invalid method is supplied, <code>delete_all</code> raises an <a href=\"../activerecord\">ActiveRecord</a> error:</p> <pre class=\"ruby\">Post.limit(100).delete_all\n# =&gt; ActiveRecord::ActiveRecordError: delete_all doesn't support limit\n</pre> <div class=\"method-source-code\" id=\"delete_all-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 452\ndef delete_all(conditions = nil)\n  invalid_methods = INVALID_METHODS_FOR_DELETE_ALL.select { |method|\n    if MULTI_VALUE_METHODS.include?(method)\n      send(\"#{method}_values\").any?\n    else\n      send(\"#{method}_value\")\n    end\n  }\n  if invalid_methods.any?\n    raise ActiveRecordError.new(\"delete_all doesn't support #{invalid_methods.join(', ')}\")\n  end\n\n  if conditions\n    where(conditions).delete_all\n  else\n    stmt = Arel::DeleteManager.new(arel.engine)\n    stmt.from(table)\n\n    if joins_values.any?\n      @klass.connection.join_to_delete(stmt, arel, table[primary_key])\n    else\n      stmt.wheres = arel.constraints\n    end\n\n    affected = @klass.connection.delete(stmt, 'SQL', bind_values)\n\n    reset\n    affected\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroy\"> <span class=\"method-name\">destroy</span><span class=\"method-args\">(id)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destroy an object (or multiple objects) that has the given id. The object is instantiated first, therefore all callbacks and filters are fired off before the object is deleted. This method is less efficient than ActiveRecord#delete but allows cleanup methods and other actions to be run.</p> <p>This essentially finds the object (or multiple objects) with the given id, creates a new object from the attributes, and then calls destroy on it.</p> <h4 id=\"method-i-destroy-label-Parameters\">Parameters</h4> <ul><li> <p><code>id</code> - Can be either an <a href=\"../integer\">Integer</a> or an <a href=\"../array\">Array</a> of Integers.</p> </li></ul> <h4 id=\"method-i-destroy-label-Examples\">Examples</h4> <pre class=\"ruby\"># Destroy a single object\nTodo.destroy(1)\n\n# Destroy multiple objects\ntodos = [1,2,3]\nTodo.destroy(todos)\n</pre> <div class=\"method-source-code\" id=\"destroy-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 425\ndef destroy(id)\n  if id.is_a?(Array)\n    id.map { |one_id| destroy(one_id) }\n  else\n    find(id).destroy\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroy_all\"> <span class=\"method-name\">destroy_all</span><span class=\"method-args\">(conditions = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destroys the records matching <code>conditions</code> by instantiating each record and calling its <code>destroy</code> method. Each object's callbacks are executed (including <code>:dependent</code> association options). Returns the collection of objects that were destroyed; each will be frozen, to reflect that no changes should be made (since they can't be persisted).</p> <p>Note: Instantiation, callback execution, and deletion of each record can be time consuming when you're removing many records at once. It generates at least one SQL <code>DELETE</code> query per record (or possibly more, to enforce your callbacks). If you want to delete many rows quickly, without concern for their associations or callbacks, use <code>delete_all</code> instead.</p> <h4 id=\"method-i-destroy_all-label-Parameters\">Parameters</h4> <ul><li> <p><code>conditions</code> - A string, array, or hash that specifies which records to destroy. If omitted, all records are destroyed. See the Conditions section in the introduction to <a href=\"base\">ActiveRecord::Base</a> for more information.</p> </li></ul> <h4 id=\"method-i-destroy_all-label-Examples\">Examples</h4> <pre class=\"ruby\">Person.destroy_all(\"last_login &lt; '2004-04-04'\")\nPerson.destroy_all(status: \"inactive\")\nPerson.where(age: 0..18).destroy_all\n</pre> <div class=\"method-source-code\" id=\"destroy_all-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 398\ndef destroy_all(conditions = nil)\n  if conditions\n    where(conditions).destroy_all\n  else\n    to_a.each {|object| object.destroy }.tap { reset }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eager_loading-3F\"> <span class=\"method-name\">eager_loading?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if relation needs eager loading.</p> <div class=\"method-source-code\" id=\"eager_loading-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 582\ndef eager_loading?\n  @should_eager_load ||=\n    eager_load_values.any? ||\n    includes_values.any? &amp;&amp; (joined_includes_values.any? || references_eager_loaded_tables?)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-empty-3F\"> <span class=\"method-name\">empty?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if there are no records.</p> <div class=\"method-source-code\" id=\"empty-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 261\ndef empty?\n  return @records.empty? if loaded?\n\n  if limit_value == 0\n    true\n  else\n    c = count(:all)\n    c.respond_to?(:zero?) ? c.zero? : c.empty?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encode_with\"> <span class=\"method-name\">encode_with</span><span class=\"method-args\">(coder)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Serializes the relation objects <a href=\"../array\">Array</a>.</p> <div class=\"method-source-code\" id=\"encode_with-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 247\ndef encode_with(coder)\n  coder.represent_seq(nil, to_a)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-explain\"> <span class=\"method-name\">explain</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs EXPLAIN on the query or queries triggered by this relation and returns the result as a string. The string is formatted imitating the ones printed by the database shell.</p> <p>Note that this method actually runs the queries, since the results of some are needed by the next ones when eager loading is going on.</p> <p>Please see further details in the <a href=\"http://guides.rubyonrails.org/active_record_querying.html#running-explain\">Active Record Query Interface guide</a>.</p> <div class=\"method-source-code\" id=\"explain-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 235\ndef explain\n  #TODO: Fix for binds.\n  exec_explain(collecting_queries_for_explain { exec_queries })\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_or_create_by\"> <span class=\"method-name\">find_or_create_by</span><span class=\"method-args\">(attributes, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Finds the first record with the given attributes, or creates a record with the attributes if one is not found:</p> <pre class=\"ruby\"># Find the first user named \"Penélope\" or create a new one.\nUser.find_or_create_by(first_name: 'Penélope')\n# =&gt; #&lt;User id: 1, first_name: \"Penélope\", last_name: nil&gt;\n\n# Find the first user named \"Penélope\" or create a new one.\n# We already have one so the existing record will be returned.\nUser.find_or_create_by(first_name: 'Penélope')\n# =&gt; #&lt;User id: 1, first_name: \"Penélope\", last_name: nil&gt;\n\n# Find the first user named \"Scarlett\" or create a new one with\n# a particular last name.\nUser.create_with(last_name: 'Johansson').find_or_create_by(first_name: 'Scarlett')\n# =&gt; #&lt;User id: 2, first_name: \"Scarlett\", last_name: \"Johansson\"&gt;\n</pre> <p>This method accepts a block, which is passed down to <code>create</code>. The last example above can be alternatively written this way:</p> <pre class=\"ruby\"># Find the first user named \"Scarlett\" or create a new one with a\n# different last name.\nUser.find_or_create_by(first_name: 'Scarlett') do |user|\n  user.last_name = 'Johansson'\nend\n# =&gt; #&lt;User id: 2, first_name: \"Scarlett\", last_name: \"Johansson\"&gt;\n</pre> <p>This method always returns a record, but if creation was attempted and failed due to validation errors it won't be persisted, you get what <code>create</code> returns in such situation.</p> <p>Please note *this method is not atomic*, it runs first a SELECT, and if there are no results an INSERT is attempted. If there are other threads or processes there is a race condition between both calls and it could be the case that you end up with two similar records.</p> <p>Whether that is a problem or not depends on the logic of the application, but in the particular case in which rows have a UNIQUE constraint an exception may be raised, just retry:</p> <pre class=\"ruby\">begin\n  CreditAccount.find_or_create_by(user_id: user.id)\nrescue ActiveRecord::RecordNotUnique\n  retry\nend\n</pre> <div class=\"method-source-code\" id=\"find_or_create_by-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 211\ndef find_or_create_by(attributes, &amp;block)\n  find_by(attributes) || create(attributes, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_or_create_by-21\"> <span class=\"method-name\">find_or_create_by!</span><span class=\"method-args\">(attributes, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Like <code>find_or_create_by</code>, but calls <code>create!</code> so an exception is raised if the created record is invalid.</p> <div class=\"method-source-code\" id=\"find_or_create_by-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 217\ndef find_or_create_by!(attributes, &amp;block)\n  find_by(attributes) || create!(attributes, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_or_initialize_by\"> <span class=\"method-name\">find_or_initialize_by</span><span class=\"method-args\">(attributes, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Like <code>find_or_create_by</code>, but calls <code>new</code> instead of <code>create</code>.</p> <div class=\"method-source-code\" id=\"find_or_initialize_by-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 222\ndef find_or_initialize_by(attributes, &amp;block)\n  find_by(attributes) || new(attributes, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initialize_copy\"> <span class=\"method-name\">initialize_copy</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"initialize_copy-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 30\ndef initialize_copy(other)\n  # This method is a hot spot, so for now, use Hash[] to dup the hash.\n  #   https://bugs.ruby-lang.org/issues/7166\n  @values        = Hash[@values]\n  @values[:bind] = @values[:bind].dup if @values.key? :bind\n  reset\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 627\ndef inspect\n  entries = to_a.take([limit_value, 11].compact.min).map!(&amp;:inspect)\n  entries[10] = '...' if entries.size == 11\n\n  \"#&lt;#{self.class.name} [#{entries.join(', ')}]&gt;\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-joined_includes_values\"> <span class=\"method-name\">joined_includes_values</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Joins that are also marked for preloading. In which case we should just eager load them. Note that this is a naive implementation because we could have strings and symbols which represent the same association, but that aren't matched by this. Also, we could have nested hashes which partially match, e.g. { a: :b } &amp; { a: [:b, :c] }</p> <div class=\"method-source-code\" id=\"joined_includes_values-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 592\ndef joined_includes_values\n  includes_values &amp; joins_values\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load\"> <span class=\"method-name\">load</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Causes the records to be loaded from the database if they have not been loaded already. You can use this if for some reason you need to explicitly load some records before actually using them. The return value is the relation itself, not the records.</p> <pre class=\"ruby\">Post.where(published: true).load # =&gt; #&lt;ActiveRecord::Relation&gt;\n</pre> <div class=\"method-source-code\" id=\"load-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 512\ndef load\n  exec_queries unless loaded?\n\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-many-3F\"> <span class=\"method-name\">many?</span><span class=\"method-args\">() { |*block_args| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if there is more than one record.</p> <div class=\"method-source-code\" id=\"many-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 282\ndef many?\n  if block_given?\n    to_a.many? { |*block_args| yield(*block_args) }\n  else\n    limit_value ? to_a.many? : size &gt; 1\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Initializes new record from relation while maintaining the current scope.</p> <p>Expects arguments in the same format as <code>Base.new</code>.</p> <pre class=\"ruby\">users = User.where(name: 'DHH')\nuser = users.new # =&gt; #&lt;User id: nil, name: \"DHH\", created_at: nil, updated_at: nil&gt;\n</pre> <p>You can also pass a block to new with the new record as argument:</p> <pre class=\"ruby\">user = users.new { |user| user.name = 'Oscar' }\nuser.name # =&gt; Oscar\n</pre> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 118\ndef new(*args, &amp;block)\n  scoping { @klass.new(*args, &amp;block) }\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"relation#method-i-build\">build</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pretty_print\"> <span class=\"method-name\">pretty_print</span><span class=\"method-args\">(q)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"pretty_print-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 614\ndef pretty_print(q)\n  q.pp(self.to_a)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reload\"> <span class=\"method-name\">reload</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Forces reloading of relation.</p> <div class=\"method-source-code\" id=\"reload-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 519\ndef reload\n  reset\n  load\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset\"> <span class=\"method-name\">reset</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"reset-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 524\ndef reset\n  @last = @to_sql = @order_clause = @scope_for_create = @arel = @loaded = nil\n  @should_eager_load = @join_dependency = nil\n  @records = []\n  @offsets = {}\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-scope_for_create\"> <span class=\"method-name\">scope_for_create</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"scope_for_create-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 577\ndef scope_for_create\n  @scope_for_create ||= where_values_hash.merge(create_with_value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-scoping\"> <span class=\"method-name\">scoping</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Scope all queries to the current scope.</p> <pre class=\"ruby\">Comment.where(post_id: 1).scoping do\n  Comment.first\nend\n# =&gt; SELECT \"comments\".* FROM \"comments\" WHERE \"comments\".\"post_id\" = 1 ORDER BY \"comments\".\"id\" ASC LIMIT 1\n</pre> <p>Please check unscoped if you want to remove all previous scopes (including the default_scope) during the execution of a block.</p> <div class=\"method-source-code\" id=\"scoping-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 299\ndef scoping\n  previous, klass.current_scope = klass.current_scope, self\n  yield\nensure\n  klass.current_scope = previous\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-size\"> <span class=\"method-name\">size</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns size of the records.</p> <div class=\"method-source-code\" id=\"size-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 256\ndef size\n  loaded? ? @records.length : count(:all)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_a\"> <span class=\"method-name\">to_a</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts relation objects to <a href=\"../array\">Array</a>.</p> <div class=\"method-source-code\" id=\"to_a-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 241\ndef to_a\n  load\n  @records\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_sql\"> <span class=\"method-name\">to_sql</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns sql statement for the relation.</p> <pre class=\"ruby\">User.where(name: 'Oscar').to_sql\n# =&gt; SELECT \"users\".* FROM \"users\"  WHERE \"users\".\"name\" = 'Oscar'\n</pre> <div class=\"method-source-code\" id=\"to_sql-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 536\ndef to_sql\n  @to_sql ||= begin\n                relation   = self\n                connection = klass.connection\n                visitor    = connection.visitor\n\n                if eager_loading?\n                  find_with_associations { |rel| relation = rel }\n                end\n\n                arel  = relation.arel\n                binds = (arel.bind_values + relation.bind_values).dup\n                binds.map! { |bv| connection.quote(*bv.reverse) }\n                collect = visitor.accept(arel.ast, Arel::Collectors::Bind.new)\n                collect.substitute_binds(binds).join\n              end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-uniq_value\"> <span class=\"method-name\">uniq_value</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>uniq</code> and <code>uniq!</code> are silently deprecated. <code>uniq_value</code> delegates to <code>distinct_value</code> to maintain backwards compatibility. Use <code>distinct_value</code> instead.</p> <div class=\"method-source-code\" id=\"uniq_value-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 598\ndef uniq_value\n  distinct_value\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update\"> <span class=\"method-name\">update</span><span class=\"method-args\">(id, attributes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Updates an object (or multiple objects) and saves it to the database, if validations pass. The resulting object is returned whether the object was saved successfully to the database or not.</p> <h4 id=\"method-i-update-label-Parameters\">Parameters</h4> <ul>\n<li> <p><code>id</code> - This should be the id or an array of ids to be updated.</p> </li>\n<li> <p><code>attributes</code> - This should be a hash of attributes or an array of hashes.</p> </li>\n</ul> <h4 id=\"method-i-update-label-Examples\">Examples</h4> <pre class=\"ruby\"># Updates one record\nPerson.update(15, user_name: 'Samuel', group: 'expert')\n\n# Updates multiple records\npeople = { 1 =&gt; { \"first_name\" =&gt; \"David\" }, 2 =&gt; { \"first_name\" =&gt; \"Jeremy\" } }\nPerson.update(people.keys, people.values)\n</pre> <div class=\"method-source-code\" id=\"update-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 363\ndef update(id, attributes)\n  if id.is_a?(Array)\n    id.map.with_index { |one_id, idx| update(one_id, attributes[idx]) }\n  else\n    object = find(id)\n    object.update(attributes)\n    object\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update_all\"> <span class=\"method-name\">update_all</span><span class=\"method-args\">(updates)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Updates all records in the current relation with details given. This method constructs a single SQL UPDATE statement and sends it straight to the database. It does not instantiate the involved models and it does not trigger Active Record callbacks or validations. Values passed to `update_all` will not go through ActiveRecord's type-casting behavior. It should receive only values that can be passed as-is to the SQL database.</p> <h4 id=\"method-i-update_all-label-Parameters\">Parameters</h4> <ul><li> <p><code>updates</code> - A string, array, or hash representing the SET part of an SQL statement.</p> </li></ul> <h4 id=\"method-i-update_all-label-Examples\">Examples</h4> <pre class=\"ruby\"># Update all customers with the given attributes\nCustomer.update_all wants_email: true\n\n# Update all books with 'Rails' in their title\nBook.where('title LIKE ?', '%Rails%').update_all(author: 'David')\n\n# Update all books that match conditions, but limit it to 5 ordered by date\nBook.where('title LIKE ?', '%Rails%').order(:created_at).limit(5).update_all(author: 'David')\n</pre> <div class=\"method-source-code\" id=\"update_all-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 326\ndef update_all(updates)\n  raise ArgumentError, \"Empty list of attributes to change\" if updates.blank?\n\n  stmt = Arel::UpdateManager.new(arel.engine)\n\n  stmt.set Arel.sql(@klass.send(:sanitize_sql_for_assignment, updates))\n  stmt.table(table)\n  stmt.key = table[primary_key]\n\n  if joins_values.any?\n    @klass.connection.join_to_update(stmt, arel)\n  else\n    stmt.take(arel.limit)\n    stmt.order(*arel.orders)\n    stmt.wheres = arel.constraints\n  end\n\n  bvs = arel.bind_values + bind_values\n  @klass.connection.update stmt, 'SQL', bvs\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-values\"> <span class=\"method-name\">values</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"values-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 623\ndef values\n  Hash[@values]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-where_values_hash\"> <span class=\"method-name\">where_values_hash</span><span class=\"method-args\">(relation_table_name = table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash of where conditions.</p> <pre class=\"ruby\">User.where(name: 'Oscar').where_values_hash\n# =&gt; {name: \"Oscar\"}\n</pre> <div class=\"method-source-code\" id=\"where_values_hash-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation.rb, line 558\ndef where_values_hash(relation_table_name = table_name)\n  equalities = where_values.grep(Arel::Nodes::Equality).find_all { |node|\n    node.left.relation.name == relation_table_name\n  }\n\n  binds = Hash[bind_values.find_all(&amp;:first).map { |column, v| [column.name, v] }]\n\n  Hash[equalities.map { |where|\n    name = where.left.name\n    [name, binds.fetch(name.to_s) {\n      case where.right\n      when Array then where.right.map(&amp;:val)\n      when Arel::Nodes::Casted\n        where.right.val\n      end\n    }]\n  }]\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/result":"<h1 id=\"class-ActiveRecord::Result\" class=\"class\"> class ActiveRecord::Result </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../enumerable\">Enumerable</a></dd>\n</dl> <section class=\"description\"> <p>This class encapsulates a <a href=\"result\">Result</a> returned from calling <code>exec_query</code> on any database connection adapter. For example:</p> <pre>result = ActiveRecord::Base.connection.exec_query('SELECT id, title, body FROM posts')\nresult # =&gt; #&lt;ActiveRecord::Result:0xdeadbeef&gt;\n\n# Get the column names of the result:\nresult.columns\n# =&gt; [\"id\", \"title\", \"body\"]\n\n# Get the record values of the result:\nresult.rows\n# =&gt; [[1, \"title_1\", \"body_1\"],\n      [2, \"title_2\", \"body_2\"],\n      ...\n     ]\n\n# Get an array of hashes representing the result (column =&gt; value):\nresult.to_hash\n# =&gt; [{\"id\" =&gt; 1, \"title\" =&gt; \"title_1\", \"body\" =&gt; \"body_1\"},\n      {\"id\" =&gt; 2, \"title\" =&gt; \"title_2\", \"body\" =&gt; \"body_2\"},\n      ...\n     ]\n\n# ActiveRecord::Result also includes Enumerable.\nresult.each do |row|\n  puts row['title'] + \" \" + row['body']\nend</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-column_types\"> <span class=\"method-name\">column_types</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-columns\"> <span class=\"method-name\">columns</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-rows\"> <span class=\"method-name\">rows</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(columns, rows, column_types = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/result.rb, line 38\ndef initialize(columns, rows, column_types = {})\n  @columns      = columns\n  @rows         = rows\n  @hash_rows    = nil\n  @column_types = column_types\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(idx)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/result.rb, line 73\ndef [](idx)\n  hash_rows[idx]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">() { |row| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/result.rb, line 49\ndef each\n  if block_given?\n    hash_rows.each { |row| yield row }\n  else\n    hash_rows.to_enum { @rows.size }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-empty-3F\"> <span class=\"method-name\">empty?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if there are no records.</p> <div class=\"method-source-code\" id=\"empty-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/result.rb, line 65\ndef empty?\n  rows.empty?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initialize_copy\"> <span class=\"method-name\">initialize_copy</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"initialize_copy-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/result.rb, line 90\ndef initialize_copy(other)\n  @columns      = columns.dup\n  @rows         = rows.dup\n  @column_types = column_types.dup\n  @hash_rows    = nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last\"> <span class=\"method-name\">last</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"last-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/result.rb, line 77\ndef last\n  hash_rows.last\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-length\"> <span class=\"method-name\">length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"length-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/result.rb, line 45\ndef length\n  @rows.length\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_ary\"> <span class=\"method-name\">to_ary</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_ary-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/result.rb, line 69\ndef to_ary\n  hash_rows\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_hash\"> <span class=\"method-name\">to_hash</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_hash-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/result.rb, line 57\ndef to_hash\n  hash_rows\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/rollback":"<h1 id=\"class-ActiveRecord::Rollback\" class=\"class\"> class ActiveRecord::Rollback </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"transactions/classmethods#method-i-transaction\">ActiveRecord::Transactions::ClassMethods#transaction</a> uses this exception to distinguish a deliberate rollback from other exceptional situations. Normally, raising an exception will cause the <code>transaction</code> method to rollback the database transaction <strong>and</strong> pass on the exception. But if you raise an <a href=\"rollback\">ActiveRecord::Rollback</a> exception, then the database transaction will be rolled back, without passing on the exception.</p> <p>For example, you could do this in your controller to rollback a transaction:</p> <pre class=\"ruby\">class BooksController &lt; ActionController::Base\n  def create\n    Book.transaction do\n      book = Book.new(params[:book])\n      book.save!\n      if today_is_friday?\n        # The system must fail on Friday so that our support department\n        # won't be out of job. We silently rollback this transaction\n        # without telling the user.\n        raise ActiveRecord::Rollback, \"Call tech support!\"\n      end\n    end\n    # ActiveRecord::Rollback is the only exception that won't be passed on\n    # by ActiveRecord::Base.transaction, so this line will still be reached\n    # even on Friday.\n    redirect_to root_url\n  end\nend\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/sanitization/classmethods":"<h1 id=\"module-ActiveRecord::Sanitization::ClassMethods\" class=\"module\"> module ActiveRecord::Sanitization::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-expand_hash_conditions_for_aggregates\"> <span class=\"method-name\">expand_hash_conditions_for_aggregates</span><span class=\"method-args\">(attrs)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Accepts a hash of SQL conditions and replaces those attributes that correspond to a <code>composed_of</code> relationship with their expanded aggregate attribute values. Given:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  composed_of :address, class_name: \"Address\",\n    mapping: [%w(address_street street), %w(address_city city)]\nend\n</pre> <p>Then:</p> <pre class=\"ruby\">{ address: Address.new(\"813 abc st.\", \"chicago\") }\n  # =&gt; { address_street: \"813 abc st.\", address_city: \"chicago\" }\n</pre> <div class=\"method-source-code\" id=\"expand_hash_conditions_for_aggregates-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/sanitization.rb, line 56\ndef expand_hash_conditions_for_aggregates(attrs)\n  expanded_attrs = {}\n  attrs.each do |attr, value|\n    if aggregation = reflect_on_aggregation(attr.to_sym)\n      mapping = aggregation.mapping\n      mapping.each do |field_attr, aggregate_attr|\n        if mapping.size == 1 &amp;&amp; !value.respond_to?(aggregate_attr)\n          expanded_attrs[field_attr] = value\n        else\n          expanded_attrs[field_attr] = value.send(aggregate_attr)\n        end\n      end\n    else\n      expanded_attrs[attr] = value\n    end\n  end\n  expanded_attrs\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-sanitize_conditions\"> <span class=\"method-name\">sanitize_conditions</span><span class=\"method-args\">(condition, table_name = self.table_name)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"classmethods#method-i-sanitize_sql\">sanitize_sql</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-sanitize_sql\"> <span class=\"method-name\">sanitize_sql</span><span class=\"method-args\">(condition, table_name = self.table_name)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"classmethods#method-i-sanitize_conditions\">sanitize_conditions</a> </div> <div class=\"aliases\"> Alias for: <a href=\"classmethods#method-i-sanitize_sql_for_conditions\">sanitize_sql_for_conditions</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sanitize_sql_array\"> <span class=\"method-name\">sanitize_sql_array</span><span class=\"method-args\">(ary)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Accepts an array of conditions. The array has each value sanitized and interpolated into the SQL statement.</p> <pre>[\"name='%s' and group_id='%s'\", \"foo'bar\", 4]  returns  \"name='foo''bar' and group_id='4'\"</pre> <div class=\"method-source-code\" id=\"sanitize_sql_array-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/sanitization.rb, line 123\ndef sanitize_sql_array(ary)\n  statement, *values = ary\n  if values.first.is_a?(Hash) &amp;&amp; statement =~ /:\\w+/\n    replace_named_bind_variables(statement, values.first)\n  elsif statement.include?('?')\n    replace_bind_variables(statement, values)\n  elsif statement.blank?\n    statement\n  else\n    statement % values.collect { |value| connection.quote_string(value.to_s) }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sanitize_sql_for_assignment\"> <span class=\"method-name\">sanitize_sql_for_assignment</span><span class=\"method-args\">(assignments, default_table_name = self.table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Accepts an array, hash, or string of SQL conditions and sanitizes them into a valid SQL fragment for a SET clause.</p> <pre>{ name: nil, group_id: 4 }  returns \"name = NULL , group_id='4'\"</pre> <div class=\"method-source-code\" id=\"sanitize_sql_for_assignment-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/sanitization.rb, line 37\ndef sanitize_sql_for_assignment(assignments, default_table_name = self.table_name)\n  case assignments\n  when Array; sanitize_sql_array(assignments)\n  when Hash;  sanitize_sql_hash_for_assignment(assignments, default_table_name)\n  else        assignments\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sanitize_sql_for_conditions\"> <span class=\"method-name\">sanitize_sql_for_conditions</span><span class=\"method-args\">(condition, table_name = self.table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Accepts an array, hash, or string of SQL conditions and sanitizes them into a valid SQL fragment for a WHERE clause.</p> <pre>[\"name='%s' and group_id='%s'\", \"foo'bar\", 4]  returns  \"name='foo''bar' and group_id='4'\"\n{ name: \"foo'bar\", group_id: 4 }  returns \"name='foo''bar' and group_id='4'\"\n\"name='foo''bar' and group_id='4'\" returns \"name='foo''bar' and group_id='4'\"</pre> <div class=\"method-source-code\" id=\"sanitize_sql_for_conditions-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/sanitization.rb, line 22\ndef sanitize_sql_for_conditions(condition, table_name = self.table_name)\n  return nil if condition.blank?\n\n  case condition\n  when Array; sanitize_sql_array(condition)\n  when Hash;  sanitize_sql_hash_for_conditions(condition, table_name)\n  else        condition\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"classmethods#method-i-sanitize_sql\">sanitize_sql</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-sanitize_sql_hash\"> <span class=\"method-name\">sanitize_sql_hash</span><span class=\"method-args\">(attrs, default_table_name = self.table_name)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"classmethods#method-i-sanitize_sql_hash_for_conditions\">sanitize_sql_hash_for_conditions</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sanitize_sql_hash_for_assignment\"> <span class=\"method-name\">sanitize_sql_hash_for_assignment</span><span class=\"method-args\">(attrs, table)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET clause.</p> <pre class=\"ruby\">{ status: nil, group_id: 1 }\n  # =&gt; \"status = NULL , group_id = 1\"\n</pre> <div class=\"method-source-code\" id=\"sanitize_sql_hash_for_assignment-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/sanitization.rb, line 106\ndef sanitize_sql_hash_for_assignment(attrs, table)\n  c = connection\n  attrs.map do |attr, value|\n    \"#{c.quote_table_name_for_assignment(table, attr)} = #{quote_bound_value(value, c, columns_hash[attr.to_s])}\"\n  end.join(', ')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sanitize_sql_hash_for_conditions\"> <span class=\"method-name\">sanitize_sql_hash_for_conditions</span><span class=\"method-args\">(attrs, default_table_name = self.table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE clause.</p> <pre class=\"ruby\">{ name: \"foo'bar\", group_id: 4 }\n  # =&gt; \"name='foo''bar' and group_id= 4\"\n{ status: nil, group_id: [1,2,3] }\n  # =&gt; \"status IS NULL and group_id IN (1,2,3)\"\n{ age: 13..18 }\n  # =&gt; \"age BETWEEN 13 AND 18\"\n{ 'other_records.id' =&gt; 7 }\n  # =&gt; \"`other_records`.`id` = 7\"\n{ other_records: { id: 7 } }\n  # =&gt; \"`other_records`.`id` = 7\"\n</pre> <p>And for value objects on a composed_of relationship:</p> <pre class=\"ruby\">{ address: Address.new(\"123 abc st.\", \"chicago\") }\n  # =&gt; \"address_street='123 abc st.' and address_city='chicago'\"\n</pre> <div class=\"method-source-code\" id=\"sanitize_sql_hash_for_conditions-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/sanitization.rb, line 89\n      def sanitize_sql_hash_for_conditions(attrs, default_table_name = self.table_name)\n        ActiveSupport::Deprecation.warn(\"sanitize_sql_hash_for_conditions is deprecated, and will be removed in Rails 5.0\n\")\n        attrs = PredicateBuilder.resolve_column_aliases self, attrs\n        attrs = expand_hash_conditions_for_aggregates(attrs)\n\n        table = Arel::Table.new(table_name, arel_engine).alias(default_table_name)\n        PredicateBuilder.build_from_hash(self, attrs, table).map { |b|\n          connection.visitor.compile b\n        }.join(' AND ')\n      end</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"classmethods#method-i-sanitize_sql_hash\">sanitize_sql_hash</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sanitize_sql_like\"> <span class=\"method-name\">sanitize_sql_like</span><span class=\"method-args\">(string, escape_character = \"\\\\\")</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sanitizes a <code>string</code> so that it is safe to use within an SQL LIKE statement. This method uses <code>escape_character</code> to escape all occurrences of “\", ”_“ and ”%“</p> <div class=\"method-source-code\" id=\"sanitize_sql_like-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/sanitization.rb, line 115\ndef sanitize_sql_like(string, escape_character = \"\\\\\")\n  pattern = Regexp.union(escape_character, \"%\", \"_\")\n  string.gsub(pattern) { |x| [escape_character, x].join }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/schema":"<h1 id=\"class-ActiveRecord::Schema\" class=\"class\"> class ActiveRecord::Schema </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"migration\">ActiveRecord::Migration</a></dd>\n</dl> <section class=\"description\"> <h1 id=\"class-ActiveRecord::Schema-label-Active+Record+Schema\">Active Record <a href=\"schema\">Schema</a>\n</h1> <p>Allows programmers to programmatically define a schema in a portable DSL. This means you can define tables, indexes, etc. without using SQL directly, so your applications can more easily support multiple databases.</p> <p>Usage:</p> <pre class=\"ruby\">ActiveRecord::Schema.define do\n  create_table :authors do |t|\n    t.string :name, null: false\n  end\n\n  add_index :authors, :name, :unique\n\n  create_table :posts do |t|\n    t.integer :author_id, null: false\n    t.string :subject\n    t.text :body\n    t.boolean :private, default: false\n  end\n\n  add_index :posts, :author_id\nend\n</pre> <p><a href=\"schema\">ActiveRecord::Schema</a> is only supported by database adapters that also support migrations, the two features being very similar.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-define\"> <span class=\"method-name\">define</span><span class=\"method-args\">(info={}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Eval the given block. All methods available to the current connection adapter are available within the block, so you can easily use the database definition DSL to build up your schema (<code>create_table</code>, <code>add_index</code>, etc.).</p> <p>The <code>info</code> hash is optional, and if given is used to define metadata about the current schema (currently, only the schema's version):</p> <pre>ActiveRecord::Schema.define(version: 20380119000001) do\n  ...\nend</pre> <div class=\"method-source-code\" id=\"define-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/schema.rb, line 60\ndef self.define(info={}, &amp;block)\n  new.define(info, &amp;block)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-migrations_paths\"> <span class=\"method-name\">migrations_paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the migrations paths.</p> <pre class=\"ruby\">ActiveRecord::Schema.new.migrations_paths\n# =&gt; [\"db/migrate\"] # Rails migration path by default.\n</pre> <div class=\"method-source-code\" id=\"migrations_paths-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/schema.rb, line 36\ndef migrations_paths\n  ActiveRecord::Migrator.migrations_paths\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/scoping/default/classmethods":"<h1 id=\"module-ActiveRecord::Scoping::Default::ClassMethods\" class=\"module\"> module ActiveRecord::Scoping::Default::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unscoped\"> <span class=\"method-name\">unscoped</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a scope for the model without the previously set scopes.</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  def self.default_scope\n    where published: true\n  end\nend\n\nPost.all                                  # Fires \"SELECT * FROM posts WHERE published = true\"\nPost.unscoped.all                         # Fires \"SELECT * FROM posts\"\nPost.where(published: false).unscoped.all # Fires \"SELECT * FROM posts\"\n</pre> <p>This method also accepts a block. All queries inside the block will not use the previously set scopes.</p> <pre class=\"ruby\">Post.unscoped {\n  Post.limit(10) # Fires \"SELECT * FROM posts LIMIT 10\"\n}\n</pre> <div class=\"method-source-code\" id=\"unscoped-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/scoping/default.rb, line 32\ndef unscoped\n  block_given? ? relation.scoping { yield } : relation\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default_scope\"> <span class=\"method-name\">default_scope</span><span class=\"method-args\">(scope = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Use this macro in your model to set a default scope for all operations on the model.</p> <pre class=\"ruby\">class Article &lt; ActiveRecord::Base\n  default_scope { where(published: true) }\nend\n\nArticle.all # =&gt; SELECT * FROM articles WHERE published = true\n</pre> <p>The <code>default_scope</code> is also applied while creating/building a record. It is not applied while updating a record.</p> <pre class=\"ruby\">Article.new.published    # =&gt; true\nArticle.create.published # =&gt; true\n</pre> <p>(You can also pass any object which responds to <code>call</code> to the <code>default_scope</code> macro, and it will be called when building the default scope.)</p> <p>If you use multiple <code>default_scope</code> declarations in your model then they will be merged together:</p> <pre class=\"ruby\">class Article &lt; ActiveRecord::Base\n  default_scope { where(published: true) }\n  default_scope { where(rating: 'G') }\nend\n\nArticle.all # =&gt; SELECT * FROM articles WHERE published = true AND rating = 'G'\n</pre> <p>This is also the case with inheritance and module includes where the parent or module defines a <code>default_scope</code> and the child or including class defines a second one.</p> <p>If you need to do more complex things with a default scope, you can alternatively define it as a class method:</p> <pre class=\"ruby\">class Article &lt; ActiveRecord::Base\n  def self.default_scope\n    # Should return a scope, you can call 'super' here etc.\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"default_scope-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/scoping/default.rb, line 83\ndef default_scope(scope = nil)\n  scope = Proc.new if block_given?\n\n  if scope.is_a?(Relation) || !scope.respond_to?(:call)\n    raise ArgumentError,\n      \"Support for calling #default_scope without a block is removed. For example instead \"                \"of `default_scope where(color: 'red')`, please use \"                \"`default_scope { where(color: 'red') }`. (Alternatively you can just redefine \"                \"self.default_scope.)\"\n  end\n\n  self.default_scopes += [scope]\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/scoping/named/classmethods":"<h1 id=\"module-ActiveRecord::Scoping::Named::ClassMethods\" class=\"module\"> module ActiveRecord::Scoping::Named::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-all\"> <span class=\"method-name\">all</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an <code>ActiveRecord::Relation</code> scope object.</p> <pre class=\"ruby\">posts = Post.all\nposts.size # Fires \"select count(*) from  posts\" and returns the count\nposts.each {|p| puts p.name } # Fires \"select * from posts\" and loads post objects\n\nfruits = Fruit.all\nfruits = fruits.where(color: 'red') if options[:red_only]\nfruits = fruits.limit(10) if limited?\n</pre> <p>You can define a scope that applies to all finders using <code>ActiveRecord::Base.default_scope</code>.</p> <div class=\"method-source-code\" id=\"all-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/scoping/named.rb, line 24\ndef all\n  if current_scope\n    current_scope.clone\n  else\n    default_scoped\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-scope\"> <span class=\"method-name\">scope</span><span class=\"method-args\">(name, body, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a class method for retrieving and querying objects. A scope represents a narrowing of a database query, such as <code>where(color:\n:red).select('shirts.*').includes(:washing_instructions)</code>.</p> <pre class=\"ruby\">class Shirt &lt; ActiveRecord::Base\n  scope :red, -&gt; { where(color: 'red') }\n  scope :dry_clean_only, -&gt; { joins(:washing_instructions).where('washing_instructions.dry_clean_only = ?', true) }\nend\n</pre> <p>The above calls to <code>scope</code> define class methods <code>Shirt.red</code> and <code>Shirt.dry_clean_only</code>. <code>Shirt.red</code>, in effect, represents the query <code>Shirt.where(color: 'red')</code>.</p> <p>You should always pass a callable object to the scopes defined with <code>scope</code>. This ensures that the scope is re-evaluated each time it is called.</p> <p>Note that this is simply 'syntactic sugar' for defining an actual class method:</p> <pre class=\"ruby\">class Shirt &lt; ActiveRecord::Base\n  def self.red\n    where(color: 'red')\n  end\nend\n</pre> <p>Unlike <code>Shirt.find(...)</code>, however, the object returned by <code>Shirt.red</code> is not an <a href=\"../../../array\">Array</a>; it resembles the association object constructed by a <code>has_many</code> declaration. For instance, you can invoke <code>Shirt.red.first</code>, <code>Shirt.red.count</code>, <code>Shirt.red.where(size:\n'small')</code>. Also, just as with the association objects, named scopes act like an <a href=\"../../../array\">Array</a>, implementing <a href=\"../../../enumerable\">Enumerable</a>; <code>Shirt.red.each(&amp;block)</code>, <code>Shirt.red.first</code>, and <code>Shirt.red.inject(memo, &amp;block)</code> all behave as if <code>Shirt.red</code> really was an <a href=\"../../../array\">Array</a>.</p> <p>These named scopes are composable. For instance, <code>Shirt.red.dry_clean_only</code> will produce all shirts that are both red and dry clean only. Nested finds and calculations also work with these compositions: <code>Shirt.red.dry_clean_only.count</code> returns the number of garments for which these criteria obtain. Similarly with <code>Shirt.red.dry_clean_only.average(:thread_count)</code>.</p> <p>All scopes are available as class methods on the <a href=\"../../base\">ActiveRecord::Base</a> descendant upon which the scopes were defined. But they are also available to <code>has_many</code> associations. If,</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_many :shirts\nend\n</pre> <p>then <code>elton.shirts.red.dry_clean_only</code> will return all of Elton's red, dry clean only shirts.</p> <p>Named scopes can also have extensions, just as with <code>has_many</code> declarations:</p> <pre class=\"ruby\">class Shirt &lt; ActiveRecord::Base\n  scope :red, -&gt; { where(color: 'red') } do\n    def dom_id\n      'red_shirts'\n    end\n  end\nend\n</pre> <p>Scopes can also be used while creating/building a record.</p> <pre class=\"ruby\">class Article &lt; ActiveRecord::Base\n  scope :published, -&gt; { where(published: true) }\nend\n\nArticle.published.new.published    # =&gt; true\nArticle.published.create.published # =&gt; true\n</pre> <p>Class methods on your model are automatically available on scopes. Assuming the following setup:</p> <pre class=\"ruby\">class Article &lt; ActiveRecord::Base\n  scope :published, -&gt; { where(published: true) }\n  scope :featured, -&gt; { where(featured: true) }\n\n  def self.latest_article\n    order('published_at desc').first\n  end\n\n  def self.titles\n    pluck(:title)\n  end\nend\n</pre> <p>We are able to call the methods like this:</p> <pre class=\"ruby\">Article.published.featured.latest_article\nArticle.featured.titles\n</pre> <div class=\"method-source-code\" id=\"scope-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/scoping/named.rb, line 141\ndef scope(name, body, &amp;block)\n  unless body.respond_to?(:call)\n    raise ArgumentError, 'The scope body needs to be callable.'\n  end\n\n  if dangerous_class_method?(name)\n    raise ArgumentError, \"You tried to define a scope named \\\"#{name}\\\" \"                \"on the model \\\"#{self.name}\\\", but Active Record already defined \"                \"a class method with the same name.\"\n  end\n\n  extension = Module.new(&amp;block) if block\n\n  singleton_class.send(:define_method, name) do |*args|\n    scope = all.scoping { body.call(*args) }\n    scope = scope.extending(extension) if extension\n\n    scope || all\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/serialization":"<h1 id=\"module-ActiveRecord::Serialization\" class=\"module\"> module ActiveRecord::Serialization </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"../activemodel/serializers/json\">ActiveModel::Serializers::JSON</a>, <a class=\"include\" href=\"../activemodel/serializers/xml\">ActiveModel::Serializers::Xml</a>\n</dd>\n</dl> <section class=\"description\"> <h1 id=\"module-ActiveRecord::Serialization-label-Active+Record+Serialization\">Active Record <a href=\"serialization\">Serialization</a>\n</h1> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serializable_hash\"> <span class=\"method-name\">serializable_hash</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"serializable_hash-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/serialization.rb, line 11\ndef serializable_hash(options = nil)\n  options = options.try(:clone) || {}\n\n  options[:except] = Array(options[:except]).map { |n| n.to_s }\n  options[:except] |= Array(self.class.inheritance_column)\n\n  super(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xml\"> <span class=\"method-name\">to_xml</span><span class=\"method-args\">(options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Builds an XML document to represent the model. Some configuration is available through <code>options</code>. However more complicated cases should override ActiveRecord::Base#to_xml.</p> <p>By default the generated XML document will include the processing instruction and all the object's attributes. For example:</p> <pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;topic&gt;\n  &lt;title&gt;The First Topic&lt;/title&gt;\n  &lt;author-name&gt;David&lt;/author-name&gt;\n  &lt;id type=\"integer\"&gt;1&lt;/id&gt;\n  &lt;approved type=\"boolean\"&gt;false&lt;/approved&gt;\n  &lt;replies-count type=\"integer\"&gt;0&lt;/replies-count&gt;\n  &lt;bonus-time type=\"dateTime\"&gt;2000-01-01T08:28:00+12:00&lt;/bonus-time&gt;\n  &lt;written-on type=\"dateTime\"&gt;2003-07-16T09:28:00+1200&lt;/written-on&gt;\n  &lt;content&gt;Have a nice day&lt;/content&gt;\n  &lt;author-email-address&gt;david@loudthinking.com&lt;/author-email-address&gt;\n  &lt;parent-id&gt;&lt;/parent-id&gt;\n  &lt;last-read type=\"date\"&gt;2004-04-15&lt;/last-read&gt;\n&lt;/topic&gt;</pre> <p>This behavior can be controlled with <code>:only</code>, <code>:except</code>, <code>:skip_instruct</code>, <code>:skip_types</code>, <code>:dasherize</code> and <code>:camelize</code> . The <code>:only</code> and <code>:except</code> options are the same as for the <code>attributes</code> method. The default is to dasherize all column names, but you can disable this setting <code>:dasherize</code> to <code>false</code>. Setting <code>:camelize</code> to <code>true</code> will camelize all column names - this also overrides <code>:dasherize</code>. To not have the column type included in the XML output set <code>:skip_types</code> to <code>true</code>.</p> <p>For instance:</p> <pre>topic.to_xml(skip_instruct: true, except: [ :id, :bonus_time, :written_on, :replies_count ])\n\n&lt;topic&gt;\n  &lt;title&gt;The First Topic&lt;/title&gt;\n  &lt;author-name&gt;David&lt;/author-name&gt;\n  &lt;approved type=\"boolean\"&gt;false&lt;/approved&gt;\n  &lt;content&gt;Have a nice day&lt;/content&gt;\n  &lt;author-email-address&gt;david@loudthinking.com&lt;/author-email-address&gt;\n  &lt;parent-id&gt;&lt;/parent-id&gt;\n  &lt;last-read type=\"date\"&gt;2004-04-15&lt;/last-read&gt;\n&lt;/topic&gt;</pre> <p>To include first level associations use <code>:include</code>:</p> <pre>firm.to_xml include: [ :account, :clients ]\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;firm&gt;\n  &lt;id type=\"integer\"&gt;1&lt;/id&gt;\n  &lt;rating type=\"integer\"&gt;1&lt;/rating&gt;\n  &lt;name&gt;37signals&lt;/name&gt;\n  &lt;clients type=\"array\"&gt;\n    &lt;client&gt;\n      &lt;rating type=\"integer\"&gt;1&lt;/rating&gt;\n      &lt;name&gt;Summit&lt;/name&gt;\n    &lt;/client&gt;\n    &lt;client&gt;\n      &lt;rating type=\"integer\"&gt;1&lt;/rating&gt;\n      &lt;name&gt;Microsoft&lt;/name&gt;\n    &lt;/client&gt;\n  &lt;/clients&gt;\n  &lt;account&gt;\n    &lt;id type=\"integer\"&gt;1&lt;/id&gt;\n    &lt;credit-limit type=\"integer\"&gt;50&lt;/credit-limit&gt;\n  &lt;/account&gt;\n&lt;/firm&gt;</pre> <p>Additionally, the record being serialized will be passed to a Proc's second parameter. This allows for ad hoc additions to the resultant document that incorporate the context of the record being serialized. And by leveraging the closure created by a Proc, <a href=\"serialization#method-i-to_xml\">#to_xml</a> can be used to add elements that normally fall outside of the scope of the model – for example, generating and appending URLs associated with models.</p> <pre>proc = Proc.new { |options, record| options[:builder].tag!('name-reverse', record.name.reverse) }\nfirm.to_xml procs: [ proc ]\n\n&lt;firm&gt;\n  # ... normal attributes as shown above ...\n  &lt;name-reverse&gt;slangis73&lt;/name-reverse&gt;\n&lt;/firm&gt;</pre> <p>To include deeper levels of associations pass a hash like this:</p> <pre>firm.to_xml include: {account: {}, clients: {include: :address}}\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;firm&gt;\n  &lt;id type=\"integer\"&gt;1&lt;/id&gt;\n  &lt;rating type=\"integer\"&gt;1&lt;/rating&gt;\n  &lt;name&gt;37signals&lt;/name&gt;\n  &lt;clients type=\"array\"&gt;\n    &lt;client&gt;\n      &lt;rating type=\"integer\"&gt;1&lt;/rating&gt;\n      &lt;name&gt;Summit&lt;/name&gt;\n      &lt;address&gt;\n        ...\n      &lt;/address&gt;\n    &lt;/client&gt;\n    &lt;client&gt;\n      &lt;rating type=\"integer\"&gt;1&lt;/rating&gt;\n      &lt;name&gt;Microsoft&lt;/name&gt;\n      &lt;address&gt;\n        ...\n      &lt;/address&gt;\n    &lt;/client&gt;\n  &lt;/clients&gt;\n  &lt;account&gt;\n    &lt;id type=\"integer\"&gt;1&lt;/id&gt;\n    &lt;credit-limit type=\"integer\"&gt;50&lt;/credit-limit&gt;\n  &lt;/account&gt;\n&lt;/firm&gt;</pre> <p>To include any methods on the model being called use <code>:methods</code>:</p> <pre>firm.to_xml methods: [ :calculated_earnings, :real_earnings ]\n\n&lt;firm&gt;\n  # ... normal attributes as shown above ...\n  &lt;calculated-earnings&gt;100000000000000000&lt;/calculated-earnings&gt;\n  &lt;real-earnings&gt;5&lt;/real-earnings&gt;\n&lt;/firm&gt;</pre> <p>To call any additional Procs use <code>:procs</code>. The Procs are passed a modified version of the options hash that was given to <code>to_xml</code>:</p> <pre>proc = Proc.new { |options| options[:builder].tag!('abc', 'def') }\nfirm.to_xml procs: [ proc ]\n\n&lt;firm&gt;\n  # ... normal attributes as shown above ...\n  &lt;abc&gt;def&lt;/abc&gt;\n&lt;/firm&gt;</pre> <p>Alternatively, you can yield the builder object as part of the <code>to_xml</code> call:</p> <pre>firm.to_xml do |xml|\n  xml.creator do\n    xml.first_name \"David\"\n    xml.last_name \"Heinemeier Hansson\"\n  end\nend\n\n&lt;firm&gt;\n  # ... normal attributes as shown above ...\n  &lt;creator&gt;\n    &lt;first_name&gt;David&lt;/first_name&gt;\n    &lt;last_name&gt;Heinemeier Hansson&lt;/last_name&gt;\n  &lt;/creator&gt;\n&lt;/firm&gt;</pre> <p>As noted above, you may override <code>to_xml</code> in your <a href=\"base\">ActiveRecord::Base</a> subclasses to have complete control about what's generated. The general form of doing this is:</p> <pre class=\"ruby\">class IHaveMyOwnXML &lt; ActiveRecord::Base\n  def to_xml(options = {})\n    require 'builder'\n    options[:indent] ||= 2\n    xml = options[:builder] ||= ::Builder::XmlMarkup.new(indent: options[:indent])\n    xml.instruct! unless options[:skip_instruct]\n    xml.level_one do\n      xml.tag!(:second_level, 'content')\n    end\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"to_xml-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/serializers/xml_serializer.rb, line 174\ndef to_xml(options = {}, &amp;block)\n  XmlSerializer.new(self, options).serialize(&amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/serializationtypemismatch":"<h1 id=\"class-ActiveRecord::SerializationTypeMismatch\" class=\"class\"> class ActiveRecord::SerializationTypeMismatch </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when unserialized object's type mismatches one specified for serializable field.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/spawnmethods":"<h1 id=\"module-ActiveRecord::SpawnMethods\" class=\"module\"> module ActiveRecord::SpawnMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-except\"> <span class=\"method-name\">except</span><span class=\"method-args\">(*skips)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes from the query the condition(s) specified in <code>skips</code>.</p> <pre class=\"ruby\">Post.order('id asc').except(:order)                  # discards the order condition\nPost.where('id &gt; 10').order('id asc').except(:where) # discards the where condition but keeps the order\n</pre> <div class=\"method-source-code\" id=\"except-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/spawn_methods.rb, line 52\ndef except(*skips)\n  relation_with values.except(*skips)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-merge\"> <span class=\"method-name\">merge</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Merges in the conditions from <code>other</code>, if <code>other</code> is an <code>ActiveRecord::Relation</code>. Returns an array representing the intersection of the resulting records with <code>other</code>, if <code>other</code> is an array.</p> <pre class=\"ruby\">Post.where(published: true).joins(:comments).merge( Comment.where(spam: false) )\n# Performs a single join query with both where conditions.\n\nrecent_posts = Post.order('created_at DESC').first(5)\nPost.where(published: true).merge(recent_posts)\n# Returns the intersection of all published posts with the 5 most recently created posts.\n# (This is just an example. You'd probably want to do this with a single query!)\n</pre> <p>Procs will be evaluated by merge:</p> <pre class=\"ruby\">Post.where(published: true).merge(-&gt; { joins(:comments) })\n# =&gt; Post.where(published: true).joins(:comments)\n</pre> <p>This is mainly intended for sharing common conditions between multiple associations.</p> <div class=\"method-source-code\" id=\"merge-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/spawn_methods.rb, line 29\ndef merge(other)\n  if other.is_a?(Array)\n    to_a &amp; other\n  elsif other\n    spawn.merge!(other)\n  else\n    self\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-only\"> <span class=\"method-name\">only</span><span class=\"method-args\">(*onlies)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes any condition from the query other than the one(s) specified in <code>onlies</code>.</p> <pre class=\"ruby\">Post.order('id asc').only(:where)         # discards the order condition\nPost.order('id asc').only(:where, :order) # uses the specified order\n</pre> <div class=\"method-source-code\" id=\"only-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/relation/spawn_methods.rb, line 60\ndef only(*onlies)\n  if onlies.any? { |o| o == :where }\n    onlies &lt;&lt; :bind\n  end\n  relation_with values.slice(*onlies)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/staleobjecterror":"<h1 id=\"class-ActiveRecord::StaleObjectError\" class=\"class\"> class ActiveRecord::StaleObjectError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised on attempt to save stale record. Record is stale when it's being saved in another query after instantiation, for example, when two users edit the same wiki page and one starts editing and saves the page before the other.</p> <p>Read more about optimistic locking in <a href=\"locking\">ActiveRecord::Locking</a> module documentation.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-attempted_action\"> <span class=\"method-name\">attempted_action</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-record\"> <span class=\"method-name\">record</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(record, attempted_action)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/errors.rb, line 128\ndef initialize(record, attempted_action)\n  super(\"Attempted to #{attempted_action} a stale object: #{record.class.name}\")\n  @record = record\n  @attempted_action = attempted_action\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/statementinvalid":"<h1 id=\"class-ActiveRecord::StatementInvalid\" class=\"class\"> class ActiveRecord::StatementInvalid </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Superclass for all database execution errors.</p> <p>Wraps the underlying database error as <code>original_exception</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-original_exception\"> <span class=\"method-name\">original_exception</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(message, original_exception = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/errors.rb, line 86\ndef initialize(message, original_exception = nil)\n  super(message)\n  @original_exception = original_exception\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/store":"<h1 id=\"module-ActiveRecord::Store\" class=\"module\"> module ActiveRecord::Store </h1> <section class=\"description\"> <p><a href=\"store\">Store</a> gives you a thin wrapper around serialize for the purpose of storing hashes in a single column. It's like a simple key/value store baked into your record when you don't care about being able to query that store outside the context of a single record.</p> <p>You can then declare accessors to this store that are then accessible just like any other attribute of the model. This is very helpful for easily exposing store keys to a form or elsewhere that's already built around just accessing attributes on the model.</p> <p>Make sure that you declare the database column used for the serialized store as a text, so there's plenty of room.</p> <p>You can set custom coder to encode/decode your serialized attributes to/from different formats. JSON, YAML, <a href=\"../marshal\">Marshal</a> are supported out of the box. Generally it can be any wrapper that provides <code>load</code> and <code>dump</code>.</p> <p>NOTE - If you are using PostgreSQL specific columns like <code>hstore</code> or <code>json</code> there is no need for the serialization provided by <code>store</code>. Simply use <code>store_accessor</code> instead to generate the accessor methods. Be aware that these columns use a string keyed hash and do not allow access using a symbol.</p> <p>Examples:</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  store :settings, accessors: [ :color, :homepage ], coder: JSON\nend\n\nu = User.new(color: 'black', homepage: '37signals.com')\nu.color                          # Accessor stored attribute\nu.settings[:country] = 'Denmark' # Any attribute, even if not specified with an accessor\n\n# There is no difference between strings and symbols for accessing custom attributes\nu.settings[:country]  # =&gt; 'Denmark'\nu.settings['country'] # =&gt; 'Denmark'\n\n# Add additional accessors to an existing store through store_accessor\nclass SuperUser &lt; User\n  store_accessor :settings, :privileges, :servants\nend\n</pre> <p>The stored attribute names can be retrieved using <code>stored_attributes</code>.</p> <pre class=\"ruby\">User.stored_attributes[:settings] # [:color, :homepage]\n</pre> <h2 id=\"module-ActiveRecord::Store-label-Overwriting+default+accessors\">Overwriting default accessors</h2> <p>All stored values are automatically available through accessors on the Active Record object, but sometimes you want to specialize this behavior. This can be done by overwriting the default accessors (using the same name as the attribute) and calling <code>super</code> to actually change things.</p> <pre class=\"ruby\">class Song &lt; ActiveRecord::Base\n  # Uses a stored integer to hold the volume adjustment of the song\n  store :settings, accessors: [:volume_adjustment]\n\n  def volume_adjustment=(decibels)\n    super(decibels.to_i)\n  end\n\n  def volume_adjustment\n    super.to_i\n  end\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-local_stored_attributes\"> <span class=\"method-name\">local_stored_attributes</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read_store_attribute\"> <span class=\"method-name\">read_store_attribute</span><span class=\"method-args\">(store_attribute, key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"read_store_attribute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/store.rb, line 120\ndef read_store_attribute(store_attribute, key)\n  accessor = store_accessor_for(store_attribute)\n  accessor.read(self, store_attribute, key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write_store_attribute\"> <span class=\"method-name\">write_store_attribute</span><span class=\"method-args\">(store_attribute, key, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"write_store_attribute-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/store.rb, line 125\ndef write_store_attribute(store_attribute, key, value)\n  accessor = store_accessor_for(store_attribute)\n  accessor.write(self, store_attribute, key, value)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/testfixtures/classmethods":"<h1 id=\"module-ActiveRecord::TestFixtures::ClassMethods\" class=\"module\"> module ActiveRecord::TestFixtures::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fixtures\"> <span class=\"method-name\">fixtures</span><span class=\"method-args\">(*fixture_set_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"fixtures-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 868\ndef fixtures(*fixture_set_names)\n  if fixture_set_names.first == :all\n    fixture_set_names = Dir[\"#{fixture_path}/{**,*}/*.{yml}\"]\n    fixture_set_names.map! { |f| f[(fixture_path.to_s.size + 1)..-5] }\n  else\n    fixture_set_names = fixture_set_names.flatten.map { |n| n.to_s }\n  end\n\n  self.fixture_table_names |= fixture_set_names\n  setup_fixture_accessors(fixture_set_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_fixture_class\"> <span class=\"method-name\">set_fixture_class</span><span class=\"method-args\">(class_names = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the model class for a fixture when the class name cannot be inferred from the fixture name.</p> <p>Examples:</p> <pre class=\"ruby\">set_fixture_class some_fixture:        SomeModel,\n                  'namespaced/fixture' =&gt; Another::Model\n</pre> <p>The keys must be the fixture names, that coincide with the short paths to the fixture files.</p> <div class=\"method-source-code\" id=\"set_fixture_class-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 864\ndef set_fixture_class(class_names = {})\n  self.fixture_class_names = self.fixture_class_names.merge(class_names.stringify_keys)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-setup_fixture_accessors\"> <span class=\"method-name\">setup_fixture_accessors</span><span class=\"method-args\">(fixture_set_names = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"setup_fixture_accessors-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 880\ndef setup_fixture_accessors(fixture_set_names = nil)\n  fixture_set_names = Array(fixture_set_names || fixture_table_names)\n  methods = Module.new do\n    fixture_set_names.each do |fs_name|\n      fs_name = fs_name.to_s\n      accessor_name = fs_name.tr('/', '_').to_sym\n\n      define_method(accessor_name) do |*fixture_names|\n        force_reload = fixture_names.pop if fixture_names.last == true || fixture_names.last == :reload\n\n        @fixture_cache[fs_name] ||= {}\n\n        instances = fixture_names.map do |f_name|\n          f_name = f_name.to_s\n          @fixture_cache[fs_name].delete(f_name) if force_reload\n\n          if @loaded_fixtures[fs_name][f_name]\n            @fixture_cache[fs_name][f_name] ||= @loaded_fixtures[fs_name][f_name].find\n          else\n            raise StandardError, \"No fixture named '#{f_name}' found for fixture set '#{fs_name}'\"\n          end\n        end\n\n        instances.size == 1 ? instances.first : instances\n      end\n      private accessor_name\n    end\n  end\n  include methods\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-uses_transaction\"> <span class=\"method-name\">uses_transaction</span><span class=\"method-args\">(*methods)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"uses_transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 911\ndef uses_transaction(*methods)\n  @uses_transaction = [] unless defined?(@uses_transaction)\n  @uses_transaction.concat methods.map { |m| m.to_s }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-uses_transaction-3F\"> <span class=\"method-name\">uses_transaction?</span><span class=\"method-args\">(method)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"uses_transaction-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/fixtures.rb, line 916\ndef uses_transaction?(method)\n  @uses_transaction = [] unless defined?(@uses_transaction)\n  @uses_transaction.include?(method.to_s)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/timestamp":"<h1 id=\"module-ActiveRecord::Timestamp\" class=\"module\"> module ActiveRecord::Timestamp </h1> <section class=\"description\"> <h1 id=\"module-ActiveRecord::Timestamp-label-Active+Record+Timestamp\">Active Record <a href=\"timestamp\">Timestamp</a>\n</h1> <p>Active Record automatically timestamps create and update operations if the table has fields named <code>created_at/created_on</code> or <code>updated_at/updated_on</code>.</p> <p>Timestamping can be turned off by setting:</p> <pre class=\"ruby\">config.active_record.record_timestamps = false\n</pre> <p>Timestamps are in UTC by default but you can use the local timezone by setting:</p> <pre class=\"ruby\">config.active_record.default_timezone = :local\n</pre> <h2 id=\"module-ActiveRecord::Timestamp-label-Time+Zone+aware+attributes\">\n<a href=\"../time\">Time</a> Zone aware attributes</h2> <p>By default, <a href=\"base\">ActiveRecord::Base</a> keeps all the datetime columns time zone aware by executing following code.</p> <pre class=\"ruby\">config.active_record.time_zone_aware_attributes = true\n</pre> <p>This feature can easily be turned off by assigning value <code>false</code> .</p> <p>If your attributes are time zone aware and you desire to skip time zone conversion to the current <a href=\"../time#method-c-zone\">Time.zone</a> when reading certain attributes then you can do following:</p> <pre class=\"ruby\">class Topic &lt; ActiveRecord::Base\n  self.skip_time_zone_conversion_for_attributes = [:written_on]\nend\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/transactionisolationerror":"<h1 id=\"class-ActiveRecord::TransactionIsolationError\" class=\"class\"> class ActiveRecord::TransactionIsolationError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"transactionisolationerror\">TransactionIsolationError</a> will be raised under the following conditions:</p> <ul>\n<li> <p>The adapter does not support setting the isolation level</p> </li>\n<li> <p>You are joining an existing open transaction</p> </li>\n<li> <p>You are creating a nested (savepoint) transaction</p> </li>\n</ul> <p>The mysql, mysql2 and postgresql adapters support setting the transaction isolation level.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/transactions":"<h1 id=\"module-ActiveRecord::Transactions\" class=\"module\"> module ActiveRecord::Transactions </h1> <section class=\"description\"> <p>See <a href=\"transactions/classmethods\">ActiveRecord::Transactions::ClassMethods</a> for documentation.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/transactions/classmethods":"<h1 id=\"module-ActiveRecord::Transactions::ClassMethods\" class=\"module\"> module ActiveRecord::Transactions::ClassMethods </h1> <section class=\"description\"> <h1 id=\"module-ActiveRecord::Transactions::ClassMethods-label-Active+Record+Transactions\">Active Record <a href=\"../transactions\">Transactions</a>\n</h1> <p><a href=\"../transactions\">Transactions</a> are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. The classic example is a transfer between two accounts where you can only have a deposit if the withdrawal succeeded and vice versa. <a href=\"../transactions\">Transactions</a> enforce the integrity of the database and guard the data against program errors or database break-downs. So basically you should use transaction blocks whenever you have a number of statements that must be executed together or not at all.</p> <p>For example:</p> <pre class=\"ruby\">ActiveRecord::Base.transaction do\n  david.withdrawal(100)\n  mary.deposit(100)\nend\n</pre> <p>This example will only take money from David and give it to Mary if neither <code>withdrawal</code> nor <code>deposit</code> raise an exception. Exceptions will force a ROLLBACK that returns the database to the state before the transaction began. Be aware, though, that the objects will <em>not</em> have their instance data returned to their pre-transactional state.</p> <h2 id=\"module-ActiveRecord::Transactions::ClassMethods-label-Different+Active+Record+classes+in+a+single+transaction\">Different Active Record classes in a single transaction</h2> <p>Though the transaction class method is called on some Active Record class, the objects within the transaction block need not all be instances of that class. This is because transactions are per-database connection, not per-model.</p> <p>In this example a <code>balance</code> record is transactionally saved even though <code>transaction</code> is called on the <code>Account</code> class:</p> <pre class=\"ruby\">Account.transaction do\n  balance.save!\n  account.save!\nend\n</pre> <p>The <code>transaction</code> method is also available as a model instance method. For example, you can also do this:</p> <pre class=\"ruby\">balance.transaction do\n  balance.save!\n  account.save!\nend\n</pre> <h2 id=\"module-ActiveRecord::Transactions::ClassMethods-label-Transactions+are+not+distributed+across+database+connections\">\n<a href=\"../transactions\">Transactions</a> are not distributed across database connections</h2> <p>A transaction acts on a single database connection. If you have multiple class-specific databases, the transaction will not protect interaction among them. One workaround is to begin a transaction on each class whose models you alter:</p> <pre class=\"ruby\">Student.transaction do\n  Course.transaction do\n    course.enroll(student)\n    student.units += course.units\n  end\nend\n</pre> <p>This is a poor solution, but fully distributed transactions are beyond the scope of Active Record.</p> <h2 id=\"module-ActiveRecord::Transactions::ClassMethods-label-save+and+destroy+are+automatically+wrapped+in+a+transaction\">\n<code>save</code> and <code>destroy</code> are automatically wrapped in a transaction</h2> <p>Both <code>save</code> and <code>destroy</code> come wrapped in a transaction that ensures that whatever you do in validations or callbacks will happen under its protected cover. So you can use validations to check for values that the transaction depends on or you can raise exceptions in the callbacks to rollback, including <code>after_*</code> callbacks.</p> <p>As a consequence changes to the database are not seen outside your connection until the operation is complete. For example, if you try to update the index of a search engine in <code>after_save</code> the indexer won't see the updated record. The <code>after_commit</code> callback is the only one that is triggered once the update is committed. See below.</p> <h2 id=\"module-ActiveRecord::Transactions::ClassMethods-label-Exception+handling+and+rolling+back\">Exception handling and rolling back</h2> <p>Also have in mind that exceptions thrown within a transaction block will be propagated (after triggering the ROLLBACK), so you should be ready to catch those in your application code.</p> <p>One exception is the <code>ActiveRecord::Rollback</code> exception, which will trigger a ROLLBACK when raised, but not be re-raised by the transaction block.</p> <p><strong>Warning</strong>: one should not catch <code>ActiveRecord::StatementInvalid</code> exceptions inside a transaction block. <code>ActiveRecord::StatementInvalid</code> exceptions indicate that an error occurred at the database level, for example when a unique constraint is violated. On some database systems, such as PostgreSQL, database errors inside a transaction cause the entire transaction to become unusable until it's restarted from the beginning. Here is an example which demonstrates the problem:</p> <pre class=\"ruby\"># Suppose that we have a Number model with a unique column called 'i'.\nNumber.transaction do\n  Number.create(i: 0)\n  begin\n    # This will raise a unique constraint error...\n    Number.create(i: 0)\n  rescue ActiveRecord::StatementInvalid\n    # ...which we ignore.\n  end\n\n  # On PostgreSQL, the transaction is now unusable. The following\n  # statement will cause a PostgreSQL error, even though the unique\n  # constraint is no longer violated:\n  Number.create(i: 1)\n  # =&gt; \"PGError: ERROR:  current transaction is aborted, commands\n  #     ignored until end of transaction block\"\nend\n</pre> <p>One should restart the entire transaction if an <code>ActiveRecord::StatementInvalid</code> occurred.</p> <h2 id=\"module-ActiveRecord::Transactions::ClassMethods-label-Nested+transactions\">Nested transactions</h2> <p><code>transaction</code> calls can be nested. By default, this makes all database statements in the nested transaction block become part of the parent transaction. For example, the following behavior may be surprising:</p> <pre class=\"ruby\">User.transaction do\n  User.create(username: 'Kotori')\n  User.transaction do\n    User.create(username: 'Nemu')\n    raise ActiveRecord::Rollback\n  end\nend\n</pre> <p>creates both “Kotori” and “Nemu”. Reason is the <code>ActiveRecord::Rollback</code> exception in the nested block does not issue a ROLLBACK. Since these exceptions are captured in transaction blocks, the parent block does not see it and the real transaction is committed.</p> <p>In order to get a ROLLBACK for the nested transaction you may ask for a real sub-transaction by passing <code>requires_new: true</code>. If anything goes wrong, the database rolls back to the beginning of the sub-transaction without rolling back the parent transaction. If we add it to the previous example:</p> <pre class=\"ruby\">User.transaction do\n  User.create(username: 'Kotori')\n  User.transaction(requires_new: true) do\n    User.create(username: 'Nemu')\n    raise ActiveRecord::Rollback\n  end\nend\n</pre> <p>only “Kotori” is created. This works on MySQL and PostgreSQL. SQLite3 version &gt;= '3.6.8' also supports it.</p> <p>Most databases don't support true nested transactions. At the time of writing, the only database that we're aware of that supports true nested transactions, is MS-SQL. Because of this, Active Record emulates nested transactions by using savepoints on MySQL and PostgreSQL. See <a href=\"http://dev.mysql.com/doc/refman/5.6/en/savepoint.html\">dev.mysql.com/doc/refman/5.6/en/savepoint.html</a> for more information about savepoints.</p> <h3 id=\"module-ActiveRecord::Transactions::ClassMethods-label-Callbacks\"><a href=\"../callbacks\">Callbacks</a></h3> <p>There are two types of callbacks associated with committing and rolling back transactions: <code>after_commit</code> and <code>after_rollback</code>.</p> <p><code>after_commit</code> callbacks are called on every record saved or destroyed within a transaction immediately after the transaction is committed. <code>after_rollback</code> callbacks are called on every record saved or destroyed within a transaction immediately after the transaction or savepoint is rolled back.</p> <p>These callbacks are useful for interacting with other systems since you will be guaranteed that the callback is only executed when the database is in a permanent state. For example, <code>after_commit</code> is a good spot to put in a hook to clearing a cache since clearing it from within a transaction could trigger the cache to be regenerated before the database is updated.</p> <h3 id=\"module-ActiveRecord::Transactions::ClassMethods-label-Caveats\">Caveats</h3> <p>If you're on MySQL, then do not use DDL operations in nested transactions blocks that are emulated with savepoints. That is, do not execute statements like 'CREATE TABLE' inside such blocks. This is because MySQL automatically releases all savepoints upon executing a DDL operation. When <code>transaction</code> is finished and tries to release the savepoint it created earlier, a database error will occur because the savepoint has already been automatically released. The following example demonstrates the problem:</p> <pre>Model.connection.transaction do                           # BEGIN\n  Model.connection.transaction(requires_new: true) do  # CREATE SAVEPOINT active_record_1\n    Model.connection.create_table(...)                    # active_record_1 now automatically released\n  end                                                     # RELEASE savepoint active_record_1\n                                                          # ^^^^ BOOM! database error!\nend</pre> <p>Note that “TRUNCATE” is also a MySQL DDL statement!</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_commit\"> <span class=\"method-name\">after_commit</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This callback is called after a record has been created, updated, or destroyed.</p> <p>You can specify that the callback should only be fired by a certain action with the <code>:on</code> option:</p> <pre class=\"ruby\">after_commit :do_foo, on: :create\nafter_commit :do_bar, on: :update\nafter_commit :do_baz, on: :destroy\n\nafter_commit :do_foo_bar, on: [:create, :update]\nafter_commit :do_bar_baz, on: [:update, :destroy]\n</pre> <p>Note that transactional fixtures do not play well with this feature. Please use the <code>test_after_commit</code> gem to have these hooks fired in tests.</p> <div class=\"method-source-code\" id=\"after_commit-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/transactions.rb, line 237\ndef after_commit(*args, &amp;block)\n  set_options_for_callbacks!(args)\n  set_callback(:commit, :after, *args, &amp;block)\n  unless ActiveRecord::Base.raise_in_transactional_callbacks\n    ActiveSupport::Deprecation.warn(CALLBACK_WARN_MESSAGE)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_rollback\"> <span class=\"method-name\">after_rollback</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This callback is called after a create, update, or destroy are rolled back.</p> <p>Please check the documentation of <code>after_commit</code> for options.</p> <div class=\"method-source-code\" id=\"after_rollback-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/transactions.rb, line 248\ndef after_rollback(*args, &amp;block)\n  set_options_for_callbacks!(args)\n  set_callback(:rollback, :after, *args, &amp;block)\n  unless ActiveRecord::Base.raise_in_transactional_callbacks\n    ActiveSupport::Deprecation.warn(CALLBACK_WARN_MESSAGE)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transaction\"> <span class=\"method-name\">transaction</span><span class=\"method-args\">(options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>See <a href=\"classmethods\">ActiveRecord::Transactions::ClassMethods</a> for detailed documentation.</p> <div class=\"method-source-code\" id=\"transaction-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/transactions.rb, line 218\ndef transaction(options = {}, &amp;block)\n  # See the ConnectionAdapters::DatabaseStatements#transaction API docs.\n  connection.transaction(options, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/unknownattributeerror":"<h1 id=\"class-ActiveRecord::UnknownAttributeError\" class=\"class\"> class ActiveRecord::UnknownAttributeError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">NoMethodError</dd>\n</dl> <section class=\"description\"> <p>Raised when unknown attributes are supplied via mass assignment.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-attribute\"> <span class=\"method-name\">attribute</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-record\"> <span class=\"method-name\">record</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(record, attribute)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/errors.rb, line 186\ndef initialize(record, attribute)\n  @record = record\n  @attribute = attribute.to_s\n  super(\"unknown attribute '#{attribute}' for #{@record.class}.\")\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/unknownprimarykey":"<h1 id=\"class-ActiveRecord::UnknownPrimaryKey\" class=\"class\"> class ActiveRecord::UnknownPrimaryKey </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"activerecorderror\">ActiveRecord::ActiveRecordError</a></dd>\n</dl> <section class=\"description\"> <p>Raised when a primary key is needed, but not specified in the schema or model.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-model\"> <span class=\"method-name\">model</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(model)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/errors.rb, line 222\ndef initialize(model)\n  super(\"Unknown primary key for table #{model.table_name} in model #{model}.\")\n  @model = model\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/validations":"<h1 id=\"module-ActiveRecord::Validations\" class=\"module\"> module ActiveRecord::Validations </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../activemodel/validations\">ActiveModel::Validations</a></dd>\n</dl> <section class=\"description\"> <h1 id=\"module-ActiveRecord::Validations-label-Active+Record+Validations\">Active Record <a href=\"validations\">Validations</a>\n</h1> <p>Active Record includes the majority of its validations from <code>ActiveModel::Validations</code> all of which accept the <code>:on</code> argument to define the context where the validations are active. Active Record will always supply either the context of <code>:create</code> or <code>:update</code> dependent on whether the model is a <code>new_record?</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-save\"> <span class=\"method-name\">save</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The validation process on save can be skipped by passing <code>validate:\nfalse</code>. The regular <a href=\"validations#method-i-save\">#save</a> method is replaced with this when the validations module is mixed in, which it is by default.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"save-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/validations.rb, line 36\ndef save(options={})\n  perform_validations(options) ? super : false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-save-21\"> <span class=\"method-name\">save!</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Attempts to save the record just like <a href=\"validations#method-i-save\">#save</a> but will raise a <code>RecordInvalid</code> exception instead of returning <code>false</code> if the record is not valid.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"save-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/validations.rb, line 42\ndef save!(options={})\n  perform_validations(options) ? super : raise_record_invalid\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-valid-3F\"> <span class=\"method-name\">valid?</span><span class=\"method-args\">(context = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs all the validations within the specified context. Returns <code>true</code> if no errors are found, <code>false</code> otherwise.</p> <p>Aliased as validate.</p> <p>If the argument is <code>false</code> (default is <code>nil</code>), the context is set to <code>:create</code> if <code>new_record?</code> is <code>true</code>, and to <code>:update</code> if it is not.</p> <p><a href=\"validations\">Validations</a> with no <code>:on</code> option will run no matter the context. <a href=\"validations\">Validations</a> with some <code>:on</code> option will only run in the specified context.</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../activemodel/validations#method-i-valid-3F\">ActiveModel::Validations#valid?</a> </div> <div class=\"method-source-code\" id=\"valid-3F-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/validations.rb, line 56\ndef valid?(context = nil)\n  context ||= (new_record? ? :create : :update)\n  output = super(context)\n  errors.empty? &amp;&amp; output\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"validations#method-i-validate\">validate</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-validate\"> <span class=\"method-name\">validate</span><span class=\"method-args\">(context = nil)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"validations#method-i-valid-3F\">valid?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validate-21\"> <span class=\"method-name\">validate!</span><span class=\"method-args\">(context = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs all the validations within the specified context. Returns <code>true</code> if no errors are found, raises <code>RecordInvalid</code> otherwise.</p> <p>If the argument is <code>false</code> (default is <code>nil</code>), the context is set to <code>:create</code> if <code>new_record?</code> is <code>true</code>, and to <code>:update</code> if it is not.</p> <p><a href=\"validations\">Validations</a> with no <code>:on</code> option will run no matter the context. <a href=\"validations\">Validations</a> with some <code>:on</code> option will only run in the specified context.</p> <div class=\"method-source-code\" id=\"validate-21-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/validations.rb, line 72\ndef validate!(context = nil)\n  valid?(context) || raise_record_invalid\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-raise_record_invalid\"> <span class=\"method-name\">raise_record_invalid</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"raise_record_invalid-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/validations.rb, line 78\ndef raise_record_invalid\n  raise(RecordInvalid.new(self))\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/validations/classmethods":"<h1 id=\"module-ActiveRecord::Validations::ClassMethods\" class=\"module\"> module ActiveRecord::Validations::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_associated\"> <span class=\"method-name\">validates_associated</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates whether the associated object or objects are all valid. Works with any kind of association.</p> <pre class=\"ruby\">class Book &lt; ActiveRecord::Base\n  has_many :pages\n  belongs_to :library\n\n  validates_associated :pages, :library\nend\n</pre> <p>WARNING: This validation must not be used on both ends of an association. Doing so will lead to a circular dependency and cause infinite recursion.</p> <p>NOTE: This validation will not fail if the association hasn't been assigned. If you want to ensure that the association is both present and guaranteed to be valid, you also need to use <code>validates_presence_of</code>.</p> <p>Configuration options:</p> <ul>\n<li> <p><code>:message</code> - A custom error message (default is: “is invalid”).</p> </li>\n<li> <p><code>:on</code> - Specifies the contexts where this validation is active. Runs in all validation contexts by default (nil). You can pass a symbol or an array of symbols. (e.g. <code>on: :create</code> or <code>on:\n:custom_validation_context</code> or <code>on: [:create,\n:custom_validation_context]</code>)</p> </li>\n<li> <p><code>:if</code> - Specifies a method, proc or string to call to determine if the validation should occur (e.g. <code>if: :allow_validation</code>, or <code>if: Proc.new { |user| user.signup_step &gt; 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:unless</code> - Specifies a method, proc or string to call to determine if the validation should not occur (e.g. <code>unless:\n:skip_validation</code>, or <code>unless: Proc.new { |user|\nuser.signup_step &lt;= 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"validates_associated-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/validations/associated.rb, line 46\ndef validates_associated(*attr_names)\n  validates_with AssociatedValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_presence_of\"> <span class=\"method-name\">validates_presence_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates that the specified attributes are not blank (as defined by <a href=\"../../object#method-i-blank-3F\">Object#blank?</a>), and, if the attribute is an association, that the associated object is not marked for destruction. Happens by default on save.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  has_one :face\n  validates_presence_of :face\nend\n</pre> <p>The face attribute must be in the object and it cannot be blank or marked for destruction.</p> <p>If you want to validate the presence of a boolean field (where the real values are true and false), you will want to use <code>validates_inclusion_of :field_name, in: [true, false]</code>.</p> <p>This is due to the way <a href=\"../../object#method-i-blank-3F\">Object#blank?</a> handles boolean values: <code>false.blank? # =&gt; true</code>.</p> <p>This validator defers to the <a href=\"../../activemodel\">ActiveModel</a> validation for presence, adding the check to see that an associated object is not marked for destruction. This prevents the parent object from validating successfully and saving, which then deletes the associated object, thus putting the parent object into an invalid state.</p> <p>Configuration options:</p> <ul>\n<li> <p><code>:message</code> - A custom error message (default is: “can't be blank”).</p> </li>\n<li> <p><code>:on</code> - Specifies the contexts where this validation is active. Runs in all validation contexts by default (nil). You can pass a symbol or an array of symbols. (e.g. <code>on: :create</code> or <code>on:\n:custom_validation_context</code> or <code>on: [:create,\n:custom_validation_context]</code>)</p> </li>\n<li> <p><code>:if</code> - Specifies a method, proc or string to call to determine if the validation should occur (e.g. <code>if: :allow_validation</code>, or <code>if: Proc.new { |user| user.signup_step &gt; 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:unless</code> - Specifies a method, proc or string to call to determine if the validation should not occur (e.g. <code>unless:\n:skip_validation</code>, or <code>unless: Proc.new { |user|\nuser.signup_step &lt;= 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:strict</code> - Specifies whether validation should be strict. See <code>ActiveModel::Validation#validates!</code> for more information.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"validates_presence_of-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/validations/presence.rb, line 62\ndef validates_presence_of(*attr_names)\n  validates_with PresenceValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validates_uniqueness_of\"> <span class=\"method-name\">validates_uniqueness_of</span><span class=\"method-args\">(*attr_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validates whether the value of the specified attributes are unique across the system. Useful for making sure that only one user can be named “davidhh”.</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_uniqueness_of :user_name\nend\n</pre> <p>It can also validate whether the value of the specified attributes are unique based on a <code>:scope</code> parameter:</p> <pre class=\"ruby\">class Person &lt; ActiveRecord::Base\n  validates_uniqueness_of :user_name, scope: :account_id\nend\n</pre> <p>Or even multiple scope parameters. For example, making sure that a teacher can only be on the schedule once per semester for a particular class.</p> <pre class=\"ruby\">class TeacherSchedule &lt; ActiveRecord::Base\n  validates_uniqueness_of :teacher_id, scope: [:semester_id, :class_id]\nend\n</pre> <p>It is also possible to limit the uniqueness constraint to a set of records matching certain conditions. In this example archived articles are not being taken into consideration when validating uniqueness of the title attribute:</p> <pre class=\"ruby\">class Article &lt; ActiveRecord::Base\n  validates_uniqueness_of :title, conditions: -&gt; { where.not(status: 'archived') }\nend\n</pre> <p>When the record is created, a check is performed to make sure that no record exists in the database with the given value for the specified attribute (that maps to a column). When the record is updated, the same check is made but disregarding the record itself.</p> <p>Configuration options:</p> <ul>\n<li> <p><code>:message</code> - Specifies a custom error message (default is: “has already been taken”).</p> </li>\n<li> <p><code>:scope</code> - One or more columns by which to limit the scope of the uniqueness constraint.</p> </li>\n<li> <p><code>:conditions</code> - Specify the conditions to be included as a <code>WHERE</code> SQL fragment to limit the uniqueness constraint lookup (e.g. <code>conditions: -&gt; { where(status: 'active') }</code>).</p> </li>\n<li> <p><code>:case_sensitive</code> - Looks for an exact match. Ignored by non-text columns (<code>true</code> by default).</p> </li>\n<li> <p><code>:allow_nil</code> - If set to <code>true</code>, skips this validation if the attribute is <code>nil</code> (default is <code>false</code>).</p> </li>\n<li> <p><code>:allow_blank</code> - If set to <code>true</code>, skips this validation if the attribute is blank (default is <code>false</code>).</p> </li>\n<li> <p><code>:if</code> - Specifies a method, proc or string to call to determine if the validation should occur (e.g. <code>if: :allow_validation</code>, or <code>if: Proc.new { |user| user.signup_step &gt; 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n<li> <p><code>:unless</code> - Specifies a method, proc or string to call to determine if the validation should not occur (e.g. <code>unless:\n:skip_validation</code>, or <code>unless: Proc.new { |user|\nuser.signup_step &lt;= 2 }</code>). The method, proc or string should return or evaluate to a <code>true</code> or <code>false</code> value.</p> </li>\n</ul> <h3 id=\"method-i-validates_uniqueness_of-label-Concurrency+and+integrity\">Concurrency and integrity</h3> <p>Using this validation method in conjunction with <a href=\"../validations#method-i-save\">ActiveRecord::Validations#save</a> does not guarantee the absence of duplicate record insertions, because uniqueness checks on the application level are inherently prone to race conditions. For example, suppose that two users try to post a Comment at the same time, and a Comment's title must be unique. At the database-level, the actions performed by these users could be interleaved in the following manner:</p> <pre>             User 1                 |               User 2\n------------------------------------+--------------------------------------\n# User 1 checks whether there's     |\n# already a comment with the title  |\n# 'My Post'. This is not the case.  |\nSELECT * FROM comments              |\nWHERE title = 'My Post'             |\n                                    |\n                                    | # User 2 does the same thing and also\n                                    | # infers that their title is unique.\n                                    | SELECT * FROM comments\n                                    | WHERE title = 'My Post'\n                                    |\n# User 1 inserts their comment.     |\nINSERT INTO comments                |\n(title, content) VALUES             |\n('My Post', 'hi!')                  |\n                                    |\n                                    | # User 2 does the same thing.\n                                    | INSERT INTO comments\n                                    | (title, content) VALUES\n                                    | ('My Post', 'hello!')\n                                    |\n                                    | # ^^^^^^\n                                    | # Boom! We now have a duplicate\n                                    | # title!</pre> <p>This could even happen if you use transactions with the 'serializable' isolation level. The best way to work around this problem is to add a unique index to the database table using <a href=\"../connectionadapters/schemastatements#method-i-add_index\">ActiveRecord::ConnectionAdapters::SchemaStatements#add_index</a>. In the rare case that a race condition occurs, the database will guarantee the field's uniqueness.</p> <p>When the database catches such a duplicate insertion, <a href=\"../validations#method-i-save\">ActiveRecord::Validations#save</a> will raise an <a href=\"../statementinvalid\">ActiveRecord::StatementInvalid</a> exception. You can either choose to let this error propagate (which will result in the default Rails exception page being shown), or you can catch it and restart the transaction (e.g. by telling the user that the title already exists, and asking them to re-enter the title). This technique is also known as <a href=\"http://en.wikipedia.org/wiki/Optimistic_concurrency_control\">optimistic concurrency control</a>.</p> <p>The bundled ActiveRecord::ConnectionAdapters distinguish unique index constraint errors from other types of database errors by throwing an <a href=\"../recordnotunique\">ActiveRecord::RecordNotUnique</a> exception. For other adapters you will have to parse the (database-specific) exception message to detect such a case.</p> <p>The following bundled adapters throw the <a href=\"../recordnotunique\">ActiveRecord::RecordNotUnique</a> exception:</p> <ul>\n<li> <p><a href=\"../connectionadapters/mysqladapter\">ActiveRecord::ConnectionAdapters::MysqlAdapter</a>.</p> </li>\n<li> <p><a href=\"../connectionadapters/mysql2adapter\">ActiveRecord::ConnectionAdapters::Mysql2Adapter</a>.</p> </li>\n<li> <p><a href=\"../connectionadapters/sqlite3adapter\">ActiveRecord::ConnectionAdapters::SQLite3Adapter</a>.</p> </li>\n<li> <p><a href=\"../connectionadapters/postgresqladapter\">ActiveRecord::ConnectionAdapters::PostgreSQLAdapter</a>.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"validates_uniqueness_of-source\"> <pre class=\"ruby\"># File activerecord/lib/active_record/validations/uniqueness.rb, line 228\ndef validates_uniqueness_of(*attr_names)\n  validates_with UniquenessValidator, _merge_attributes(attr_names)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activerecord/wrappeddatabaseexception":"<h1 id=\"class-ActiveRecord::WrappedDatabaseException\" class=\"class\"> class ActiveRecord::WrappedDatabaseException </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"statementinvalid\">ActiveRecord::StatementInvalid</a></dd>\n</dl> <section class=\"description\"> <p>Defunct wrapper class kept for compatibility. <code>StatementInvalid</code> wraps the original exception now.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport":"<h1 id=\"module-ActiveSupport\" class=\"module\"> module ActiveSupport </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-execute_hook\"> <span class=\"method-name\">execute_hook</span><span class=\"method-args\">(base, options, block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"execute_hook-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/lazy_load_hooks.rb, line 34\ndef self.execute_hook(base, options, block)\n  if options[:yield]\n    block.call(base)\n  else\n    base.instance_eval(&amp;block)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-gem_version\"> <span class=\"method-name\">gem_version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Active Support as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"gem_version-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/gem_version.rb, line 3\ndef self.gem_version\n  Gem::Version.new VERSION::STRING\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-on_load\"> <span class=\"method-name\">on_load</span><span class=\"method-args\">(name, options = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"on_load-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/lazy_load_hooks.rb, line 26\ndef self.on_load(name, options = {}, &amp;block)\n  @loaded[name].each do |base|\n    execute_hook(base, options, block)\n  end\n\n  @load_hooks[name] &lt;&lt; [block, options]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-run_load_hooks\"> <span class=\"method-name\">run_load_hooks</span><span class=\"method-args\">(name, base = Object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"run_load_hooks-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/lazy_load_hooks.rb, line 42\ndef self.run_load_hooks(name, base = Object)\n  @loaded[name] &lt;&lt; base\n  @load_hooks[name].each do |hook, options|\n    execute_hook(base, options, hook)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-version\"> <span class=\"method-name\">version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded <a href=\"activesupport\">ActiveSupport</a> as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"version-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/version.rb, line 5\ndef self.version\n  gem_version\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/autoload":"<h1 id=\"module-ActiveSupport::Autoload\" class=\"module\"> module ActiveSupport::Autoload </h1> <section class=\"description\"> <p><a href=\"autoload\">Autoload</a> and eager load conveniences for your library.</p> <p>This module allows you to define autoloads based on Rails conventions (i.e. no need to define the path it is automatically guessed based on the filename) and also define a set of constants that needs to be eager loaded:</p> <pre class=\"ruby\">module MyLib\n  extend ActiveSupport::Autoload\n\n  autoload :Model\n\n  eager_autoload do\n    autoload :Cache\n  end\nend\n</pre> <p>Then your library can be eager loaded by simply calling:</p> <pre class=\"ruby\">MyLib.eager_load!\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-autoload\"> <span class=\"method-name\">autoload</span><span class=\"method-args\">(const_name, path = @_at_path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"autoload-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/dependencies/autoload.rb, line 35\ndef autoload(const_name, path = @_at_path)\n  unless path\n    full = [name, @_under_path, const_name.to_s].compact.join(\"::\")\n    path = Inflector.underscore(full)\n  end\n\n  if @_eager_autoload\n    @_autoloads[const_name] = path\n  end\n\n  super const_name, path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-autoload_at\"> <span class=\"method-name\">autoload_at</span><span class=\"method-args\">(path) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"autoload_at-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/dependencies/autoload.rb, line 55\ndef autoload_at(path)\n  @_at_path, old_path = path, @_at_path\n  yield\nensure\n  @_at_path = old_path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-autoload_under\"> <span class=\"method-name\">autoload_under</span><span class=\"method-args\">(path) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"autoload_under-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/dependencies/autoload.rb, line 48\ndef autoload_under(path)\n  @_under_path, old_path = path, @_under_path\n  yield\nensure\n  @_under_path = old_path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-autoloads\"> <span class=\"method-name\">autoloads</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"autoloads-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/dependencies/autoload.rb, line 73\ndef autoloads\n  @_autoloads\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eager_autoload\"> <span class=\"method-name\">eager_autoload</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"eager_autoload-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/dependencies/autoload.rb, line 62\ndef eager_autoload\n  old_eager, @_eager_autoload = @_eager_autoload, true\n  yield\nensure\n  @_eager_autoload = old_eager\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eager_load-21\"> <span class=\"method-name\">eager_load!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"eager_load-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/dependencies/autoload.rb, line 69\ndef eager_load!\n  @_autoloads.each_value { |file| require file }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/backtracecleaner":"<h1 id=\"class-ActiveSupport::BacktraceCleaner\" class=\"class\"> class ActiveSupport::BacktraceCleaner </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Backtraces often include many lines that are not relevant for the context under review. This makes it hard to find the signal amongst the backtrace noise, and adds debugging time. With a <a href=\"backtracecleaner\">BacktraceCleaner</a>, filters and silencers are used to remove the noisy lines, so that only the most relevant lines remain.</p> <p>Filters are used to modify lines of data, while silencers are used to remove lines entirely. The typical filter use case is to remove lengthy path information from the start of each line, and view file paths relevant to the app directory instead of the file system root. The typical silencer use case is to exclude the output of a noisy library from the backtrace, so that you can focus on the rest.</p> <pre class=\"ruby\">bc = BacktraceCleaner.new\nbc.add_filter   { |line| line.gsub(Rails.root.to_s, '') } # strip the Rails.root prefix\nbc.add_silencer { |line| line =~ /mongrel|rubygems/ } # skip any lines from mongrel or rubygems\nbc.clean(exception.backtrace) # perform the cleanup\n</pre> <p>To reconfigure an existing <a href=\"backtracecleaner\">BacktraceCleaner</a> (like the default one in Rails) and show as much data as possible, you can always call <code>BacktraceCleaner#remove_silencers!</code>, which will restore the backtrace to a pristine state. If you need to reconfigure an existing <a href=\"backtracecleaner\">BacktraceCleaner</a> so that it does not filter or modify the paths of any lines of the backtrace, you can call <code>BacktraceCleaner#remove_filters!</code> These two methods will give you a completely untouched backtrace.</p> <p>Inspired by the Quiet Backtrace gem by Thoughtbot.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/backtrace_cleaner.rb, line 30\ndef initialize\n  @filters, @silencers = [], []\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_filter\"> <span class=\"method-name\">add_filter</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a filter from the block provided. Each line in the backtrace will be mapped against this filter.</p> <pre class=\"ruby\"># Will turn \"/my/rails/root/app/models/person.rb\" into \"/app/models/person.rb\"\nbacktrace_cleaner.add_filter { |line| line.gsub(Rails.root, '') }\n</pre> <div class=\"method-source-code\" id=\"add_filter-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/backtrace_cleaner.rb, line 55\ndef add_filter(&amp;block)\n  @filters &lt;&lt; block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_silencer\"> <span class=\"method-name\">add_silencer</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a silencer from the block provided. If the silencer returns <code>true</code> for a given line, it will be excluded from the clean backtrace.</p> <pre class=\"ruby\"># Will reject all lines that include the word \"mongrel\", like \"/gems/mongrel/server.rb\" or \"/app/my_mongrel_server/rb\"\nbacktrace_cleaner.add_silencer { |line| line =~ /mongrel/ }\n</pre> <div class=\"method-source-code\" id=\"add_silencer-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/backtrace_cleaner.rb, line 64\ndef add_silencer(&amp;block)\n  @silencers &lt;&lt; block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clean\"> <span class=\"method-name\">clean</span><span class=\"method-args\">(backtrace, kind = :silent)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the backtrace after all filters and silencers have been run against it. Filters run first, then silencers.</p> <div class=\"method-source-code\" id=\"clean-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/backtrace_cleaner.rb, line 36\ndef clean(backtrace, kind = :silent)\n  filtered = filter_backtrace(backtrace)\n\n  case kind\n  when :silent\n    silence(filtered)\n  when :noise\n    noise(filtered)\n  else\n    filtered\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"backtracecleaner#method-i-filter\">filter</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-filter\"> <span class=\"method-name\">filter</span><span class=\"method-args\">(backtrace, kind = :silent)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"backtracecleaner#method-i-clean\">clean</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_filters-21\"> <span class=\"method-name\">remove_filters!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes all filters, but leaves in the silencers. Useful if you suddenly need to see entire filepaths in the backtrace that you had already filtered out.</p> <div class=\"method-source-code\" id=\"remove_filters-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/backtrace_cleaner.rb, line 78\ndef remove_filters!\n  @filters = []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_silencers-21\"> <span class=\"method-name\">remove_silencers!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes all silencers, but leaves in the filters. Useful if your context of debugging suddenly expands as you suspect a bug in one of the libraries you use.</p> <div class=\"method-source-code\" id=\"remove_silencers-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/backtrace_cleaner.rb, line 71\ndef remove_silencers!\n  @silencers = []\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/benchmarkable":"<h1 id=\"module-ActiveSupport::Benchmarkable\" class=\"module\"> module ActiveSupport::Benchmarkable </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-benchmark\"> <span class=\"method-name\">benchmark</span><span class=\"method-args\">(message = \"Benchmarking\", options = {}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to measure the execution time of a block in a template and records the result to the log. Wrap this block around expensive operations or possible bottlenecks to get a time reading for the operation. For example, let's say you thought your file processing method was taking too long; you could wrap it in a benchmark block.</p> <pre>&lt;% benchmark 'Process data files' do %&gt;\n  &lt;%= expensive_files_operation %&gt;\n&lt;% end %&gt;</pre> <p>That would add something like “Process data files (345.2ms)” to the log, which you can then use to compare timings when optimizing your code.</p> <p>You may give an optional logger level (<code>:debug</code>, <code>:info</code>, <code>:warn</code>, <code>:error</code>) as the <code>:level</code> option. The default logger level value is <code>:info</code>.</p> <pre>&lt;% benchmark 'Low-level files', level: :debug do %&gt;\n  &lt;%= lowlevel_files_operation %&gt;\n&lt;% end %&gt;</pre> <p>Finally, you can pass true as the third argument to silence all log activity (other than the timing information) from inside the block. This is great for boiling down a noisy block to just a single statement that produces one log line:</p> <pre>&lt;% benchmark 'Process data files', level: :info, silence: true do %&gt;\n  &lt;%= expensive_and_chatty_files_operation %&gt;\n&lt;% end %&gt;</pre> <div class=\"method-source-code\" id=\"benchmark-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/benchmarkable.rb, line 35\ndef benchmark(message = \"Benchmarking\", options = {})\n  if logger\n    options.assert_valid_keys(:level, :silence)\n    options[:level] ||= :info\n\n    result = nil\n    ms = Benchmark.ms { result = options[:silence] ? silence { yield } : yield }\n    logger.send(options[:level], '%s (%.1fms)' % [ message, ms ])\n    result\n  else\n    yield\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/cache":"<h1 id=\"module-ActiveSupport::Cache\" class=\"module\"> module ActiveSupport::Cache </h1> <section class=\"description\"> <p>See <a href=\"cache/store\">ActiveSupport::Cache::Store</a> for documentation.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"UNIVERSAL_OPTIONS\">UNIVERSAL_OPTIONS </dt>\n<dd>\n<p>These options mean something to all cache implementations. Individual cache implementations may support additional options.</p> </dd>\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-expand_cache_key\"> <span class=\"method-name\">expand_cache_key</span><span class=\"method-args\">(key, namespace = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Expands out the <code>key</code> argument into a key that can be used for the cache store. Optionally accepts a namespace, and all keys will be scoped within that namespace.</p> <p>If the <code>key</code> argument provided is an array, or responds to <code>to_a</code>, then each of elements in the array will be turned into parameters/keys and concatenated into a single key. For example:</p> <pre class=\"ruby\">expand_cache_key([:foo, :bar])               # =&gt; \"foo/bar\"\nexpand_cache_key([:foo, :bar], \"namespace\")  # =&gt; \"namespace/foo/bar\"\n</pre> <p>The <code>key</code> argument can also respond to <code>cache_key</code> or <code>to_param</code>.</p> <div class=\"method-source-code\" id=\"expand_cache_key-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 80\ndef expand_cache_key(key, namespace = nil)\n  expanded_cache_key = namespace ? \"#{namespace}/\" : \"\"\n\n  if prefix = ENV[\"RAILS_CACHE_ID\"] || ENV[\"RAILS_APP_VERSION\"]\n    expanded_cache_key &lt;&lt; \"#{prefix}/\"\n  end\n\n  expanded_cache_key &lt;&lt; retrieve_cache_key(key)\n  expanded_cache_key\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-lookup_store\"> <span class=\"method-name\">lookup_store</span><span class=\"method-args\">(*store_option)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a new CacheStore object according to the given options.</p> <p>If no arguments are passed to this method, then a new <a href=\"cache/memorystore\">ActiveSupport::Cache::MemoryStore</a> object will be returned.</p> <p>If you pass a <a href=\"../symbol\">Symbol</a> as the first argument, then a corresponding cache store class under the <a href=\"cache\">ActiveSupport::Cache</a> namespace will be created. For example:</p> <pre class=\"ruby\">ActiveSupport::Cache.lookup_store(:memory_store)\n# =&gt; returns a new ActiveSupport::Cache::MemoryStore object\n\nActiveSupport::Cache.lookup_store(:mem_cache_store)\n# =&gt; returns a new ActiveSupport::Cache::MemCacheStore object\n</pre> <p>Any additional arguments will be passed to the corresponding cache store class's constructor:</p> <pre class=\"ruby\">ActiveSupport::Cache.lookup_store(:file_store, '/tmp/cache')\n# =&gt; same as: ActiveSupport::Cache::FileStore.new('/tmp/cache')\n</pre> <p>If the first argument is not a <a href=\"../symbol\">Symbol</a>, then it will simply be returned:</p> <pre class=\"ruby\">ActiveSupport::Cache.lookup_store(MyOwnCacheStore.new)\n# =&gt; returns MyOwnCacheStore.new\n</pre> <div class=\"method-source-code\" id=\"lookup_store-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 55\ndef lookup_store(*store_option)\n  store, *parameters = *Array.wrap(store_option).flatten\n\n  case store\n  when Symbol\n    retrieve_store_class(store).new(*parameters)\n  when nil\n    ActiveSupport::Cache::MemoryStore.new\n  else\n    store\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/cache/filestore":"<h1 id=\"class-ActiveSupport::Cache::FileStore\" class=\"class\"> class ActiveSupport::Cache::FileStore </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"store\">ActiveSupport::Cache::Store</a></dd>\n</dl> <section class=\"description\"> <p>A cache store implementation which stores everything on the filesystem.</p> <p><a href=\"filestore\">FileStore</a> implements the <a href=\"strategy/localcache\">Strategy::LocalCache</a> strategy which implements an in-memory cache inside of a block.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DIR_FORMATTER\">DIR_FORMATTER </dt>\n\n<dt id=\"EXCLUDED_DIRS\">EXCLUDED_DIRS </dt>\n\n<dt id=\"FILENAME_MAX_SIZE\">FILENAME_MAX_SIZE </dt>\n\n<dt id=\"FILEPATH_MAX_SIZE\">FILEPATH_MAX_SIZE </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-cache_path\"> <span class=\"method-name\">cache_path</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(cache_path, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"store#method-c-new\">ActiveSupport::Cache::Store.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/file_store.rb, line 20\ndef initialize(cache_path, options = nil)\n  super(options)\n  @cache_path = cache_path.to_s\n  extend Strategy::LocalCache\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cleanup\"> <span class=\"method-name\">cleanup</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Preemptively iterates through all stored keys and removes the ones which have expired.</p> <div class=\"method-source-code\" id=\"cleanup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/file_store.rb, line 35\ndef cleanup(options = nil)\n  options = merged_options(options)\n  search_dir(cache_path) do |fname|\n    key = file_path_key(fname)\n    entry = read_entry(key, options)\n    delete_entry(key, options) if entry &amp;&amp; entry.expired?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes all items from the cache. In this case it deletes all the entries in the specified file store directory except for .gitkeep. Be careful which directory is specified in your config file when using <code>FileStore</code> because everything in that directory will be deleted.</p> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/file_store.rb, line 29\ndef clear(options = nil)\n  root_dirs = Dir.entries(cache_path).reject {|f| (EXCLUDED_DIRS + [\".gitkeep\"]).include?(f)}\n  FileUtils.rm_r(root_dirs.collect{|f| File.join(cache_path, f)})\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decrement\"> <span class=\"method-name\">decrement</span><span class=\"method-args\">(name, amount = 1, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Decrements an already existing integer value that is stored in the cache. If the key is not found nothing is done.</p> <div class=\"method-source-code\" id=\"decrement-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/file_store.rb, line 52\ndef decrement(name, amount = 1, options = nil)\n  modify_value(name, -amount, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_matched\"> <span class=\"method-name\">delete_matched</span><span class=\"method-args\">(matcher, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"delete_matched-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/file_store.rb, line 56\ndef delete_matched(matcher, options = nil)\n  options = merged_options(options)\n  instrument(:delete_matched, matcher.inspect) do\n    matcher = key_matcher(matcher, options)\n    search_dir(cache_path) do |path|\n      key = file_path_key(path)\n      delete_entry(key, options) if key.match(matcher)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-increment\"> <span class=\"method-name\">increment</span><span class=\"method-args\">(name, amount = 1, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Increments an already existing integer value that is stored in the cache. If the key is not found nothing is done.</p> <div class=\"method-source-code\" id=\"increment-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/file_store.rb, line 46\ndef increment(name, amount = 1, options = nil)\n  modify_value(name, amount, options)\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_entry\"> <span class=\"method-name\">delete_entry</span><span class=\"method-args\">(key, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"delete_entry-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/file_store.rb, line 87\ndef delete_entry(key, options)\n  file_name = key_file_path(key)\n  if File.exist?(file_name)\n    begin\n      File.delete(file_name)\n      delete_empty_directories(File.dirname(file_name))\n      true\n    rescue =&gt; e\n      # Just in case the error was caused by another process deleting the file first.\n      raise e if File.exist?(file_name)\n      false\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read_entry\"> <span class=\"method-name\">read_entry</span><span class=\"method-args\">(key, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"read_entry-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/file_store.rb, line 69\ndef read_entry(key, options)\n  file_name = key_file_path(key)\n  if File.exist?(file_name)\n    File.open(file_name) { |f| Marshal.load(f) }\n  end\nrescue =&gt; e\n  logger.error(\"FileStoreError (#{e}): #{e.message}\") if logger\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write_entry\"> <span class=\"method-name\">write_entry</span><span class=\"method-args\">(key, entry, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"write_entry-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/file_store.rb, line 79\ndef write_entry(key, entry, options)\n  file_name = key_file_path(key)\n  return false if options[:unless_exist] &amp;&amp; File.exist?(file_name)\n  ensure_cache_path(File.dirname(file_name))\n  File.atomic_write(file_name, cache_path) {|f| Marshal.dump(entry, f)}\n  true\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/cache/memcachestore":"<h1 id=\"class-ActiveSupport::Cache::MemCacheStore\" class=\"class\"> class ActiveSupport::Cache::MemCacheStore </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"store\">ActiveSupport::Cache::Store</a></dd>\n</dl> <section class=\"description\"> <p>A cache store implementation which stores data in Memcached: <a href=\"http://memcached.org\">memcached.org</a>/</p> <p>This is currently the most popular cache store for production websites.</p> <p>Special features:</p> <ul><li> <p>Clustering and load balancing. One can specify multiple memcached servers, and <a href=\"memcachestore\">MemCacheStore</a> will load balance between all available servers. If a server goes down, then <a href=\"memcachestore\">MemCacheStore</a> will ignore it until it comes back up.</p> </li></ul> <p><a href=\"memcachestore\">MemCacheStore</a> implements the <a href=\"strategy/localcache\">Strategy::LocalCache</a> strategy which implements an in-memory cache inside of a block.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ESCAPE_KEY_CHARS\">ESCAPE_KEY_CHARS </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-build_mem_cache\"> <span class=\"method-name\">build_mem_cache</span><span class=\"method-args\">(*addresses)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"build_mem_cache-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/mem_cache_store.rb, line 29\ndef self.build_mem_cache(*addresses)\n  addresses = addresses.flatten\n  options = addresses.extract_options!\n  addresses = [\"localhost:11211\"] if addresses.empty?\n  Dalli::Client.new(addresses, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(*addresses)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a new <a href=\"memcachestore\">MemCacheStore</a> object, with the given memcached server addresses. Each address is either a host name, or a host-with-port string in the form of “host_name:port”. For example:</p> <pre class=\"ruby\">ActiveSupport::Cache::MemCacheStore.new(\"localhost\", \"server-downstairs.localnetwork:8229\")\n</pre> <p>If no addresses are specified, then <a href=\"memcachestore\">MemCacheStore</a> will connect to localhost port 11211 (the default memcached port).</p> <div class=\"method-calls-super\"> Calls superclass method <a href=\"store#method-c-new\">ActiveSupport::Cache::Store.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/mem_cache_store.rb, line 44\ndef initialize(*addresses)\n  addresses = addresses.flatten\n  options = addresses.extract_options!\n  super(options)\n\n  unless [String, Dalli::Client, NilClass].include?(addresses.first.class)\n    raise ArgumentError, \"First argument must be an empty array, an array of hosts or a Dalli::Client instance.\"\n  end\n  if addresses.first.is_a?(Dalli::Client)\n    @data = addresses.first\n  else\n    mem_cache_options = options.dup\n    UNIVERSAL_OPTIONS.each{|name| mem_cache_options.delete(name)}\n    @data = self.class.build_mem_cache(*(addresses + [mem_cache_options]))\n  end\n\n  extend Strategy::LocalCache\n  extend LocalCacheWithRaw\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clear the entire cache on all memcached servers. This method should be used with care when shared cache is being used.</p> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/mem_cache_store.rb, line 109\ndef clear(options = nil)\n  @data.flush_all\nrescue Dalli::DalliError =&gt; e\n  logger.error(\"DalliError (#{e}): #{e.message}\") if logger\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read_multi\"> <span class=\"method-name\">read_multi</span><span class=\"method-args\">(*names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reads multiple values from the cache using a single call to the servers for all keys. Options can be passed in the last argument.</p> <div class=\"method-source-code\" id=\"read_multi-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/mem_cache_store.rb, line 66\ndef read_multi(*names)\n  options = names.extract_options!\n  options = merged_options(options)\n  keys_to_names = Hash[names.map{|name| [escape_key(namespaced_key(name, options)), name]}]\n  raw_values = @data.get_multi(keys_to_names.keys, :raw =&gt; true)\n  values = {}\n  raw_values.each do |key, value|\n    entry = deserialize_entry(value)\n    values[keys_to_names[key]] = entry.value unless entry.expired?\n  end\n  values\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stats\"> <span class=\"method-name\">stats</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the statistics from the memcached servers.</p> <div class=\"method-source-code\" id=\"stats-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/mem_cache_store.rb, line 117\ndef stats\n  @data.stats\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/cache/memorystore":"<h1 id=\"class-ActiveSupport::Cache::MemoryStore\" class=\"class\"> class ActiveSupport::Cache::MemoryStore </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"store\">ActiveSupport::Cache::Store</a></dd>\n</dl> <section class=\"description\"> <p>A cache store implementation which stores everything into memory in the same process. If you're running multiple Ruby on Rails server processes (which is the case if you're using mongrel_cluster or Phusion Passenger), then this means that Rails server process instances won't be able to share cache data with each other and this may not be the most appropriate cache in that scenario.</p> <p>This cache has a bounded size specified by the :size options to the initializer (default is 32Mb). When the cache exceeds the allotted size, a cleanup will occur which tries to prune the cache down to three quarters of the maximum size by removing the least recently used entries.</p> <p><a href=\"memorystore\">MemoryStore</a> is thread-safe.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"PER_ENTRY_OVERHEAD\">PER_ENTRY_OVERHEAD </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"store#method-c-new\">ActiveSupport::Cache::Store.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/memory_store.rb, line 19\ndef initialize(options = nil)\n  options ||= {}\n  super(options)\n  @data = {}\n  @key_access = {}\n  @max_size = options[:size] || 32.megabytes\n  @max_prune_time = options[:max_prune_time] || 2\n  @cache_size = 0\n  @monitor = Monitor.new\n  @pruning = false\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cleanup\"> <span class=\"method-name\">cleanup</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Preemptively iterates through all stored keys and removes the ones which have expired.</p> <div class=\"method-source-code\" id=\"cleanup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/memory_store.rb, line 40\ndef cleanup(options = nil)\n  options = merged_options(options)\n  instrument(:cleanup, :size =&gt; @data.size) do\n    keys = synchronize{ @data.keys }\n    keys.each do |key|\n      entry = @data[key]\n      delete_entry(key, options) if entry &amp;&amp; entry.expired?\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/memory_store.rb, line 31\ndef clear(options = nil)\n  synchronize do\n    @data.clear\n    @key_access.clear\n    @cache_size = 0\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decrement\"> <span class=\"method-name\">decrement</span><span class=\"method-args\">(name, amount = 1, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Decrement an integer value in the cache.</p> <div class=\"method-source-code\" id=\"decrement-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/memory_store.rb, line 91\ndef decrement(name, amount = 1, options = nil)\n  synchronize do\n    options = merged_options(options)\n    if num = read(name, options)\n      num = num.to_i - amount\n      write(name, num, options)\n      num\n    else\n      nil\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_matched\"> <span class=\"method-name\">delete_matched</span><span class=\"method-args\">(matcher, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"delete_matched-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/memory_store.rb, line 104\ndef delete_matched(matcher, options = nil)\n  options = merged_options(options)\n  instrument(:delete_matched, matcher.inspect) do\n    matcher = key_matcher(matcher, options)\n    keys = synchronize { @data.keys }\n    keys.each do |key|\n      delete_entry(key, options) if key.match(matcher)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-increment\"> <span class=\"method-name\">increment</span><span class=\"method-args\">(name, amount = 1, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Increment an integer value in the cache.</p> <div class=\"method-source-code\" id=\"increment-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/memory_store.rb, line 77\ndef increment(name, amount = 1, options = nil)\n  synchronize do\n    options = merged_options(options)\n    if num = read(name, options)\n      num = num.to_i + amount\n      write(name, num, options)\n      num\n    else\n      nil\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prune\"> <span class=\"method-name\">prune</span><span class=\"method-args\">(target_size, max_time = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>To ensure entries fit within the specified memory prune the cache by removing the least recently accessed entries.</p> <div class=\"method-source-code\" id=\"prune-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/memory_store.rb, line 53\ndef prune(target_size, max_time = nil)\n  return if pruning?\n  @pruning = true\n  begin\n    start_time = Time.now\n    cleanup\n    instrument(:prune, target_size, :from =&gt; @cache_size) do\n      keys = synchronize{ @key_access.keys.sort{|a,b| @key_access[a].to_f &lt;=&gt; @key_access[b].to_f} }\n      keys.each do |key|\n        delete_entry(key, options)\n        return if @cache_size &lt;= target_size || (max_time &amp;&amp; Time.now - start_time &gt; max_time)\n      end\n    end\n  ensure\n    @pruning = false\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pruning-3F\"> <span class=\"method-name\">pruning?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the cache is currently being pruned.</p> <div class=\"method-source-code\" id=\"pruning-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/memory_store.rb, line 72\ndef pruning?\n  @pruning\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cached_size\"> <span class=\"method-name\">cached_size</span><span class=\"method-args\">(key, entry)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"cached_size-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/memory_store.rb, line 129\ndef cached_size(key, entry)\n  key.to_s.bytesize + entry.size + PER_ENTRY_OVERHEAD\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/cache/nullstore":"<h1 id=\"class-ActiveSupport::Cache::NullStore\" class=\"class\"> class ActiveSupport::Cache::NullStore </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"store\">ActiveSupport::Cache::Store</a></dd>\n</dl> <section class=\"description\"> <p>A cache store implementation which doesn't actually store anything. Useful in development and test environments where you don't want caching turned on but need to go through the caching interface.</p> <p>This cache does implement the local cache strategy, so values will actually be cached inside blocks that utilize this strategy. See <a href=\"strategy/localcache\">ActiveSupport::Cache::Strategy::LocalCache</a> for more details.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"store#method-c-new\">ActiveSupport::Cache::Store.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/null_store.rb, line 11\ndef initialize(options = nil)\n  super(options)\n  extend Strategy::LocalCache\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cleanup\"> <span class=\"method-name\">cleanup</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"cleanup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/null_store.rb, line 19\ndef cleanup(options = nil)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/null_store.rb, line 16\ndef clear(options = nil)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decrement\"> <span class=\"method-name\">decrement</span><span class=\"method-args\">(name, amount = 1, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"decrement-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/null_store.rb, line 25\ndef decrement(name, amount = 1, options = nil)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_matched\"> <span class=\"method-name\">delete_matched</span><span class=\"method-args\">(matcher, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"delete_matched-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/null_store.rb, line 28\ndef delete_matched(matcher, options = nil)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-increment\"> <span class=\"method-name\">increment</span><span class=\"method-args\">(name, amount = 1, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"increment-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/null_store.rb, line 22\ndef increment(name, amount = 1, options = nil)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/cache/store":"<h1 id=\"class-ActiveSupport::Cache::Store\" class=\"class\"> class ActiveSupport::Cache::Store </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>An abstract cache store class. There are multiple cache store implementations, each having its own additional features. See the classes under the <a href=\"../cache\">ActiveSupport::Cache</a> module, e.g. <a href=\"memcachestore\">ActiveSupport::Cache::MemCacheStore</a>. <a href=\"memcachestore\">MemCacheStore</a> is currently the most popular cache store for large production websites.</p> <p>Some implementations may not support all methods beyond the basic cache methods of <code>fetch</code>, <code>write</code>, <code>read</code>, <code>exist?</code>, and <code>delete</code>.</p> <p><a href=\"store\">ActiveSupport::Cache::Store</a> can store any serializable Ruby object.</p> <pre class=\"ruby\">cache = ActiveSupport::Cache::MemoryStore.new\n\ncache.read('city')   # =&gt; nil\ncache.write('city', \"Duckburgh\")\ncache.read('city')   # =&gt; \"Duckburgh\"\n</pre> <p>Keys are always translated into Strings and are case sensitive. When an object is specified as a key and has a <code>cache_key</code> method defined, this method will be called to define the key. Otherwise, the <code>to_param</code> method will be called. Hashes and Arrays can also be used as keys. The elements will be delimited by slashes, and the elements within a <a href=\"../../hash\">Hash</a> will be sorted by key so they are consistent.</p> <pre class=\"ruby\">cache.read('city') == cache.read(:city)   # =&gt; true\n</pre> <p>Nil values can be cached.</p> <p>If your cache is on a shared infrastructure, you can define a namespace for your cache entries. If a namespace is defined, it will be prefixed on to every key. The namespace can be either a static value or a Proc. If it is a Proc, it will be invoked when each key is evaluated so that you can use application logic to invalidate keys.</p> <pre class=\"ruby\">cache.namespace = -&gt; { @last_mod_time }  # Set the namespace to a variable\n@last_mod_time = Time.now  # Invalidate the entire cache by changing namespace\n</pre> <p>Caches can also store values in a compressed format to save space and reduce time spent sending data. Since there is overhead, values must be large enough to warrant compression. To turn on compression either pass <code>compress: true</code> in the initializer or as an option to <code>fetch</code> or <code>write</code>. To specify the threshold at which to compress values, set the <code>:compress_threshold</code> option. The default threshold is 16K.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-options\"> <span class=\"method-name\">options</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-silence\"> <span class=\"method-name\">silence</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-silence-3F\"> <span class=\"method-name\">silence?</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-instrument\"> <span class=\"method-name\">instrument</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>:deprecated:</p> <div class=\"method-source-code\" id=\"instrument-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 189\ndef self.instrument\n  ActiveSupport::Deprecation.warn \"ActiveSupport::Cache.instrument is deprecated and will be removed in Rails 5. Instrumentation is now always on so you can safely stop using it.\"\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-instrument-3D\"> <span class=\"method-name\">instrument=</span><span class=\"method-args\">(boolean)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>:deprecated:</p> <div class=\"method-source-code\" id=\"instrument-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 183\ndef self.instrument=(boolean)\n  ActiveSupport::Deprecation.warn \"ActiveSupport::Cache.instrument= is deprecated and will be removed in Rails 5. Instrumentation is now always on so you can safely stop using it.\"\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new cache. The options will be passed to any write method calls except for <code>:namespace</code> which can be used to set the global namespace for the cache.</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 164\ndef initialize(options = nil)\n  @options = options ? options.dup : {}\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cleanup\"> <span class=\"method-name\">cleanup</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Cleanup the cache by removing expired entries.</p> <p>Options are passed to the underlying cache implementation.</p> <p>All implementations may not support this method.</p> <div class=\"method-source-code\" id=\"cleanup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 450\ndef cleanup(options = nil)\n  raise NotImplementedError.new(\"#{self.class.name} does not support cleanup\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clear the entire cache. Be careful with this method since it could affect other processes if shared cache is being used.</p> <p>The options hash is passed to the underlying cache implementation.</p> <p>All implementations may not support this method.</p> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 460\ndef clear(options = nil)\n  raise NotImplementedError.new(\"#{self.class.name} does not support clear\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decrement\"> <span class=\"method-name\">decrement</span><span class=\"method-args\">(name, amount = 1, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Decrement an integer value in the cache.</p> <p>Options are passed to the underlying cache implementation.</p> <p>All implementations may not support this method.</p> <div class=\"method-source-code\" id=\"decrement-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 441\ndef decrement(name, amount = 1, options = nil)\n  raise NotImplementedError.new(\"#{self.class.name} does not support decrement\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(name, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deletes an entry in the cache. Returns <code>true</code> if an entry is deleted.</p> <p>Options are passed to the underlying cache implementation.</p> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 398\ndef delete(name, options = nil)\n  options = merged_options(options)\n\n  instrument(:delete, name) do\n    delete_entry(namespaced_key(name, options), options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_matched\"> <span class=\"method-name\">delete_matched</span><span class=\"method-args\">(matcher, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delete all entries with keys matching the pattern.</p> <p>Options are passed to the underlying cache implementation.</p> <p>All implementations may not support this method.</p> <div class=\"method-source-code\" id=\"delete_matched-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 423\ndef delete_matched(matcher, options = nil)\n  raise NotImplementedError.new(\"#{self.class.name} does not support delete_matched\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exist-3F\"> <span class=\"method-name\">exist?</span><span class=\"method-args\">(name, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the cache contains an entry for the given key.</p> <p>Options are passed to the underlying cache implementation.</p> <div class=\"method-source-code\" id=\"exist-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 409\ndef exist?(name, options = nil)\n  options = merged_options(options)\n\n  instrument(:exist?, name) do\n    entry = read_entry(namespaced_key(name, options), options)\n    (entry &amp;&amp; !entry.expired?) || false\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fetch\"> <span class=\"method-name\">fetch</span><span class=\"method-args\">(name, options = nil) { |_name| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fetches data from the cache, using the given key. If there is data in the cache with the given key, then that data is returned.</p> <p>If there is no such data in the cache (a cache miss), then <code>nil</code> will be returned. However, if a block has been passed, that block will be passed the key and executed in the event of a cache miss. The return value of the block will be written to the cache under the given cache key, and that return value will be returned.</p> <pre class=\"ruby\">cache.write('today', 'Monday')\ncache.fetch('today')  # =&gt; \"Monday\"\n\ncache.fetch('city')   # =&gt; nil\ncache.fetch('city') do\n  'Duckburgh'\nend\ncache.fetch('city')   # =&gt; \"Duckburgh\"\n</pre> <p>You may also specify additional options via the <code>options</code> argument. Setting <code>force: true</code> will force a cache miss:</p> <pre class=\"ruby\">cache.write('today', 'Monday')\ncache.fetch('today', force: true)  # =&gt; nil\n</pre> <p>Setting <code>:compress</code> will store a large cache entry set by the call in a compressed format.</p> <p>Setting <code>:expires_in</code> will set an expiration time on the cache. All caches support auto-expiring content after a specified number of seconds. This value can be specified as an option to the constructor (in which case all entries will be affected), or it can be supplied to the <code>fetch</code> or <code>write</code> method to effect just one entry.</p> <pre class=\"ruby\">cache = ActiveSupport::Cache::MemoryStore.new(expires_in: 5.minutes)\ncache.write(key, value, expires_in: 1.minute) # Set a lower value for one entry\n</pre> <p>Setting <code>:race_condition_ttl</code> is very useful in situations where a cache entry is used very frequently and is under heavy load. If a cache expires and due to heavy load several different processes will try to read data natively and then they all will try to write to cache. To avoid that case the first process to find an expired cache entry will bump the cache expiration time by the value set in <code>:race_condition_ttl</code>. Yes, this process is extending the time for a stale value by another few seconds. Because of extended life of the previous cache, other processes will continue to use slightly stale data for a just a bit longer. In the meantime that first process will go ahead and will write into cache the new value. After that all the processes will start getting the new value. The key is to keep <code>:race_condition_ttl</code> small.</p> <p>If the process regenerating the entry errors out, the entry will be regenerated after the specified number of seconds. Also note that the life of stale cache is extended only if it expired recently. Otherwise a new value is generated and <code>:race_condition_ttl</code> does not play any role.</p> <pre class=\"ruby\"># Set all values to expire after one minute.\ncache = ActiveSupport::Cache::MemoryStore.new(expires_in: 1.minute)\n\ncache.write('foo', 'original value')\nval_1 = nil\nval_2 = nil\nsleep 60\n\nThread.new do\n  val_1 = cache.fetch('foo', race_condition_ttl: 10) do\n    sleep 1\n    'new value 1'\n  end\nend\n\nThread.new do\n  val_2 = cache.fetch('foo', race_condition_ttl: 10) do\n    'new value 2'\n  end\nend\n\n# val_1 =&gt; \"new value 1\"\n# val_2 =&gt; \"original value\"\n# sleep 10 # First thread extend the life of cache by another 10 seconds\n# cache.fetch('foo') =&gt; \"new value 1\"\n</pre> <p>Other options will be handled by the specific cache store implementation. Internally, <a href=\"store#method-i-fetch\">fetch</a> calls read_entry, and calls write_entry on a cache miss. <code>options</code> will be passed to the <a href=\"store#method-i-read\">read</a> and <a href=\"store#method-i-write\">write</a> calls.</p> <p>For example, MemCacheStore's <a href=\"store#method-i-write\">write</a> method supports the <code>:raw</code> option, which tells the memcached server to store all values as strings. We can use this option with <a href=\"store#method-i-fetch\">fetch</a> too:</p> <pre class=\"ruby\">cache = ActiveSupport::Cache::MemCacheStore.new\ncache.fetch(\"foo\", force: true, raw: true) do\n  :bar\nend\ncache.fetch('foo') # =&gt; \"bar\"\n</pre> <div class=\"method-source-code\" id=\"fetch-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 288\ndef fetch(name, options = nil)\n  if block_given?\n    options = merged_options(options)\n    key = namespaced_key(name, options)\n\n    cached_entry = find_cached_entry(key, name, options) unless options[:force]\n    entry = handle_expired_entry(cached_entry, key, options)\n\n    if entry\n      get_entry_value(entry, name, options)\n    else\n      save_block_result_to_cache(name, options) { |_name| yield _name }\n    end\n  else\n    read(name, options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fetch_multi\"> <span class=\"method-name\">fetch_multi</span><span class=\"method-args\">(*names) { |name| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fetches data from the cache, using the given keys. If there is data in the cache with the given keys, then that data is returned. Otherwise, the supplied block is called for each key for which there was no data, and the result will be written to the cache and returned.</p> <p>Options are passed to the underlying cache implementation.</p> <p>Returns a hash with the data for each of the names. For example:</p> <pre class=\"ruby\">cache.write(\"bim\", \"bam\")\ncache.fetch_multi(\"bim\", \"boom\") { |key| key * 2 }\n# =&gt; { \"bam\" =&gt; \"bam\", \"boom\" =&gt; \"boomboom\" }\n</pre> <div class=\"method-source-code\" id=\"fetch_multi-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 369\ndef fetch_multi(*names)\n  options = names.extract_options!\n  options = merged_options(options)\n  results = read_multi(*names, options)\n\n  names.each_with_object({}) do |name, memo|\n    memo[name] = results.fetch(name) do\n      value = yield name\n      write(name, value, options)\n      value\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-increment\"> <span class=\"method-name\">increment</span><span class=\"method-args\">(name, amount = 1, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Increment an integer value in the cache.</p> <p>Options are passed to the underlying cache implementation.</p> <p>All implementations may not support this method.</p> <div class=\"method-source-code\" id=\"increment-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 432\ndef increment(name, amount = 1, options = nil)\n  raise NotImplementedError.new(\"#{self.class.name} does not support increment\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mute\"> <span class=\"method-name\">mute</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Silence the logger within a block.</p> <div class=\"method-source-code\" id=\"mute-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 175\ndef mute\n  previous_silence, @silence = defined?(@silence) &amp;&amp; @silence, true\n  yield\nensure\n  @silence = previous_silence\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read\"> <span class=\"method-name\">read</span><span class=\"method-args\">(name, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fetches data from the cache, using the given key. If there is data in the cache with the given key, then that data is returned. Otherwise, <code>nil</code> is returned.</p> <p>Options are passed to the underlying cache implementation.</p> <div class=\"method-source-code\" id=\"read-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 311\ndef read(name, options = nil)\n  options = merged_options(options)\n  key = namespaced_key(name, options)\n  instrument(:read, name, options) do |payload|\n    entry = read_entry(key, options)\n    if entry\n      if entry.expired?\n        delete_entry(key, options)\n        payload[:hit] = false if payload\n        nil\n      else\n        payload[:hit] = true if payload\n        entry.value\n      end\n    else\n      payload[:hit] = false if payload\n      nil\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read_multi\"> <span class=\"method-name\">read_multi</span><span class=\"method-args\">(*names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Read multiple values at once from the cache. Options can be passed in the last argument.</p> <p>Some cache implementation may optimize this method.</p> <p>Returns a hash mapping the names provided to the values found.</p> <div class=\"method-source-code\" id=\"read_multi-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 338\ndef read_multi(*names)\n  options = names.extract_options!\n  options = merged_options(options)\n  results = {}\n  names.each do |name|\n    key = namespaced_key(name, options)\n    entry = read_entry(key, options)\n    if entry\n      if entry.expired?\n        delete_entry(key, options)\n      else\n        results[name] = entry.value\n      end\n    end\n  end\n  results\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-silence-21\"> <span class=\"method-name\">silence!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Silence the logger.</p> <div class=\"method-source-code\" id=\"silence-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 169\ndef silence!\n  @silence = true\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write\"> <span class=\"method-name\">write</span><span class=\"method-args\">(name, value, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Writes the value to the cache, with the key.</p> <p>Options are passed to the underlying cache implementation.</p> <div class=\"method-source-code\" id=\"write-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 386\ndef write(name, value, options = nil)\n  options = merged_options(options)\n\n  instrument(:write, name, options) do\n    entry = Entry.new(value, options)\n    write_entry(namespaced_key(name, options), entry, options)\n  end\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-key_matcher\"> <span class=\"method-name\">key_matcher</span><span class=\"method-args\">(pattern, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add the namespace defined in the options to a pattern designed to match keys. Implementations that support <a href=\"store#method-i-delete_matched\">#delete_matched</a> should call this method to translate a pattern that matches names into one that matches namespaced keys.</p> <div class=\"method-source-code\" id=\"key_matcher-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache.rb, line 469\ndef key_matcher(pattern, options)\n  prefix = options[:namespace].is_a?(Proc) ? options[:namespace].call : options[:namespace]\n  if prefix\n    source = pattern.source\n    if source.start_with?('^')\n      source = source[1, source.length]\n    else\n      source = \".*#{source[0, source.length]}\"\n    end\n    Regexp.new(\"^#{Regexp.escape(prefix)}:#{source}\", pattern.options)\n  else\n    pattern\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/cache/strategy/localcache":"<h1 id=\"module-ActiveSupport::Cache::Strategy::LocalCache\" class=\"module\"> module ActiveSupport::Cache::Strategy::LocalCache </h1> <section class=\"description\"> <p>Caches that implement <a href=\"localcache\">LocalCache</a> will be backed by an in-memory cache for the duration of a block. Repeated calls to the cache for the same key will hit the in-memory cache for faster access.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-middleware\"> <span class=\"method-name\">middleware</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Middleware class can be inserted as a <a href=\"../../../rack\">Rack</a> handler to be local cache for the duration of request.</p> <div class=\"method-source-code\" id=\"middleware-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/strategy/local_cache.rb, line 71\ndef middleware\n  @middleware ||= Middleware.new(\n    \"ActiveSupport::Cache::Strategy::LocalCache\",\n    local_cache_key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_local_cache\"> <span class=\"method-name\">with_local_cache</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Use a local cache for the duration of block.</p> <div class=\"method-source-code\" id=\"with_local_cache-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/strategy/local_cache.rb, line 66\ndef with_local_cache\n  use_temporary_local_cache(LocalStore.new) { yield }\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_cache_value\"> <span class=\"method-name\">set_cache_value</span><span class=\"method-args\">(value, name, amount, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"set_cache_value-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/strategy/local_cache.rb, line 123\ndef set_cache_value(value, name, amount, options)\n  if local_cache\n    local_cache.mute do\n      if value\n        local_cache.write(name, value, options)\n      else\n        local_cache.delete(name, options)\n      end\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/cache/strategy/localcache/localstore":"<h1 id=\"class-ActiveSupport::Cache::Strategy::LocalCache::LocalStore\" class=\"class\"> class ActiveSupport::Cache::Strategy::LocalCache::LocalStore </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../store\">ActiveSupport::Cache::Store</a></dd>\n</dl> <section class=\"description\"> <p>Simple memory backed cache. This cache is not thread safe and is intended only for serving as a temporary memory cache for a single thread.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../../store#method-c-new\">ActiveSupport::Cache::Store.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/strategy/local_cache.rb, line 37\ndef initialize\n  super\n  @data = {}\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/strategy/local_cache.rb, line 47\ndef clear(options = nil)\n  @data.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete_entry\"> <span class=\"method-name\">delete_entry</span><span class=\"method-args\">(key, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"delete_entry-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/strategy/local_cache.rb, line 60\ndef delete_entry(key, options)\n  !!@data.delete(key)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read_entry\"> <span class=\"method-name\">read_entry</span><span class=\"method-args\">(key, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"read_entry-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/strategy/local_cache.rb, line 51\ndef read_entry(key, options)\n  @data[key]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write_entry\"> <span class=\"method-name\">write_entry</span><span class=\"method-args\">(key, value, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"write_entry-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/cache/strategy/local_cache.rb, line 55\ndef write_entry(key, value, options)\n  @data[key] = value\n  true\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/cachingkeygenerator":"<h1 id=\"class-ActiveSupport::CachingKeyGenerator\" class=\"class\"> class ActiveSupport::CachingKeyGenerator </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"cachingkeygenerator\">CachingKeyGenerator</a> is a wrapper around <a href=\"keygenerator\">KeyGenerator</a> which allows users to avoid re-executing the key generation process when it's called using the same salt and key_size</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(key_generator)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/key_generator.rb, line 29\ndef initialize(key_generator)\n  @key_generator = key_generator\n  @cache_keys = ThreadSafe::Cache.new\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-generate_key\"> <span class=\"method-name\">generate_key</span><span class=\"method-args\">(salt, key_size=64)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a derived key suitable for use. The default key_size is chosen to be compatible with the default settings of <a href=\"messageverifier\">ActiveSupport::MessageVerifier</a>. i.e. OpenSSL::Digest::SHA1#block_length</p> <div class=\"method-source-code\" id=\"generate_key-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/key_generator.rb, line 37\ndef generate_key(salt, key_size=64)\n  @cache_keys[\"#{salt}#{key_size}\"] ||= @key_generator.generate_key(salt, key_size)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/callbacks":"<h1 id=\"module-ActiveSupport::Callbacks\" class=\"module\"> module ActiveSupport::Callbacks </h1> <section class=\"description\"> <p><a href=\"callbacks\">Callbacks</a> are code hooks that are run at key points in an object's life cycle. The typical use case is to have a base class define a set of callbacks relevant to the other functionality it supplies, so that subclasses can install callbacks that enhance or modify the base functionality without needing to override or redefine methods of the base class.</p> <p>Mixing in this module allows you to define the events in the object's life cycle that will support callbacks (via <code>ClassMethods.define_callbacks</code>), set the instance methods, procs, or callback objects to be called (via <code>ClassMethods.set_callback</code>), and run the installed callbacks at the appropriate times (via <code>run_callbacks</code>).</p> <p>Three kinds of callbacks are supported: before callbacks, run before a certain event; after callbacks, run after the event; and around callbacks, blocks that surround the event, triggering it when they yield. Callback code can be contained in instance methods, procs or lambdas, or callback objects that respond to certain predetermined methods. See <code>ClassMethods.set_callback</code> for details.</p> <pre class=\"ruby\">class Record\n  include ActiveSupport::Callbacks\n  define_callbacks :save\n\n  def save\n    run_callbacks :save do\n      puts \"- save\"\n    end\n  end\nend\n\nclass PersonRecord &lt; Record\n  set_callback :save, :before, :saving_message\n  def saving_message\n    puts \"saving...\"\n  end\n\n  set_callback :save, :after do |object|\n    puts \"saved\"\n  end\nend\n\nperson = PersonRecord.new\nperson.save\n</pre> <p>Output:</p> <pre class=\"ruby\">saving...\n- save\nsaved\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"CALLBACK_FILTER_TYPES\">CALLBACK_FILTER_TYPES </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-run_callbacks\"> <span class=\"method-name\">run_callbacks</span><span class=\"method-args\">(kind) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the callbacks for the given event.</p> <p>Calls the before and around callbacks in the order they were set, yields the block (if given one), and then runs the after callbacks in reverse order.</p> <p>If the callback chain was halted, returns <code>false</code>. Otherwise returns the result of the block, <code>nil</code> if no callbacks have been set, or <code>true</code> if callbacks have been set but no block is given.</p> <pre class=\"ruby\">run_callbacks :save do\n  save\nend\n</pre> <div class=\"method-source-code\" id=\"run_callbacks-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 80\ndef run_callbacks(kind, &amp;block)\n  callbacks = send(\"_#{kind}_callbacks\")\n\n  if callbacks.empty?\n    yield if block_given?\n  else\n    runner = callbacks.compile\n    e = Filters::Environment.new(self, false, nil, block)\n    runner.call(e).value\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/callbacks/callbacksequence":"<h1 id=\"class-ActiveSupport::Callbacks::CallbackSequence\" class=\"class\"> class ActiveSupport::Callbacks::CallbackSequence </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Execute before and after filters in a sequence instead of chaining them with nested lambda calls, see: <a href=\"https://github.com/rails/rails/issues/18011\">github.com/rails/rails/issues/18011</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(&amp;call)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 477\ndef initialize(&amp;call)\n  @call = call\n  @before = []\n  @after = []\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after\"> <span class=\"method-name\">after</span><span class=\"method-args\">(&amp;after)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"after-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 488\ndef after(&amp;after)\n  @after.push(after)\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-around\"> <span class=\"method-name\">around</span><span class=\"method-args\">(&amp;around)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"around-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 493\ndef around(&amp;around)\n  CallbackSequence.new do |*args|\n    around.call(*args) {\n      self.call(*args)\n    }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before\"> <span class=\"method-name\">before</span><span class=\"method-args\">(&amp;before)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"before-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 483\ndef before(&amp;before)\n  @before.unshift(before)\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 501\ndef call(*args)\n  @before.each { |b| b.call(*args) }\n  value = @call.call(*args)\n  @after.each { |a| a.call(*args) }\n  value\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/callbacks/classmethods":"<h1 id=\"module-ActiveSupport::Callbacks::ClassMethods\" class=\"module\"> module ActiveSupport::Callbacks::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-define_callbacks\"> <span class=\"method-name\">define_callbacks</span><span class=\"method-args\">(*names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define sets of events in the object life cycle that support callbacks.</p> <pre class=\"ruby\">define_callbacks :validate\ndefine_callbacks :initialize, :save, :destroy\n</pre> <h5 id=\"method-i-define_callbacks-label-Options\">Options</h5> <ul>\n<li> <p><code>:terminator</code> - Determines when a before filter will halt the callback chain, preventing following callbacks from being called and the event from being triggered. This should be a lambda to be executed. The current object and the return result of the callback will be called with the lambda.</p> <pre class=\"ruby\">define_callbacks :validate, terminator: -&gt;(target, result) { result == false }\n</pre> <p>In this example, if any before validate callbacks returns <code>false</code>, other callbacks are not executed. Defaults to <code>false</code>, meaning no value halts the chain.</p> </li>\n<li> <p><code>:skip_after_callbacks_if_terminated</code> - Determines if after callbacks should be terminated by the <code>:terminator</code> option. By default after callbacks executed no matter if callback chain was terminated or not. Option makes sense only when <code>:terminator</code> option is specified.</p> </li>\n<li> <p><code>:scope</code> - Indicates which methods should be executed when an object is used as a callback.</p> <pre class=\"ruby\">class Audit\n  def before(caller)\n    puts 'Audit: before is called'\n  end\n\n  def before_save(caller)\n    puts 'Audit: before_save is called'\n  end\nend\n\nclass Account\n  include ActiveSupport::Callbacks\n\n  define_callbacks :save\n  set_callback :save, :before, Audit.new\n\n  def save\n    run_callbacks :save do\n      puts 'save in main'\n    end\n  end\nend\n</pre> <p>In the above case whenever you save an account the method <code>Audit#before</code> will be called. On the other hand</p> <pre class=\"ruby\">define_callbacks :save, scope: [:kind, :name]\n</pre> <p>would trigger <code>Audit#before_save</code> instead. That's constructed by calling <code>#{kind}_#{name}</code> on the given instance. In this case “kind” is “before” and “name” is “save”. In this context <code>:kind</code> and <code>:name</code> have special meanings: <code>:kind</code> refers to the kind of callback (before/after/around) and <code>:name</code> refers to the method on which callbacks are being defined.</p> <p>A declaration like</p> <pre class=\"ruby\">define_callbacks :save, scope: [:name]\n</pre> <p>would call <code>Audit#save</code>.</p> </li>\n</ul> <p>NOTE: <code>method_name</code> passed to `define_model_callbacks` must not end with `!`, `?` or `=`.</p> <div class=\"method-source-code\" id=\"define_callbacks-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 767\ndef define_callbacks(*names)\n  options = names.extract_options!\n\n  names.each do |name|\n    class_attribute \"_#{name}_callbacks\"\n    set_callbacks name, CallbackChain.new(name, options)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reset_callbacks\"> <span class=\"method-name\">reset_callbacks</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove all set callbacks for the given event.</p> <div class=\"method-source-code\" id=\"reset_callbacks-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 684\ndef reset_callbacks(name)\n  callbacks = get_callbacks name\n\n  ActiveSupport::DescendantsTracker.descendants(self).each do |target|\n    chain = target.get_callbacks(name).dup\n    callbacks.each { |c| chain.delete(c) }\n    target.set_callbacks name, chain\n  end\n\n  self.set_callbacks name, callbacks.dup.clear\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_callback\"> <span class=\"method-name\">set_callback</span><span class=\"method-args\">(name, *filter_list, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Install a callback for the given event.</p> <pre class=\"ruby\">set_callback :save, :before, :before_meth\nset_callback :save, :after,  :after_meth, if: :condition\nset_callback :save, :around, -&gt;(r, block) { stuff; result = block.call; stuff }\n</pre> <p>The second arguments indicates whether the callback is to be run <code>:before</code>, <code>:after</code>, or <code>:around</code> the event. If omitted, <code>:before</code> is assumed. This means the first example above can also be written as:</p> <pre class=\"ruby\">set_callback :save, :before_meth\n</pre> <p>The callback can be specified as a symbol naming an instance method; as a proc, lambda, or block; as a string to be instance evaluated; or as an object that responds to a certain method determined by the <code>:scope</code> argument to <code>define_callbacks</code>.</p> <p>If a proc, lambda, or block is given, its body is evaluated in the context of the current object. It can also optionally accept the current object as an argument.</p> <p>Before and around callbacks are called in the order that they are set; after callbacks are called in the reverse order.</p> <p>Around callbacks can access the return value from the event, if it wasn't halted, from the <code>yield</code> call.</p> <h5 id=\"method-i-set_callback-label-Options\">Options</h5> <ul>\n<li> <p><code>:if</code> - A symbol, a string or an array of symbols and strings, each naming an instance method or a proc; the callback will be called only when they all return a true value.</p> </li>\n<li> <p><code>:unless</code> - A symbol, a string or an array of symbols and strings, each naming an instance method or a proc; the callback will be called only when they all return a false value.</p> </li>\n<li> <p><code>:prepend</code> - If <code>true</code>, the callback will be prepended to the existing chain rather than appended.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"set_callback-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 645\ndef set_callback(name, *filter_list, &amp;block)\n  type, filters, options = normalize_callback_params(filter_list, block)\n  self_chain = get_callbacks name\n  mapped = filters.map do |filter|\n    Callback.build(self_chain, filter, type, options)\n  end\n\n  __update_callbacks(name) do |target, chain|\n    options[:prepend] ? chain.prepend(*mapped) : chain.append(*mapped)\n    target.set_callbacks name, chain\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-skip_callback\"> <span class=\"method-name\">skip_callback</span><span class=\"method-args\">(name, *filter_list, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Skip a previously set callback. Like <code>set_callback</code>, <code>:if</code> or <code>:unless</code> options may be passed in order to control when the callback is skipped.</p> <pre class=\"ruby\">class Writer &lt; Person\n   skip_callback :validate, :before, :check_membership, if: -&gt; { self.age &gt; 18 }\nend\n</pre> <div class=\"method-source-code\" id=\"skip_callback-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 665\ndef skip_callback(name, *filter_list, &amp;block)\n  type, filters, options = normalize_callback_params(filter_list, block)\n\n  __update_callbacks(name) do |target, chain|\n    filters.each do |filter|\n      filter = chain.find {|c| c.matches?(type, filter) }\n\n      if filter &amp;&amp; options.any?\n        new_filter = filter.merge(chain, options)\n        chain.insert(chain.index(filter), new_filter)\n      end\n\n      chain.delete(filter)\n    end\n    target.set_callbacks name, chain\n  end\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-get_callbacks\"> <span class=\"method-name\">get_callbacks</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"get_callbacks-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 778\ndef get_callbacks(name)\n  send \"_#{name}_callbacks\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_callbacks\"> <span class=\"method-name\">set_callbacks</span><span class=\"method-args\">(name, callbacks)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"set_callbacks-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/callbacks.rb, line 782\ndef set_callbacks(name, callbacks)\n  send \"_#{name}_callbacks=\", callbacks\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/concern":"<h1 id=\"module-ActiveSupport::Concern\" class=\"module\"> module ActiveSupport::Concern </h1> <section class=\"description\"> <p>A typical module looks like this:</p> <pre>module M\n  def self.included(base)\n    base.extend ClassMethods\n    base.class_eval do\n      scope :disabled, -&gt; { where(disabled: true) }\n    end\n  end\n\n  module ClassMethods\n    ...\n  end\nend</pre> <p>By using <code>ActiveSupport::Concern</code> the above module could instead be written as:</p> <pre>require 'active_support/concern'\n\nmodule M\n  extend ActiveSupport::Concern\n\n  included do\n    scope :disabled, -&gt; { where(disabled: true) }\n  end\n\n  class_methods do\n    ...\n  end\nend</pre> <p>Moreover, it gracefully handles module dependencies. Given a <code>Foo</code> module and a <code>Bar</code> module which depends on the former, we would typically write the following:</p> <pre>module Foo\n  def self.included(base)\n    base.class_eval do\n      def self.method_injected_by_foo\n        ...\n      end\n    end\n  end\nend\n\nmodule Bar\n  def self.included(base)\n    base.method_injected_by_foo\n  end\nend\n\nclass Host\n  include Foo # We need to include this dependency for Bar\n  include Bar # Bar is the module that Host really needs\nend</pre> <p>But why should <code>Host</code> care about <code>Bar</code>'s dependencies, namely <code>Foo</code>? We could try to hide these from <code>Host</code> directly including <code>Foo</code> in <code>Bar</code>:</p> <pre class=\"ruby\">module Bar\n  include Foo\n  def self.included(base)\n    base.method_injected_by_foo\n  end\nend\n\nclass Host\n  include Bar\nend\n</pre> <p>Unfortunately this won't work, since when <code>Foo</code> is included, its <code>base</code> is the <code>Bar</code> module, not the <code>Host</code> class. With <code>ActiveSupport::Concern</code>, module dependencies are properly resolved:</p> <pre>require 'active_support/concern'\n\nmodule Foo\n  extend ActiveSupport::Concern\n  included do\n    def self.method_injected_by_foo\n      ...\n    end\n  end\nend\n\nmodule Bar\n  extend ActiveSupport::Concern\n  include Foo\n\n  included do\n    self.method_injected_by_foo\n  end\nend\n\nclass Host\n  include Bar # It works, now Bar takes care of its dependencies\nend</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-append_features\"> <span class=\"method-name\">append_features</span><span class=\"method-args\">(base)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"append_features-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/concern.rb, line 111\ndef append_features(base)\n  if base.instance_variable_defined?(:@_dependencies)\n    base.instance_variable_get(:@_dependencies) &lt;&lt; self\n    return false\n  else\n    return false if base &lt; self\n    @_dependencies.each { |dep| base.send(:include, dep) }\n    super\n    base.extend const_get(:ClassMethods) if const_defined?(:ClassMethods)\n    base.class_eval(&amp;@_included_block) if instance_variable_defined?(:@_included_block)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-class_methods\"> <span class=\"method-name\">class_methods</span><span class=\"method-args\">(&amp;class_methods_module_definition)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"class_methods-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/concern.rb, line 134\ndef class_methods(&amp;class_methods_module_definition)\n  mod = const_defined?(:ClassMethods, false) ?\n    const_get(:ClassMethods) :\n    const_set(:ClassMethods, Module.new)\n\n  mod.module_eval(&amp;class_methods_module_definition)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-included\"> <span class=\"method-name\">included</span><span class=\"method-args\">(base = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"included-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/concern.rb, line 124\ndef included(base = nil, &amp;block)\n  if base.nil?\n    raise MultipleIncludedBlocks if instance_variable_defined?(:@_included_block)\n\n    @_included_block = block\n  else\n    super\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/configurable":"<h1 id=\"module-ActiveSupport::Configurable\" class=\"module\"> module ActiveSupport::Configurable </h1> <section class=\"description\"> <p><a href=\"configurable\">Configurable</a> provides a <code>config</code> method to store and retrieve configuration options as an <code>OrderedHash</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-config\"> <span class=\"method-name\">config</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reads and writes attributes from a configuration <code>OrderedHash</code>.</p> <pre class=\"ruby\">require 'active_support/configurable'\n\nclass User\n  include ActiveSupport::Configurable\nend\n\nuser = User.new\n\nuser.config.allowed_access = true\nuser.config.level = 1\n\nuser.config.allowed_access # =&gt; true\nuser.config.level          # =&gt; 1\n</pre> <div class=\"method-source-code\" id=\"config-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/configurable.rb, line 142\ndef config\n  @_config ||= self.class.config.inheritable_copy\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/configurable/classmethods":"<h1 id=\"module-ActiveSupport::Configurable::ClassMethods\" class=\"module\"> module ActiveSupport::Configurable::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-config\"> <span class=\"method-name\">config</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"config-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/configurable.rb, line 27\ndef config\n  @_config ||= if respond_to?(:superclass) &amp;&amp; superclass.respond_to?(:config)\n    superclass.config.inheritable_copy\n  else\n    # create a new \"anonymous\" class that will host the compiled reader methods\n    Class.new(Configuration).new\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-config_accessor\"> <span class=\"method-name\">config_accessor</span><span class=\"method-args\">(*names) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to add shortcut so that you don't have to refer to attribute through config. Also look at the example for config to contrast.</p> <p>Defines both class and instance config accessors.</p> <pre class=\"ruby\">class User\n  include ActiveSupport::Configurable\n  config_accessor :allowed_access\nend\n\nUser.allowed_access # =&gt; nil\nUser.allowed_access = false\nUser.allowed_access # =&gt; false\n\nuser = User.new\nuser.allowed_access # =&gt; false\nuser.allowed_access = true\nuser.allowed_access # =&gt; true\n\nUser.allowed_access # =&gt; false\n</pre> <p>The attribute name must be a valid method name in Ruby.</p> <pre class=\"ruby\">class User\n  include ActiveSupport::Configurable\n  config_accessor :\"1_Badname\"\nend\n# =&gt; NameError: invalid config attribute name\n</pre> <p>To opt out of the instance writer method, pass <code>instance_writer:\nfalse</code>. To opt out of the instance reader method, pass <code>instance_reader: false</code>.</p> <pre class=\"ruby\">class User\n  include ActiveSupport::Configurable\n  config_accessor :allowed_access, instance_reader: false, instance_writer: false\nend\n\nUser.allowed_access = false\nUser.allowed_access # =&gt; false\n\nUser.new.allowed_access = true # =&gt; NoMethodError\nUser.new.allowed_access        # =&gt; NoMethodError\n</pre> <p>Or pass <code>instance_accessor: false</code>, to opt out both instance methods.</p> <pre class=\"ruby\">class User\n  include ActiveSupport::Configurable\n  config_accessor :allowed_access, instance_accessor: false\nend\n\nUser.allowed_access = false\nUser.allowed_access # =&gt; false\n\nUser.new.allowed_access = true # =&gt; NoMethodError\nUser.new.allowed_access        # =&gt; NoMethodError\n</pre> <p>Also you can pass a block to set up the attribute with a default value.</p> <pre class=\"ruby\">class User\n  include ActiveSupport::Configurable\n  config_accessor :hair_colors do\n    [:brown, :black, :blonde, :red]\n  end\nend\n\nUser.hair_colors # =&gt; [:brown, :black, :blonde, :red]\n</pre> <div class=\"method-source-code\" id=\"config_accessor-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/configurable.rb, line 106\ndef config_accessor(*names)\n  options = names.extract_options!\n\n  names.each do |name|\n    raise NameError.new('invalid config attribute name') unless name =~ /\\A[_A-Za-z]\\w*\\z/\n\n    reader, reader_line = \"def #{name}; config.#{name}; end\", __LINE__\n    writer, writer_line = \"def #{name}=(value); config.#{name} = value; end\", __LINE__\n\n    singleton_class.class_eval reader, __FILE__, reader_line\n    singleton_class.class_eval writer, __FILE__, writer_line\n\n    unless options[:instance_accessor] == false\n      class_eval reader, __FILE__, reader_line unless options[:instance_reader] == false\n      class_eval writer, __FILE__, writer_line unless options[:instance_writer] == false\n    end\n    send(\"#{name}=\", yield) if block_given?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-configure\"> <span class=\"method-name\">configure</span><span class=\"method-args\">() { |config| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"configure-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/configurable.rb, line 36\ndef configure\n  yield config\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/deprecation":"<h1 id=\"class-ActiveSupport::Deprecation\" class=\"class\"> class ActiveSupport::Deprecation </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"deprecation/behavior\">ActiveSupport::Deprecation::Behavior</a>, <a class=\"include\" href=\"deprecation/reporting\">ActiveSupport::Deprecation::Reporting</a>, <a class=\"include\" href=\"deprecation/methodwrapper\">ActiveSupport::Deprecation::MethodWrapper</a>\n</dd>\n</dl> <section class=\"description\"> <p>Deprecation specifies the API used by Rails to deprecate methods, instance variables, objects and constants.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DEFAULT_BEHAVIORS\">DEFAULT_BEHAVIORS </dt>\n<dd>\n<p>Default warning behaviors per <a href=\"../rails#method-c-env\">Rails.env</a>.</p> </dd>\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-deprecation_horizon\"> <span class=\"method-name\">deprecation_horizon</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The version number in which the deprecated behavior will be removed, by default.</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(deprecation_horizon = '5.0', gem_name = 'Rails')</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>It accepts two parameters on initialization. The first is a version of library and the second is a library name</p> <pre class=\"ruby\">ActiveSupport::Deprecation.new('2.0', 'MyLibrary')\n</pre> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation.rb, line 35\ndef initialize(deprecation_horizon = '5.0', gem_name = 'Rails')\n  self.gem_name = gem_name\n  self.deprecation_horizon = deprecation_horizon\n  # By default, warnings are not silenced and debugging is off.\n  self.silenced = false\n  self.debug = false\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/deprecation/behavior":"<h1 id=\"module-ActiveSupport::Deprecation::Behavior\" class=\"module\"> module ActiveSupport::Deprecation::Behavior </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-debug\"> <span class=\"method-name\">debug</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Whether to print a backtrace along with the warning.</p> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-behavior\"> <span class=\"method-name\">behavior</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current behavior or if one isn't set, defaults to <code>:stderr</code>.</p> <div class=\"method-source-code\" id=\"behavior-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/behaviors.rb, line 46\ndef behavior\n  @behavior ||= [DEFAULT_BEHAVIORS[:stderr]]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-behavior-3D\"> <span class=\"method-name\">behavior=</span><span class=\"method-args\">(behavior)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the behavior to the specified value. Can be a single value, array, or an object that responds to <code>call</code>.</p> <p>Available behaviors:</p> <dl class=\"rdoc-list label-list\">\n<dt>\n<code>raise</code> </dt>\n<dd> <p>Raise <code>ActiveSupport::DeprecationException</code>.</p> </dd>\n<dt>\n<code>stderr</code> </dt>\n<dd> <p>Log all deprecation warnings to +$stderr+.</p> </dd>\n<dt>\n<code>log</code> </dt>\n<dd> <p>Log all deprecation warnings to <code>Rails.logger</code>.</p> </dd>\n<dt>\n<code>notify</code> </dt>\n<dd> <p>Use <code>ActiveSupport::Notifications</code> to notify <code>deprecation.rails</code>.</p> </dd>\n<dt>\n<code>silence</code> </dt>\n<dd> <p>Do nothing.</p> </dd>\n</dl> <p>Setting behaviors only affects deprecations that happen after boot time. <a href=\"../deprecation\">Deprecation</a> warnings raised by gems are not affected by this setting because they happen before Rails boots up.</p> <pre class=\"ruby\">ActiveSupport::Deprecation.behavior = :stderr\nActiveSupport::Deprecation.behavior = [:stderr, :log]\nActiveSupport::Deprecation.behavior = MyCustomHandler\nActiveSupport::Deprecation.behavior = -&gt;(message, callstack) {\n  # custom stuff\n}\n</pre> <div class=\"method-source-code\" id=\"behavior-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/behaviors.rb, line 71\ndef behavior=(behavior)\n  @behavior = Array(behavior).map { |b| DEFAULT_BEHAVIORS[b] || b }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/deprecation/deprecatedconstantproxy":"<h1 id=\"class-ActiveSupport::Deprecation::DeprecatedConstantProxy\" class=\"class\"> class ActiveSupport::Deprecation::DeprecatedConstantProxy </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">ActiveSupport::Deprecation::DeprecationProxy</dd>\n</dl> <section class=\"description\"> <p>This <a href=\"deprecatedconstantproxy\">DeprecatedConstantProxy</a> transforms constant to deprecated constant.</p> <pre class=\"ruby\">OLD_CONST = ActiveSupport::Deprecation::DeprecatedConstantProxy.new('OLD_CONST', 'NEW_CONST')\nOLD_CONST = ActiveSupport::Deprecation::DeprecatedConstantProxy.new('OLD_CONST', 'NEW_CONST', deprecator_instance)\n</pre> <p>When someone use old constant this will trigger <code>warn</code> method on <code>deprecator_instance</code>.</p> <p>Default deprecator is <code>ActiveSupport::Deprecation</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(old_const, new_const, deprecator = ActiveSupport::Deprecation.instance)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/proxy_wrappers.rb, line 106\ndef initialize(old_const, new_const, deprecator = ActiveSupport::Deprecation.instance)\n  @old_const = old_const\n  @new_const = new_const\n  @deprecator = deprecator\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-class\"> <span class=\"method-name\">class</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"class-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/proxy_wrappers.rb, line 112\ndef class\n  target.class\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/deprecation/deprecatedinstancevariableproxy":"<h1 id=\"class-ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy\" class=\"class\"> class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">ActiveSupport::Deprecation::DeprecationProxy</dd>\n</dl> <section class=\"description\"> <p>This <a href=\"deprecatedinstancevariableproxy\">DeprecatedInstanceVariableProxy</a> transforms instance variable to deprecated instance variable.</p> <pre class=\"ruby\">class Example\n  def initialize(deprecator)\n    @request = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(self, :request, :@request, deprecator)\n    @_request = :a_request\n  end\n\n  def request\n    @_request\n  end\n\n  def old_request\n    @request\n  end\nend\n</pre> <p>When someone execute any method on @request variable this will trigger <code>warn</code> method on <code>deprecator_instance</code> and will fetch <code>@_request</code> variable via <code>request</code> method and execute the same method on non-proxy instance variable.</p> <p>Default deprecator is <code>ActiveSupport::Deprecation</code>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(instance, method, var = \"@</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/proxy_wrappers.rb, line 79\ndef initialize(instance, method, var = \"@#{method}\", deprecator = ActiveSupport::Deprecation.instance)\n  @instance = instance\n  @method = method\n  @var = var\n  @deprecator = deprecator\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/deprecation/deprecatedobjectproxy":"<h1 id=\"class-ActiveSupport::Deprecation::DeprecatedObjectProxy\" class=\"class\"> class ActiveSupport::Deprecation::DeprecatedObjectProxy </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">ActiveSupport::Deprecation::DeprecationProxy</dd>\n</dl> <section class=\"description\"> <p>This <a href=\"deprecatedobjectproxy\">DeprecatedObjectProxy</a> transforms object to deprecated object.</p> <pre class=\"ruby\">@old_object = DeprecatedObjectProxy.new(Object.new, \"Don't use this object anymore!\")\n@old_object = DeprecatedObjectProxy.new(Object.new, \"Don't use this object anymore!\", deprecator_instance)\n</pre> <p>When someone executes any method except <code>inspect</code> on proxy object this will trigger <code>warn</code> method on <code>deprecator_instance</code>.</p> <p>Default deprecator is <code>ActiveSupport::Deprecation</code></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(object, message, deprecator = ActiveSupport::Deprecation.instance)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/proxy_wrappers.rb, line 38\ndef initialize(object, message, deprecator = ActiveSupport::Deprecation.instance)\n  @object = object\n  @message = message\n  @deprecator = deprecator\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/deprecation/methodwrapper":"<h1 id=\"module-ActiveSupport::Deprecation::MethodWrapper\" class=\"module\"> module ActiveSupport::Deprecation::MethodWrapper </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deprecate_methods\"> <span class=\"method-name\">deprecate_methods</span><span class=\"method-args\">(target_module, *method_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declare that a method has been deprecated.</p> <pre class=\"ruby\">module Fred\n  extend self\n\n  def foo; end\n  def bar; end\n  def baz; end\nend\n\nActiveSupport::Deprecation.deprecate_methods(Fred, :foo, bar: :qux, baz: 'use Bar#baz instead')\n# =&gt; [:foo, :bar, :baz]\n\nFred.foo\n# =&gt; \"DEPRECATION WARNING: foo is deprecated and will be removed from Rails 4.1.\"\n\nFred.bar\n# =&gt; \"DEPRECATION WARNING: bar is deprecated and will be removed from Rails 4.1 (use qux instead).\"\n\nFred.baz\n# =&gt; \"DEPRECATION WARNING: baz is deprecated and will be removed from Rails 4.1 (use Bar#baz instead).\"\n</pre> <div class=\"method-source-code\" id=\"deprecate_methods-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/method_wrappers.rb, line 28\ndef deprecate_methods(target_module, *method_names)\n  options = method_names.extract_options!\n  deprecator = options.delete(:deprecator) || ActiveSupport::Deprecation.instance\n  method_names += options.keys\n\n  method_names.each do |method_name|\n    target_module.alias_method_chain(method_name, :deprecation) do |target, punctuation|\n      target_module.send(:define_method, \"#{target}_with_deprecation#{punctuation}\") do |*args, &amp;block|\n        deprecator.deprecation_warning(method_name, options[method_name])\n        send(:\"#{target}_without_deprecation#{punctuation}\", *args, &amp;block)\n      end\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/deprecation/reporting":"<h1 id=\"module-ActiveSupport::Deprecation::Reporting\" class=\"module\"> module ActiveSupport::Deprecation::Reporting </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-gem_name\"> <span class=\"method-name\">gem_name</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Name of gem where method is deprecated</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-silenced\"> <span class=\"method-name\">silenced</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Whether to print a message (silent mode)</p> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deprecation_warning\"> <span class=\"method-name\">deprecation_warning</span><span class=\"method-args\">(deprecated_method_name, message = nil, caller_backtrace = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"deprecation_warning-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/reporting.rb, line 39\ndef deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil)\n  caller_backtrace ||= caller(2)\n  deprecated_method_warning(deprecated_method_name, message).tap do |msg|\n    warn(msg, caller_backtrace)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-silence\"> <span class=\"method-name\">silence</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Silence deprecation warnings within the block.</p> <pre class=\"ruby\">ActiveSupport::Deprecation.warn('something broke!')\n# =&gt; \"DEPRECATION WARNING: something broke! (called from your_code.rb:1)\"\n\nActiveSupport::Deprecation.silence do\n  ActiveSupport::Deprecation.warn('something broke!')\nend\n# =&gt; nil\n</pre> <div class=\"method-source-code\" id=\"silence-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/reporting.rb, line 32\ndef silence\n  old_silenced, @silenced = @silenced, true\n  yield\nensure\n  @silenced = old_silenced\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-warn\"> <span class=\"method-name\">warn</span><span class=\"method-args\">(message = nil, callstack = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Outputs a deprecation warning to the output configured by <code>ActiveSupport::Deprecation.behavior</code>.</p> <pre class=\"ruby\">ActiveSupport::Deprecation.warn('something broke!')\n# =&gt; \"DEPRECATION WARNING: something broke! (called from your_code.rb:1)\"\n</pre> <div class=\"method-source-code\" id=\"warn-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/deprecation/reporting.rb, line 14\ndef warn(message = nil, callstack = nil)\n  return if silenced\n\n  callstack ||= caller(2)\n  deprecation_message(callstack, message).tap do |m|\n    behavior.each { |b| b.call(m, callstack) }\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/duration":"<h1 id=\"class-ActiveSupport::Duration\" class=\"class\"> class ActiveSupport::Duration </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Provides accurate date and time measurements using <a href=\"../date#method-i-advance\">Date#advance</a> and <a href=\"../time#method-i-advance\">Time#advance</a>, respectively. It mainly supports the methods on <a href=\"../numeric\">Numeric</a>.</p> <pre class=\"ruby\">1.month.ago       # equivalent to Time.now.advance(months: -1)\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-parts\"> <span class=\"method-name\">parts</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-value\"> <span class=\"method-name\">value</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-2B\"> <span class=\"method-name\">+</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds another <a href=\"duration\">Duration</a> or a <a href=\"../numeric\">Numeric</a> to this <a href=\"duration\">Duration</a>. <a href=\"../numeric\">Numeric</a> values are treated as seconds.</p> <div class=\"method-source-code\" id=\"2B-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 18\ndef +(other)\n  if Duration === other\n    Duration.new(value + other.value, @parts + other.parts)\n  else\n    Duration.new(value + other, @parts + [[:seconds, other]])\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-2D\"> <span class=\"method-name\">-</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Subtracts another <a href=\"duration\">Duration</a> or a <a href=\"../numeric\">Numeric</a> from this <a href=\"duration\">Duration</a>. <a href=\"../numeric\">Numeric</a> values are treated as seconds.</p> <div class=\"method-source-code\" id=\"2D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 28\ndef -(other)\n  self + (-other)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D\"> <span class=\"method-name\">==</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if <code>other</code> is also a <a href=\"duration\">Duration</a> instance with the same <code>value</code>, or if <code>other == value</code>.</p> <div class=\"method-source-code\" id=\"3D-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 47\ndef ==(other)\n  if Duration === other\n    other.value == value\n  else\n    other == value\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ago\"> <span class=\"method-name\">ago</span><span class=\"method-args\">(time = ::Time.current)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calculates a new <a href=\"../time\">Time</a> or <a href=\"../date\">Date</a> that is as far in the past as this <a href=\"duration\">Duration</a> represents.</p> <div class=\"method-source-code\" id=\"ago-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 108\ndef ago(time = ::Time.current)\n  sum(-1, time)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"duration#method-i-until\">until</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eql-3F\"> <span class=\"method-name\">eql?</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if <code>other</code> is also a <a href=\"duration\">Duration</a> instance, which has the same parts as this one.</p> <div class=\"method-source-code\" id=\"eql-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 85\ndef eql?(other)\n  Duration === other &amp;&amp; other.value.eql?(value)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-from_now\"> <span class=\"method-name\">from_now</span><span class=\"method-args\">(time = ::Time.current)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"duration#method-i-since\">since</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-hash\"> <span class=\"method-name\">hash</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"hash-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 89\ndef hash\n  @value.hash\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to_missing-3F\"> <span class=\"method-name\">respond_to_missing?</span><span class=\"method-args\">(method, include_private=false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"respond_to_missing-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 125\ndef respond_to_missing?(method, include_private=false) #:nodoc\n  @value.respond_to?(method, include_private)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-since\"> <span class=\"method-name\">since</span><span class=\"method-args\">(time = ::Time.current)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calculates a new <a href=\"../time\">Time</a> or <a href=\"../date\">Date</a> that is as far in the future as this <a href=\"duration\">Duration</a> represents.</p> <div class=\"method-source-code\" id=\"since-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 101\ndef since(time = ::Time.current)\n  sum(1, time)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"duration#method-i-from_now\">from_now</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_i\"> <span class=\"method-name\">to_i</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the number of seconds that this <a href=\"duration\">Duration</a> represents.</p> <pre class=\"ruby\">1.minute.to_i   # =&gt; 60\n1.hour.to_i     # =&gt; 3600\n1.day.to_i      # =&gt; 86400\n</pre> <p>Note that this conversion makes some assumptions about the duration of some periods, e.g. months are always 30 days and years are 365.25 days:</p> <pre class=\"ruby\"># equivalent to 30.days.to_i\n1.month.to_i    # =&gt; 2592000\n\n# equivalent to 365.25.days.to_i\n1.year.to_i     # =&gt; 31557600\n</pre> <p>In such cases, Ruby's core <a href=\"http://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html\">Date</a> and <a href=\"http://ruby-doc.org/stdlib/libdoc/time/rdoc/Time.html\">Time</a> should be used for precision date and time arithmetic.</p> <div class=\"method-source-code\" id=\"to_i-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 79\ndef to_i\n  @value.to_i\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/duration.rb, line 55\ndef to_s\n  @value.to_s\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-until\"> <span class=\"method-name\">until</span><span class=\"method-args\">(time = ::Time.current)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"duration#method-i-ago\">ago</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/gzip":"<h1 id=\"module-ActiveSupport::Gzip\" class=\"module\"> module ActiveSupport::Gzip </h1> <section class=\"description\"> <p>A convenient wrapper for the zlib standard library that allows compression/decompression of strings with gzip.</p> <pre class=\"ruby\">gzip = ActiveSupport::Gzip.compress('compress me!')\n# =&gt; \"\\x1F\\x8B\\b\\x00o\\x8D\\xCDO\\x00\\x03K\\xCE\\xCF-(J-.V\\xC8MU\\x04\\x00R&gt;n\\x83\\f\\x00\\x00\\x00\"\n\nActiveSupport::Gzip.decompress(gzip)\n# =&gt; \"compress me!\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-compress\"> <span class=\"method-name\">compress</span><span class=\"method-args\">(source, level=Zlib::DEFAULT_COMPRESSION, strategy=Zlib::DEFAULT_STRATEGY)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Compresses a string using gzip.</p> <div class=\"method-source-code\" id=\"compress-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/gzip.rb, line 28\ndef self.compress(source, level=Zlib::DEFAULT_COMPRESSION, strategy=Zlib::DEFAULT_STRATEGY)\n  output = Stream.new\n  gz = Zlib::GzipWriter.new(output, level, strategy)\n  gz.write(source)\n  gz.close\n  output.string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-decompress\"> <span class=\"method-name\">decompress</span><span class=\"method-args\">(source)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Decompresses a gzipped string.</p> <div class=\"method-source-code\" id=\"decompress-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/gzip.rb, line 23\ndef self.decompress(source)\n  Zlib::GzipReader.new(StringIO.new(source)).read\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/hashwithindifferentaccess":"<h1 id=\"class-Object::HashWithIndifferentAccess\" class=\"class\"> class Object::HashWithIndifferentAccess </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../hash\">Hash</a></dd>\n</dl> <section class=\"description\"> <p>Implements a hash where keys <code>:foo</code> and <code>\"foo\"</code> are considered to be the same.</p> <pre class=\"ruby\">rgb = ActiveSupport::HashWithIndifferentAccess.new\n\nrgb[:black] = '#000000'\nrgb[:black]  # =&gt; '#000000'\nrgb['black'] # =&gt; '#000000'\n\nrgb['white'] = '#FFFFFF'\nrgb[:white]  # =&gt; '#FFFFFF'\nrgb['white'] # =&gt; '#FFFFFF'\n</pre> <p>Internally symbols are mapped to strings when used as keys in the entire writing interface (calling <code>[]=</code>, <code>merge</code>, etc). This mapping belongs to the public interface. For example, given:</p> <pre class=\"ruby\">hash = ActiveSupport::HashWithIndifferentAccess.new(a: 1)\n</pre> <p>You are guaranteed that the key is returned as a string:</p> <pre class=\"ruby\">hash.keys # =&gt; [\"a\"]\n</pre> <p>Technically other types of keys are accepted:</p> <pre class=\"ruby\">hash = ActiveSupport::HashWithIndifferentAccess.new(a: 1)\nhash[0] = 0\nhash # =&gt; {\"a\"=&gt;1, 0=&gt;0}\n</pre> <p>but this class is intended for use cases where strings or symbols are the expected keys and it is convenient to understand both as the same. For example the <code>params</code> hash in Ruby on Rails.</p> <p>Note that core extensions define <code>Hash#with_indifferent_access</code>:</p> <pre class=\"ruby\">rgb = { black: '#000000', white: '#FFFFFF' }.with_indifferent_access\n</pre> <p>which may be handy.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 83\ndef self.[](*args)\n  new.merge!(Hash[*args])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(constructor = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 58\ndef initialize(constructor = {})\n  if constructor.respond_to?(:to_hash)\n    super()\n    update(constructor)\n  else\n    super(constructor)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new_from_hash_copying_default\"> <span class=\"method-name\">new_from_hash_copying_default</span><span class=\"method-args\">(hash)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new_from_hash_copying_default-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 75\ndef self.new_from_hash_copying_default(hash)\n  hash = hash.to_hash\n  new(hash).tap do |new_hash|\n    new_hash.default = hash.default\n    new_hash.default_proc = hash.default_proc if hash.default_proc\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(key, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Assigns a new value to the hash:</p> <pre class=\"ruby\">hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:key] = 'value'\n</pre> <p>This value can be later fetched using either <code>:key</code> or +'key'+.</p> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 96\ndef []=(key, value)\n  regular_writer(convert_key(key), convert_value(value, for: :assignment))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"hashwithindifferentaccess#method-i-regular_writer\">regular_writer</a>, <a href=\"hashwithindifferentaccess#method-i-store\">store</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_stringify_keys\"> <span class=\"method-name\">deep_stringify_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"deep_stringify_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 233\ndef deep_stringify_keys; dup end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_stringify_keys-21\"> <span class=\"method-name\">deep_stringify_keys!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"deep_stringify_keys-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 231\ndef deep_stringify_keys!; self end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_symbolize_keys\"> <span class=\"method-name\">deep_symbolize_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"deep_symbolize_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 237\ndef deep_symbolize_keys; to_hash.deep_symbolize_keys! end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default\"> <span class=\"method-name\">default</span><span class=\"method-args\">(key = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"default-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 67\ndef default(key = nil)\n  if key.is_a?(Symbol) &amp;&amp; include?(key = key.to_s)\n    self[key]\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the specified key from the hash.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 226\ndef delete(key)\n  super(convert_key(key))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dup\"> <span class=\"method-name\">dup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a shallow copy of the hash.</p> <pre class=\"ruby\">hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: 'b' } })\ndup  = hash.dup\ndup[:a][:c] = 'c'\n\nhash[:a][:c] # =&gt; nil\ndup[:a][:c]  # =&gt; \"c\"\n</pre> <div class=\"method-source-code\" id=\"dup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 189\ndef dup\n  self.class.new(self).tap do |new_hash|\n    new_hash.default = default\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extractable_options-3F\"> <span class=\"method-name\">extractable_options?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds members of this class.</p> <div class=\"method-source-code\" id=\"extractable_options-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 46\ndef extractable_options?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fetch\"> <span class=\"method-name\">fetch</span><span class=\"method-args\">(key, *extras)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>Hash#fetch</code> where the key passed as argument can be either a string or a symbol:</p> <pre class=\"ruby\">counters = ActiveSupport::HashWithIndifferentAccess.new\ncounters[:foo] = 1\n\ncounters.fetch('foo')          # =&gt; 1\ncounters.fetch(:bar, 0)        # =&gt; 0\ncounters.fetch(:bar) { |key| 0 } # =&gt; 0\ncounters.fetch(:zoo)           # =&gt; KeyError: key not found: \"zoo\"\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"fetch-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 167\ndef fetch(key, *extras)\n  super(convert_key(key), *extras)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-has_key-3F\"> <span class=\"method-name\">has_key?</span><span class=\"method-args\">(key)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hashwithindifferentaccess#method-i-key-3F\">key?</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-include-3F\"> <span class=\"method-name\">include?</span><span class=\"method-args\">(key)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hashwithindifferentaccess#method-i-key-3F\">key?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-key-3F\"> <span class=\"method-name\">key?</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Checks the hash for a key matching the argument passed in:</p> <pre class=\"ruby\">hash = ActiveSupport::HashWithIndifferentAccess.new\nhash['key'] = 'value'\nhash.key?(:key)  # =&gt; true\nhash.key?('key') # =&gt; true\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"key-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 149\ndef key?(key)\n  super(convert_key(key))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"hashwithindifferentaccess#method-i-include-3F\">include?</a>, <a href=\"hashwithindifferentaccess#method-i-has_key-3F\">has_key?</a>, <a href=\"hashwithindifferentaccess#method-i-member-3F\">member?</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-member-3F\"> <span class=\"method-name\">member?</span><span class=\"method-args\">(key)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hashwithindifferentaccess#method-i-key-3F\">key?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-merge\"> <span class=\"method-name\">merge</span><span class=\"method-args\">(hash, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method has the same semantics of <code>update</code>, except it does not modify the receiver but rather returns a new hash with indifferent access with the result of the merge.</p> <div class=\"method-source-code\" id=\"merge-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 198\ndef merge(hash, &amp;block)\n  self.dup.update(hash, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-merge-21\"> <span class=\"method-name\">merge!</span><span class=\"method-args\">(other_hash)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hashwithindifferentaccess#method-i-update\">update</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-nested_under_indifferent_access\"> <span class=\"method-name\">nested_under_indifferent_access</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"nested_under_indifferent_access-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 54\ndef nested_under_indifferent_access\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-regular_update\"> <span class=\"method-name\">regular_update</span><span class=\"method-args\">(other_hash)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hashwithindifferentaccess#method-i-update\">update</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-regular_writer\"> <span class=\"method-name\">regular_writer</span><span class=\"method-args\">(key, value)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hashwithindifferentaccess#method-i-5B-5D-3D\">[]=</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reject\"> <span class=\"method-name\">reject</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"reject-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 244\ndef reject(*args, &amp;block)\n  dup.tap { |hash| hash.reject!(*args, &amp;block) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-replace\"> <span class=\"method-name\">replace</span><span class=\"method-args\">(other_hash)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces the contents of this hash with other_hash.</p> <pre class=\"ruby\">h = { \"a\" =&gt; 100, \"b\" =&gt; 200 }\nh.replace({ \"c\" =&gt; 300, \"d\" =&gt; 400 }) # =&gt; {\"c\"=&gt;300, \"d\"=&gt;400}\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"replace-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 221\ndef replace(other_hash)\n  super(self.class.new_from_hash_copying_default(other_hash))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reverse_merge\"> <span class=\"method-name\">reverse_merge</span><span class=\"method-args\">(other_hash)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Like <code>merge</code> but the other way around: Merges the receiver into the argument and returns a new hash with indifferent access as result:</p> <pre class=\"ruby\">hash = ActiveSupport::HashWithIndifferentAccess.new\nhash['a'] = nil\nhash.reverse_merge(a: 0, b: 1) # =&gt; {\"a\"=&gt;nil, \"b\"=&gt;1}\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../hash#method-i-reverse_merge\">Hash#reverse_merge</a> </div> <div class=\"method-source-code\" id=\"reverse_merge-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 208\ndef reverse_merge(other_hash)\n  super(self.class.new_from_hash_copying_default(other_hash))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reverse_merge-21\"> <span class=\"method-name\">reverse_merge!</span><span class=\"method-args\">(other_hash)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same semantics as <code>reverse_merge</code> but modifies the receiver in-place.</p> <div class=\"method-source-code\" id=\"reverse_merge-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 213\ndef reverse_merge!(other_hash)\n  replace(reverse_merge( other_hash ))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select\"> <span class=\"method-name\">select</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"select-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 240\ndef select(*args, &amp;block)\n  dup.tap { |hash| hash.select!(*args, &amp;block) }\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-store\"> <span class=\"method-name\">store</span><span class=\"method-args\">(key, value)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hashwithindifferentaccess#method-i-5B-5D-3D\">[]=</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stringify_keys\"> <span class=\"method-name\">stringify_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"stringify_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 232\ndef stringify_keys; dup end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stringify_keys-21\"> <span class=\"method-name\">stringify_keys!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"stringify_keys-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 230\ndef stringify_keys!; self end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-symbolize_keys\"> <span class=\"method-name\">symbolize_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"symbolize_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 236\ndef symbolize_keys; to_hash.symbolize_keys! end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_hash\"> <span class=\"method-name\">to_hash</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert to a regular hash with string keys.</p> <div class=\"method-source-code\" id=\"to_hash-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 249\ndef to_hash\n  _new_hash = Hash.new(default)\n  each do |key, value|\n    _new_hash[key] = convert_value(value, for: :to_hash)\n  end\n  _new_hash\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_options-21\"> <span class=\"method-name\">to_options!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_options-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 238\ndef to_options!; self end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update\"> <span class=\"method-name\">update</span><span class=\"method-args\">(other_hash) { |convert_key(key), self, value| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Updates the receiver in-place, merging in the hash passed as argument:</p> <pre class=\"ruby\">hash_1 = ActiveSupport::HashWithIndifferentAccess.new\nhash_1[:key] = 'value'\n\nhash_2 = ActiveSupport::HashWithIndifferentAccess.new\nhash_2[:key] = 'New Value!'\n\nhash_1.update(hash_2) # =&gt; {\"key\"=&gt;\"New Value!\"}\n</pre> <p>The argument can be either an <code>ActiveSupport::HashWithIndifferentAccess</code> or a regular <code>Hash</code>. In either case the merge respects the semantics of indifferent access.</p> <p>If the argument is a regular hash with keys <code>:key</code> and +“key”+ only one of the values end up in the receiver, but which one is unspecified.</p> <p>When given a block, the value for duplicated keys will be determined by the result of invoking the block with the duplicated key, the value in the receiver, and the value in <code>other_hash</code>. The rules for duplicated keys follow the semantics of indifferent access:</p> <pre class=\"ruby\">hash_1[:key] = 10\nhash_2['key'] = 12\nhash_1.update(hash_2) { |key, old, new| old + new } # =&gt; {\"key\"=&gt;22}\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"update-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 127\ndef update(other_hash)\n  if other_hash.is_a? HashWithIndifferentAccess\n    super(other_hash)\n  else\n    other_hash.to_hash.each_pair do |key, value|\n      if block_given? &amp;&amp; key?(key)\n        value = yield(convert_key(key), self[key], value)\n      end\n      regular_writer(convert_key(key), convert_value(value))\n    end\n    self\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"hashwithindifferentaccess#method-i-regular_update\">regular_update</a>, <a href=\"hashwithindifferentaccess#method-i-merge-21\">merge!</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-values_at\"> <span class=\"method-name\">values_at</span><span class=\"method-args\">(*indices)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of the values at the specified indices:</p> <pre class=\"ruby\">hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:a] = 'x'\nhash[:b] = 'y'\nhash.values_at('a', 'b') # =&gt; [\"x\", \"y\"]\n</pre> <div class=\"method-source-code\" id=\"values_at-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 177\ndef values_at(*indices)\n  indices.collect { |key| self[convert_key(key)] }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_indifferent_access\"> <span class=\"method-name\">with_indifferent_access</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"with_indifferent_access-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 50\ndef with_indifferent_access\n  dup\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-convert_key\"> <span class=\"method-name\">convert_key</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"convert_key-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 258\ndef convert_key(key)\n  key.kind_of?(Symbol) ? key.to_s : key\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-convert_value\"> <span class=\"method-name\">convert_value</span><span class=\"method-args\">(value, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"convert_value-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/hash_with_indifferent_access.rb, line 262\ndef convert_value(value, options = {})\n  if value.is_a? Hash\n    if options[:for] == :to_hash\n      value.to_hash\n    else\n      value.nested_under_indifferent_access\n    end\n  elsif value.is_a?(Array)\n    unless options[:for] == :assignment\n      value = value.dup\n    end\n    value.map! { |e| convert_value(e, options) }\n  else\n    value\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/inflector":"<h1 id=\"module-ActiveSupport::Inflector\" class=\"module\"> module ActiveSupport::Inflector </h1> <section class=\"description\"> <p>The <a href=\"inflector\">Inflector</a> transforms words from singular to plural, class names to table names, modularized class names to ones without, and class names to foreign keys. The default inflections for pluralization, singularization, and uncountable words are kept in inflections.rb.</p> <p>The Rails core team has stated patches for the inflections library will not be accepted in order to avoid breaking legacy applications which may be relying on errant inflections. If you discover an incorrect inflection and require it for your application or wish to define rules for languages other than English, please correct or add them yourself (explained below).</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-camelize\"> <span class=\"method-name\">camelize</span><span class=\"method-args\">(term, uppercase_first_letter = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>By default, <code>camelize</code> converts strings to UpperCamelCase. If the argument to <code>camelize</code> is set to <code>:lower</code> then <code>camelize</code> produces lowerCamelCase.</p> <p><code>camelize</code> will also convert '/' to '::' which is useful for converting paths to namespaces.</p> <pre class=\"ruby\">'active_model'.camelize                # =&gt; \"ActiveModel\"\n'active_model'.camelize(:lower)        # =&gt; \"activeModel\"\n'active_model/errors'.camelize         # =&gt; \"ActiveModel::Errors\"\n'active_model/errors'.camelize(:lower) # =&gt; \"activeModel::Errors\"\n</pre> <p>As a rule of thumb you can think of <code>camelize</code> as the inverse of <code>underscore</code>, though there are cases where that does not hold:</p> <pre class=\"ruby\">'SSLError'.underscore.camelize # =&gt; \"SslError\"\n</pre> <div class=\"method-source-code\" id=\"camelize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 67\ndef camelize(term, uppercase_first_letter = true)\n  string = term.to_s\n  if uppercase_first_letter\n    string = string.sub(/^[a-z\\d]*/) { inflections.acronyms[$&amp;] || $&amp;.capitalize }\n  else\n    string = string.sub(/^(?:#{inflections.acronym_regex}(?=\\b|[A-Z_])|\\w)/) { $&amp;.downcase }\n  end\n  string.gsub!(/(?:_|(\\/))([a-z\\d]*)/i) { \"#{$1}#{inflections.acronyms[$2] || $2.capitalize}\" }\n  string.gsub!(/\\//, '::')\n  string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-classify\"> <span class=\"method-name\">classify</span><span class=\"method-args\">(table_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a class name from a plural table name like Rails does for table names to models. Note that this returns a string and not a <a href=\"../class\">Class</a> (To convert to an actual class follow <code>classify</code> with <code>constantize</code>).</p> <pre class=\"ruby\">'egg_and_hams'.classify # =&gt; \"EggAndHam\"\n'posts'.classify        # =&gt; \"Post\"\n</pre> <p>Singular names are not handled correctly:</p> <pre class=\"ruby\">'calculus'.classify     # =&gt; \"Calculu\"\n</pre> <div class=\"method-source-code\" id=\"classify-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 178\ndef classify(table_name)\n  # strip out any leading schema name\n  camelize(singularize(table_name.to_s.sub(/.*\\./, '')))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-constantize\"> <span class=\"method-name\">constantize</span><span class=\"method-args\">(camel_cased_word)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Tries to find a constant with the name specified in the argument string.</p> <pre class=\"ruby\">'Module'.constantize     # =&gt; Module\n'Test::Unit'.constantize # =&gt; Test::Unit\n</pre> <p>The name is assumed to be the one of a top-level constant, no matter whether it starts with “::” or not. No lexical context is taken into account:</p> <pre class=\"ruby\">C = 'outside'\nmodule M\n  C = 'inside'\n  C               # =&gt; 'inside'\n  'C'.constantize # =&gt; 'outside', same as ::C\nend\n</pre> <p><a href=\"../nameerror\">NameError</a> is raised when the name is not in CamelCase or the constant is unknown.</p> <div class=\"method-source-code\" id=\"constantize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 249\ndef constantize(camel_cased_word)\n  names = camel_cased_word.split('::')\n\n  # Trigger a built-in NameError exception including the ill-formed constant in the message.\n  Object.const_get(camel_cased_word) if names.empty?\n\n  # Remove the first blank element in case of '::ClassName' notation.\n  names.shift if names.size &gt; 1 &amp;&amp; names.first.empty?\n\n  names.inject(Object) do |constant, name|\n    if constant == Object\n      constant.const_get(name)\n    else\n      candidate = constant.const_get(name)\n      next candidate if constant.const_defined?(name, false)\n      next candidate unless Object.const_defined?(name)\n\n      # Go down the ancestors to check if it is owned directly. The check\n      # stops when we reach Object or the end of ancestors tree.\n      constant = constant.ancestors.inject do |const, ancestor|\n        break const    if ancestor == Object\n        break ancestor if ancestor.const_defined?(name, false)\n        const\n      end\n\n      # owner is in Object, so raise\n      constant.const_get(name, false)\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dasherize\"> <span class=\"method-name\">dasherize</span><span class=\"method-args\">(underscored_word)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces underscores with dashes in the string.</p> <pre class=\"ruby\">'puni_puni'.dasherize # =&gt; \"puni-puni\"\n</pre> <div class=\"method-source-code\" id=\"dasherize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 186\ndef dasherize(underscored_word)\n  underscored_word.tr('_', '-')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deconstantize\"> <span class=\"method-name\">deconstantize</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the rightmost segment from the constant expression in the string.</p> <pre class=\"ruby\">'Net::HTTP'.deconstantize   # =&gt; \"Net\"\n'::Net::HTTP'.deconstantize # =&gt; \"::Net\"\n'String'.deconstantize      # =&gt; \"\"\n'::String'.deconstantize    # =&gt; \"\"\n''.deconstantize            # =&gt; \"\"\n</pre> <p>See also <code>demodulize</code>.</p> <div class=\"method-source-code\" id=\"deconstantize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 216\ndef deconstantize(path)\n  path.to_s[0, path.rindex('::') || 0] # implementation based on the one in facets' Module#spacename\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-demodulize\"> <span class=\"method-name\">demodulize</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the module part from the expression in the string.</p> <pre class=\"ruby\">'ActiveRecord::CoreExtensions::String::Inflections'.demodulize # =&gt; \"Inflections\"\n'Inflections'.demodulize                                       # =&gt; \"Inflections\"\n'::Inflections'.demodulize                                     # =&gt; \"Inflections\"\n''.demodulize                                                  # =&gt; \"\"\n</pre> <p>See also <code>deconstantize</code>.</p> <div class=\"method-source-code\" id=\"demodulize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 198\ndef demodulize(path)\n  path = path.to_s\n  if i = path.rindex('::')\n    path[(i+2)..-1]\n  else\n    path\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-foreign_key\"> <span class=\"method-name\">foreign_key</span><span class=\"method-args\">(class_name, separate_class_name_and_id_with_underscore = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a foreign key name from a class name. <code>separate_class_name_and_id_with_underscore</code> sets whether the method should put '_' between the name and 'id'.</p> <pre class=\"ruby\">'Message'.foreign_key        # =&gt; \"message_id\"\n'Message'.foreign_key(false) # =&gt; \"messageid\"\n'Admin::Post'.foreign_key    # =&gt; \"post_id\"\n</pre> <div class=\"method-source-code\" id=\"foreign_key-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 227\ndef foreign_key(class_name, separate_class_name_and_id_with_underscore = true)\n  underscore(demodulize(class_name)) + (separate_class_name_and_id_with_underscore ? \"_id\" : \"id\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-humanize\"> <span class=\"method-name\">humanize</span><span class=\"method-args\">(lower_case_and_underscored_word, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Tweaks an attribute name for display to end users.</p> <p>Specifically, <code>humanize</code> performs these transformations:</p> <pre>* Applies human inflection rules to the argument.\n* Deletes leading underscores, if any.\n* Removes a \"_id\" suffix if present.\n* Replaces underscores with spaces, if any.\n* Downcases all words except acronyms.\n* Capitalizes the first word.</pre> <p>The capitalization of the first word can be turned off by setting the <code>:capitalize</code> option to false (default is true).</p> <pre class=\"ruby\">humanize('employee_salary')              # =&gt; \"Employee salary\"\nhumanize('author_id')                    # =&gt; \"Author\"\nhumanize('author_id', capitalize: false) # =&gt; \"author\"\nhumanize('_id')                          # =&gt; \"Id\"\n</pre> <p>If “SSL” was defined to be an acronym:</p> <pre class=\"ruby\">humanize('ssl_error') # =&gt; \"SSL error\"\n</pre> <div class=\"method-source-code\" id=\"humanize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 124\ndef humanize(lower_case_and_underscored_word, options = {})\n  result = lower_case_and_underscored_word.to_s.dup\n\n  inflections.humans.each { |(rule, replacement)| break if result.sub!(rule, replacement) }\n\n  result.sub!(/\\A_+/, '')\n  result.sub!(/_id\\z/, '')\n  result.tr!('_', ' ')\n\n  result.gsub!(/([a-z\\d]*)/i) do |match|\n    \"#{inflections.acronyms[match] || match.downcase}\"\n  end\n\n  if options.fetch(:capitalize, true)\n    result.sub!(/\\A\\w/) { |match| match.upcase }\n  end\n\n  result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inflections\"> <span class=\"method-name\">inflections</span><span class=\"method-args\">(locale = :en) { |instance| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Yields a singleton instance of <a href=\"inflector/inflections\">Inflector::Inflections</a> so you can specify additional inflector rules. If passed an optional locale, rules for other languages can be specified. If not specified, defaults to <code>:en</code>. Only rules for English are provided.</p> <pre class=\"ruby\">ActiveSupport::Inflector.inflections(:en) do |inflect|\n  inflect.uncountable 'rails'\nend\n</pre> <div class=\"method-source-code\" id=\"inflections-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 203\ndef inflections(locale = :en)\n  if block_given?\n    yield Inflections.instance(locale)\n  else\n    Inflections.instance(locale)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ordinal\"> <span class=\"method-name\">ordinal</span><span class=\"method-args\">(number)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the suffix that should be added to a number to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.</p> <pre class=\"ruby\">ordinal(1)     # =&gt; \"st\"\nordinal(2)     # =&gt; \"nd\"\nordinal(1002)  # =&gt; \"nd\"\nordinal(1003)  # =&gt; \"rd\"\nordinal(-11)   # =&gt; \"th\"\nordinal(-1021) # =&gt; \"st\"\n</pre> <div class=\"method-source-code\" id=\"ordinal-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 320\ndef ordinal(number)\n  abs_number = number.to_i.abs\n\n  if (11..13).include?(abs_number % 100)\n    \"th\"\n  else\n    case abs_number % 10\n      when 1; \"st\"\n      when 2; \"nd\"\n      when 3; \"rd\"\n      else    \"th\"\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ordinalize\"> <span class=\"method-name\">ordinalize</span><span class=\"method-args\">(number)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.</p> <pre class=\"ruby\">ordinalize(1)     # =&gt; \"1st\"\nordinalize(2)     # =&gt; \"2nd\"\nordinalize(1002)  # =&gt; \"1002nd\"\nordinalize(1003)  # =&gt; \"1003rd\"\nordinalize(-11)   # =&gt; \"-11th\"\nordinalize(-1021) # =&gt; \"-1021st\"\n</pre> <div class=\"method-source-code\" id=\"ordinalize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 344\ndef ordinalize(number)\n  \"#{number}#{ordinal(number)}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parameterize\"> <span class=\"method-name\">parameterize</span><span class=\"method-args\">(string, sep = '-')</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces special characters in a string so that it may be used as part of a 'pretty' URL.</p> <pre>class Person\n  def to_param\n    \"#{id}-#{name.parameterize}\"\n  end\nend\n\n@person = Person.find(1)\n# =&gt; #&lt;Person id: 1, name: \"Donald E. Knuth\"&gt;\n\n&lt;%= link_to(@person.name, person_path(@person)) %&gt;\n# =&gt; &lt;a href=\"/person/1-donald-e-knuth\"&gt;Donald E. Knuth&lt;/a&gt;</pre> <div class=\"method-source-code\" id=\"parameterize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/transliterate.rb, line 80\ndef parameterize(string, sep = '-')\n  # replace accented chars with their ascii equivalents\n  parameterized_string = transliterate(string)\n  # Turn unwanted chars into the separator\n  parameterized_string.gsub!(/[^a-z0-9\\-_]+/i, sep)\n  unless sep.nil? || sep.empty?\n    re_sep = Regexp.escape(sep)\n    # No more than one of the separator in a row.\n    parameterized_string.gsub!(/#{re_sep}{2,}/, sep)\n    # Remove leading/trailing separator.\n    parameterized_string.gsub!(/^#{re_sep}|#{re_sep}$/i, '')\n  end\n  parameterized_string.downcase\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pluralize\"> <span class=\"method-name\">pluralize</span><span class=\"method-args\">(word, locale = :en)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the plural form of the word in the string.</p> <p>If passed an optional <code>locale</code> parameter, the word will be pluralized using rules defined for that language. By default, this parameter is set to <code>:en</code>.</p> <pre class=\"ruby\">'post'.pluralize             # =&gt; \"posts\"\n'octopus'.pluralize          # =&gt; \"octopi\"\n'sheep'.pluralize            # =&gt; \"sheep\"\n'words'.pluralize            # =&gt; \"words\"\n'CamelOctopus'.pluralize     # =&gt; \"CamelOctopi\"\n'ley'.pluralize(:es)         # =&gt; \"leyes\"\n</pre> <div class=\"method-source-code\" id=\"pluralize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 30\ndef pluralize(word, locale = :en)\n  apply_inflections(word, inflections(locale).plurals)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-safe_constantize\"> <span class=\"method-name\">safe_constantize</span><span class=\"method-args\">(camel_cased_word)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Tries to find a constant with the name specified in the argument string.</p> <pre class=\"ruby\">'Module'.safe_constantize     # =&gt; Module\n'Test::Unit'.safe_constantize # =&gt; Test::Unit\n</pre> <p>The name is assumed to be the one of a top-level constant, no matter whether it starts with “::” or not. No lexical context is taken into account:</p> <pre class=\"ruby\">C = 'outside'\nmodule M\n  C = 'inside'\n  C                    # =&gt; 'inside'\n  'C'.safe_constantize # =&gt; 'outside', same as ::C\nend\n</pre> <p><code>nil</code> is returned when the name is not in CamelCase or the constant (or part of it) is unknown.</p> <pre class=\"ruby\">'blargle'.safe_constantize  # =&gt; nil\n'UnknownModule'.safe_constantize  # =&gt; nil\n'UnknownModule::Foo::Bar'.safe_constantize  # =&gt; nil\n</pre> <div class=\"method-source-code\" id=\"safe_constantize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 302\ndef safe_constantize(camel_cased_word)\n  constantize(camel_cased_word)\nrescue NameError =&gt; e\n  raise if e.name &amp;&amp; !(camel_cased_word.to_s.split(\"::\").include?(e.name.to_s) ||\n    e.name.to_s == camel_cased_word.to_s)\nrescue ArgumentError =&gt; e\n  raise unless e.message =~ /not missing constant #{const_regexp(camel_cased_word)}\\!$/\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-singularize\"> <span class=\"method-name\">singularize</span><span class=\"method-args\">(word, locale = :en)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The reverse of <code>pluralize</code>, returns the singular form of a word in a string.</p> <p>If passed an optional <code>locale</code> parameter, the word will be singularized using rules defined for that language. By default, this parameter is set to <code>:en</code>.</p> <pre class=\"ruby\">'posts'.singularize            # =&gt; \"post\"\n'octopi'.singularize           # =&gt; \"octopus\"\n'sheep'.singularize            # =&gt; \"sheep\"\n'word'.singularize             # =&gt; \"word\"\n'CamelOctopi'.singularize      # =&gt; \"CamelOctopus\"\n'leyes'.singularize(:es)       # =&gt; \"ley\"\n</pre> <div class=\"method-source-code\" id=\"singularize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 47\ndef singularize(word, locale = :en)\n  apply_inflections(word, inflections(locale).singulars)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tableize\"> <span class=\"method-name\">tableize</span><span class=\"method-args\">(class_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create the name of a table like Rails does for models to table names. This method uses the <code>pluralize</code> method on the last word in the string.</p> <pre class=\"ruby\">'RawScaledScorer'.tableize # =&gt; \"raw_scaled_scorers\"\n'egg_and_ham'.tableize     # =&gt; \"egg_and_hams\"\n'fancyCategory'.tableize   # =&gt; \"fancy_categories\"\n</pre> <div class=\"method-source-code\" id=\"tableize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 164\ndef tableize(class_name)\n  pluralize(underscore(class_name))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-titleize\"> <span class=\"method-name\">titleize</span><span class=\"method-args\">(word)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Capitalizes all the words and replaces some characters in the string to create a nicer looking title. <code>titleize</code> is meant for creating pretty output. It is not used in the Rails internals.</p> <p><code>titleize</code> is also aliased as <code>titlecase</code>.</p> <pre class=\"ruby\">'man from the boondocks'.titleize   # =&gt; \"Man From The Boondocks\"\n'x-men: the last stand'.titleize    # =&gt; \"X Men: The Last Stand\"\n'TheManWithoutAPast'.titleize       # =&gt; \"The Man Without A Past\"\n'raiders_of_the_lost_ark'.titleize  # =&gt; \"Raiders Of The Lost Ark\"\n</pre> <div class=\"method-source-code\" id=\"titleize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 154\ndef titleize(word)\n  humanize(underscore(word)).gsub(/\\b(?&lt;!['’`])[a-z]/) { $&amp;.capitalize }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transliterate\"> <span class=\"method-name\">transliterate</span><span class=\"method-args\">(string, replacement = \"?\")</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces non-ASCII characters with an ASCII approximation, or if none exists, a replacement character which defaults to “?”.</p> <pre class=\"ruby\">transliterate('Ærøskøbing')\n# =&gt; \"AEroskobing\"\n</pre> <p>Default approximations are provided for Western/Latin characters, e.g, “ø”, “ñ”, “é”, “ß”, etc.</p> <p>This method is <a href=\"../i18n\">I18n</a> aware, so you can set up custom approximations for a locale. This can be useful, for example, to transliterate German's “ü” and “ö” to “ue” and “oe”, or to add support for transliterating Russian to ASCII.</p> <p>In order to make your custom transliterations available, you must set them as the <code>i18n.transliterate.rule</code> i18n key:</p> <pre># Store the transliterations in locales/de.yml\ni18n:\n  transliterate:\n    rule:\n      ü: \"ue\"\n      ö: \"oe\"\n\n# Or set them using Ruby\nI18n.backend.store_translations(:de, i18n: {\n  transliterate: {\n    rule: {\n      'ü' =&gt; 'ue',\n      'ö' =&gt; 'oe'\n    }\n  }\n})</pre> <p>The value for <code>i18n.transliterate.rule</code> can be a simple <a href=\"../hash\">Hash</a> that maps characters to ASCII approximations as shown above, or, for more complex requirements, a Proc:</p> <pre class=\"ruby\">I18n.backend.store_translations(:de, i18n: {\n  transliterate: {\n    rule: -&gt;(string) { MyTransliterator.transliterate(string) }\n  }\n})\n</pre> <p>Now you can have different transliterations for each locale:</p> <pre class=\"ruby\">I18n.locale = :en\ntransliterate('Jürgen')\n# =&gt; \"Jurgen\"\n\nI18n.locale = :de\ntransliterate('Jürgen')\n# =&gt; \"Juergen\"\n</pre> <div class=\"method-source-code\" id=\"transliterate-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/transliterate.rb, line 60\ndef transliterate(string, replacement = \"?\")\n  I18n.transliterate(ActiveSupport::Multibyte::Unicode.normalize(\n    ActiveSupport::Multibyte::Unicode.tidy_bytes(string), :c),\n      :replacement =&gt; replacement)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-underscore\"> <span class=\"method-name\">underscore</span><span class=\"method-args\">(camel_cased_word)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Makes an underscored, lowercase form from the expression in the string.</p> <p>Changes '::' to '/' to convert namespaces to paths.</p> <pre class=\"ruby\">'ActiveModel'.underscore         # =&gt; \"active_model\"\n'ActiveModel::Errors'.underscore # =&gt; \"active_model/errors\"\n</pre> <p>As a rule of thumb you can think of <code>underscore</code> as the inverse of <code>camelize</code>, though there are cases where that does not hold:</p> <pre class=\"ruby\">'SSLError'.underscore.camelize # =&gt; \"SslError\"\n</pre> <div class=\"method-source-code\" id=\"underscore-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/methods.rb, line 90\ndef underscore(camel_cased_word)\n  return camel_cased_word unless camel_cased_word =~ /[A-Z-]|::/\n  word = camel_cased_word.to_s.gsub(/::/, '/')\n  word.gsub!(/(?:(?&lt;=([A-Za-z\\d]))|\\b)(#{inflections.acronym_regex})(?=\\b|[^a-z])/) { \"#{$1 &amp;&amp; '_'}#{$2.downcase}\" }\n  word.gsub!(/([A-Z\\d]+)([A-Z][a-z])/,'\\1_\\2')\n  word.gsub!(/([a-z\\d])([A-Z])/,'\\1_\\2')\n  word.tr!(\"-\", \"_\")\n  word.downcase!\n  word\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/inflector/inflections":"<h1 id=\"class-ActiveSupport::Inflector::Inflections\" class=\"class\"> class ActiveSupport::Inflector::Inflections </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>A singleton instance of this class is yielded by <a href=\"../inflector#method-i-inflections\">ActiveSupport::Inflector#inflections</a>, which can then be used to specify additional inflection rules. If passed an optional locale, rules for other languages can be specified. The default locale is <code>:en</code>. Only rules for English are provided.</p> <pre class=\"ruby\">ActiveSupport::Inflector.inflections(:en) do |inflect|\n  inflect.plural /^(ox)$/i, '\\1\\2en'\n  inflect.singular /^(ox)en/i, '\\1'\n\n  inflect.irregular 'octopus', 'octopi'\n\n  inflect.uncountable 'equipment'\nend\n</pre> <p>New rules are added at the top. So in the example above, the irregular rule for octopus will now be the first of the pluralization and singularization rules that is runs. This guarantees that your rules run before any of the rules that may already have been loaded.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-acronym_regex\"> <span class=\"method-name\">acronym_regex</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-acronyms\"> <span class=\"method-name\">acronyms</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-humans\"> <span class=\"method-name\">humans</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-plurals\"> <span class=\"method-name\">plurals</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-singulars\"> <span class=\"method-name\">singulars</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-uncountables\"> <span class=\"method-name\">uncountables</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-instance\"> <span class=\"method-name\">instance</span><span class=\"method-args\">(locale = :en)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"instance-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 30\ndef self.instance(locale = :en)\n  @__instance__[locale] ||= new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 36\ndef initialize\n  @plurals, @singulars, @uncountables, @humans, @acronyms, @acronym_regex = [], [], [], [], {}, /(?=a)b/\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-acronym\"> <span class=\"method-name\">acronym</span><span class=\"method-args\">(word)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a new acronym. An acronym must be specified as it will appear in a camelized string. An underscore string that contains the acronym will retain the acronym when passed to <code>camelize</code>, <code>humanize</code>, or <code>titleize</code>. A camelized string that contains the acronym will maintain the acronym when titleized or humanized, and will convert the acronym into a non-delimited single lowercase word when passed to <code>underscore</code>.</p> <pre class=\"ruby\">acronym 'HTML'\ntitleize 'html'     # =&gt; 'HTML'\ncamelize 'html'     # =&gt; 'HTML'\nunderscore 'MyHTML' # =&gt; 'my_html'\n</pre> <p>The acronym, however, must occur as a delimited unit and not be part of another word for conversions to recognize it:</p> <pre class=\"ruby\">acronym 'HTTP'\ncamelize 'my_http_delimited' # =&gt; 'MyHTTPDelimited'\ncamelize 'https'             # =&gt; 'Https', not 'HTTPs'\nunderscore 'HTTPS'           # =&gt; 'http_s', not 'https'\n\nacronym 'HTTPS'\ncamelize 'https'   # =&gt; 'HTTPS'\nunderscore 'HTTPS' # =&gt; 'https'\n</pre> <p>Note: Acronyms that are passed to <code>pluralize</code> will no longer be recognized, since the acronym will not occur as a delimited unit in the pluralized result. To work around this, you must specify the pluralized form as an acronym as well:</p> <pre class=\"ruby\">acronym 'API'\ncamelize(pluralize('api')) # =&gt; 'Apis'\n\nacronym 'APIs'\ncamelize(pluralize('api')) # =&gt; 'APIs'\n</pre> <p><code>acronym</code> may be used to specify any word that contains an acronym or otherwise needs to maintain a non-standard capitalization. The only restriction is that the word must begin with a capital letter.</p> <pre class=\"ruby\">acronym 'RESTful'\nunderscore 'RESTful'           # =&gt; 'restful'\nunderscore 'RESTfulController' # =&gt; 'restful_controller'\ntitleize 'RESTfulController'   # =&gt; 'RESTful Controller'\ncamelize 'restful'             # =&gt; 'RESTful'\ncamelize 'restful_controller'  # =&gt; 'RESTfulController'\n\nacronym 'McDonald'\nunderscore 'McDonald' # =&gt; 'mcdonald'\ncamelize 'mcdonald'   # =&gt; 'McDonald'\n</pre> <div class=\"method-source-code\" id=\"acronym-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 96\ndef acronym(word)\n  @acronyms[word.downcase] = word\n  @acronym_regex = /#{@acronyms.values.join(\"|\")}/\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear\"> <span class=\"method-name\">clear</span><span class=\"method-args\">(scope = :all)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clears the loaded inflections within a given scope (default is <code>:all</code>). Give the scope as a symbol of the inflection type, the options are: <code>:plurals</code>, <code>:singulars</code>, <code>:uncountables</code>, <code>:humans</code>.</p> <pre class=\"ruby\">clear :all\nclear :plurals\n</pre> <div class=\"method-source-code\" id=\"clear-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 185\ndef clear(scope = :all)\n  case scope\n    when :all\n      @plurals, @singulars, @uncountables, @humans = [], [], [], []\n    else\n      instance_variable_set \"@#{scope}\", []\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-human\"> <span class=\"method-name\">human</span><span class=\"method-args\">(rule, replacement)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a humanized form of a string by a regular expression rule or by a string mapping. When using a regular expression based replacement, the normal humanize formatting is called after the replacement. When a string is used, the human form should be specified as desired (example: 'The name', not 'the_name').</p> <pre class=\"ruby\">human /_cnt$/i, '\\1_count'\nhuman 'legacy_col_person_name', 'Name'\n</pre> <div class=\"method-source-code\" id=\"human-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 174\ndef human(rule, replacement)\n  @humans.prepend([rule, replacement])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-irregular\"> <span class=\"method-name\">irregular</span><span class=\"method-args\">(singular, plural)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a new irregular that applies to both pluralization and singularization at the same time. This can only be used for strings, not regular expressions. You simply pass the irregular in singular and plural form.</p> <pre class=\"ruby\">irregular 'octopus', 'octopi'\nirregular 'person', 'people'\n</pre> <div class=\"method-source-code\" id=\"irregular-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 128\ndef irregular(singular, plural)\n  @uncountables.delete(singular)\n  @uncountables.delete(plural)\n\n  s0 = singular[0]\n  srest = singular[1..-1]\n\n  p0 = plural[0]\n  prest = plural[1..-1]\n\n  if s0.upcase == p0.upcase\n    plural(/(#{s0})#{srest}$/i, '\\1' + prest)\n    plural(/(#{p0})#{prest}$/i, '\\1' + prest)\n\n    singular(/(#{s0})#{srest}$/i, '\\1' + srest)\n    singular(/(#{p0})#{prest}$/i, '\\1' + srest)\n  else\n    plural(/#{s0.upcase}(?i)#{srest}$/,   p0.upcase   + prest)\n    plural(/#{s0.downcase}(?i)#{srest}$/, p0.downcase + prest)\n    plural(/#{p0.upcase}(?i)#{prest}$/,   p0.upcase   + prest)\n    plural(/#{p0.downcase}(?i)#{prest}$/, p0.downcase + prest)\n\n    singular(/#{s0.upcase}(?i)#{srest}$/,   s0.upcase   + srest)\n    singular(/#{s0.downcase}(?i)#{srest}$/, s0.downcase + srest)\n    singular(/#{p0.upcase}(?i)#{prest}$/,   s0.upcase   + srest)\n    singular(/#{p0.downcase}(?i)#{prest}$/, s0.downcase + srest)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-plural\"> <span class=\"method-name\">plural</span><span class=\"method-args\">(rule, replacement)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a new pluralization rule and its replacement. The rule can either be a string or a regular expression. The replacement should always be a string that may include references to the matched data from the rule.</p> <div class=\"method-source-code\" id=\"plural-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 105\ndef plural(rule, replacement)\n  @uncountables.delete(rule) if rule.is_a?(String)\n  @uncountables.delete(replacement)\n  @plurals.prepend([rule, replacement])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-singular\"> <span class=\"method-name\">singular</span><span class=\"method-args\">(rule, replacement)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies a new singularization rule and its replacement. The rule can either be a string or a regular expression. The replacement should always be a string that may include references to the matched data from the rule.</p> <div class=\"method-source-code\" id=\"singular-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 115\ndef singular(rule, replacement)\n  @uncountables.delete(rule) if rule.is_a?(String)\n  @uncountables.delete(replacement)\n  @singulars.prepend([rule, replacement])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-uncountable\"> <span class=\"method-name\">uncountable</span><span class=\"method-args\">(*words)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Specifies words that are uncountable and should not be inflected.</p> <pre class=\"ruby\">uncountable 'money'\nuncountable 'money', 'information'\nuncountable %w( money information rice )\n</pre> <div class=\"method-source-code\" id=\"uncountable-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/inflector/inflections.rb, line 162\ndef uncountable(*words)\n  @uncountables += words.flatten.map(&amp;:downcase)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/inheritableoptions":"<h1 id=\"class-ActiveSupport::InheritableOptions\" class=\"class\"> class ActiveSupport::InheritableOptions </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"orderedoptions\">ActiveSupport::OrderedOptions</a></dd>\n</dl> <section class=\"description\"> <p><code>InheritableOptions</code> provides a constructor to build an <code>OrderedOptions</code> hash inherited from another hash.</p> <p>Use this if you already have some hash and you want to create a new one based on it.</p> <pre class=\"ruby\">h = ActiveSupport::InheritableOptions.new({ girl: 'Mary', boy: 'John' })\nh.girl # =&gt; 'Mary'\nh.boy  # =&gt; 'John'\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(parent = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_options.rb, line 52\ndef initialize(parent = nil)\n  if parent.kind_of?(OrderedOptions)\n    # use the faster _get when dealing with OrderedOptions\n    super() { |h,k| parent._get(k) }\n  elsif parent\n    super() { |h,k| parent[k] }\n  else\n    super()\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inheritable_copy\"> <span class=\"method-name\">inheritable_copy</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inheritable_copy-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_options.rb, line 63\ndef inheritable_copy\n  self.class.new(self)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/json":"<h1 id=\"module-ActiveSupport::JSON\" class=\"module\"> module ActiveSupport::JSON </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DATE_REGEX\">DATE_REGEX </dt>\n<dd>\n<p>matches YAML-formatted dates</p> </dd>\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-decode\"> <span class=\"method-name\">decode</span><span class=\"method-args\">(json, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parses a <a href=\"json\">JSON</a> string (JavaScript <a href=\"../object\">Object</a> Notation) into a hash. See <a href=\"http://www.json.org\">www.json.org</a> for more info.</p> <pre>ActiveSupport::JSON.decode(\"{\\\"team\\\":\\\"rails\\\",\\\"players\\\":\\\"36\\\"}\")\n=&gt; {\"team\" =&gt; \"rails\", \"players\" =&gt; \"36\"}</pre> <div class=\"method-source-code\" id=\"decode-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/json/decoding.rb, line 19\ndef decode(json, options = {})\n  if options.present?\n    raise ArgumentError, \"In Rails 4.1, ActiveSupport::JSON.decode no longer \"              \"accepts an options hash for MultiJSON. MultiJSON reached its end of life \"              \"and has been removed.\"\n  end\n\n  data = ::JSON.parse(json, quirks_mode: true)\n\n  if ActiveSupport.parse_json_times\n    convert_dates_from(data)\n  else\n    data\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-encode\"> <span class=\"method-name\">encode</span><span class=\"method-args\">(value, options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Dumps objects in <a href=\"json\">JSON</a> (JavaScript <a href=\"../object\">Object</a> Notation). See <a href=\"http://www.json.org\">www.json.org</a> for more info.</p> <pre class=\"ruby\">ActiveSupport::JSON.encode({ team: 'rails', players: '36' })\n# =&gt; \"{\\\"team\\\":\\\"rails\\\",\\\"players\\\":\\\"36\\\"}\"\n</pre> <div class=\"method-source-code\" id=\"encode-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/json/encoding.rb, line 21\ndef self.encode(value, options = nil)\n  Encoding.json_encoder.new(options).encode(value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-parse_error\"> <span class=\"method-name\">parse_error</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the class of the error that will be raised when there is an error in decoding <a href=\"json\">JSON</a>. Using this method means you won't directly depend on the ActiveSupport's <a href=\"json\">JSON</a> implementation, in case it changes in the future.</p> <pre class=\"ruby\">begin\n  obj = ActiveSupport::JSON.decode(some_string)\nrescue ActiveSupport::JSON.parse_error\n  Rails.logger.warn(\"Attempted to decode invalid JSON: #{some_string}\")\nend\n</pre> <div class=\"method-source-code\" id=\"parse_error-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/json/decoding.rb, line 45\ndef parse_error\n  ::JSON::ParserError\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/keygenerator":"<h1 id=\"class-ActiveSupport::KeyGenerator\" class=\"class\"> class ActiveSupport::KeyGenerator </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"keygenerator\">KeyGenerator</a> is a simple wrapper around OpenSSL's implementation of PBKDF2 It can be used to derive a number of keys for various purposes from a given secret. This lets Rails applications have a single secure secret, but avoid reusing that key in multiple incompatible contexts.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(secret, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/key_generator.rb, line 10\ndef initialize(secret, options = {})\n  @secret = secret\n  # The default iterations are higher than required for our key derivation uses\n  # on the off chance someone uses this for password storage\n  @iterations = options[:iterations] || 2**16\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-generate_key\"> <span class=\"method-name\">generate_key</span><span class=\"method-args\">(salt, key_size=64)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a derived key suitable for use. The default key_size is chosen to be compatible with the default settings of <a href=\"messageverifier\">ActiveSupport::MessageVerifier</a>. i.e. OpenSSL::Digest::SHA1#block_length</p> <div class=\"method-source-code\" id=\"generate_key-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/key_generator.rb, line 20\ndef generate_key(salt, key_size=64)\n  OpenSSL::PKCS5.pbkdf2_hmac_sha1(@secret, salt, @iterations, key_size)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/logsubscriber":"<h1 id=\"class-ActiveSupport::LogSubscriber\" class=\"class\"> class ActiveSupport::LogSubscriber </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Subscriber</dd>\n</dl> <section class=\"description\"> <p><a href=\"logsubscriber\">ActiveSupport::LogSubscriber</a> is an object set to consume <a href=\"notifications\">ActiveSupport::Notifications</a> with the sole purpose of logging them. The log subscriber dispatches notifications to a registered object based on its given namespace.</p> <p>An example would be Active Record log subscriber responsible for logging queries:</p> <pre class=\"ruby\">module ActiveRecord\n  class LogSubscriber &lt; ActiveSupport::LogSubscriber\n    def sql(event)\n      \"#{event.payload[:name]} (#{event.duration}) #{event.payload[:sql]}\"\n    end\n  end\nend\n</pre> <p>And it's finally registered as:</p> <pre class=\"ruby\">ActiveRecord::LogSubscriber.attach_to :active_record\n</pre> <p>Since we need to know all instance methods before attaching the log subscriber, the line above should be called after your <code>ActiveRecord::LogSubscriber</code> definition.</p> <p>After configured, whenever a “sql.active_record” notification is published, it will properly dispatch the event (ActiveSupport::Notifications::Event) to the sql method.</p> <p>Log subscriber also has some helpers to deal with logging and automatically flushes all logs when the request finishes (via action_dispatch.callback notification) in a Rails environment.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"BLACK\">BLACK </dt>\n<dd>\n<p>Colors</p> </dd>\n<dt id=\"BLUE\">BLUE </dt>\n\n<dt id=\"BOLD\">BOLD </dt>\n\n<dt id=\"CLEAR\">CLEAR </dt>\n<dd>\n<p>Embed in a <a href=\"../string\">String</a> to clear all previous ANSI sequences.</p> </dd>\n<dt id=\"CYAN\">CYAN </dt>\n\n<dt id=\"GREEN\">GREEN </dt>\n\n<dt id=\"MAGENTA\">MAGENTA </dt>\n\n<dt id=\"RED\">RED </dt>\n\n<dt id=\"WHITE\">WHITE </dt>\n\n<dt id=\"YELLOW\">YELLOW </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-logger\"> <span class=\"method-name\">logger</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-flush_all-21\"> <span class=\"method-name\">flush_all!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Flush all <a href=\"logsubscriber#method-c-log_subscribers\">::log_subscribers</a>' logger.</p> <div class=\"method-source-code\" id=\"flush_all-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber.rb, line 69\ndef flush_all!\n  logger.flush if logger.respond_to?(:flush)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-log_subscribers\"> <span class=\"method-name\">log_subscribers</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"log_subscribers-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber.rb, line 64\ndef log_subscribers\n  subscribers\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-logger\"> <span class=\"method-name\">logger</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"logger-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber.rb, line 56\ndef logger\n  @logger ||= if defined?(Rails) &amp;&amp; Rails.respond_to?(:logger)\n    Rails.logger\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-finish\"> <span class=\"method-name\">finish</span><span class=\"method-args\">(name, id, payload)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"finish-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber.rb, line 82\ndef finish(name, id, payload)\n  super if logger\nrescue Exception =&gt; e\n  logger.error \"Could not log #{name.inspect} event. #{e.class}: #{e.message} #{e.backtrace}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-logger\"> <span class=\"method-name\">logger</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"logger-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber.rb, line 74\ndef logger\n  LogSubscriber.logger\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start\"> <span class=\"method-name\">start</span><span class=\"method-args\">(name, id, payload)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"start-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber.rb, line 78\ndef start(name, id, payload)\n  super if logger\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-color\"> <span class=\"method-name\">color</span><span class=\"method-args\">(text, color, bold=false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set color by using a string or one of the defined constants. If a third option is set to <code>true</code>, it also adds bold to the string. This is based on the Highline implementation and will automatically append <a href=\"logsubscriber#CLEAR\">CLEAR</a> to the end of the returned <a href=\"../string\">String</a>.</p> <div class=\"method-source-code\" id=\"color-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber.rb, line 102\ndef color(text, color, bold=false)\n  return text unless colorize_logging\n  color = self.class.const_get(color.upcase) if color.is_a?(Symbol)\n  bold  = bold ? BOLD : \"\"\n  \"#{bold}#{color}#{text}#{CLEAR}\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/logsubscriber/testhelper":"<h1 id=\"module-ActiveSupport::LogSubscriber::TestHelper\" class=\"module\"> module ActiveSupport::LogSubscriber::TestHelper </h1> <section class=\"description\"> <p>Provides some helpers to deal with testing log subscribers by setting up notifications. Take for instance Active Record subscriber tests:</p> <pre class=\"ruby\">class SyncLogSubscriberTest &lt; ActiveSupport::TestCase\n  include ActiveSupport::LogSubscriber::TestHelper\n\n  def setup\n    ActiveRecord::LogSubscriber.attach_to(:active_record)\n  end\n\n  def test_basic_query_logging\n    Developer.all.to_a\n    wait\n    assert_equal 1, @logger.logged(:debug).size\n    assert_match(/Developer Load/, @logger.logged(:debug).last)\n    assert_match(/SELECT \\* FROM \"developers\"/, @logger.logged(:debug).last)\n  end\nend\n</pre> <p>All you need to do is to ensure that your log subscriber is added to Rails::Subscriber, as in the second line of the code above. The test helpers are responsible for setting up the queue, subscriptions and turning colors in logs off.</p> <p>The messages are available in the @logger instance, which is a logger with limited powers (it actually does not send anything to your output), and you can collect them doing @logger.logged(level), where level is the level used in logging, like info, debug, warn and so on.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_logger\"> <span class=\"method-name\">set_logger</span><span class=\"method-args\">(logger)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Overwrite if you use another logger in your log subscriber.</p> <pre class=\"ruby\">def logger\n  ActiveRecord::Base.logger = @logger\nend\n</pre> <div class=\"method-source-code\" id=\"set_logger-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber/test_helper.rb, line 99\ndef set_logger(logger)\n  ActiveSupport::LogSubscriber.logger = logger\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-setup\"> <span class=\"method-name\">setup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"setup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber/test_helper.rb, line 36\ndef setup\n  @logger   = MockLogger.new\n  @notifier = ActiveSupport::Notifications::Fanout.new\n\n  ActiveSupport::LogSubscriber.colorize_logging = false\n\n  @old_notifier = ActiveSupport::Notifications.notifier\n  set_logger(@logger)\n  ActiveSupport::Notifications.notifier = @notifier\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-teardown\"> <span class=\"method-name\">teardown</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"teardown-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber/test_helper.rb, line 47\ndef teardown\n  set_logger(nil)\n  ActiveSupport::Notifications.notifier = @old_notifier\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wait\"> <span class=\"method-name\">wait</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wait notifications to be published.</p> <div class=\"method-source-code\" id=\"wait-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/log_subscriber/test_helper.rb, line 90\ndef wait\n  @notifier.wait\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/logger/simpleformatter":"<h1 id=\"class-ActiveSupport::Logger::SimpleFormatter\" class=\"class\"> class ActiveSupport::Logger::SimpleFormatter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Logger::Formatter</dd>\n</dl> <section class=\"description\"> <p>Simple formatter which only displays the message.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(severity, timestamp, progname, msg)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method is invoked when a log event occurs</p> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/logger.rb, line 52\ndef call(severity, timestamp, progname, msg)\n  \"#{String === msg ? msg : msg.inspect}\\n\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/messageencryptor":"<h1 id=\"class-ActiveSupport::MessageEncryptor\" class=\"class\"> class ActiveSupport::MessageEncryptor </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"messageencryptor\">MessageEncryptor</a> is a simple way to encrypt values which get stored somewhere you don't trust.</p> <p>The cipher text and initialization vector are base64 encoded and returned to you.</p> <p>This can be used in situations similar to the <code>MessageVerifier</code>, but where you don't want users to be able to determine the value of the payload.</p> <pre class=\"ruby\">salt  = SecureRandom.random_bytes(64)\nkey   = ActiveSupport::KeyGenerator.new('password').generate_key(salt) # =&gt; \"\\x89\\xE0\\x156\\xAC...\"\ncrypt = ActiveSupport::MessageEncryptor.new(key)                       # =&gt; #&lt;ActiveSupport::MessageEncryptor ...&gt;\nencrypted_data = crypt.encrypt_and_sign('my secret data')              # =&gt; \"NlFBTTMwOUV5UlA1QlNEN2xkY2d6eThYWWh...\"\ncrypt.decrypt_and_verify(encrypted_data)                               # =&gt; \"my secret data\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"OpenSSLCipherError\">OpenSSLCipherError </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(secret, *signature_key_or_options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Initialize a new <a href=\"messageencryptor\">MessageEncryptor</a>. <code>secret</code> must be at least as long as the cipher key size. For the default 'aes-256-cbc' cipher, this is 256 bits. If you are using a user-entered secret, you can generate a suitable key with <code>OpenSSL::Digest::SHA256.new(user_secret).digest</code> or similar.</p> <p>Options:</p> <ul>\n<li> <p><code>:cipher</code> - Cipher to use. Can be any cipher returned by <code>OpenSSL::Cipher.ciphers</code>. Default is 'aes-256-cbc'.</p> </li>\n<li> <p><code>:digest</code> - <a href=\"../string\">String</a> of digest to use for signing. Default is <code>SHA1</code>.</p> </li>\n<li> <p><code>:serializer</code> - <a href=\"../object\">Object</a> serializer to use. Default is <code>Marshal</code>.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/message_encryptor.rb, line 45\ndef initialize(secret, *signature_key_or_options)\n  options = signature_key_or_options.extract_options!\n  sign_secret = signature_key_or_options.first\n  @secret = secret\n  @sign_secret = sign_secret\n  @cipher = options[:cipher] || 'aes-256-cbc'\n  @verifier = MessageVerifier.new(@sign_secret || @secret, digest: options[:digest] || 'SHA1', serializer: NullSerializer)\n  @serializer = options[:serializer] || Marshal\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decrypt_and_verify\"> <span class=\"method-name\">decrypt_and_verify</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Decrypt and verify a message. We need to verify the message in order to avoid padding attacks. Reference: <a href=\"http://www.limited-entropy.com/padding-oracle-attacks\">www.limited-entropy.com/padding-oracle-attacks</a>.</p> <div class=\"method-source-code\" id=\"decrypt_and_verify-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/message_encryptor.rb, line 63\ndef decrypt_and_verify(value)\n  _decrypt(verifier.verify(value))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encrypt_and_sign\"> <span class=\"method-name\">encrypt_and_sign</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Encrypt and sign a message. We need to sign the message in order to avoid padding attacks. Reference: <a href=\"http://www.limited-entropy.com/padding-oracle-attacks\">www.limited-entropy.com/padding-oracle-attacks</a>.</p> <div class=\"method-source-code\" id=\"encrypt_and_sign-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/message_encryptor.rb, line 57\ndef encrypt_and_sign(value)\n  verifier.generate(_encrypt(value))\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/messageverifier":"<h1 id=\"class-ActiveSupport::MessageVerifier\" class=\"class\"> class ActiveSupport::MessageVerifier </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><code>MessageVerifier</code> makes it easy to generate and verify messages which are signed to prevent tampering.</p> <p>This is useful for cases like remember-me tokens and auto-unsubscribe links where the session store isn't suitable or available.</p> <p>Remember Me:</p> <pre class=\"ruby\">cookies[:remember_me] = @verifier.generate([@user.id, 2.weeks.from_now])\n</pre> <p>In the authentication filter:</p> <pre class=\"ruby\">id, time = @verifier.verify(cookies[:remember_me])\nif time &lt; Time.now\n  self.current_user = User.find(id)\nend\n</pre> <p>By default it uses <a href=\"../marshal\">Marshal</a> to serialize the message. If you want to use another serialization method, you can set the serializer in the options hash upon initialization:</p> <pre class=\"ruby\">@verifier = ActiveSupport::MessageVerifier.new('s3Krit', serializer: YAML)\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(secret, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/message_verifier.rb, line 30\ndef initialize(secret, options = {})\n  raise ArgumentError, 'Secret should not be nil.' unless secret\n  @secret = secret\n  @digest = options[:digest] || 'SHA1'\n  @serializer = options[:serializer] || Marshal\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-generate\"> <span class=\"method-name\">generate</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"generate-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/message_verifier.rb, line 53\ndef generate(value)\n  data = encode(@serializer.dump(value))\n  \"#{data}--#{generate_digest(data)}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-verify\"> <span class=\"method-name\">verify</span><span class=\"method-args\">(signed_message)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"verify-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/message_verifier.rb, line 37\ndef verify(signed_message)\n  raise InvalidSignature if signed_message.blank?\n\n  data, digest = signed_message.split(\"--\")\n  if data.present? &amp;&amp; digest.present? &amp;&amp; ActiveSupport::SecurityUtils.secure_compare(digest, generate_digest(data))\n    begin\n      @serializer.load(decode(data))\n    rescue ArgumentError =&gt; argument_error\n      raise InvalidSignature if argument_error.message =~ %r{invalid base64}\n      raise\n    end\n  else\n    raise InvalidSignature\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/multibyte":"<h1 id=\"module-ActiveSupport::Multibyte\" class=\"module\"> module ActiveSupport::Multibyte </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-proxy_class\"> <span class=\"method-name\">proxy_class</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current proxy class.</p> <div class=\"method-source-code\" id=\"proxy_class-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte.rb, line 17\ndef self.proxy_class\n  @proxy_class ||= ActiveSupport::Multibyte::Chars\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-proxy_class-3D\"> <span class=\"method-name\">proxy_class=</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The proxy class returned when calling mb_chars. You can use this accessor to configure your own proxy class so you can support other encodings. See the <a href=\"multibyte/chars\">ActiveSupport::Multibyte::Chars</a> implementation for an example how to do this.</p> <pre class=\"ruby\">ActiveSupport::Multibyte.proxy_class = CharsForUTF32\n</pre> <div class=\"method-source-code\" id=\"proxy_class-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte.rb, line 12\ndef self.proxy_class=(klass)\n  @proxy_class = klass\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/multibyte/chars":"<h1 id=\"class-ActiveSupport::Multibyte::Chars\" class=\"class\"> class ActiveSupport::Multibyte::Chars </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n\n</dl> <section class=\"description\"> <p><a href=\"chars\">Chars</a> enables you to work transparently with UTF-8 encoding in the Ruby <a href=\"../../string\">String</a> class without having extensive knowledge about the encoding. A <a href=\"chars\">Chars</a> object accepts a string upon initialization and proxies <a href=\"../../string\">String</a> methods in an encoding safe manner. All the normal <a href=\"../../string\">String</a> methods are also implemented on the proxy.</p> <p><a href=\"../../string\">String</a> methods are proxied through the <a href=\"chars\">Chars</a> object, and can be accessed through the <code>mb_chars</code> method. Methods which would normally return a <a href=\"../../string\">String</a> object now return a <a href=\"chars\">Chars</a> object so methods can be chained.</p> <pre class=\"ruby\">'The Perfect String  '.mb_chars.downcase.strip.normalize # =&gt; \"the perfect string\"\n</pre> <p><a href=\"chars\">Chars</a> objects are perfectly interchangeable with <a href=\"../../string\">String</a> objects as long as no explicit class checks are made. If certain methods do explicitly check the class, call <code>to_s</code> before you pass chars objects to them.</p> <pre class=\"ruby\">bad.explicit_checking_method 'T'.mb_chars.downcase.to_s\n</pre> <p>The default <a href=\"chars\">Chars</a> implementation assumes that the encoding of the string is UTF-8, if you want to handle different encodings you can write your own multibyte string handler and configure it through <a href=\"../multibyte#method-c-proxy_class\">ActiveSupport::Multibyte.proxy_class</a>.</p> <pre class=\"ruby\">class CharsForUTF32\n  def size\n    @wrapped_string.size / 4\n  end\n\n  def self.accepts?(string)\n    string.length % 4 == 0\n  end\nend\n\nActiveSupport::Multibyte.proxy_class = CharsForUTF32\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-to_str\"> <span class=\"method-name\">to_str</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-wrapped_string\"> <span class=\"method-name\">wrapped_string</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-consumes-3F\"> <span class=\"method-name\">consumes?</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> when the proxy class can handle the string. Returns <code>false</code> otherwise.</p> <div class=\"method-source-code\" id=\"consumes-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 75\ndef self.consumes?(string)\n  string.encoding == Encoding::UTF_8\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a new <a href=\"chars\">Chars</a> instance by wrapping <em>string</em>.</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 51\ndef initialize(string)\n  @wrapped_string = string\n  @wrapped_string.force_encoding(Encoding::UTF_8) unless @wrapped_string.frozen?\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-capitalize\"> <span class=\"method-name\">capitalize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts the first character to uppercase and the remainder to lowercase.</p> <pre class=\"ruby\">'über'.mb_chars.capitalize.to_s # =&gt; \"Über\"\n</pre> <div class=\"method-source-code\" id=\"capitalize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 134\ndef capitalize\n  (slice(0) || chars('')).upcase + (slice(1..-1) || chars('')).downcase\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compose\"> <span class=\"method-name\">compose</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs composition on all the characters.</p> <pre class=\"ruby\">'é'.length                       # =&gt; 3\n'é'.mb_chars.compose.to_s.length # =&gt; 2\n</pre> <div class=\"method-source-code\" id=\"compose-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 170\ndef compose\n  chars(Unicode.compose(@wrapped_string.codepoints.to_a).pack('U*'))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decompose\"> <span class=\"method-name\">decompose</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs canonical decomposition on all the characters.</p> <pre class=\"ruby\">'é'.length                         # =&gt; 2\n'é'.mb_chars.decompose.to_s.length # =&gt; 3\n</pre> <div class=\"method-source-code\" id=\"decompose-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 162\ndef decompose\n  chars(Unicode.decompose(:canonical, @wrapped_string.codepoints.to_a).pack('U*'))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-downcase\"> <span class=\"method-name\">downcase</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts characters in the string to lowercase.</p> <pre class=\"ruby\">'VĚDA A VÝZKUM'.mb_chars.downcase.to_s # =&gt; \"věda a výzkum\"\n</pre> <div class=\"method-source-code\" id=\"downcase-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 120\ndef downcase\n  chars Unicode.downcase(@wrapped_string)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-grapheme_length\"> <span class=\"method-name\">grapheme_length</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the number of grapheme clusters in the string.</p> <pre class=\"ruby\">'क्षि'.mb_chars.length   # =&gt; 4\n'क्षि'.mb_chars.grapheme_length # =&gt; 3\n</pre> <div class=\"method-source-code\" id=\"grapheme_length-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 178\ndef grapheme_length\n  Unicode.unpack_graphemes(@wrapped_string).length\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-limit\"> <span class=\"method-name\">limit</span><span class=\"method-args\">(limit)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Limits the byte size of the string to a number of bytes without breaking characters. Usable when the storage for a string is limited for some reason.</p> <pre class=\"ruby\">'こんにちは'.mb_chars.limit(7).to_s # =&gt; \"こん\"\n</pre> <div class=\"method-source-code\" id=\"limit-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 106\ndef limit(limit)\n  slice(0...translate_offset(limit))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method_missing\"> <span class=\"method-name\">method_missing</span><span class=\"method-args\">(method, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Forward all undefined methods to the wrapped string.</p> <div class=\"method-source-code\" id=\"method_missing-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 57\ndef method_missing(method, *args, &amp;block)\n  result = @wrapped_string.__send__(method, *args, &amp;block)\n  if method.to_s =~ /!$/\n    self if result\n  else\n    result.kind_of?(String) ? chars(result) : result\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-normalize\"> <span class=\"method-name\">normalize</span><span class=\"method-args\">(form = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the KC normalization of the string by default. NFKC is considered the best normalization form for passing strings to databases and validations.</p> <ul><li> <p><code>form</code> - The form you want to normalize in. Should be one of the following: <code>:c</code>, <code>:kc</code>, <code>:d</code>, or <code>:kd</code>. Default is <a href=\"unicode#attribute-i-default_normalization_form\">ActiveSupport::Multibyte::Unicode#default_normalization_form</a></p> </li></ul> <div class=\"method-source-code\" id=\"normalize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 154\ndef normalize(form = nil)\n  chars(Unicode.normalize(@wrapped_string, form))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to_missing-3F\"> <span class=\"method-name\">respond_to_missing?</span><span class=\"method-args\">(method, include_private)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if <em>obj</em> responds to the given method. Private methods are included in the search only if the optional second parameter evaluates to <code>true</code>.</p> <div class=\"method-source-code\" id=\"respond_to_missing-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 69\ndef respond_to_missing?(method, include_private)\n  @wrapped_string.respond_to?(method, include_private)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reverse\"> <span class=\"method-name\">reverse</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reverses all characters in the string.</p> <pre class=\"ruby\">'Café'.mb_chars.reverse.to_s # =&gt; 'éfaC'\n</pre> <div class=\"method-source-code\" id=\"reverse-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 97\ndef reverse\n  chars(Unicode.unpack_graphemes(@wrapped_string).reverse.flatten.pack('U*'))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-slice-21\"> <span class=\"method-name\">slice!</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Works like <code>String#slice!</code>, but returns an instance of <a href=\"chars\">Chars</a>, or nil if the string was not modified.</p> <div class=\"method-source-code\" id=\"slice-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 90\ndef slice!(*args)\n  chars(@wrapped_string.slice!(*args))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-split\"> <span class=\"method-name\">split</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Works just like <code>String#split</code>, with the exception that the items in the resulting list are <a href=\"chars\">Chars</a> instances instead of <a href=\"../../string\">String</a>. This makes chaining methods easier.</p> <pre class=\"ruby\">'Café périferôl'.mb_chars.split(/é/).map { |part| part.upcase.to_s } # =&gt; [\"CAF\", \" P\", \"RIFERÔL\"]\n</pre> <div class=\"method-source-code\" id=\"split-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 84\ndef split(*args)\n  @wrapped_string.split(*args).map { |i| self.class.new(i) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-swapcase\"> <span class=\"method-name\">swapcase</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts characters in the string to the opposite case.</p> <pre>'El Cañón\".mb_chars.swapcase.to_s # =&gt; \"eL cAÑÓN\"</pre> <div class=\"method-source-code\" id=\"swapcase-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 127\ndef swapcase\n  chars Unicode.swapcase(@wrapped_string)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tidy_bytes\"> <span class=\"method-name\">tidy_bytes</span><span class=\"method-args\">(force = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent resulting in a valid UTF-8 string.</p> <p>Passing <code>true</code> will forcibly tidy all bytes, assuming that the string's encoding is entirely CP1252 or ISO-8859-1.</p> <div class=\"method-source-code\" id=\"tidy_bytes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 187\ndef tidy_bytes(force = false)\n  chars(Unicode.tidy_bytes(@wrapped_string, force))\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-titlecase\"> <span class=\"method-name\">titlecase</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"chars#method-i-titleize\">titleize</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-titleize\"> <span class=\"method-name\">titleize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Capitalizes the first letter of every word, when possible.</p> <pre class=\"ruby\">\"ÉL QUE SE ENTERÓ\".mb_chars.titleize    # =&gt; \"Él Que Se Enteró\"\n\"日本語\".mb_chars.titleize                 # =&gt; \"日本語\"\n</pre> <div class=\"method-source-code\" id=\"titleize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 142\ndef titleize\n  chars(downcase.to_s.gsub(/\\b('?\\S)/u) { Unicode.upcase($1)})\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"chars#method-i-titlecase\">titlecase</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-upcase\"> <span class=\"method-name\">upcase</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts characters in the string to uppercase.</p> <pre class=\"ruby\">'Laurent, où sont les tests ?'.mb_chars.upcase.to_s # =&gt; \"LAURENT, OÙ SONT LES TESTS ?\"\n</pre> <div class=\"method-source-code\" id=\"upcase-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/chars.rb, line 113\ndef upcase\n  chars Unicode.upcase(@wrapped_string)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/multibyte/unicode":"<h1 id=\"module-ActiveSupport::Multibyte::Unicode\" class=\"module\"> module ActiveSupport::Multibyte::Unicode </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"HANGUL_JAMO_FIRST\">HANGUL_JAMO_FIRST </dt>\n\n<dt id=\"HANGUL_JAMO_LAST\">HANGUL_JAMO_LAST </dt>\n\n<dt id=\"HANGUL_LBASE\">HANGUL_LBASE </dt>\n\n<dt id=\"HANGUL_LCOUNT\">HANGUL_LCOUNT </dt>\n\n<dt id=\"HANGUL_NCOUNT\">HANGUL_NCOUNT </dt>\n\n<dt id=\"HANGUL_SBASE\">HANGUL_SBASE </dt>\n<dd>\n<p>Hangul character boundaries and properties</p> </dd>\n<dt id=\"HANGUL_SCOUNT\">HANGUL_SCOUNT </dt>\n\n<dt id=\"HANGUL_SLAST\">HANGUL_SLAST </dt>\n\n<dt id=\"HANGUL_TBASE\">HANGUL_TBASE </dt>\n\n<dt id=\"HANGUL_TCOUNT\">HANGUL_TCOUNT </dt>\n\n<dt id=\"HANGUL_VBASE\">HANGUL_VBASE </dt>\n\n<dt id=\"HANGUL_VCOUNT\">HANGUL_VCOUNT </dt>\n\n<dt id=\"LEADERS_AND_TRAILERS\">LEADERS_AND_TRAILERS </dt>\n<dd>\n<p>BOM (byte order mark) can also be seen as whitespace, it's a non-rendering character used to distinguish between little and big endian. This is not an issue in utf-8, so it must be ignored.</p> </dd>\n<dt id=\"LEADERS_PAT\">LEADERS_PAT </dt>\n\n<dt id=\"NORMALIZATION_FORMS\">NORMALIZATION_FORMS </dt>\n<dd>\n<p>A list of all available normalization forms. See <a href=\"http://www.unicode.org/reports/tr15/tr15-29.html\">www.unicode.org/reports/tr15/tr15-29.html</a> for more information about normalization.</p> </dd>\n<dt id=\"TRAILERS_PAT\">TRAILERS_PAT </dt>\n\n<dt id=\"UNICODE_VERSION\">UNICODE_VERSION </dt>\n<dd>\n<p>The <a href=\"unicode\">Unicode</a> version that is supported by the implementation</p> </dd>\n<dt id=\"WHITESPACE\">WHITESPACE </dt>\n<dd>\n<p>All the unicode whitespace</p> </dd>\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-default_normalization_form\"> <span class=\"method-name\">default_normalization_form</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The default normalization used for operations that require normalization. It can be set to any of the normalizations in <a href=\"unicode#NORMALIZATION_FORMS\">NORMALIZATION_FORMS</a>.</p> <pre class=\"ruby\">ActiveSupport::Multibyte::Unicode.default_normalization_form = :c\n</pre> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compose\"> <span class=\"method-name\">compose</span><span class=\"method-args\">(codepoints)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Compose decomposed characters to the composed form.</p> <div class=\"method-source-code\" id=\"compose-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 155\ndef compose(codepoints)\n  pos = 0\n  eoa = codepoints.length - 1\n  starter_pos = 0\n  starter_char = codepoints[0]\n  previous_combining_class = -1\n  while pos &lt; eoa\n    pos += 1\n    lindex = starter_char - HANGUL_LBASE\n    # -- Hangul\n    if 0 &lt;= lindex and lindex &lt; HANGUL_LCOUNT\n      vindex = codepoints[starter_pos+1] - HANGUL_VBASE rescue vindex = -1\n      if 0 &lt;= vindex and vindex &lt; HANGUL_VCOUNT\n        tindex = codepoints[starter_pos+2] - HANGUL_TBASE rescue tindex = -1\n        if 0 &lt;= tindex and tindex &lt; HANGUL_TCOUNT\n          j = starter_pos + 2\n          eoa -= 2\n        else\n          tindex = 0\n          j = starter_pos + 1\n          eoa -= 1\n        end\n        codepoints[starter_pos..j] = (lindex * HANGUL_VCOUNT + vindex) * HANGUL_TCOUNT + tindex + HANGUL_SBASE\n      end\n      starter_pos += 1\n      starter_char = codepoints[starter_pos]\n    # -- Other characters\n    else\n      current_char = codepoints[pos]\n      current = database.codepoints[current_char]\n      if current.combining_class &gt; previous_combining_class\n        if ref = database.composition_map[starter_char]\n          composition = ref[current_char]\n        else\n          composition = nil\n        end\n        unless composition.nil?\n          codepoints[starter_pos] = composition\n          starter_char = composition\n          codepoints.delete_at pos\n          eoa -= 1\n          pos -= 1\n          previous_combining_class = -1\n        else\n          previous_combining_class = current.combining_class\n        end\n      else\n        previous_combining_class = current.combining_class\n      end\n      if current.combining_class == 0\n        starter_pos = pos\n        starter_char = codepoints[pos]\n      end\n    end\n  end\n  codepoints\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decompose\"> <span class=\"method-name\">decompose</span><span class=\"method-args\">(type, codepoints)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Decompose composed characters to the decomposed form.</p> <div class=\"method-source-code\" id=\"decompose-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 134\ndef decompose(type, codepoints)\n  codepoints.inject([]) do |decomposed, cp|\n    # if it's a hangul syllable starter character\n    if HANGUL_SBASE &lt;= cp and cp &lt; HANGUL_SLAST\n      sindex = cp - HANGUL_SBASE\n      ncp = [] # new codepoints\n      ncp &lt;&lt; HANGUL_LBASE + sindex / HANGUL_NCOUNT\n      ncp &lt;&lt; HANGUL_VBASE + (sindex % HANGUL_NCOUNT) / HANGUL_TCOUNT\n      tindex = sindex % HANGUL_TCOUNT\n      ncp &lt;&lt; (HANGUL_TBASE + tindex) unless tindex == 0\n      decomposed.concat ncp\n    # if the codepoint is decomposable in with the current decomposition type\n    elsif (ncp = database.codepoints[cp].decomp_mapping) and (!database.codepoints[cp].decomp_type || type == :compatibility)\n      decomposed.concat decompose(type, ncp.dup)\n    else\n      decomposed &lt;&lt; cp\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-downcase\"> <span class=\"method-name\">downcase</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"downcase-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 279\ndef downcase(string)\n  apply_mapping string, :lowercase_mapping\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-in_char_class-3F\"> <span class=\"method-name\">in_char_class?</span><span class=\"method-args\">(codepoint, classes)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Detect whether the codepoint is in a certain character class. Returns <code>true</code> when it's in the specified character class and <code>false</code> otherwise. Valid character classes are: <code>:cr</code>, <code>:lf</code>, <code>:l</code>, <code>:v</code>, <code>:lv</code>, <code>:lvt</code> and <code>:t</code>.</p> <p>Primarily used by the grapheme cluster support.</p> <div class=\"method-source-code\" id=\"in_char_class-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 71\ndef in_char_class?(codepoint, classes)\n  classes.detect { |c| database.boundary[c] === codepoint } ? true : false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-normalize\"> <span class=\"method-name\">normalize</span><span class=\"method-args\">(string, form=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the KC normalization of the string by default. NFKC is considered the best normalization form for passing strings to databases and validations.</p> <ul>\n<li> <p><code>string</code> - The string to perform normalization on.</p> </li>\n<li> <p><code>form</code> - The form you want to normalize in. Should be one of the following: <code>:c</code>, <code>:kc</code>, <code>:d</code>, or <code>:kd</code>. Default is ActiveSupport::Multibyte.default_normalization_form.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"normalize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 261\ndef normalize(string, form=nil)\n  form ||= @default_normalization_form\n  # See http://www.unicode.org/reports/tr15, Table 1\n  codepoints = string.codepoints.to_a\n  case form\n    when :d\n      reorder_characters(decompose(:canonical, codepoints))\n    when :c\n      compose(reorder_characters(decompose(:canonical, codepoints)))\n    when :kd\n      reorder_characters(decompose(:compatibility, codepoints))\n    when :kc\n      compose(reorder_characters(decompose(:compatibility, codepoints)))\n    else\n      raise ArgumentError, \"#{form} is not a valid normalization variant\", caller\n  end.pack('U*')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pack_graphemes\"> <span class=\"method-name\">pack_graphemes</span><span class=\"method-args\">(unpacked)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reverse operation of unpack_graphemes.</p> <pre class=\"ruby\">Unicode.pack_graphemes(Unicode.unpack_graphemes('क्षि')) # =&gt; 'क्षि'\n</pre> <div class=\"method-source-code\" id=\"pack_graphemes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 113\ndef pack_graphemes(unpacked)\n  unpacked.flatten.pack('U*')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reorder_characters\"> <span class=\"method-name\">reorder_characters</span><span class=\"method-args\">(codepoints)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Re-order codepoints so the string becomes canonical.</p> <div class=\"method-source-code\" id=\"reorder_characters-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 118\ndef reorder_characters(codepoints)\n  length = codepoints.length- 1\n  pos = 0\n  while pos &lt; length do\n    cp1, cp2 = database.codepoints[codepoints[pos]], database.codepoints[codepoints[pos+1]]\n    if (cp1.combining_class &gt; cp2.combining_class) &amp;&amp; (cp2.combining_class &gt; 0)\n      codepoints[pos..pos+1] = cp2.code, cp1.code\n      pos += (pos &gt; 0 ? -1 : 1)\n    else\n      pos += 1\n    end\n  end\n  codepoints\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-swapcase\"> <span class=\"method-name\">swapcase</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"swapcase-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 287\ndef swapcase(string)\n  apply_mapping string, :swapcase_mapping\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tidy_bytes\"> <span class=\"method-name\">tidy_bytes</span><span class=\"method-args\">(string, force = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent resulting in a valid UTF-8 string.</p> <p>Passing <code>true</code> will forcibly tidy all bytes, assuming that the string's encoding is entirely CP1252 or ISO-8859-1.</p> <div class=\"method-source-code\" id=\"tidy_bytes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 221\ndef tidy_bytes(string, force = false)\n  return string if string.empty?\n  return recode_windows1252_chars(string) if force\n  string.scrub { |bad| recode_windows1252_chars(bad) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unpack_graphemes\"> <span class=\"method-name\">unpack_graphemes</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Unpack the string at grapheme boundaries. Returns a list of character lists.</p> <pre class=\"ruby\">Unicode.unpack_graphemes('क्षि') # =&gt; [[2325, 2381], [2359], [2367]]\nUnicode.unpack_graphemes('Café') # =&gt; [[67], [97], [102], [233]]\n</pre> <div class=\"method-source-code\" id=\"unpack_graphemes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 80\ndef unpack_graphemes(string)\n  codepoints = string.codepoints.to_a\n  unpacked = []\n  pos = 0\n  marker = 0\n  eoc = codepoints.length\n  while(pos &lt; eoc)\n    pos += 1\n    previous = codepoints[pos-1]\n    current = codepoints[pos]\n    if (\n        # CR X LF\n        ( previous == database.boundary[:cr] and current == database.boundary[:lf] ) or\n        # L X (L|V|LV|LVT)\n        ( database.boundary[:l] === previous and in_char_class?(current, [:l,:v,:lv,:lvt]) ) or\n        # (LV|V) X (V|T)\n        ( in_char_class?(previous, [:lv,:v]) and in_char_class?(current, [:v,:t]) ) or\n        # (LVT|T) X (T)\n        ( in_char_class?(previous, [:lvt,:t]) and database.boundary[:t] === current ) or\n        # X Extend\n        (database.boundary[:extend] === current)\n      )\n    else\n      unpacked &lt;&lt; codepoints[marker..pos-1]\n      marker = pos\n    end\n  end\n  unpacked\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-upcase\"> <span class=\"method-name\">upcase</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"upcase-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/multibyte/unicode.rb, line 283\ndef upcase(string)\n  apply_mapping string, :uppercase_mapping\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/notifications":"<h1 id=\"module-ActiveSupport::Notifications\" class=\"module\"> module ActiveSupport::Notifications </h1> <section class=\"description\"> <h1 id=\"module-ActiveSupport::Notifications-label-Notifications\"><a href=\"notifications\">Notifications</a></h1> <p><code>ActiveSupport::Notifications</code> provides an instrumentation API for Ruby.</p> <h2 id=\"module-ActiveSupport::Notifications-label-Instrumenters\">Instrumenters</h2> <p>To instrument an event you just need to do:</p> <pre class=\"ruby\">ActiveSupport::Notifications.instrument('render', extra: :information) do\n  render text: 'Foo'\nend\n</pre> <p>That first executes the block and then notifies all subscribers once done.</p> <p>In the example above <code>render</code> is the name of the event, and the rest is called the <em>payload</em>. The payload is a mechanism that allows instrumenters to pass extra information to subscribers. Payloads consist of a hash whose contents are arbitrary and generally depend on the event.</p> <h2 id=\"module-ActiveSupport::Notifications-label-Subscribers\">Subscribers</h2> <p>You can consume those events and the information they provide by registering a subscriber.</p> <pre class=\"ruby\">ActiveSupport::Notifications.subscribe('render') do |name, start, finish, id, payload|\n  name    # =&gt; String, name of the event (such as 'render' from above)\n  start   # =&gt; Time, when the instrumented block started execution\n  finish  # =&gt; Time, when the instrumented block ended execution\n  id      # =&gt; String, unique ID for this notification\n  payload # =&gt; Hash, the payload\nend\n</pre> <p>For instance, let's store all “render” events in an array:</p> <pre class=\"ruby\">events = []\n\nActiveSupport::Notifications.subscribe('render') do |*args|\n  events &lt;&lt; ActiveSupport::Notifications::Event.new(*args)\nend\n</pre> <p>That code returns right away, you are just subscribing to “render” events. The block is saved and will be called whenever someone instruments “render”:</p> <pre class=\"ruby\">ActiveSupport::Notifications.instrument('render', extra: :information) do\n  render text: 'Foo'\nend\n\nevent = events.first\nevent.name      # =&gt; \"render\"\nevent.duration  # =&gt; 10 (in milliseconds)\nevent.payload   # =&gt; { extra: :information }\n</pre> <p>The block in the <code>subscribe</code> call gets the name of the event, start timestamp, end timestamp, a string with a unique identifier for that event (something like “535801666f04d0298cd6”), and a hash with the payload, in that order.</p> <p>If an exception happens during that particular instrumentation the payload will have a key <code>:exception</code> with an array of two elements as value: a string with the name of the exception class, and the exception message.</p> <p>As the previous example depicts, the class <code>ActiveSupport::Notifications::Event</code> is able to take the arguments as they come and provide an object-oriented interface to that data.</p> <p>It is also possible to pass an object as the second parameter passed to the <code>subscribe</code> method instead of a block:</p> <pre class=\"ruby\">module ActionController\n  class PageRequest\n    def call(name, started, finished, unique_id, payload)\n      Rails.logger.debug ['notification:', name, started, finished, unique_id, payload].join(' ')\n    end\n  end\nend\n\nActiveSupport::Notifications.subscribe('process_action.action_controller', ActionController::PageRequest.new)\n</pre> <p>resulting in the following output within the logs including a hash with the payload:</p> <pre>notification: process_action.action_controller 2012-04-13 01:08:35 +0300 2012-04-13 01:08:35 +0300 af358ed7fab884532ec7 {\n   controller: \"Devise::SessionsController\",\n   action: \"new\",\n   params: {\"action\"=&gt;\"new\", \"controller\"=&gt;\"devise/sessions\"},\n   format: :html,\n   method: \"GET\",\n   path: \"/login/sign_in\",\n   status: 200,\n   view_runtime: 279.3080806732178,\n   db_runtime: 40.053\n }</pre> <p>You can also subscribe to all events whose name matches a certain regexp:</p> <pre>ActiveSupport::Notifications.subscribe(/render/) do |*args|\n  ...\nend</pre> <p>and even pass no argument to <code>subscribe</code>, in which case you are subscribing to all events.</p> <h2 id=\"module-ActiveSupport::Notifications-label-Temporary+Subscriptions\">Temporary Subscriptions</h2> <p>Sometimes you do not want to subscribe to an event for the entire life of the application. There are two ways to unsubscribe.</p> <p>WARNING: The instrumentation framework is designed for long-running subscribers, use this feature sparingly because it wipes some internal caches and that has a negative impact on performance.</p> <h3 id=\"module-ActiveSupport::Notifications-label-Subscribe+While+a+Block+Runs\">Subscribe While a Block Runs</h3> <p>You can subscribe to some event temporarily while some block runs. For example, in</p> <pre>callback = lambda {|*args| ... }\nActiveSupport::Notifications.subscribed(callback, \"sql.active_record\") do\n  ...\nend</pre> <p>the callback will be called for all “sql.active_record” events instrumented during the execution of the block. The callback is unsubscribed automatically after that.</p> <h3 id=\"module-ActiveSupport::Notifications-label-Manual+Unsubscription\">Manual Unsubscription</h3> <p>The <code>subscribe</code> method returns a subscriber object:</p> <pre>subscriber = ActiveSupport::Notifications.subscribe(\"render\") do |*args|\n  ...\nend</pre> <p>To prevent that block from being called anymore, just unsubscribe passing that reference:</p> <pre class=\"ruby\">ActiveSupport::Notifications.unsubscribe(subscriber)\n</pre> <p>You can also unsubscribe by passing the name of the subscriber object. Note that this will unsubscribe all subscriptions with the given name:</p> <pre class=\"ruby\">ActiveSupport::Notifications.unsubscribe(\"render\")\n</pre> <h2 id=\"module-ActiveSupport::Notifications-label-Default+Queue\">Default Queue</h2> <p><a href=\"notifications\">Notifications</a> ships with a queue implementation that consumes and publishes events to all log subscribers. You can use any queue implementation you want.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-notifier\"> <span class=\"method-name\">notifier</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-instrument\"> <span class=\"method-name\">instrument</span><span class=\"method-args\">(name, payload = {}) { |payload| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"instrument-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications.rb, line 162\ndef instrument(name, payload = {})\n  if notifier.listening?(name)\n    instrumenter.instrument(name, payload) { yield payload if block_given? }\n  else\n    yield payload if block_given?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-instrumenter\"> <span class=\"method-name\">instrumenter</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"instrumenter-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications.rb, line 185\ndef instrumenter\n  InstrumentationRegistry.instance.instrumenter_for(notifier)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-publish\"> <span class=\"method-name\">publish</span><span class=\"method-args\">(name, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"publish-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications.rb, line 158\ndef publish(name, *args)\n  notifier.publish(name, *args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-subscribe\"> <span class=\"method-name\">subscribe</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"subscribe-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications.rb, line 170\ndef subscribe(*args, &amp;block)\n  notifier.subscribe(*args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-subscribed\"> <span class=\"method-name\">subscribed</span><span class=\"method-args\">(callback, *args) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"subscribed-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications.rb, line 174\ndef subscribed(callback, *args, &amp;block)\n  subscriber = subscribe(*args, &amp;callback)\n  yield\nensure\n  unsubscribe(subscriber)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-unsubscribe\"> <span class=\"method-name\">unsubscribe</span><span class=\"method-args\">(subscriber_or_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"unsubscribe-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications.rb, line 181\ndef unsubscribe(subscriber_or_name)\n  notifier.unsubscribe(subscriber_or_name)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/notifications/instrumenter":"<h1 id=\"class-ActiveSupport::Notifications::Instrumenter\" class=\"class\"> class ActiveSupport::Notifications::Instrumenter </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Instrumenters are stored in a thread local.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-id\"> <span class=\"method-name\">id</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(notifier)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications/instrumenter.rb, line 9\ndef initialize(notifier)\n  @id       = unique_id\n  @notifier = notifier\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-finish\"> <span class=\"method-name\">finish</span><span class=\"method-args\">(name, payload)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Send a finish notification with <code>name</code> and <code>payload</code>.</p> <div class=\"method-source-code\" id=\"finish-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications/instrumenter.rb, line 35\ndef finish(name, payload)\n  @notifier.finish name, @id, payload\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-instrument\"> <span class=\"method-name\">instrument</span><span class=\"method-args\">(name, payload={}) { |payload| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Instrument the given block by measuring the time taken to execute it and publish it. Notice that events get sent even if an error occurs in the passed-in block.</p> <div class=\"method-source-code\" id=\"instrument-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications/instrumenter.rb, line 17\ndef instrument(name, payload={})\n  start name, payload\n  begin\n    yield payload\n  rescue Exception =&gt; e\n    payload[:exception] = [e.class.name, e.message]\n    raise e\n  ensure\n    finish name, payload\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start\"> <span class=\"method-name\">start</span><span class=\"method-args\">(name, payload)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Send a start notification with <code>name</code> and <code>payload</code>.</p> <div class=\"method-source-code\" id=\"start-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/notifications/instrumenter.rb, line 30\ndef start(name, payload)\n  @notifier.start name, @id, payload\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/numberhelper":"<h1 id=\"module-ActiveSupport::NumberHelper\" class=\"module\"> module ActiveSupport::NumberHelper </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_currency\"> <span class=\"method-name\">number_to_currency</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> into a currency string (e.g., $13.65). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_to_currency-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the level of precision (defaults to 2).</p> </li>\n<li> <p><code>:unit</code> - Sets the denomination of the currency (defaults to “$”).</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the units (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “,”).</p> </li>\n<li> <p><code>:format</code> - Sets the format for non-negative numbers (defaults to “%u%n”). Fields are <code>%u</code> for the currency, and <code>%n</code> for the number.</p> </li>\n<li> <p><code>:negative_format</code> - Sets the format for negative numbers (defaults to prepending an hyphen to the formatted number given by <code>:format</code>). Accepts the same fields than <code>:format</code>, except <code>%n</code> is here the absolute value of the number.</p> </li>\n</ul> <h4 id=\"method-i-number_to_currency-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_currency(1234567890.50)                # =&gt; $1,234,567,890.50\nnumber_to_currency(1234567890.506)               # =&gt; $1,234,567,890.51\nnumber_to_currency(1234567890.506, precision: 3) # =&gt; $1,234,567,890.506\nnumber_to_currency(1234567890.506, locale: :fr)  # =&gt; 1 234 567 890,51 €\nnumber_to_currency('123a456')                    # =&gt; $123a456\n\nnumber_to_currency(-1234567890.50, negative_format: '(%u%n)')\n# =&gt; ($1,234,567,890.50)\nnumber_to_currency(1234567890.50, unit: '&amp;pound;', separator: ',', delimiter: '')\n# =&gt; &amp;pound;1234567890,50\nnumber_to_currency(1234567890.50, unit: '&amp;pound;', separator: ',', delimiter: '', format: '%n %u')\n# =&gt; 1234567890,50 &amp;pound;\n</pre> <div class=\"method-source-code\" id=\"number_to_currency-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/number_helper.rb, line 85\ndef number_to_currency(number, options = {})\n  NumberToCurrencyConverter.convert(number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_delimited\"> <span class=\"method-name\">number_to_delimited</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> with grouped thousands using <code>delimiter</code> (e.g., 12,324). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_to_delimited-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “,”).</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n</ul> <h4 id=\"method-i-number_to_delimited-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_delimited(12345678)                    # =&gt; 12,345,678\nnumber_to_delimited('123456')                    # =&gt; 123,456\nnumber_to_delimited(12345678.05)                 # =&gt; 12,345,678.05\nnumber_to_delimited(12345678, delimiter: '.')    # =&gt; 12.345.678\nnumber_to_delimited(12345678, delimiter: ',')    # =&gt; 12,345,678\nnumber_to_delimited(12345678.05, separator: ' ') # =&gt; 12,345,678 05\nnumber_to_delimited(12345678.05, locale: :fr)    # =&gt; 12 345 678,05\nnumber_to_delimited('112a')                      # =&gt; 112a\nnumber_to_delimited(98765432.98, delimiter: ' ', separator: ',')\n# =&gt; 98 765 432,98\n</pre> <div class=\"method-source-code\" id=\"number_to_delimited-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/number_helper.rb, line 150\ndef number_to_delimited(number, options = {})\n  NumberToDelimitedConverter.convert(number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_human\"> <span class=\"method-name\">number_to_human</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Pretty prints (formats and approximates) a number in a way it is more readable by humans (eg.: 1200000000 becomes “1.2 Billion”). This is useful for numbers that can get very large (and too hard to read).</p> <p>See <code>number_to_human_size</code> if you want to print a file size.</p> <p>You can also define your own unit-quantifier names if you want to use other decimal units (eg.: 1500 becomes “1.5 kilometers”, 0.150 becomes “150 milliliters”, etc). You may define a wide range of unit quantifiers, even fractional ones (centi, deci, mili, etc).</p> <h4 id=\"method-i-number_to_human-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the precision of the number (defaults to 3).</p> </li>\n<li> <p><code>:significant</code> - If <code>true</code>, precision will be the # of significant_digits. If <code>false</code>, the # of fractional digits (defaults to <code>true</code>)</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “”).</p> </li>\n<li> <p><code>:strip_insignificant_zeros</code> - If <code>true</code> removes insignificant zeros after the decimal separator (defaults to <code>true</code>)</p> </li>\n<li> <p><code>:units</code> - A <a href=\"../hash\">Hash</a> of unit quantifier names. Or a string containing an i18n scope where to find this hash. It might have the following keys:</p> <ul>\n<li> <p><strong>integers</strong>: <code>:unit</code>, <code>:ten</code>, <code>:hundred</code>, <code>:thousand</code>, <code>:million</code>, <code>:billion</code>, <code>:trillion</code>, <code>:quadrillion</code></p> </li>\n<li> <p><strong>fractionals</strong>: <code>:deci</code>, <code>:centi</code>, <code>:mili</code>, <code>:micro</code>, <code>:nano</code>, <code>:pico</code>, <code>:femto</code></p> </li>\n</ul> </li>\n<li> <p><code>:format</code> - Sets the format of the output string (defaults to “%n %u”). The field types are:</p> <ul>\n<li> <p>%u - The quantifier (ex.: 'thousand')</p> </li>\n<li> <p>%n - The number</p> </li>\n</ul> </li>\n</ul> <h4 id=\"method-i-number_to_human-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_human(123)                         # =&gt; \"123\"\nnumber_to_human(1234)                        # =&gt; \"1.23 Thousand\"\nnumber_to_human(12345)                       # =&gt; \"12.3 Thousand\"\nnumber_to_human(1234567)                     # =&gt; \"1.23 Million\"\nnumber_to_human(1234567890)                  # =&gt; \"1.23 Billion\"\nnumber_to_human(1234567890123)               # =&gt; \"1.23 Trillion\"\nnumber_to_human(1234567890123456)            # =&gt; \"1.23 Quadrillion\"\nnumber_to_human(1234567890123456789)         # =&gt; \"1230 Quadrillion\"\nnumber_to_human(489939, precision: 2)        # =&gt; \"490 Thousand\"\nnumber_to_human(489939, precision: 4)        # =&gt; \"489.9 Thousand\"\nnumber_to_human(1234567, precision: 4,\n                         significant: false) # =&gt; \"1.2346 Million\"\nnumber_to_human(1234567, precision: 1,\n                         separator: ',',\n                         significant: false) # =&gt; \"1,2 Million\"\n\nnumber_to_human(500000000, precision: 5)           # =&gt; \"500 Million\"\nnumber_to_human(12345012345, significant: false)   # =&gt; \"12.345 Billion\"\n</pre> <p>Non-significant zeros after the decimal separator are stripped out by default (set <code>:strip_insignificant_zeros</code> to <code>false</code> to change that):</p> <p><a href=\"numberhelper#method-i-number_to_human\">#number_to_human</a>(12.00001) # =&gt; “12” <a href=\"numberhelper#method-i-number_to_human\">#number_to_human</a>(12.00001, strip_insignificant_zeros: false) # =&gt; “12.0”</p> <h4 id=\"method-i-number_to_human-label-Custom+Unit+Quantifiers\">Custom Unit Quantifiers</h4> <p>You can also use your own custom unit quantifiers:</p> <pre class=\"ruby\">number_to_human(500000, units: { unit: 'ml', thousand: 'lt' })  # =&gt; \"500 lt\"\n</pre> <p>If in your <a href=\"../i18n\">I18n</a> locale you have:</p> <pre>distance:\n  centi:\n    one: \"centimeter\"\n    other: \"centimeters\"\n  unit:\n    one: \"meter\"\n    other: \"meters\"\n  thousand:\n    one: \"kilometer\"\n    other: \"kilometers\"\n  billion: \"gazillion-distance\"</pre> <p>Then you could do:</p> <pre class=\"ruby\">number_to_human(543934, units: :distance)            # =&gt; \"544 kilometers\"\nnumber_to_human(54393498, units: :distance)          # =&gt; \"54400 kilometers\"\nnumber_to_human(54393498000, units: :distance)       # =&gt; \"54.4 gazillion-distance\"\nnumber_to_human(343, units: :distance, precision: 1) # =&gt; \"300 meters\"\nnumber_to_human(1, units: :distance)                 # =&gt; \"1 meter\"\nnumber_to_human(0.34, units: :distance)              # =&gt; \"34 centimeters\"\n</pre> <div class=\"method-source-code\" id=\"number_to_human-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/number_helper.rb, line 341\ndef number_to_human(number, options = {})\n  NumberToHumanConverter.convert(number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_human_size\"> <span class=\"method-name\">number_to_human_size</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats the bytes in <code>number</code> into a more understandable representation (e.g., giving it 1500 yields 1.5 KB). This method is useful for reporting file sizes to users. You can customize the format in the <code>options</code> hash.</p> <p>See <code>number_to_human</code> if you want to pretty-print a generic number.</p> <h4 id=\"method-i-number_to_human_size-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the precision of the number (defaults to 3).</p> </li>\n<li> <p><code>:significant</code> - If <code>true</code>, precision will be the # of significant_digits. If <code>false</code>, the # of fractional digits (defaults to <code>true</code>)</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “”).</p> </li>\n<li> <p><code>:strip_insignificant_zeros</code> - If <code>true</code> removes insignificant zeros after the decimal separator (defaults to <code>true</code>)</p> </li>\n<li> <p><code>:prefix</code> - If <code>:si</code> formats the number using the SI prefix (defaults to :binary)</p> </li>\n</ul> <h4 id=\"method-i-number_to_human_size-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_human_size(123)                                    # =&gt; 123 Bytes\nnumber_to_human_size(1234)                                   # =&gt; 1.21 KB\nnumber_to_human_size(12345)                                  # =&gt; 12.1 KB\nnumber_to_human_size(1234567)                                # =&gt; 1.18 MB\nnumber_to_human_size(1234567890)                             # =&gt; 1.15 GB\nnumber_to_human_size(1234567890123)                          # =&gt; 1.12 TB\nnumber_to_human_size(1234567, precision: 2)                  # =&gt; 1.2 MB\nnumber_to_human_size(483989, precision: 2)                   # =&gt; 470 KB\nnumber_to_human_size(1234567, precision: 2, separator: ',')  # =&gt; 1,2 MB\nnumber_to_human_size(1234567890123, precision: 5)            # =&gt; \"1.1228 TB\"\nnumber_to_human_size(524288000, precision: 5)                # =&gt; \"500 MB\"\n</pre> <div class=\"method-source-code\" id=\"number_to_human_size-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/number_helper.rb, line 237\ndef number_to_human_size(number, options = {})\n  NumberToHumanSizeConverter.convert(number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_percentage\"> <span class=\"method-name\">number_to_percentage</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_to_percentage-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the precision of the number (defaults to 3).</p> </li>\n<li> <p><code>:significant</code> - If <code>true</code>, precision will be the # of significant_digits. If <code>false</code>, the # of fractional digits (defaults to <code>false</code>).</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “”).</p> </li>\n<li> <p><code>:strip_insignificant_zeros</code> - If <code>true</code> removes insignificant zeros after the decimal separator (defaults to <code>false</code>).</p> </li>\n<li> <p><code>:format</code> - Specifies the format of the percentage string The number field is <code>%n</code> (defaults to “%n%”).</p> </li>\n</ul> <h4 id=\"method-i-number_to_percentage-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_percentage(100)                                  # =&gt; 100.000%\nnumber_to_percentage('98')                                 # =&gt; 98.000%\nnumber_to_percentage(100, precision: 0)                    # =&gt; 100%\nnumber_to_percentage(1000, delimiter: '.', separator: ',') # =&gt; 1.000,000%\nnumber_to_percentage(302.24398923423, precision: 5)        # =&gt; 302.24399%\nnumber_to_percentage(1000, locale: :fr)                    # =&gt; 1 000,000%\nnumber_to_percentage('98a')                                # =&gt; 98a%\nnumber_to_percentage(100, format: '%n  %')                 # =&gt; 100  %\n</pre> <div class=\"method-source-code\" id=\"number_to_percentage-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/number_helper.rb, line 121\ndef number_to_percentage(number, options = {})\n  NumberToPercentageConverter.convert(number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_phone\"> <span class=\"method-name\">number_to_phone</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> into a US phone number (e.g., (555) 123-9876). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_to_phone-label-Options\">Options</h4> <ul>\n<li> <p><code>:area_code</code> - Adds parentheses around the area code.</p> </li>\n<li> <p><code>:delimiter</code> - Specifies the delimiter to use (defaults to “-”).</p> </li>\n<li> <p><code>:extension</code> - Specifies an extension to add to the end of the generated number.</p> </li>\n<li> <p><code>:country_code</code> - Sets the country code for the phone number.</p> </li>\n</ul> <h4 id=\"method-i-number_to_phone-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_phone(5551234)                                     # =&gt; 555-1234\nnumber_to_phone('5551234')                                   # =&gt; 555-1234\nnumber_to_phone(1235551234)                                  # =&gt; 123-555-1234\nnumber_to_phone(1235551234, area_code: true)                 # =&gt; (123) 555-1234\nnumber_to_phone(1235551234, delimiter: ' ')                  # =&gt; 123 555 1234\nnumber_to_phone(1235551234, area_code: true, extension: 555) # =&gt; (123) 555-1234 x 555\nnumber_to_phone(1235551234, country_code: 1)                 # =&gt; +1-123-555-1234\nnumber_to_phone('123a456')                                   # =&gt; 123a456\n\nnumber_to_phone(1235551234, country_code: 1, extension: 1343, delimiter: '.')\n# =&gt; +1.123.555.1234 x 1343\n</pre> <div class=\"method-source-code\" id=\"number_to_phone-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/number_helper.rb, line 43\ndef number_to_phone(number, options = {})\n  NumberToPhoneConverter.convert(number, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-number_to_rounded\"> <span class=\"method-name\">number_to_rounded</span><span class=\"method-args\">(number, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Formats a <code>number</code> with the specified level of <code>:precision</code> (e.g., 112.32 has a precision of 2 if <code>:significant</code> is <code>false</code>, and 5 if <code>:significant</code> is <code>true</code>). You can customize the format in the <code>options</code> hash.</p> <h4 id=\"method-i-number_to_rounded-label-Options\">Options</h4> <ul>\n<li> <p><code>:locale</code> - Sets the locale to be used for formatting (defaults to current locale).</p> </li>\n<li> <p><code>:precision</code> - Sets the precision of the number (defaults to 3).</p> </li>\n<li> <p><code>:significant</code> - If <code>true</code>, precision will be the # of significant_digits. If <code>false</code>, the # of fractional digits (defaults to <code>false</code>).</p> </li>\n<li> <p><code>:separator</code> - Sets the separator between the fractional and integer digits (defaults to “.”).</p> </li>\n<li> <p><code>:delimiter</code> - Sets the thousands delimiter (defaults to “”).</p> </li>\n<li> <p><code>:strip_insignificant_zeros</code> - If <code>true</code> removes insignificant zeros after the decimal separator (defaults to <code>false</code>).</p> </li>\n</ul> <h4 id=\"method-i-number_to_rounded-label-Examples\">Examples</h4> <pre class=\"ruby\">number_to_rounded(111.2345)                                  # =&gt; 111.235\nnumber_to_rounded(111.2345, precision: 2)                    # =&gt; 111.23\nnumber_to_rounded(13, precision: 5)                          # =&gt; 13.00000\nnumber_to_rounded(389.32314, precision: 0)                   # =&gt; 389\nnumber_to_rounded(111.2345, significant: true)               # =&gt; 111\nnumber_to_rounded(111.2345, precision: 1, significant: true) # =&gt; 100\nnumber_to_rounded(13, precision: 5, significant: true)       # =&gt; 13.000\nnumber_to_rounded(111.234, locale: :fr)                      # =&gt; 111,234\n\nnumber_to_rounded(13, precision: 5, significant: true, strip_insignificant_zeros: true)\n# =&gt; 13\n\nnumber_to_rounded(389.32314, precision: 4, significant: true) # =&gt; 389.3\nnumber_to_rounded(1111.2345, precision: 2, separator: ',', delimiter: '.')\n# =&gt; 1.111,23\n</pre> <div class=\"method-source-code\" id=\"number_to_rounded-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/number_helper.rb, line 193\ndef number_to_rounded(number, options = {})\n  NumberToRoundedConverter.convert(number, options)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/orderedhash":"<h1 id=\"class-ActiveSupport::OrderedHash\" class=\"class\"> class ActiveSupport::OrderedHash </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../hash\">Hash</a></dd>\n</dl> <section class=\"description\"> <p><code>ActiveSupport::OrderedHash</code> implements a hash that preserves insertion order.</p> <pre class=\"ruby\">oh = ActiveSupport::OrderedHash.new\noh[:a] = 1\noh[:b] = 2\noh.keys # =&gt; [:a, :b], this order is guaranteed\n</pre> <p>Also, maps the <code>omap</code> feature for YAML files (See <a href=\"http://yaml.org/type/omap.html\">yaml.org/type/omap.html</a>) to support ordered items when loading from yaml.</p> <p><code>ActiveSupport::OrderedHash</code> is namespaced to prevent conflicts with other implementations.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encode_with\"> <span class=\"method-name\">encode_with</span><span class=\"method-args\">(coder)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"encode_with-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_hash.rb, line 27\ndef encode_with(coder)\n  coder.represent_seq '!omap', map { |k,v| { k =&gt; v } }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extractable_options-3F\"> <span class=\"method-name\">extractable_options?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true to make sure that this hash is extractable via <code>Array#extract_options!</code></p> <div class=\"method-source-code\" id=\"extractable_options-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_hash.rb, line 44\ndef extractable_options?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-nested_under_indifferent_access\"> <span class=\"method-name\">nested_under_indifferent_access</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"nested_under_indifferent_access-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_hash.rb, line 39\ndef nested_under_indifferent_access\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reject\"> <span class=\"method-name\">reject</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"reject-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_hash.rb, line 35\ndef reject(*args, &amp;block)\n  dup.tap { |hash| hash.reject!(*args, &amp;block) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-select\"> <span class=\"method-name\">select</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"select-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_hash.rb, line 31\ndef select(*args, &amp;block)\n  dup.tap { |hash| hash.select!(*args, &amp;block) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_yaml_type\"> <span class=\"method-name\">to_yaml_type</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_yaml_type-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_hash.rb, line 23\ndef to_yaml_type\n  \"!tag:yaml.org,2002:omap\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/orderedoptions":"<h1 id=\"class-ActiveSupport::OrderedOptions\" class=\"class\"> class ActiveSupport::OrderedOptions </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../hash\">Hash</a></dd>\n</dl> <section class=\"description\"> <p>Usually key value pairs are handled something like this:</p> <pre class=\"ruby\">h = {}\nh[:boy] = 'John'\nh[:girl] = 'Mary'\nh[:boy]  # =&gt; 'John'\nh[:girl] # =&gt; 'Mary'\n</pre> <p>Using <code>OrderedOptions</code>, the above code could be reduced to:</p> <pre class=\"ruby\">h = ActiveSupport::OrderedOptions.new\nh.boy = 'John'\nh.girl = 'Mary'\nh.boy  # =&gt; 'John'\nh.girl # =&gt; 'Mary'\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_options.rb, line 25\ndef [](key)\n  super(key.to_sym)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"orderedoptions#method-i-_get\">_get</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(key, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_options.rb, line 21\ndef []=(key, value)\n  super(key.to_sym, value)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-_get\"> <span class=\"method-name\">_get</span><span class=\"method-args\">(key)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"orderedoptions#method-i-5B-5D\">[]</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method_missing\"> <span class=\"method-name\">method_missing</span><span class=\"method-args\">(name, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"method_missing-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_options.rb, line 29\ndef method_missing(name, *args)\n  name_string = name.to_s\n  if name_string.chomp!('=')\n    self[name_string] = args.first\n  else\n    self[name]\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to_missing-3F\"> <span class=\"method-name\">respond_to_missing?</span><span class=\"method-args\">(name, include_private)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"respond_to_missing-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/ordered_options.rb, line 38\ndef respond_to_missing?(name, include_private)\n  true\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/perthreadregistry":"<h1 id=\"module-ActiveSupport::PerThreadRegistry\" class=\"module\"> module ActiveSupport::PerThreadRegistry </h1> <section class=\"description\"> <p>This module is used to encapsulate access to thread local variables.</p> <p>Instead of polluting the thread locals namespace:</p> <pre class=\"ruby\">Thread.current[:connection_handler]\n</pre> <p>you define a class that extends this module:</p> <pre class=\"ruby\">module ActiveRecord\n  class RuntimeRegistry\n    extend ActiveSupport::PerThreadRegistry\n\n    attr_accessor :connection_handler\n  end\nend\n</pre> <p>and invoke the declared instance accessors as class methods. So</p> <pre class=\"ruby\">ActiveRecord::RuntimeRegistry.connection_handler = connection_handler\n</pre> <p>sets a connection handler local to the current thread, and</p> <pre class=\"ruby\">ActiveRecord::RuntimeRegistry.connection_handler\n</pre> <p>returns a connection handler local to the current thread.</p> <p>This feature is accomplished by instantiating the class and storing the instance as a thread local keyed by the class name. In the example above a key “ActiveRecord::RuntimeRegistry” is stored in <code>Thread.current</code>. The class methods proxy to said thread local instance.</p> <p>If the class has an initializer, it must accept no arguments.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-extended\"> <span class=\"method-name\">extended</span><span class=\"method-args\">(object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"extended-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/per_thread_registry.rb, line 35\ndef self.extended(object)\n  object.instance_variable_set '@per_thread_registry_key', object.name.freeze\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-instance\"> <span class=\"method-name\">instance</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"instance-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/per_thread_registry.rb, line 39\ndef instance\n  Thread.current[@per_thread_registry_key] ||= new\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/proxyobject":"<h1 id=\"class-ActiveSupport::ProxyObject\" class=\"class\"> class ActiveSupport::ProxyObject </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">BasicObject</dd>\n</dl> <section class=\"description\"> <p>A class with no predefined methods that behaves similarly to Builder's BlankSlate. Used for proxy classes.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-raise\"> <span class=\"method-name\">raise</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Let <a href=\"proxyobject\">ActiveSupport::ProxyObject</a> at least raise exceptions.</p> <div class=\"method-source-code\" id=\"raise-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/proxy_object.rb, line 9\ndef raise(*args)\n  ::Object.send(:raise, *args)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/rescuable":"<h1 id=\"module-ActiveSupport::Rescuable\" class=\"module\"> module ActiveSupport::Rescuable </h1> <section class=\"description\"> <p><a href=\"rescuable\">Rescuable</a> module adds support for easier exception handling.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-handler_for_rescue\"> <span class=\"method-name\">handler_for_rescue</span><span class=\"method-args\">(exception)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"handler_for_rescue-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/rescuable.rb, line 85\ndef handler_for_rescue(exception)\n  # We go from right to left because pairs are pushed onto rescue_handlers\n  # as rescue_from declarations are found.\n  _, rescuer = self.class.rescue_handlers.reverse.detect do |klass_name, handler|\n    # The purpose of allowing strings in rescue_from is to support the\n    # declaration of handler associations for exception classes whose\n    # definition is yet unknown.\n    #\n    # Since this loop needs the constants it would be inconsistent to\n    # assume they should exist at this point. An early raised exception\n    # could trigger some other handler and the array could include\n    # precisely a string whose corresponding constant has not yet been\n    # seen. This is why we are tolerant to unknown constants.\n    #\n    # Note that this tolerance only matters if the exception was given as\n    # a string, otherwise a NameError will be raised by the interpreter\n    # itself when rescue_from CONSTANT is executed.\n    klass = self.class.const_get(klass_name) rescue nil\n    klass ||= klass_name.constantize rescue nil\n    exception.is_a?(klass) if klass\n  end\n\n  case rescuer\n  when Symbol\n    method(rescuer)\n  when Proc\n    if rescuer.arity == 0\n      Proc.new { instance_exec(&amp;rescuer) }\n    else\n      Proc.new { |_exception| instance_exec(_exception, &amp;rescuer) }\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rescue_with_handler\"> <span class=\"method-name\">rescue_with_handler</span><span class=\"method-args\">(exception)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Tries to rescue the exception by looking up and calling a registered handler.</p> <div class=\"method-source-code\" id=\"rescue_with_handler-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/rescuable.rb, line 78\ndef rescue_with_handler(exception)\n  if handler = handler_for_rescue(exception)\n    handler.arity != 0 ? handler.call(exception) : handler.call\n    true # don't rely on the return value of the handler\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/rescuable/classmethods":"<h1 id=\"module-ActiveSupport::Rescuable::ClassMethods\" class=\"module\"> module ActiveSupport::Rescuable::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rescue_from\"> <span class=\"method-name\">rescue_from</span><span class=\"method-args\">(*klasses, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Rescue exceptions raised in controller actions.</p> <p><code>rescue_from</code> receives a series of exception classes or class names, and a trailing <code>:with</code> option with the name of a method or a Proc object to be called to handle them. Alternatively a block can be given.</p> <p>Handlers that take one argument will be called with the exception, so that the exception can be inspected when dealing with it.</p> <p>Handlers are inherited. They are searched from right to left, from bottom to top, and up the hierarchy. The handler of the first class for which <code>exception.is_a?(klass)</code> holds true is the one invoked, if any.</p> <pre>class ApplicationController &lt; ActionController::Base\n  rescue_from User::NotAuthorized, with: :deny_access # self defined exception\n  rescue_from ActiveRecord::RecordInvalid, with: :show_errors\n\n  rescue_from 'MyAppError::Base' do |exception|\n    render xml: exception, status: 500\n  end\n\n  protected\n    def deny_access\n      ...\n    end\n\n    def show_errors(exception)\n      exception.record.new_record? ? ...\n    end\nend</pre> <p>Exceptions raised inside exception handlers are not propagated up.</p> <div class=\"method-source-code\" id=\"rescue_from-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/rescuable.rb, line 51\ndef rescue_from(*klasses, &amp;block)\n  options = klasses.extract_options!\n\n  unless options.has_key?(:with)\n    if block_given?\n      options[:with] = block\n    else\n      raise ArgumentError, \"Need a handler. Supply an options hash that has a :with key as the last argument.\"\n    end\n  end\n\n  klasses.each do |klass|\n    key = if klass.is_a?(Class) &amp;&amp; klass &lt;= Exception\n      klass.name\n    elsif klass.is_a?(String)\n      klass\n    else\n      raise ArgumentError, \"#{klass} is neither an Exception nor a String\"\n    end\n\n    # put the new handler at the end because the list is read in reverse\n    self.rescue_handlers += [[key, options[:with]]]\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/securityutils":"<h1 id=\"module-ActiveSupport::SecurityUtils\" class=\"module\"> module ActiveSupport::SecurityUtils </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-secure_compare\"> <span class=\"method-name\">secure_compare</span><span class=\"method-args\">(a, b)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Constant time string comparison.</p> <p>The values compared should be of fixed length, such as strings that have already been processed by HMAC. This should not be used on variable length plaintext strings because it could leak length info via timing attacks.</p> <div class=\"method-source-code\" id=\"secure_compare-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/security_utils.rb, line 9\ndef secure_compare(a, b)\n  return false unless a.bytesize == b.bytesize\n\n  l = a.unpack \"C#{a.bytesize}\"\n\n  res = 0\n  b.each_byte { |byte| res |= byte ^ l.shift }\n  res == 0\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/stringinquirer":"<h1 id=\"class-ActiveSupport::StringInquirer\" class=\"class\"> class ActiveSupport::StringInquirer </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../string\">String</a></dd>\n</dl> <section class=\"description\"> <p>Wrapping a string in this class gives you a prettier way to test for equality. The value returned by <code>Rails.env</code> is wrapped in a <a href=\"stringinquirer\">StringInquirer</a> object so instead of calling this:</p> <pre class=\"ruby\">Rails.env == 'production'\n</pre> <p>you can call this:</p> <pre class=\"ruby\">Rails.env.production?\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/subscriber":"<h1 id=\"class-ActiveSupport::Subscriber\" class=\"class\"> class ActiveSupport::Subscriber </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"subscriber\">ActiveSupport::Subscriber</a> is an object set to consume <a href=\"notifications\">ActiveSupport::Notifications</a>. The subscriber dispatches notifications to a registered object based on its given namespace.</p> <p>An example would be Active Record subscriber responsible for collecting statistics about queries:</p> <pre class=\"ruby\">module ActiveRecord\n  class StatsSubscriber &lt; ActiveSupport::Subscriber\n    def sql(event)\n      Statsd.timing(\"sql.#{event.payload[:name]}\", event.duration)\n    end\n  end\nend\n</pre> <p>And it's finally registered as:</p> <pre class=\"ruby\">ActiveRecord::StatsSubscriber.attach_to :active_record\n</pre> <p>Since we need to know all instance methods before attaching the log subscriber, the line above should be called after your subscriber definition.</p> <p>After configured, whenever a “sql.active_record” notification is published, it will properly dispatch the event (ActiveSupport::Notifications::Event) to the <code>sql</code> method.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-namespace\"> <span class=\"method-name\">namespace</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-notifier\"> <span class=\"method-name\">notifier</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-subscriber\"> <span class=\"method-name\">subscriber</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-attach_to\"> <span class=\"method-name\">attach_to</span><span class=\"method-args\">(namespace, subscriber=new, notifier=ActiveSupport::Notifications)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Attach the subscriber to a namespace.</p> <div class=\"method-source-code\" id=\"attach_to-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/subscriber.rb, line 33\ndef attach_to(namespace, subscriber=new, notifier=ActiveSupport::Notifications)\n  @namespace  = namespace\n  @subscriber = subscriber\n  @notifier   = notifier\n\n  subscribers &lt;&lt; subscriber\n\n  # Add event subscribers for all existing methods on the class.\n  subscriber.public_methods(false).each do |event|\n    add_event_subscriber(event)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-method_added\"> <span class=\"method-name\">method_added</span><span class=\"method-args\">(event)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds event subscribers for all new methods added to the class.</p> <div class=\"method-source-code\" id=\"method_added-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/subscriber.rb, line 47\ndef method_added(event)\n  # Only public methods are added as subscribers, and only if a notifier\n  # has been set up. This means that subscribers will only be set up for\n  # classes that call #attach_to.\n  if public_method_defined?(event) &amp;&amp; notifier\n    add_event_subscriber(event)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/subscriber.rb, line 79\ndef initialize\n  @queue_key = [self.class.name, object_id].join \"-\"\n  @patterns  = []\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-subscribers\"> <span class=\"method-name\">subscribers</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"subscribers-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/subscriber.rb, line 56\ndef subscribers\n  @@subscribers ||= []\nend</pre> </div> </div> </div> </section> <section id=\"protected-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-add_event_subscriber\"> <span class=\"method-name\">add_event_subscriber</span><span class=\"method-args\">(event)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"add_event_subscriber-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/subscriber.rb, line 64\ndef add_event_subscriber(event)\n  return if %w{ start finish }.include?(event.to_s)\n\n  pattern = \"#{event}.#{namespace}\"\n\n  # don't add multiple subscribers (eg. if methods are redefined)\n  return if subscriber.patterns.include?(pattern)\n\n  subscriber.patterns &lt;&lt; pattern\n  notifier.subscribe(pattern, subscriber)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-finish\"> <span class=\"method-name\">finish</span><span class=\"method-args\">(name, id, payload)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"finish-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/subscriber.rb, line 93\ndef finish(name, id, payload)\n  finished  = Time.now\n  event     = event_stack.pop\n  event.end = finished\n  event.payload.merge!(payload)\n\n  method = name.split('.').first\n  send(method, event)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start\"> <span class=\"method-name\">start</span><span class=\"method-args\">(name, id, payload)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"start-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/subscriber.rb, line 85\ndef start(name, id, payload)\n  e = ActiveSupport::Notifications::Event.new(name, Time.now, nil, id, payload)\n  parent = event_stack.last\n  parent &lt;&lt; e if parent\n\n  event_stack.push e\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/taggedlogging":"<h1 id=\"module-ActiveSupport::TaggedLogging\" class=\"module\"> module ActiveSupport::TaggedLogging </h1> <section class=\"description\"> <p>Wraps any standard <a href=\"logger\">Logger</a> object to provide tagging capabilities.</p> <pre class=\"ruby\">logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT))\nlogger.tagged('BCX') { logger.info 'Stuff' }                            # Logs \"[BCX] Stuff\"\nlogger.tagged('BCX', \"Jason\") { logger.info 'Stuff' }                   # Logs \"[BCX] [Jason] Stuff\"\nlogger.tagged('BCX') { logger.tagged('Jason') { logger.info 'Stuff' } } # Logs \"[BCX] [Jason] Stuff\"\n</pre> <p>This is used by the default <a href=\"../rails#attribute-c-logger\">Rails.logger</a> as configured by Railties to make it easy to stamp log lines with subdomains, request ids, and anything else to aid debugging of multi-user production applications.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(logger)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/tagged_logging.rb, line 58\ndef self.new(logger)\n  # Ensure we set a default formatter so we aren't extending nil!\n  logger.formatter ||= ActiveSupport::Logger::SimpleFormatter.new\n  logger.formatter.extend Formatter\n  logger.extend(self)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-flush\"> <span class=\"method-name\">flush</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"flush-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/tagged_logging.rb, line 71\ndef flush\n  clear_tags!\n  super if defined?(super)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tagged\"> <span class=\"method-name\">tagged</span><span class=\"method-args\">(*tags) { |self| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"tagged-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/tagged_logging.rb, line 67\ndef tagged(*tags)\n  formatter.tagged(*tags) { yield self }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/testcase":"<h1 id=\"class-ActiveSupport::TestCase\" class=\"class\"> class ActiveSupport::TestCase </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Minitest::Test</dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"testing/setupandteardown\">ActiveSupport::Testing::SetupAndTeardown</a>, <a class=\"include\" href=\"testing/assertions\">ActiveSupport::Testing::Assertions</a>, <a class=\"include\" href=\"testing/timehelpers\">ActiveSupport::Testing::TimeHelpers</a>, <a class=\"include\" href=\"../activerecord/testfixtures\">ActiveRecord::TestFixtures</a>\n</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"Assertion\">Assertion </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-test_order\"> <span class=\"method-name\">test_order</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the order in which test cases are run.</p> <pre class=\"ruby\">ActiveSupport::TestCase.test_order # =&gt; :sorted\n</pre> <p>Possible values are <code>:random</code>, <code>:parallel</code>, <code>:alpha</code>, <code>:sorted</code>. Defaults to <code>:sorted</code>.</p> <div class=\"method-source-code\" id=\"test_order-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/test_case.rb, line 38\ndef test_order\n  test_order = ActiveSupport.test_order\n\n  if test_order.nil?\n    ActiveSupport::Deprecation.warn \"You did not specify a value for the \"              \"configuration option `active_support.test_order`. In Rails 5, \"              \"the default value of this option will change from `:sorted` to \"              \"`:random`.\\n\"              \"To disable this warning and keep the current behavior, you can add \"              \"the following line to your `config/environments/test.rb`:\\n\"              \"\\n\"              \"  Rails.application.configure do\\n\"              \"    config.active_support.test_order = :sorted\\n\"              \"  end\\n\"              \"\\n\"              \"Alternatively, you can opt into the future behavior by setting this \"              \"option to `:random`.\"\n\n    test_order = :sorted\n    self.test_order = test_order\n  end\n\n  test_order\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-test_order-3D\"> <span class=\"method-name\">test_order=</span><span class=\"method-args\">(new_order)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the order in which test cases are run.</p> <pre class=\"ruby\">ActiveSupport::TestCase.test_order = :random # =&gt; :random\n</pre> <p>Valid values are:</p> <ul>\n<li> <p><code>:random</code> (to run tests in random order)</p> </li>\n<li> <p><code>:parallel</code> (to run tests in parallel)</p> </li>\n<li> <p><code>:sorted</code> (to run tests alphabetically by method name)</p> </li>\n<li> <p><code>:alpha</code> (equivalent to <code>:sorted</code>)</p> </li>\n</ul> <div class=\"method-source-code\" id=\"test_order-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/test_case.rb, line 28\ndef test_order=(new_order)\n  ActiveSupport.test_order = new_order\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_nothing_raised\"> <span class=\"method-name\">assert_nothing_raised</span><span class=\"method-args\">(*args) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fails if the block raises an exception.</p> <pre>assert_nothing_raised do\n  ...\nend</pre> <div class=\"method-source-code\" id=\"assert_nothing_raised-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/test_case.rb, line 96\ndef assert_nothing_raised(*args)\n  yield\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/testing/assertions":"<h1 id=\"module-ActiveSupport::Testing::Assertions\" class=\"module\"> module ActiveSupport::Testing::Assertions </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_difference\"> <span class=\"method-name\">assert_difference</span><span class=\"method-args\">(expression, difference = 1, message = nil) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Test numeric difference between the return value of an expression as a result of what is evaluated in the yielded block.</p> <pre>assert_difference 'Article.count' do\n  post :create, article: {...}\nend</pre> <p>An arbitrary expression is passed in and evaluated.</p> <pre>assert_difference 'assigns(:article).comments(:reload).size' do\n  post :create, comment: {...}\nend</pre> <p>An arbitrary positive or negative difference can be specified. The default is <code>1</code>.</p> <pre>assert_difference 'Article.count', -1 do\n  post :delete, id: ...\nend</pre> <p>An array of expressions can also be passed in and evaluated.</p> <pre>assert_difference [ 'Article.count', 'Post.count' ], 2 do\n  post :create, article: {...}\nend</pre> <p>A lambda or a list of lambdas can be passed in and evaluated:</p> <pre>assert_difference -&gt;{ Article.count }, 2 do\n  post :create, article: {...}\nend\n\nassert_difference [-&gt;{ Article.count }, -&gt;{ Post.count }], 2 do\n  post :create, article: {...}\nend</pre> <p>An error message can be specified.</p> <pre>assert_difference 'Article.count', -1, 'An Article should be destroyed' do\n  post :delete, id: ...\nend</pre> <div class=\"method-source-code\" id=\"assert_difference-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/testing/assertions.rb, line 63\ndef assert_difference(expression, difference = 1, message = nil, &amp;block)\n  expressions = Array(expression)\n\n  exps = expressions.map { |e|\n    e.respond_to?(:call) ? e : lambda { eval(e, block.binding) }\n  }\n  before = exps.map { |e| e.call }\n\n  yield\n\n  expressions.zip(exps).each_with_index do |(code, e), i|\n    error  = \"#{code.inspect} didn't change by #{difference}\"\n    error  = \"#{message}.\\n#{error}\" if message\n    assert_equal(before[i] + difference, e.call, error)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_no_difference\"> <span class=\"method-name\">assert_no_difference</span><span class=\"method-args\">(expression, message = nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Assertion that the numeric result of evaluating an expression is not changed before and after invoking the passed in block.</p> <pre class=\"ruby\">assert_no_difference 'Article.count' do\n  post :create, article: invalid_attributes\nend\n</pre> <p>An error message can be specified.</p> <pre class=\"ruby\">assert_no_difference 'Article.count', 'An Article should not be created' do\n  post :create, article: invalid_attributes\nend\n</pre> <div class=\"method-source-code\" id=\"assert_no_difference-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/testing/assertions.rb, line 92\ndef assert_no_difference(expression, message = nil, &amp;block)\n  assert_difference expression, 0, message, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_not\"> <span class=\"method-name\">assert_not</span><span class=\"method-args\">(object, message = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Assert that an expression is not truthy. Passes if <code>object</code> is <code>nil</code> or <code>false</code>. “Truthy” means “considered true in a conditional” like <code>if foo</code>.</p> <pre class=\"ruby\">assert_not nil    # =&gt; true\nassert_not false  # =&gt; true\nassert_not 'foo'  # =&gt; Expected \"foo\" to be nil or false\n</pre> <p>An error message can be specified.</p> <pre class=\"ruby\">assert_not foo, 'foo should be false'\n</pre> <div class=\"method-source-code\" id=\"assert_not-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/testing/assertions.rb, line 17\ndef assert_not(object, message = nil)\n  message ||= \"Expected #{mu_pp(object)} to be nil or false\"\n  assert !object, message\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/testing/constantlookup":"<h1 id=\"module-ActiveSupport::Testing::ConstantLookup\" class=\"module\"> module ActiveSupport::Testing::ConstantLookup </h1> <section class=\"description\"> <p>Resolves a constant from a minitest spec name.</p> <p>Given the following spec-style test:</p> <pre class=\"ruby\">describe WidgetsController, :index do\n  describe \"authenticated user\" do\n    describe \"returns widgets\" do\n      it \"has a controller that exists\" do\n        assert_kind_of WidgetsController, @controller\n      end\n    end\n  end\nend\n</pre> <p>The test will have the following name:</p> <pre class=\"ruby\">\"WidgetsController::index::authenticated user::returns widgets\"\n</pre> <p>The constant WidgetsController can be resolved from the name. The following code will resolve the constant:</p> <pre class=\"ruby\">controller = determine_constant_from_test_name(name) do |constant|\n  Class === constant &amp;&amp; constant &lt; ::ActionController::Metal\nend\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/testing/declarative":"<h1 id=\"module-ActiveSupport::Testing::Declarative\" class=\"module\"> module ActiveSupport::Testing::Declarative </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-test\"> <span class=\"method-name\">test</span><span class=\"method-args\">(name, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Helper to define a test method using a <a href=\"../../string\">String</a>. Under the hood, it replaces spaces with underscores and defines the test method.</p> <pre>test \"verify something\" do\n  ...\nend</pre> <div class=\"method-source-code\" id=\"test-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/testing/declarative.rb, line 11\ndef test(name, &amp;block)\n  test_name = \"test_#{name.gsub(/\\s+/,'_')}\".to_sym\n  defined = method_defined? test_name\n  raise \"#{test_name} is already defined in #{self}\" if defined\n  if block_given?\n    define_method(test_name, &amp;block)\n  else\n    define_method(test_name) do\n      flunk \"No implementation provided for #{name}\"\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/testing/setupandteardown":"<h1 id=\"module-ActiveSupport::Testing::SetupAndTeardown\" class=\"module\"> module ActiveSupport::Testing::SetupAndTeardown </h1>\n<dl class=\"meta\">\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../callbacks\">ActiveSupport::Callbacks</a></dd>\n</dl> <section class=\"description\"> <p>Adds support for <code>setup</code> and <code>teardown</code> callbacks. These callbacks serve as a replacement to overwriting the <code>#setup</code> and <code>#teardown</code> methods of your <a href=\"../testcase\">TestCase</a>.</p> <pre class=\"ruby\">class ExampleTest &lt; ActiveSupport::TestCase\n  setup do\n    # ...\n  end\n\n  teardown do\n    # ...\n  end\nend\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/testing/setupandteardown/classmethods":"<h1 id=\"module-ActiveSupport::Testing::SetupAndTeardown::ClassMethods\" class=\"module\"> module ActiveSupport::Testing::SetupAndTeardown::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-setup\"> <span class=\"method-name\">setup</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add a callback, which runs before <code>TestCase#setup</code>.</p> <div class=\"method-source-code\" id=\"setup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/testing/setup_and_teardown.rb, line 29\ndef setup(*args, &amp;block)\n  set_callback(:setup, :before, *args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-teardown\"> <span class=\"method-name\">teardown</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add a callback, which runs after <code>TestCase#teardown</code>.</p> <div class=\"method-source-code\" id=\"teardown-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/testing/setup_and_teardown.rb, line 34\ndef teardown(*args, &amp;block)\n  set_callback(:teardown, :after, *args, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/testing/timehelpers":"<h1 id=\"module-ActiveSupport::Testing::TimeHelpers\" class=\"module\"> module ActiveSupport::Testing::TimeHelpers </h1> <section class=\"description\"> <p>Containing helpers that helps you test passage of time.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-travel\"> <span class=\"method-name\">travel</span><span class=\"method-args\">(duration, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Changes current time to the time in the future or in the past by a given time difference by stubbing <code>Time.now</code> and <code>Date.today</code>.</p> <pre class=\"ruby\">Time.current # =&gt; Sat, 09 Nov 2013 15:34:49 EST -05:00\ntravel 1.day\nTime.current # =&gt; Sun, 10 Nov 2013 15:34:49 EST -05:00\nDate.current # =&gt; Sun, 10 Nov 2013\n</pre> <p>This method also accepts a block, which will return the current time back to its original state at the end of the block:</p> <pre class=\"ruby\">Time.current # =&gt; Sat, 09 Nov 2013 15:34:49 EST -05:00\ntravel 1.day do\n  User.create.created_at # =&gt; Sun, 10 Nov 2013 15:34:49 EST -05:00\nend\nTime.current # =&gt; Sat, 09 Nov 2013 15:34:49 EST -05:00\n</pre> <div class=\"method-source-code\" id=\"travel-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/testing/time_helpers.rb, line 60\ndef travel(duration, &amp;block)\n  travel_to Time.now + duration, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-travel_back\"> <span class=\"method-name\">travel_back</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the current time back to its original state, by removing the stubs added by `travel` and `travel_to`.</p> <pre class=\"ruby\">Time.current # =&gt; Sat, 09 Nov 2013 15:34:49 EST -05:00\ntravel_to Time.new(2004, 11, 24, 01, 04, 44)\nTime.current # =&gt; Wed, 24 Nov 2004 01:04:44 EST -05:00\ntravel_back\nTime.current # =&gt; Sat, 09 Nov 2013 15:34:49 EST -05:00\n</pre> <div class=\"method-source-code\" id=\"travel_back-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/testing/time_helpers.rb, line 120\ndef travel_back\n  simple_stubs.unstub_all!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-travel_to\"> <span class=\"method-name\">travel_to</span><span class=\"method-args\">(date_or_time) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Changes current time to the given time by stubbing <code>Time.now</code> and <code>Date.today</code> to return the time or date passed into this method.</p> <pre class=\"ruby\">Time.current # =&gt; Sat, 09 Nov 2013 15:34:49 EST -05:00\ntravel_to Time.new(2004, 11, 24, 01, 04, 44)\nTime.current # =&gt; Wed, 24 Nov 2004 01:04:44 EST -05:00\nDate.current # =&gt; Wed, 24 Nov 2004\n</pre> <p>Dates are taken as their timestamp at the beginning of the day in the application time zone. <code>Time.current</code> returns said timestamp, and <code>Time.now</code> its equivalent in the system time zone. Similarly, <code>Date.current</code> returns a date equal to the argument, and <code>Date.today</code> the date according to <code>Time.now</code>, which may be different. (Note that you rarely want to deal with <code>Time.now</code>, or <code>Date.today</code>, in order to honor the application time zone please always use <code>Time.current</code> and <code>Date.current</code>.)</p> <p>Note that the usec for the time passed will be set to 0 to prevent rounding errors with external services, like MySQL (which will round instead of floor, leading to off-by-one-second errors).</p> <p>This method also accepts a block, which will return the current time back to its original state at the end of the block:</p> <pre class=\"ruby\">Time.current # =&gt; Sat, 09 Nov 2013 15:34:49 EST -05:00\ntravel_to Time.new(2004, 11, 24, 01, 04, 44) do\n  Time.current # =&gt; Wed, 24 Nov 2004 01:04:44 EST -05:00\nend\nTime.current # =&gt; Sat, 09 Nov 2013 15:34:49 EST -05:00\n</pre> <div class=\"method-source-code\" id=\"travel_to-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/testing/time_helpers.rb, line 93\ndef travel_to(date_or_time)\n  if date_or_time.is_a?(Date) &amp;&amp; !date_or_time.is_a?(DateTime)\n    now = date_or_time.midnight.to_time\n  else\n    now = date_or_time.to_time.change(usec: 0)\n  end\n\n  simple_stubs.stub_object(Time, :now, now)\n  simple_stubs.stub_object(Date, :today, now.to_date)\n\n  if block_given?\n    begin\n      yield\n    ensure\n      travel_back\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/timewithzone":"<h1 id=\"class-ActiveSupport::TimeWithZone\" class=\"class\"> class ActiveSupport::TimeWithZone </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n\n</dl> <section class=\"description\"> <p>A Time-like class that can represent a time in any time zone. Necessary because standard Ruby <a href=\"../time\">Time</a> instances are limited to UTC and the system's <code>ENV['TZ']</code> zone.</p> <p>You shouldn't ever need to create a <a href=\"timewithzone\">TimeWithZone</a> instance directly via <code>new</code>. Instead use methods <code>local</code>, <code>parse</code>, <code>at</code> and <code>now</code> on <a href=\"timezone\">TimeZone</a> instances, and <code>in_time_zone</code> on <a href=\"../time\">Time</a> and <a href=\"../datetime\">DateTime</a> instances.</p> <pre class=\"ruby\">Time.zone = 'Eastern Time (US &amp; Canada)'        # =&gt; 'Eastern Time (US &amp; Canada)'\nTime.zone.local(2007, 2, 10, 15, 30, 45)        # =&gt; Sat, 10 Feb 2007 15:30:45 EST -05:00\nTime.zone.parse('2007-02-10 15:30:45')          # =&gt; Sat, 10 Feb 2007 15:30:45 EST -05:00\nTime.zone.at(1170361845)                        # =&gt; Sat, 10 Feb 2007 15:30:45 EST -05:00\nTime.zone.now                                   # =&gt; Sun, 18 May 2008 13:07:55 EDT -04:00\nTime.utc(2007, 2, 10, 20, 30, 45).in_time_zone  # =&gt; Sat, 10 Feb 2007 15:30:45 EST -05:00\n</pre> <p>See <a href=\"../time\">Time</a> and <a href=\"timezone\">TimeZone</a> for further documentation of these methods.</p> <p><a href=\"timewithzone\">TimeWithZone</a> instances implement the same API as Ruby <a href=\"../time\">Time</a> instances, so that <a href=\"../time\">Time</a> and <a href=\"timewithzone\">TimeWithZone</a> instances are interchangeable.</p> <pre class=\"ruby\">t = Time.zone.now                     # =&gt; Sun, 18 May 2008 13:27:25 EDT -04:00\nt.hour                                # =&gt; 13\nt.dst?                                # =&gt; true\nt.utc_offset                          # =&gt; -14400\nt.zone                                # =&gt; \"EDT\"\nt.to_s(:rfc822)                       # =&gt; \"Sun, 18 May 2008 13:27:25 -0400\"\nt + 1.day                             # =&gt; Mon, 19 May 2008 13:27:25 EDT -04:00\nt.beginning_of_year                   # =&gt; Tue, 01 Jan 2008 00:00:00 EST -05:00\nt &gt; Time.utc(1999)                    # =&gt; true\nt.is_a?(Time)                         # =&gt; true\nt.is_a?(ActiveSupport::TimeWithZone)  # =&gt; true\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-time_zone\"> <span class=\"method-name\">time_zone</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-name\"> <span class=\"method-name\">name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Report class name as 'Time' to thwart type checking.</p> <div class=\"method-source-code\" id=\"name-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 39\ndef self.name\n  'Time'\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(utc_time, time_zone, local_time = nil, period = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 46\ndef initialize(utc_time, time_zone, local_time = nil, period = nil)\n  @utc, @time_zone, @time = utc_time, time_zone, local_time\n  @period = @utc ? period : get_period_and_ensure_valid_local_time(period)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-2B\"> <span class=\"method-name\">+</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"2B-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 246\ndef +(other)\n  # If we're adding a Duration of variable length (i.e., years, months, days), move forward from #time,\n  # otherwise move forward from #utc, for accuracy when moving across DST boundaries\n  if duration_of_variable_length?(other)\n    method_missing(:+, other)\n  else\n    result = utc.acts_like?(:date) ? utc.since(other) : utc + other rescue utc.since(other)\n    result.in_time_zone(time_zone)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-2D\"> <span class=\"method-name\">-</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"2D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 257\ndef -(other)\n  # If we're subtracting a Duration of variable length (i.e., years, months, days), move backwards from #time,\n  # otherwise move backwards #utc, for accuracy when moving across DST boundaries\n  if other.acts_like?(:time)\n    to_time - other.to_time\n  elsif duration_of_variable_length?(other)\n    method_missing(:-, other)\n  else\n    result = utc.acts_like?(:date) ? utc.ago(other) : utc - other rescue utc.ago(other)\n    result.in_time_zone(time_zone)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3D-3E\"> <span class=\"method-name\">&lt;=&gt;</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Use the time in UTC for comparisons.</p> <div class=\"method-source-code\" id=\"3C-3D-3E-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 212\ndef &lt;=&gt;(other)\n  utc &lt;=&gt; other\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-acts_like_time-3F\"> <span class=\"method-name\">acts_like_time?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>So that <code>self</code> <code>acts_like?(:time)</code>.</p> <div class=\"method-source-code\" id=\"acts_like_time-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 329\ndef acts_like_time?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-advance\"> <span class=\"method-name\">advance</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"advance-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 284\ndef advance(options)\n  # If we're advancing a value of variable length (i.e., years, weeks, months, days), advance from #time,\n  # otherwise advance from #utc, for accuracy when moving across DST boundaries\n  if options.values_at(:years, :weeks, :months, :days).any?\n    method_missing(:advance, options)\n  else\n    utc.advance(options).in_time_zone(time_zone)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ago\"> <span class=\"method-name\">ago</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"ago-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 280\ndef ago(other)\n  since(-other)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-as_json\"> <span class=\"method-name\">as_json</span><span class=\"method-args\">(options = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Coerces time to a string for <a href=\"json\">JSON</a> encoding. The default format is ISO 8601. You can get %Y/%m/%d %H:%M:%S +offset style by setting <code>ActiveSupport::JSON::Encoding.use_standard_json_time_format</code> to <code>false</code>.</p> <pre class=\"ruby\"># With ActiveSupport::JSON::Encoding.use_standard_json_time_format = true\nTime.utc(2005,2,1,15,15,10).in_time_zone(\"Hawaii\").to_json\n# =&gt; \"2005-02-01T05:15:10.000-10:00\"\n\n# With ActiveSupport::JSON::Encoding.use_standard_json_time_format = false\nTime.utc(2005,2,1,15,15,10).in_time_zone(\"Hawaii\").to_json\n# =&gt; \"2005/02/01 05:15:10 -1000\"\n</pre> <div class=\"method-source-code\" id=\"as_json-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 155\ndef as_json(options = nil)\n  if ActiveSupport::JSON::Encoding.use_standard_json_time_format\n    xmlschema(ActiveSupport::JSON::Encoding.time_precision)\n  else\n    %Q(#{time.strftime(\"%Y/%m/%d %H:%M:%S\")} #{formatted_offset(false)})\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-between-3F\"> <span class=\"method-name\">between?</span><span class=\"method-args\">(min, max)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the current object's time is within the specified <code>min</code> and <code>max</code> time.</p> <div class=\"method-source-code\" id=\"between-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 218\ndef between?(min, max)\n  utc.between?(min, max)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-comparable_time\"> <span class=\"method-name\">comparable_time</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-utc\">utc</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dst-3F\"> <span class=\"method-name\">dst?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the current time is within Daylight Savings <a href=\"../time\">Time</a> for the specified time zone.</p> <pre class=\"ruby\">Time.zone = 'Eastern Time (US &amp; Canada)'    # =&gt; 'Eastern Time (US &amp; Canada)'\nTime.zone.parse(\"2012-5-30\").dst?           # =&gt; true\nTime.zone.parse(\"2012-11-30\").dst?          # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"dst-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 89\ndef dst?\n  period.dst?\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-isdst\">isdst</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encode_with\"> <span class=\"method-name\">encode_with</span><span class=\"method-args\">(coder)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"encode_with-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 163\ndef encode_with(coder)\n  if coder.respond_to?(:represent_object)\n    coder.represent_object(nil, utc)\n  else\n    coder.represent_scalar(nil, utc.strftime(\"%Y-%m-%d %H:%M:%S.%9NZ\"))\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eql-3F\"> <span class=\"method-name\">eql?</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"eql-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 238\ndef eql?(other)\n  utc.eql?(other)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-formatted_offset\"> <span class=\"method-name\">formatted_offset</span><span class=\"method-args\">(colon = true, alternate_utc_string = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a formatted string of the offset from UTC, or an alternative string if the time zone is already UTC.</p> <pre class=\"ruby\">Time.zone = 'Eastern Time (US &amp; Canada)'   # =&gt; \"Eastern Time (US &amp; Canada)\"\nTime.zone.now.formatted_offset(true)       # =&gt; \"-05:00\"\nTime.zone.now.formatted_offset(false)      # =&gt; \"-0500\"\nTime.zone = 'UTC'                          # =&gt; \"UTC\"\nTime.zone.now.formatted_offset(true, \"0\")  # =&gt; \"0\"\n</pre> <div class=\"method-source-code\" id=\"formatted_offset-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 120\ndef formatted_offset(colon = true, alternate_utc_string = nil)\n  utc? &amp;&amp; alternate_utc_string || TimeZone.seconds_to_utc_offset(utc_offset, colon)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-freeze\"> <span class=\"method-name\">freeze</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"freeze-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 339\ndef freeze\n  period; utc; time # preload instance variables before freezing\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-future-3F\"> <span class=\"method-name\">future?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the current object's time is in the future.</p> <div class=\"method-source-code\" id=\"future-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 234\ndef future?\n  utc.future?\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-getgm\"> <span class=\"method-name\">getgm</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-utc\">utc</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-getlocal\"> <span class=\"method-name\">getlocal</span><span class=\"method-args\">(utc_offset = nil)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-localtime\">localtime</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-getutc\"> <span class=\"method-name\">getutc</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-utc\">utc</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-gmt-3F\"> <span class=\"method-name\">gmt?</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-utc-3F\">utc?</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-gmt_offset\"> <span class=\"method-name\">gmt_offset</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-utc_offset\">utc_offset</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-gmtime\"> <span class=\"method-name\">gmtime</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-utc\">utc</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-gmtoff\"> <span class=\"method-name\">gmtoff</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-utc_offset\">utc_offset</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-hash\"> <span class=\"method-name\">hash</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"hash-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 242\ndef hash\n  utc.hash\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-httpdate\"> <span class=\"method-name\">httpdate</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string of the object's date and time in the format used by HTTP requests.</p> <pre class=\"ruby\">Time.zone.now.httpdate  # =&gt; \"Tue, 01 Jan 2013 04:39:43 GMT\"\n</pre> <div class=\"method-source-code\" id=\"httpdate-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 175\ndef httpdate\n  utc.httpdate\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-in_time_zone\"> <span class=\"method-name\">in_time_zone</span><span class=\"method-args\">(new_zone = ::Time.zone)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the simultaneous time in <code>Time.zone</code>, or the specified zone.</p> <div class=\"method-source-code\" id=\"in_time_zone-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 71\ndef in_time_zone(new_zone = ::Time.zone)\n  return self if time_zone == new_zone\n  utc.in_time_zone(new_zone)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 130\ndef inspect\n  \"#{time.strftime('%a, %d %b %Y %H:%M:%S')} #{zone} #{formatted_offset}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-is_a-3F\"> <span class=\"method-name\">is_a?</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Say we're a <a href=\"../time\">Time</a> to thwart type checking.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"is_a-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 334\ndef is_a?(klass)\n  klass == ::Time || super\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-kind_of-3F\">kind_of?</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-isdst\"> <span class=\"method-name\">isdst</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-dst-3F\">dst?</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-iso8601\"> <span class=\"method-name\">iso8601</span><span class=\"method-args\">(fraction_digits = 0)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-xmlschema\">xmlschema</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-kind_of-3F\"> <span class=\"method-name\">kind_of?</span><span class=\"method-args\">(klass)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-is_a-3F\">is_a?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-localtime\"> <span class=\"method-name\">localtime</span><span class=\"method-args\">(utc_offset = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <code>Time.local()</code> instance of the simultaneous time in your system's <code>ENV['TZ']</code> zone.</p> <div class=\"method-source-code\" id=\"localtime-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 78\ndef localtime(utc_offset = nil)\n  utc.respond_to?(:getlocal) ? utc.getlocal(utc_offset) : utc.to_time.getlocal(utc_offset)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-getlocal\">getlocal</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-marshal_dump\"> <span class=\"method-name\">marshal_dump</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"marshal_dump-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 344\ndef marshal_dump\n  [utc, time_zone.name, time]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-marshal_load\"> <span class=\"method-name\">marshal_load</span><span class=\"method-args\">(variables)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"marshal_load-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 348\ndef marshal_load(variables)\n  initialize(variables[0].utc, ::Time.find_zone(variables[1]), variables[2].utc)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method_missing\"> <span class=\"method-name\">method_missing</span><span class=\"method-args\">(sym, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Send the missing method to <code>time</code> instance, and wrap result in a new <a href=\"timewithzone\">TimeWithZone</a> with the existing <code>time_zone</code>.</p> <div class=\"method-source-code\" id=\"method_missing-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 370\ndef method_missing(sym, *args, &amp;block)\n  wrap_with_time_zone time.__send__(sym, *args, &amp;block)\nrescue NoMethodError =&gt; e\n  raise e, e.message.sub(time.inspect, self.inspect), e.backtrace\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-past-3F\"> <span class=\"method-name\">past?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the current object's time is in the past.</p> <div class=\"method-source-code\" id=\"past-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 223\ndef past?\n  utc.past?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-period\"> <span class=\"method-name\">period</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the underlying TZInfo::TimezonePeriod.</p> <div class=\"method-source-code\" id=\"period-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 66\ndef period\n  @period ||= time_zone.period_for_utc(@utc)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to-3F\"> <span class=\"method-name\">respond_to?</span><span class=\"method-args\">(sym, include_priv = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>respond_to_missing? is not called in some cases, such as when type conversion is performed with Kernel#String</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"respond_to-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 354\ndef respond_to?(sym, include_priv = false)\n  # ensure that we're not going to throw and rescue from NoMethodError in method_missing which is slow\n  return false if sym.to_sym == :to_str\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to_missing-3F\"> <span class=\"method-name\">respond_to_missing?</span><span class=\"method-args\">(sym, include_priv)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Ensure proxy class responds to all methods that underlying time instance responds to.</p> <div class=\"method-source-code\" id=\"respond_to_missing-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 362\ndef respond_to_missing?(sym, include_priv)\n  # consistently respond false to acts_like?(:date), regardless of whether #time is a Time or DateTime\n  return false if sym.to_sym == :acts_like_date?\n  time.respond_to?(sym, include_priv)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rfc2822\"> <span class=\"method-name\">rfc2822</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string of the object's date and time in the RFC 2822 standard format.</p> <pre class=\"ruby\">Time.zone.now.rfc2822  # =&gt; \"Tue, 01 Jan 2013 04:51:39 +0000\"\n</pre> <div class=\"method-source-code\" id=\"rfc2822-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 183\ndef rfc2822\n  to_s(:rfc822)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-rfc822\">rfc822</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-rfc822\"> <span class=\"method-name\">rfc822</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-rfc2822\">rfc2822</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-since\"> <span class=\"method-name\">since</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"since-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 270\ndef since(other)\n  # If we're adding a Duration of variable length (i.e., years, months, days), move forward from #time,\n  # otherwise move forward from #utc, for accuracy when moving across DST boundaries\n  if duration_of_variable_length?(other)\n    method_missing(:since, other)\n  else\n    utc.since(other).in_time_zone(time_zone)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-strftime\"> <span class=\"method-name\">strftime</span><span class=\"method-args\">(format)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces <code>%Z</code> directive with +zone before passing to Time#strftime, so that zone information is correct.</p> <div class=\"method-source-code\" id=\"strftime-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 206\ndef strftime(format)\n  format = format.gsub(/((?:\\A|[^%])(?:%%)*)%Z/, \"\\\\1#{zone}\")\n  getlocal(utc_offset).strftime(format)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-time\"> <span class=\"method-name\">time</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../time\">Time</a> or <a href=\"../datetime\">DateTime</a> instance that represents the time in <code>time_zone</code>.</p> <div class=\"method-source-code\" id=\"time-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 52\ndef time\n  @time ||= period.to_local(@utc)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_a\"> <span class=\"method-name\">to_a</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_a-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 302\ndef to_a\n  [time.sec, time.min, time.hour, time.day, time.mon, time.year, time.wday, time.yday, dst?, zone]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_datetime\"> <span class=\"method-name\">to_datetime</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_datetime-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 324\ndef to_datetime\n  utc.to_datetime.new_offset(Rational(utc_offset, 86_400))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_f\"> <span class=\"method-name\">to_f</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_f-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 306\ndef to_f\n  utc.to_f\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_formatted_s\"> <span class=\"method-name\">to_formatted_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_i\"> <span class=\"method-name\">to_i</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_i-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 310\ndef to_i\n  utc.to_i\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-tv_sec\">tv_sec</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_r\"> <span class=\"method-name\">to_r</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_r-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 315\ndef to_r\n  utc.to_r\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">(format = :default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string of the object's date and time. Accepts an optional <code>format</code>:</p> <ul>\n<li> <p><code>:default</code> - default value, mimics Ruby 1.9 <a href=\"../time#method-i-to_s\">Time#to_s</a> format.</p> </li>\n<li> <p><code>:db</code> - format outputs time in UTC :db time. See <a href=\"../time#method-i-to_formatted_s\">Time#to_formatted_s</a>(:db).</p> </li>\n<li> <p>Any key in <code>Time::DATE_FORMATS</code> can be used. See active_support/core_ext/time/conversions.rb.</p> </li>\n</ul> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 193\ndef to_s(format = :default)\n  if format == :db\n    utc.to_s(format)\n  elsif formatter = ::Time::DATE_FORMATS[format]\n    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)\n  else\n    \"#{time.strftime(\"%Y-%m-%d %H:%M:%S\")} #{formatted_offset(false, 'UTC')}\" # mimicking Ruby 1.9 Time#to_s format\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-to_formatted_s\">to_formatted_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_time\"> <span class=\"method-name\">to_time</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return an instance of <a href=\"../time\">Time</a> in the system timezone.</p> <div class=\"method-source-code\" id=\"to_time-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 320\ndef to_time\n  utc.to_time\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-today-3F\"> <span class=\"method-name\">today?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the current object's time falls within the current day.</p> <div class=\"method-source-code\" id=\"today-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 229\ndef today?\n  time.today?\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-tv_sec\"> <span class=\"method-name\">tv_sec</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timewithzone#method-i-to_i\">to_i</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-utc\"> <span class=\"method-name\">utc</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../time\">Time</a> or <a href=\"../datetime\">DateTime</a> instance that represents the time in UTC.</p> <div class=\"method-source-code\" id=\"utc-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 57\ndef utc\n  @utc ||= period.to_utc(@time)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-comparable_time\">comparable_time</a>, <a href=\"timewithzone#method-i-getgm\">getgm</a>, <a href=\"timewithzone#method-i-getutc\">getutc</a>, <a href=\"timewithzone#method-i-gmtime\">gmtime</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-utc-3F\"> <span class=\"method-name\">utc?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the current time zone is set to UTC.</p> <pre class=\"ruby\">Time.zone = 'UTC'                           # =&gt; 'UTC'\nTime.zone.now.utc?                          # =&gt; true\nTime.zone = 'Eastern Time (US &amp; Canada)'    # =&gt; 'Eastern Time (US &amp; Canada)'\nTime.zone.now.utc?                          # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"utc-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 100\ndef utc?\n  time_zone.name == 'UTC'\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-gmt-3F\">gmt?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-utc_offset\"> <span class=\"method-name\">utc_offset</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the offset from current time to UTC time in seconds.</p> <div class=\"method-source-code\" id=\"utc_offset-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 106\ndef utc_offset\n  period.utc_total_offset\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-gmt_offset\">gmt_offset</a>, <a href=\"timewithzone#method-i-gmtoff\">gmtoff</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xmlschema\"> <span class=\"method-name\">xmlschema</span><span class=\"method-args\">(fraction_digits = 0)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"xmlschema-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 134\ndef xmlschema(fraction_digits = 0)\n  fraction = if fraction_digits.to_i &gt; 0\n    (\".%06i\" % time.usec)[0, fraction_digits.to_i + 1]\n  end\n\n  \"#{time.strftime(\"%Y-%m-%dT%H:%M:%S\")}#{fraction}#{formatted_offset(true, 'Z')}\"\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timewithzone#method-i-iso8601\">iso8601</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-zone\"> <span class=\"method-name\">zone</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"../time\">Time</a> uses <code>zone</code> to display the time zone abbreviation, so we're duck-typing it.</p> <div class=\"method-source-code\" id=\"zone-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/time_with_zone.rb, line 126\ndef zone\n  period.zone_identifier.to_s\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","activesupport/timezone":"<h1 id=\"class-ActiveSupport::TimeZone\" class=\"class\"> class ActiveSupport::TimeZone </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n\n</dl> <section class=\"description\"> <p>The <a href=\"timezone\">TimeZone</a> class serves as a wrapper around TZInfo::Timezone instances. It allows us to do the following:</p> <ul>\n<li> <p>Limit the set of zones provided by TZInfo to a meaningful subset of 146 zones.</p> </li>\n<li> <p>Retrieve and display zones with a friendlier name (e.g., “Eastern <a href=\"../time\">Time</a> (US &amp; Canada)” instead of “America/New_York”).</p> </li>\n<li> <p>Lazily load TZInfo::Timezone instances only when they're needed.</p> </li>\n<li> <p>Create <a href=\"timewithzone\">ActiveSupport::TimeWithZone</a> instances via TimeZone's <code>local</code>, <code>parse</code>, <code>at</code> and <code>now</code> methods.</p> </li>\n</ul> <p>If you set <code>config.time_zone</code> in the Rails Application, you can access this <a href=\"timezone\">TimeZone</a> object via <code>Time.zone</code>:</p> <pre class=\"ruby\"># application.rb:\nclass Application &lt; Rails::Application\n  config.time_zone = 'Eastern Time (US &amp; Canada)'\nend\n\nTime.zone      # =&gt; #&lt;TimeZone:0x514834...&gt;\nTime.zone.name # =&gt; \"Eastern Time (US &amp; Canada)\"\nTime.zone.now  # =&gt; Sun, 18 May 2008 14:30:44 EDT -04:00\n</pre> <p>The version of TZInfo bundled with Active Support only includes the definitions necessary to support the zones defined by the <a href=\"timezone\">TimeZone</a> class. If you need to use zones that aren't defined by <a href=\"timezone\">TimeZone</a>, you'll need to install the TZInfo gem (if a recent version of the gem is installed locally, this will be used instead of the bundled version.)</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"MAPPING\">MAPPING </dt>\n<dd>\n<p>Keys are Rails <a href=\"timezone\">TimeZone</a> names, values are TZInfo identifiers.</p> </dd>\n<dt id=\"UTC_OFFSET_WITHOUT_COLON\">UTC_OFFSET_WITHOUT_COLON </dt>\n\n<dt id=\"UTC_OFFSET_WITH_COLON\">UTC_OFFSET_WITH_COLON </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-name\"> <span class=\"method-name\">name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-tzinfo\"> <span class=\"method-name\">tzinfo</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(arg)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Locate a specific time zone object. If the argument is a string, it is interpreted to mean the name of the timezone to locate. If it is a numeric value it is either the hour offset, or the second offset, of the timezone to find. (The first one with that offset will be returned.) Returns <code>nil</code> if no such time zone is known to the system.</p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 239\ndef [](arg)\n  case arg\n    when String\n    begin\n      @lazy_zones_map[arg] ||= create(arg).tap { |tz| tz.utc_offset }\n    rescue TZInfo::InvalidTimezoneIdentifier\n      nil\n    end\n    when Numeric, ActiveSupport::Duration\n      arg *= 3600 if arg.abs &lt;= 13\n      all.find { |z| z.utc_offset == arg.to_i }\n    else\n      raise ArgumentError, \"invalid argument to TimeZone[]: #{arg.inspect}\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-all\"> <span class=\"method-name\">all</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of all <a href=\"timezone\">TimeZone</a> objects. There are multiple <a href=\"timezone\">TimeZone</a> objects per time zone, in many cases, to make it easier for users to find their own time zone.</p> <div class=\"method-source-code\" id=\"all-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 223\ndef all\n  @zones ||= zones_map.values.sort\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-c-create\"> <span class=\"method-name\">create</span><span class=\"method-args\">(name)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"timezone#method-c-new\">new</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-find_tzinfo\"> <span class=\"method-name\">find_tzinfo</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_tzinfo-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 207\ndef find_tzinfo(name)\n  TZInfo::TimezoneProxy.new(MAPPING[name] || name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"timezone\">TimeZone</a> instance with the given name, or <code>nil</code> if no such <a href=\"timezone\">TimeZone</a> instance exists. (This exists to support the use of this class with the <code>composed_of</code> macro.)</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 216\ndef new(name)\n  self[name]\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"timezone#method-c-create\">create</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(name, utc_offset = nil, tzinfo = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"timezone\">TimeZone</a> object with the given name and offset. The offset is the number of seconds that this time zone is offset from UTC (GMT). Seconds were chosen as the offset unit because that is the unit that Ruby uses to represent time zone offsets (see Time#utc_offset).</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 270\ndef initialize(name, utc_offset = nil, tzinfo = nil)\n  @name = name\n  @utc_offset = utc_offset\n  @tzinfo = tzinfo || TimeZone.find_tzinfo(name)\n  @current_period = nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-seconds_to_utc_offset\"> <span class=\"method-name\">seconds_to_utc_offset</span><span class=\"method-args\">(seconds, colon = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Assumes self represents an offset from UTC in seconds (as returned from Time#utc_offset) and turns this into an +HH:MM formatted string.</p> <pre class=\"ruby\">TimeZone.seconds_to_utc_offset(-21_600) # =&gt; \"-06:00\"\n</pre> <div class=\"method-source-code\" id=\"seconds_to_utc_offset-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 199\ndef seconds_to_utc_offset(seconds, colon = true)\n  format = colon ? UTC_OFFSET_WITH_COLON : UTC_OFFSET_WITHOUT_COLON\n  sign = (seconds &lt; 0 ? '-' : '+')\n  hours = seconds.abs / 3600\n  minutes = (seconds.abs % 3600) / 60\n  format % [sign, hours, minutes]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-us_zones\"> <span class=\"method-name\">us_zones</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A convenience method for returning a collection of <a href=\"timezone\">TimeZone</a> objects for time zones in the USA.</p> <div class=\"method-source-code\" id=\"us_zones-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 257\ndef us_zones\n  @us_zones ||= all.find_all { |z| z.name =~ /US|Arizona|Indiana|Hawaii|Alaska/ }\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3D-3E\"> <span class=\"method-name\">&lt;=&gt;</span><span class=\"method-args\">(zone)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Compare this time zone to the parameter. The two are compared first on their offsets, and then by name.</p> <div class=\"method-source-code\" id=\"3C-3D-3E-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 295\ndef &lt;=&gt;(zone)\n  return unless zone.respond_to? :utc_offset\n  result = (utc_offset &lt;=&gt; zone.utc_offset)\n  result = (name &lt;=&gt; zone.name) if result == 0\n  result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-7E\"> <span class=\"method-name\">=~</span><span class=\"method-args\">(re)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Compare <a href=\"timezone#attribute-i-name\">name</a> and TZInfo identifier to a supplied regexp, returning <code>true</code> if a match is found.</p> <div class=\"method-source-code\" id=\"3D-7E-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 304\ndef =~(re)\n  re === name || re === MAPPING[name]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-at\"> <span class=\"method-name\">at</span><span class=\"method-args\">(secs)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"../method\">Method</a> for creating new <a href=\"timewithzone\">ActiveSupport::TimeWithZone</a> instance in time zone of <code>self</code> from number of seconds since the Unix epoch.</p> <pre class=\"ruby\">Time.zone = 'Hawaii'        # =&gt; \"Hawaii\"\nTime.utc(2000).to_f         # =&gt; 946684800.0\nTime.zone.at(946684800.0)   # =&gt; Fri, 31 Dec 1999 14:00:00 HST -10:00\n</pre> <div class=\"method-source-code\" id=\"at-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 329\ndef at(secs)\n  Time.at(secs).utc.in_time_zone(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-formatted_offset\"> <span class=\"method-name\">formatted_offset</span><span class=\"method-args\">(colon=true, alternate_utc_string = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the offset of this time zone as a formatted string, of the format “+HH:MM”.</p> <div class=\"method-source-code\" id=\"formatted_offset-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 289\ndef formatted_offset(colon=true, alternate_utc_string = nil)\n  utc_offset == 0 &amp;&amp; alternate_utc_string || self.class.seconds_to_utc_offset(utc_offset, colon)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-local\"> <span class=\"method-name\">local</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"../method\">Method</a> for creating new <a href=\"timewithzone\">ActiveSupport::TimeWithZone</a> instance in time zone of <code>self</code> from given values.</p> <pre class=\"ruby\">Time.zone = 'Hawaii'                    # =&gt; \"Hawaii\"\nTime.zone.local(2007, 2, 1, 15, 30, 45) # =&gt; Thu, 01 Feb 2007 15:30:45 HST -10:00\n</pre> <div class=\"method-source-code\" id=\"local-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 318\ndef local(*args)\n  time = Time.utc(*args)\n  ActiveSupport::TimeWithZone.new(nil, self, time)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-local_to_utc\"> <span class=\"method-name\">local_to_utc</span><span class=\"method-args\">(time, dst=true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc() instance.</p> <div class=\"method-source-code\" id=\"local_to_utc-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 403\ndef local_to_utc(time, dst=true)\n  tzinfo.local_to_utc(time, dst)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-now\"> <span class=\"method-name\">now</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an <a href=\"timewithzone\">ActiveSupport::TimeWithZone</a> instance representing the current time in the time zone represented by <code>self</code>.</p> <pre class=\"ruby\">Time.zone = 'Hawaii'  # =&gt; \"Hawaii\"\nTime.zone.now         # =&gt; Wed, 23 Jan 2008 20:24:27 HST -10:00\n</pre> <div class=\"method-source-code\" id=\"now-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 375\ndef now\n  time_now.utc.in_time_zone(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(str, now=now())</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"../method\">Method</a> for creating new <a href=\"timewithzone\">ActiveSupport::TimeWithZone</a> instance in time zone of <code>self</code> from parsed string.</p> <pre class=\"ruby\">Time.zone = 'Hawaii'                   # =&gt; \"Hawaii\"\nTime.zone.parse('1999-12-31 14:00:00') # =&gt; Fri, 31 Dec 1999 14:00:00 HST -10:00\n</pre> <p>If upper components are missing from the string, they are supplied from <a href=\"timezone#method-i-now\">#now</a>:</p> <pre class=\"ruby\">Time.zone.now               # =&gt; Fri, 31 Dec 1999 14:00:00 HST -10:00\nTime.zone.parse('22:30:00') # =&gt; Fri, 31 Dec 1999 22:30:00 HST -10:00\n</pre> <p>However, if the date component is not provided, but any other upper components are supplied, then the day of the month defaults to 1:</p> <pre class=\"ruby\">Time.zone.parse('Mar 2000') # =&gt; Wed, 01 Mar 2000 00:00:00 HST -10:00\n</pre> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 349\ndef parse(str, now=now())\n  parts = Date._parse(str, false)\n  return if parts.empty?\n\n  time = Time.new(\n    parts.fetch(:year, now.year),\n    parts.fetch(:mon, now.month),\n    parts.fetch(:mday, parts[:year] || parts[:mon] ? 1 : now.day),\n    parts.fetch(:hour, 0),\n    parts.fetch(:min, 0),\n    parts.fetch(:sec, 0) + parts.fetch(:sec_fraction, 0),\n    parts.fetch(:offset, 0)\n  )\n\n  if parts[:offset]\n    TimeWithZone.new(time.utc, self)\n  else\n    TimeWithZone.new(nil, self, time)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-period_for_local\"> <span class=\"method-name\">period_for_local</span><span class=\"method-args\">(time, dst=true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Available so that <a href=\"timezone\">TimeZone</a> instances respond like TZInfo::Timezone instances.</p> <div class=\"method-source-code\" id=\"period_for_local-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 415\ndef period_for_local(time, dst=true)\n  tzinfo.period_for_local(time, dst)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-period_for_utc\"> <span class=\"method-name\">period_for_utc</span><span class=\"method-args\">(time)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Available so that <a href=\"timezone\">TimeZone</a> instances respond like TZInfo::Timezone instances.</p> <div class=\"method-source-code\" id=\"period_for_utc-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 409\ndef period_for_utc(time)\n  tzinfo.period_for_utc(time)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a textual representation of this time zone.</p> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 309\ndef to_s\n  \"(GMT#{formatted_offset}) #{name}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-today\"> <span class=\"method-name\">today</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return the current date in this time zone.</p> <div class=\"method-source-code\" id=\"today-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 380\ndef today\n  tzinfo.now.to_date\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tomorrow\"> <span class=\"method-name\">tomorrow</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the next date in this time zone.</p> <div class=\"method-source-code\" id=\"tomorrow-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 385\ndef tomorrow\n  today + 1\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-utc_offset\"> <span class=\"method-name\">utc_offset</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the offset of this time zone from UTC in seconds.</p> <div class=\"method-source-code\" id=\"utc_offset-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 278\ndef utc_offset\n  if @utc_offset\n    @utc_offset\n  else\n    @current_period ||= tzinfo.current_period if tzinfo\n    @current_period.utc_offset if @current_period\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-utc_to_local\"> <span class=\"method-name\">utc_to_local</span><span class=\"method-args\">(time)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adjust the given time to the simultaneous time in the time zone represented by <code>self</code>. Returns a Time.utc() instance – if you want an <a href=\"timewithzone\">ActiveSupport::TimeWithZone</a> instance, use <a href=\"../dateandtime/zones#method-i-in_time_zone\">DateAndTime::Zones#in_time_zone</a> instead.</p> <div class=\"method-source-code\" id=\"utc_to_local-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 397\ndef utc_to_local(time)\n  tzinfo.utc_to_local(time)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-yesterday\"> <span class=\"method-name\">yesterday</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the previous date in this time zone.</p> <div class=\"method-source-code\" id=\"yesterday-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/values/time_zone.rb, line 390\ndef yesterday\n  today - 1\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","array":"<h1 id=\"class-Array\" class=\"class\"> class Array </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-wrap\"> <span class=\"method-name\">wrap</span><span class=\"method-args\">(object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps its argument in an array unless it is already an array (or array-like).</p> <p>Specifically:</p> <ul>\n<li> <p>If the argument is <code>nil</code> an empty list is returned.</p> </li>\n<li> <p>Otherwise, if the argument responds to <code>to_ary</code> it is invoked, and its result returned.</p> </li>\n<li> <p>Otherwise, returns an array with the argument as its single element.</p> <pre class=\"ruby\">Array.wrap(nil)       # =&gt; []\nArray.wrap([1, 2, 3]) # =&gt; [1, 2, 3]\nArray.wrap(0)         # =&gt; [0]\n</pre> </li>\n</ul> <p>This method is similar in purpose to <code>Kernel#Array</code>, but there are some differences:</p> <ul>\n<li> <p>If the argument responds to <code>to_ary</code> the method is invoked. <code>Kernel#Array</code> moves on to try <code>to_a</code> if the returned value is <code>nil</code>, but <code>Array.wrap</code> returns <code>nil</code> right away.</p> </li>\n<li> <p>If the returned value from <code>to_ary</code> is neither <code>nil</code> nor an <code>Array</code> object, <code>Kernel#Array</code> raises an exception, while <code>Array.wrap</code> does not, it just returns the value.</p> </li>\n<li> <p>It does not call <code>to_a</code> on the argument, but returns an empty array if argument is <code>nil</code>.</p> </li>\n</ul> <p>The second point is easily explained with some enumerables:</p> <pre class=\"ruby\">Array(foo: :bar)      # =&gt; [[:foo, :bar]]\nArray.wrap(foo: :bar) # =&gt; [{:foo=&gt;:bar}]\n</pre> <p>There's also a related idiom that uses the splat operator:</p> <pre class=\"ruby\">[*object]\n</pre> <p>which returns <code>[]</code> for <code>nil</code>, but calls to <code>Array(object)</code> otherwise.</p> <p>The differences with <code>Kernel#Array</code> explained above apply to the rest of <code>object</code>s.</p> <div class=\"method-source-code\" id=\"wrap-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/wrap.rb, line 36\ndef self.wrap(object)\n  if object.nil?\n    []\n  elsif object.respond_to?(:to_ary)\n    object.to_ary || [object]\n  else\n    [object]\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_dup\"> <span class=\"method-name\">deep_dup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a deep copy of array.</p> <pre class=\"ruby\">array = [1, [2, 3]]\ndup   = array.deep_dup\ndup[1][2] = 4\n\narray[1][2] # =&gt; nil\ndup[1][2]   # =&gt; 4\n</pre> <div class=\"method-source-code\" id=\"deep_dup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/deep_dup.rb, line 27\ndef deep_dup\n  map { |it| it.deep_dup }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extract_options-21\"> <span class=\"method-name\">extract_options!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Extracts options from a set of arguments. Removes and returns the last element in the array if it's a hash, otherwise returns a blank hash.</p> <pre class=\"ruby\">def options(*args)\n  args.extract_options!\nend\n\noptions(1, 2)        # =&gt; {}\noptions(1, 2, a: :b) # =&gt; {:a=&gt;:b}\n</pre> <div class=\"method-source-code\" id=\"extract_options-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/extract_options.rb, line 22\ndef extract_options!\n  if last.is_a?(Hash) &amp;&amp; last.extractable_options?\n    pop\n  else\n    {}\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fifth\"> <span class=\"method-name\">fifth</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equal to <code>self[4]</code>.</p> <pre class=\"ruby\">%w( a b c d e ).fifth # =&gt; \"e\"\n</pre> <div class=\"method-source-code\" id=\"fifth-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/access.rb, line 54\ndef fifth\n  self[4]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-forty_two\"> <span class=\"method-name\">forty_two</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.</p> <pre class=\"ruby\">(1..42).to_a.forty_two # =&gt; 42\n</pre> <div class=\"method-source-code\" id=\"forty_two-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/access.rb, line 61\ndef forty_two\n  self[41]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fourth\"> <span class=\"method-name\">fourth</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equal to <code>self[3]</code>.</p> <pre class=\"ruby\">%w( a b c d e ).fourth # =&gt; \"d\"\n</pre> <div class=\"method-source-code\" id=\"fourth-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/access.rb, line 47\ndef fourth\n  self[3]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-from\"> <span class=\"method-name\">from</span><span class=\"method-args\">(position)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the tail of the array from <code>position</code>.</p> <pre class=\"ruby\">%w( a b c d ).from(0)  # =&gt; [\"a\", \"b\", \"c\", \"d\"]\n%w( a b c d ).from(2)  # =&gt; [\"c\", \"d\"]\n%w( a b c d ).from(10) # =&gt; []\n%w().from(0)           # =&gt; []\n%w( a b c d ).from(-2) # =&gt; [\"c\", \"d\"]\n%w( a b c ).from(-10)  # =&gt; []\n</pre> <div class=\"method-source-code\" id=\"from-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/access.rb, line 10\ndef from(position)\n  self[position, length] || []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-in_groups\"> <span class=\"method-name\">in_groups</span><span class=\"method-args\">(number, fill_with = nil) { |g| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Splits or iterates over the array in <code>number</code> of groups, padding any remaining slots with <code>fill_with</code> unless it is <code>false</code>.</p> <pre class=\"ruby\">%w(1 2 3 4 5 6 7 8 9 10).in_groups(3) {|group| p group}\n[\"1\", \"2\", \"3\", \"4\"]\n[\"5\", \"6\", \"7\", nil]\n[\"8\", \"9\", \"10\", nil]\n\n%w(1 2 3 4 5 6 7 8 9 10).in_groups(3, '&amp;nbsp;') {|group| p group}\n[\"1\", \"2\", \"3\", \"4\"]\n[\"5\", \"6\", \"7\", \"&amp;nbsp;\"]\n[\"8\", \"9\", \"10\", \"&amp;nbsp;\"]\n\n%w(1 2 3 4 5 6 7).in_groups(3, false) {|group| p group}\n[\"1\", \"2\", \"3\"]\n[\"4\", \"5\"]\n[\"6\", \"7\"]\n</pre> <div class=\"method-source-code\" id=\"in_groups-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/grouping.rb, line 60\ndef in_groups(number, fill_with = nil)\n  # size.div number gives minor group size;\n  # size % number gives how many objects need extra accommodation;\n  # each group hold either division or division + 1 items.\n  division = size.div number\n  modulo = size % number\n\n  # create a new array avoiding dup\n  groups = []\n  start = 0\n\n  number.times do |index|\n    length = division + (modulo &gt; 0 &amp;&amp; modulo &gt; index ? 1 : 0)\n    groups &lt;&lt; last_group = slice(start, length)\n    last_group &lt;&lt; fill_with if fill_with != false &amp;&amp;\n      modulo &gt; 0 &amp;&amp; length == division\n    start += length\n  end\n\n  if block_given?\n    groups.each { |g| yield(g) }\n  else\n    groups\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-in_groups_of\"> <span class=\"method-name\">in_groups_of</span><span class=\"method-args\">(number, fill_with = nil) { |slice| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Splits or iterates over the array in groups of size <code>number</code>, padding any remaining slots with <code>fill_with</code> unless it is <code>false</code>.</p> <pre class=\"ruby\">%w(1 2 3 4 5 6 7 8 9 10).in_groups_of(3) {|group| p group}\n[\"1\", \"2\", \"3\"]\n[\"4\", \"5\", \"6\"]\n[\"7\", \"8\", \"9\"]\n[\"10\", nil, nil]\n\n%w(1 2 3 4 5).in_groups_of(2, '&amp;nbsp;') {|group| p group}\n[\"1\", \"2\"]\n[\"3\", \"4\"]\n[\"5\", \"&amp;nbsp;\"]\n\n%w(1 2 3 4 5).in_groups_of(2, false) {|group| p group}\n[\"1\", \"2\"]\n[\"3\", \"4\"]\n[\"5\"]\n</pre> <div class=\"method-source-code\" id=\"in_groups_of-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/grouping.rb, line 20\ndef in_groups_of(number, fill_with = nil)\n  if number.to_i &lt;= 0\n    raise ArgumentError,\n      \"Group size must be a positive integer, was #{number.inspect}\"\n  end\n\n  if fill_with == false\n    collection = self\n  else\n    # size % number gives how many extra we have;\n    # subtracting from number gives how many to add;\n    # modulo number ensures we don't add group of just fill.\n    padding = (number - size % number) % number\n    collection = dup.concat(Array.new(padding, fill_with))\n  end\n\n  if block_given?\n    collection.each_slice(number) { |slice| yield(slice) }\n  else\n    collection.each_slice(number).to_a\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-second\"> <span class=\"method-name\">second</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equal to <code>self[1]</code>.</p> <pre class=\"ruby\">%w( a b c d e ).second # =&gt; \"b\"\n</pre> <div class=\"method-source-code\" id=\"second-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/access.rb, line 33\ndef second\n  self[1]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-split\"> <span class=\"method-name\">split</span><span class=\"method-args\">(value = nil) { |element| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Divides the array into one or more subarrays based on a delimiting <code>value</code> or the result of an optional block.</p> <pre class=\"ruby\">[1, 2, 3, 4, 5].split(3)              # =&gt; [[1, 2], [4, 5]]\n(1..10).to_a.split { |i| i % 3 == 0 } # =&gt; [[1, 2], [4, 5], [7, 8], [10]]\n</pre> <div class=\"method-source-code\" id=\"split-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/grouping.rb, line 91\ndef split(value = nil)\n  if block_given?\n    inject([[]]) do |results, element|\n      if yield(element)\n        results &lt;&lt; []\n      else\n        results.last &lt;&lt; element\n      end\n\n      results\n    end\n  else\n    results, arr = [[]], self.dup\n    until arr.empty?\n      if (idx = arr.index(value))\n        results.last.concat(arr.shift(idx))\n        arr.shift\n        results &lt;&lt; []\n      else\n        results.last.concat(arr.shift(arr.size))\n      end\n    end\n    results\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-third\"> <span class=\"method-name\">third</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equal to <code>self[2]</code>.</p> <pre class=\"ruby\">%w( a b c d e ).third # =&gt; \"c\"\n</pre> <div class=\"method-source-code\" id=\"third-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/access.rb, line 40\ndef third\n  self[2]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to\"> <span class=\"method-name\">to</span><span class=\"method-args\">(position)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the beginning of the array up to <code>position</code>.</p> <pre class=\"ruby\">%w( a b c d ).to(0)  # =&gt; [\"a\"]\n%w( a b c d ).to(2)  # =&gt; [\"a\", \"b\", \"c\"]\n%w( a b c d ).to(10) # =&gt; [\"a\", \"b\", \"c\", \"d\"]\n%w().to(0)           # =&gt; []\n%w( a b c d ).to(-2) # =&gt; [\"a\", \"b\", \"c\"]\n%w( a b c ).to(-10)  # =&gt; []\n</pre> <div class=\"method-source-code\" id=\"to-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/access.rb, line 22\ndef to(position)\n  if position &gt;= 0\n    first position + 1\n  else\n    self[0..position]\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_default_s\"> <span class=\"method-name\">to_default_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"array#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_formatted_s\"> <span class=\"method-name\">to_formatted_s</span><span class=\"method-args\">(format = :default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Extends <code>Array#to_s</code> to convert a collection of elements into a comma separated id list if <code>:db</code> argument is given as the format.</p> <pre class=\"ruby\">Blog.all.to_formatted_s(:db) # =&gt; \"1,2,3\"\n</pre> <div class=\"method-source-code\" id=\"to_formatted_s-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/conversions.rb, line 89\ndef to_formatted_s(format = :default)\n  case format\n  when :db\n    if empty?\n      'null'\n    else\n      collect { |element| element.id }.join(',')\n    end\n  else\n    to_default_s\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"array#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_param\"> <span class=\"method-name\">to_param</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calls <code>to_param</code> on all its elements and joins the result with slashes. This is used by <code>url_for</code> in Action Pack.</p> <div class=\"method-source-code\" id=\"to_param-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/to_query.rb, line 40\ndef to_param\n  collect { |e| e.to_param }.join '/'\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_query\"> <span class=\"method-name\">to_query</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts an array into a string suitable for use as a URL query string, using the given <code>key</code> as the param name.</p> <pre class=\"ruby\">['Rails', 'coding'].to_query('hobbies') # =&gt; \"hobbies%5B%5D=Rails&amp;hobbies%5B%5D=coding\"\n</pre> <div class=\"method-source-code\" id=\"to_query-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/to_query.rb, line 48\ndef to_query(key)\n  prefix = \"#{key}[]\"\n\n  if empty?\n    nil.to_query(prefix)\n  else\n    collect { |value| value.to_query(prefix) }.join '&amp;'\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"array#method-i-to_default_s\">to_default_s</a> </div> <div class=\"aliases\"> Alias for: <a href=\"array#method-i-to_formatted_s\">to_formatted_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_sentence\"> <span class=\"method-name\">to_sentence</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts the array to a comma-separated sentence where the last element is joined by the connector word.</p> <p>You can pass the following options to change the default behavior. If you pass an option key that doesn't exist in the list below, it will raise an <code>ArgumentError</code>.</p> <h4 id=\"method-i-to_sentence-label-Options\">Options</h4> <ul>\n<li> <p><code>:words_connector</code> - The sign or word used to join the elements in arrays with two or more elements (default: “, ”).</p> </li>\n<li> <p><code>:two_words_connector</code> - The sign or word used to join the elements in arrays with two elements (default: “ and ”).</p> </li>\n<li> <p><code>:last_word_connector</code> - The sign or word used to join the last element in arrays with three or more elements (default: “, and ”).</p> </li>\n<li> <p><code>:locale</code> - If <code>i18n</code> is available, you can set a locale and use the connector options defined on the 'support.array' namespace in the corresponding dictionary file.</p> </li>\n</ul> <h4 id=\"method-i-to_sentence-label-Examples\">Examples</h4> <pre class=\"ruby\">[].to_sentence                      # =&gt; \"\"\n['one'].to_sentence                 # =&gt; \"one\"\n['one', 'two'].to_sentence          # =&gt; \"one and two\"\n['one', 'two', 'three'].to_sentence # =&gt; \"one, two, and three\"\n\n['one', 'two'].to_sentence(passing: 'invalid option')\n# =&gt; ArgumentError: Unknown key :passing\n\n['one', 'two'].to_sentence(two_words_connector: '-')\n# =&gt; \"one-two\"\n\n['one', 'two', 'three'].to_sentence(words_connector: ' or ', last_word_connector: ' or at least ')\n# =&gt; \"one or two or at least three\"\n</pre> <p>Using <code>:locale</code> option:</p> <pre class=\"ruby\"># Given this locale dictionary:\n#\n#   es:\n#     support:\n#       array:\n#         words_connector: \" o \"\n#         two_words_connector: \" y \"\n#         last_word_connector: \" o al menos \"\n\n['uno', 'dos'].to_sentence(locale: :es)\n# =&gt; \"uno y dos\"\n\n['uno', 'dos', 'tres'].to_sentence(locale: :es)\n# =&gt; \"uno o dos o al menos tres\"\n</pre> <div class=\"method-source-code\" id=\"to_sentence-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/conversions.rb, line 59\ndef to_sentence(options = {})\n  options.assert_valid_keys(:words_connector, :two_words_connector, :last_word_connector, :locale)\n\n  default_connectors = {\n    :words_connector     =&gt; ', ',\n    :two_words_connector =&gt; ' and ',\n    :last_word_connector =&gt; ', and '\n  }\n  if defined?(I18n)\n    i18n_connectors = I18n.translate(:'support.array', locale: options[:locale], default: {})\n    default_connectors.merge!(i18n_connectors)\n  end\n  options = default_connectors.merge!(options)\n\n  case length\n  when 0\n    ''\n  when 1\n    self[0].to_s.dup\n  when 2\n    \"#{self[0]}#{options[:two_words_connector]}#{self[1]}\"\n  else\n    \"#{self[0...-1].join(options[:words_connector])}#{options[:last_word_connector]}#{self[-1]}\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xml\"> <span class=\"method-name\">to_xml</span><span class=\"method-args\">(options = {}) { |builder| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string that represents the array in XML by invoking <code>to_xml</code> on each element. Active Record collections delegate their representation in XML to this method.</p> <p>All elements are expected to respond to <code>to_xml</code>, if any of them does not then an exception is raised.</p> <p>The root node reflects the class name of the first element in plural if all elements belong to the same type and that's not Hash:</p> <pre>customer.projects.to_xml\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;projects type=\"array\"&gt;\n  &lt;project&gt;\n    &lt;amount type=\"decimal\"&gt;20000.0&lt;/amount&gt;\n    &lt;customer-id type=\"integer\"&gt;1567&lt;/customer-id&gt;\n    &lt;deal-date type=\"date\"&gt;2008-04-09&lt;/deal-date&gt;\n    ...\n  &lt;/project&gt;\n  &lt;project&gt;\n    &lt;amount type=\"decimal\"&gt;57230.0&lt;/amount&gt;\n    &lt;customer-id type=\"integer\"&gt;1567&lt;/customer-id&gt;\n    &lt;deal-date type=\"date\"&gt;2008-04-15&lt;/deal-date&gt;\n    ...\n  &lt;/project&gt;\n&lt;/projects&gt;</pre> <p>Otherwise the root element is “objects”:</p> <pre>[{ foo: 1, bar: 2}, { baz: 3}].to_xml\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;objects type=\"array\"&gt;\n  &lt;object&gt;\n    &lt;bar type=\"integer\"&gt;2&lt;/bar&gt;\n    &lt;foo type=\"integer\"&gt;1&lt;/foo&gt;\n  &lt;/object&gt;\n  &lt;object&gt;\n    &lt;baz type=\"integer\"&gt;3&lt;/baz&gt;\n  &lt;/object&gt;\n&lt;/objects&gt;</pre> <p>If the collection is empty the root element is “nil-classes” by default:</p> <pre>[].to_xml\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;nil-classes type=\"array\"/&gt;</pre> <p>To ensure a meaningful root element use the <code>:root</code> option:</p> <pre>customer_with_no_projects.projects.to_xml(root: 'projects')\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;projects type=\"array\"/&gt;</pre> <p>By default name of the node for the children of root is <code>root.singularize</code>. You can change it with the <code>:children</code> option.</p> <p>The <code>options</code> hash is passed downwards:</p> <pre>Message.all.to_xml(skip_types: true)\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;messages&gt;\n  &lt;message&gt;\n    &lt;created-at&gt;2008-03-07T09:58:18+01:00&lt;/created-at&gt;\n    &lt;id&gt;1&lt;/id&gt;\n    &lt;name&gt;1&lt;/name&gt;\n    &lt;updated-at&gt;2008-03-07T09:58:18+01:00&lt;/updated-at&gt;\n    &lt;user-id&gt;1&lt;/user-id&gt;\n  &lt;/message&gt;\n&lt;/messages&gt;</pre> <div class=\"method-source-code\" id=\"to_xml-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/conversions.rb, line 179\ndef to_xml(options = {})\n  require 'active_support/builder' unless defined?(Builder)\n\n  options = options.dup\n  options[:indent]  ||= 2\n  options[:builder] ||= Builder::XmlMarkup.new(indent: options[:indent])\n  options[:root]    ||=        if first.class != Hash &amp;&amp; all? { |e| e.is_a?(first.class) }\n      underscored = ActiveSupport::Inflector.underscore(first.class.name)\n      ActiveSupport::Inflector.pluralize(underscored).tr('/', '_')\n    else\n      'objects'\n    end\n\n  builder = options[:builder]\n  builder.instruct! unless options.delete(:skip_instruct)\n\n  root = ActiveSupport::XmlMini.rename_key(options[:root].to_s, options)\n  children = options.delete(:children) || root.singularize\n  attributes = options[:skip_types] ? {} : { type: 'array' }\n\n  if empty?\n    builder.tag!(root, attributes)\n  else\n    builder.tag!(root, attributes) do\n      each { |value| ActiveSupport::XmlMini.to_tag(children, value, options) }\n      yield builder if block_given?\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","benchmark":"<h1 id=\"module-Benchmark\" class=\"module\"> module Benchmark </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-ms\"> <span class=\"method-name\">ms</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"benchmark\">Benchmark</a> realtime in milliseconds.</p> <pre class=\"ruby\">Benchmark.realtime { User.all }\n# =&gt; 8.0e-05\n\nBenchmark.ms { User.all }\n# =&gt; 0.074\n</pre> <div class=\"method-source-code\" id=\"ms-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/benchmark.rb, line 11\ndef ms\n  1000 * realtime { yield }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","class":"<h1 id=\"class-Class\" class=\"class\"> class Class </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-class_attribute\"> <span class=\"method-name\">class_attribute</span><span class=\"method-args\">(*attrs)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declare a class-level attribute whose value is inheritable by subclasses. Subclasses can change their own value and it will not impact parent class.</p> <pre class=\"ruby\">class Base\n  class_attribute :setting\nend\n\nclass Subclass &lt; Base\nend\n\nBase.setting = true\nSubclass.setting            # =&gt; true\nSubclass.setting = false\nSubclass.setting            # =&gt; false\nBase.setting                # =&gt; true\n</pre> <p>In the above case as long as Subclass does not assign a value to setting by performing <code>Subclass.setting = <em>something</em> </code>, <code>Subclass.setting</code> would read value assigned to parent class. Once Subclass assigns a value then the value assigned by Subclass would be returned.</p> <p>This matches normal Ruby method inheritance: think of writing an attribute on a subclass as overriding the reader method. However, you need to be aware when using <code>class_attribute</code> with mutable structures as <code>Array</code> or <code>Hash</code>. In such cases, you don't want to do changes in places but use setters:</p> <pre class=\"ruby\">Base.setting = []\nBase.setting                # =&gt; []\nSubclass.setting            # =&gt; []\n\n# Appending in child changes both parent and child because it is the same object:\nSubclass.setting &lt;&lt; :foo\nBase.setting               # =&gt; [:foo]\nSubclass.setting           # =&gt; [:foo]\n\n# Use setters to not propagate changes:\nBase.setting = []\nSubclass.setting += [:foo]\nBase.setting               # =&gt; []\nSubclass.setting           # =&gt; [:foo]\n</pre> <p>For convenience, an instance predicate method is defined as well. To skip it, pass <code>instance_predicate: false</code>.</p> <pre class=\"ruby\">Subclass.setting?       # =&gt; false\n</pre> <p>Instances may overwrite the class value in the same way:</p> <pre class=\"ruby\">Base.setting = true\nobject = Base.new\nobject.setting          # =&gt; true\nobject.setting = false\nobject.setting          # =&gt; false\nBase.setting            # =&gt; true\n</pre> <p>To opt out of the instance reader method, pass <code>instance_reader:\nfalse</code>.</p> <pre class=\"ruby\">object.setting          # =&gt; NoMethodError\nobject.setting?         # =&gt; NoMethodError\n</pre> <p>To opt out of the instance writer method, pass <code>instance_writer:\nfalse</code>.</p> <pre class=\"ruby\">object.setting = false  # =&gt; NoMethodError\n</pre> <p>To opt out of both instance methods, pass <code>instance_accessor:\nfalse</code>.</p> <div class=\"method-source-code\" id=\"class_attribute-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/class/attribute.rb, line 71\ndef class_attribute(*attrs)\n  options = attrs.extract_options!\n  instance_reader = options.fetch(:instance_accessor, true) &amp;&amp; options.fetch(:instance_reader, true)\n  instance_writer = options.fetch(:instance_accessor, true) &amp;&amp; options.fetch(:instance_writer, true)\n  instance_predicate = options.fetch(:instance_predicate, true)\n\n  attrs.each do |name|\n    define_singleton_method(name) { nil }\n    define_singleton_method(\"#{name}?\") { !!public_send(name) } if instance_predicate\n\n    ivar = \"@#{name}\"\n\n    define_singleton_method(\"#{name}=\") do |val|\n      singleton_class.class_eval do\n        remove_possible_method(name)\n        define_method(name) { val }\n      end\n\n      if singleton_class?\n        class_eval do\n          remove_possible_method(name)\n          define_method(name) do\n            if instance_variable_defined? ivar\n              instance_variable_get ivar\n            else\n              singleton_class.send name\n            end\n          end\n        end\n      end\n      val\n    end\n\n    if instance_reader\n      remove_possible_method name\n      define_method(name) do\n        if instance_variable_defined?(ivar)\n          instance_variable_get ivar\n        else\n          self.class.public_send name\n        end\n      end\n      define_method(\"#{name}?\") { !!public_send(name) } if instance_predicate\n    end\n\n    attr_writer name if instance_writer\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-subclasses\"> <span class=\"method-name\">subclasses</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array with the direct children of <code>self</code>.</p> <pre class=\"ruby\">Integer.subclasses # =&gt; [Fixnum, Bignum]\n\nclass Foo; end\nclass Bar &lt; Foo; end\nclass Baz &lt; Bar; end\n\nFoo.subclasses # =&gt; [Bar]\n</pre> <div class=\"method-source-code\" id=\"subclasses-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/class/subclasses.rb, line 35\ndef subclasses\n  subclasses, chain = [], descendants\n  chain.each do |k|\n    subclasses &lt;&lt; k unless chain.any? { |c| c &gt; k }\n  end\n  subclasses\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-superclass_delegating_accessor\"> <span class=\"method-name\">superclass_delegating_accessor</span><span class=\"method-args\">(name, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"superclass_delegating_accessor-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/class/delegating_attributes.rb, line 7\ndef superclass_delegating_accessor(name, options = {})\n  # Create private _name and _name= methods that can still be used if the public\n  # methods are overridden.\n  _superclass_delegating_accessor(\"_#{name}\", options)\n\n  # Generate the public methods name, name=, and name?.\n  # These methods dispatch to the private _name, and _name= methods, making them\n  # overridable.\n  singleton_class.send(:define_method, name) { send(\"_#{name}\") }\n  singleton_class.send(:define_method, \"#{name}?\") { !!send(\"_#{name}\") }\n  singleton_class.send(:define_method, \"#{name}=\") { |value| send(\"_#{name}=\", value) }\n\n  # If an instance_reader is needed, generate public instance methods name and name?.\n  if options[:instance_reader] != false\n    define_method(name) { send(\"_#{name}\") }\n    define_method(\"#{name}?\") { !!send(\"#{name}\") }\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","date":"<h1 id=\"class-Date\" class=\"class\"> class Date </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"dateandtime/calculations\">DateAndTime::Calculations</a>, <a class=\"include\" href=\"dateandtime/zones\">DateAndTime::Zones</a>\n</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DATE_FORMATS\">DATE_FORMATS </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-beginning_of_week_default\"> <span class=\"method-name\">beginning_of_week_default</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-beginning_of_week\"> <span class=\"method-name\">beginning_of_week</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the week start (e.g. :monday) for the current request, if this has been set (via <a href=\"date#method-c-beginning_of_week-3D\">::beginning_of_week=</a>). If <code>Date.beginning_of_week</code> has not been set for the current request, returns the week start specified in <code>config.beginning_of_week</code>. If no config.beginning_of_week was specified, returns :monday.</p> <div class=\"method-source-code\" id=\"beginning_of_week-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 17\ndef beginning_of_week\n  Thread.current[:beginning_of_week] || beginning_of_week_default || :monday\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-beginning_of_week-3D\"> <span class=\"method-name\">beginning_of_week=</span><span class=\"method-args\">(week_start)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets <code>Date.beginning_of_week</code> to a week start (e.g. :monday) for current request/thread.</p> <p>This method accepts any of the following day symbols: :monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday</p> <div class=\"method-source-code\" id=\"beginning_of_week-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 25\ndef beginning_of_week=(week_start)\n  Thread.current[:beginning_of_week] = find_beginning_of_week!(week_start)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-current\"> <span class=\"method-name\">current</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <a href=\"time#method-c-zone\">Time.zone</a>.today when <code>Time.zone</code> or <code>config.time_zone</code> are set, otherwise just returns Date.today.</p> <div class=\"method-source-code\" id=\"current-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 46\ndef current\n  ::Time.zone ? ::Time.zone.today : ::Date.today\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-find_beginning_of_week-21\"> <span class=\"method-name\">find_beginning_of_week!</span><span class=\"method-args\">(week_start)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns week start day symbol (e.g. :monday), or raises an ArgumentError for invalid day symbol.</p> <div class=\"method-source-code\" id=\"find_beginning_of_week-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 30\ndef find_beginning_of_week!(week_start)\n  raise ArgumentError, \"Invalid beginning of week: #{week_start}\" unless ::Date::DAYS_INTO_WEEK.key?(week_start)\n  week_start\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-tomorrow\"> <span class=\"method-name\">tomorrow</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"date\">Date</a> representing the date 1 day after today (i.e. tomorrow's date).</p> <div class=\"method-source-code\" id=\"tomorrow-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 41\ndef tomorrow\n  ::Date.current.tomorrow\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-yesterday\"> <span class=\"method-name\">yesterday</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"date\">Date</a> representing the date 1 day ago (i.e. yesterday's date).</p> <div class=\"method-source-code\" id=\"yesterday-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 36\ndef yesterday\n  ::Date.current.yesterday\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-3C-3D-3E\"> <span class=\"method-name\">&lt;=&gt;</span><span class=\"method-args\">(other)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-compare_without_coercion\">compare_without_coercion</a> </div> <div class=\"aliases\"> Alias for: <a href=\"date#method-i-compare_with_coercion\">compare_with_coercion</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-acts_like_date-3F\"> <span class=\"method-name\">acts_like_date?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Duck-types as a Date-like class. See <a href=\"object#method-i-acts_like-3F\">Object#acts_like?</a>.</p> <div class=\"method-source-code\" id=\"acts_like_date-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/acts_like.rb, line 5\ndef acts_like_date?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-advance\"> <span class=\"method-name\">advance</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Provides precise <a href=\"date\">Date</a> calculations for years, months, and days. The <code>options</code> parameter takes a hash with any of these keys: <code>:years</code>, <code>:months</code>, <code>:weeks</code>, <code>:days</code>.</p> <div class=\"method-source-code\" id=\"advance-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 110\ndef advance(options)\n  options = options.dup\n  d = self\n  d = d &gt;&gt; options.delete(:years) * 12 if options[:years]\n  d = d &gt;&gt; options.delete(:months)     if options[:months]\n  d = d +  options.delete(:weeks) * 7  if options[:weeks]\n  d = d +  options.delete(:days)       if options[:days]\n  d\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ago\"> <span class=\"method-name\">ago</span><span class=\"method-args\">(seconds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts <a href=\"date\">Date</a> to a <a href=\"time\">Time</a> (or <a href=\"datetime\">DateTime</a> if necessary) with the time portion set to the beginning of the day (0:00) and then subtracts the specified number of seconds.</p> <div class=\"method-source-code\" id=\"ago-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 53\ndef ago(seconds)\n  in_time_zone.since(-seconds)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_day\"> <span class=\"method-name\">at_beginning_of_day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-beginning_of_day\">beginning_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_day\"> <span class=\"method-name\">at_end_of_day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-end_of_day\">end_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_midday\"> <span class=\"method-name\">at_midday</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_middle_of_day\"> <span class=\"method-name\">at_middle_of_day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_midnight\"> <span class=\"method-name\">at_midnight</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-beginning_of_day\">beginning_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_noon\"> <span class=\"method-name\">at_noon</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_day\"> <span class=\"method-name\">beginning_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts <a href=\"date\">Date</a> to a <a href=\"time\">Time</a> (or <a href=\"datetime\">DateTime</a> if necessary) with the time portion set to the beginning of the day (0:00)</p> <div class=\"method-source-code\" id=\"beginning_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 65\ndef beginning_of_day\n  in_time_zone\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-midnight\">midnight</a>, <a href=\"date#method-i-at_midnight\">at_midnight</a>, <a href=\"date#method-i-at_beginning_of_day\">at_beginning_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change\"> <span class=\"method-name\">change</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"date\">Date</a> where one or more of the elements have been changed according to the <code>options</code> parameter. The <code>options</code> parameter is a hash with a combination of these keys: <code>:year</code>, <code>:month</code>, <code>:day</code>.</p> <pre class=\"ruby\">Date.new(2007, 5, 12).change(day: 1)               # =&gt; Date.new(2007, 5, 1)\nDate.new(2007, 5, 12).change(year: 2005, month: 1) # =&gt; Date.new(2005, 1, 12)\n</pre> <div class=\"method-source-code\" id=\"change-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 125\ndef change(options)\n  ::Date.new(\n    options.fetch(:year, year),\n    options.fetch(:month, month),\n    options.fetch(:day, day)\n  )\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compare_with_coercion\"> <span class=\"method-name\">compare_with_coercion</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allow <a href=\"date\">Date</a> to be compared with <a href=\"time\">Time</a> by converting to <a href=\"datetime\">DateTime</a> and relying on the &lt;=&gt; from there.</p> <div class=\"method-source-code\" id=\"compare_with_coercion-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 134\ndef compare_with_coercion(other)\n  if other.is_a?(Time)\n    self.to_datetime &lt;=&gt; other\n  else\n    compare_without_coercion(other)\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-3C-3D-3E\">&lt;=&gt;</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-compare_without_coercion\"> <span class=\"method-name\">compare_without_coercion</span><span class=\"method-args\">(other)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-3C-3D-3E\">&lt;=&gt;</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-default_inspect\"> <span class=\"method-name\">default_inspect</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-inspect\">inspect</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_day\"> <span class=\"method-name\">end_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts <a href=\"date\">Date</a> to a <a href=\"time\">Time</a> (or <a href=\"datetime\">DateTime</a> if necessary) with the time portion set to the end of the day (23:59:59)</p> <div class=\"method-source-code\" id=\"end_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 83\ndef end_of_day\n  in_time_zone.end_of_day\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-at_end_of_day\">at_end_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-in\"> <span class=\"method-name\">in</span><span class=\"method-args\">(seconds)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-since\">since</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-default_inspect\">default_inspect</a> </div> <div class=\"aliases\"> Alias for: <a href=\"date#method-i-readable_inspect\">readable_inspect</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-midday\"> <span class=\"method-name\">midday</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-middle_of_day\"> <span class=\"method-name\">middle_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts <a href=\"date\">Date</a> to a <a href=\"time\">Time</a> (or <a href=\"datetime\">DateTime</a> if necessary) with the time portion set to the middle of the day (12:00)</p> <div class=\"method-source-code\" id=\"middle_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 73\ndef middle_of_day\n  in_time_zone.middle_of_day\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-midday\">midday</a>, <a href=\"date#method-i-noon\">noon</a>, <a href=\"date#method-i-at_midday\">at_midday</a>, <a href=\"date#method-i-at_noon\">at_noon</a>, <a href=\"date#method-i-at_middle_of_day\">at_middle_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-midnight\"> <span class=\"method-name\">midnight</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-beginning_of_day\">beginning_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-noon\"> <span class=\"method-name\">noon</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-readable_inspect\"> <span class=\"method-name\">readable_inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Overrides the default inspect method with a human readable one, e.g., “Mon, 21 Feb 2005”</p> <div class=\"method-source-code\" id=\"readable_inspect-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/conversions.rb, line 67\ndef readable_inspect\n  strftime('%a, %d %b %Y')\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-inspect\">inspect</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-since\"> <span class=\"method-name\">since</span><span class=\"method-args\">(seconds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts <a href=\"date\">Date</a> to a <a href=\"time\">Time</a> (or <a href=\"datetime\">DateTime</a> if necessary) with the time portion set to the beginning of the day (0:00) and then adds the specified number of seconds</p> <div class=\"method-source-code\" id=\"since-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/calculations.rb, line 59\ndef since(seconds)\n  in_time_zone.since(seconds)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-in\">in</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_default_s\"> <span class=\"method-name\">to_default_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"date#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_formatted_s\"> <span class=\"method-name\">to_formatted_s</span><span class=\"method-args\">(format = :default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert to a formatted string. See <a href=\"date#DATE_FORMATS\">DATE_FORMATS</a> for predefined formats.</p> <p>This method is aliased to <code>to_s</code>.</p> <pre class=\"ruby\">date = Date.new(2007, 11, 10)       # =&gt; Sat, 10 Nov 2007\n\ndate.to_formatted_s(:db)            # =&gt; \"2007-11-10\"\ndate.to_s(:db)                      # =&gt; \"2007-11-10\"\n\ndate.to_formatted_s(:short)         # =&gt; \"10 Nov\"\ndate.to_formatted_s(:number)        # =&gt; \"20071110\"\ndate.to_formatted_s(:long)          # =&gt; \"November 10, 2007\"\ndate.to_formatted_s(:long_ordinal)  # =&gt; \"November 10th, 2007\"\ndate.to_formatted_s(:rfc822)        # =&gt; \"10 Nov 2007\"\ndate.to_formatted_s(:iso8601)       # =&gt; \"2007-11-10\"\n</pre> <h2 id=\"method-i-to_formatted_s-label-Adding+your+own+date+formats+to+to_formatted_s\">Adding your own date formats to <a href=\"date#method-i-to_formatted_s\">#to_formatted_s</a>\n</h2> <p>You can add your own formats to the Date::DATE_FORMATS hash. Use the format name as the hash key and either a strftime string or Proc instance that takes a date argument as the value.</p> <pre class=\"ruby\"># config/initializers/date_formats.rb\nDate::DATE_FORMATS[:month_and_year] = '%B %Y'\nDate::DATE_FORMATS[:short_ordinal] = -&gt;(date) { date.strftime(\"%B #{date.day.ordinalize}\") }\n</pre> <div class=\"method-source-code\" id=\"to_formatted_s-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/conversions.rb, line 52\ndef to_formatted_s(format = :default)\n  if formatter = DATE_FORMATS[format]\n    if formatter.respond_to?(:call)\n      formatter.call(self).to_s\n    else\n      strftime(formatter)\n    end\n  else\n    to_default_s\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"date#method-i-to_default_s\">to_default_s</a> </div> <div class=\"aliases\"> Alias for: <a href=\"date#method-i-to_formatted_s\">to_formatted_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_time\"> <span class=\"method-name\">to_time</span><span class=\"method-args\">(form = :local)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts a <a href=\"date\">Date</a> instance to a <a href=\"time\">Time</a>, where the time is set to the beginning of the day. The timezone can be either :local or :utc (default :local).</p> <pre class=\"ruby\">date = Date.new(2007, 11, 10)  # =&gt; Sat, 10 Nov 2007\n\ndate.to_time                   # =&gt; Sat Nov 10 00:00:00 0800 2007\ndate.to_time(:local)           # =&gt; Sat Nov 10 00:00:00 0800 2007\n\ndate.to_time(:utc)             # =&gt; Sat Nov 10 00:00:00 UTC 2007\n</pre> <div class=\"method-source-code\" id=\"to_time-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/conversions.rb, line 82\ndef to_time(form = :local)\n  ::Time.send(form, year, month, day)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xmlschema\"> <span class=\"method-name\">xmlschema</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string which represents the time in used time zone as <a href=\"datetime\">DateTime</a> defined by XML Schema:</p> <pre class=\"ruby\">date = Date.new(2015, 05, 23)  # =&gt; Sat, 23 May 2015\ndate.xmlschema                 # =&gt; \"2015-05-23T00:00:00+04:00\"\n</pre> <div class=\"method-source-code\" id=\"xmlschema-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date/conversions.rb, line 91\ndef xmlschema\n  in_time_zone.xmlschema\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","dateandtime/calculations":"<h1 id=\"module-DateAndTime::Calculations\" class=\"module\"> module DateAndTime::Calculations </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DAYS_INTO_WEEK\">DAYS_INTO_WEEK </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-all_month\"> <span class=\"method-name\">all_month</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../range\">Range</a> representing the whole month of the current date/time.</p> <div class=\"method-source-code\" id=\"all_month-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 234\ndef all_month\n  beginning_of_month..end_of_month\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-all_quarter\"> <span class=\"method-name\">all_quarter</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../range\">Range</a> representing the whole quarter of the current date/time.</p> <div class=\"method-source-code\" id=\"all_quarter-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 239\ndef all_quarter\n  beginning_of_quarter..end_of_quarter\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-all_week\"> <span class=\"method-name\">all_week</span><span class=\"method-args\">(start_day = Date.beginning_of_week)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../range\">Range</a> representing the whole week of the current date/time. Week starts on start_day, default is <code>Date.week_start</code> or <code>config.week_start</code> when set.</p> <div class=\"method-source-code\" id=\"all_week-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 229\ndef all_week(start_day = Date.beginning_of_week)\n  beginning_of_week(start_day)..end_of_week(start_day)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-all_year\"> <span class=\"method-name\">all_year</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"../range\">Range</a> representing the whole year of the current date/time.</p> <div class=\"method-source-code\" id=\"all_year-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 244\ndef all_year\n  beginning_of_year..end_of_year\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_month\"> <span class=\"method-name\">at_beginning_of_month</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-beginning_of_month\">beginning_of_month</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_quarter\"> <span class=\"method-name\">at_beginning_of_quarter</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-beginning_of_quarter\">beginning_of_quarter</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_week\"> <span class=\"method-name\">at_beginning_of_week</span><span class=\"method-args\">(start_day = Date.beginning_of_week)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-beginning_of_week\">beginning_of_week</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_year\"> <span class=\"method-name\">at_beginning_of_year</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-beginning_of_year\">beginning_of_year</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_month\"> <span class=\"method-name\">at_end_of_month</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-end_of_month\">end_of_month</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_quarter\"> <span class=\"method-name\">at_end_of_quarter</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-end_of_quarter\">end_of_quarter</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_week\"> <span class=\"method-name\">at_end_of_week</span><span class=\"method-args\">(start_day = Date.beginning_of_week)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-end_of_week\">end_of_week</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_year\"> <span class=\"method-name\">at_end_of_year</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-end_of_year\">end_of_year</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_month\"> <span class=\"method-name\">beginning_of_month</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time at the start of the month. <a href=\"../datetime\">DateTime</a> objects will have a time set to 0:00.</p> <div class=\"method-source-code\" id=\"beginning_of_month-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 80\ndef beginning_of_month\n  first_hour(change(:day =&gt; 1))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-at_beginning_of_month\">at_beginning_of_month</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_quarter\"> <span class=\"method-name\">beginning_of_quarter</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time at the start of the quarter. Example: 1st January, 1st July, 1st October. <a href=\"../datetime\">DateTime</a> objects will have a time set to 0:00.</p> <div class=\"method-source-code\" id=\"beginning_of_quarter-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 88\ndef beginning_of_quarter\n  first_quarter_month = [10, 7, 4, 1].detect { |m| m &lt;= month }\n  beginning_of_month.change(:month =&gt; first_quarter_month)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-at_beginning_of_quarter\">at_beginning_of_quarter</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_week\"> <span class=\"method-name\">beginning_of_week</span><span class=\"method-args\">(start_day = Date.beginning_of_week)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time representing the start of this week on the given day. Week is assumed to start on <code>start_day</code>, default is <code>Date.beginning_of_week</code> or <code>config.beginning_of_week</code> when set. <code>DateTime</code> objects have their time set to 0:00.</p> <div class=\"method-source-code\" id=\"beginning_of_week-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 185\ndef beginning_of_week(start_day = Date.beginning_of_week)\n  result = days_ago(days_to_week_start(start_day))\n  acts_like?(:time) ? result.midnight : result\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-at_beginning_of_week\">at_beginning_of_week</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_year\"> <span class=\"method-name\">beginning_of_year</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return a new date/time at the beginning of the year. Example: 1st January. <a href=\"../datetime\">DateTime</a> objects will have a time set to 0:00.</p> <div class=\"method-source-code\" id=\"beginning_of_year-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 106\ndef beginning_of_year\n  change(:month =&gt; 1).beginning_of_month\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-at_beginning_of_year\">at_beginning_of_year</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-days_ago\"> <span class=\"method-name\">days_ago</span><span class=\"method-args\">(days)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time the specified number of days ago.</p> <div class=\"method-source-code\" id=\"days_ago-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 39\ndef days_ago(days)\n  advance(:days =&gt; -days)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-days_since\"> <span class=\"method-name\">days_since</span><span class=\"method-args\">(days)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time the specified number of days in the future.</p> <div class=\"method-source-code\" id=\"days_since-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 44\ndef days_since(days)\n  advance(:days =&gt; days)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-days_to_week_start\"> <span class=\"method-name\">days_to_week_start</span><span class=\"method-args\">(start_day = Date.beginning_of_week)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the number of days to the start of the week on the given day. Week is assumed to start on <code>start_day</code>, default is <code>Date.beginning_of_week</code> or <code>config.beginning_of_week</code> when set.</p> <div class=\"method-source-code\" id=\"days_to_week_start-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 175\ndef days_to_week_start(start_day = Date.beginning_of_week)\n  start_day_number = DAYS_INTO_WEEK[start_day]\n  current_day_number = wday != 0 ? wday - 1 : 6\n  (current_day_number - start_day_number) % 7\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_month\"> <span class=\"method-name\">end_of_month</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time representing the end of the month. <a href=\"../datetime\">DateTime</a> objects will have a time set to 23:59:59.</p> <div class=\"method-source-code\" id=\"end_of_month-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 214\ndef end_of_month\n  last_day = ::Time.days_in_month(month, year)\n  last_hour(days_since(last_day - day))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-at_end_of_month\">at_end_of_month</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_quarter\"> <span class=\"method-name\">end_of_quarter</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time at the end of the quarter. Example: 31st March, 30th June, 30th September. <a href=\"../datetime\">DateTime</a> objects will have a time set to 23:59:59.</p> <div class=\"method-source-code\" id=\"end_of_quarter-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 97\ndef end_of_quarter\n  last_quarter_month = [3, 6, 9, 12].detect { |m| m &gt;= month }\n  beginning_of_month.change(:month =&gt; last_quarter_month).end_of_month\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-at_end_of_quarter\">at_end_of_quarter</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_week\"> <span class=\"method-name\">end_of_week</span><span class=\"method-args\">(start_day = Date.beginning_of_week)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time representing the end of this week on the given day. Week is assumed to start on <code>start_day</code>, default is <code>Date.beginning_of_week</code> or <code>config.beginning_of_week</code> when set. <a href=\"../datetime\">DateTime</a> objects have their time set to 23:59:59.</p> <div class=\"method-source-code\" id=\"end_of_week-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 201\ndef end_of_week(start_day = Date.beginning_of_week)\n  last_hour(days_since(6 - days_to_week_start(start_day)))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-at_end_of_week\">at_end_of_week</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_year\"> <span class=\"method-name\">end_of_year</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time representing the end of the year. <a href=\"../datetime\">DateTime</a> objects will have a time set to 23:59:59.</p> <div class=\"method-source-code\" id=\"end_of_year-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 222\ndef end_of_year\n  change(:month =&gt; 12).end_of_month\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-at_end_of_year\">at_end_of_year</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-future-3F\"> <span class=\"method-name\">future?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the date/time is in the future.</p> <div class=\"method-source-code\" id=\"future-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 34\ndef future?\n  self &gt; self.class.current\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-last_month\"> <span class=\"method-name\">last_month</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-prev_month\">prev_month</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-last_quarter\"> <span class=\"method-name\">last_quarter</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-prev_quarter\">prev_quarter</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-last_week\"> <span class=\"method-name\">last_week</span><span class=\"method-args\">(start_day = Date.beginning_of_week)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-prev_week\">prev_week</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-last_year\"> <span class=\"method-name\">last_year</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"calculations#method-i-prev_year\">prev_year</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-monday\"> <span class=\"method-name\">monday</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns Monday of this week assuming that week starts on Monday. <code>DateTime</code> objects have their time set to 0:00.</p> <div class=\"method-source-code\" id=\"monday-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 193\ndef monday\n  beginning_of_week(:monday)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-months_ago\"> <span class=\"method-name\">months_ago</span><span class=\"method-args\">(months)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time the specified number of months ago.</p> <div class=\"method-source-code\" id=\"months_ago-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 59\ndef months_ago(months)\n  advance(:months =&gt; -months)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-months_since\"> <span class=\"method-name\">months_since</span><span class=\"method-args\">(months)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time the specified number of months in the future.</p> <div class=\"method-source-code\" id=\"months_since-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 64\ndef months_since(months)\n  advance(:months =&gt; months)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-next_month\"> <span class=\"method-name\">next_month</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Short-hand for <a href=\"calculations#method-i-months_since\">#months_since</a>(1).</p> <div class=\"method-source-code\" id=\"next_month-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 131\ndef next_month\n  months_since(1)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-next_quarter\"> <span class=\"method-name\">next_quarter</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Short-hand for <a href=\"calculations#method-i-months_since\">#months_since</a>(3)</p> <div class=\"method-source-code\" id=\"next_quarter-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 136\ndef next_quarter\n  months_since(3)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-next_week\"> <span class=\"method-name\">next_week</span><span class=\"method-args\">(given_day_in_next_week = Date.beginning_of_week)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time representing the given day in the next week.</p> <pre class=\"ruby\">today = Date.today # =&gt; Thu, 07 May 2015\ntoday.next_week    # =&gt; Mon, 11 May 2015\n</pre> <p>The <code>given_day_in_next_week</code> defaults to the beginning of the week which is determined by <code>Date.beginning_of_week</code> or <code>config.beginning_of_week</code></p> <pre class=\"ruby\">today = Date.today       # =&gt; Thu, 07 May 2015\ntoday.next_week(:friday) # =&gt; Fri, 15 May 2015\n</pre> <p>when set. <code>DateTime</code> objects have their time set to 0:00.</p> <pre class=\"ruby\">now = Time.current # =&gt; Thu, 07 May 2015 13:31:16 UTC +00:00\nnow.next_week      # =&gt; Mon, 11 May 2015 00:00:00 UTC +00:00\n</pre> <div class=\"method-source-code\" id=\"next_week-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 126\ndef next_week(given_day_in_next_week = Date.beginning_of_week)\n  first_hour(weeks_since(1).beginning_of_week.days_since(days_span(given_day_in_next_week)))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-next_year\"> <span class=\"method-name\">next_year</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Short-hand for <a href=\"calculations#method-i-years_since\">#years_since</a>(1).</p> <div class=\"method-source-code\" id=\"next_year-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 141\ndef next_year\n  years_since(1)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-past-3F\"> <span class=\"method-name\">past?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the date/time is in the past.</p> <div class=\"method-source-code\" id=\"past-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 29\ndef past?\n  self &lt; self.class.current\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prev_month\"> <span class=\"method-name\">prev_month</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Short-hand for <a href=\"calculations#method-i-months_ago\">#months_ago</a>(1).</p> <div class=\"method-source-code\" id=\"prev_month-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 155\ndef prev_month\n  months_ago(1)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-last_month\">last_month</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prev_quarter\"> <span class=\"method-name\">prev_quarter</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Short-hand for <a href=\"calculations#method-i-months_ago\">#months_ago</a>(3).</p> <div class=\"method-source-code\" id=\"prev_quarter-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 161\ndef prev_quarter\n  months_ago(3)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-last_quarter\">last_quarter</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prev_week\"> <span class=\"method-name\">prev_week</span><span class=\"method-args\">(start_day = Date.beginning_of_week)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time representing the given day in the previous week. Week is assumed to start on <code>start_day</code>, default is <code>Date.beginning_of_week</code> or <code>config.beginning_of_week</code> when set. <a href=\"../datetime\">DateTime</a> objects have their time set to 0:00.</p> <div class=\"method-source-code\" id=\"prev_week-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 149\ndef prev_week(start_day = Date.beginning_of_week)\n  first_hour(weeks_ago(1).beginning_of_week.days_since(days_span(start_day)))\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-last_week\">last_week</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prev_year\"> <span class=\"method-name\">prev_year</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Short-hand for <a href=\"calculations#method-i-years_ago\">#years_ago</a>(1).</p> <div class=\"method-source-code\" id=\"prev_year-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 167\ndef prev_year\n  years_ago(1)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"calculations#method-i-last_year\">last_year</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sunday\"> <span class=\"method-name\">sunday</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns Sunday of this week assuming that week starts on Monday. <code>DateTime</code> objects have their time set to 23:59:59.</p> <div class=\"method-source-code\" id=\"sunday-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 208\ndef sunday\n  end_of_week(:monday)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-today-3F\"> <span class=\"method-name\">today?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the date/time is today.</p> <div class=\"method-source-code\" id=\"today-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 24\ndef today?\n  to_date == ::Date.current\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tomorrow\"> <span class=\"method-name\">tomorrow</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time representing tomorrow.</p> <div class=\"method-source-code\" id=\"tomorrow-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 19\ndef tomorrow\n  advance(:days =&gt; 1)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-weeks_ago\"> <span class=\"method-name\">weeks_ago</span><span class=\"method-args\">(weeks)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time the specified number of weeks ago.</p> <div class=\"method-source-code\" id=\"weeks_ago-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 49\ndef weeks_ago(weeks)\n  advance(:weeks =&gt; -weeks)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-weeks_since\"> <span class=\"method-name\">weeks_since</span><span class=\"method-args\">(weeks)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time the specified number of weeks in the future.</p> <div class=\"method-source-code\" id=\"weeks_since-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 54\ndef weeks_since(weeks)\n  advance(:weeks =&gt; weeks)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-years_ago\"> <span class=\"method-name\">years_ago</span><span class=\"method-args\">(years)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time the specified number of years ago.</p> <div class=\"method-source-code\" id=\"years_ago-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 69\ndef years_ago(years)\n  advance(:years =&gt; -years)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-years_since\"> <span class=\"method-name\">years_since</span><span class=\"method-args\">(years)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time the specified number of years in the future.</p> <div class=\"method-source-code\" id=\"years_since-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 74\ndef years_since(years)\n  advance(:years =&gt; years)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-yesterday\"> <span class=\"method-name\">yesterday</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new date/time representing yesterday.</p> <div class=\"method-source-code\" id=\"yesterday-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/calculations.rb, line 14\ndef yesterday\n  advance(:days =&gt; -1)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","dateandtime/zones":"<h1 id=\"module-DateAndTime::Zones\" class=\"module\"> module DateAndTime::Zones </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-in_time_zone\"> <span class=\"method-name\">in_time_zone</span><span class=\"method-args\">(zone = ::Time.zone)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the simultaneous time in <code>Time.zone</code> if a zone is given or if <a href=\"../time#attribute-c-zone_default\">Time.zone_default</a> is set. Otherwise, it returns the current time.</p> <pre class=\"ruby\">Time.zone = 'Hawaii'        # =&gt; 'Hawaii'\nDateTime.utc(2000).in_time_zone # =&gt; Fri, 31 Dec 1999 14:00:00 HST -10:00\nDate.new(2000).in_time_zone  # =&gt; Sat, 01 Jan 2000 00:00:00 HST -10:00\n</pre> <p>This method is similar to Time#localtime, except that it uses <code>Time.zone</code> as the local zone instead of the operating system's time zone.</p> <p>You can also pass in a TimeZone instance or string that identifies a TimeZone as an argument, and the conversion will be based on that zone instead of <code>Time.zone</code>.</p> <pre class=\"ruby\">Time.utc(2000).in_time_zone('Alaska') # =&gt; Fri, 31 Dec 1999 15:00:00 AKST -09:00\nDateTime.utc(2000).in_time_zone('Alaska') # =&gt; Fri, 31 Dec 1999 15:00:00 AKST -09:00\nDate.new(2000).in_time_zone('Alaska')  # =&gt; Sat, 01 Jan 2000 00:00:00 AKST -09:00\n</pre> <div class=\"method-source-code\" id=\"in_time_zone-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_and_time/zones.rb, line 19\ndef in_time_zone(zone = ::Time.zone)\n  time_zone = ::Time.find_zone! zone\n  time = acts_like?(:time) ? self : nil\n\n  if time_zone\n    time_with_zone(time, time_zone)\n  else\n    time || self.to_time\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","datetime":"<h1 id=\"class-DateTime\" class=\"class\"> class DateTime </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"dateandtime/zones\">DateAndTime::Zones</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-civil_from_format\"> <span class=\"method-name\">civil_from_format</span><span class=\"method-args\">(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <a href=\"datetime\">DateTime</a> with local offset for given year if format is local else offset is zero.</p> <pre class=\"ruby\">DateTime.civil_from_format :local, 2012\n# =&gt; Sun, 01 Jan 2012 00:00:00 +0300\nDateTime.civil_from_format :local, 2012, 12, 17\n# =&gt; Mon, 17 Dec 2012 00:00:00 +0000\n</pre> <div class=\"method-source-code\" id=\"civil_from_format-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 65\ndef self.civil_from_format(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0)\n  if utc_or_local.to_sym == :local\n    offset = ::Time.local(year, month, day).utc_offset.to_r / 86400\n  else\n    offset = 0\n  end\n  civil(year, month, day, hour, min, sec, offset)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-current\"> <span class=\"method-name\">current</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code> or <code>config.time_zone</code> are set, otherwise returns <code>Time.now.to_datetime</code>.</p> <div class=\"method-source-code\" id=\"current-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 8\ndef current\n  ::Time.zone ? ::Time.zone.now.to_datetime : ::Time.now.to_datetime\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3D-3E\"> <span class=\"method-name\">&lt;=&gt;</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Layers additional behavior on DateTime#&lt;=&gt; so that <a href=\"time\">Time</a> and <a href=\"activesupport/timewithzone\">ActiveSupport::TimeWithZone</a> instances can be compared with a <a href=\"datetime\">DateTime</a>.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"3C-3D-3E-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 163\ndef &lt;=&gt;(other)\n  if other.kind_of?(Infinity)\n    super\n  elsif other.respond_to? :to_datetime\n    super other.to_datetime rescue nil\n  else\n    nil\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-acts_like_date-3F\"> <span class=\"method-name\">acts_like_date?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Duck-types as a Date-like class. See <a href=\"object#method-i-acts_like-3F\">Object#acts_like?</a>.</p> <div class=\"method-source-code\" id=\"acts_like_date-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/acts_like.rb, line 6\ndef acts_like_date?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-acts_like_time-3F\"> <span class=\"method-name\">acts_like_time?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Duck-types as a Time-like class. See <a href=\"object#method-i-acts_like-3F\">Object#acts_like?</a>.</p> <div class=\"method-source-code\" id=\"acts_like_time-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/acts_like.rb, line 11\ndef acts_like_time?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-advance\"> <span class=\"method-name\">advance</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Uses <a href=\"date\">Date</a> to provide precise <a href=\"time\">Time</a> calculations for years, months, and days. The <code>options</code> parameter takes a hash with any of these keys: <code>:years</code>, <code>:months</code>, <code>:weeks</code>, <code>:days</code>, <code>:hours</code>, <code>:minutes</code>, <code>:seconds</code>.</p> <div class=\"method-source-code\" id=\"advance-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 55\ndef advance(options)\n  unless options[:weeks].nil?\n    options[:weeks], partial_weeks = options[:weeks].divmod(1)\n    options[:days] = options.fetch(:days, 0) + 7 * partial_weeks\n  end\n\n  unless options[:days].nil?\n    options[:days], partial_days = options[:days].divmod(1)\n    options[:hours] = options.fetch(:hours, 0) + 24 * partial_days\n  end\n\n  d = to_date.advance(options)\n  datetime_advanced_by_date = change(:year =&gt; d.year, :month =&gt; d.month, :day =&gt; d.day)\n  seconds_to_advance =        options.fetch(:seconds, 0) +\n    options.fetch(:minutes, 0) * 60 +\n    options.fetch(:hours, 0) * 3600\n\n  if seconds_to_advance.zero?\n    datetime_advanced_by_date\n  else\n    datetime_advanced_by_date.since(seconds_to_advance)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ago\"> <span class=\"method-name\">ago</span><span class=\"method-args\">(seconds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> representing the time a number of seconds ago. Do not use this method in combination with x.months, use months_ago instead!</p> <div class=\"method-source-code\" id=\"ago-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 82\ndef ago(seconds)\n  since(-seconds)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_day\"> <span class=\"method-name\">at_beginning_of_day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-beginning_of_day\">beginning_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_hour\"> <span class=\"method-name\">at_beginning_of_hour</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-beginning_of_hour\">beginning_of_hour</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_minute\"> <span class=\"method-name\">at_beginning_of_minute</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-beginning_of_minute\">beginning_of_minute</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_day\"> <span class=\"method-name\">at_end_of_day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-end_of_day\">end_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_hour\"> <span class=\"method-name\">at_end_of_hour</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-end_of_hour\">end_of_hour</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_minute\"> <span class=\"method-name\">at_end_of_minute</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-end_of_minute\">end_of_minute</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_midday\"> <span class=\"method-name\">at_midday</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_middle_of_day\"> <span class=\"method-name\">at_middle_of_day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_midnight\"> <span class=\"method-name\">at_midnight</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-beginning_of_day\">beginning_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_noon\"> <span class=\"method-name\">at_noon</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_day\"> <span class=\"method-name\">beginning_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> representing the start of the day (0:00).</p> <div class=\"method-source-code\" id=\"beginning_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 95\ndef beginning_of_day\n  change(:hour =&gt; 0)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-midnight\">midnight</a>, <a href=\"datetime#method-i-at_midnight\">at_midnight</a>, <a href=\"datetime#method-i-at_beginning_of_day\">at_beginning_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_hour\"> <span class=\"method-name\">beginning_of_hour</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> representing the start of the hour (hh:00:00).</p> <div class=\"method-source-code\" id=\"beginning_of_hour-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 119\ndef beginning_of_hour\n  change(:min =&gt; 0)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-at_beginning_of_hour\">at_beginning_of_hour</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_minute\"> <span class=\"method-name\">beginning_of_minute</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> representing the start of the minute (hh:mm:00).</p> <div class=\"method-source-code\" id=\"beginning_of_minute-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 131\ndef beginning_of_minute\n  change(:sec =&gt; 0)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-at_beginning_of_minute\">at_beginning_of_minute</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change\"> <span class=\"method-name\">change</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> where one or more of the elements have been changed according to the <code>options</code> parameter. The time options (<code>:hour</code>, <code>:min</code>, <code>:sec</code>) reset cascadingly, so if only the hour is passed, then minute and sec is set to 0. If the hour and minute is passed, then sec is set to 0. The <code>options</code> parameter takes a hash with any of these keys: <code>:year</code>, <code>:month</code>, <code>:day</code>, <code>:hour</code>, <code>:min</code>, <code>:sec</code>, <code>:offset</code>, <code>:start</code>.</p> <pre class=\"ruby\">DateTime.new(2012, 8, 29, 22, 35, 0).change(day: 1)              # =&gt; DateTime.new(2012, 8, 1, 22, 35, 0)\nDateTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, day: 1)  # =&gt; DateTime.new(1981, 8, 1, 22, 35, 0)\nDateTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, hour: 0) # =&gt; DateTime.new(1981, 8, 29, 0, 0, 0)\n</pre> <div class=\"method-source-code\" id=\"change-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 38\ndef change(options)\n  ::DateTime.civil(\n    options.fetch(:year, year),\n    options.fetch(:month, month),\n    options.fetch(:day, day),\n    options.fetch(:hour, hour),\n    options.fetch(:min, options[:hour] ? 0 : min),\n    options.fetch(:sec, (options[:hour] || options[:min]) ? 0 : sec + sec_fraction),\n    options.fetch(:offset, offset),\n    options.fetch(:start, start)\n  )\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-default_inspect\"> <span class=\"method-name\">default_inspect</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-inspect\">inspect</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_day\"> <span class=\"method-name\">end_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> representing the end of the day (23:59:59).</p> <div class=\"method-source-code\" id=\"end_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 113\ndef end_of_day\n  change(:hour =&gt; 23, :min =&gt; 59, :sec =&gt; 59)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-at_end_of_day\">at_end_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_hour\"> <span class=\"method-name\">end_of_hour</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> representing the end of the hour (hh:59:59).</p> <div class=\"method-source-code\" id=\"end_of_hour-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 125\ndef end_of_hour\n  change(:min =&gt; 59, :sec =&gt; 59)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-at_end_of_hour\">at_end_of_hour</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_minute\"> <span class=\"method-name\">end_of_minute</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> representing the end of the minute (hh:mm:59).</p> <div class=\"method-source-code\" id=\"end_of_minute-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 137\ndef end_of_minute\n  change(:sec =&gt; 59)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-at_end_of_minute\">at_end_of_minute</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-formatted_offset\"> <span class=\"method-name\">formatted_offset</span><span class=\"method-args\">(colon = true, alternate_utc_string = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>datetime = DateTime.civil(2000, 1, 1, 0, 0, 0, Rational(-6, 24)) datetime.formatted_offset # =&gt; “-06:00” datetime.formatted_offset(false) # =&gt; “-0600”</p> <div class=\"method-source-code\" id=\"formatted_offset-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 47\ndef formatted_offset(colon = true, alternate_utc_string = nil)\n  utc? &amp;&amp; alternate_utc_string || ActiveSupport::TimeZone.seconds_to_utc_offset(utc_offset, colon)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-getutc\"> <span class=\"method-name\">getutc</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-utc\">utc</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-in\"> <span class=\"method-name\">in</span><span class=\"method-args\">(seconds)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-since\">since</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-default_inspect\">default_inspect</a> </div> <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-readable_inspect\">readable_inspect</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-midday\"> <span class=\"method-name\">midday</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-middle_of_day\"> <span class=\"method-name\">middle_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> representing the middle of the day (12:00)</p> <div class=\"method-source-code\" id=\"middle_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 103\ndef middle_of_day\n  change(:hour =&gt; 12)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-midday\">midday</a>, <a href=\"datetime#method-i-noon\">noon</a>, <a href=\"datetime#method-i-at_midday\">at_midday</a>, <a href=\"datetime#method-i-at_noon\">at_noon</a>, <a href=\"datetime#method-i-at_middle_of_day\">at_middle_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-midnight\"> <span class=\"method-name\">midnight</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-beginning_of_day\">beginning_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-noon\"> <span class=\"method-name\">noon</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-nsec\"> <span class=\"method-name\">nsec</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the fraction of a second as nanoseconds</p> <div class=\"method-source-code\" id=\"nsec-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 90\ndef nsec\n  (sec_fraction * 1_000_000_000).to_i\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-readable_inspect\"> <span class=\"method-name\">readable_inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Overrides the default inspect method with a human readable one, e.g., “Mon, 21 Feb 2005 14:30:00 +0000”.</p> <div class=\"method-source-code\" id=\"readable_inspect-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 52\ndef readable_inspect\n  to_s(:rfc822)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-inspect\">inspect</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-seconds_since_midnight\"> <span class=\"method-name\">seconds_since_midnight</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Seconds since midnight: DateTime.now.seconds_since_midnight.</p> <div class=\"method-source-code\" id=\"seconds_since_midnight-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 14\ndef seconds_since_midnight\n  sec + (min * 60) + (hour * 3600)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-seconds_until_end_of_day\"> <span class=\"method-name\">seconds_until_end_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the number of seconds until 23:59:59.</p> <pre class=\"ruby\">DateTime.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day # =&gt; 86399\nDateTime.new(2012, 8, 29, 12, 34, 56).seconds_until_end_of_day # =&gt; 41103\nDateTime.new(2012, 8, 29, 23, 59, 59).seconds_until_end_of_day # =&gt; 0\n</pre> <div class=\"method-source-code\" id=\"seconds_until_end_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 23\ndef seconds_until_end_of_day\n  end_of_day.to_i - to_i\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-since\"> <span class=\"method-name\">since</span><span class=\"method-args\">(seconds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"datetime\">DateTime</a> representing the time a number of seconds since the instance time. Do not use this method in combination with x.months, use months_since instead!</p> <div class=\"method-source-code\" id=\"since-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 89\ndef since(seconds)\n  self + Rational(seconds.round, 86400)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-in\">in</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_default_s\"> <span class=\"method-name\">to_default_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_f\"> <span class=\"method-name\">to_f</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts <code>self</code> to a floating-point number of seconds, including fractional microseconds, since the Unix epoch.</p> <div class=\"method-source-code\" id=\"to_f-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 75\ndef to_f\n  seconds_since_unix_epoch.to_f + sec_fraction\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_formatted_s\"> <span class=\"method-name\">to_formatted_s</span><span class=\"method-args\">(format = :default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert to a formatted string. See Time::DATE_FORMATS for predefined formats.</p> <p>This method is aliased to <code>to_s</code>.</p> <h3 id=\"method-i-to_formatted_s-label-Examples\">Examples</h3> <pre class=\"ruby\">datetime = DateTime.civil(2007, 12, 4, 0, 0, 0, 0)   # =&gt; Tue, 04 Dec 2007 00:00:00 +0000\n\ndatetime.to_formatted_s(:db)            # =&gt; \"2007-12-04 00:00:00\"\ndatetime.to_s(:db)                      # =&gt; \"2007-12-04 00:00:00\"\ndatetime.to_s(:number)                  # =&gt; \"20071204000000\"\ndatetime.to_formatted_s(:short)         # =&gt; \"04 Dec 00:00\"\ndatetime.to_formatted_s(:long)          # =&gt; \"December 04, 2007 00:00\"\ndatetime.to_formatted_s(:long_ordinal)  # =&gt; \"December 4th, 2007 00:00\"\ndatetime.to_formatted_s(:rfc822)        # =&gt; \"Tue, 04 Dec 2007 00:00:00 +0000\"\ndatetime.to_formatted_s(:iso8601)       # =&gt; \"2007-12-04T00:00:00+00:00\"\n</pre> <h2 id=\"method-i-to_formatted_s-label-Adding+your+own+datetime+formats+to+to_formatted_s\">Adding your own datetime formats to <a href=\"datetime#method-i-to_formatted_s\">#to_formatted_s</a>\n</h2> <p><a href=\"datetime\">DateTime</a> formats are shared with <a href=\"time\">Time</a>. You can add your own to the Time::DATE_FORMATS hash. Use the format name as the hash key and either a strftime string or Proc instance that takes a time or datetime argument as the value.</p> <pre class=\"ruby\"># config/initializers/time_formats.rb\nTime::DATE_FORMATS[:month_and_year] = '%B %Y'\nTime::DATE_FORMATS[:short_ordinal] = lambda { |time| time.strftime(\"%B #{time.day.ordinalize}\") }\n</pre> <div class=\"method-source-code\" id=\"to_formatted_s-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 33\ndef to_formatted_s(format = :default)\n  if formatter = ::Time::DATE_FORMATS[format]\n    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)\n  else\n    to_default_s\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_i\"> <span class=\"method-name\">to_i</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts <code>self</code> to an integer number of seconds since the Unix epoch.</p> <div class=\"method-source-code\" id=\"to_i-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 80\ndef to_i\n  seconds_since_unix_epoch.to_i\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-to_default_s\">to_default_s</a> </div> <div class=\"aliases\"> Alias for: <a href=\"datetime#method-i-to_formatted_s\">to_formatted_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-usec\"> <span class=\"method-name\">usec</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the fraction of a second as microseconds</p> <div class=\"method-source-code\" id=\"usec-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 85\ndef usec\n  (sec_fraction * 1_000_000).to_i\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-utc\"> <span class=\"method-name\">utc</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adjusts <a href=\"datetime\">DateTime</a> to UTC by adding its offset value; offset is set to 0.</p> <pre class=\"ruby\">DateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24))     # =&gt; Mon, 21 Feb 2005 10:11:12 -0600\nDateTime.civil(2005, 2, 21, 10, 11, 12, Rational(-6, 24)).utc # =&gt; Mon, 21 Feb 2005 16:11:12 +0000\n</pre> <div class=\"method-source-code\" id=\"utc-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 146\ndef utc\n  new_offset(0)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"datetime#method-i-getutc\">getutc</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-utc-3F\"> <span class=\"method-name\">utc?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if <code>offset == 0</code>.</p> <div class=\"method-source-code\" id=\"utc-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 152\ndef utc?\n  offset == 0\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-utc_offset\"> <span class=\"method-name\">utc_offset</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the offset value in seconds.</p> <div class=\"method-source-code\" id=\"utc_offset-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 157\ndef utc_offset\n  (offset * 86400).to_i\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","digest/uuid":"<h1 id=\"module-Digest::UUID\" class=\"module\"> module Digest::UUID </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-uuid_from_hash\"> <span class=\"method-name\">uuid_from_hash</span><span class=\"method-args\">(hash_class, uuid_namespace, name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Generates a v5 non-random <a href=\"uuid\">UUID</a> (Universally Unique IDentifier).</p> <p>Using Digest::MD5 generates version 3 UUIDs; Digest::SHA1 generates version 5 UUIDs. <a href=\"uuid#method-c-uuid_from_hash\">::uuid_from_hash</a> always generates the same <a href=\"uuid\">UUID</a> for a given name and namespace combination.</p> <p>See RFC 4122 for details of <a href=\"uuid\">UUID</a> at: <a href=\"http://www.ietf.org/rfc/rfc4122.txt\">www.ietf.org/rfc/rfc4122.txt</a></p> <div class=\"method-source-code\" id=\"uuid_from_hash-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/digest/uuid.rb, line 16\ndef self.uuid_from_hash(hash_class, uuid_namespace, name)\n  if hash_class == Digest::MD5\n    version = 3\n  elsif hash_class == Digest::SHA1\n    version = 5\n  else\n    raise ArgumentError, \"Expected Digest::SHA1 or Digest::MD5, got #{hash_class.name}.\"\n  end\n\n  hash = hash_class.new\n  hash.update(uuid_namespace)\n  hash.update(name)\n\n  ary = hash.digest.unpack('NnnnnN')\n  ary[2] = (ary[2] &amp; 0x0FFF) | (version &lt;&lt; 12)\n  ary[3] = (ary[3] &amp; 0x3FFF) | 0x8000\n\n  \"%08x-%04x-%04x-%04x-%04x%08x\" % ary\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-uuid_v3\"> <span class=\"method-name\">uuid_v3</span><span class=\"method-args\">(uuid_namespace, name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience method for <a href=\"uuid#method-c-uuid_from_hash\">::uuid_from_hash</a> using Digest::MD5.</p> <div class=\"method-source-code\" id=\"uuid_v3-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/digest/uuid.rb, line 37\ndef self.uuid_v3(uuid_namespace, name)\n  self.uuid_from_hash(Digest::MD5, uuid_namespace, name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-uuid_v4\"> <span class=\"method-name\">uuid_v4</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience method for SecureRandom.uuid.</p> <div class=\"method-source-code\" id=\"uuid_v4-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/digest/uuid.rb, line 47\ndef self.uuid_v4\n  SecureRandom.uuid\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-uuid_v5\"> <span class=\"method-name\">uuid_v5</span><span class=\"method-args\">(uuid_namespace, name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience method for <a href=\"uuid#method-c-uuid_from_hash\">::uuid_from_hash</a> using Digest::SHA1.</p> <div class=\"method-source-code\" id=\"uuid_v5-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/digest/uuid.rb, line 42\ndef self.uuid_v5(uuid_namespace, name)\n  self.uuid_from_hash(Digest::SHA1, uuid_namespace, name)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","erb/util":"<h1 id=\"module-ERB::Util\" class=\"module\"> module ERB::Util </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"HTML_ESCAPE\">HTML_ESCAPE </dt>\n\n<dt id=\"HTML_ESCAPE_ONCE_REGEXP\">HTML_ESCAPE_ONCE_REGEXP </dt>\n\n<dt id=\"HTML_ESCAPE_REGEXP\">HTML_ESCAPE_REGEXP </dt>\n\n<dt id=\"JSON_ESCAPE\">JSON_ESCAPE </dt>\n\n<dt id=\"JSON_ESCAPE_REGEXP\">JSON_ESCAPE_REGEXP </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-c-h\"> <span class=\"method-name\">h</span><span class=\"method-args\">(s)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"util#method-i-html_escape\">html_escape</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-html_escape\"> <span class=\"method-name\">html_escape</span><span class=\"method-args\">(s)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A utility method for escaping HTML tag characters. This method is also aliased as <code>h</code>.</p> <p>In your <a href=\"../erb\">ERB</a> templates, use this method to escape any unsafe content. For example:</p> <pre>&lt;%=h @person.name %&gt;\n\nputs html_escape('is a &gt; 0 &amp; a &lt; 10?')\n# =&gt; is a &amp;gt; 0 &amp;amp; a &amp;lt; 10?</pre> <div class=\"method-source-code\" id=\"html_escape-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/output_safety.rb, line 21\ndef html_escape(s)\n  unwrapped_html_escape(s).html_safe\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"util#method-i-h\">h</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-html_escape_once\"> <span class=\"method-name\">html_escape_once</span><span class=\"method-args\">(s)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A utility method for escaping HTML without affecting existing escaped entities.</p> <pre class=\"ruby\">html_escape_once('1 &lt; 2 &amp;amp; 3')\n# =&gt; \"1 &amp;lt; 2 &amp;amp; 3\"\n\nhtml_escape_once('&amp;lt;&amp;lt; Accept &amp; Checkout')\n# =&gt; \"&amp;lt;&amp;lt; Accept &amp;amp; Checkout\"\n</pre> <div class=\"method-source-code\" id=\"html_escape_once-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/output_safety.rb, line 53\ndef html_escape_once(s)\n  result = s.to_s.gsub(HTML_ESCAPE_ONCE_REGEXP, HTML_ESCAPE)\n  s.html_safe? ? result.html_safe : result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-json_escape\"> <span class=\"method-name\">json_escape</span><span class=\"method-args\">(s)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A utility method for escaping HTML entities in JSON strings. Specifically, the &amp;, &gt; and &lt; characters are replaced with their equivalent unicode escaped form - u0026, u003e, and u003c. The Unicode sequences u2028 and u2029 are also escaped as they are treated as newline characters in some JavaScript engines. These sequences have identical meaning as the original characters inside the context of a JSON string, so assuming the input is a valid and well-formed JSON value, the output will have equivalent meaning when parsed:</p> <pre class=\"ruby\">json = JSON.generate({ name: \"&lt;/script&gt;&lt;script&gt;alert('PWNED!!!')&lt;/script&gt;\"})\n# =&gt; \"{\\\"name\\\":\\\"&lt;/script&gt;&lt;script&gt;alert('PWNED!!!')&lt;/script&gt;\\\"}\"\n\njson_escape(json)\n# =&gt; \"{\\\"name\\\":\\\"\\\\u003C/script\\\\u003E\\\\u003Cscript\\\\u003Ealert('PWNED!!!')\\\\u003C/script\\\\u003E\\\"}\"\n\nJSON.parse(json) == JSON.parse(json_escape(json))\n# =&gt; true\n</pre> <p>The intended use case for this method is to escape JSON strings before including them inside a script tag to avoid XSS vulnerability:</p> <pre>&lt;script&gt;\n  var currentUser = &lt;%= raw json_escape(current_user.to_json) %&gt;;\n&lt;/script&gt;</pre> <p>It is necessary to <code>raw</code> the result of <code>json_escape</code>, so that quotation marks don't get converted to <code>&amp;quot;</code> entities. <code>json_escape</code> doesn't automatically flag the result as HTML safe, since the raw value is unsafe to use inside HTML attributes.</p> <p>If you need to output JSON elsewhere in your HTML, you can just do something like this, as any unsafe characters (including quotation marks) will be automatically escaped for you:</p> <pre>&lt;div data-user-info=\"&lt;%= current_user.to_json %&gt;\"&gt;...&lt;/div&gt;</pre> <p>WARNING: this helper only works with valid JSON. Using this on non-JSON values will open up serious XSS vulnerabilities. For example, if you replace the <code>current_user.to_json</code> in the example above with user input instead, the browser will happily eval() that string as JavaScript.</p> <p>The escaping performed in this method is identical to those performed in the Active Support JSON encoder when <code>ActiveSupport.escape_html_entities_in_json</code> is set to true. Because this transformation is idempotent, this helper can be applied even if <code>ActiveSupport.escape_html_entities_in_json</code> is already true.</p> <p>Therefore, when you are unsure if <code>ActiveSupport.escape_html_entities_in_json</code> is enabled, or if you are unsure where your JSON string originated from, it is recommended that you always apply this helper (other libraries, such as the JSON gem, do not provide this kind of protection by default; also some gems might override <code>to_json</code> to bypass Active Support's encoder).</p> <div class=\"method-source-code\" id=\"json_escape-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/output_safety.rb, line 110\ndef json_escape(s)\n  result = s.to_s.gsub(JSON_ESCAPE_REGEXP, JSON_ESCAPE)\n  s.html_safe? ? result.html_safe : result\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","enumerable":"<h1 id=\"module-Enumerable\" class=\"module\"> module Enumerable </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exclude-3F\"> <span class=\"method-name\">exclude?</span><span class=\"method-args\">(object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The negative of the <code>Enumerable#include?</code>. Returns <code>true</code> if the collection does not include the object.</p> <div class=\"method-source-code\" id=\"exclude-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/enumerable.rb, line 60\ndef exclude?(object)\n  !include?(object)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_by\"> <span class=\"method-name\">index_by</span><span class=\"method-args\">() { |elem| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert an enumerable to a hash.</p> <pre>people.index_by(&amp;:login)\n  =&gt; { \"nextangle\" =&gt; &lt;Person ...&gt;, \"chade-\" =&gt; &lt;Person ...&gt;, ...}\npeople.index_by { |person| \"#{person.first_name} #{person.last_name}\" }\n  =&gt; { \"Chade- Fowlersburg-e\" =&gt; &lt;Person ...&gt;, \"David Heinemeier Hansson\" =&gt; &lt;Person ...&gt;, ...}</pre> <div class=\"method-source-code\" id=\"index_by-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/enumerable.rb, line 34\ndef index_by\n  if block_given?\n    Hash[map { |elem| [yield(elem), elem] }]\n  else\n    to_enum(:index_by) { size if respond_to?(:size) }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-many-3F\"> <span class=\"method-name\">many?</span><span class=\"method-args\">() { |element| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the enumerable has more than 1 element. Functionally equivalent to <code>enum.to_a.size &gt; 1</code>. Can be called with a block too, much like any?, so <code>people.many? { |p| p.age\n&gt; 26 }</code> returns <code>true</code> if more than one person is over 26.</p> <div class=\"method-source-code\" id=\"many-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/enumerable.rb, line 46\ndef many?\n  cnt = 0\n  if block_given?\n    any? do |element|\n      cnt += 1 if yield element\n      cnt &gt; 1\n    end\n  else\n    any? { (cnt += 1) &gt; 1 }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sum\"> <span class=\"method-name\">sum</span><span class=\"method-args\">(identity = 0, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calculates a sum from the elements.</p> <pre class=\"ruby\">payments.sum { |p| p.price * p.tax_rate }\npayments.sum(&amp;:price)\n</pre> <p>The latter is a shortcut for:</p> <pre class=\"ruby\">payments.inject(0) { |sum, p| sum + p.price }\n</pre> <p>It can also calculate the sum without the use of a block.</p> <pre>[5, 15, 10].sum # =&gt; 30\n['foo', 'bar'].sum # =&gt; \"foobar\"\n[[1, 2], [3, 1, 5]].sum =&gt; [1, 2, 3, 1, 5]</pre> <p>The default sum of an empty list is zero. You can override this default:</p> <pre class=\"ruby\">[].sum(Payment.new(0)) { |i| i.amount } # =&gt; Payment.new(0)\n</pre> <div class=\"method-source-code\" id=\"sum-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/enumerable.rb, line 20\ndef sum(identity = 0, &amp;block)\n  if block_given?\n    map(&amp;block).sum(identity)\n  else\n    inject { |sum, element| sum + element } || identity\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","falseclass":"<h1 id=\"class-FalseClass\" class=\"class\"> class FalseClass </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-blank-3F\"> <span class=\"method-name\">blank?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>false</code> is blank:</p> <pre class=\"ruby\">false.blank? # =&gt; true\n</pre> <p>@return [true]</p> <div class=\"method-source-code\" id=\"blank-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/blank.rb, line 64\ndef blank?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-duplicable-3F\"> <span class=\"method-name\">duplicable?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>false</code> is not duplicable:</p> <pre class=\"ruby\">false.duplicable? # =&gt; false\nfalse.dup         # =&gt; TypeError: can't dup FalseClass\n</pre> <div class=\"method-source-code\" id=\"duplicable-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/duplicable.rb, line 44\ndef duplicable?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_param\"> <span class=\"method-name\">to_param</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>self</code>.</p> <div class=\"method-source-code\" id=\"to_param-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/to_query.rb, line 32\ndef to_param\n  self\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","file":"<h1 id=\"class-File\" class=\"class\"> class File </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-atomic_write\"> <span class=\"method-name\">atomic_write</span><span class=\"method-args\">(file_name, temp_dir = Dir.tmpdir) { |temp_file| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Write to a file atomically. Useful for situations where you don't want other processes or threads to see half-written files.</p> <pre class=\"ruby\">File.atomic_write('important.file') do |file|\n  file.write('hello')\nend\n</pre> <p>If your temp directory is not on the same filesystem as the file you're trying to write, you can provide a different temporary directory.</p> <pre class=\"ruby\">File.atomic_write('/data/something.important', '/data/tmp') do |file|\n  file.write('hello')\nend\n</pre> <div class=\"method-source-code\" id=\"atomic_write-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/file/atomic.rb, line 17\ndef self.atomic_write(file_name, temp_dir = Dir.tmpdir)\n  require 'tempfile' unless defined?(Tempfile)\n  require 'fileutils' unless defined?(FileUtils)\n\n  temp_file = Tempfile.new(basename(file_name), temp_dir)\n  temp_file.binmode\n  yield temp_file\n  temp_file.close\n\n  if File.exist?(file_name)\n    # Get original file permissions\n    old_stat = stat(file_name)\n  else\n    # If not possible, probe which are the default permissions in the\n    # destination directory.\n    old_stat = probe_stat_in(dirname(file_name))\n  end\n\n  # Overwrite original file with temp file\n  FileUtils.mv(temp_file.path, file_name)\n\n  # Set correct permissions on new file\n  begin\n    chown(old_stat.uid, old_stat.gid, file_name)\n    # This operation will affect filesystem ACL's\n    chmod(old_stat.mode, file_name)\n  rescue Errno::EPERM, Errno::EACCES\n    # Changing file ownership failed, moving on.\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","hash":"<h1 id=\"class-Hash\" class=\"class\"> class Hash </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-from_trusted_xml\"> <span class=\"method-name\">from_trusted_xml</span><span class=\"method-args\">(xml)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Builds a <a href=\"hash\">Hash</a> from XML just like <code>Hash.from_xml</code>, but also allows <a href=\"symbol\">Symbol</a> and YAML.</p> <div class=\"method-source-code\" id=\"from_trusted_xml-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/conversions.rb, line 115\ndef from_trusted_xml(xml)\n  from_xml xml, []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-from_xml\"> <span class=\"method-name\">from_xml</span><span class=\"method-args\">(xml, disallowed_types = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"hash\">Hash</a> containing a collection of pairs when the key is the node name and the value is its content</p> <pre class=\"ruby\">xml = &lt;&lt;-XML\n  &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n    &lt;hash&gt;\n      &lt;foo type=\"integer\"&gt;1&lt;/foo&gt;\n      &lt;bar type=\"integer\"&gt;2&lt;/bar&gt;\n    &lt;/hash&gt;\nXML\n\nhash = Hash.from_xml(xml)\n# =&gt; {\"hash\"=&gt;{\"foo\"=&gt;1, \"bar\"=&gt;2}}\n</pre> <p><code>DisallowedType</code> is raised if the XML contains attributes with <code>type=\"yaml\"</code> or <code>type=\"symbol\"</code>. Use <code>Hash.from_trusted_xml</code> to parse this XML.</p> <div class=\"method-source-code\" id=\"from_xml-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/conversions.rb, line 110\ndef from_xml(xml, disallowed_types = nil)\n  ActiveSupport::XMLConverter.new(xml, disallowed_types).to_h\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_valid_keys\"> <span class=\"method-name\">assert_valid_keys</span><span class=\"method-args\">(*valid_keys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validate all keys in a hash match <code>*valid_keys</code>, raising ArgumentError on a mismatch.</p> <p>Note that keys are treated differently than <a href=\"activesupport/hashwithindifferentaccess\">HashWithIndifferentAccess</a>, meaning that string and symbol keys will not match.</p> <pre class=\"ruby\">{ name: 'Rob', years: '28' }.assert_valid_keys(:name, :age) # =&gt; raises \"ArgumentError: Unknown key: :years. Valid keys are: :name, :age\"\n{ name: 'Rob', age: '28' }.assert_valid_keys('name', 'age') # =&gt; raises \"ArgumentError: Unknown key: :name. Valid keys are: 'name', 'age'\"\n{ name: 'Rob', age: '28' }.assert_valid_keys(:name, :age)   # =&gt; passes, raises nothing\n</pre> <div class=\"method-source-code\" id=\"assert_valid_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 71\ndef assert_valid_keys(*valid_keys)\n  valid_keys.flatten!\n  each_key do |k|\n    unless valid_keys.include?(k)\n      raise ArgumentError.new(\"Unknown key: #{k.inspect}. Valid keys are: #{valid_keys.map(&amp;:inspect).join(', ')}\")\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compact\"> <span class=\"method-name\">compact</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash with non <code>nil</code> values.</p> <pre class=\"ruby\">hash = { a: true, b: false, c: nil}\nhash.compact # =&gt; { a: true, b: false}\nhash # =&gt; { a: true, b: false, c: nil}\n{ c: nil }.compact # =&gt; {}\n</pre> <div class=\"method-source-code\" id=\"compact-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/compact.rb, line 8\ndef compact\n  self.select { |_, value| !value.nil? }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compact-21\"> <span class=\"method-name\">compact!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces current hash with non <code>nil</code> values.</p> <pre class=\"ruby\">hash = { a: true, b: false, c: nil}\nhash.compact! # =&gt; { a: true, b: false}\nhash # =&gt; { a: true, b: false}\n</pre> <div class=\"method-source-code\" id=\"compact-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/compact.rb, line 17\ndef compact!\n  self.reject! { |_, value| value.nil? }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_dup\"> <span class=\"method-name\">deep_dup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a deep copy of hash.</p> <pre class=\"ruby\">hash = { a: { b: 'b' } }\ndup  = hash.deep_dup\ndup[:a][:c] = 'c'\n\nhash[:a][:c] # =&gt; nil\ndup[:a][:c]  # =&gt; \"c\"\n</pre> <div class=\"method-source-code\" id=\"deep_dup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/deep_dup.rb, line 41\ndef deep_dup\n  each_with_object(dup) do |(key, value), hash|\n    hash[key.deep_dup] = value.deep_dup\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_merge\"> <span class=\"method-name\">deep_merge</span><span class=\"method-args\">(other_hash, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new hash with <code>self</code> and <code>other_hash</code> merged recursively.</p> <pre class=\"ruby\">h1 = { a: true, b: { c: [1, 2, 3] } }\nh2 = { a: false, b: { x: [3, 4, 5] } }\n\nh1.deep_merge(h2) #=&gt; { a: false, b: { c: [1, 2, 3], x: [3, 4, 5] } }\n</pre> <p>Like with Hash#merge in the standard library, a block can be provided to merge values:</p> <pre class=\"ruby\">h1 = { a: 100, b: 200, c: { c1: 100 } }\nh2 = { b: 250, c: { c1: 200 } }\nh1.deep_merge(h2) { |key, this_val, other_val| this_val + other_val }\n# =&gt; { a: 100, b: 450, c: { c1: 300 } }\n</pre> <div class=\"method-source-code\" id=\"deep_merge-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/deep_merge.rb, line 16\ndef deep_merge(other_hash, &amp;block)\n  dup.deep_merge!(other_hash, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_merge-21\"> <span class=\"method-name\">deep_merge!</span><span class=\"method-args\">(other_hash, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>deep_merge</code>, but modifies <code>self</code>.</p> <div class=\"method-source-code\" id=\"deep_merge-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/deep_merge.rb, line 21\ndef deep_merge!(other_hash, &amp;block)\n  other_hash.each_pair do |current_key, other_value|\n    this_value = self[current_key]\n\n    self[current_key] = if this_value.is_a?(Hash) &amp;&amp; other_value.is_a?(Hash)\n      this_value.deep_merge(other_value, &amp;block)\n    else\n      if block_given? &amp;&amp; key?(current_key)\n        block.call(current_key, this_value, other_value)\n      else\n        other_value\n      end\n    end\n  end\n\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_stringify_keys\"> <span class=\"method-name\">deep_stringify_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new hash with all keys converted to strings. This includes the keys from the root hash and from all nested hashes and arrays.</p> <pre class=\"ruby\">hash = { person: { name: 'Rob', age: '28' } }\n\nhash.deep_stringify_keys\n# =&gt; {\"person\"=&gt;{\"name\"=&gt;\"Rob\", \"age\"=&gt;\"28\"}}\n</pre> <div class=\"method-source-code\" id=\"deep_stringify_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 107\ndef deep_stringify_keys\n  deep_transform_keys{ |key| key.to_s }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_stringify_keys-21\"> <span class=\"method-name\">deep_stringify_keys!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destructively convert all keys to strings. This includes the keys from the root hash and from all nested hashes and arrays.</p> <div class=\"method-source-code\" id=\"deep_stringify_keys-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 114\ndef deep_stringify_keys!\n  deep_transform_keys!{ |key| key.to_s }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_symbolize_keys\"> <span class=\"method-name\">deep_symbolize_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new hash with all keys converted to symbols, as long as they respond to <code>to_sym</code>. This includes the keys from the root hash and from all nested hashes and arrays.</p> <pre class=\"ruby\">hash = { 'person' =&gt; { 'name' =&gt; 'Rob', 'age' =&gt; '28' } }\n\nhash.deep_symbolize_keys\n# =&gt; {:person=&gt;{:name=&gt;\"Rob\", :age=&gt;\"28\"}}\n</pre> <div class=\"method-source-code\" id=\"deep_symbolize_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 126\ndef deep_symbolize_keys\n  deep_transform_keys{ |key| key.to_sym rescue key }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_symbolize_keys-21\"> <span class=\"method-name\">deep_symbolize_keys!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destructively convert all keys to symbols, as long as they respond to <code>to_sym</code>. This includes the keys from the root hash and from all nested hashes and arrays.</p> <div class=\"method-source-code\" id=\"deep_symbolize_keys-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 133\ndef deep_symbolize_keys!\n  deep_transform_keys!{ |key| key.to_sym rescue key }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_transform_keys\"> <span class=\"method-name\">deep_transform_keys</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new hash with all keys converted by the block operation. This includes the keys from the root hash and from all nested hashes and arrays.</p> <pre class=\"ruby\">hash = { person: { name: 'Rob', age: '28' } }\n\nhash.deep_transform_keys{ |key| key.to_s.upcase }\n# =&gt; {\"PERSON\"=&gt;{\"NAME\"=&gt;\"Rob\", \"AGE\"=&gt;\"28\"}}\n</pre> <div class=\"method-source-code\" id=\"deep_transform_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 88\ndef deep_transform_keys(&amp;block)\n  _deep_transform_keys_in_object(self, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_transform_keys-21\"> <span class=\"method-name\">deep_transform_keys!</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destructively convert all keys by using the block operation. This includes the keys from the root hash and from all nested hashes and arrays.</p> <div class=\"method-source-code\" id=\"deep_transform_keys-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 95\ndef deep_transform_keys!(&amp;block)\n  _deep_transform_keys_in_object!(self, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-except\"> <span class=\"method-name\">except</span><span class=\"method-args\">(*keys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash that includes everything but the given keys.</p> <pre class=\"ruby\">hash = { a: true, b: false, c: nil}\nhash.except(:c) # =&gt; { a: true, b: false}\nhash # =&gt; { a: true, b: false, c: nil}\n</pre> <p>This is useful for limiting a set of parameters to everything but a few known toggles:</p> <pre class=\"ruby\">@person.update(params[:person].except(:admin))\n</pre> <div class=\"method-source-code\" id=\"except-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/except.rb, line 9\ndef except(*keys)\n  dup.except!(*keys)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-except-21\"> <span class=\"method-name\">except!</span><span class=\"method-args\">(*keys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces the hash without the given keys.</p> <pre class=\"ruby\">hash = { a: true, b: false, c: nil}\nhash.except!(:c) # =&gt; { a: true, b: false}\nhash # =&gt; { a: true, b: false }\n</pre> <div class=\"method-source-code\" id=\"except-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/except.rb, line 17\ndef except!(*keys)\n  keys.each { |key| delete(key) }\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extract-21\"> <span class=\"method-name\">extract!</span><span class=\"method-args\">(*keys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes and returns the key/value pairs matching the given keys.</p> <pre class=\"ruby\">{ a: 1, b: 2, c: 3, d: 4 }.extract!(:a, :b) # =&gt; {:a=&gt;1, :b=&gt;2}\n{ a: 1, b: 2 }.extract!(:a, :x)             # =&gt; {:a=&gt;1}\n</pre> <div class=\"method-source-code\" id=\"extract-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/slice.rb, line 45\ndef extract!(*keys)\n  keys.each_with_object(self.class.new) { |key, result| result[key] = delete(key) if has_key?(key) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extractable_options-3F\"> <span class=\"method-name\">extractable_options?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>By default, only instances of <a href=\"hash\">Hash</a> itself are extractable. Subclasses of <a href=\"hash\">Hash</a> may implement this method and return true to declare themselves as extractable. If a <a href=\"hash\">Hash</a> is extractable, <a href=\"array#method-i-extract_options-21\">Array#extract_options!</a> pops it from the <a href=\"array\">Array</a> when it is the last element of the <a href=\"array\">Array</a>.</p> <div class=\"method-source-code\" id=\"extractable_options-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/array/extract_options.rb, line 7\ndef extractable_options?\n  instance_of?(Hash)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-nested_under_indifferent_access\"> <span class=\"method-name\">nested_under_indifferent_access</span><span class=\"method-args\">()</span> </div> <div class=\"method-description\"> <p>Called when object is nested under an object that receives <a href=\"hash#method-i-with_indifferent_access\">with_indifferent_access</a>. This method will be called on the current object by the enclosing object and is aliased to <a href=\"hash#method-i-with_indifferent_access\">with_indifferent_access</a> by default. Subclasses of <a href=\"hash\">Hash</a> may overwrite this method to return <code>self</code> if converting to an <code>ActiveSupport::HashWithIndifferentAccess</code> would not be desirable.</p> <pre class=\"ruby\">b = { b: 1 }\n{ a: b }.with_indifferent_access['a'] # calls b.nested_under_indifferent_access\n# =&gt; {\"b\"=&gt;1}\n</pre> </div> <div class=\"aliases\"> Alias for: <a href=\"hash#method-i-with_indifferent_access\">with_indifferent_access</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reverse_merge\"> <span class=\"method-name\">reverse_merge</span><span class=\"method-args\">(other_hash)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Merges the caller into <code>other_hash</code>. For example,</p> <pre class=\"ruby\">options = options.reverse_merge(size: 25, velocity: 10)\n</pre> <p>is equivalent to</p> <pre class=\"ruby\">options = { size: 25, velocity: 10 }.merge(options)\n</pre> <p>This is particularly useful for initializing an options hash with default values.</p> <div class=\"method-source-code\" id=\"reverse_merge-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/reverse_merge.rb, line 12\ndef reverse_merge(other_hash)\n  other_hash.merge(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reverse_merge-21\"> <span class=\"method-name\">reverse_merge!</span><span class=\"method-args\">(other_hash)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destructive <code>reverse_merge</code>.</p> <div class=\"method-source-code\" id=\"reverse_merge-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/reverse_merge.rb, line 17\ndef reverse_merge!(other_hash)\n  # right wins if there is no left\n  merge!( other_hash ){|key,left,right| left }\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"hash#method-i-reverse_update\">reverse_update</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-reverse_update\"> <span class=\"method-name\">reverse_update</span><span class=\"method-args\">(other_hash)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hash#method-i-reverse_merge-21\">reverse_merge!</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-slice\"> <span class=\"method-name\">slice</span><span class=\"method-args\">(*keys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Slice a hash to include only the given keys. Returns a hash containing the given keys.</p> <pre class=\"ruby\">{ a: 1, b: 2, c: 3, d: 4 }.slice(:a, :b)\n# =&gt; {:a=&gt;1, :b=&gt;2}\n</pre> <p>This is useful for limiting an options hash to valid keys before passing to a method:</p> <pre class=\"ruby\">def search(criteria = {})\n  criteria.assert_valid_keys(:mass, :velocity, :time)\nend\n\nsearch(options.slice(:mass, :velocity, :time))\n</pre> <p>If you have an array of keys you want to limit to, you should splat them:</p> <pre class=\"ruby\">valid_keys = [:mass, :velocity, :time]\nsearch(options.slice(*valid_keys))\n</pre> <div class=\"method-source-code\" id=\"slice-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/slice.rb, line 21\ndef slice(*keys)\n  keys.map! { |key| convert_key(key) } if respond_to?(:convert_key, true)\n  keys.each_with_object(self.class.new) { |k, hash| hash[k] = self[k] if has_key?(k) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-slice-21\"> <span class=\"method-name\">slice!</span><span class=\"method-args\">(*keys)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces the hash with only the given keys. Returns a hash containing the removed key/value pairs.</p> <pre class=\"ruby\">{ a: 1, b: 2, c: 3, d: 4 }.slice!(:a, :b)\n# =&gt; {:c=&gt;3, :d=&gt;4}\n</pre> <div class=\"method-source-code\" id=\"slice-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/slice.rb, line 31\ndef slice!(*keys)\n  keys.map! { |key| convert_key(key) } if respond_to?(:convert_key, true)\n  omit = slice(*self.keys - keys)\n  hash = slice(*keys)\n  hash.default      = default\n  hash.default_proc = default_proc if default_proc\n  replace(hash)\n  omit\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stringify_keys\"> <span class=\"method-name\">stringify_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new hash with all keys converted to strings.</p> <pre class=\"ruby\">hash = { name: 'Rob', age: '28' }\n\nhash.stringify_keys\n# =&gt; {\"name\"=&gt;\"Rob\", \"age\"=&gt;\"28\"}\n</pre> <div class=\"method-source-code\" id=\"stringify_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 33\ndef stringify_keys\n  transform_keys{ |key| key.to_s }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-stringify_keys-21\"> <span class=\"method-name\">stringify_keys!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destructively convert all keys to strings. Same as <code>stringify_keys</code>, but modifies <code>self</code>.</p> <div class=\"method-source-code\" id=\"stringify_keys-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 39\ndef stringify_keys!\n  transform_keys!{ |key| key.to_s }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-symbolize_keys\"> <span class=\"method-name\">symbolize_keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new hash with all keys converted to symbols, as long as they respond to <code>to_sym</code>.</p> <pre class=\"ruby\">hash = { 'name' =&gt; 'Rob', 'age' =&gt; '28' }\n\nhash.symbolize_keys\n# =&gt; {:name=&gt;\"Rob\", :age=&gt;\"28\"}\n</pre> <div class=\"method-source-code\" id=\"symbolize_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 50\ndef symbolize_keys\n  transform_keys{ |key| key.to_sym rescue key }\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"hash#method-i-to_options\">to_options</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-symbolize_keys-21\"> <span class=\"method-name\">symbolize_keys!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destructively convert all keys to symbols, as long as they respond to <code>to_sym</code>. Same as <code>symbolize_keys</code>, but modifies <code>self</code>.</p> <div class=\"method-source-code\" id=\"symbolize_keys-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 57\ndef symbolize_keys!\n  transform_keys!{ |key| key.to_sym rescue key }\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"hash#method-i-to_options-21\">to_options!</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_options\"> <span class=\"method-name\">to_options</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hash#method-i-symbolize_keys\">symbolize_keys</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_options-21\"> <span class=\"method-name\">to_options!</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hash#method-i-symbolize_keys-21\">symbolize_keys!</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_param\"> <span class=\"method-name\">to_param</span><span class=\"method-args\">(namespace = nil)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"hash#method-i-to_query\">to_query</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_query\"> <span class=\"method-name\">to_query</span><span class=\"method-args\">(namespace = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string representation of the receiver suitable for use as a URL query string:</p> <pre class=\"ruby\">{name: 'David', nationality: 'Danish'}.to_query\n# =&gt; \"name=David&amp;nationality=Danish\"\n</pre> <p>An optional namespace can be passed to enclose key names:</p> <pre class=\"ruby\">{name: 'David', nationality: 'Danish'}.to_query('user')\n# =&gt; \"user%5Bname%5D=David&amp;user%5Bnationality%5D=Danish\"\n</pre> <p>The string pairs “key=value” that conform the query string are sorted lexicographically in ascending order.</p> <p>This method is also aliased as <code>to_param</code>.</p> <div class=\"method-source-code\" id=\"to_query-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/to_query.rb, line 75\ndef to_query(namespace = nil)\n  collect do |key, value|\n    unless (value.is_a?(Hash) || value.is_a?(Array)) &amp;&amp; value.empty?\n      value.to_query(namespace ? \"#{namespace}[#{key}]\" : key)\n    end\n  end.compact.sort! * '&amp;'\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"hash#method-i-to_param\">to_param</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xml\"> <span class=\"method-name\">to_xml</span><span class=\"method-args\">(options = {}) { |builder| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a string containing an XML representation of its receiver:</p> <pre class=\"ruby\">{ foo: 1, bar: 2 }.to_xml\n# =&gt;\n# &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n# &lt;hash&gt;\n#   &lt;foo type=\"integer\"&gt;1&lt;/foo&gt;\n#   &lt;bar type=\"integer\"&gt;2&lt;/bar&gt;\n# &lt;/hash&gt;\n</pre> <p>To do so, the method loops over the pairs and builds nodes that depend on the <em>values</em>. Given a pair <code>key</code>, <code>value</code>:</p> <ul>\n<li> <p>If <code>value</code> is a hash there's a recursive call with <code>key</code> as <code>:root</code>.</p> </li>\n<li> <p>If <code>value</code> is an array there's a recursive call with <code>key</code> as <code>:root</code>, and <code>key</code> singularized as <code>:children</code>.</p> </li>\n<li> <p>If <code>value</code> is a callable object it must expect one or two arguments. Depending on the arity, the callable is invoked with the <code>options</code> hash as first argument with <code>key</code> as <code>:root</code>, and <code>key</code> singularized as second argument. The callable can add nodes by using <code>options[:builder]</code>.</p> <pre class=\"ruby\">'foo'.to_xml(lambda { |options, key| options[:builder].b(key) })\n# =&gt; \"&lt;b&gt;foo&lt;/b&gt;\"\n</pre> </li>\n<li> <p>If <code>value</code> responds to <code>to_xml</code> the method is invoked with <code>key</code> as <code>:root</code>.</p> <pre class=\"ruby\">class Foo\n  def to_xml(options)\n    options[:builder].bar 'fooing!'\n  end\nend\n\n{ foo: Foo.new }.to_xml(skip_instruct: true)\n# =&gt;\n# &lt;hash&gt;\n#   &lt;bar&gt;fooing!&lt;/bar&gt;\n# &lt;/hash&gt;\n</pre> </li>\n<li> <p>Otherwise, a node with <code>key</code> as tag is created with a string representation of <code>value</code> as text node. If <code>value</code> is <code>nil</code> an attribute “nil” set to “true” is added. Unless the option <code>:skip_types</code> exists and is true, an attribute “type” is added as well according to the following mapping:</p> <pre class=\"ruby\">XML_TYPE_NAMES = {\n  \"Symbol\"     =&gt; \"symbol\",\n  \"Fixnum\"     =&gt; \"integer\",\n  \"Bignum\"     =&gt; \"integer\",\n  \"BigDecimal\" =&gt; \"decimal\",\n  \"Float\"      =&gt; \"float\",\n  \"TrueClass\"  =&gt; \"boolean\",\n  \"FalseClass\" =&gt; \"boolean\",\n  \"Date\"       =&gt; \"date\",\n  \"DateTime\"   =&gt; \"dateTime\",\n  \"Time\"       =&gt; \"dateTime\"\n}\n</pre> </li>\n</ul> <p>By default the root node is “hash”, but that's configurable via the <code>:root</code> option.</p> <p>The default XML builder is a fresh instance of <code>Builder::XmlMarkup</code>. You can configure your own builder with the <code>:builder</code> option. The method also accepts options like <code>:dasherize</code> and friends, they are forwarded to the builder.</p> <div class=\"method-source-code\" id=\"to_xml-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/conversions.rb, line 74\ndef to_xml(options = {})\n  require 'active_support/builder' unless defined?(Builder)\n\n  options = options.dup\n  options[:indent]  ||= 2\n  options[:root]    ||= 'hash'\n  options[:builder] ||= Builder::XmlMarkup.new(indent: options[:indent])\n\n  builder = options[:builder]\n  builder.instruct! unless options.delete(:skip_instruct)\n\n  root = ActiveSupport::XmlMini.rename_key(options[:root].to_s, options)\n\n  builder.tag!(root) do\n    each { |key, value| ActiveSupport::XmlMini.to_tag(key, value, options) }\n    yield builder if block_given?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transform_keys\"> <span class=\"method-name\">transform_keys</span><span class=\"method-args\">() { |key| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new hash with all keys converted using the block operation.</p> <pre class=\"ruby\">hash = { name: 'Rob', age: '28' }\n\nhash.transform_keys{ |key| key.to_s.upcase }\n# =&gt; {\"NAME\"=&gt;\"Rob\", \"AGE\"=&gt;\"28\"}\n</pre> <div class=\"method-source-code\" id=\"transform_keys-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 8\ndef transform_keys\n  return enum_for(:transform_keys) unless block_given?\n  result = self.class.new\n  each_key do |key|\n    result[yield(key)] = self[key]\n  end\n  result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transform_keys-21\"> <span class=\"method-name\">transform_keys!</span><span class=\"method-args\">() { |key| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destructively convert all keys using the block operations. Same as <a href=\"hash#method-i-transform_keys\">#transform_keys</a> but modifies <code>self</code>.</p> <div class=\"method-source-code\" id=\"transform_keys-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/keys.rb, line 19\ndef transform_keys!\n  return enum_for(:transform_keys!) unless block_given?\n  keys.each do |key|\n    self[yield(key)] = delete(key)\n  end\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transform_values\"> <span class=\"method-name\">transform_values</span><span class=\"method-args\">() { |value| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new hash with the results of running <code>block</code> once for every value. The keys are unchanged.</p> <pre class=\"ruby\">{ a: 1, b: 2, c: 3 }.transform_values { |x| x * 2 }\n# =&gt; { a: 2, b: 4, c: 6 }\n</pre> <div class=\"method-source-code\" id=\"transform_values-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/transform_values.rb, line 7\ndef transform_values\n  return enum_for(:transform_values) unless block_given?\n  result = self.class.new\n  each do |key, value|\n    result[key] = yield(value)\n  end\n  result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transform_values-21\"> <span class=\"method-name\">transform_values!</span><span class=\"method-args\">() { |value| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Destructive <code>transform_values</code></p> <div class=\"method-source-code\" id=\"transform_values-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/transform_values.rb, line 17\ndef transform_values!\n  return enum_for(:transform_values!) unless block_given?\n  each do |key, value|\n    self[key] = yield(value)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_indifferent_access\"> <span class=\"method-name\">with_indifferent_access</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an <code>ActiveSupport::HashWithIndifferentAccess</code> out of its receiver:</p> <pre class=\"ruby\">{ a: 1 }.with_indifferent_access['a'] # =&gt; 1\n</pre> <div class=\"method-source-code\" id=\"with_indifferent_access-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 8\ndef with_indifferent_access\n  ActiveSupport::HashWithIndifferentAccess.new_from_hash_copying_default(self)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"hash#method-i-nested_under_indifferent_access\">nested_under_indifferent_access</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","integer":"<h1 id=\"class-Integer\" class=\"class\"> class Integer </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-month\"> <span class=\"method-name\">month</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"integer#method-i-months\">months</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-months\"> <span class=\"method-name\">months</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enables the use of time calculations and declarations, like <code>45.minutes + 2.hours + 4.years</code>.</p> <p>These methods use <a href=\"time#method-i-advance\">Time#advance</a> for precise date calculations when using <code>from_now</code>, <code>ago</code>, etc. as well as adding or subtracting their results from a <a href=\"time\">Time</a> object.</p> <pre class=\"ruby\"># equivalent to Time.now.advance(months: 1)\n1.month.from_now\n\n# equivalent to Time.now.advance(years: 2)\n2.years.from_now\n\n# equivalent to Time.now.advance(months: 4, years: 5)\n(4.months + 5.years).from_now\n</pre> <div class=\"method-source-code\" id=\"months-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/integer/time.rb, line 20\ndef months\n  ActiveSupport::Duration.new(self * 30.days, [[:months, self]])\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"integer#method-i-month\">month</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-multiple_of-3F\"> <span class=\"method-name\">multiple_of?</span><span class=\"method-args\">(number)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Check whether the integer is evenly divisible by the argument.</p> <pre class=\"ruby\">0.multiple_of?(0)  # =&gt; true\n6.multiple_of?(5)  # =&gt; false\n10.multiple_of?(2) # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"multiple_of-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/integer/multiple.rb, line 7\ndef multiple_of?(number)\n  number != 0 ? self % number == 0 : zero?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ordinal\"> <span class=\"method-name\">ordinal</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Ordinal returns the suffix used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.</p> <pre class=\"ruby\">1.ordinal     # =&gt; \"st\"\n2.ordinal     # =&gt; \"nd\"\n1002.ordinal  # =&gt; \"nd\"\n1003.ordinal  # =&gt; \"rd\"\n-11.ordinal   # =&gt; \"th\"\n-1001.ordinal # =&gt; \"st\"\n</pre> <div class=\"method-source-code\" id=\"ordinal-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/integer/inflections.rb, line 26\ndef ordinal\n  ActiveSupport::Inflector.ordinal(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ordinalize\"> <span class=\"method-name\">ordinalize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Ordinalize turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.</p> <pre class=\"ruby\">1.ordinalize     # =&gt; \"1st\"\n2.ordinalize     # =&gt; \"2nd\"\n1002.ordinalize  # =&gt; \"1002nd\"\n1003.ordinalize  # =&gt; \"1003rd\"\n-11.ordinalize   # =&gt; \"-11th\"\n-1001.ordinalize # =&gt; \"-1001st\"\n</pre> <div class=\"method-source-code\" id=\"ordinalize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/integer/inflections.rb, line 13\ndef ordinalize\n  ActiveSupport::Inflector.ordinalize(self)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-year\"> <span class=\"method-name\">year</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"integer#method-i-years\">years</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-years\"> <span class=\"method-name\">years</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"years-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/integer/time.rb, line 25\ndef years\n  ActiveSupport::Duration.new(self * 365.25.days, [[:years, self]])\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"integer#method-i-year\">year</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","kernel":"<h1 id=\"module-Kernel\" class=\"module\"> module Kernel </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-breakpoint\"> <span class=\"method-name\">breakpoint</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"kernel#method-i-debugger\">debugger</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-capture\"> <span class=\"method-name\">capture</span><span class=\"method-args\">(stream) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Captures the given stream and returns it:</p> <pre class=\"ruby\">stream = capture(:stdout) { puts 'notice' }\nstream # =&gt; \"notice\\n\"\n\nstream = capture(:stderr) { warn 'error' }\nstream # =&gt; \"error\\n\"\n</pre> <p>even for subprocesses:</p> <pre class=\"ruby\">stream = capture(:stdout) { system('echo notice') }\nstream # =&gt; \"notice\\n\"\n\nstream = capture(:stderr) { system('echo error 1&gt;&amp;2') }\nstream # =&gt; \"error\\n\"\n</pre> <div class=\"method-source-code\" id=\"capture-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 89\ndef capture(stream)\n  ActiveSupport::Deprecation.warn(\n    \"`#capture(stream)` is deprecated and will be removed in the next release.\"\n  ) #not thread-safe\n  stream = stream.to_s\n  captured_stream = Tempfile.new(stream)\n  stream_io = eval(\"$#{stream}\")\n  origin_stream = stream_io.dup\n  stream_io.reopen(captured_stream)\n\n  yield\n\n  stream_io.rewind\n  return captured_stream.read\nensure\n  captured_stream.close\n  captured_stream.unlink\n  stream_io.reopen(origin_stream)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"kernel#method-i-silence\">silence</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-class_eval\"> <span class=\"method-name\">class_eval</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"kernel#method-i-class_eval\">#class_eval</a> on an object acts like singleton_class.class_eval.</p> <div class=\"method-source-code\" id=\"class_eval-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/singleton_class.rb, line 3\ndef class_eval(*args, &amp;block)\n  singleton_class.class_eval(*args, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-concern\"> <span class=\"method-name\">concern</span><span class=\"method-args\">(topic, &amp;module_definition)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A shortcut to define a toplevel concern, not within a module.</p> <p>See <a href=\"module/concerning\">Module::Concerning</a> for more.</p> <div class=\"method-source-code\" id=\"concern-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/concern.rb, line 7\ndef concern(topic, &amp;module_definition)\n  Object.concern topic, &amp;module_definition\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-debugger\"> <span class=\"method-name\">debugger</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Starts a debugging session if the <code>debugger</code> gem has been loaded (call rails server –debugger to do load it).</p> <div class=\"method-source-code\" id=\"debugger-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/debugger.rb, line 4\ndef debugger\n  message = \"\\n***** Debugger requested, but was not available (ensure the debugger gem is listed in Gemfile/installed as gem): Start server with --debugger to enable *****\\n\"\n  defined?(Rails.logger) ? Rails.logger.info(message) : $stderr.puts(message)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"kernel#method-i-breakpoint\">breakpoint</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-enable_warnings\"> <span class=\"method-name\">enable_warnings</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets $VERBOSE to <code>true</code> for the duration of the block and back to its original value afterwards.</p> <div class=\"method-source-code\" id=\"enable_warnings-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 20\ndef enable_warnings\n  with_warnings(true) { yield }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quietly\"> <span class=\"method-name\">quietly</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Silences both STDOUT and STDERR, even for subprocesses.</p> <pre class=\"ruby\">quietly { system 'bundle install' }\n</pre> <p>This method is not thread-safe.</p> <div class=\"method-source-code\" id=\"quietly-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 115\ndef quietly\n  ActiveSupport::Deprecation.warn(\n    \"`#quietly` is deprecated and will be removed in the next release.\"\n  ) #not thread-safe\n  silence_stream(STDOUT) do\n    silence_stream(STDERR) do\n      yield\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-silence\"> <span class=\"method-name\">silence</span><span class=\"method-args\">(stream)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"kernel#method-i-capture\">capture</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-silence_stream\"> <span class=\"method-name\">silence_stream</span><span class=\"method-args\">(stream) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Deprecated : this method is not thread safe Silences any stream for the duration of the block.</p> <pre class=\"ruby\">silence_stream(STDOUT) do\n  puts 'This will never be seen'\nend\n\nputs 'But this will'\n</pre> <p>This method is not thread-safe.</p> <div class=\"method-source-code\" id=\"silence_stream-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 51\ndef silence_stream(stream)\n  old_stream = stream.dup\n  stream.reopen(RbConfig::CONFIG['host_os'] =~ /mswin|mingw/ ? 'NUL:' : '/dev/null')\n  stream.sync = true\n  yield\nensure\n  stream.reopen(old_stream)\n  old_stream.close\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-silence_warnings\"> <span class=\"method-name\">silence_warnings</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets $VERBOSE to nil for the duration of the block and back to its original value afterwards.</p> <pre class=\"ruby\">silence_warnings do\n  value = noisy_call # no warning voiced\nend\n\nnoisy_call # warning voiced\n</pre> <div class=\"method-source-code\" id=\"silence_warnings-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 14\ndef silence_warnings\n  with_warnings(nil) { yield }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-suppress\"> <span class=\"method-name\">suppress</span><span class=\"method-args\">(*exception_classes) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Blocks and ignores any exception passed as argument if raised within the block.</p> <pre class=\"ruby\">suppress(ZeroDivisionError) do\n  1/0\n  puts 'This code is NOT reached'\nend\n\nputs 'This code gets executed and nothing related to ZeroDivisionError was seen'\n</pre> <div class=\"method-source-code\" id=\"suppress-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 69\ndef suppress(*exception_classes)\n  yield\nrescue *exception_classes\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_warnings\"> <span class=\"method-name\">with_warnings</span><span class=\"method-args\">(flag) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets $VERBOSE for the duration of the block and back to its original value afterwards.</p> <div class=\"method-source-code\" id=\"with_warnings-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 26\ndef with_warnings(flag)\n  old_verbose, $VERBOSE = $VERBOSE, flag\n  yield\nensure\n  $VERBOSE = old_verbose\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","loaderror":"<h1 id=\"class-LoadError\" class=\"class\"> class LoadError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"REGEXPS\">REGEXPS </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-is_missing-3F\"> <span class=\"method-name\">is_missing?</span><span class=\"method-args\">(location)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the given path name (except perhaps for the “.rb” extension) is the missing file which caused the exception to be raised.</p> <div class=\"method-source-code\" id=\"is_missing-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/load_error.rb, line 23\ndef is_missing?(location)\n  location.sub(/\\.rb$/, '') == path.sub(/\\.rb$/, '')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-path\"> <span class=\"method-name\">path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the path which was unable to be loaded.</p> <div class=\"method-source-code\" id=\"path-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/load_error.rb, line 11\ndef path\n  @path ||= begin\n    REGEXPS.find do |regex|\n      message =~ regex\n    end\n    $1\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","loggersilence":"<h1 id=\"module-LoggerSilence\" class=\"module\"> module LoggerSilence </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-silence\"> <span class=\"method-name\">silence</span><span class=\"method-args\">(temporary_level = Logger::ERROR) { |self| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Silences the logger for the duration of the block.</p> <div class=\"method-source-code\" id=\"silence-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/logger_silence.rb, line 12\ndef silence(temporary_level = Logger::ERROR)\n  if silencer\n    begin\n      old_logger_level, self.level = level, temporary_level\n      yield self\n    ensure\n      self.level = old_logger_level\n    end\n  else\n    yield self\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","method":"<h1 id=\"class-Method\" class=\"class\"> class Method </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-duplicable-3F\"> <span class=\"method-name\">duplicable?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Methods are not duplicable:</p> <pre class=\"ruby\">method(:puts).duplicable? # =&gt; false\nmethod(:puts).dup         # =&gt; TypeError: allocator undefined for Method\n</pre> <div class=\"method-source-code\" id=\"duplicable-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/duplicable.rb, line 100\ndef duplicable?\n  false\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","mime":"<h1 id=\"module-Mime\" class=\"module\"> module Mime </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ALL\">ALL </dt>\n<dd>\n<p>Create Mime::ALL but do not add it to the <a href=\"mime#SET\">SET</a>.</p> </dd>\n<dt id=\"EXTENSION_LOOKUP\">EXTENSION_LOOKUP </dt>\n\n<dt id=\"LOOKUP\">LOOKUP </dt>\n\n<dt id=\"SET\">SET </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 29\ndef [](type)\n  return type if type.is_a?(Type)\n  Type.lookup_by_extension(type)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-fetch\"> <span class=\"method-name\">fetch</span><span class=\"method-args\">(type) { |k| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"fetch-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 34\ndef fetch(type)\n  return type if type.is_a?(Type)\n  EXTENSION_LOOKUP.fetch(type.to_s) { |k| yield k }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","mime/type":"<h1 id=\"class-Mime::Type\" class=\"class\"> class Mime::Type </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>Encapsulates the notion of a mime type. Can be used at render time, for example, with:</p> <pre class=\"ruby\">class PostsController &lt; ActionController::Base\n  def show\n    @post = Post.find(params[:id])\n\n    respond_to do |format|\n      format.html\n      format.ics { render text: @post.to_ics, mime_type: Mime::Type[\"text/calendar\"]  }\n      format.xml { render xml: @post }\n    end\n  end\nend\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"PARAMETER_SEPARATOR_REGEXP\">PARAMETER_SEPARATOR_REGEXP </dt>\n\n<dt id=\"TRAILING_STAR_REGEXP\">TRAILING_STAR_REGEXP </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-symbol\"> <span class=\"method-name\">symbol</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-lookup\"> <span class=\"method-name\">lookup</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"lookup-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 148\ndef lookup(string)\n  LOOKUP[string]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-lookup_by_extension\"> <span class=\"method-name\">lookup_by_extension</span><span class=\"method-args\">(extension)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"lookup_by_extension-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 152\ndef lookup_by_extension(extension)\n  EXTENSION_LOOKUP[extension.to_s]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(string, symbol = nil, synonyms = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 228\ndef initialize(string, symbol = nil, synonyms = [])\n  @symbol, @synonyms = symbol, synonyms\n  @string = string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(accept_header)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 176\ndef parse(accept_header)\n  if !accept_header.include?(',')\n    accept_header = accept_header.split(PARAMETER_SEPARATOR_REGEXP).first\n    parse_trailing_star(accept_header) || [Mime::Type.lookup(accept_header)].compact\n  else\n    list, index = AcceptList.new, 0\n    accept_header.split(',').each do |header|\n      params, q = header.split(PARAMETER_SEPARATOR_REGEXP)\n      if params.present?\n        params.strip!\n\n        params = parse_trailing_star(params) || [params]\n\n        params.each do |m|\n          list &lt;&lt; AcceptItem.new(index, m.to_s, q)\n          index += 1\n        end\n      end\n    end\n    list.assort!\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-parse_data_with_trailing_star\"> <span class=\"method-name\">parse_data_with_trailing_star</span><span class=\"method-args\">(input)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>For an input of <code>'text'</code>, returns <code>[Mime::JSON,\nMime::XML, Mime::ICS, Mime::HTML, Mime::CSS, Mime::CSV, Mime::JS,\nMime::YAML, Mime::TEXT]</code>.</p> <p>For an input of <code>'application'</code>, returns <code>[Mime::HTML, Mime::JS, Mime::XML, Mime::YAML, Mime::ATOM, Mime::JSON,\nMime::RSS, Mime::URL_ENCODED_FORM]</code>.</p> <div class=\"method-source-code\" id=\"parse_data_with_trailing_star-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 208\ndef parse_data_with_trailing_star(input)\n  Mime::SET.select { |m| m =~ input }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-parse_trailing_star\"> <span class=\"method-name\">parse_trailing_star</span><span class=\"method-args\">(accept_header)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"parse_trailing_star-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 199\ndef parse_trailing_star(accept_header)\n  parse_data_with_trailing_star($1) if accept_header =~ TRAILING_STAR_REGEXP\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-register\"> <span class=\"method-name\">register</span><span class=\"method-args\">(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"register-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 162\ndef register(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)\n  Mime.const_set(symbol.upcase, Type.new(string, symbol, mime_type_synonyms))\n\n  new_mime = Mime.const_get(symbol.upcase)\n  SET &lt;&lt; new_mime\n\n  ([string] + mime_type_synonyms).each { |str| LOOKUP[str] = SET.last } unless skip_lookup\n  ([symbol] + extension_synonyms).each { |ext| EXTENSION_LOOKUP[ext.to_s] = SET.last }\n\n  @register_callbacks.each do |callback|\n    callback.call(new_mime)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-register_alias\"> <span class=\"method-name\">register_alias</span><span class=\"method-args\">(string, symbol, extension_synonyms = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Registers an alias that's not used on mime type lookup, but can be referenced directly. Especially useful for rendering different HTML versions depending on the user agent, like an iPhone.</p> <div class=\"method-source-code\" id=\"register_alias-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 158\ndef register_alias(string, symbol, extension_synonyms = [])\n  register(string, symbol, [], extension_synonyms, true)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-register_callback\"> <span class=\"method-name\">register_callback</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"register_callback-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 144\ndef register_callback(&amp;block)\n  @register_callbacks &lt;&lt; block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-unregister\"> <span class=\"method-name\">unregister</span><span class=\"method-args\">(symbol)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This method is opposite of register method.</p> <p>Usage:</p> <pre class=\"ruby\">Mime::Type.unregister(:mobile)\n</pre> <div class=\"method-source-code\" id=\"unregister-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 217\ndef unregister(symbol)\n  symbol = symbol.upcase\n  mime = Mime.const_get(symbol)\n  Mime.instance_eval { remove_const(symbol) }\n\n  SET.delete_if { |v| v.eql?(mime) }\n  LOOKUP.delete_if { |_,v| v.eql?(mime) }\n  EXTENSION_LOOKUP.delete_if { |_,v| v.eql?(mime) }\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D\"> <span class=\"method-name\">==</span><span class=\"method-args\">(mime_type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"3D-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 257\ndef ==(mime_type)\n  return false if mime_type.blank?\n  (@synonyms + [ self ]).any? do |synonym|\n    synonym.to_s == mime_type.to_s || synonym.to_sym == mime_type.to_sym\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D-3D\"> <span class=\"method-name\">===</span><span class=\"method-args\">(list)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"3D-3D-3D-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 249\ndef ===(list)\n  if list.is_a?(Array)\n    (@synonyms + [ self ]).any? { |synonym| list.include?(synonym) }\n  else\n    super\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-7E\"> <span class=\"method-name\">=~</span><span class=\"method-args\">(mime_type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"3D-7E-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 264\ndef =~(mime_type)\n  return false if mime_type.blank?\n  regexp = Regexp.new(Regexp.quote(mime_type.to_s))\n  (@synonyms + [ self ]).any? do |synonym|\n    synonym.to_s =~ regexp\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-html-3F\"> <span class=\"method-name\">html?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"html-3F-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 272\ndef html?\n  @@html_types.include?(to_sym) || @string =~ /html/\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ref\"> <span class=\"method-name\">ref</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"ref-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 245\ndef ref\n  to_sym || to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 233\ndef to_s\n  @string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_str\"> <span class=\"method-name\">to_str</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_str-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 237\ndef to_str\n  to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_sym\"> <span class=\"method-name\">to_sym</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_sym-source\"> <pre class=\"ruby\"># File actionpack/lib/action_dispatch/http/mime_type.rb, line 241\ndef to_sym\n  @symbol\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","missingsourcefile":"<h1 id=\"class-MissingSourceFile\" class=\"class\"> class MissingSourceFile </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"REGEXPS\">REGEXPS </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-is_missing-3F\"> <span class=\"method-name\">is_missing?</span><span class=\"method-args\">(location)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the given path name (except perhaps for the “.rb” extension) is the missing file which caused the exception to be raised.</p> <div class=\"method-source-code\" id=\"is_missing-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/load_error.rb, line 23\ndef is_missing?(location)\n  location.sub(/\\.rb$/, '') == path.sub(/\\.rb$/, '')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-path\"> <span class=\"method-name\">path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the path which was unable to be loaded.</p> <div class=\"method-source-code\" id=\"path-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/load_error.rb, line 11\ndef path\n  @path ||= begin\n    REGEXPS.find do |regex|\n      message =~ regex\n    end\n    $1\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","module":"<h1 id=\"class-Module\" class=\"class\"> class Module </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"module/concerning\">Module::Concerning</a></dd>\n</dl> <section class=\"description\"> <p>Extends the module object with class/module and instance accessors for class/module attributes, just like the native attr* accessors for instance attributes.</p> <p>Extends the API for constants to be able to deal with qualified names. Arguments are assumed to be relative to the receiver.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"RUBY_RESERVED_WORDS\">RUBY_RESERVED_WORDS </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-attr_internal_naming_format\"> <span class=\"method-name\">attr_internal_naming_format</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-alias_attribute\"> <span class=\"method-name\">alias_attribute</span><span class=\"method-args\">(new_name, old_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to make aliases for attributes, which includes getter, setter, and query methods.</p> <pre class=\"ruby\">class Content &lt; ActiveRecord::Base\n  # has a title attribute\nend\n\nclass Email &lt; Content\n  alias_attribute :subject, :title\nend\n\ne = Email.find(1)\ne.title    # =&gt; \"Superstars\"\ne.subject  # =&gt; \"Superstars\"\ne.subject? # =&gt; true\ne.subject = \"Megastars\"\ne.title    # =&gt; \"Megastars\"\n</pre> <div class=\"method-source-code\" id=\"alias_attribute-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/aliasing.rb, line 62\n  def alias_attribute(new_name, old_name)\n    module_eval \"      def #{new_name}; self.#{old_name}; end          # def subject; self.title; end\n      def #{new_name}?; self.#{old_name}?; end        # def subject?; self.title?; end\n      def #{new_name}=(v); self.#{old_name} = v; end  # def subject=(v); self.title = v; end\n\", __FILE__, __LINE__ + 1\n  end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-alias_method_chain\"> <span class=\"method-name\">alias_method_chain</span><span class=\"method-args\">(target, feature) { |aliased_target, punctuation| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Encapsulates the common pattern of:</p> <pre class=\"ruby\">alias_method :foo_without_feature, :foo\nalias_method :foo, :foo_with_feature\n</pre> <p>With this, you simply do:</p> <pre class=\"ruby\">alias_method_chain :foo, :feature\n</pre> <p>And both aliases are set up for you.</p> <p>Query and bang methods (foo?, foo!) keep the same punctuation:</p> <pre class=\"ruby\">alias_method_chain :foo?, :feature\n</pre> <p>is equivalent to</p> <pre class=\"ruby\">alias_method :foo_without_feature?, :foo?\nalias_method :foo?, :foo_with_feature?\n</pre> <p>so you can safely chain foo, foo?, foo! and/or foo= with the same feature.</p> <div class=\"method-source-code\" id=\"alias_method_chain-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/aliasing.rb, line 23\ndef alias_method_chain(target, feature)\n  # Strip out punctuation on predicates, bang or writer methods since\n  # e.g. target?_without_feature is not a valid method name.\n  aliased_target, punctuation = target.to_s.sub(/([?!=])$/, ''), $1\n  yield(aliased_target, punctuation) if block_given?\n\n  with_method = \"#{aliased_target}_with_#{feature}#{punctuation}\"\n  without_method = \"#{aliased_target}_without_#{feature}#{punctuation}\"\n\n  alias_method without_method, target\n  alias_method target, with_method\n\n  case\n  when public_method_defined?(without_method)\n    public target\n  when protected_method_defined?(without_method)\n    protected target\n  when private_method_defined?(without_method)\n    private target\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-anonymous-3F\"> <span class=\"method-name\">anonymous?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A module may or may not have a name.</p> <pre class=\"ruby\">module M; end\nM.name # =&gt; \"M\"\n\nm = Module.new\nm.name # =&gt; nil\n</pre> <p>A module gets a name when it is first assigned to a constant. Either via the <code>module</code> or <code>class</code> keyword or by an explicit assignment:</p> <pre class=\"ruby\">m = Module.new # creates an anonymous module\nM = m          # =&gt; m gets a name here as a side-effect\nm.name         # =&gt; \"M\"\n</pre> <div class=\"method-source-code\" id=\"anonymous-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/anonymous.rb, line 16\ndef anonymous?\n  name.nil?\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-attr_internal\"> <span class=\"method-name\">attr_internal</span><span class=\"method-args\">(*attrs)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"module#method-i-attr_internal_accessor\">attr_internal_accessor</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attr_internal_accessor\"> <span class=\"method-name\">attr_internal_accessor</span><span class=\"method-args\">(*attrs)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declares an attribute reader and writer backed by an internally-named instance variable.</p> <div class=\"method-source-code\" id=\"attr_internal_accessor-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/attr_internal.rb, line 14\ndef attr_internal_accessor(*attrs)\n  attr_internal_reader(*attrs)\n  attr_internal_writer(*attrs)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"module#method-i-attr_internal\">attr_internal</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attr_internal_reader\"> <span class=\"method-name\">attr_internal_reader</span><span class=\"method-args\">(*attrs)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declares an attribute reader backed by an internally-named instance variable.</p> <div class=\"method-source-code\" id=\"attr_internal_reader-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/attr_internal.rb, line 3\ndef attr_internal_reader(*attrs)\n  attrs.each {|attr_name| attr_internal_define(attr_name, :reader)}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attr_internal_writer\"> <span class=\"method-name\">attr_internal_writer</span><span class=\"method-args\">(*attrs)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Declares an attribute writer backed by an internally-named instance variable.</p> <div class=\"method-source-code\" id=\"attr_internal_writer-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/attr_internal.rb, line 8\ndef attr_internal_writer(*attrs)\n  attrs.each {|attr_name| attr_internal_define(attr_name, :writer)}\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-cattr_accessor\"> <span class=\"method-name\">cattr_accessor</span><span class=\"method-args\">(*syms, &amp;blk)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"module#method-i-mattr_accessor\">mattr_accessor</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-cattr_reader\"> <span class=\"method-name\">cattr_reader</span><span class=\"method-args\">(*syms)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"module#method-i-mattr_reader\">mattr_reader</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-cattr_writer\"> <span class=\"method-name\">cattr_writer</span><span class=\"method-args\">(*syms)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"module#method-i-mattr_writer\">mattr_writer</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delegate\"> <span class=\"method-name\">delegate</span><span class=\"method-args\">(*methods)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Provides a <code>delegate</code> class method to easily expose contained objects' public methods as your own.</p> <h4 id=\"method-i-delegate-label-Options\">Options</h4> <ul>\n<li> <p><code>:to</code> - Specifies the target object</p> </li>\n<li> <p><code>:prefix</code> - Prefixes the new method with the target name or a custom prefix</p> </li>\n<li> <p><code>:allow_nil</code> - if set to true, prevents a <code>NoMethodError</code> to be raised</p> </li>\n</ul> <p>The macro receives one or more method names (specified as symbols or strings) and the name of the target object via the <code>:to</code> option (also a symbol or string).</p> <p>Delegation is particularly useful with Active Record associations:</p> <pre class=\"ruby\">class Greeter &lt; ActiveRecord::Base\n  def hello\n    'hello'\n  end\n\n  def goodbye\n    'goodbye'\n  end\nend\n\nclass Foo &lt; ActiveRecord::Base\n  belongs_to :greeter\n  delegate :hello, to: :greeter\nend\n\nFoo.new.hello   # =&gt; \"hello\"\nFoo.new.goodbye # =&gt; NoMethodError: undefined method `goodbye' for #&lt;Foo:0x1af30c&gt;\n</pre> <p>Multiple delegates to the same target are allowed:</p> <pre class=\"ruby\">class Foo &lt; ActiveRecord::Base\n  belongs_to :greeter\n  delegate :hello, :goodbye, to: :greeter\nend\n\nFoo.new.goodbye # =&gt; \"goodbye\"\n</pre> <p>Methods can be delegated to instance variables, class variables, or constants by providing them as a symbols:</p> <pre class=\"ruby\">class Foo\n  CONSTANT_ARRAY = [0,1,2,3]\n  @@class_array  = [4,5,6,7]\n\n  def initialize\n    @instance_array = [8,9,10,11]\n  end\n  delegate :sum, to: :CONSTANT_ARRAY\n  delegate :min, to: :@@class_array\n  delegate :max, to: :@instance_array\nend\n\nFoo.new.sum # =&gt; 6\nFoo.new.min # =&gt; 4\nFoo.new.max # =&gt; 11\n</pre> <p>It's also possible to delegate a method to the class by using <code>:class</code>:</p> <pre class=\"ruby\">class Foo\n  def self.hello\n    \"world\"\n  end\n\n  delegate :hello, to: :class\nend\n\nFoo.new.hello # =&gt; \"world\"\n</pre> <p>Delegates can optionally be prefixed using the <code>:prefix</code> option. If the value is <code>true</code>, the delegate methods are prefixed with the name of the object being delegated to.</p> <pre class=\"ruby\">Person = Struct.new(:name, :address)\n\nclass Invoice &lt; Struct.new(:client)\n  delegate :name, :address, to: :client, prefix: true\nend\n\njohn_doe = Person.new('John Doe', 'Vimmersvej 13')\ninvoice = Invoice.new(john_doe)\ninvoice.client_name    # =&gt; \"John Doe\"\ninvoice.client_address # =&gt; \"Vimmersvej 13\"\n</pre> <p>It is also possible to supply a custom prefix.</p> <pre class=\"ruby\">class Invoice &lt; Struct.new(:client)\n  delegate :name, :address, to: :client, prefix: :customer\nend\n\ninvoice = Invoice.new(john_doe)\ninvoice.customer_name    # =&gt; 'John Doe'\ninvoice.customer_address # =&gt; 'Vimmersvej 13'\n</pre> <p>If the target is <code>nil</code> and does not respond to the delegated method a <code>NoMethodError</code> is raised, as with any other value. Sometimes, however, it makes sense to be robust to that situation and that is the purpose of the <code>:allow_nil</code> option: If the target is not <code>nil</code>, or it is and responds to the method, everything works as usual. But if it is <code>nil</code> and does not respond to the delegated method, <code>nil</code> is returned.</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  has_one :profile\n  delegate :age, to: :profile\nend\n\nUser.new.age # raises NoMethodError: undefined method `age'\n</pre> <p>But if not having a profile yet is fine and should not be an error condition:</p> <pre class=\"ruby\">class User &lt; ActiveRecord::Base\n  has_one :profile\n  delegate :age, to: :profile, allow_nil: true\nend\n\nUser.new.age # nil\n</pre> <p>Note that if the target is not <code>nil</code> then the call is attempted regardless of the <code>:allow_nil</code> option, and thus an exception is still raised if said object does not respond to the method:</p> <pre class=\"ruby\">class Foo\n  def initialize(bar)\n    @bar = bar\n  end\n\n  delegate :name, to: :@bar, allow_nil: true\nend\n\nFoo.new(\"Bar\").name # raises NoMethodError: undefined method `name'\n</pre> <p>The target method must be public, otherwise it will raise <code>NoMethodError</code>.</p> <div class=\"method-source-code\" id=\"delegate-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/delegation.rb, line 151\ndef delegate(*methods)\n  options = methods.pop\n  unless options.is_a?(Hash) &amp;&amp; to = options[:to]\n    raise ArgumentError, 'Delegation needs a target. Supply an options hash with a :to key as the last argument (e.g. delegate :hello, to: :greeter).'\n  end\n\n  prefix, allow_nil = options.values_at(:prefix, :allow_nil)\n\n  if prefix == true &amp;&amp; to =~ /^[^a-z_]/\n    raise ArgumentError, 'Can only automatically set the delegation prefix when delegating to a method.'\n  end\n\n  method_prefix =        if prefix\n      \"#{prefix == true ? to : prefix}_\"\n    else\n      ''\n    end\n\n  file, line = caller.first.split(':', 2)\n  line = line.to_i\n\n  to = to.to_s\n  to = \"self.#{to}\" if RUBY_RESERVED_WORDS.include?(to)\n\n  methods.each do |method|\n    # Attribute writer methods only accept one argument. Makes sure []=\n    # methods still accept two arguments.\n    definition = (method =~ /[^\\]]=$/) ? 'arg' : '*args, &amp;block'\n\n    # The following generated method calls the target exactly once, storing\n    # the returned value in a dummy variable.\n    #\n    # Reason is twofold: On one hand doing less calls is in general better.\n    # On the other hand it could be that the target has side-effects,\n    # whereas conceptually, from the user point of view, the delegator should\n    # be doing one call.\n    if allow_nil\n      method_def = [\n        \"def #{method_prefix}#{method}(#{definition})\",\n        \"_ = #{to}\",\n        \"if !_.nil? || nil.respond_to?(:#{method})\",\n        \"  _.#{method}(#{definition})\",\n        \"end\",\n      \"end\"\n      ].join ';'\n    else\n      exception = %Q(raise DelegationError, \"#{self}##{method_prefix}#{method} delegated to #{to}.#{method}, but #{to} is nil: \\#{self.inspect}\")\n\n      method_def = [\n        \"def #{method_prefix}#{method}(#{definition})\",\n        \" _ = #{to}\",\n        \"  _.#{method}(#{definition})\",\n        \"rescue NoMethodError =&gt; e\",\n        \"  if _.nil? &amp;&amp; e.name == :#{method}\",\n        \"    #{exception}\",\n        \"  else\",\n        \"    raise\",\n        \"  end\",\n        \"end\"\n      ].join ';'\n    end\n\n    module_eval(method_def, file, line)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deprecate\"> <span class=\"method-name\">deprecate</span><span class=\"method-args\">(*method_names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <pre class=\"ruby\">deprecate :foo\ndeprecate bar: 'message'\ndeprecate :foo, :bar, baz: 'warning!', qux: 'gone!'\n</pre> <p>You can also use custom deprecator instance:</p> <pre class=\"ruby\">deprecate :foo, deprecator: MyLib::Deprecator.new\ndeprecate :foo, bar: \"warning!\", deprecator: MyLib::Deprecator.new\n</pre> <p>Custom deprecators must respond to <code>deprecation_warning(deprecated_method_name, message,\ncaller_backtrace)</code> method where you can implement your custom warning behavior.</p> <pre class=\"ruby\">class MyLib::Deprecator\n  def deprecation_warning(deprecated_method_name, message, caller_backtrace = nil)\n     message = \"#{deprecated_method_name} is deprecated and will be removed from MyLibrary | #{message}\"\n     Kernel.warn message\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"deprecate-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/deprecation.rb, line 20\ndef deprecate(*method_names)\n  ActiveSupport::Deprecation.deprecate_methods(self, *method_names)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-foo\"> <span class=\"method-name\">foo</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"foo-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/method_transplanting.rb, line 5\ndef foo; end</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mattr_accessor\"> <span class=\"method-name\">mattr_accessor</span><span class=\"method-args\">(*syms, &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines both class and instance accessors for class attributes.</p> <pre class=\"ruby\">module HairColors\n  mattr_accessor :hair_colors\nend\n\nclass Person\n  include HairColors\nend\n\nPerson.hair_colors = [:brown, :black, :blonde, :red]\nPerson.hair_colors     # =&gt; [:brown, :black, :blonde, :red]\nPerson.new.hair_colors # =&gt; [:brown, :black, :blonde, :red]\n</pre> <p>If a subclass changes the value then that would also change the value for parent class. Similarly if parent class changes the value then that would change the value of subclasses too.</p> <pre class=\"ruby\">class Male &lt; Person\nend\n\nMale.hair_colors &lt;&lt; :blue\nPerson.hair_colors # =&gt; [:brown, :black, :blonde, :red, :blue]\n</pre> <p>To opt out of the instance writer method, pass <code>instance_writer:\nfalse</code>. To opt out of the instance reader method, pass <code>instance_reader: false</code>.</p> <pre class=\"ruby\">module HairColors\n  mattr_accessor :hair_colors, instance_writer: false, instance_reader: false\nend\n\nclass Person\n  include HairColors\nend\n\nPerson.new.hair_colors = [:brown]  # =&gt; NoMethodError\nPerson.new.hair_colors             # =&gt; NoMethodError\n</pre> <p>Or pass <code>instance_accessor: false</code>, to opt out both instance methods.</p> <pre class=\"ruby\">module HairColors\n  mattr_accessor :hair_colors, instance_accessor: false\nend\n\nclass Person\n  include HairColors\nend\n\nPerson.new.hair_colors = [:brown]  # =&gt; NoMethodError\nPerson.new.hair_colors             # =&gt; NoMethodError\n</pre> <p>Also you can pass a block to set up the attribute with a default value.</p> <pre class=\"ruby\">module HairColors\n  mattr_accessor :hair_colors do\n    [:brown, :black, :blonde, :red]\n  end\nend\n\nclass Person\n  include HairColors\nend\n\nPerson.class_variable_get(\"@@hair_colors\") #=&gt; [:brown, :black, :blonde, :red]\n</pre> <div class=\"method-source-code\" id=\"mattr_accessor-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/attribute_accessors.rb, line 207\ndef mattr_accessor(*syms, &amp;blk)\n  mattr_reader(*syms, &amp;blk)\n  mattr_writer(*syms, &amp;blk)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"module#method-i-cattr_accessor\">cattr_accessor</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mattr_reader\"> <span class=\"method-name\">mattr_reader</span><span class=\"method-args\">(*syms) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a class attribute and creates a class and instance reader methods. The underlying the class variable is set to <code>nil</code>, if it is not previously defined.</p> <pre class=\"ruby\">module HairColors\n  mattr_reader :hair_colors\nend\n\nHairColors.hair_colors # =&gt; nil\nHairColors.class_variable_set(\"@@hair_colors\", [:brown, :black])\nHairColors.hair_colors # =&gt; [:brown, :black]\n</pre> <p>The attribute name must be a valid method name in Ruby.</p> <pre class=\"ruby\">module Foo\n  mattr_reader :\"1_Badname \"\nend\n# =&gt; NameError: invalid attribute name\n</pre> <p>If you want to opt out the creation on the instance reader method, pass <code>instance_reader: false</code> or <code>instance_accessor:\nfalse</code>.</p> <pre class=\"ruby\">module HairColors\n  mattr_writer :hair_colors, instance_reader: false\nend\n\nclass Person\n  include HairColors\nend\n\nPerson.new.hair_colors # =&gt; NoMethodError\n</pre> <p>Also, you can pass a block to set up the attribute with a default value.</p> <pre class=\"ruby\">module HairColors\n  cattr_reader :hair_colors do\n    [:brown, :black, :blonde, :red]\n  end\nend\n\nclass Person\n  include HairColors\nend\n\nPerson.hair_colors # =&gt; [:brown, :black, :blonde, :red]\n</pre> <div class=\"method-source-code\" id=\"mattr_reader-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/attribute_accessors.rb, line 53\n  def mattr_reader(*syms)\n    options = syms.extract_options!\n    syms.each do |sym|\n      raise NameError.new(\"invalid attribute name: #{sym}\") unless sym =~ /^[_A-Za-z]\\w*$/\n      class_eval(\"        @@#{sym} = nil unless defined? @@#{sym}\n\n        def self.#{sym}\n          @@#{sym}\n        end\n\", __FILE__, __LINE__ + 1)\n\n      unless options[:instance_reader] == false || options[:instance_accessor] == false\n        class_eval(\"          def #{sym}\n            @@#{sym}\n          end\n\", __FILE__, __LINE__ + 1)\n      end\n      class_variable_set(\"@@#{sym}\", yield) if block_given?\n    end\n  end</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"module#method-i-cattr_reader\">cattr_reader</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mattr_writer\"> <span class=\"method-name\">mattr_writer</span><span class=\"method-args\">(*syms) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines a class attribute and creates a class and instance writer methods to allow assignment to the attribute.</p> <pre class=\"ruby\">module HairColors\n  mattr_writer :hair_colors\nend\n\nclass Person\n  include HairColors\nend\n\nHairColors.hair_colors = [:brown, :black]\nPerson.class_variable_get(\"@@hair_colors\") # =&gt; [:brown, :black]\nPerson.new.hair_colors = [:blonde, :red]\nHairColors.class_variable_get(\"@@hair_colors\") # =&gt; [:blonde, :red]\n</pre> <p>If you want to opt out the instance writer method, pass <code>instance_writer: false</code> or <code>instance_accessor:\nfalse</code>.</p> <pre class=\"ruby\">module HairColors\n  mattr_writer :hair_colors, instance_writer: false\nend\n\nclass Person\n  include HairColors\nend\n\nPerson.new.hair_colors = [:blonde, :red] # =&gt; NoMethodError\n</pre> <p>Also, you can pass a block to set up the attribute with a default value.</p> <pre class=\"ruby\">class HairColors\n  mattr_writer :hair_colors do\n    [:brown, :black, :blonde, :red]\n  end\nend\n\nclass Person\n  include HairColors\nend\n\nPerson.class_variable_get(\"@@hair_colors\") # =&gt; [:brown, :black, :blonde, :red]\n</pre> <div class=\"method-source-code\" id=\"mattr_writer-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/attribute_accessors.rb, line 119\n  def mattr_writer(*syms)\n    options = syms.extract_options!\n    syms.each do |sym|\n      raise NameError.new(\"invalid attribute name: #{sym}\") unless sym =~ /^[_A-Za-z]\\w*$/\n      class_eval(\"        @@#{sym} = nil unless defined? @@#{sym}\n\n        def self.#{sym}=(obj)\n          @@#{sym} = obj\n        end\n\", __FILE__, __LINE__ + 1)\n\n      unless options[:instance_writer] == false || options[:instance_accessor] == false\n        class_eval(\"          def #{sym}=(obj)\n            @@#{sym} = obj\n          end\n\", __FILE__, __LINE__ + 1)\n      end\n      send(\"#{sym}=\", yield) if block_given?\n    end\n  end</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"module#method-i-cattr_writer\">cattr_writer</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parent\"> <span class=\"method-name\">parent</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the module which contains this one according to its name.</p> <pre class=\"ruby\">module M\n  module N\n  end\nend\nX = M::N\n\nM::N.parent # =&gt; M\nX.parent    # =&gt; M\n</pre> <p>The parent of top-level and anonymous modules is <a href=\"object\">Object</a>.</p> <pre class=\"ruby\">M.parent          # =&gt; Object\nModule.new.parent # =&gt; Object\n</pre> <div class=\"method-source-code\" id=\"parent-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/introspection.rb, line 30\ndef parent\n  parent_name ? ActiveSupport::Inflector.constantize(parent_name) : Object\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parent_name\"> <span class=\"method-name\">parent_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the name of the module containing this one.</p> <pre class=\"ruby\">M::N.parent_name # =&gt; \"M\"\n</pre> <div class=\"method-source-code\" id=\"parent_name-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/introspection.rb, line 7\ndef parent_name\n  if defined? @parent_name\n    @parent_name\n  else\n    @parent_name = name =~ /::[^:]+\\Z/ ? $`.freeze : nil\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parents\"> <span class=\"method-name\">parents</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all the parents of this module according to its name, ordered from nested outwards. The receiver is not contained within the result.</p> <pre class=\"ruby\">module M\n  module N\n  end\nend\nX = M::N\n\nM.parents    # =&gt; [Object]\nM::N.parents # =&gt; [M, Object]\nX.parents    # =&gt; [M, Object]\n</pre> <div class=\"method-source-code\" id=\"parents-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/introspection.rb, line 46\ndef parents\n  parents = []\n  if parent_name\n    parts = parent_name.split('::')\n    until parts.empty?\n      parents &lt;&lt; ActiveSupport::Inflector.constantize(parts * '::')\n      parts.pop\n    end\n  end\n  parents &lt;&lt; Object unless parents.include? Object\n  parents\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-qualified_const_defined-3F\"> <span class=\"method-name\">qualified_const_defined?</span><span class=\"method-args\">(path, search_parents=true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"qualified_const_defined-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/qualified_const.rb, line 26\ndef qualified_const_defined?(path, search_parents=true)\n  QualifiedConstUtils.raise_if_absolute(path)\n\n  QualifiedConstUtils.names(path).inject(self) do |mod, name|\n    return unless mod.const_defined?(name, search_parents)\n    mod.const_get(name)\n  end\n  return true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-qualified_const_get\"> <span class=\"method-name\">qualified_const_get</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"qualified_const_get-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/qualified_const.rb, line 36\ndef qualified_const_get(path)\n  QualifiedConstUtils.raise_if_absolute(path)\n\n  QualifiedConstUtils.names(path).inject(self) do |mod, name|\n    mod.const_get(name)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-qualified_const_set\"> <span class=\"method-name\">qualified_const_set</span><span class=\"method-args\">(path, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"qualified_const_set-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/qualified_const.rb, line 44\ndef qualified_const_set(path, value)\n  QualifiedConstUtils.raise_if_absolute(path)\n\n  const_name = path.demodulize\n  mod_name = path.deconstantize\n  mod = mod_name.empty? ? self : qualified_const_get(mod_name)\n  mod.const_set(const_name, value)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-redefine_method\"> <span class=\"method-name\">redefine_method</span><span class=\"method-args\">(method, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"redefine_method-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/remove_method.rb, line 8\ndef redefine_method(method, &amp;block)\n  remove_possible_method(method)\n  define_method(method, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_possible_method\"> <span class=\"method-name\">remove_possible_method</span><span class=\"method-args\">(method)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"remove_possible_method-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/remove_method.rb, line 2\ndef remove_possible_method(method)\n  if method_defined?(method) || private_method_defined?(method)\n    undef_method(method)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","module/concerning":"<h1 id=\"module-Module::Concerning\" class=\"module\"> module Module::Concerning </h1> <section class=\"description\"> <h1 id=\"module-Module::Concerning-label-Bite-sized+separation+of+concerns\">Bite-sized separation of concerns</h1> <p>We often find ourselves with a medium-sized chunk of behavior that we'd like to extract, but only mix in to a single class.</p> <p>Extracting a plain old Ruby object to encapsulate it and collaborate or delegate to the original object is often a good choice, but when there's no additional state to encapsulate or we're making DSL-style declarations about the parent class, introducing new collaborators can obfuscate rather than simplify.</p> <p>The typical route is to just dump everything in a monolithic class, perhaps with a comment, as a least-bad alternative. Using modules in separate files means tedious sifting to get a big-picture view.</p> <h1 id=\"module-Module::Concerning-label-Dissatisfying+ways+to+separate+small+concerns\">Dissatisfying ways to separate small concerns</h1> <h2 id=\"module-Module::Concerning-label-Using+comments-3A\">Using comments:</h2> <pre class=\"ruby\">class Todo\n  # Other todo implementation\n  # ...\n\n  ## Event tracking\n  has_many :events\n\n  before_create :track_creation\n  after_destroy :track_deletion\n\n  private\n    def track_creation\n      # ...\n    end\nend\n</pre> <h2 id=\"module-Module::Concerning-label-With+an+inline+module-3A\">With an inline module:</h2> <p>Noisy syntax.</p> <pre class=\"ruby\">class Todo\n  # Other todo implementation\n  # ...\n\n  module EventTracking\n    extend ActiveSupport::Concern\n\n    included do\n      has_many :events\n      before_create :track_creation\n      after_destroy :track_deletion\n    end\n\n    private\n      def track_creation\n        # ...\n      end\n  end\n  include EventTracking\nend\n</pre> <h2 id=\"module-Module::Concerning-label-Mix-in+noise+exiled+to+its+own+file-3A\">Mix-in noise exiled to its own file:</h2> <p>Once our chunk of behavior starts pushing the scroll-to-understand it's boundary, we give in and move it to a separate file. At this size, the overhead feels in good proportion to the size of our extraction, despite diluting our at-a-glance sense of how things really work.</p> <pre class=\"ruby\">class Todo\n  # Other todo implementation\n  # ...\n\n  include TodoEventTracking\nend\n</pre> <h1 id=\"module-Module::Concerning-label-Introducing+Module-23concerning\">Introducing <a href=\"concerning#method-i-concerning\">#concerning</a>\n</h1> <p>By quieting the mix-in noise, we arrive at a natural, low-ceremony way to separate bite-sized concerns.</p> <pre class=\"ruby\">class Todo\n  # Other todo implementation\n  # ...\n\n  concerning :EventTracking do\n    included do\n      has_many :events\n      before_create :track_creation\n      after_destroy :track_deletion\n    end\n\n    private\n      def track_creation\n        # ...\n      end\n  end\nend\n\nTodo.ancestors\n# =&gt; Todo, Todo::EventTracking, Object\n</pre> <p>This small step has some wonderful ripple effects. We can</p> <ul>\n<li> <p>grok the behavior of our class in one glance,</p> </li>\n<li> <p>clean up monolithic junk-drawer classes by separating their concerns, and</p> </li>\n<li> <p>stop leaning on protected/private for crude “this is internal stuff” modularity.</p> </li>\n</ul> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-concern\"> <span class=\"method-name\">concern</span><span class=\"method-args\">(topic, &amp;module_definition)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A low-cruft shortcut to define a concern.</p> <pre>concern :EventTracking do\n  ...\nend</pre> <p>is equivalent to</p> <pre>module EventTracking\n  extend ActiveSupport::Concern\n\n  ...\nend</pre> <div class=\"method-source-code\" id=\"concern-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/concerning.rb, line 127\ndef concern(topic, &amp;module_definition)\n  const_set topic, Module.new {\n    extend ::ActiveSupport::Concern\n    module_eval(&amp;module_definition)\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-concerning\"> <span class=\"method-name\">concerning</span><span class=\"method-args\">(topic, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define a new concern and mix it in.</p> <div class=\"method-source-code\" id=\"concerning-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/module/concerning.rb, line 110\ndef concerning(topic, &amp;block)\n  include concern(topic, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","module/delegationerror":"<h1 id=\"class-Module::DelegationError\" class=\"class\"> class Module::DelegationError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">NoMethodError</dd>\n</dl> <section class=\"description\"> <p>Error generated by <code>delegate</code> when a method is called on <code>nil</code> and <code>allow_nil</code> option is not used.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nameerror":"<h1 id=\"class-NameError\" class=\"class\"> class NameError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-missing_name\"> <span class=\"method-name\">missing_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Extract the name of the missing constant from the exception message.</p> <div class=\"method-source-code\" id=\"missing_name-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/name_error.rb, line 3\ndef missing_name\n  if /undefined local variable or method/ !~ message\n    $1 if /((::)?([A-Z]\\w*)(::[A-Z]\\w*)*)$/ =~ message\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-missing_name-3F\"> <span class=\"method-name\">missing_name?</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Was this exception raised because the given name was missing?</p> <div class=\"method-source-code\" id=\"missing_name-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/name_error.rb, line 10\ndef missing_name?(name)\n  if name.is_a? Symbol\n    last_name = (missing_name || '').split('::').last\n    last_name == name.to_s\n  else\n    missing_name == name.to_s\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nilclass":"<h1 id=\"class-NilClass\" class=\"class\"> class NilClass </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-blank-3F\"> <span class=\"method-name\">blank?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>nil</code> is blank:</p> <pre class=\"ruby\">nil.blank? # =&gt; true\n</pre> <p>@return [true]</p> <div class=\"method-source-code\" id=\"blank-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/blank.rb, line 53\ndef blank?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-duplicable-3F\"> <span class=\"method-name\">duplicable?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>nil</code> is not duplicable:</p> <pre class=\"ruby\">nil.duplicable? # =&gt; false\nnil.dup         # =&gt; TypeError: can't dup NilClass\n</pre> <div class=\"method-source-code\" id=\"duplicable-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/duplicable.rb, line 34\ndef duplicable?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_param\"> <span class=\"method-name\">to_param</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>self</code>.</p> <div class=\"method-source-code\" id=\"to_param-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/to_query.rb, line 18\ndef to_param\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-try\"> <span class=\"method-name\">try</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Calling <code>try</code> on <code>nil</code> always returns <code>nil</code>. It becomes especially helpful when navigating through associations that may return <code>nil</code>.</p> <pre class=\"ruby\">nil.try(:name) # =&gt; nil\n</pre> <p>Without <code>try</code></p> <pre class=\"ruby\">@person &amp;&amp; @person.children.any? &amp;&amp; @person.children.first.name\n</pre> <p>With <code>try</code></p> <pre class=\"ruby\">@person.try(:children).try(:first).try(:name)\n</pre> <div class=\"method-source-code\" id=\"try-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/try.rb, line 93\ndef try(*args)\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-try-21\"> <span class=\"method-name\">try!</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"try-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/try.rb, line 97\ndef try!(*args)\n  nil\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","numeric":"<h1 id=\"class-Numeric\" class=\"class\"> class Numeric </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"EXABYTE\">EXABYTE </dt>\n\n<dt id=\"GIGABYTE\">GIGABYTE </dt>\n\n<dt id=\"KILOBYTE\">KILOBYTE </dt>\n\n<dt id=\"MEGABYTE\">MEGABYTE </dt>\n\n<dt id=\"PETABYTE\">PETABYTE </dt>\n\n<dt id=\"TERABYTE\">TERABYTE </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-byte\"> <span class=\"method-name\">byte</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-bytes\">bytes</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-bytes\"> <span class=\"method-name\">bytes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enables the use of byte calculations and declarations, like 45.bytes + 2.6.megabytes</p> <div class=\"method-source-code\" id=\"bytes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 10\ndef bytes\n  self\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-byte\">byte</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-day\"> <span class=\"method-name\">day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-days\">days</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-days\"> <span class=\"method-name\">days</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"days-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/time.rb, line 34\ndef days\n  ActiveSupport::Duration.new(self * 24.hours, [[:days, self]])\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-day\">day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-duplicable-3F\"> <span class=\"method-name\">duplicable?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Numbers are not duplicable:</p> <pre class=\"ruby\">3.duplicable? # =&gt; false\n3.dup         # =&gt; TypeError: can't dup Fixnum\n</pre> <div class=\"method-source-code\" id=\"duplicable-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/duplicable.rb, line 74\ndef duplicable?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-exabyte\"> <span class=\"method-name\">exabyte</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-exabytes\">exabytes</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exabytes\"> <span class=\"method-name\">exabytes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"exabytes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 40\ndef exabytes\n  self * EXABYTE\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-exabyte\">exabyte</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-fortnight\"> <span class=\"method-name\">fortnight</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-fortnights\">fortnights</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fortnights\"> <span class=\"method-name\">fortnights</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"fortnights-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/time.rb, line 44\ndef fortnights\n  ActiveSupport::Duration.new(self * 2.weeks, [[:days, self * 14]])\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-fortnight\">fortnight</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-gigabyte\"> <span class=\"method-name\">gigabyte</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-gigabytes\">gigabytes</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-gigabytes\"> <span class=\"method-name\">gigabytes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"gigabytes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 25\ndef gigabytes\n  self * GIGABYTE\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-gigabyte\">gigabyte</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-hour\"> <span class=\"method-name\">hour</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-hours\">hours</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-hours\"> <span class=\"method-name\">hours</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"hours-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/time.rb, line 29\ndef hours\n  ActiveSupport::Duration.new(self * 3600, [[:seconds, self * 3600]])\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-hour\">hour</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-html_safe-3F\"> <span class=\"method-name\">html_safe?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"html_safe-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/output_safety.rb, line 126\ndef html_safe?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-in_milliseconds\"> <span class=\"method-name\">in_milliseconds</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Used with the standard time durations, like 1.hour.in_milliseconds – so we can feed them to JavaScript functions like getTime().</p> <div class=\"method-source-code\" id=\"in_milliseconds-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/time.rb, line 51\ndef in_milliseconds\n  self * 1000\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-kilobyte\"> <span class=\"method-name\">kilobyte</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-kilobytes\">kilobytes</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-kilobytes\"> <span class=\"method-name\">kilobytes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"kilobytes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 15\ndef kilobytes\n  self * KILOBYTE\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-kilobyte\">kilobyte</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-megabyte\"> <span class=\"method-name\">megabyte</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-megabytes\">megabytes</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-megabytes\"> <span class=\"method-name\">megabytes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"megabytes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 20\ndef megabytes\n  self * MEGABYTE\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-megabyte\">megabyte</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-minute\"> <span class=\"method-name\">minute</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-minutes\">minutes</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-minutes\"> <span class=\"method-name\">minutes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"minutes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/time.rb, line 24\ndef minutes\n  ActiveSupport::Duration.new(self * 60, [[:seconds, self * 60]])\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-minute\">minute</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-petabyte\"> <span class=\"method-name\">petabyte</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-petabytes\">petabytes</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-petabytes\"> <span class=\"method-name\">petabytes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"petabytes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 35\ndef petabytes\n  self * PETABYTE\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-petabyte\">petabyte</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-second\"> <span class=\"method-name\">second</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-seconds\">seconds</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-seconds\"> <span class=\"method-name\">seconds</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enables the use of time calculations and declarations, like 45.minutes + 2.hours + 4.years.</p> <p>These methods use <a href=\"time#method-i-advance\">Time#advance</a> for precise date calculations when using from_now, ago, etc. as well as adding or subtracting their results from a <a href=\"time\">Time</a> object. For example:</p> <pre class=\"ruby\"># equivalent to Time.current.advance(months: 1)\n1.month.from_now\n\n# equivalent to Time.current.advance(years: 2)\n2.years.from_now\n\n# equivalent to Time.current.advance(months: 4, years: 5)\n(4.months + 5.years).from_now\n</pre> <div class=\"method-source-code\" id=\"seconds-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/time.rb, line 19\ndef seconds\n  ActiveSupport::Duration.new(self, [[:seconds, self]])\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-second\">second</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-terabyte\"> <span class=\"method-name\">terabyte</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-terabytes\">terabytes</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-terabytes\"> <span class=\"method-name\">terabytes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"terabytes-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 30\ndef terabytes\n  self * TERABYTE\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-terabyte\">terabyte</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_formatted_s\"> <span class=\"method-name\">to_formatted_s</span><span class=\"method-args\">(format = :default, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Provides options for converting numbers into formatted strings. Options are provided for phone numbers, currency, percentage, precision, positional notation, file size and pretty printing.</p> <h4 id=\"method-i-to_formatted_s-label-Options\">Options</h4> <p>For details on which formats use which options, see <a href=\"activesupport/numberhelper\">ActiveSupport::NumberHelper</a></p> <h4 id=\"method-i-to_formatted_s-label-Examples\">Examples</h4> <pre>Phone Numbers:\n5551234.to_s(:phone)                                     # =&gt; 555-1234\n1235551234.to_s(:phone)                                  # =&gt; 123-555-1234\n1235551234.to_s(:phone, area_code: true)                 # =&gt; (123) 555-1234\n1235551234.to_s(:phone, delimiter: ' ')                  # =&gt; 123 555 1234\n1235551234.to_s(:phone, area_code: true, extension: 555) # =&gt; (123) 555-1234 x 555\n1235551234.to_s(:phone, country_code: 1)                 # =&gt; +1-123-555-1234\n1235551234.to_s(:phone, country_code: 1, extension: 1343, delimiter: '.')\n# =&gt; +1.123.555.1234 x 1343\n\nCurrency:\n1234567890.50.to_s(:currency)                 # =&gt; $1,234,567,890.50\n1234567890.506.to_s(:currency)                # =&gt; $1,234,567,890.51\n1234567890.506.to_s(:currency, precision: 3)  # =&gt; $1,234,567,890.506\n1234567890.506.to_s(:currency, locale: :fr)   # =&gt; 1 234 567 890,51 €\n-1234567890.50.to_s(:currency, negative_format: '(%u%n)')\n# =&gt; ($1,234,567,890.50)\n1234567890.50.to_s(:currency, unit: '&amp;pound;', separator: ',', delimiter: '')\n# =&gt; &amp;pound;1234567890,50\n1234567890.50.to_s(:currency, unit: '&amp;pound;', separator: ',', delimiter: '', format: '%n %u')\n# =&gt; 1234567890,50 &amp;pound;\n\nPercentage:\n100.to_s(:percentage)                                  # =&gt; 100.000%\n100.to_s(:percentage, precision: 0)                    # =&gt; 100%\n1000.to_s(:percentage, delimiter: '.', separator: ',') # =&gt; 1.000,000%\n302.24398923423.to_s(:percentage, precision: 5)        # =&gt; 302.24399%\n1000.to_s(:percentage, locale: :fr)                    # =&gt; 1 000,000%\n100.to_s(:percentage, format: '%n  %')                 # =&gt; 100  %\n\nDelimited:\n12345678.to_s(:delimited)                     # =&gt; 12,345,678\n12345678.05.to_s(:delimited)                  # =&gt; 12,345,678.05\n12345678.to_s(:delimited, delimiter: '.')     # =&gt; 12.345.678\n12345678.to_s(:delimited, delimiter: ',')     # =&gt; 12,345,678\n12345678.05.to_s(:delimited, separator: ' ')  # =&gt; 12,345,678 05\n12345678.05.to_s(:delimited, locale: :fr)     # =&gt; 12 345 678,05\n98765432.98.to_s(:delimited, delimiter: ' ', separator: ',')\n# =&gt; 98 765 432,98\n\nRounded:\n111.2345.to_s(:rounded)                                      # =&gt; 111.235\n111.2345.to_s(:rounded, precision: 2)                        # =&gt; 111.23\n13.to_s(:rounded, precision: 5)                              # =&gt; 13.00000\n389.32314.to_s(:rounded, precision: 0)                       # =&gt; 389\n111.2345.to_s(:rounded, significant: true)                   # =&gt; 111\n111.2345.to_s(:rounded, precision: 1, significant: true)     # =&gt; 100\n13.to_s(:rounded, precision: 5, significant: true)           # =&gt; 13.000\n111.234.to_s(:rounded, locale: :fr)                          # =&gt; 111,234\n13.to_s(:rounded, precision: 5, significant: true, strip_insignificant_zeros: true)\n# =&gt; 13\n389.32314.to_s(:rounded, precision: 4, significant: true)    # =&gt; 389.3\n1111.2345.to_s(:rounded, precision: 2, separator: ',', delimiter: '.')\n# =&gt; 1.111,23\n\nHuman-friendly size in Bytes:\n123.to_s(:human_size)                                   # =&gt; 123 Bytes\n1234.to_s(:human_size)                                  # =&gt; 1.21 KB\n12345.to_s(:human_size)                                 # =&gt; 12.1 KB\n1234567.to_s(:human_size)                               # =&gt; 1.18 MB\n1234567890.to_s(:human_size)                            # =&gt; 1.15 GB\n1234567890123.to_s(:human_size)                         # =&gt; 1.12 TB\n1234567.to_s(:human_size, precision: 2)                 # =&gt; 1.2 MB\n483989.to_s(:human_size, precision: 2)                  # =&gt; 470 KB\n1234567.to_s(:human_size, precision: 2, separator: ',') # =&gt; 1,2 MB\n1234567890123.to_s(:human_size, precision: 5)           # =&gt; \"1.1229 TB\"\n524288000.to_s(:human_size, precision: 5)               # =&gt; \"500 MB\"\n\nHuman-friendly format:\n123.to_s(:human)                                       # =&gt; \"123\"\n1234.to_s(:human)                                      # =&gt; \"1.23 Thousand\"\n12345.to_s(:human)                                     # =&gt; \"12.3 Thousand\"\n1234567.to_s(:human)                                   # =&gt; \"1.23 Million\"\n1234567890.to_s(:human)                                # =&gt; \"1.23 Billion\"\n1234567890123.to_s(:human)                             # =&gt; \"1.23 Trillion\"\n1234567890123456.to_s(:human)                          # =&gt; \"1.23 Quadrillion\"\n1234567890123456789.to_s(:human)                       # =&gt; \"1230 Quadrillion\"\n489939.to_s(:human, precision: 2)                      # =&gt; \"490 Thousand\"\n489939.to_s(:human, precision: 4)                      # =&gt; \"489.9 Thousand\"\n1234567.to_s(:human, precision: 4,\n                 significant: false)                   # =&gt; \"1.2346 Million\"\n1234567.to_s(:human, precision: 1,\n                 separator: ',',\n                 significant: false)                   # =&gt; \"1,2 Million\"</pre> <div class=\"method-source-code\" id=\"to_formatted_s-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/conversions.rb, line 100\ndef to_formatted_s(format = :default, options = {})\n  case format\n  when :phone\n    return ActiveSupport::NumberHelper.number_to_phone(self, options)\n  when :currency\n    return ActiveSupport::NumberHelper.number_to_currency(self, options)\n  when :percentage\n    return ActiveSupport::NumberHelper.number_to_percentage(self, options)\n  when :delimited\n    return ActiveSupport::NumberHelper.number_to_delimited(self, options)\n  when :rounded\n    return ActiveSupport::NumberHelper.number_to_rounded(self, options)\n  when :human\n    return ActiveSupport::NumberHelper.number_to_human(self, options)\n  when :human_size\n    return ActiveSupport::NumberHelper.number_to_human_size(self, options)\n  else\n    self.to_default_s\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-week\"> <span class=\"method-name\">week</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"numeric#method-i-weeks\">weeks</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-weeks\"> <span class=\"method-name\">weeks</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"weeks-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/numeric/time.rb, line 39\ndef weeks\n  ActiveSupport::Duration.new(self * 7.days, [[:days, self * 7]])\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"numeric#method-i-week\">week</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","object":"<h1 id=\"class-Object\" class=\"class\"> class Object </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">BasicObject</dd>\n<dt>Included modules:</dt>\n\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"HashWithIndifferentAccess\">HashWithIndifferentAccess </dt>\n<dd>\n<p>Implements a hash where keys <code>:foo</code> and <code>\"foo\"</code> are considered to be the same.</p> <pre class=\"ruby\">rgb = ActiveSupport::HashWithIndifferentAccess.new\n\nrgb[:black] = '#000000'\nrgb[:black]  # =&gt; '#000000'\nrgb['black'] # =&gt; '#000000'\n\nrgb['white'] = '#FFFFFF'\nrgb[:white]  # =&gt; '#FFFFFF'\nrgb['white'] # =&gt; '#FFFFFF'\n</pre> <p>Internally symbols are mapped to strings when used as keys in the entire writing interface (calling <code>[]=</code>, <code>merge</code>, etc). This mapping belongs to the public interface. For example, given:</p> <pre class=\"ruby\">hash = ActiveSupport::HashWithIndifferentAccess.new(a: 1)\n</pre> <p>You are guaranteed that the key is returned as a string:</p> <pre class=\"ruby\">hash.keys # =&gt; [\"a\"]\n</pre> <p>Technically other types of keys are accepted:</p> <pre class=\"ruby\">hash = ActiveSupport::HashWithIndifferentAccess.new(a: 1)\nhash[0] = 0\nhash # =&gt; {\"a\"=&gt;1, 0=&gt;0}\n</pre> <p>but this class is intended for use cases where strings or symbols are the expected keys and it is convenient to understand both as the same. For example the <code>params</code> hash in Ruby on Rails.</p> <p>Note that core extensions define <code>Hash#with_indifferent_access</code>:</p> <pre class=\"ruby\">rgb = { black: '#000000', white: '#FFFFFF' }.with_indifferent_access\n</pre> <p>which may be handy.</p> </dd>\n<dt id=\"MissingSourceFile\">MissingSourceFile </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-acts_like-3F\"> <span class=\"method-name\">acts_like?</span><span class=\"method-args\">(duck)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A duck-type assistant method. For example, Active Support extends <a href=\"date\">Date</a> to define an <code>acts_like_date?</code> method, and extends <a href=\"time\">Time</a> to define <code>acts_like_time?</code>. As a result, we can do <code>x.acts_like?(:time)</code> and <code>x.acts_like?(:date)</code> to do duck-type-safe comparisons, since classes that we want to act like <a href=\"time\">Time</a> simply need to define an <code>acts_like_time?</code> method.</p> <div class=\"method-source-code\" id=\"acts_like-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/acts_like.rb, line 7\ndef acts_like?(duck)\n  respond_to? :\"acts_like_#{duck}?\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-blank-3F\"> <span class=\"method-name\">blank?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>An object is blank if it's false, empty, or a whitespace string. For example, '', ' ', <code>nil</code>, [], and {} are all blank.</p> <p>This simplifies</p> <pre class=\"ruby\">address.nil? || address.empty?\n</pre> <p>to</p> <pre class=\"ruby\">address.blank?\n</pre> <p>@return [true, false]</p> <div class=\"method-source-code\" id=\"blank-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/blank.rb, line 15\ndef blank?\n  respond_to?(:empty?) ? !!empty? : !self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_fixtures\"> <span class=\"method-name\">create_fixtures</span><span class=\"method-args\">(*fixture_set_names, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"create_fixtures-source\"> <pre class=\"ruby\"># File railties/lib/rails/test_help.rb, line 28\ndef create_fixtures(*fixture_set_names, &amp;block)\n  FixtureSet.create_fixtures(ActiveSupport::TestCase.fixture_path, fixture_set_names, {}, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deep_dup\"> <span class=\"method-name\">deep_dup</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a deep copy of object if it's duplicable. If it's not duplicable, returns <code>self</code>.</p> <pre class=\"ruby\">object = Object.new\ndup    = object.deep_dup\ndup.instance_variable_set(:@a, 1)\n\nobject.instance_variable_defined?(:@a) # =&gt; false\ndup.instance_variable_defined?(:@a)    # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"deep_dup-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/deep_dup.rb, line 13\ndef deep_dup\n  duplicable? ? dup : self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-duplicable-3F\"> <span class=\"method-name\">duplicable?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Can you safely dup this object?</p> <p>False for <code>nil</code>, <code>false</code>, <code>true</code>, symbol, number and BigDecimal(in 1.9.x) objects; true otherwise.</p> <div class=\"method-source-code\" id=\"duplicable-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/duplicable.rb, line 24\ndef duplicable?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-html_safe-3F\"> <span class=\"method-name\">html_safe?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"html_safe-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/output_safety.rb, line 120\ndef html_safe?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-in-3F\"> <span class=\"method-name\">in?</span><span class=\"method-args\">(another_object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this object is included in the argument. Argument must be any object which responds to <code>#include?</code>. Usage:</p> <pre class=\"ruby\">characters = [\"Konata\", \"Kagami\", \"Tsukasa\"]\n\"Konata\".in?(characters) # =&gt; true\n</pre> <p>This will throw an ArgumentError if the argument doesn't respond to <code>#include?</code>.</p> <div class=\"method-source-code\" id=\"in-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/inclusion.rb, line 10\ndef in?(another_object)\n  another_object.include?(self)\nrescue NoMethodError\n  raise ArgumentError.new(\"The parameter passed to #in? must respond to #include?\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-instance_values\"> <span class=\"method-name\">instance_values</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash with string keys that maps instance variable names without “@” to their corresponding values.</p> <pre class=\"ruby\">class C\n  def initialize(x, y)\n    @x, @y = x, y\n  end\nend\n\nC.new(0, 1).instance_values # =&gt; {\"x\" =&gt; 0, \"y\" =&gt; 1}\n</pre> <div class=\"method-source-code\" id=\"instance_values-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/instance_variables.rb, line 12\ndef instance_values\n  Hash[instance_variables.map { |name| [name[1..-1], instance_variable_get(name)] }]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-instance_variable_names\"> <span class=\"method-name\">instance_variable_names</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of instance variable names as strings including “@”.</p> <pre class=\"ruby\">class C\n  def initialize(x, y)\n    @x, @y = x, y\n  end\nend\n\nC.new(0, 1).instance_variable_names # =&gt; [\"@y\", \"@x\"]\n</pre> <div class=\"method-source-code\" id=\"instance_variable_names-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/instance_variables.rb, line 25\ndef instance_variable_names\n  instance_variables.map { |var| var.to_s }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-itself\"> <span class=\"method-name\">itself</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the object itself.</p> <p>Useful for chaining methods, such as Active Record scopes:</p> <pre class=\"ruby\">Event.public_send(state.presence_in([ :trashed, :drafted ]) || :itself).order(:created_at)\n</pre> <p>@return <a href=\"object\">Object</a></p> <div class=\"method-source-code\" id=\"itself-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/itself.rb, line 11\ndef itself\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-presence\"> <span class=\"method-name\">presence</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the receiver if it's present otherwise returns <code>nil</code>. <code>object.presence</code> is equivalent to</p> <pre class=\"ruby\">object.present? ? object : nil\n</pre> <p>For example, something like</p> <pre class=\"ruby\">state   = params[:state]   if params[:state].present?\ncountry = params[:country] if params[:country].present?\nregion  = state || country || 'US'\n</pre> <p>becomes</p> <pre class=\"ruby\">region = params[:state].presence || params[:country].presence || 'US'\n</pre> <p>@return [Object]</p> <div class=\"method-source-code\" id=\"presence-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/blank.rb, line 42\ndef presence\n  self if present?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-presence_in\"> <span class=\"method-name\">presence_in</span><span class=\"method-args\">(another_object)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the receiver if it's included in the argument otherwise returns <code>nil</code>. Argument must be any object which responds to <code>#include?</code>. Usage:</p> <pre class=\"ruby\">params[:bucket_type].presence_in %w( project calendar )\n</pre> <p>This will throw an ArgumentError if the argument doesn't respond to <code>#include?</code>.</p> <p>@return [Object]</p> <div class=\"method-source-code\" id=\"presence_in-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/inclusion.rb, line 24\ndef presence_in(another_object)\n  self.in?(another_object) ? self : nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-present-3F\"> <span class=\"method-name\">present?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>An object is present if it's not blank.</p> <p>@return [true, false]</p> <div class=\"method-source-code\" id=\"present-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/blank.rb, line 22\ndef present?\n  !blank?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_param\"> <span class=\"method-name\">to_param</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Alias of <code>to_s</code>.</p> <div class=\"method-source-code\" id=\"to_param-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/to_query.rb, line 5\ndef to_param\n  to_s\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_query\"> <span class=\"method-name\">to_query</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts an object into a string suitable for use as a URL query string, using the given <code>key</code> as the param name.</p> <div class=\"method-source-code\" id=\"to_query-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/to_query.rb, line 11\ndef to_query(key)\n  \"#{CGI.escape(key.to_param)}=#{CGI.escape(to_param.to_s)}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-try\"> <span class=\"method-name\">try</span><span class=\"method-args\">(*a, &amp;b)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Invokes the public method whose name goes as first argument just like <code>public_send</code> does, except that if the receiver does not respond to it the call returns <code>nil</code> rather than raising an exception.</p> <p>This method is defined to be able to write</p> <pre class=\"ruby\">@person.try(:name)\n</pre> <p>instead of</p> <pre class=\"ruby\">@person.name if @person\n</pre> <p><code>try</code> calls can be chained:</p> <pre class=\"ruby\">@person.try(:spouse).try(:name)\n</pre> <p>instead of</p> <pre class=\"ruby\">@person.spouse.name if @person &amp;&amp; @person.spouse\n</pre> <p><code>try</code> will also return <code>nil</code> if the receiver does not respond to the method:</p> <pre class=\"ruby\">@person.try(:non_existing_method) #=&gt; nil\n</pre> <p>instead of</p> <pre class=\"ruby\">@person.non_existing_method if @person.respond_to?(:non_existing_method) #=&gt; nil\n</pre> <p><code>try</code> returns <code>nil</code> when called on <code>nil</code> regardless of whether it responds to the method:</p> <pre class=\"ruby\">nil.try(:to_i) # =&gt; nil, rather than 0\n</pre> <p>Arguments and blocks are forwarded to the method if invoked:</p> <pre>@posts.try(:each_slice, 2) do |a, b|\n  ...\nend</pre> <p>The number of arguments in the signature must match. If the object responds to the method the call is attempted and <code>ArgumentError</code> is still raised in case of argument mismatch.</p> <p>If <code>try</code> is called without arguments it yields the receiver to a given block unless it is <code>nil</code>:</p> <pre>@person.try do |p|\n  ...\nend</pre> <p>You can also call try with a block without accepting an argument, and the block will be instance_eval'ed instead:</p> <pre class=\"ruby\">@person.try { upcase.truncate(50) }\n</pre> <p>Please also note that <code>try</code> is defined on <code>Object</code>. Therefore, it won't work with instances of classes that do not have <code>Object</code> among their ancestors, like direct subclasses of <code>BasicObject</code>. For example, using <code>try</code> with <code>SimpleDelegator</code> will delegate <code>try</code> to the target instead of calling it on the delegator itself.</p> <div class=\"method-source-code\" id=\"try-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/try.rb, line 62\ndef try(*a, &amp;b)\n  try!(*a, &amp;b) if a.empty? || respond_to?(a.first)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-try-21\"> <span class=\"method-name\">try!</span><span class=\"method-args\">(*a) { |self| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <a href=\"object#method-i-try\">try</a>, but will raise a NoMethodError exception if the receiver is not <code>nil</code> and does not implement the tried method.</p> <div class=\"method-source-code\" id=\"try-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/try.rb, line 69\ndef try!(*a, &amp;b)\n  if a.empty? &amp;&amp; block_given?\n    if b.arity.zero?\n      instance_eval(&amp;b)\n    else\n      yield self\n    end\n  else\n    public_send(*a, &amp;b)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unescape\"> <span class=\"method-name\">unescape</span><span class=\"method-args\">(str, escaped = /%[a-fA-F\\d]{2}/)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"unescape-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/uri.rb, line 9\ndef unescape(str, escaped = /%[a-fA-F\\d]{2}/)\n  # TODO: Are we actually sure that ASCII == UTF-8?\n  # YK: My initial experiments say yes, but let's be sure please\n  enc = str.encoding\n  enc = Encoding::UTF_8 if enc == Encoding::US_ASCII\n  str.gsub(escaped) { [$&amp;[1, 2].hex].pack('C') }.force_encoding(enc)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-with_options\"> <span class=\"method-name\">with_options</span><span class=\"method-args\">(options, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>An elegant way to factor duplication out of options passed to a series of method calls. Each method called in the block, with the block variable as the receiver, will have its options merged with the default <code>options</code> hash provided. Each method called on the block variable must take an options hash as its final argument.</p> <p>Without <code>with_options&gt;</code>, this code contains duplication:</p> <pre class=\"ruby\">class Account &lt; ActiveRecord::Base\n  has_many :customers, dependent: :destroy\n  has_many :products,  dependent: :destroy\n  has_many :invoices,  dependent: :destroy\n  has_many :expenses,  dependent: :destroy\nend\n</pre> <p>Using <code>with_options</code>, we can remove the duplication:</p> <pre class=\"ruby\">class Account &lt; ActiveRecord::Base\n  with_options dependent: :destroy do |assoc|\n    assoc.has_many :customers\n    assoc.has_many :products\n    assoc.has_many :invoices\n    assoc.has_many :expenses\n  end\nend\n</pre> <p>It can also be used with an explicit receiver:</p> <pre class=\"ruby\">I18n.with_options locale: user.locale, scope: 'newsletter' do |i18n|\n  subject i18n.t :subject\n  body    i18n.t :body, user_name: user.name\nend\n</pre> <p>When you don't pass an explicit receiver, it executes the whole block in merging options context:</p> <pre class=\"ruby\">class Account &lt; ActiveRecord::Base\n  with_options dependent: :destroy do\n    has_many :customers\n    has_many :products\n    has_many :invoices\n    has_many :expenses\n  end\nend\n</pre> <p><code>with_options</code> can also be nested since the call is forwarded to its receiver.</p> <p>NOTE: Each nesting level will merge inherited defaults in addition to their own.</p> <pre class=\"ruby\">class Post &lt; ActiveRecord::Base\n  with_options if: :persisted?, length: { minimum: 50 } do\n    validates :content, if: -&gt; { content.present? }\n  end\nend\n</pre> <p>The code is equivalent to:</p> <pre class=\"ruby\">validates :content, length: { minimum: 50 }, if: -&gt; { content.present? }\n</pre> <p>Hence the inherited default for `if` key is ignored.</p> <div class=\"method-source-code\" id=\"with_options-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/with_options.rb, line 65\ndef with_options(options, &amp;block)\n  option_merger = ActiveSupport::OptionMerger.new(self, options)\n  block.arity.zero? ? option_merger.instance_eval(&amp;block) : block.call(option_merger)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/application":"<h1 id=\"class-Rails::Application\" class=\"class\"> class Rails::Application </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Engine</dd>\n</dl> <section class=\"description\"> <p>In Rails 3.0, a <a href=\"application\">Rails::Application</a> object was introduced which is nothing more than an <a href=\"engine\">Engine</a> but with the responsibility of coordinating the whole boot process.</p> <h2 id=\"class-Rails::Application-label-Initialization\">Initialization</h2> <p><a href=\"application\">Rails::Application</a> is responsible for executing all railties and engines initializers. It also executes some bootstrap initializers (check <a href=\"application/bootstrap\">Rails::Application::Bootstrap</a>) and finishing initializers, after all the others are executed (check <a href=\"application/finisher\">Rails::Application::Finisher</a>).</p> <h2 id=\"class-Rails::Application-label-Configuration\"><a href=\"application/configuration\">Configuration</a></h2> <p>Besides providing the same configuration as <a href=\"engine\">Rails::Engine</a> and <a href=\"railtie\">Rails::Railtie</a>, the application object has several specific configurations, for example “cache_classes”, “consider_all_requests_local”, “filter_parameters”, “logger” and so forth.</p> <p>Check <a href=\"application/configuration\">Rails::Application::Configuration</a> to see them all.</p> <h2 id=\"class-Rails::Application-label-Routes\">Routes</h2> <p>The application object is also responsible for holding the routes and reloading routes whenever the files change in development.</p> <h2 id=\"class-Rails::Application-label-Middlewares\">Middlewares</h2> <p>The <a href=\"application\">Application</a> is also responsible for building the middleware stack.</p> <h2 id=\"class-Rails::Application-label-Booting+process\">Booting process</h2> <p>The application is also responsible for setting up and executing the booting process. From the moment you require “config/application.rb” in your app, the booting process goes like this:</p> <pre>1)  require \"config/boot.rb\" to setup load paths\n2)  require railties and engines\n3)  Define Rails.application as \"class MyApp::Application &lt; Rails::Application\"\n4)  Run config.before_configuration callbacks\n5)  Load config/environments/ENV.rb\n6)  Run config.before_initialize callbacks\n7)  Run Railtie#initializer defined by railties, engines and application.\n    One by one, each engine sets up its load paths, routes and runs its config/initializers/* files.\n8)  Custom Railtie#initializers added by railties, engines and applications are executed\n9)  Build the middleware stack and run to_prepare callbacks\n10) Run config.before_eager_load and eager_load! if eager_load is true\n11) Run config.after_initialize callbacks</pre> <h2 id=\"class-Rails::Application-label-Multiple+Applications\">Multiple Applications</h2> <p>If you decide to define multiple applications, then the first application that is initialized will be set to <code>Rails.application</code>, unless you override it with a different application.</p> <p>To create a new application, you can instantiate a new instance of a class that has already been created:</p> <pre class=\"ruby\">class Application &lt; Rails::Application\nend\n\nfirst_application  = Application.new\nsecond_application = Application.new(config: first_application.config)\n</pre> <p>In the above example, the configuration from the first application was used to initialize the second application. You can also use the <code>initialize_copy</code> on one of the applications to create a copy of the application which shares the configuration.</p> <p>If you decide to define rake tasks, runners, or initializers in an application other than <code>Rails.application</code>, then you must run those these manually.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-assets\"> <span class=\"method-name\">assets</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-reloaders\"> <span class=\"method-name\">reloaders</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-sandbox\"> <span class=\"method-name\">sandbox</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-sandbox-3F\"> <span class=\"method-name\">sandbox?</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-create\"> <span class=\"method-name\">create</span><span class=\"method-args\">(initial_variable_values = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"create-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 99\ndef create(initial_variable_values = {}, &amp;block)\n  new(initial_variable_values, &amp;block).run_load_hooks!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-find_root\"> <span class=\"method-name\">find_root</span><span class=\"method-args\">(from)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_root-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 103\ndef find_root(from)\n  find_root_with_flag \"config.ru\", from, Dir.pwd\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-inherited\"> <span class=\"method-name\">inherited</span><span class=\"method-args\">(base)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"inherited-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 89\ndef inherited(base)\n  super\n  Rails.app_class = base\n  add_lib_to_load_path!(find_root(base.called_from))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-instance\"> <span class=\"method-name\">instance</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"instance-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 95\ndef instance\n  super.run_load_hooks!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(initial_variable_values = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 124\ndef initialize(initial_variable_values = {}, &amp;block)\n  super()\n  @initialized       = false\n  @reloaders         = []\n  @routes_reloader   = nil\n  @app_env_config    = nil\n  @ordered_railties  = nil\n  @railties          = nil\n  @message_verifiers = {}\n  @ran_load_hooks    = false\n\n  # are these actually used?\n  @initial_variable_values = initial_variable_values\n  @block = block\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Implements call according to the <a href=\"rack\">Rack</a> <a href=\"api\">API</a>. It simply dispatches the request to the underlying middleware stack.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 162\ndef call(env)\n  env[\"ORIGINAL_FULLPATH\"] = build_original_fullpath(env)\n  env[\"ORIGINAL_SCRIPT_NAME\"] = env[\"SCRIPT_NAME\"]\n  super(env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-config_for\"> <span class=\"method-name\">config_for</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience for loading config/foo.yml for the current Rails env.</p> <p>Example:</p> <pre># config/exception_notification.yml:\nproduction:\n  url: http://127.0.0.1:8080\n  namespace: my_app_production\ndevelopment:\n  url: http://localhost:3001\n  namespace: my_app_development\n\n# config/production.rb\nRails.application.configure do\n  config.middleware.use ExceptionNotifier, config_for(:exception_notification)\nend</pre> <div class=\"method-source-code\" id=\"config_for-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 227\ndef config_for(name)\n  yaml = Pathname.new(\"#{paths[\"config\"].existent.first}/#{name}.yml\")\n\n  if yaml.exist?\n    require \"erb\"\n    (YAML.load(ERB.new(yaml.read).result) || {})[Rails.env] || {}\n  else\n    raise \"Could not load configuration. No such file - #{yaml}\"\n  end\nrescue Psych::SyntaxError =&gt; e\n  raise \"YAML syntax error occurred while parsing #{yaml}. \"          \"Please note that YAML must be consistently indented using spaces. Tabs are not allowed. \"          \"Error: #{e.message}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-console\"> <span class=\"method-name\">console</span><span class=\"method-args\">(&amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sends any console called in the instance of a new application up to the <code>console</code> method defined in <a href=\"railtie\">Rails::Railtie</a>.</p> <div class=\"method-source-code\" id=\"console-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 289\ndef console(&amp;blk)\n  self.class.console(&amp;blk)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-env_config\"> <span class=\"method-name\">env_config</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Stores some of the Rails initial environment parameters which will be used by middlewares and engines to configure themselves.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"env_config-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 244\ndef env_config\n  @app_env_config ||= begin\n    validate_secret_key_config!\n\n    super.merge({\n      \"action_dispatch.parameter_filter\" =&gt; config.filter_parameters,\n      \"action_dispatch.redirect_filter\" =&gt; config.filter_redirect,\n      \"action_dispatch.secret_token\" =&gt; secrets.secret_token,\n      \"action_dispatch.secret_key_base\" =&gt; secrets.secret_key_base,\n      \"action_dispatch.show_exceptions\" =&gt; config.action_dispatch.show_exceptions,\n      \"action_dispatch.show_detailed_exceptions\" =&gt; config.consider_all_requests_local,\n      \"action_dispatch.logger\" =&gt; Rails.logger,\n      \"action_dispatch.backtrace_cleaner\" =&gt; Rails.backtrace_cleaner,\n      \"action_dispatch.key_generator\" =&gt; key_generator,\n      \"action_dispatch.http_auth_salt\" =&gt; config.action_dispatch.http_auth_salt,\n      \"action_dispatch.signed_cookie_salt\" =&gt; config.action_dispatch.signed_cookie_salt,\n      \"action_dispatch.encrypted_cookie_salt\" =&gt; config.action_dispatch.encrypted_cookie_salt,\n      \"action_dispatch.encrypted_signed_cookie_salt\" =&gt; config.action_dispatch.encrypted_signed_cookie_salt,\n      \"action_dispatch.cookies_serializer\" =&gt; config.action_dispatch.cookies_serializer,\n      \"action_dispatch.cookies_digest\" =&gt; config.action_dispatch.cookies_digest\n    })\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-generators\"> <span class=\"method-name\">generators</span><span class=\"method-args\">(&amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sends any generators called in the instance of a new application up to the <code>generators</code> method defined in <a href=\"railtie\">Rails::Railtie</a>.</p> <div class=\"method-source-code\" id=\"generators-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 295\ndef generators(&amp;blk)\n  self.class.generators(&amp;blk)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initialized-3F\"> <span class=\"method-name\">initialized?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the application is initialized.</p> <div class=\"method-source-code\" id=\"initialized-3F-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 141\ndef initialized?\n  @initialized\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initializer\"> <span class=\"method-name\">initializer</span><span class=\"method-args\">(name, opts={}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sends the initializers to the <code>initializer</code> method defined in the <a href=\"initializable\">Rails::Initializable</a> module. Each <a href=\"application\">Rails::Application</a> class has its own set of initializers, as defined by the <a href=\"initializable\">Initializable</a> module.</p> <div class=\"method-source-code\" id=\"initializer-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 277\ndef initializer(name, opts={}, &amp;block)\n  self.class.initializer(name, opts, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-isolate_namespace\"> <span class=\"method-name\">isolate_namespace</span><span class=\"method-args\">(mod)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sends the <code>isolate_namespace</code> method up to the class method.</p> <div class=\"method-source-code\" id=\"isolate_namespace-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 300\ndef isolate_namespace(mod)\n  self.class.isolate_namespace(mod)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-key_generator\"> <span class=\"method-name\">key_generator</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return the application's KeyGenerator</p> <div class=\"method-source-code\" id=\"key_generator-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 174\ndef key_generator\n  # number of iterations selected based on consultation with the google security\n  # team. Details at https://github.com/rails/rails/pull/6952#issuecomment-7661220\n  @caching_key_generator ||=\n    if secrets.secret_key_base\n      key_generator = ActiveSupport::KeyGenerator.new(secrets.secret_key_base, iterations: 1000)\n      ActiveSupport::CachingKeyGenerator.new(key_generator)\n    else\n      ActiveSupport::LegacyKeyGenerator.new(secrets.secret_token)\n    end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-message_verifier\"> <span class=\"method-name\">message_verifier</span><span class=\"method-args\">(verifier_name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a message verifier object.</p> <p>This verifier can be used to generate and verify signed messages in the application.</p> <p>It is recommended not to use the same verifier for different things, so you can get different verifiers passing the <code>verifier_name</code> argument.</p> <h4 id=\"method-i-message_verifier-label-Parameters\">Parameters</h4> <ul><li> <p><code>verifier_name</code> - the name of the message verifier.</p> </li></ul> <h4 id=\"method-i-message_verifier-label-Examples\">Examples</h4> <pre class=\"ruby\">message = Rails.application.message_verifier('sensitive_data').generate('my sensible data')\nRails.application.message_verifier('sensitive_data').verify(message)\n# =&gt; 'my sensible data'\n</pre> <p>See the <code>ActiveSupport::MessageVerifier</code> documentation for more information.</p> <div class=\"method-source-code\" id=\"message_verifier-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 204\ndef message_verifier(verifier_name)\n  @message_verifiers[verifier_name] ||= begin\n    secret = key_generator.generate_key(verifier_name.to_s)\n    ActiveSupport::MessageVerifier.new(secret)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rake_tasks\"> <span class=\"method-name\">rake_tasks</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If you try to define a set of rake tasks on the instance, these will get passed up to the rake tasks defined on the application's class.</p> <div class=\"method-source-code\" id=\"rake_tasks-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 270\ndef rake_tasks(&amp;block)\n  self.class.rake_tasks(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reload_routes-21\"> <span class=\"method-name\">reload_routes!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reload application routes regardless if they changed or not.</p> <div class=\"method-source-code\" id=\"reload_routes-21-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 169\ndef reload_routes!\n  routes_reloader.reload!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-runner\"> <span class=\"method-name\">runner</span><span class=\"method-args\">(&amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sends any runner called in the instance of a new application up to the <code>runner</code> method defined in <a href=\"railtie\">Rails::Railtie</a>.</p> <div class=\"method-source-code\" id=\"runner-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 283\ndef runner(&amp;blk)\n  self.class.runner(&amp;blk)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-secrets\"> <span class=\"method-name\">secrets</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns secrets added to config/secrets.yml.</p> <p>Example:</p> <pre>development:\n  secret_key_base: 836fa3665997a860728bcb9e9a1e704d427cfc920e79d847d79c8a9a907b9e965defa4154b2b86bdec6930adbe33f21364523a6f6ce363865724549fdfc08553\ntest:\n  secret_key_base: 5a37811464e7d378488b0f073e2193b093682e4e21f5d6f3ae0a4e1781e61a351fdc878a843424e81c73fb484a40d23f92c8dafac4870e74ede6e5e174423010\nproduction:\n  secret_key_base: &lt;%= ENV[\"SECRET_KEY_BASE\"] %&gt;\n  namespace: my_app_production</pre> <p><code>Rails.application.secrets.namespace</code> returns <code>my_app_production</code> in the production environment.</p> <div class=\"method-source-code\" id=\"secrets-source\"> <pre class=\"ruby\"># File railties/lib/rails/application.rb, line 385\ndef secrets\n  @secrets ||= begin\n    secrets = ActiveSupport::OrderedOptions.new\n    yaml = config.paths[\"config/secrets\"].first\n    if File.exist?(yaml)\n      require \"erb\"\n      all_secrets = YAML.load(ERB.new(IO.read(yaml)).result) || {}\n      env_secrets = all_secrets[Rails.env]\n      secrets.merge!(env_secrets.symbolize_keys) if env_secrets\n    end\n\n    # Fallback to config.secret_key_base if secrets.secret_key_base isn't set\n    secrets.secret_key_base ||= config.secret_key_base\n    # Fallback to config.secret_token if secrets.secret_token isn't set\n    secrets.secret_token ||= config.secret_token\n\n    secrets\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/application/configuration":"<h1 id=\"class-Rails::Application::Configuration\" class=\"class\"> class Rails::Application::Configuration </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../engine/configuration\">Rails::Engine::Configuration</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-allow_concurrency\"> <span class=\"method-name\">allow_concurrency</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-asset_host\"> <span class=\"method-name\">asset_host</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-assets\"> <span class=\"method-name\">assets</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-autoflush_log\"> <span class=\"method-name\">autoflush_log</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-beginning_of_week\"> <span class=\"method-name\">beginning_of_week</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-cache_classes\"> <span class=\"method-name\">cache_classes</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-cache_store\"> <span class=\"method-name\">cache_store</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-consider_all_requests_local\"> <span class=\"method-name\">consider_all_requests_local</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-console\"> <span class=\"method-name\">console</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-eager_load\"> <span class=\"method-name\">eager_load</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-encoding\"> <span class=\"method-name\">encoding</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-exceptions_app\"> <span class=\"method-name\">exceptions_app</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-file_watcher\"> <span class=\"method-name\">file_watcher</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-filter_parameters\"> <span class=\"method-name\">filter_parameters</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-filter_redirect\"> <span class=\"method-name\">filter_redirect</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-force_ssl\"> <span class=\"method-name\">force_ssl</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-helpers_paths\"> <span class=\"method-name\">helpers_paths</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-log_formatter\"> <span class=\"method-name\">log_formatter</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-log_tags\"> <span class=\"method-name\">log_tags</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-logger\"> <span class=\"method-name\">logger</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-railties_order\"> <span class=\"method-name\">railties_order</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-relative_url_root\"> <span class=\"method-name\">relative_url_root</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-reload_classes_only_on_change\"> <span class=\"method-name\">reload_classes_only_on_change</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-secret_key_base\"> <span class=\"method-name\">secret_key_base</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-secret_token\"> <span class=\"method-name\">secret_token</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-serve_static_files\"> <span class=\"method-name\">serve_static_files</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-session_options\"> <span class=\"method-name\">session_options</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-ssl_options\"> <span class=\"method-name\">ssl_options</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-static_cache_control\"> <span class=\"method-name\">static_cache_control</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-time_zone\"> <span class=\"method-name\">time_zone</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-x\"> <span class=\"method-name\">x</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(*)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../engine/configuration#method-c-new\">Rails::Engine::Configuration.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/application/configuration.rb, line 22\ndef initialize(*)\n  super\n  self.encoding = \"utf-8\"\n  @allow_concurrency             = nil\n  @consider_all_requests_local   = false\n  @filter_parameters             = []\n  @filter_redirect               = []\n  @helpers_paths                 = []\n  @serve_static_files            = true\n  @static_cache_control          = nil\n  @force_ssl                     = false\n  @ssl_options                   = {}\n  @session_store                 = :cookie_store\n  @session_options               = {}\n  @time_zone                     = \"UTC\"\n  @beginning_of_week             = :monday\n  @has_explicit_log_level        = false\n  @log_level                     = nil\n  @middleware                    = app_middleware\n  @generators                    = app_generators\n  @cache_store                   = [ :file_store, \"#{root}/tmp/cache/\" ]\n  @railties_order                = [:all]\n  @relative_url_root             = ENV[\"RAILS_RELATIVE_URL_ROOT\"]\n  @reload_classes_only_on_change = true\n  @file_watcher                  = ActiveSupport::FileUpdateChecker\n  @exceptions_app                = nil\n  @autoflush_log                 = true\n  @log_formatter                 = ActiveSupport::Logger::SimpleFormatter.new\n  @eager_load                    = nil\n  @secret_token                  = nil\n  @secret_key_base               = nil\n  @x                             = Custom.new\n\n  @assets = ActiveSupport::OrderedOptions.new\n  @assets.enabled                  = true\n  @assets.paths                    = []\n  @assets.precompile               = [ Proc.new { |path, fn| fn =~ /app\\/assets/ &amp;&amp; !%w(.js .css).include?(File.extname(path)) },\n                                       /(?:\\/|\\|\\A)application\\.(css|js)$/ ]\n  @assets.prefix                   = \"/assets\"\n  @assets.version                  = '1.0'\n  @assets.debug                    = false\n  @assets.compile                  = true\n  @assets.digest                   = false\n  @assets.cache_store              = [ :file_store, \"#{root}/tmp/cache/assets/#{Rails.env}/\" ]\n  @assets.js_compressor            = nil\n  @assets.css_compressor           = nil\n  @assets.logger                   = nil\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-colorize_logging\"> <span class=\"method-name\">colorize_logging</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"colorize_logging-source\"> <pre class=\"ruby\"># File railties/lib/rails/application/configuration.rb, line 135\ndef colorize_logging\n  ActiveSupport::LogSubscriber.colorize_logging\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-colorize_logging-3D\"> <span class=\"method-name\">colorize_logging=</span><span class=\"method-args\">(val)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"colorize_logging-3D-source\"> <pre class=\"ruby\"># File railties/lib/rails/application/configuration.rb, line 139\ndef colorize_logging=(val)\n  ActiveSupport::LogSubscriber.colorize_logging = val\n  self.generators.colorize_logging = val\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-database_configuration\"> <span class=\"method-name\">database_configuration</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Loads and returns the entire raw configuration of database from values stored in `config/database.yml`.</p> <div class=\"method-source-code\" id=\"database_configuration-source\"> <pre class=\"ruby\"># File railties/lib/rails/application/configuration.rb, line 97\ndef database_configuration\n  path = paths[\"config/database\"].existent.first\n  yaml = Pathname.new(path) if path\n\n  config = if yaml &amp;&amp; yaml.exist?\n    require \"yaml\"\n    require \"erb\"\n    YAML.load(ERB.new(yaml.read).result) || {}\n  elsif ENV['DATABASE_URL']\n    # Value from ENV['DATABASE_URL'] is set to default database connection\n    # by Active Record.\n    {}\n  else\n    raise \"Could not load database configuration. No such file - #{paths[\"config/database\"].instance_variable_get(:@paths)}\"\n  end\n\n  config\nrescue Psych::SyntaxError =&gt; e\n  raise \"YAML syntax error occurred while parsing #{paths[\"config/database\"].first}. \"                \"Please note that YAML must be consistently indented using spaces. Tabs are not allowed. \"                \"Error: #{e.message}\"\nrescue =&gt; e\n  raise e, \"Cannot load `Rails.application.database_configuration`:\\n#{e.message}\", e.backtrace\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encoding-3D\"> <span class=\"method-name\">encoding=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"encoding-3D-source\"> <pre class=\"ruby\"># File railties/lib/rails/application/configuration.rb, line 71\ndef encoding=(value)\n  @encoding = value\n  silence_warnings do\n    Encoding.default_external = value\n    Encoding.default_internal = value\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-log_level\"> <span class=\"method-name\">log_level</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"log_level-source\"> <pre class=\"ruby\"># File railties/lib/rails/application/configuration.rb, line 131\ndef log_level\n  @log_level ||= (Rails.env.production? ? :info : :debug)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-log_level-3D\"> <span class=\"method-name\">log_level=</span><span class=\"method-args\">(level)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"log_level-3D-source\"> <pre class=\"ruby\"># File railties/lib/rails/application/configuration.rb, line 126\ndef log_level=(level)\n  @has_explicit_log_level = !!(level)\n  @log_level = level\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-paths\"> <span class=\"method-name\">paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../engine/configuration#method-i-paths\">Rails::Engine::Configuration#paths</a> </div> <div class=\"method-source-code\" id=\"paths-source\"> <pre class=\"ruby\"># File railties/lib/rails/application/configuration.rb, line 79\ndef paths\n  @paths ||= begin\n    paths = super\n    paths.add \"config/database\",    with: \"config/database.yml\"\n    paths.add \"config/secrets\",     with: \"config/secrets.yml\"\n    paths.add \"config/environment\", with: \"config/environment.rb\"\n    paths.add \"lib/templates\"\n    paths.add \"log\",                with: \"log/#{Rails.env}.log\"\n    paths.add \"public\"\n    paths.add \"public/javascripts\"\n    paths.add \"public/stylesheets\"\n    paths.add \"tmp\"\n    paths\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/configuration/middlewarestackproxy":"<h1 id=\"class-Rails::Configuration::MiddlewareStackProxy\" class=\"class\"> class Rails::Configuration::MiddlewareStackProxy </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"middlewarestackproxy\">MiddlewareStackProxy</a> is a proxy for the Rails middleware stack that allows you to configure middlewares in your application. It works basically as a command recorder, saving each command to be applied after initialization over the default middleware stack, so you can add, swap, or remove any middleware in Rails.</p> <p>You can add your own middlewares by using the <code>config.middleware.use</code> method:</p> <pre class=\"ruby\">config.middleware.use Magical::Unicorns\n</pre> <p>This will put the <code>Magical::Unicorns</code> middleware on the end of the stack. You can use <code>insert_before</code> if you wish to add a middleware before another:</p> <pre class=\"ruby\">config.middleware.insert_before Rack::Head, Magical::Unicorns\n</pre> <p>There's also <code>insert_after</code> which will insert a middleware after another:</p> <pre class=\"ruby\">config.middleware.insert_after Rack::Head, Magical::Unicorns\n</pre> <p>Middlewares can also be completely swapped out and replaced with others:</p> <pre class=\"ruby\">config.middleware.swap ActionDispatch::Flash, Magical::Unicorns\n</pre> <p>And finally they can also be removed from the stack completely:</p> <pre class=\"ruby\">config.middleware.delete ActionDispatch::Flash\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/configuration.rb, line 36\ndef initialize\n  @operations = []\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"ruby\"># File railties/lib/rails/configuration.rb, line 58\ndef delete(*args, &amp;block)\n  @operations &lt;&lt; [__method__, args, block]\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-insert\"> <span class=\"method-name\">insert</span><span class=\"method-args\">(*args, &amp;block)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"middlewarestackproxy#method-i-insert_before\">insert_before</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-insert_after\"> <span class=\"method-name\">insert_after</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"insert_after-source\"> <pre class=\"ruby\"># File railties/lib/rails/configuration.rb, line 46\ndef insert_after(*args, &amp;block)\n  @operations &lt;&lt; [__method__, args, block]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-insert_before\"> <span class=\"method-name\">insert_before</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"insert_before-source\"> <pre class=\"ruby\"># File railties/lib/rails/configuration.rb, line 40\ndef insert_before(*args, &amp;block)\n  @operations &lt;&lt; [__method__, args, block]\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"middlewarestackproxy#method-i-insert\">insert</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-swap\"> <span class=\"method-name\">swap</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"swap-source\"> <pre class=\"ruby\"># File railties/lib/rails/configuration.rb, line 50\ndef swap(*args, &amp;block)\n  @operations &lt;&lt; [__method__, args, block]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unshift\"> <span class=\"method-name\">unshift</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"unshift-source\"> <pre class=\"ruby\"># File railties/lib/rails/configuration.rb, line 62\ndef unshift(*args, &amp;block)\n  @operations &lt;&lt; [__method__, args, block]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-use\"> <span class=\"method-name\">use</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"use-source\"> <pre class=\"ruby\"># File railties/lib/rails/configuration.rb, line 54\ndef use(*args, &amp;block)\n  @operations &lt;&lt; [__method__, args, block]\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/consolemethods":"<h1 id=\"module-Rails::ConsoleMethods\" class=\"module\"> module Rails::ConsoleMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-app\"> <span class=\"method-name\">app</span><span class=\"method-args\">(create=false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reference the global “app” instance, created on demand. To recreate the instance, pass a non-false value as the parameter.</p> <div class=\"method-source-code\" id=\"app-source\"> <pre class=\"ruby\"># File railties/lib/rails/console/app.rb, line 8\ndef app(create=false)\n  @app_integration_instance = nil if create\n  @app_integration_instance ||= new_session do |sess|\n    sess.host! \"www.example.com\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-controller\"> <span class=\"method-name\">controller</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Gets a new instance of a controller object.</p> <p>This method assumes an <code>ApplicationController</code> exists, and it extends <code>ActionController::Base</code></p> <div class=\"method-source-code\" id=\"controller-source\"> <pre class=\"ruby\"># File railties/lib/rails/console/helpers.rb, line 13\ndef controller\n  @controller ||= ApplicationController.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-helper\"> <span class=\"method-name\">helper</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Gets the helper methods available to the controller.</p> <p>This method assumes an <code>ApplicationController</code> exists, and it extends <code>ActionController::Base</code></p> <div class=\"method-source-code\" id=\"helper-source\"> <pre class=\"ruby\"># File railties/lib/rails/console/helpers.rb, line 6\ndef helper\n  @helper ||= ApplicationController.helpers\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-new_session\"> <span class=\"method-name\">new_session</span><span class=\"method-args\">() { |session| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>create a new session. If a block is given, the new session will be yielded to the block before being returned.</p> <div class=\"method-source-code\" id=\"new_session-source\"> <pre class=\"ruby\"># File railties/lib/rails/console/app.rb, line 17\ndef new_session\n  app = Rails.application\n  session = ActionDispatch::Integration::Session.new(app)\n  yield session if block_given?\n  session\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reload-21\"> <span class=\"method-name\">reload!</span><span class=\"method-args\">(print=true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reloads the environment</p> <div class=\"method-source-code\" id=\"reload-21-source\"> <pre class=\"ruby\"># File railties/lib/rails/console/app.rb, line 25\ndef reload!(print=true)\n  puts \"Reloading...\" if print\n  ActionDispatch::Reloader.cleanup!\n  ActionDispatch::Reloader.prepare!\n  true\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/engine":"<h1 id=\"class-Rails::Engine\" class=\"class\"> class Rails::Engine </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Railtie</dd>\n</dl> <section class=\"description\"> <p><code>Rails::Engine</code> allows you to wrap a specific Rails application or subset of functionality and share it with other applications or within a larger packaged application. Since Rails 3.0, every <code>Rails::Application</code> is just an engine, which allows for simple feature and application sharing.</p> <p>Any <code>Rails::Engine</code> is also a <code>Rails::Railtie</code>, so the same methods (like <code>rake_tasks</code> and <code>generators</code>) and configuration options that are available in railties can also be used in engines.</p> <h2 id=\"class-Rails::Engine-label-Creating+an+Engine\">Creating an <a href=\"engine\">Engine</a>\n</h2> <p>In Rails versions prior to 3.0, your gems automatically behaved as engines, however, this coupled Rails to Rubygems. Since Rails 3.0, if you want a gem to automatically behave as an engine, you have to specify an <code>Engine</code> for it somewhere inside your plugin's <code>lib</code> folder (similar to how we specify a <code>Railtie</code>):</p> <pre class=\"ruby\"># lib/my_engine.rb\nmodule MyEngine\n  class Engine &lt; Rails::Engine\n  end\nend\n</pre> <p>Then ensure that this file is loaded at the top of your <code>config/application.rb</code> (or in your <code>Gemfile</code>) and it will automatically load models, controllers and helpers inside <code>app</code>, load routes at <code>config/routes.rb</code>, load locales at <code>config/locales/*</code>, and load tasks at <code>lib/tasks/*</code>.</p> <h2 id=\"class-Rails::Engine-label-Configuration\"><a href=\"engine/configuration\">Configuration</a></h2> <p>Besides the <code>Railtie</code> configuration which is shared across the application, in a <code>Rails::Engine</code> you can access <code>autoload_paths</code>, <code>eager_load_paths</code> and <code>autoload_once_paths</code>, which, differently from a <code>Railtie</code>, are scoped to the current engine.</p> <pre class=\"ruby\">class MyEngine &lt; Rails::Engine\n  # Add a load path for this specific Engine\n  config.autoload_paths &lt;&lt; File.expand_path(\"../lib/some/path\", __FILE__)\n\n  initializer \"my_engine.add_middleware\" do |app|\n    app.middleware.use MyEngine::Middleware\n  end\nend\n</pre> <h2 id=\"class-Rails::Engine-label-Generators\"><a href=\"generators\">Generators</a></h2> <p>You can set up generators for engines with <code>config.generators</code> method:</p> <pre class=\"ruby\">class MyEngine &lt; Rails::Engine\n  config.generators do |g|\n    g.orm             :active_record\n    g.template_engine :erb\n    g.test_framework  :test_unit\n  end\nend\n</pre> <p>You can also set generators for an application by using <code>config.app_generators</code>:</p> <pre class=\"ruby\">class MyEngine &lt; Rails::Engine\n  # note that you can also pass block to app_generators in the same way you\n  # can pass it to generators method\n  config.app_generators.orm :datamapper\nend\n</pre> <h2 id=\"class-Rails::Engine-label-Paths\"><a href=\"paths\">Paths</a></h2> <p>Since Rails 3.0, applications and engines have more flexible path configuration (as opposed to the previous hardcoded path configuration). This means that you are not required to place your controllers at <code>app/controllers</code>, but in any place which you find convenient.</p> <p>For example, let's suppose you want to place your controllers in <code>lib/controllers</code>. You can set that as an option:</p> <pre class=\"ruby\">class MyEngine &lt; Rails::Engine\n  paths[\"app/controllers\"] = \"lib/controllers\"\nend\n</pre> <p>You can also have your controllers loaded from both <code>app/controllers</code> and <code>lib/controllers</code>:</p> <pre class=\"ruby\">class MyEngine &lt; Rails::Engine\n  paths[\"app/controllers\"] &lt;&lt; \"lib/controllers\"\nend\n</pre> <p>The available paths in an engine are:</p> <pre class=\"ruby\">class MyEngine &lt; Rails::Engine\n  paths[\"app\"]                 # =&gt; [\"app\"]\n  paths[\"app/controllers\"]     # =&gt; [\"app/controllers\"]\n  paths[\"app/helpers\"]         # =&gt; [\"app/helpers\"]\n  paths[\"app/models\"]          # =&gt; [\"app/models\"]\n  paths[\"app/views\"]           # =&gt; [\"app/views\"]\n  paths[\"lib\"]                 # =&gt; [\"lib\"]\n  paths[\"lib/tasks\"]           # =&gt; [\"lib/tasks\"]\n  paths[\"config\"]              # =&gt; [\"config\"]\n  paths[\"config/initializers\"] # =&gt; [\"config/initializers\"]\n  paths[\"config/locales\"]      # =&gt; [\"config/locales\"]\n  paths[\"config/routes.rb\"]    # =&gt; [\"config/routes.rb\"]\nend\n</pre> <p>The <code>Application</code> class adds a couple more paths to this set. And as in your <code>Application</code>, all folders under <code>app</code> are automatically added to the load path. If you have an <code>app/services</code> folder for example, it will be added by default.</p> <h2 id=\"class-Rails::Engine-label-Endpoint\">Endpoint</h2> <p>An engine can also be a rack application. It can be useful if you have a rack application that you would like to wrap with <code>Engine</code> and provide with some of the <code>Engine</code>'s features.</p> <p>To do that, use the <code>endpoint</code> method:</p> <pre class=\"ruby\">module MyEngine\n  class Engine &lt; Rails::Engine\n    endpoint MyRackApplication\n  end\nend\n</pre> <p>Now you can mount your engine in application's routes just like that:</p> <pre class=\"ruby\">Rails.application.routes.draw do\n  mount MyEngine::Engine =&gt; \"/engine\"\nend\n</pre> <h2 id=\"class-Rails::Engine-label-Middleware+stack\">Middleware stack</h2> <p>As an engine can now be a rack endpoint, it can also have a middleware stack. The usage is exactly the same as in <code>Application</code>:</p> <pre class=\"ruby\">module MyEngine\n  class Engine &lt; Rails::Engine\n    middleware.use SomeMiddleware\n  end\nend\n</pre> <h2 id=\"class-Rails::Engine-label-Routes\">Routes</h2> <p>If you don't specify an endpoint, routes will be used as the default endpoint. You can use them just like you use an application's routes:</p> <pre class=\"ruby\"># ENGINE/config/routes.rb\nMyEngine::Engine.routes.draw do\n  get \"/\" =&gt; \"posts#index\"\nend\n</pre> <h2 id=\"class-Rails::Engine-label-Mount+priority\">Mount priority</h2> <p>Note that now there can be more than one router in your application, and it's better to avoid passing requests through many routers. Consider this situation:</p> <pre class=\"ruby\">Rails.application.routes.draw do\n  mount MyEngine::Engine =&gt; \"/blog\"\n  get \"/blog/omg\" =&gt; \"main#omg\"\nend\n</pre> <p><code>MyEngine</code> is mounted at <code>/blog</code>, and <code>/blog/omg</code> points to application's controller. In such a situation, requests to <code>/blog/omg</code> will go through <code>MyEngine</code>, and if there is no such route in <code>Engine</code>'s routes, it will be dispatched to <code>main#omg</code>. It's much better to swap that:</p> <pre class=\"ruby\">Rails.application.routes.draw do\n  get \"/blog/omg\" =&gt; \"main#omg\"\n  mount MyEngine::Engine =&gt; \"/blog\"\nend\n</pre> <p>Now, <code>Engine</code> will get only requests that were not handled by <code>Application</code>.</p> <h2 id=\"class-Rails::Engine-label-Engine+name\">\n<a href=\"engine\">Engine</a> name</h2> <p>There are some places where an Engine's name is used:</p> <ul>\n<li> <p>routes: when you mount an <a href=\"engine\">Engine</a> with <code>mount(MyEngine::Engine =&gt; '/my_engine')</code>, it's used as default <code>:as</code> option</p> </li>\n<li> <p>rake task for installing migrations <code>my_engine:install:migrations</code></p> </li>\n</ul> <p><a href=\"engine\">Engine</a> name is set by default based on class name. For <code>MyEngine::Engine</code> it will be <code>my_engine_engine</code>. You can change it manually using the <code>engine_name</code> method:</p> <pre class=\"ruby\">module MyEngine\n  class Engine &lt; Rails::Engine\n    engine_name \"my_engine\"\n  end\nend\n</pre> <h2 id=\"class-Rails::Engine-label-Isolated+Engine\">Isolated <a href=\"engine\">Engine</a>\n</h2> <p>Normally when you create controllers, helpers and models inside an engine, they are treated as if they were created inside the application itself. This means that all helpers and named routes from the application will be available to your engine's controllers as well.</p> <p>However, sometimes you want to isolate your engine from the application, especially if your engine has its own router. To do that, you simply need to call <code>isolate_namespace</code>. This method requires you to pass a module where all your controllers, helpers and models should be nested to:</p> <pre class=\"ruby\">module MyEngine\n  class Engine &lt; Rails::Engine\n    isolate_namespace MyEngine\n  end\nend\n</pre> <p>With such an engine, everything that is inside the <code>MyEngine</code> module will be isolated from the application.</p> <p>Consider such controller:</p> <pre class=\"ruby\">module MyEngine\n  class FooController &lt; ActionController::Base\n  end\nend\n</pre> <p>If an engine is marked as isolated, <code>FooController</code> has access only to helpers from <code>Engine</code> and <code>url_helpers</code> from <code>MyEngine::Engine.routes</code>.</p> <p>The next thing that changes in isolated engines is the behavior of routes. Normally, when you namespace your controllers, you also need to do namespace all your routes. With an isolated engine, the namespace is applied by default, so you can ignore it in routes:</p> <pre class=\"ruby\">MyEngine::Engine.routes.draw do\n  resources :articles\nend\n</pre> <p>The routes above will automatically point to <code>MyEngine::ArticlesController</code>. Furthermore, you don't need to use longer url helpers like <code>my_engine_articles_path</code>. Instead, you should simply use <code>articles_path</code> as you would do with your application.</p> <p>To make that behavior consistent with other parts of the framework, an isolated engine also has influence on <code>ActiveModel::Naming</code>. When you use a namespaced model, like <code>MyEngine::Article</code>, it will normally use the prefix “my_engine”. In an isolated engine, the prefix will be omitted in url helpers and form fields for convenience.</p> <pre class=\"ruby\">polymorphic_url(MyEngine::Article.new) # =&gt; \"articles_path\"\n\nform_for(MyEngine::Article.new) do\n  text_field :title # =&gt; &lt;input type=\"text\" name=\"article[title]\" id=\"article_title\" /&gt;\nend\n</pre> <p>Additionally, an isolated engine will set its name according to namespace, so MyEngine::Engine.engine_name will be “my_engine”. It will also set MyEngine.table_name_prefix to “my_engine_”, changing the MyEngine::Article model to use the my_engine_articles table.</p> <h2 id=\"class-Rails::Engine-label-Using+Engine-27s+routes+outside+Engine\">Using Engine's routes outside <a href=\"engine\">Engine</a>\n</h2> <p>Since you can now mount an engine inside application's routes, you do not have direct access to <code>Engine</code>'s <code>url_helpers</code> inside <code>Application</code>. When you mount an engine in an application's routes, a special helper is created to allow you to do that. Consider such a scenario:</p> <pre class=\"ruby\"># config/routes.rb\nRails.application.routes.draw do\n  mount MyEngine::Engine =&gt; \"/my_engine\", as: \"my_engine\"\n  get \"/foo\" =&gt; \"foo#index\"\nend\n</pre> <p>Now, you can use the <code>my_engine</code> helper inside your application:</p> <pre class=\"ruby\">class FooController &lt; ApplicationController\n  def index\n    my_engine.root_url # =&gt; /my_engine/\n  end\nend\n</pre> <p>There is also a <code>main_app</code> helper that gives you access to application's routes inside Engine:</p> <pre class=\"ruby\">module MyEngine\n  class BarController\n    def index\n      main_app.foo_path # =&gt; /foo\n    end\n  end\nend\n</pre> <p>Note that the <code>:as</code> option given to mount takes the <code>engine_name</code> as default, so most of the time you can simply omit it.</p> <p>Finally, if you want to generate a url to an engine's route using <code>polymorphic_url</code>, you also need to pass the engine helper. Let's say that you want to create a form pointing to one of the engine's routes. All you need to do is pass the helper as the first element in array with attributes for url:</p> <pre class=\"ruby\">form_for([my_engine, @user])\n</pre> <p>This code will use <code>my_engine.user_path(@user)</code> to generate the proper route.</p> <h2 id=\"class-Rails::Engine-label-Isolated+engine-27s+helpers\">Isolated engine's helpers</h2> <p>Sometimes you may want to isolate engine, but use helpers that are defined for it. If you want to share just a few specific helpers you can add them to application's helpers in ApplicationController:</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  helper MyEngine::SharedEngineHelper\nend\n</pre> <p>If you want to include all of the engine's helpers, you can use helper method on an engine's instance:</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  helper MyEngine::Engine.helpers\nend\n</pre> <p>It will include all of the helpers from engine's directory. Take into account that this does not include helpers defined in controllers with helper_method or other similar solutions, only helpers defined in the helpers directory will be included.</p> <h2 id=\"class-Rails::Engine-label-Migrations+-26+seed+data\">Migrations &amp; seed data</h2> <p>Engines can have their own migrations. The default path for migrations is exactly the same as in application: <code>db/migrate</code></p> <p>To use engine's migrations in application you can use rake task, which copies them to application's dir:</p> <pre>rake ENGINE_NAME:install:migrations</pre> <p>Note that some of the migrations may be skipped if a migration with the same name already exists in application. In such a situation you must decide whether to leave that migration or rename the migration in the application and rerun copying migrations.</p> <p>If your engine has migrations, you may also want to prepare data for the database in the <code>db/seeds.rb</code> file. You can load that data using the <code>load_seed</code> method, e.g.</p> <pre class=\"ruby\">MyEngine::Engine.load_seed\n</pre> <h2 id=\"class-Rails::Engine-label-Loading+priority\">Loading priority</h2> <p>In order to change engine's priority you can use <code>config.railties_order</code> in main application. It will affect the priority of loading views, helpers, assets and all the other files related to engine or application.</p> <pre class=\"ruby\"># load Blog::Engine with highest priority, followed by application and other railties\nconfig.railties_order = [Blog::Engine, :main_app, :all]\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-called_from\"> <span class=\"method-name\">called_from</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-isolated\"> <span class=\"method-name\">isolated</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-isolated-3F\"> <span class=\"method-name\">isolated?</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-endpoint\"> <span class=\"method-name\">endpoint</span><span class=\"method-args\">(endpoint = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"endpoint-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 371\ndef endpoint(endpoint = nil)\n  @endpoint ||= nil\n  @endpoint = endpoint if endpoint\n  @endpoint\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-find\"> <span class=\"method-name\">find</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Finds engine with given path</p> <div class=\"method-source-code\" id=\"find-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 409\ndef find(path)\n  expanded_path = File.expand_path path\n  Rails::Engine.subclasses.each do |klass|\n    engine = klass.instance\n    return engine if File.expand_path(engine.root) == expanded_path\n  end\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-find_root\"> <span class=\"method-name\">find_root</span><span class=\"method-args\">(from)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_root-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 367\ndef find_root(from)\n  find_root_with_flag \"lib\", from\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-inherited\"> <span class=\"method-name\">inherited</span><span class=\"method-args\">(base)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"inherited-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 348\ndef inherited(base)\n  unless base.abstract_railtie?\n    Rails::Railtie::Configuration.eager_load_namespaces &lt;&lt; base\n\n    base.called_from = begin\n      call_stack = if Kernel.respond_to?(:caller_locations)\n        caller_locations.map { |l| l.absolute_path || l.path }\n      else\n        # Remove the line number from backtraces making sure we don't leave anything behind\n        caller.map { |p| p.sub(/:\\d+.*/, '') }\n      end\n\n      File.dirname(call_stack.detect { |p| p !~ %r[railties[\\w.-]*/lib/rails|rack[\\w.-]*/lib/rack] })\n    end\n  end\n\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-isolate_namespace\"> <span class=\"method-name\">isolate_namespace</span><span class=\"method-args\">(mod)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"isolate_namespace-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 377\ndef isolate_namespace(mod)\n  engine_name(generate_railtie_name(mod.name))\n\n  self.routes.default_scope = { module: ActiveSupport::Inflector.underscore(mod.name) }\n  self.isolated = true\n\n  unless mod.respond_to?(:railtie_namespace)\n    name, railtie = engine_name, self\n\n    mod.singleton_class.instance_eval do\n      define_method(:railtie_namespace) { railtie }\n\n      unless mod.respond_to?(:table_name_prefix)\n        define_method(:table_name_prefix) { \"#{name}_\" }\n      end\n\n      unless mod.respond_to?(:use_relative_model_naming?)\n        class_eval \"def use_relative_model_naming?; true; end\", __FILE__, __LINE__\n      end\n\n      unless mod.respond_to?(:railtie_helpers_paths)\n        define_method(:railtie_helpers_paths) { railtie.helpers_paths }\n      end\n\n      unless mod.respond_to?(:railtie_routes_url_helpers)\n        define_method(:railtie_routes_url_helpers) {|include_path_helpers = true| railtie.routes.url_helpers(include_path_helpers) }\n      end\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 422\ndef initialize\n  @_all_autoload_paths = nil\n  @_all_load_paths     = nil\n  @app                 = nil\n  @config              = nil\n  @env_config          = nil\n  @helpers             = nil\n  @routes              = nil\n  super\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-app\"> <span class=\"method-name\">app</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the underlying rack application for this engine.</p> <div class=\"method-source-code\" id=\"app-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 499\ndef app\n  @app ||= begin\n    config.middleware = config.middleware.merge_into(default_middleware_stack)\n    config.middleware.build(endpoint)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define the <a href=\"rack\">Rack</a> <a href=\"api\">API</a> for this engine.</p> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 513\ndef call(env)\n  env.merge!(env_config)\n  if env['SCRIPT_NAME']\n    env[\"ROUTES_#{routes.object_id}_SCRIPT_NAME\"] = env['SCRIPT_NAME'].dup\n  end\n  app.call(env)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-config\"> <span class=\"method-name\">config</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define the configuration object for the engine.</p> <div class=\"method-source-code\" id=\"config-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 537\ndef config\n  @config ||= Engine::Configuration.new(self.class.find_root(self.class.called_from))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eager_load-21\"> <span class=\"method-name\">eager_load!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Eager load the application by loading all ruby files inside eager_load paths.</p> <div class=\"method-source-code\" id=\"eager_load-21-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 468\ndef eager_load!\n  config.eager_load_paths.each do |load_path|\n    matcher = /\\A#{Regexp.escape(load_path.to_s)}\\/(.*)\\.rb\\Z/\n    Dir.glob(\"#{load_path}/**/*.rb\").sort.each do |file|\n      require_dependency file.sub(matcher, '\\1')\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-endpoint\"> <span class=\"method-name\">endpoint</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the endpoint for this engine. If none is registered, defaults to an ActionDispatch::Routing::RouteSet.</p> <div class=\"method-source-code\" id=\"endpoint-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 508\ndef endpoint\n  self.class.endpoint || routes\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-env_config\"> <span class=\"method-name\">env_config</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines additional <a href=\"rack\">Rack</a> env configuration that is added on each call.</p> <div class=\"method-source-code\" id=\"env_config-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 522\ndef env_config\n  @env_config ||= {\n    'action_dispatch.routes' =&gt; routes\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-helpers\"> <span class=\"method-name\">helpers</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a module with all the helpers defined for the engine.</p> <div class=\"method-source-code\" id=\"helpers-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 482\ndef helpers\n  @helpers ||= begin\n    helpers = Module.new\n    all = ActionController::Base.all_helpers_from_path(helpers_paths)\n    ActionController::Base.modules_for_helpers(all).each do |mod|\n      helpers.send(:include, mod)\n    end\n    helpers\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-helpers_paths\"> <span class=\"method-name\">helpers_paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all registered helpers paths.</p> <div class=\"method-source-code\" id=\"helpers_paths-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 494\ndef helpers_paths\n  paths[\"app/helpers\"].existent\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load_console\"> <span class=\"method-name\">load_console</span><span class=\"method-args\">(app=self)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Load console and invoke the registered hooks. Check <code>Rails::Railtie.console</code> for more info.</p> <div class=\"method-source-code\" id=\"load_console-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 435\ndef load_console(app=self)\n  require \"rails/console/app\"\n  require \"rails/console/helpers\"\n  run_console_blocks(app)\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load_generators\"> <span class=\"method-name\">load_generators</span><span class=\"method-args\">(app=self)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Load Rails generators and invoke the registered hooks. Check <code>Rails::Railtie.generators</code> for more info.</p> <div class=\"method-source-code\" id=\"load_generators-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 459\ndef load_generators(app=self)\n  require \"rails/generators\"\n  run_generators_blocks(app)\n  Rails::Generators.configure!(app.config.generators)\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load_runner\"> <span class=\"method-name\">load_runner</span><span class=\"method-args\">(app=self)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Load Rails runner and invoke the registered hooks. Check <code>Rails::Railtie.runner</code> for more info.</p> <div class=\"method-source-code\" id=\"load_runner-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 444\ndef load_runner(app=self)\n  run_runner_blocks(app)\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load_seed\"> <span class=\"method-name\">load_seed</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Load data from db/seeds.rb file. It can be used in to load engines' seeds, e.g.:</p> <p>Blog::Engine.load_seed</p> <div class=\"method-source-code\" id=\"load_seed-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 545\ndef load_seed\n  seed_file = paths[\"db/seeds.rb\"].existent.first\n  load(seed_file) if seed_file\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load_tasks\"> <span class=\"method-name\">load_tasks</span><span class=\"method-args\">(app=self)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Load <a href=\"engine/rake\">Rake</a>, railties tasks and invoke the registered hooks. Check <code>Rails::Railtie.rake_tasks</code> for more info.</p> <div class=\"method-source-code\" id=\"load_tasks-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 451\ndef load_tasks(app=self)\n  require \"rake\"\n  run_tasks_blocks(app)\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-railties\"> <span class=\"method-name\">railties</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"railties-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 477\ndef railties\n  @railties ||= Railties.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-routes\"> <span class=\"method-name\">routes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines the routes for this engine. If a block is given to routes, it is appended to the engine.</p> <div class=\"method-source-code\" id=\"routes-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 530\ndef routes\n  @routes ||= ActionDispatch::Routing::RouteSet.new\n  @routes.append(&amp;Proc.new) if block_given?\n  @routes\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load_config_initializer\"> <span class=\"method-name\">load_config_initializer</span><span class=\"method-args\">(initializer)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"load_config_initializer-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine.rb, line 650\ndef load_config_initializer(initializer)\n  ActiveSupport::Notifications.instrument('load_config_initializer.railties', initializer: initializer) do\n    load(initializer)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/engine/configuration":"<h1 id=\"class-Rails::Engine::Configuration\" class=\"class\"> class Rails::Engine::Configuration </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../railtie/configuration\">Rails::Railtie::Configuration</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-autoload_once_paths\"> <span class=\"method-name\">autoload_once_paths</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-autoload_paths\"> <span class=\"method-name\">autoload_paths</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-eager_load_paths\"> <span class=\"method-name\">eager_load_paths</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-middleware\"> <span class=\"method-name\">middleware</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-root\"> <span class=\"method-name\">root</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(root=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../railtie/configuration#method-c-new\">Rails::Railtie::Configuration.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine/configuration.rb, line 9\ndef initialize(root=nil)\n  super()\n  @root = root\n  @generators = app_generators.dup\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-autoload_once_paths\"> <span class=\"method-name\">autoload_once_paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"autoload_once_paths-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine/configuration.rb, line 82\ndef autoload_once_paths\n  @autoload_once_paths ||= paths.autoload_once\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-autoload_paths\"> <span class=\"method-name\">autoload_paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"autoload_paths-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine/configuration.rb, line 86\ndef autoload_paths\n  @autoload_paths ||= paths.autoload_paths\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eager_load_paths\"> <span class=\"method-name\">eager_load_paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"eager_load_paths-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine/configuration.rb, line 78\ndef eager_load_paths\n  @eager_load_paths ||= paths.eager_load\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-middleware\"> <span class=\"method-name\">middleware</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the middleware stack for the engine.</p> <div class=\"method-source-code\" id=\"middleware-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine/configuration.rb, line 16\ndef middleware\n  @middleware ||= Rails::Configuration::MiddlewareStackProxy.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-paths\"> <span class=\"method-name\">paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"paths-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine/configuration.rb, line 38\ndef paths\n  @paths ||= begin\n    paths = Rails::Paths::Root.new(@root)\n\n    paths.add \"app\",                 eager_load: true, glob: \"*\"\n    paths.add \"app/assets\",          glob: \"*\"\n    paths.add \"app/controllers\",     eager_load: true\n    paths.add \"app/helpers\",         eager_load: true\n    paths.add \"app/models\",          eager_load: true\n    paths.add \"app/mailers\",         eager_load: true\n    paths.add \"app/views\"\n\n    paths.add \"app/controllers/concerns\", eager_load: true\n    paths.add \"app/models/concerns\",      eager_load: true\n\n    paths.add \"lib\",                 load_path: true\n    paths.add \"lib/assets\",          glob: \"*\"\n    paths.add \"lib/tasks\",           glob: \"**/*.rake\"\n\n    paths.add \"config\"\n    paths.add \"config/environments\", glob: \"#{Rails.env}.rb\"\n    paths.add \"config/initializers\", glob: \"**/*.rb\"\n    paths.add \"config/locales\",      glob: \"*.{rb,yml}\"\n    paths.add \"config/routes.rb\"\n\n    paths.add \"db\"\n    paths.add \"db/migrate\"\n    paths.add \"db/seeds.rb\"\n\n    paths.add \"vendor\",              load_path: true\n    paths.add \"vendor/assets\",       glob: \"*\"\n\n    paths\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-root-3D\"> <span class=\"method-name\">root=</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"root-3D-source\"> <pre class=\"ruby\"># File railties/lib/rails/engine/configuration.rb, line 74\ndef root=(value)\n  @root = paths.path = Pathname.new(value).expand_path\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators":"<h1 id=\"module-Rails::Generators\" class=\"module\"> module Rails::Generators </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"DEFAULT_ALIASES\">DEFAULT_ALIASES </dt>\n\n<dt id=\"DEFAULT_OPTIONS\">DEFAULT_OPTIONS </dt>\n\n<dt id=\"RAILS_DEV_PATH\">RAILS_DEV_PATH </dt>\n<dd>\n<p>We need to store the <a href=\"generators#RAILS_DEV_PATH\">RAILS_DEV_PATH</a> in a constant, otherwise the path can change in Ruby 1.8.7 when we FileUtils.cd.</p> </dd>\n<dt id=\"RESERVED_NAMES\">RESERVED_NAMES </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-fallbacks\"> <span class=\"method-name\">fallbacks</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Hold configured generators fallbacks. If a plugin developer wants a generator group to fallback to another group in case of missing generators, they can add a fallback.</p> <p>For example, shoulda is considered a test_framework and is an extension of test_unit. However, most part of shoulda generators are similar to test_unit ones.</p> <p>Shoulda then can tell generators to search for test_unit generators when some of them are not available by adding a fallback:</p> <pre class=\"ruby\">Rails::Generators.fallbacks[:shoulda] = :test_unit\n</pre> <div class=\"method-source-code\" id=\"fallbacks-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 98\ndef self.fallbacks\n  @fallbacks ||= {}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-help\"> <span class=\"method-name\">help</span><span class=\"method-args\">(command = 'generate')</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Show help message with available generators.</p> <div class=\"method-source-code\" id=\"help-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 211\ndef self.help(command = 'generate')\n  puts \"Usage: rails #{command} GENERATOR [args] [options]\"\n  puts\n  puts \"General options:\"\n  puts \"  -h, [--help]     # Print generator's options and usage\"\n  puts \"  -p, [--pretend]  # Run but do not make any changes\"\n  puts \"  -f, [--force]    # Overwrite files that already exist\"\n  puts \"  -s, [--skip]     # Skip files that already exist\"\n  puts \"  -q, [--quiet]    # Suppress status output\"\n  puts\n  puts \"Please choose a generator below.\"\n  puts\n\n  print_generators\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-hidden_namespaces\"> <span class=\"method-name\">hidden_namespaces</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of generator namespaces that are hidden. Generator namespaces may be hidden for a variety of reasons. Some are aliased such as “rails:migration” and can be invoked with the shorter “migration”, others are private to other generators such as “css:scaffold”.</p> <div class=\"method-source-code\" id=\"hidden_namespaces-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 173\ndef self.hidden_namespaces\n  @hidden_namespaces ||= begin\n    orm      = options[:rails][:orm]\n    test     = options[:rails][:test_framework]\n    template = options[:rails][:template_engine]\n    css      = options[:rails][:stylesheet_engine]\n\n    [\n      \"rails\",\n      \"resource_route\",\n      \"#{orm}:migration\",\n      \"#{orm}:model\",\n      \"#{test}:controller\",\n      \"#{test}:helper\",\n      \"#{test}:integration\",\n      \"#{test}:mailer\",\n      \"#{test}:model\",\n      \"#{test}:scaffold\",\n      \"#{test}:view\",\n      \"#{template}:controller\",\n      \"#{template}:scaffold\",\n      \"#{template}:mailer\",\n      \"#{css}:scaffold\",\n      \"#{css}:assets\",\n      \"css:assets\",\n      \"css:scaffold\"\n    ]\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-c-hide_namespace\"> <span class=\"method-name\">hide_namespace</span><span class=\"method-args\">(*namespaces)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"generators#method-c-hide_namespaces\">hide_namespaces</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-hide_namespaces\"> <span class=\"method-name\">hide_namespaces</span><span class=\"method-args\">(*namespaces)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"hide_namespaces-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 204\ndef hide_namespaces(*namespaces)\n  hidden_namespaces.concat(namespaces)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"generators#method-c-hide_namespace\">hide_namespace</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-invoke\"> <span class=\"method-name\">invoke</span><span class=\"method-args\">(namespace, args=ARGV, config={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Receives a namespace, arguments and the behavior to invoke the generator. It's used as the default entry point for generate, destroy and update commands.</p> <div class=\"method-source-code\" id=\"invoke-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 153\ndef self.invoke(namespace, args=ARGV, config={})\n  names = namespace.to_s.split(':')\n  if klass = find_by_namespace(names.pop, names.any? &amp;&amp; names.join(':'))\n    args &lt;&lt; \"--help\" if args.empty? &amp;&amp; klass.arguments.any? { |a| a.required? }\n    klass.start(args, config)\n  else\n    options     = sorted_groups.map(&amp;:last).flatten\n    suggestions = options.sort_by {|suggested| levenshtein_distance(namespace.to_s, suggested) }.first(3)\n    msg =  \"Could not find generator '#{namespace}'. \"\n    msg &lt;&lt; \"Maybe you meant #{ suggestions.map {|s| \"'#{s}'\"}.to_sentence(last_word_connector: \" or \") }\\n\"\n    msg &lt;&lt; \"Run `rails generate --help` for more options.\"\n    puts msg\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-no_color-21\"> <span class=\"method-name\">no_color!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove the color from output.</p> <div class=\"method-source-code\" id=\"no_color-21-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 103\ndef self.no_color!\n  Thor::Base.shell = Thor::Shell::Basic\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-print_generators\"> <span class=\"method-name\">print_generators</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"print_generators-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 232\ndef self.print_generators\n  sorted_groups.each { |b, n| print_list(b, n) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-public_namespaces\"> <span class=\"method-name\">public_namespaces</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"public_namespaces-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 227\ndef self.public_namespaces\n  lookup!\n  subclasses.map { |k| k.namespace }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-sorted_groups\"> <span class=\"method-name\">sorted_groups</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"sorted_groups-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 236\ndef self.sorted_groups\n  namespaces = public_namespaces\n  namespaces.sort!\n  groups = Hash.new { |h,k| h[k] = [] }\n  namespaces.each do |namespace|\n    base = namespace.split(':').first\n    groups[base] &lt;&lt; namespace\n  end\n  rails = groups.delete(\"rails\")\n  rails.map! { |n| n.sub(/^rails:/, '') }\n  rails.delete(\"app\")\n  rails.delete(\"plugin\")\n\n  hidden_namespaces.each { |n| groups.delete(n.to_s) }\n\n  [[\"rails\", rails]] + groups.sort.to_a\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-subclasses\"> <span class=\"method-name\">subclasses</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Track all generators subclasses.</p> <div class=\"method-source-code\" id=\"subclasses-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 108\ndef self.subclasses\n  @subclasses ||= []\nend</pre> </div> </div> </div> </section> <section id=\"protected-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-levenshtein_distance\"> <span class=\"method-name\">levenshtein_distance</span><span class=\"method-args\">(str1, str2)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This code is based directly on the Text gem implementation Returns a value representing the “cost” of transforming str1 into str2</p> <div class=\"method-source-code\" id=\"levenshtein_distance-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators.rb, line 258\ndef self.levenshtein_distance str1, str2\n  s = str1\n  t = str2\n  n = s.length\n  m = t.length\n\n  return m if (0 == n)\n  return n if (0 == m)\n\n  d = (0..m).to_a\n  x = nil\n\n  str1.each_char.each_with_index do |char1,i|\n    e = i+1\n\n    str2.each_char.each_with_index do |char2,j|\n      cost = (char1 == char2) ? 0 : 1\n      x = [\n           d[j+1] + 1, # insertion\n           e + 1,      # deletion\n           d[j] + cost # substitution\n          ].min\n      d[j] = e\n      e = x\n    end\n\n    d[m] = x\n  end\n\n  return x\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators/actions":"<h1 id=\"module-Rails::Generators::Actions\" class=\"module\"> module Rails::Generators::Actions </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_source\"> <span class=\"method-name\">add_source</span><span class=\"method-args\">(source, options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add the given source to <code>Gemfile</code></p> <pre class=\"ruby\">add_source \"http://gems.github.com/\"\n</pre> <div class=\"method-source-code\" id=\"add_source-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 68\ndef add_source(source, options={})\n  log :source, source\n\n  in_root do\n    prepend_file \"Gemfile\", \"source #{quote(source)}\\n\", verbose: false\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_bundle\"> <span class=\"method-name\">after_bundle</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Registers a callback to be executed after bundle and spring binstubs have run.</p> <pre class=\"ruby\">after_bundle do\n  git add: '.'\nend\n</pre> <div class=\"method-source-code\" id=\"after_bundle-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 242\ndef after_bundle(&amp;block)\n  @after_bundle_callbacks &lt;&lt; block\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-application\"> <span class=\"method-name\">application</span><span class=\"method-args\">(data=nil, options={})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"actions#method-i-environment\">environment</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-capify-21\"> <span class=\"method-name\">capify!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Just run the capify command in root</p> <pre class=\"ruby\">capify!\n</pre> <div class=\"method-source-code\" id=\"capify-21-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 212\ndef capify!\n  log :capify, \"\"\n  in_root { run(\"#{extify(:capify)} .\", verbose: false) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-environment\"> <span class=\"method-name\">environment</span><span class=\"method-args\">(data=nil, options={}) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a line inside the <a href=\"../application\">Application</a> class for <code>config/application.rb</code>.</p> <p>If options <code>:env</code> is specified, the line is appended to the corresponding file in <code>config/environments</code>.</p> <pre class=\"ruby\">environment do\n  \"config.autoload_paths += %W(#{config.root}/extras)\"\nend\n\nenvironment(nil, env: \"development\") do\n  \"config.autoload_paths += %W(#{config.root}/extras)\"\nend\n</pre> <div class=\"method-source-code\" id=\"environment-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 88\ndef environment(data=nil, options={})\n  sentinel = /class [a-z_:]+ &lt; Rails::Application/i\n  env_file_sentinel = /Rails\\.application\\.configure do/\n  data = yield if !data &amp;&amp; block_given?\n\n  in_root do\n    if options[:env].nil?\n      inject_into_file 'config/application.rb', \"\\n    #{data}\", after: sentinel, verbose: false\n    else\n      Array(options[:env]).each do |env|\n        inject_into_file \"config/environments/#{env}.rb\", \"\\n  #{data}\", after: env_file_sentinel, verbose: false\n      end\n    end\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"actions#method-i-application\">application</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-gem\"> <span class=\"method-name\">gem</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds an entry into <code>Gemfile</code> for the supplied gem.</p> <pre class=\"ruby\">gem \"rspec\", group: :test\ngem \"technoweenie-restful-authentication\", lib: \"restful-authentication\", source: \"http://gems.github.com/\"\ngem \"rails\", \"3.0\", git: \"git://github.com/rails/rails\"\n</pre> <div class=\"method-source-code\" id=\"gem-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 18\ndef gem(*args)\n  options = args.extract_options!\n  name, version = args\n\n  # Set the message to be shown in logs. Uses the git repo if one is given,\n  # otherwise use name (version).\n  parts, message = [ quote(name) ], name\n  if version ||= options.delete(:version)\n    parts   &lt;&lt; quote(version)\n    message &lt;&lt; \" (#{version})\"\n  end\n  message = options[:git] if options[:git]\n\n  log :gemfile, message\n\n  options.each do |option, value|\n    parts &lt;&lt; \"#{option}: #{quote(value)}\"\n  end\n\n  in_root do\n    str = \"gem #{parts.join(\", \")}\"\n    str = \"  \" + str if @in_group\n    str = \"\\n\" + str\n    append_file \"Gemfile\", str, verbose: false\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-gem_group\"> <span class=\"method-name\">gem_group</span><span class=\"method-args\">(*names, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps gem entries inside a group.</p> <pre class=\"ruby\">gem_group :development, :test do\n  gem \"rspec-rails\"\nend\n</pre> <div class=\"method-source-code\" id=\"gem_group-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 50\ndef gem_group(*names, &amp;block)\n  name = names.map(&amp;:inspect).join(\", \")\n  log :gemfile, \"group #{name}\"\n\n  in_root do\n    append_file \"Gemfile\", \"\\ngroup #{name} do\", force: true\n\n    @in_group = true\n    instance_eval(&amp;block)\n    @in_group = false\n\n    append_file \"Gemfile\", \"\\nend\\n\", force: true\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-generate\"> <span class=\"method-name\">generate</span><span class=\"method-args\">(what, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Generate something using a generator from Rails or a plugin. The second parameter is the argument string that is passed to the generator or an <a href=\"../../array\">Array</a> that is joined.</p> <pre class=\"ruby\">generate(:authenticated, \"user session\")\n</pre> <div class=\"method-source-code\" id=\"generate-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 190\ndef generate(what, *args)\n  log :generate, what\n  argument = args.flat_map {|arg| arg.to_s }.join(\" \")\n\n  in_root { run_ruby_script(\"bin/rails generate #{what} #{argument}\", verbose: false) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-git\"> <span class=\"method-name\">git</span><span class=\"method-args\">(commands={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Run a command in git.</p> <pre class=\"ruby\">git :init\ngit add: \"this.file that.rb\"\ngit add: \"onefile.rb\", rm: \"badfile.cxx\"\n</pre> <div class=\"method-source-code\" id=\"git-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 110\ndef git(commands={})\n  if commands.is_a?(Symbol)\n    run \"git #{commands}\"\n  else\n    commands.each do |cmd, options|\n      run \"git #{cmd} #{options}\"\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-initializer\"> <span class=\"method-name\">initializer</span><span class=\"method-args\">(filename, data=nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new initializer with the provided code (either in a block or a string).</p> <pre class=\"ruby\">initializer(\"globals.rb\") do\n  data = \"\"\n\n  ['MY_WORK', 'ADMINS', 'BEST_COMPANY_EVAR'].each do |const|\n    data &lt;&lt; \"#{const} = :entp\\n\"\n  end\n\n  data\nend\n\ninitializer(\"api.rb\", \"API_KEY = '123456'\")\n</pre> <div class=\"method-source-code\" id=\"initializer-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 180\ndef initializer(filename, data=nil, &amp;block)\n  log :initializer, filename\n  create_file(\"config/initializers/#{filename}\", data, verbose: false, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-lib\"> <span class=\"method-name\">lib</span><span class=\"method-args\">(filename, data=nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new file in the lib/ directory. Code can be specified in a block or a data string can be given.</p> <pre class=\"ruby\">lib(\"crypto.rb\") do\n  \"crypted_special_value = '#{rand}--#{Time.now}--#{rand(1337)}--'\"\nend\n\nlib(\"foreign.rb\", \"# Foreign code is fun\")\n</pre> <div class=\"method-source-code\" id=\"lib-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 142\ndef lib(filename, data=nil, &amp;block)\n  log :lib, filename\n  create_file(\"lib/#{filename}\", data, verbose: false, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rake\"> <span class=\"method-name\">rake</span><span class=\"method-args\">(command, options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the supplied rake task</p> <pre class=\"ruby\">rake(\"db:migrate\")\nrake(\"db:migrate\", env: \"production\")\nrake(\"gems:install\", sudo: true)\n</pre> <div class=\"method-source-code\" id=\"rake-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 202\ndef rake(command, options={})\n  log :rake, command\n  env  = options[:env] || ENV[\"RAILS_ENV\"] || 'development'\n  sudo = options[:sudo] &amp;&amp; RbConfig::CONFIG['host_os'] !~ /mswin|mingw/ ? 'sudo ' : ''\n  in_root { run(\"#{sudo}#{extify(:rake)} #{command} RAILS_ENV=#{env}\", verbose: false) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-rakefile\"> <span class=\"method-name\">rakefile</span><span class=\"method-args\">(filename, data=nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <code>Rakefile</code> with the provided code (either in a block or a string).</p> <pre class=\"ruby\">rakefile(\"bootstrap.rake\") do\n  project = ask(\"What is the UNIX name of your project?\")\n\n  &lt;&lt;-TASK\n    namespace :#{project} do\n      task :bootstrap do\n        puts \"I like boots!\"\n      end\n    end\n  TASK\nend\n\nrakefile('seed.rake', 'puts \"Planting seeds\"')\n</pre> <div class=\"method-source-code\" id=\"rakefile-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 162\ndef rakefile(filename, data=nil, &amp;block)\n  log :rakefile, filename\n  create_file(\"lib/tasks/#{filename}\", data, verbose: false, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-readme\"> <span class=\"method-name\">readme</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Reads the given file at the source root and prints it in the console.</p> <pre class=\"ruby\">readme \"README\"\n</pre> <div class=\"method-source-code\" id=\"readme-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 232\ndef readme(path)\n  log File.read(find_in_source_paths(path))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-route\"> <span class=\"method-name\">route</span><span class=\"method-args\">(routing_code)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Make an entry in Rails routing file <code>config/routes.rb</code></p> <pre class=\"ruby\">route \"root 'welcome#index'\"\n</pre> <div class=\"method-source-code\" id=\"route-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 220\ndef route(routing_code)\n  log :route, routing_code\n  sentinel = /\\.routes\\.draw do\\s*\\n/m\n\n  in_root do\n    inject_into_file 'config/routes.rb', \"  #{routing_code}\\n\", { after: sentinel, verbose: false, force: true }\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-vendor\"> <span class=\"method-name\">vendor</span><span class=\"method-args\">(filename, data=nil, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new file in the <code>vendor/</code> directory. Code can be specified in a block or a data string can be given.</p> <pre class=\"ruby\">vendor(\"sekrit.rb\") do\n  sekrit_salt = \"#{Time.now}--#{3.years.ago}--#{rand}--\"\n  \"salt = '#{sekrit_salt}'\"\nend\n\nvendor(\"foreign.rb\", \"# Foreign code is fun\")\n</pre> <div class=\"method-source-code\" id=\"vendor-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 129\ndef vendor(filename, data=nil, &amp;block)\n  log :vendor, filename\n  create_file(\"vendor/#{filename}\", data, verbose: false, &amp;block)\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extify\"> <span class=\"method-name\">extify</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add an extension to the given name based on the platform.</p> <div class=\"method-source-code\" id=\"extify-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 261\ndef extify(name)\n  if RbConfig::CONFIG['host_os'] =~ /mswin|mingw/\n    \"#{name}.bat\"\n  else\n    name\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-log\"> <span class=\"method-name\">log</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Define log for backwards compatibility. If just one argument is sent, invoke say, otherwise invoke say_status. Differently from say and similarly to say_status, this method respects the quiet? option given.</p> <div class=\"method-source-code\" id=\"log-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 251\ndef log(*args)\n  if args.size == 1\n    say args.first.to_s unless options.quiet?\n  else\n    args &lt;&lt; (self.behavior == :invoke ? :green : :red)\n    say_status(*args)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote\"> <span class=\"method-name\">quote</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Surround string with single quotes if there is no quotes. Otherwise fall back to double quotes</p> <div class=\"method-source-code\" id=\"quote-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/actions.rb, line 271\ndef quote(value)\n  return value.inspect unless value.is_a? String\n\n  if value.include?(\"'\")\n    value.inspect\n  else\n    \"'#{value}'\"\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators/activemodel":"<h1 id=\"class-Rails::Generators::ActiveModel\" class=\"class\"> class Rails::Generators::ActiveModel </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"activemodel\">ActiveModel</a> is a class to be implemented by each ORM to allow Rails to generate customized controller code.</p> <p>The <a href=\"../api\">API</a> has the same methods as <a href=\"../../activerecord\">ActiveRecord</a>, but each method returns a string that matches the ORM <a href=\"../api\">API</a>.</p> <p>For example:</p> <pre class=\"ruby\">ActiveRecord::Generators::ActiveModel.find(Foo, \"params[:id]\")\n# =&gt; \"Foo.find(params[:id])\"\n\nDataMapper::Generators::ActiveModel.find(Foo, \"params[:id]\")\n# =&gt; \"Foo.get(params[:id])\"\n</pre> <p>On initialization, the <a href=\"activemodel\">ActiveModel</a> accepts the instance name that will receive the calls:</p> <pre class=\"ruby\">builder = ActiveRecord::Generators::ActiveModel.new \"@foo\"\nbuilder.save # =&gt; \"@foo.save\"\n</pre> <p>The only exception in <a href=\"activemodel\">ActiveModel</a> for <a href=\"../../activerecord\">ActiveRecord</a> is the use of self.build instead of self.new.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-name\"> <span class=\"method-name\">name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-all\"> <span class=\"method-name\">all</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>GET index</p> <div class=\"method-source-code\" id=\"all-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/active_model.rb, line 34\ndef self.all(klass)\n  \"#{klass}.all\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-build\"> <span class=\"method-name\">build</span><span class=\"method-args\">(klass, params=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>GET new POST create</p> <div class=\"method-source-code\" id=\"build-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/active_model.rb, line 48\ndef self.build(klass, params=nil)\n  if params\n    \"#{klass}.new(#{params})\"\n  else\n    \"#{klass}.new\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-find\"> <span class=\"method-name\">find</span><span class=\"method-args\">(klass, params=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>GET show GET edit PATCH/PUT update DELETE destroy</p> <div class=\"method-source-code\" id=\"find-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/active_model.rb, line 42\ndef self.find(klass, params=nil)\n  \"#{klass}.find(#{params})\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/active_model.rb, line 29\ndef initialize(name)\n  @name = name\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destroy\"> <span class=\"method-name\">destroy</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>DELETE destroy</p> <div class=\"method-source-code\" id=\"destroy-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/active_model.rb, line 73\ndef destroy\n  \"#{name}.destroy\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-errors\"> <span class=\"method-name\">errors</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>POST create PATCH/PUT update</p> <div class=\"method-source-code\" id=\"errors-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/active_model.rb, line 68\ndef errors\n  \"#{name}.errors\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-save\"> <span class=\"method-name\">save</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>POST create</p> <div class=\"method-source-code\" id=\"save-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/active_model.rb, line 57\ndef save\n  \"#{name}.save\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-update\"> <span class=\"method-name\">update</span><span class=\"method-args\">(params=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>PATCH/PUT update</p> <div class=\"method-source-code\" id=\"update-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/active_model.rb, line 62\ndef update(params=nil)\n  \"#{name}.update(#{params})\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators/base":"<h1 id=\"class-Rails::Generators::Base\" class=\"class\"> class Rails::Generators::Base </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Thor::Group</dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"actions\">Rails::Generators::Actions</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-base_root\"> <span class=\"method-name\">base_root</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the base root for a common set of generators. This is used to dynamically guess the default source root.</p> <div class=\"method-source-code\" id=\"base_root-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 217\ndef self.base_root\n  File.dirname(__FILE__)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-default_source_root\"> <span class=\"method-name\">default_source_root</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the default source root for a given generator. This is used internally by rails to set its generators source root. If you want to customize your source root, you should use source_root.</p> <div class=\"method-source-code\" id=\"default_source_root-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 208\ndef self.default_source_root\n  return unless base_name &amp;&amp; generator_name\n  return unless default_generator_root\n  path = File.join(default_generator_root, 'templates')\n  path if File.exist?(path)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-desc\"> <span class=\"method-name\">desc</span><span class=\"method-args\">(description=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Tries to get the description from a USAGE file one folder above the source root otherwise uses a default description.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"desc-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 30\ndef self.desc(description=nil)\n  return super if description\n\n  @desc ||= if usage_path\n    ERB.new(File.read(usage_path)).result(binding)\n  else\n    \"Description:\\n    Create #{base_name.humanize.downcase} files for #{generator_name} generator.\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-hide-21\"> <span class=\"method-name\">hide!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience method to hide this generator from the available ones when running rails generator command.</p> <div class=\"method-source-code\" id=\"hide-21-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 50\ndef self.hide!\n  Rails::Generators.hide_namespace self.namespace\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-hook_for\"> <span class=\"method-name\">hook_for</span><span class=\"method-args\">(*names, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Invoke a generator based on the value supplied by the user to the given option named “name”. A class option is created when this method is invoked and you can set a hash to customize it.</p> <h4 id=\"method-c-hook_for-label-Examples\">Examples</h4> <pre class=\"ruby\">module Rails::Generators\n  class ControllerGenerator &lt; Base\n    hook_for :test_framework, aliases: \"-t\"\n  end\nend\n</pre> <p>The example above will create a test framework option and will invoke a generator based on the user supplied value.</p> <p>For example, if the user invoke the controller generator as:</p> <pre class=\"ruby\">rails generate controller Account --test-framework=test_unit\n</pre> <p>The controller generator will then try to invoke the following generators:</p> <pre>\"rails:test_unit\", \"test_unit:controller\", \"test_unit\"</pre> <p>Notice that “rails:generators:test_unit” could be loaded as well, what Rails looks for is the first and last parts of the namespace. This is what allows any test framework to hook into Rails as long as it provides any of the hooks above.</p> <h4 id=\"method-c-hook_for-label-Options\">Options</h4> <p>The first and last part used to find the generator to be invoked are guessed based on class invokes <a href=\"base#method-c-hook_for\">::hook_for</a>, as noticed in the example above. This can be customized with two options: :in and :as.</p> <p>Let's suppose you are creating a generator that needs to invoke the controller generator from test unit. Your first attempt is:</p> <pre class=\"ruby\">class AwesomeGenerator &lt; Rails::Generators::Base\n  hook_for :test_framework\nend\n</pre> <p>The lookup in this case for test_unit as input is:</p> <pre>\"test_unit:awesome\", \"test_unit\"</pre> <p>Which is not the desired lookup. You can change it by providing the :as option:</p> <pre class=\"ruby\">class AwesomeGenerator &lt; Rails::Generators::Base\n  hook_for :test_framework, as: :controller\nend\n</pre> <p>And now it will lookup at:</p> <pre>\"test_unit:controller\", \"test_unit\"</pre> <p>Similarly, if you want it to also lookup in the rails namespace, you just need to provide the :in value:</p> <pre class=\"ruby\">class AwesomeGenerator &lt; Rails::Generators::Base\n  hook_for :test_framework, in: :rails, as: :controller\nend\n</pre> <p>And the lookup is exactly the same as previously:</p> <pre>\"rails:test_unit\", \"test_unit:controller\", \"test_unit\"</pre> <h4 id=\"method-c-hook_for-label-Switches\">Switches</h4> <p>All hooks come with switches for user interface. If you do not want to use any test framework, you can do:</p> <pre class=\"ruby\">rails generate controller Account --skip-test-framework\n</pre> <p>Or similarly:</p> <pre class=\"ruby\">rails generate controller Account --no-test-framework\n</pre> <h4 id=\"method-c-hook_for-label-Boolean+hooks\">Boolean hooks</h4> <p>In some cases, you may want to provide a boolean hook. For example, webrat developers might want to have webrat available on controller generator. This can be achieved as:</p> <pre class=\"ruby\">Rails::Generators::ControllerGenerator.hook_for :webrat, type: :boolean\n</pre> <p>Then, if you want webrat to be invoked, just supply:</p> <pre class=\"ruby\">rails generate controller Account --webrat\n</pre> <p>The hooks lookup is similar as above:</p> <pre>\"rails:generators:webrat\", \"webrat:generators:controller\", \"webrat\"</pre> <h4 id=\"method-c-hook_for-label-Custom+invocations\">Custom invocations</h4> <p>You can also supply a block to <a href=\"base#method-c-hook_for\">::hook_for</a> to customize how the hook is going to be invoked. The block receives two arguments, an instance of the current class and the class to be invoked.</p> <p>For example, in the resource generator, the controller should be invoked with a pluralized class name. But by default it is invoked with the same name as the resource generator, which is singular. To change this, we can give a block to customize how the controller can be invoked.</p> <pre class=\"ruby\">hook_for :resource_controller do |instance, controller|\n  instance.invoke controller, [ instance.name.pluralize ]\nend\n</pre> <div class=\"method-source-code\" id=\"hook_for-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 163\ndef self.hook_for(*names, &amp;block)\n  options = names.extract_options!\n  in_base = options.delete(:in) || base_name\n  as_hook = options.delete(:as) || generator_name\n\n  names.each do |name|\n    unless class_options.key?(name)\n      defaults = if options[:type] == :boolean\n        { }\n      elsif [true, false].include?(default_value_for_option(name, options))\n        { banner: \"\" }\n      else\n        { desc: \"#{name.to_s.humanize} to be invoked\", banner: \"NAME\" }\n      end\n\n      class_option(name, defaults.merge!(options))\n    end\n\n    hooks[name] = [ in_base, as_hook ]\n    invoke_from_option(name, options, &amp;block)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-namespace\"> <span class=\"method-name\">namespace</span><span class=\"method-args\">(name=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convenience method to get the namespace from the class name. It's the same as Thor default except that the Generator at the end of the class is removed.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"namespace-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 43\ndef self.namespace(name=nil)\n  return super if name\n  @namespace ||= super.sub(/_generator$/, '').sub(/:generators:/, ':')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-remove_hook_for\"> <span class=\"method-name\">remove_hook_for</span><span class=\"method-args\">(*names)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove a previously added hook.</p> <pre class=\"ruby\">remove_hook_for :orm\n</pre> <div class=\"method-source-code\" id=\"remove_hook_for-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 189\ndef self.remove_hook_for(*names)\n  remove_invocation(*names)\n\n  names.each do |name|\n    hooks.delete(name)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-source_root\"> <span class=\"method-name\">source_root</span><span class=\"method-args\">(path=nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the source root for this generator using <a href=\"base#method-c-default_source_root\">::default_source_root</a> as default.</p> <div class=\"method-source-code\" id=\"source_root-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 23\ndef self.source_root(path=nil)\n  @_source_root = path if path\n  @_source_root ||= default_source_root\nend</pre> </div> </div> </div> </section> <section id=\"protected-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-add_shebang_option-21\"> <span class=\"method-name\">add_shebang_option!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Small macro to add ruby as an option to the generator with proper default value plus an instance helper method called shebang.</p> <div class=\"method-source-code\" id=\"add_shebang_option-21-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 346\ndef self.add_shebang_option!\n  class_option :ruby, type: :string, aliases: \"-r\", default: Thor::Util.ruby_command,\n                      desc: \"Path to the Ruby binary of your choice\", banner: \"PATH\"\n\n  no_tasks {\n    define_method :shebang do\n      @shebang ||= begin\n        command = if options[:ruby] == Thor::Util.ruby_command\n          \"/usr/bin/env #{File.basename(Thor::Util.ruby_command)}\"\n        else\n          options[:ruby]\n        end\n        \"#!#{command}\"\n      end\n    end\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-banner\"> <span class=\"method-name\">banner</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Use Rails default banner.</p> <div class=\"method-source-code\" id=\"banner-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 275\ndef self.banner\n  \"rails generate #{namespace.sub(/^rails:/,'')} #{self.arguments.map{ |a| a.usage }.join(' ')} [options]\".gsub(/\\s+/, ' ')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-base_name\"> <span class=\"method-name\">base_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the <a href=\"base#method-c-base_name\">::base_name</a> taking into account the current class namespace.</p> <div class=\"method-source-code\" id=\"base_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 280\ndef self.base_name\n  @base_name ||= begin\n    if base = name.to_s.split('::').first\n      base.underscore\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-default_aliases_for_option\"> <span class=\"method-name\">default_aliases_for_option</span><span class=\"method-args\">(name, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return default aliases for the option name given doing a lookup in Rails::Generators.aliases.</p> <div class=\"method-source-code\" id=\"default_aliases_for_option-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 307\ndef self.default_aliases_for_option(name, options)\n  default_for_option(Rails::Generators.aliases, name, options, options[:aliases])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-default_for_option\"> <span class=\"method-name\">default_for_option</span><span class=\"method-args\">(config, name, options, default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return default for the option name given doing a lookup in config.</p> <div class=\"method-source-code\" id=\"default_for_option-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 312\ndef self.default_for_option(config, name, options, default)\n  if generator_name and c = config[generator_name.to_sym] and c.key?(name)\n    c[name]\n  elsif base_name and c = config[base_name.to_sym] and c.key?(name)\n    c[name]\n  elsif config[:rails].key?(name)\n    config[:rails][name]\n  else\n    default\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-default_generator_root\"> <span class=\"method-name\">default_generator_root</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"default_generator_root-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 372\ndef self.default_generator_root\n  path = File.expand_path(File.join(base_name, generator_name), base_root)\n  path if File.exist?(path)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-default_value_for_option\"> <span class=\"method-name\">default_value_for_option</span><span class=\"method-args\">(name, options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the default value for the option name given doing a lookup in Rails::Generators.options.</p> <div class=\"method-source-code\" id=\"default_value_for_option-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 301\ndef self.default_value_for_option(name, options)\n  default_for_option(Rails::Generators.options, name, options, options[:default])\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-generator_name\"> <span class=\"method-name\">generator_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the namespaces and get the generator name. For example, Rails::Generators::ModelGenerator will return “model” as generator name.</p> <div class=\"method-source-code\" id=\"generator_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 290\ndef self.generator_name\n  @generator_name ||= begin\n    if generator = name.to_s.split('::').last\n      generator.sub!(/Generator$/, '')\n      generator.underscore\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-usage_path\"> <span class=\"method-name\">usage_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"usage_path-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 364\ndef self.usage_path\n  paths = [\n    source_root &amp;&amp; File.expand_path(\"../USAGE\", source_root),\n    default_generator_root &amp;&amp; File.join(default_generator_root, \"USAGE\")\n  ]\n  paths.compact.detect { |path| File.exist? path }\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-extract_last_module\"> <span class=\"method-name\">extract_last_module</span><span class=\"method-args\">(nesting)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Takes in an array of nested modules and extracts the last module</p> <div class=\"method-source-code\" id=\"extract_last_module-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/base.rb, line 267\ndef extract_last_module(nesting)\n  nesting.inject(Object) do |last_module, nest|\n    break unless last_module.const_defined?(nest, false)\n    last_module.const_get(nest)\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators/migration":"<h1 id=\"module-Rails::Generators::Migration\" class=\"module\"> module Rails::Generators::Migration </h1> <section class=\"description\"> <p>Holds common methods for migrations. It assumes that migrations has the [0-9]*_name format and can be used by another frameworks (like Sequel) just by implementing the next migration version method.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-migration_class_name\"> <span class=\"method-name\">migration_class_name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-migration_file_name\"> <span class=\"method-name\">migration_file_name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-migration_number\"> <span class=\"method-name\">migration_number</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_migration\"> <span class=\"method-name\">create_migration</span><span class=\"method-args\">(destination, data, config = {}, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"create_migration-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/migration.rb, line 33\ndef create_migration(destination, data, config = {}, &amp;block)\n  action Rails::Generators::Actions::CreateMigration.new(self, destination, block || data.to_s, config)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-migration_template\"> <span class=\"method-name\">migration_template</span><span class=\"method-args\">(source, destination, config = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a migration template at the given destination. The difference to the default template method is that the migration version is appended to the destination file name.</p> <p>The migration version, migration file name, migration class name are available as instance variables in the template to be rendered.</p> <pre class=\"ruby\">migration_template \"migration.rb\", \"db/migrate/add_foo_to_bar.rb\"\n</pre> <div class=\"method-source-code\" id=\"migration_template-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/migration.rb, line 54\ndef migration_template(source, destination, config = {})\n  source  = File.expand_path(find_in_source_paths(source.to_s))\n\n  set_migration_assigns!(destination)\n  context = instance_eval('binding')\n\n  dir, base = File.split(destination)\n  numbered_destination = File.join(dir, [\"%migration_number%\", base].join('_'))\n\n  create_migration numbered_destination, nil, config do\n    ERB.new(::File.binread(source), nil, '-', '@output_buffer').result(context)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_migration_assigns-21\"> <span class=\"method-name\">set_migration_assigns!</span><span class=\"method-args\">(destination)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"set_migration_assigns-21-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/migration.rb, line 37\ndef set_migration_assigns!(destination)\n  destination = File.expand_path(destination, self.destination_root)\n\n  migration_dir = File.dirname(destination)\n  @migration_number     = self.class.next_migration_number(migration_dir)\n  @migration_file_name  = File.basename(destination, '.rb')\n  @migration_class_name = @migration_file_name.camelize\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators/namedbase":"<h1 id=\"class-Rails::Generators::NamedBase\" class=\"class\"> class Rails::Generators::NamedBase </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"base\">Rails::Generators::Base</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-file_name\"> <span class=\"method-name\">file_name</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"protected-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-check_class_collision\"> <span class=\"method-name\">check_class_collision</span><span class=\"method-args\">(options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add a class collisions name to be checked on class initialization. You can supply a hash with a :prefix or :suffix to be tested.</p> <h4 id=\"method-c-check_class_collision-label-Examples\">Examples</h4> <pre class=\"ruby\">check_class_collision suffix: \"Decorator\"\n</pre> <p>If the generator is invoked with class name Admin, it will check for the presence of “AdminDecorator”.</p> <div class=\"method-source-code\" id=\"check_class_collision-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 192\ndef self.check_class_collision(options={})\n  define_method :check_class_collision do\n    name = if self.respond_to?(:controller_class_name) # for ScaffoldBase\n      controller_class_name\n    else\n      class_name\n    end\n\n    class_collisions \"#{options[:prefix]}#{name}#{options[:suffix]}\"\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-template\"> <span class=\"method-name\">template</span><span class=\"method-args\">(source, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"template-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 24\ndef template(source, *args, &amp;block)\n  inside_template do\n    super\n  end\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-application_name\"> <span class=\"method-name\">application_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Tries to retrieve the application name or simple return application.</p> <div class=\"method-source-code\" id=\"application_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 149\ndef application_name\n  if defined?(Rails) &amp;&amp; Rails.application\n    Rails.application.class.name.split('::').first.underscore\n  else\n    \"application\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attributes_names\"> <span class=\"method-name\">attributes_names</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"attributes_names-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 170\ndef attributes_names\n  @attributes_names ||= attributes.each_with_object([]) do |a, names|\n    names &lt;&lt; a.column_name\n    names &lt;&lt; 'password_confirmation' if a.password_digest?\n    names &lt;&lt; \"#{a.name}_type\" if a.polymorphic?\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-class_name\"> <span class=\"method-name\">class_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"class_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 101\ndef class_name\n  (class_path + [file_name]).map!{ |m| m.camelize }.join('::')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-class_path\"> <span class=\"method-name\">class_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"class_path-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 81\ndef class_path\n  inside_template? || !namespaced? ? regular_class_path : namespaced_class_path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-file_path\"> <span class=\"method-name\">file_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"file_path-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 77\ndef file_path\n  @file_path ||= (class_path + [file_name]).join('/')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-human_name\"> <span class=\"method-name\">human_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"human_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 105\ndef human_name\n  @human_name ||= singular_name.humanize\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-i18n_scope\"> <span class=\"method-name\">i18n_scope</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"i18n_scope-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 113\ndef i18n_scope\n  @i18n_scope ||= file_path.tr('/', '.')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-indent\"> <span class=\"method-name\">indent</span><span class=\"method-args\">(content, multiplier = 2)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"indent-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 48\ndef indent(content, multiplier = 2)\n  spaces = \" \" * multiplier\n  content.each_line.map {|line| line.blank? ? line : \"#{spaces}#{line}\" }.join\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index_helper\"> <span class=\"method-name\">index_helper</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"index_helper-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 128\ndef index_helper\n  uncountable? ? \"#{plural_table_name}_index\" : plural_table_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inside_template\"> <span class=\"method-name\">inside_template</span><span class=\"method-args\">() { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inside_template-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 58\ndef inside_template\n  @inside_template = true\n  yield\nensure\n  @inside_template = false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inside_template-3F\"> <span class=\"method-name\">inside_template?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inside_template-3F-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 65\ndef inside_template?\n  @inside_template\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-module_namespacing\"> <span class=\"method-name\">module_namespacing</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wrap block with namespace of current application if namespace exists and is not skipped</p> <div class=\"method-source-code\" id=\"module_namespacing-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 42\ndef module_namespacing(&amp;block)\n  content = capture(&amp;block)\n  content = wrap_with_namespace(content) if namespaced?\n  concat(content)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespace\"> <span class=\"method-name\">namespace</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"namespace-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 69\ndef namespace\n  Rails::Generators.namespace\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespaced-3F\"> <span class=\"method-name\">namespaced?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"namespaced-3F-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 73\ndef namespaced?\n  !options[:skip_namespace] &amp;&amp; namespace\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespaced_class_path\"> <span class=\"method-name\">namespaced_class_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"namespaced_class_path-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 93\ndef namespaced_class_path\n  @namespaced_class_path ||= [namespaced_path] + @class_path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespaced_file_path\"> <span class=\"method-name\">namespaced_file_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"namespaced_file_path-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 89\ndef namespaced_file_path\n  @namespaced_file_path ||= namespaced_class_path.join(\"/\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespaced_path\"> <span class=\"method-name\">namespaced_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"namespaced_path-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 97\ndef namespaced_path\n  @namespaced_path ||= namespace.name.split(\"::\").first.underscore\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-plural_file_name\"> <span class=\"method-name\">plural_file_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"plural_file_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 140\ndef plural_file_name\n  @plural_file_name ||= file_name.pluralize\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-plural_name\"> <span class=\"method-name\">plural_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"plural_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 109\ndef plural_name\n  @plural_name ||= singular_name.pluralize\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-plural_table_name\"> <span class=\"method-name\">plural_table_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"plural_table_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 136\ndef plural_table_name\n  @plural_table_name ||= (pluralize_table_names? ? table_name : table_name.pluralize)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pluralize_table_names-3F\"> <span class=\"method-name\">pluralize_table_names?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"pluralize_table_names-3F-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 178\ndef pluralize_table_names?\n  !defined?(ActiveRecord::Base) || ActiveRecord::Base.pluralize_table_names\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-regular_class_path\"> <span class=\"method-name\">regular_class_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"regular_class_path-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 85\ndef regular_class_path\n  @class_path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-route_url\"> <span class=\"method-name\">route_url</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"route_url-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 144\ndef route_url\n  @route_url ||= class_path.collect {|dname| \"/\" + dname }.join + \"/\" + plural_file_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-singular_name\"> <span class=\"method-name\">singular_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>FIXME: We are avoiding to use alias because a bug on thor that make this method public and add it to the task list.</p> <div class=\"method-source-code\" id=\"singular_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 36\ndef singular_name\n  file_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-singular_table_name\"> <span class=\"method-name\">singular_table_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"singular_table_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 132\ndef singular_table_name\n  @singular_table_name ||= (pluralize_table_names? ? table_name.singularize : table_name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-table_name\"> <span class=\"method-name\">table_name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"table_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 117\ndef table_name\n  @table_name ||= begin\n    base = pluralize_table_names? ? plural_name : singular_name\n    (class_path + [base]).join('_')\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-uncountable-3F\"> <span class=\"method-name\">uncountable?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"uncountable-3F-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 124\ndef uncountable?\n  singular_name == plural_name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wrap_with_namespace\"> <span class=\"method-name\">wrap_with_namespace</span><span class=\"method-args\">(content)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"wrap_with_namespace-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/named_base.rb, line 53\ndef wrap_with_namespace(content)\n  content = indent(content).chomp\n  \"module #{namespace.name}\\n#{content}\\nend\\n\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators/testcase":"<h1 id=\"class-Rails::Generators::TestCase\" class=\"class\"> class Rails::Generators::TestCase </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../activesupport/testcase\">ActiveSupport::TestCase</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"testing/behaviour\">Rails::Generators::Testing::Behaviour</a>, <a class=\"include\" href=\"testing/setupandteardown\">Rails::Generators::Testing::SetupAndTeardown</a>, <a class=\"include\" href=\"testing/assertions\">Rails::Generators::Testing::Assertions</a>\n</dd>\n</dl> <section class=\"description\"> <p>This class provides a <a href=\"testcase\">TestCase</a> for testing generators. To setup, you need just to configure the destination and set which generator is being tested:</p> <pre class=\"ruby\">class AppGeneratorTest &lt; Rails::Generators::TestCase\n  tests AppGenerator\n  destination File.expand_path(\"../tmp\", File.dirname(__FILE__))\nend\n</pre> <p>If you want to ensure your destination root is clean before running each test, you can set a setup callback:</p> <pre class=\"ruby\">class AppGeneratorTest &lt; Rails::Generators::TestCase\n  tests AppGenerator\n  destination File.expand_path(\"../tmp\", File.dirname(__FILE__))\n  setup :prepare_destination\nend\n</pre> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators/testing/assertions":"<h1 id=\"module-Rails::Generators::Testing::Assertions\" class=\"module\"> module Rails::Generators::Testing::Assertions </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_class_method\"> <span class=\"method-name\">assert_class_method</span><span class=\"method-args\">(method, content, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts the given class method exists in the given content. This method does not detect class methods inside (class &lt;&lt; self), only class methods which starts with “self.”. When a block is given, it yields the content of the method.</p> <pre class=\"ruby\">assert_migration \"db/migrate/create_products.rb\" do |migration|\n  assert_class_method :up, migration do |up|\n    assert_match(/create_table/, up)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_class_method-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/assertions.rb, line 88\ndef assert_class_method(method, content, &amp;block)\n  assert_instance_method \"self.#{method}\", content, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-assert_directory\"> <span class=\"method-name\">assert_directory</span><span class=\"method-args\">(relative, *contents)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"assertions#method-i-assert_file\">assert_file</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_field_default_value\"> <span class=\"method-name\">assert_field_default_value</span><span class=\"method-args\">(attribute_type, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts the given attribute type gets a proper default value:</p> <pre class=\"ruby\">assert_field_default_value :string, \"MyString\"\n</pre> <div class=\"method-source-code\" id=\"assert_field_default_value-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/assertions.rb, line 117\ndef assert_field_default_value(attribute_type, value)\n  assert_equal(value, create_generated_attribute(attribute_type).default)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_field_type\"> <span class=\"method-name\">assert_field_type</span><span class=\"method-args\">(attribute_type, field_type)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts the given attribute type gets translated to a field type properly:</p> <pre class=\"ruby\">assert_field_type :date, :date_select\n</pre> <div class=\"method-source-code\" id=\"assert_field_type-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/assertions.rb, line 110\ndef assert_field_type(attribute_type, field_type)\n  assert_equal(field_type, create_generated_attribute(attribute_type).field_type)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_file\"> <span class=\"method-name\">assert_file</span><span class=\"method-args\">(relative, *contents) { |read| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts a given file exists. You need to supply an absolute path or a path relative to the configured destination:</p> <pre class=\"ruby\">assert_file \"config/environment.rb\"\n</pre> <p>You can also give extra arguments. If the argument is a regexp, it will check if the regular expression matches the given file content. If it's a string, it compares the file with the given string:</p> <pre class=\"ruby\">assert_file \"config/environment.rb\", /initialize/\n</pre> <p>Finally, when a block is given, it yields the file content:</p> <pre class=\"ruby\">assert_file \"app/controllers/products_controller.rb\" do |controller|\n  assert_instance_method :index, controller do |index|\n    assert_match(/Product\\.all/, index)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_file-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/assertions.rb, line 25\ndef assert_file(relative, *contents)\n  absolute = File.expand_path(relative, destination_root)\n  assert File.exist?(absolute), \"Expected file #{relative.inspect} to exist, but does not\"\n\n  read = File.read(absolute) if block_given? || !contents.empty?\n  yield read if block_given?\n\n  contents.each do |content|\n    case content\n      when String\n        assert_equal content, read\n      when Regexp\n        assert_match content, read\n    end\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"assertions#method-i-assert_directory\">assert_directory</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_instance_method\"> <span class=\"method-name\">assert_instance_method</span><span class=\"method-args\">(method, content) { |$strip| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts the given method exists in the given content. When a block is given, it yields the content of the method.</p> <pre class=\"ruby\">assert_file \"app/controllers/products_controller.rb\" do |controller|\n  assert_instance_method :index, controller do |index|\n    assert_match(/Product\\.all/, index)\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"assert_instance_method-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/assertions.rb, line 100\ndef assert_instance_method(method, content)\n  assert content =~ /(\\s+)def #{method}(\\(.+\\))?(.*?)\\n\\1end/m, \"Expected to have method #{method}\"\n  yield $3.strip if block_given?\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"assertions#method-i-assert_method\">assert_method</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-assert_method\"> <span class=\"method-name\">assert_method</span><span class=\"method-args\">(method, content)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"assertions#method-i-assert_instance_method\">assert_instance_method</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_migration\"> <span class=\"method-name\">assert_migration</span><span class=\"method-args\">(relative, *contents, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts a given migration exists. You need to supply an absolute path or a path relative to the configured destination:</p> <pre class=\"ruby\">assert_migration \"db/migrate/create_products.rb\"\n</pre> <p>This method manipulates the given path and tries to find any migration which matches the migration name. For example, the call above is converted to:</p> <pre class=\"ruby\">assert_file \"db/migrate/003_create_products.rb\"\n</pre> <p>Consequently, <a href=\"assertions#method-i-assert_migration\">#assert_migration</a> accepts the same arguments has assert_file.</p> <div class=\"method-source-code\" id=\"assert_migration-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/assertions.rb, line 64\ndef assert_migration(relative, *contents, &amp;block)\n  file_name = migration_file_name(relative)\n  assert file_name, \"Expected migration #{relative} to exist, but was not found\"\n  assert_file file_name, *contents, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-assert_no_directory\"> <span class=\"method-name\">assert_no_directory</span><span class=\"method-args\">(relative)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"assertions#method-i-assert_no_file\">assert_no_file</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_no_file\"> <span class=\"method-name\">assert_no_file</span><span class=\"method-args\">(relative)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts a given file does not exist. You need to supply an absolute path or a path relative to the configured destination:</p> <pre class=\"ruby\">assert_no_file \"config/random.rb\"\n</pre> <div class=\"method-source-code\" id=\"assert_no_file-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/assertions.rb, line 47\ndef assert_no_file(relative)\n  absolute = File.expand_path(relative, destination_root)\n  assert !File.exist?(absolute), \"Expected file #{relative.inspect} to not exist, but does\"\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"assertions#method-i-assert_no_directory\">assert_no_directory</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-assert_no_migration\"> <span class=\"method-name\">assert_no_migration</span><span class=\"method-args\">(relative)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Asserts a given migration does not exist. You need to supply an absolute path or a path relative to the configured destination:</p> <pre class=\"ruby\">assert_no_migration \"db/migrate/create_products.rb\"\n</pre> <div class=\"method-source-code\" id=\"assert_no_migration-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/assertions.rb, line 74\ndef assert_no_migration(relative)\n  file_name = migration_file_name(relative)\n  assert_nil file_name, \"Expected migration #{relative} to not exist, but found #{file_name}\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators/testing/behaviour":"<h1 id=\"module-Rails::Generators::Testing::Behaviour\" class=\"module\"> module Rails::Generators::Testing::Behaviour </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_generated_attribute\"> <span class=\"method-name\">create_generated_attribute</span><span class=\"method-args\">(attribute_type, name = 'test', index = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a Rails::Generators::GeneratedAttribute by supplying the attribute type and, optionally, the attribute name:</p> <pre class=\"ruby\">create_generated_attribute(:string, 'name')\n</pre> <div class=\"method-source-code\" id=\"create_generated_attribute-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/behaviour.rb, line 79\ndef create_generated_attribute(attribute_type, name = 'test', index = nil)\n  Rails::Generators::GeneratedAttribute.parse([name, attribute_type, index].compact.join(':'))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-generator\"> <span class=\"method-name\">generator</span><span class=\"method-args\">(args=self.default_arguments, options={}, config={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Instantiate the generator.</p> <div class=\"method-source-code\" id=\"generator-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/behaviour.rb, line 71\ndef generator(args=self.default_arguments, options={}, config={})\n  @generator ||= self.generator_class.new(args, options, config.reverse_merge(destination_root: destination_root))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-run_generator\"> <span class=\"method-name\">run_generator</span><span class=\"method-args\">(args=self.default_arguments, config={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Runs the generator configured for this class. The first argument is an array like command line arguments:</p> <pre class=\"ruby\">class AppGeneratorTest &lt; Rails::Generators::TestCase\n  tests AppGenerator\n  destination File.expand_path(\"../tmp\", File.dirname(__FILE__))\n  setup :prepare_destination\n\n  test \"database.yml is not created when skipping Active Record\" do\n    run_generator %w(myapp --skip-active-record)\n    assert_no_file \"config/database.yml\"\n  end\nend\n</pre> <p>You can provide a configuration hash as second argument. This method returns the output printed by the generator.</p> <div class=\"method-source-code\" id=\"run_generator-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/behaviour.rb, line 63\ndef run_generator(args=self.default_arguments, config={})\n  capture(:stdout) do\n    args += ['--skip-bundle'] unless args.include? '--dev'\n    self.generator_class.start(args, config.reverse_merge(destination_root: destination_root))\n  end\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-capture\"> <span class=\"method-name\">capture</span><span class=\"method-args\">(stream) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"capture-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/behaviour.rb, line 104\ndef capture(stream)\n  stream = stream.to_s\n  captured_stream = Tempfile.new(stream)\n  stream_io = eval(\"$#{stream}\")\n  origin_stream = stream_io.dup\n  stream_io.reopen(captured_stream)\n\n  yield\n\n  stream_io.rewind\n  return captured_stream.read\nensure\n  captured_stream.close\n  captured_stream.unlink\n  stream_io.reopen(origin_stream)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/generators/testing/behaviour/classmethods":"<h1 id=\"module-Rails::Generators::Testing::Behaviour::ClassMethods\" class=\"module\"> module Rails::Generators::Testing::Behaviour::ClassMethods </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-arguments\"> <span class=\"method-name\">arguments</span><span class=\"method-args\">(array)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets default arguments on generator invocation. This can be overwritten when invoking it.</p> <pre class=\"ruby\">arguments %w(app_name --skip-active-record)\n</pre> <div class=\"method-source-code\" id=\"arguments-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/behaviour.rb, line 35\ndef arguments(array)\n  self.default_arguments = array\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-destination\"> <span class=\"method-name\">destination</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets the destination of generator files:</p> <pre class=\"ruby\">destination File.expand_path(\"../tmp\", File.dirname(__FILE__))\n</pre> <div class=\"method-source-code\" id=\"destination-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/behaviour.rb, line 42\ndef destination(path)\n  self.destination_root = path\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tests\"> <span class=\"method-name\">tests</span><span class=\"method-args\">(klass)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets which generator should be tested:</p> <pre class=\"ruby\">tests AppGenerator\n</pre> <div class=\"method-source-code\" id=\"tests-source\"> <pre class=\"ruby\"># File railties/lib/rails/generators/testing/behaviour.rb, line 27\ndef tests(klass)\n  self.generator_class = klass\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/info":"<h1 id=\"module-Rails::Info\" class=\"module\"> module Rails::Info </h1> <section class=\"description\"> <p>This module helps build the runtime properties used to display in the Rails::InfoController responses. Including the active Rails version, Ruby version, <a href=\"rack\">Rack</a> version, and so on.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-c-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"info#method-c-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-property\"> <span class=\"method-name\">property</span><span class=\"method-args\">(name, value = nil) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"property-source\"> <pre class=\"ruby\"># File railties/lib/rails/info.rb, line 22\ndef property(name, value = nil)\n  value ||= yield\n  properties &lt;&lt; [name, value] if value\nrescue Exception\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-to_html\"> <span class=\"method-name\">to_html</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_html-source\"> <pre class=\"ruby\"># File railties/lib/rails/info.rb, line 40\ndef to_html\n  '&lt;table&gt;'.tap do |table|\n    properties.each do |(name, value)|\n      table &lt;&lt; %Q(&lt;tr&gt;&lt;td class=\"name\"&gt;#{CGI.escapeHTML(name.to_s)}&lt;/td&gt;)\n      formatted_value = if value.kind_of?(Array)\n            \"&lt;ul&gt;\" + value.map { |v| \"&lt;li&gt;#{CGI.escapeHTML(v.to_s)}&lt;/li&gt;\" }.join + \"&lt;/ul&gt;\"\n          else\n            CGI.escapeHTML(value.to_s)\n          end\n      table &lt;&lt; %Q(&lt;td class=\"value\"&gt;#{formatted_value}&lt;/td&gt;&lt;/tr&gt;)\n    end\n    table &lt;&lt; '&lt;/table&gt;'\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File railties/lib/rails/info.rb, line 28\ndef to_s\n  column_width = properties.names.map {|name| name.length}.max\n  info = properties.map do |name, value|\n    value = value.join(\", \") if value.is_a?(Array)\n    \"%-#{column_width}s   %s\" % [name, value]\n  end\n  info.unshift \"About your application's environment\"\n  info * \"\\n\"\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"info#method-c-inspect\">inspect</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/paths/path":"<h1 id=\"class-Rails::Paths::Path\" class=\"class\"> class Rails::Paths::Path </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"../../enumerable\">Enumerable</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-glob\"> <span class=\"method-name\">glob</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(root, current, paths, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 114\ndef initialize(root, current, paths, options = {})\n  @paths    = paths\n  @current  = current\n  @root     = root\n  @glob     = options[:glob]\n\n  options[:autoload_once] ? autoload_once! : skip_autoload_once!\n  options[:eager_load]    ? eager_load!    : skip_eager_load!\n  options[:autoload]      ? autoload!      : skip_autoload!\n  options[:load_path]     ? load_path!     : skip_load_path!\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3C\"> <span class=\"method-name\">&lt;&lt;</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"3C-3C-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 161\ndef &lt;&lt;(path)\n  @paths &lt;&lt; path\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"path#method-i-push\">push</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-children\"> <span class=\"method-name\">children</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"children-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 126\ndef children\n  keys = @root.keys.find_all { |k|\n    k.start_with?(@current) &amp;&amp; k != @current\n  }\n  @root.values_at(*keys.sort)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-concat\"> <span class=\"method-name\">concat</span><span class=\"method-args\">(paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"concat-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 166\ndef concat(paths)\n  @paths.concat paths\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 157\ndef each(&amp;block)\n  @paths.each(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-existent\"> <span class=\"method-name\">existent</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all expanded paths but only if they exist in the filesystem.</p> <div class=\"method-source-code\" id=\"existent-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 200\ndef existent\n  expanded.select { |f| File.exist?(f) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-existent_directories\"> <span class=\"method-name\">existent_directories</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"existent_directories-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 204\ndef existent_directories\n  expanded.select { |d| File.directory?(d) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-expanded\"> <span class=\"method-name\">expanded</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Expands all paths against the root and return all unique values.</p> <div class=\"method-source-code\" id=\"expanded-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 179\ndef expanded\n  raise \"You need to set a path root\" unless @root.path\n  result = []\n\n  each do |p|\n    path = File.expand_path(p, @root.path)\n\n    if @glob &amp;&amp; File.directory?(path)\n      Dir.chdir(path) do\n        result.concat(Dir.glob(@glob).map { |file| File.join path, file }.sort)\n      end\n    else\n      result &lt;&lt; path\n    end\n  end\n\n  result.uniq!\n  result\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"path#method-i-to_a\">to_a</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-first\"> <span class=\"method-name\">first</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"first-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 133\ndef first\n  expanded.first\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last\"> <span class=\"method-name\">last</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"last-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 137\ndef last\n  expanded.last\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-push\"> <span class=\"method-name\">push</span><span class=\"method-args\">(path)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"path#method-i-3C-3C\">&lt;&lt;</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_a\"> <span class=\"method-name\">to_a</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"path#method-i-expanded\">expanded</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_ary\"> <span class=\"method-name\">to_ary</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"to_ary-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 174\ndef to_ary\n  @paths\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unshift\"> <span class=\"method-name\">unshift</span><span class=\"method-args\">(*paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"unshift-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 170\ndef unshift(*paths)\n  @paths.unshift(*paths)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/paths/root":"<h1 id=\"class-Rails::Paths::Root\" class=\"class\"> class Rails::Paths::Root </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl> <section class=\"description\"> <p>This object is an extended hash that behaves as root of the <code>Rails::Paths</code> system. It allows you to collect information about how you want to structure your application paths by a <a href=\"../../hash\">Hash</a> like <a href=\"../api\">API</a>. It requires you to give a physical path on initialization.</p> <pre class=\"ruby\">root = Root.new \"/rails\"\nroot.add \"app/controllers\", eager_load: true\n</pre> <p>The command above creates a new root object and add “app/controllers” as a path. This means we can get a <code>Rails::Paths::Path</code> object back like below:</p> <pre class=\"ruby\">path = root[\"app/controllers\"]\npath.eager_load?               # =&gt; true\npath.is_a?(Rails::Paths::Path) # =&gt; true\n</pre> <p>The <code>Path</code> object is simply an enumerable and allows you to easily add extra paths:</p> <pre class=\"ruby\">path.is_a?(Enumerable) # =&gt; true\npath.to_ary.inspect    # =&gt; [\"app/controllers\"]\n\npath &lt;&lt; \"lib/controllers\"\npath.to_ary.inspect    # =&gt; [\"app/controllers\", \"lib/controllers\"]\n</pre> <p>Notice that when you add a path using <code>add</code>, the path object created already contains the path with the same path value given to <code>add</code>. In some situations, you may not want this behavior, so you can give <code>:with</code> as option.</p> <pre class=\"ruby\">root.add \"config/routes\", with: \"config/routes.rb\"\nroot[\"config/routes\"].inspect # =&gt; [\"config/routes.rb\"]\n</pre> <p>The <code>add</code> method accepts the following options as arguments: <a href=\"root#method-i-eager_load\">#eager_load</a>, autoload, <a href=\"root#method-i-autoload_once\">#autoload_once</a> and glob.</p> <p>Finally, the <code>Path</code> object also provides a few helpers:</p> <pre class=\"ruby\">root = Root.new \"/rails\"\nroot.add \"app/controllers\"\n\nroot[\"app/controllers\"].expanded # =&gt; [\"/rails/app/controllers\"]\nroot[\"app/controllers\"].existent # =&gt; [\"/rails/app/controllers\"]\n</pre> <p>Check the <code>Rails::Paths::Path</code> documentation for more information.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-path\"> <span class=\"method-name\">path</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 47\ndef initialize(path)\n  @current = nil\n  @path = path\n  @root = {}\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(path)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 63\ndef [](path)\n  @root[path]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(path, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 53\ndef []=(path, value)\n  glob = self[path] ? self[path].glob : nil\n  add(path, with: value, glob: glob)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add\"> <span class=\"method-name\">add</span><span class=\"method-args\">(path, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"add-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 58\ndef add(path, options = {})\n  with = Array(options.fetch(:with, path))\n  @root[path] = Path.new(self, path, with, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-all_paths\"> <span class=\"method-name\">all_paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"all_paths-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 79\ndef all_paths\n  values.tap { |v| v.uniq! }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-autoload_once\"> <span class=\"method-name\">autoload_once</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"autoload_once-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 83\ndef autoload_once\n  filter_by { |p| p.autoload_once? }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-autoload_paths\"> <span class=\"method-name\">autoload_paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"autoload_paths-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 91\ndef autoload_paths\n  filter_by { |p| p.autoload? }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eager_load\"> <span class=\"method-name\">eager_load</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"eager_load-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 87\ndef eager_load\n  filter_by { |p| p.eager_load? }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-keys\"> <span class=\"method-name\">keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"keys-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 71\ndef keys\n  @root.keys\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-load_paths\"> <span class=\"method-name\">load_paths</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"load_paths-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 95\ndef load_paths\n  filter_by { |p| p.load_path? }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-values\"> <span class=\"method-name\">values</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"values-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 67\ndef values\n  @root.values\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-values_at\"> <span class=\"method-name\">values_at</span><span class=\"method-args\">(*list)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"values_at-source\"> <pre class=\"ruby\"># File railties/lib/rails/paths.rb, line 75\ndef values_at(*list)\n  @root.values_at(*list)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/rack/logger":"<h1 id=\"class-Rails::Rack::Logger\" class=\"class\"> class Rails::Rack::Logger </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../activesupport/logsubscriber\">ActiveSupport::LogSubscriber</a></dd>\n</dl> <section class=\"description\"> <p>Sets log tags, logs the request, calls the app, and flushes the logs.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(app, taggers = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/rack/logger.rb, line 11\ndef initialize(app, taggers = nil)\n  @app          = app\n  @taggers      = taggers || []\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call\"> <span class=\"method-name\">call</span><span class=\"method-args\">(env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call-source\"> <pre class=\"ruby\"># File railties/lib/rails/rack/logger.rb, line 16\ndef call(env)\n  request = ActionDispatch::Request.new(env)\n\n  if logger.respond_to?(:tagged)\n    logger.tagged(compute_tags(request)) { call_app(request, env) }\n  else\n    call_app(request, env)\n  end\nend</pre> </div> </div> </div> </section> <section id=\"protected-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-call_app\"> <span class=\"method-name\">call_app</span><span class=\"method-args\">(request, env)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"call_app-source\"> <pre class=\"ruby\"># File railties/lib/rails/rack/logger.rb, line 28\ndef call_app(request, env)\n  # Put some space between requests in development logs.\n  if development?\n    logger.debug ''\n    logger.debug ''\n  end\n\n  instrumenter = ActiveSupport::Notifications.instrumenter\n  instrumenter.start 'request.action_dispatch', request: request\n  logger.info { started_request_message(request) }\n  resp = @app.call(env)\n  resp[2] = ::Rack::BodyProxy.new(resp[2]) { finish(request) }\n  resp\nrescue Exception\n  finish(request)\n  raise\nensure\n  ActiveSupport::LogSubscriber.flush_all!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compute_tags\"> <span class=\"method-name\">compute_tags</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"compute_tags-source\"> <pre class=\"ruby\"># File railties/lib/rails/rack/logger.rb, line 57\ndef compute_tags(request)\n  @taggers.collect do |tag|\n    case tag\n    when Proc\n      tag.call(request)\n    when Symbol\n      request.send(tag)\n    else\n      tag\n    end\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-started_request_message\"> <span class=\"method-name\">started_request_message</span><span class=\"method-args\">(request)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Started GET “/session/new” for 127.0.0.1 at 2012-09-26 14:51:42 -0700</p> <div class=\"method-source-code\" id=\"started_request_message-source\"> <pre class=\"ruby\"># File railties/lib/rails/rack/logger.rb, line 49\ndef started_request_message(request)\n  'Started %s \"%s\" for %s at %s' % [\n    request.request_method,\n    request.filtered_path,\n    request.ip,\n    Time.now.to_default_s ]\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/railtie":"<h1 id=\"class-Rails::Railtie\" class=\"class\"> class Rails::Railtie </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"initializable\">Rails::Initializable</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"railtie\">Railtie</a> is the core of the Rails framework and provides several hooks to extend Rails and/or modify the initialization process.</p> <p>Every major component of Rails (Action Mailer, Action Controller, Action View and Active Record) is a <a href=\"railtie\">Railtie</a>. Each of them is responsible for their own initialization. This makes Rails itself absent of any component hooks, allowing other components to be used in place of any of the Rails defaults.</p> <p>Developing a Rails extension does <em>not</em> require any implementation of <a href=\"railtie\">Railtie</a>, but if you need to interact with the Rails framework during or after boot, then <a href=\"railtie\">Railtie</a> is needed.</p> <p>For example, an extension doing any of the following would require Railtie:</p> <ul>\n<li> <p>creating initializers</p> </li>\n<li> <p>configuring a Rails framework for the application, like setting a generator</p> </li>\n<li> <p>adding <code>config.*</code> keys to the environment</p> </li>\n<li> <p>setting up a subscriber with <a href=\"../activesupport/notifications\">ActiveSupport::Notifications</a></p> </li>\n<li> <p>adding rake tasks</p> </li>\n</ul> <h2 id=\"class-Rails::Railtie-label-Creating+your+Railtie\">Creating your <a href=\"railtie\">Railtie</a>\n</h2> <p>To extend Rails using <a href=\"railtie\">Railtie</a>, create a <a href=\"railtie\">Railtie</a> class which inherits from <a href=\"railtie\">Rails::Railtie</a> within your extension's namespace. This class must be loaded during the Rails boot process.</p> <p>The following example demonstrates an extension which can be used with or without Rails.</p> <pre class=\"ruby\"># lib/my_gem/railtie.rb\nmodule MyGem\n  class Railtie &lt; Rails::Railtie\n  end\nend\n\n# lib/my_gem.rb\nrequire 'my_gem/railtie' if defined?(Rails)\n</pre> <h2 id=\"class-Rails::Railtie-label-Initializers\">Initializers</h2> <p>To add an initialization step from your <a href=\"railtie\">Railtie</a> to Rails boot process, you just need to create an initializer block:</p> <pre class=\"ruby\">class MyRailtie &lt; Rails::Railtie\n  initializer \"my_railtie.configure_rails_initialization\" do\n    # some initialization behavior\n  end\nend\n</pre> <p>If specified, the block can also receive the application object, in case you need to access some application specific configuration, like middleware:</p> <pre class=\"ruby\">class MyRailtie &lt; Rails::Railtie\n  initializer \"my_railtie.configure_rails_initialization\" do |app|\n    app.middleware.use MyRailtie::Middleware\n  end\nend\n</pre> <p>Finally, you can also pass <code>:before</code> and <code>:after</code> as option to initializer, in case you want to couple it with a specific step in the initialization process.</p> <h2 id=\"class-Rails::Railtie-label-Configuration\"><a href=\"railtie/configuration\">Configuration</a></h2> <p>Inside the <a href=\"railtie\">Railtie</a> class, you can access a config object which contains configuration shared by all railties and the application:</p> <pre class=\"ruby\">class MyRailtie &lt; Rails::Railtie\n  # Customize the ORM\n  config.app_generators.orm :my_railtie_orm\n\n  # Add a to_prepare block which is executed once in production\n  # and before each request in development\n  config.to_prepare do\n    MyRailtie.setup!\n  end\nend\n</pre> <h2 id=\"class-Rails::Railtie-label-Loading+rake+tasks+and+generators\">Loading rake tasks and generators</h2> <p>If your railtie has rake tasks, you can tell Rails to load them through the method <a href=\"railtie#method-c-rake_tasks\">::rake_tasks</a>:</p> <pre class=\"ruby\">class MyRailtie &lt; Rails::Railtie\n  rake_tasks do\n    load \"path/to/my_railtie.tasks\"\n  end\nend\n</pre> <p>By default, Rails loads generators from your load path. However, if you want to place your generators at a different location, you can specify in your <a href=\"railtie\">Railtie</a> a block which will load them during normal generators lookup:</p> <pre class=\"ruby\">class MyRailtie &lt; Rails::Railtie\n  generators do\n    require \"path/to/my_railtie_generator\"\n  end\nend\n</pre> <h2 id=\"class-Rails::Railtie-label-Application+and+Engine\">\n<a href=\"application\">Application</a> and <a href=\"engine\">Engine</a>\n</h2> <p>A <a href=\"engine\">Rails::Engine</a> is nothing more than a <a href=\"railtie\">Railtie</a> with some initializers already set. And since <a href=\"application\">Rails::Application</a> is an engine, the same configuration described here can be used in both.</p> <p>Be sure to look at the documentation of those specific classes for more information.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ABSTRACT_RAILTIES\">ABSTRACT_RAILTIES </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-abstract_railtie-3F\"> <span class=\"method-name\">abstract_railtie?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"abstract_railtie-3F-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 159\ndef abstract_railtie?\n  ABSTRACT_RAILTIES.include?(name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-configure\"> <span class=\"method-name\">configure</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows you to configure the railtie. This is the same method seen in <a href=\"railtie/configurable\">Railtie::Configurable</a>, but this module is no longer required for all subclasses of <a href=\"railtie\">Railtie</a> so we provide the class method here.</p> <div class=\"method-source-code\" id=\"configure-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 181\ndef configure(&amp;block)\n  instance.configure(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-console\"> <span class=\"method-name\">console</span><span class=\"method-args\">(&amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"console-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 141\ndef console(&amp;blk)\n  @load_console ||= []\n  @load_console &lt;&lt; blk if blk\n  @load_console\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-generators\"> <span class=\"method-name\">generators</span><span class=\"method-args\">(&amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"generators-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 153\ndef generators(&amp;blk)\n  @generators ||= []\n  @generators &lt;&lt; blk if blk\n  @generators\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-inherited\"> <span class=\"method-name\">inherited</span><span class=\"method-args\">(base)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inherited-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 129\ndef inherited(base)\n  unless base.abstract_railtie?\n    subclasses &lt;&lt; base\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-instance\"> <span class=\"method-name\">instance</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Since <a href=\"railtie\">Rails::Railtie</a> cannot be instantiated, any methods that call <code>instance</code> are intended to be called only on subclasses of a <a href=\"railtie\">Railtie</a>.</p> <div class=\"method-source-code\" id=\"instance-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 170\ndef instance\n  @instance ||= new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 203\ndef initialize\n  if self.class.abstract_railtie?\n    raise \"#{self.class.name} is abstract, you cannot instantiate it directly.\"\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-railtie_name\"> <span class=\"method-name\">railtie_name</span><span class=\"method-args\">(name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"railtie_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 163\ndef railtie_name(name = nil)\n  @railtie_name = name.to_s if name\n  @railtie_name ||= generate_railtie_name(self.name)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-rake_tasks\"> <span class=\"method-name\">rake_tasks</span><span class=\"method-args\">(&amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"rake_tasks-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 135\ndef rake_tasks(&amp;blk)\n  @rake_tasks ||= []\n  @rake_tasks &lt;&lt; blk if blk\n  @rake_tasks\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-respond_to_missing-3F\"> <span class=\"method-name\">respond_to_missing?</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"respond_to_missing-3F-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 174\ndef respond_to_missing?(*args)\n  instance.respond_to?(*args) || super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-runner\"> <span class=\"method-name\">runner</span><span class=\"method-args\">(&amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"runner-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 147\ndef runner(&amp;blk)\n  @load_runner ||= []\n  @load_runner &lt;&lt; blk if blk\n  @load_runner\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-subclasses\"> <span class=\"method-name\">subclasses</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"subclasses-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 125\ndef subclasses\n  @subclasses ||= []\nend</pre> </div> </div> </div> </section> <section id=\"protected-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Protected Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-generate_railtie_name\"> <span class=\"method-name\">generate_railtie_name</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"generate_railtie_name-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 186\ndef generate_railtie_name(string)\n  ActiveSupport::Inflector.underscore(string).tr(\"/\", \"_\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-method_missing\"> <span class=\"method-name\">method_missing</span><span class=\"method-args\">(name, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If the class method does not have a method, then send the method call to the <a href=\"railtie\">Railtie</a> instance.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"method_missing-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 192\ndef method_missing(name, *args, &amp;block)\n  if instance.respond_to?(name)\n    instance.public_send(name, *args, &amp;block)\n  else\n    super\n  end\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-config\"> <span class=\"method-name\">config</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"config-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 213\ndef config\n  @config ||= Railtie::Configuration.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-configure\"> <span class=\"method-name\">configure</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"configure-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 209\ndef configure(&amp;block)\n  instance_eval(&amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-railtie_namespace\"> <span class=\"method-name\">railtie_namespace</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"railtie_namespace-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie.rb, line 217\ndef railtie_namespace\n  @railtie_namespace ||= self.class.parents.detect { |n| n.respond_to?(:railtie_namespace) }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/railtie/configuration":"<h1 id=\"class-Rails::Railtie::Configuration\" class=\"class\"> class Rails::Railtie::Configuration </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 6\ndef initialize\n  @@options ||= {}\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after_initialize\"> <span class=\"method-name\">after_initialize</span><span class=\"method-args\">() { |: true, &amp;block)| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Last configurable block to run. Called after frameworks initialize.</p> <div class=\"method-source-code\" id=\"after_initialize-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 68\ndef after_initialize(&amp;block)\n  ActiveSupport.on_load(:after_initialize, yield: true, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-app_generators\"> <span class=\"method-name\">app_generators</span><span class=\"method-args\">() { |app_generators| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This allows you to modify application's generators from Railties.</p> <p>Values set on <a href=\"configuration#method-i-app_generators\">#app_generators</a> will become defaults for application, unless application overwrites them.</p> <div class=\"method-source-code\" id=\"app_generators-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 45\ndef app_generators\n  @@app_generators ||= Rails::Configuration::Generators.new\n  yield(@@app_generators) if block_given?\n  @@app_generators\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-app_middleware\"> <span class=\"method-name\">app_middleware</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>This allows you to modify the application's middlewares from Engines.</p> <p>All operations you run on the <a href=\"configuration#method-i-app_middleware\">#app_middleware</a> will be replayed on the application once it is defined and the default_middlewares are created</p> <div class=\"method-source-code\" id=\"app_middleware-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 37\ndef app_middleware\n  @@app_middleware ||= Rails::Configuration::MiddlewareStackProxy.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_configuration\"> <span class=\"method-name\">before_configuration</span><span class=\"method-args\">() { |: true, &amp;block)| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>First configurable block to run. Called before any initializers are run.</p> <div class=\"method-source-code\" id=\"before_configuration-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 52\ndef before_configuration(&amp;block)\n  ActiveSupport.on_load(:before_configuration, yield: true, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_eager_load\"> <span class=\"method-name\">before_eager_load</span><span class=\"method-args\">() { |: true, &amp;block)| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Third configurable block to run. Does not run if <code>config.cache_classes</code> set to false.</p> <div class=\"method-source-code\" id=\"before_eager_load-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 58\ndef before_eager_load(&amp;block)\n  ActiveSupport.on_load(:before_eager_load, yield: true, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before_initialize\"> <span class=\"method-name\">before_initialize</span><span class=\"method-args\">() { |: true, &amp;block)| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Second configurable block to run. Called before frameworks initialize.</p> <div class=\"method-source-code\" id=\"before_initialize-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 63\ndef before_initialize(&amp;block)\n  ActiveSupport.on_load(:before_initialize, yield: true, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eager_load_namespaces\"> <span class=\"method-name\">eager_load_namespaces</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>All namespaces that are eager loaded</p> <div class=\"method-source-code\" id=\"eager_load_namespaces-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 16\ndef eager_load_namespaces\n  @@eager_load_namespaces ||= []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-respond_to-3F\"> <span class=\"method-name\">respond_to?</span><span class=\"method-args\">(name, include_private = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"respond_to-3F-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 83\ndef respond_to?(name, include_private = false)\n  super || @@options.key?(name.to_sym)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_prepare\"> <span class=\"method-name\">to_prepare</span><span class=\"method-args\">(&amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Defines generic callbacks to run before <a href=\"configuration#method-i-after_initialize\">after_initialize</a>. Useful for <a href=\"../railtie\">Rails::Railtie</a> subclasses.</p> <div class=\"method-source-code\" id=\"to_prepare-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 79\ndef to_prepare(&amp;blk)\n  to_prepare_blocks &lt;&lt; blk if blk\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_prepare_blocks\"> <span class=\"method-name\">to_prepare_blocks</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><a href=\"../../array\">Array</a> of callbacks defined by <a href=\"configuration#method-i-to_prepare\">to_prepare</a>.</p> <div class=\"method-source-code\" id=\"to_prepare_blocks-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 73\ndef to_prepare_blocks\n  @@to_prepare_blocks ||= []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-watchable_dirs\"> <span class=\"method-name\">watchable_dirs</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add directories that should be watched for change. The key of the hashes should be directories and the values should be an array of extensions to match in each directory.</p> <div class=\"method-source-code\" id=\"watchable_dirs-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 28\ndef watchable_dirs\n  @@watchable_dirs ||= {}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-watchable_files\"> <span class=\"method-name\">watchable_files</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add files that should be watched for change.</p> <div class=\"method-source-code\" id=\"watchable_files-source\"> <pre class=\"ruby\"># File railties/lib/rails/railtie/configuration.rb, line 21\ndef watchable_files\n  @@watchable_files ||= []\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails/server":"<h1 id=\"class-Rails::Server\" class=\"class\"> class Rails::Server </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Rack::Server</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(*)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File railties/lib/rails/commands/server.rb, line 53\ndef initialize(*)\n  super\n  set_environment\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-app\"> <span class=\"method-name\">app</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>TODO: this is no longer required but we keep it for the moment to support older config.ru files.</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"app-source\"> <pre class=\"ruby\"># File railties/lib/rails/commands/server.rb, line 59\ndef app\n  @app ||= begin\n    app = super\n    app.respond_to?(:to_app) ? app.to_app : app\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default_options\"> <span class=\"method-name\">default_options</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"default_options-source\"> <pre class=\"ruby\"># File railties/lib/rails/commands/server.rb, line 109\ndef default_options\n  super.merge({\n    Port:               3000,\n    DoNotReverseLookup: true,\n    environment:        (ENV['RAILS_ENV'] || ENV['RACK_ENV'] || \"development\").dup,\n    daemonize:          false,\n    debugger:           false,\n    pid:                File.expand_path(\"tmp/pids/server.pid\"),\n    config:             File.expand_path(\"config.ru\")\n  })\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-log_path\"> <span class=\"method-name\">log_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"log_path-source\"> <pre class=\"ruby\"># File railties/lib/rails/commands/server.rb, line 105\ndef log_path\n  \"log/#{options[:environment]}.log\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-middleware\"> <span class=\"method-name\">middleware</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"middleware-source\"> <pre class=\"ruby\"># File railties/lib/rails/commands/server.rb, line 87\ndef middleware\n  middlewares = []\n  if RUBY_VERSION &lt; '2.0.0'\n    middlewares &lt;&lt; [Rails::Rack::Debugger] if options[:debugger]\n  end\n  middlewares &lt;&lt; [::Rack::ContentLength]\n\n  # FIXME: add Rack::Lock in the case people are using webrick.\n  # This is to remain backwards compatible for those who are\n  # running webrick in production. We should consider removing this\n  # in development.\n  if server.name == 'Rack::Handler::WEBrick'\n    middlewares &lt;&lt; [::Rack::Lock]\n  end\n\n  Hash.new(middlewares)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-opt_parser\"> <span class=\"method-name\">opt_parser</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"opt_parser-source\"> <pre class=\"ruby\"># File railties/lib/rails/commands/server.rb, line 66\ndef opt_parser\n  Options.new\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-set_environment\"> <span class=\"method-name\">set_environment</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"set_environment-source\"> <pre class=\"ruby\"># File railties/lib/rails/commands/server.rb, line 70\ndef set_environment\n  ENV[\"RAILS_ENV\"] ||= options[:environment]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start\"> <span class=\"method-name\">start</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"start-source\"> <pre class=\"ruby\"># File railties/lib/rails/commands/server.rb, line 74\ndef start\n  print_boot_information\n  trap(:INT) { exit }\n  create_tmp_directories\n  log_to_stdout if options[:log_stdout]\n\n  super\nensure\n  # The '-h' option calls exit before @options is set.\n  # If we call 'options' with it unset, we get double help banners.\n  puts 'Exiting' unless @options &amp;&amp; options[:daemonize]\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","range":"<h1 id=\"class-Range\" class=\"class\"> class Range </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"RANGE_FORMATS\">RANGE_FORMATS </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-include_with_range-3F\"> <span class=\"method-name\">include_with_range?</span><span class=\"method-args\">(value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Extends the default Range#include? to support range comparisons.</p> <pre class=\"ruby\">(1..5).include?(1..5) # =&gt; true\n(1..5).include?(2..3) # =&gt; true\n(1..5).include?(2..6) # =&gt; false\n</pre> <p>The native Range#include? behavior is untouched.</p> <pre class=\"ruby\">('a'..'f').include?('c') # =&gt; true\n(5..9).include?(11) # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"include_with_range-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/range/include_range.rb, line 12\ndef include_with_range?(value)\n  if value.is_a?(::Range)\n    # 1...10 includes 1..9 but it does not include 1..10.\n    operator = exclude_end? &amp;&amp; !value.exclude_end? ? :&lt; : :&lt;=\n    include_without_range?(value.first) &amp;&amp; value.last.send(operator, last)\n  else\n    include_without_range?(value)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-overlaps-3F\"> <span class=\"method-name\">overlaps?</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Compare two ranges and see if they overlap each other</p> <pre class=\"ruby\">(1..5).overlaps?(4..6) # =&gt; true\n(1..5).overlaps?(7..9) # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"overlaps-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/range/overlaps.rb, line 5\ndef overlaps?(other)\n  cover?(other.first) || other.cover?(first)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_default_s\"> <span class=\"method-name\">to_default_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"range#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_formatted_s\"> <span class=\"method-name\">to_formatted_s</span><span class=\"method-args\">(format = :default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Gives a human readable format of the range.</p> <pre class=\"ruby\">(1..100).to_formatted_s # =&gt; \"1..100\"\n</pre> <div class=\"method-source-code\" id=\"to_formatted_s-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/range/conversions.rb, line 9\ndef to_formatted_s(format = :default)\n  if formatter = RANGE_FORMATS[format]\n    formatter.call(first, last)\n  else\n    to_default_s\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"range#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"range#method-i-to_default_s\">to_default_s</a> </div> <div class=\"aliases\"> Alias for: <a href=\"range#method-i-to_formatted_s\">to_formatted_s</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","string":"<h1 id=\"class-String\" class=\"class\"> class String </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"string\">String</a> inflections define new methods on the <a href=\"string\">String</a> class to transform names for different purposes. For instance, you can figure out the name of a table from the name of a class.</p> <pre class=\"ruby\">'ScaleScore'.tableize # =&gt; \"scale_scores\"\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"BLANK_RE\">BLANK_RE </dt>\n\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-acts_like_string-3F\"> <span class=\"method-name\">acts_like_string?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Enable more predictable duck-typing on String-like classes. See <code>Object#acts_like?</code>.</p> <div class=\"method-source-code\" id=\"acts_like_string-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/behavior.rb, line 3\ndef acts_like_string?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-at\"> <span class=\"method-name\">at</span><span class=\"method-args\">(position)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If you pass a single Fixnum, returns a substring of one character at that position. The first character of the string is at position 0, the next at position 1, and so on. If a range is supplied, a substring containing characters at offsets given by the range is returned. In both cases, if an offset is negative, it is counted from the end of the string. Returns nil if the initial offset falls outside the string. Returns an empty string if the beginning of the range is greater than the end of the string.</p> <pre class=\"ruby\">str = \"hello\"\nstr.at(0)      # =&gt; \"h\"\nstr.at(1..3)   # =&gt; \"ell\"\nstr.at(-2)     # =&gt; \"l\"\nstr.at(-2..-1) # =&gt; \"lo\"\nstr.at(5)      # =&gt; nil\nstr.at(5..-1)  # =&gt; \"\"\n</pre> <p>If a Regexp is given, the matching portion of the string is returned. If a <a href=\"string\">String</a> is given, that given string is returned if it occurs in the string. In both cases, nil is returned if there is no match.</p> <pre class=\"ruby\">str = \"hello\"\nstr.at(/lo/) # =&gt; \"lo\"\nstr.at(/ol/) # =&gt; nil\nstr.at(\"lo\") # =&gt; \"lo\"\nstr.at(\"ol\") # =&gt; nil\n</pre> <div class=\"method-source-code\" id=\"at-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/access.rb, line 27\ndef at(position)\n  self[position]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-blank-3F\"> <span class=\"method-name\">blank?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A string is blank if it's empty or contains whitespaces only:</p> <pre class=\"ruby\">''.blank?       # =&gt; true\n'   '.blank?    # =&gt; true\n\"\\t\\n\\r\".blank? # =&gt; true\n' blah '.blank? # =&gt; false\n</pre> <p>Unicode whitespace is supported:</p> <pre class=\"ruby\">\"\\u00a0\".blank? # =&gt; true\n</pre> <p>@return [true, false]</p> <div class=\"method-source-code\" id=\"blank-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/blank.rb, line 115\ndef blank?\n  BLANK_RE === self\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-camelcase\"> <span class=\"method-name\">camelcase</span><span class=\"method-args\">(first_letter = :upper)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"string#method-i-camelize\">camelize</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-camelize\"> <span class=\"method-name\">camelize</span><span class=\"method-args\">(first_letter = :upper)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>By default, <code>camelize</code> converts strings to UpperCamelCase. If the argument to camelize is set to <code>:lower</code> then camelize produces lowerCamelCase.</p> <p><code>camelize</code> will also convert '/' to '::' which is useful for converting paths to namespaces.</p> <pre class=\"ruby\">'active_record'.camelize                # =&gt; \"ActiveRecord\"\n'active_record'.camelize(:lower)        # =&gt; \"activeRecord\"\n'active_record/errors'.camelize         # =&gt; \"ActiveRecord::Errors\"\n'active_record/errors'.camelize(:lower) # =&gt; \"activeRecord::Errors\"\n</pre> <div class=\"method-source-code\" id=\"camelize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 89\ndef camelize(first_letter = :upper)\n  case first_letter\n  when :upper\n    ActiveSupport::Inflector.camelize(self, true)\n  when :lower\n    ActiveSupport::Inflector.camelize(self, false)\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"string#method-i-camelcase\">camelcase</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-classify\"> <span class=\"method-name\">classify</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a class name from a plural table name like Rails does for table names to models. Note that this returns a string and not a class. (To convert to an actual class follow <code>classify</code> with <code>constantize</code>.)</p> <pre class=\"ruby\">'egg_and_hams'.classify # =&gt; \"EggAndHam\"\n'posts'.classify        # =&gt; \"Post\"\n</pre> <div class=\"method-source-code\" id=\"classify-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 187\ndef classify\n  ActiveSupport::Inflector.classify(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-constantize\"> <span class=\"method-name\">constantize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>constantize</code> tries to find a declared constant with the name specified in the string. It raises a <a href=\"nameerror\">NameError</a> when the name is not in CamelCase or is not initialized. See <a href=\"activesupport/inflector#method-i-constantize\">ActiveSupport::Inflector#constantize</a></p> <pre class=\"ruby\">'Module'.constantize  # =&gt; Module\n'Class'.constantize   # =&gt; Class\n'blargle'.constantize # =&gt; NameError: wrong constant name blargle\n</pre> <div class=\"method-source-code\" id=\"constantize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 65\ndef constantize\n  ActiveSupport::Inflector.constantize(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dasherize\"> <span class=\"method-name\">dasherize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces underscores with dashes in the string.</p> <pre class=\"ruby\">'puni_puni'.dasherize # =&gt; \"puni-puni\"\n</pre> <div class=\"method-source-code\" id=\"dasherize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 125\ndef dasherize\n  ActiveSupport::Inflector.dasherize(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deconstantize\"> <span class=\"method-name\">deconstantize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the rightmost segment from the constant expression in the string.</p> <pre class=\"ruby\">'Net::HTTP'.deconstantize   # =&gt; \"Net\"\n'::Net::HTTP'.deconstantize # =&gt; \"::Net\"\n'String'.deconstantize      # =&gt; \"\"\n'::String'.deconstantize    # =&gt; \"\"\n''.deconstantize            # =&gt; \"\"\n</pre> <p>See also <code>demodulize</code>.</p> <div class=\"method-source-code\" id=\"deconstantize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 150\ndef deconstantize\n  ActiveSupport::Inflector.deconstantize(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-demodulize\"> <span class=\"method-name\">demodulize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the module part from the constant expression in the string.</p> <pre class=\"ruby\">'ActiveRecord::CoreExtensions::String::Inflections'.demodulize # =&gt; \"Inflections\"\n'Inflections'.demodulize                                       # =&gt; \"Inflections\"\n'::Inflections'.demodulize                                     # =&gt; \"Inflections\"\n''.demodulize                                                  # =&gt; ''\n</pre> <p>See also <code>deconstantize</code>.</p> <div class=\"method-source-code\" id=\"demodulize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 137\ndef demodulize\n  ActiveSupport::Inflector.demodulize(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-exclude-3F\"> <span class=\"method-name\">exclude?</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The inverse of <code>String#include?</code>. Returns true if the string does not include the other string.</p> <pre class=\"ruby\">\"hello\".exclude? \"lo\" # =&gt; false\n\"hello\".exclude? \"ol\" # =&gt; true\n\"hello\".exclude? ?h   # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"exclude-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/exclude.rb, line 8\ndef exclude?(string)\n  !include?(string)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-first\"> <span class=\"method-name\">first</span><span class=\"method-args\">(limit = 1)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the first character. If a limit is supplied, returns a substring from the beginning of the string until it reaches the limit value. If the given limit is greater than or equal to the string length, returns a copy of self.</p> <pre class=\"ruby\">str = \"hello\"\nstr.first    # =&gt; \"h\"\nstr.first(1) # =&gt; \"h\"\nstr.first(2) # =&gt; \"he\"\nstr.first(0) # =&gt; \"\"\nstr.first(6) # =&gt; \"hello\"\n</pre> <div class=\"method-source-code\" id=\"first-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/access.rb, line 75\ndef first(limit = 1)\n  if limit == 0\n    ''\n  elsif limit &gt;= size\n    self.dup\n  else\n    to(limit - 1)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-foreign_key\"> <span class=\"method-name\">foreign_key</span><span class=\"method-args\">(separate_class_name_and_id_with_underscore = true)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates a foreign key name from a class name. <code>separate_class_name_and_id_with_underscore</code> sets whether the method should put '_' between the name and 'id'.</p> <pre class=\"ruby\">'Message'.foreign_key        # =&gt; \"message_id\"\n'Message'.foreign_key(false) # =&gt; \"messageid\"\n'Admin::Post'.foreign_key    # =&gt; \"post_id\"\n</pre> <div class=\"method-source-code\" id=\"foreign_key-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 214\ndef foreign_key(separate_class_name_and_id_with_underscore = true)\n  ActiveSupport::Inflector.foreign_key(self, separate_class_name_and_id_with_underscore)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-from\"> <span class=\"method-name\">from</span><span class=\"method-args\">(position)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a substring from the given position to the end of the string. If the position is negative, it is counted from the end of the string.</p> <pre class=\"ruby\">str = \"hello\"\nstr.from(0)  # =&gt; \"hello\"\nstr.from(3)  # =&gt; \"lo\"\nstr.from(-2) # =&gt; \"lo\"\n</pre> <p>You can mix it with <code>to</code> method and do fun things like:</p> <pre class=\"ruby\">str = \"hello\"\nstr.from(0).to(-1) # =&gt; \"hello\"\nstr.from(1).to(-2) # =&gt; \"ell\"\n</pre> <div class=\"method-source-code\" id=\"from-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/access.rb, line 44\ndef from(position)\n  self[position..-1]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-html_safe\"> <span class=\"method-name\">html_safe</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Marks a string as trusted safe. It will be inserted into HTML with no additional escaping performed. It is your responsibilty to ensure that the string contains no malicious content. This method is equivalent to the `raw` helper in views. It is recommended that you use `sanitize` instead of this method. It should never be called on user input.</p> <div class=\"method-source-code\" id=\"html_safe-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/output_safety.rb, line 259\ndef html_safe\n  ActiveSupport::SafeBuffer.new(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-humanize\"> <span class=\"method-name\">humanize</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Capitalizes the first word, turns underscores into spaces, and strips a trailing '_id' if present. Like <code>titleize</code>, this is meant for creating pretty output.</p> <p>The capitalization of the first word can be turned off by setting the optional parameter <code>capitalize</code> to false. By default, this parameter is true.</p> <pre class=\"ruby\">'employee_salary'.humanize              # =&gt; \"Employee salary\"\n'author_id'.humanize                    # =&gt; \"Author\"\n'author_id'.humanize(capitalize: false) # =&gt; \"author\"\n'_id'.humanize                          # =&gt; \"Id\"\n</pre> <div class=\"method-source-code\" id=\"humanize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 203\ndef humanize(options = {})\n  ActiveSupport::Inflector.humanize(self, options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-in_time_zone\"> <span class=\"method-name\">in_time_zone</span><span class=\"method-args\">(zone = ::Time.zone)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts <a href=\"string\">String</a> to a TimeWithZone in the current zone if <a href=\"time#method-c-zone\">Time.zone</a> or <a href=\"time#attribute-c-zone_default\">Time.zone_default</a> is set, otherwise converts <a href=\"string\">String</a> to a <a href=\"time\">Time</a> via <a href=\"string#method-i-to_time\">#to_time</a></p> <div class=\"method-source-code\" id=\"in_time_zone-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/zones.rb, line 7\ndef in_time_zone(zone = ::Time.zone)\n  if zone\n    ::Time.find_zone!(zone).parse(self)\n  else\n    to_time\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-indent\"> <span class=\"method-name\">indent</span><span class=\"method-args\">(amount, indent_string=nil, indent_empty_lines=false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Indents the lines in the receiver:</p> <pre class=\"ruby\">\"def some_method\n  some_code\nend\n\".indent(2)\n# =&gt;\n  def some_method\n    some_code\n  end\n</pre> <p>The second argument, <code>indent_string</code>, specifies which indent string to use. The default is <code>nil</code>, which tells the method to make a guess by peeking at the first indented line, and fallback to a space if there is none.</p> <pre class=\"ruby\">\"  foo\".indent(2)        # =&gt; \"    foo\"\n\"foo\\n\\t\\tbar\".indent(2) # =&gt; \"\\t\\tfoo\\n\\t\\t\\t\\tbar\"\n\"foo\".indent(2, \"\\t\")    # =&gt; \"\\t\\tfoo\"\n</pre> <p>While <code>indent_string</code> is typically one space or tab, it may be any string.</p> <p>The third argument, <code>indent_empty_lines</code>, is a flag that says whether empty lines should be indented. Default is false.</p> <pre class=\"ruby\">\"foo\\n\\nbar\".indent(2)            # =&gt; \"  foo\\n\\n  bar\"\n\"foo\\n\\nbar\".indent(2, nil, true) # =&gt; \"  foo\\n  \\n  bar\"\n</pre> <div class=\"method-source-code\" id=\"indent-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/indent.rb, line 40\ndef indent(amount, indent_string=nil, indent_empty_lines=false)\n  dup.tap {|_| _.indent!(amount, indent_string, indent_empty_lines)}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-indent-21\"> <span class=\"method-name\">indent!</span><span class=\"method-args\">(amount, indent_string=nil, indent_empty_lines=false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Same as <code>indent</code>, except it indents the receiver in-place.</p> <p>Returns the indented string, or <code>nil</code> if there was nothing to indent.</p> <div class=\"method-source-code\" id=\"indent-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/indent.rb, line 5\ndef indent!(amount, indent_string=nil, indent_empty_lines=false)\n  indent_string = indent_string || self[/^[ \\t]/] || ' '\n  re = indent_empty_lines ? /^/ : /^(?!$)/\n  gsub!(re, indent_string * amount)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inquiry\"> <span class=\"method-name\">inquiry</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wraps the current string in the <code>ActiveSupport::StringInquirer</code> class, which gives you a prettier way to test for equality.</p> <pre class=\"ruby\">env = 'production'.inquiry\nenv.production?  # =&gt; true\nenv.development? # =&gt; false\n</pre> <div class=\"method-source-code\" id=\"inquiry-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inquiry.rb, line 10\ndef inquiry\n  ActiveSupport::StringInquirer.new(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-is_utf8-3F\"> <span class=\"method-name\">is_utf8?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"is_utf8-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/multibyte.rb, line 38\ndef is_utf8?\n  case encoding\n  when Encoding::UTF_8\n    valid_encoding?\n  when Encoding::ASCII_8BIT, Encoding::US_ASCII\n    dup.force_encoding(Encoding::UTF_8).valid_encoding?\n  else\n    false\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last\"> <span class=\"method-name\">last</span><span class=\"method-args\">(limit = 1)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the last character of the string. If a limit is supplied, returns a substring from the end of the string until it reaches the limit value (counting backwards). If the given limit is greater than or equal to the string length, returns a copy of self.</p> <pre class=\"ruby\">str = \"hello\"\nstr.last    # =&gt; \"o\"\nstr.last(1) # =&gt; \"o\"\nstr.last(2) # =&gt; \"lo\"\nstr.last(0) # =&gt; \"\"\nstr.last(6) # =&gt; \"hello\"\n</pre> <div class=\"method-source-code\" id=\"last-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/access.rb, line 95\ndef last(limit = 1)\n  if limit == 0\n    ''\n  elsif limit &gt;= size\n    self.dup\n  else\n    from(-limit)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-mb_chars\"> <span class=\"method-name\">mb_chars</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <h2 id=\"method-i-mb_chars-label-Multibyte+proxy\">Multibyte proxy</h2> <p><code>mb_chars</code> is a multibyte safe proxy for string methods.</p> <p>It creates and returns an instance of the <a href=\"activesupport/multibyte/chars\">ActiveSupport::Multibyte::Chars</a> class which encapsulates the original string. A Unicode safe version of all the <a href=\"string\">String</a> methods are defined on this proxy class. If the proxy class doesn't respond to a certain method, it's forwarded to the encapsulated string.</p> <pre class=\"ruby\">name = 'Claus Müller'\nname.reverse # =&gt; \"rell??M sualC\"\nname.length  # =&gt; 13\n\nname.mb_chars.reverse.to_s # =&gt; \"rellüM sualC\"\nname.mb_chars.length       # =&gt; 12\n</pre> <h2 id=\"method-i-mb_chars-label-Method+chaining\">\n<a href=\"method\">Method</a> chaining</h2> <p>All the methods on the Chars proxy which normally return a string will return a Chars object. This allows method chaining on the result of any of these methods.</p> <pre class=\"ruby\">name.mb_chars.reverse.length # =&gt; 12\n</pre> <h2 id=\"method-i-mb_chars-label-Interoperability+and+configuration\">Interoperability and configuration</h2> <p>The Chars object tries to be as interchangeable with <a href=\"string\">String</a> objects as possible: sorting and comparing between <a href=\"string\">String</a> and Char work like expected. The bang! methods change the internal string representation in the Chars object. Interoperability problems can be resolved easily with a <code>to_s</code> call.</p> <p>For more information about the methods defined on the Chars proxy see <a href=\"activesupport/multibyte/chars\">ActiveSupport::Multibyte::Chars</a>. For information about how to change the default Multibyte behavior see <a href=\"activesupport/multibyte\">ActiveSupport::Multibyte</a>.</p> <div class=\"method-source-code\" id=\"mb_chars-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/multibyte.rb, line 34\ndef mb_chars\n  ActiveSupport::Multibyte.proxy_class.new(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parameterize\"> <span class=\"method-name\">parameterize</span><span class=\"method-args\">(sep = '-')</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replaces special characters in a string so that it may be used as part of a 'pretty' URL.</p> <pre>class Person\n  def to_param\n    \"#{id}-#{name.parameterize}\"\n  end\nend\n\n@person = Person.find(1)\n# =&gt; #&lt;Person id: 1, name: \"Donald E. Knuth\"&gt;\n\n&lt;%= link_to(@person.name, person_path) %&gt;\n# =&gt; &lt;a href=\"/person/1-donald-e-knuth\"&gt;Donald E. Knuth&lt;/a&gt;</pre> <div class=\"method-source-code\" id=\"parameterize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 167\ndef parameterize(sep = '-')\n  ActiveSupport::Inflector.parameterize(self, sep)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pluralize\"> <span class=\"method-name\">pluralize</span><span class=\"method-args\">(count = nil, locale = :en)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the plural form of the word in the string.</p> <p>If the optional parameter <code>count</code> is specified, the singular form will be returned if <code>count == 1</code>. For any other value of <code>count</code> the plural will be returned.</p> <p>If the optional parameter <code>locale</code> is specified, the word will be pluralized as a word of that language. By default, this parameter is set to <code>:en</code>. You must define your own inflection rules for languages other than English.</p> <pre class=\"ruby\">'post'.pluralize             # =&gt; \"posts\"\n'octopus'.pluralize          # =&gt; \"octopi\"\n'sheep'.pluralize            # =&gt; \"sheep\"\n'words'.pluralize            # =&gt; \"words\"\n'the blue mailman'.pluralize # =&gt; \"the blue mailmen\"\n'CamelOctopus'.pluralize     # =&gt; \"CamelOctopi\"\n'apple'.pluralize(1)         # =&gt; \"apple\"\n'apple'.pluralize(2)         # =&gt; \"apples\"\n'ley'.pluralize(:es)         # =&gt; \"leyes\"\n'ley'.pluralize(1, :es)      # =&gt; \"ley\"\n</pre> <div class=\"method-source-code\" id=\"pluralize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 31\ndef pluralize(count = nil, locale = :en)\n  locale = count if count.is_a?(Symbol)\n  if count == 1\n    self.dup\n  else\n    ActiveSupport::Inflector.pluralize(self, locale)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove\"> <span class=\"method-name\">remove</span><span class=\"method-args\">(*patterns)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new string with all occurrences of the patterns removed.</p> <pre class=\"ruby\">str = \"foo bar test\"\nstr.remove(\" test\")                 # =&gt; \"foo bar\"\nstr.remove(\" test\", /bar/)          # =&gt; \"foo \"\nstr                                 # =&gt; \"foo bar test\"\n</pre> <div class=\"method-source-code\" id=\"remove-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/filters.rb, line 31\ndef remove(*patterns)\n  dup.remove!(*patterns)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove-21\"> <span class=\"method-name\">remove!</span><span class=\"method-args\">(*patterns)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Alters the string by removing all occurrences of the patterns.</p> <pre class=\"ruby\">str = \"foo bar test\"\nstr.remove!(\" test\", /bar/)         # =&gt; \"foo \"\nstr                                 # =&gt; \"foo \"\n</pre> <div class=\"method-source-code\" id=\"remove-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/filters.rb, line 39\ndef remove!(*patterns)\n  patterns.each do |pattern|\n    gsub! pattern, \"\"\n  end\n\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-safe_constantize\"> <span class=\"method-name\">safe_constantize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>safe_constantize</code> tries to find a declared constant with the name specified in the string. It returns nil when the name is not in CamelCase or is not initialized. See <a href=\"activesupport/inflector#method-i-safe_constantize\">ActiveSupport::Inflector#safe_constantize</a></p> <pre class=\"ruby\">'Module'.safe_constantize  # =&gt; Module\n'Class'.safe_constantize   # =&gt; Class\n'blargle'.safe_constantize # =&gt; nil\n</pre> <div class=\"method-source-code\" id=\"safe_constantize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 76\ndef safe_constantize\n  ActiveSupport::Inflector.safe_constantize(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-singularize\"> <span class=\"method-name\">singularize</span><span class=\"method-args\">(locale = :en)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The reverse of <code>pluralize</code>, returns the singular form of a word in a string.</p> <p>If the optional parameter <code>locale</code> is specified, the word will be singularized as a word of that language. By default, this parameter is set to <code>:en</code>. You must define your own inflection rules for languages other than English.</p> <pre class=\"ruby\">'posts'.singularize            # =&gt; \"post\"\n'octopi'.singularize           # =&gt; \"octopus\"\n'sheep'.singularize            # =&gt; \"sheep\"\n'word'.singularize             # =&gt; \"word\"\n'the blue mailmen'.singularize # =&gt; \"the blue mailman\"\n'CamelOctopi'.singularize      # =&gt; \"CamelOctopus\"\n'leyes'.singularize(:es)       # =&gt; \"ley\"\n</pre> <div class=\"method-source-code\" id=\"singularize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 54\ndef singularize(locale = :en)\n  ActiveSupport::Inflector.singularize(self, locale)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-squish\"> <span class=\"method-name\">squish</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the string, first removing all whitespace on both ends of the string, and then changing remaining consecutive whitespace groups into one space each.</p> <p>Note that it handles both ASCII and Unicode whitespace.</p> <pre class=\"ruby\">%Q{ Multi-line\n   string }.squish                   # =&gt; \"Multi-line string\"\n\" foo   bar    \\n   \\t   boo\".squish # =&gt; \"foo bar boo\"\n</pre> <div class=\"method-source-code\" id=\"squish-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/filters.rb, line 11\ndef squish\n  dup.squish!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-squish-21\"> <span class=\"method-name\">squish!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Performs a destructive squish. See <a href=\"string#method-i-squish\">#squish</a>.</p> <pre class=\"ruby\">str = \" foo   bar    \\n   \\t   boo\"\nstr.squish!                         # =&gt; \"foo bar boo\"\nstr                                 # =&gt; \"foo bar boo\"\n</pre> <div class=\"method-source-code\" id=\"squish-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/filters.rb, line 19\ndef squish!\n  gsub!(/\\A[[:space:]]+/, '')\n  gsub!(/[[:space:]]+\\z/, '')\n  gsub!(/[[:space:]]+/, ' ')\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-strip_heredoc\"> <span class=\"method-name\">strip_heredoc</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Strips indentation in heredocs.</p> <p>For example in</p> <pre class=\"ruby\">if options[:usage]\n  puts \"    This command does such and such.\n\n    Supported options are:\n      -h         This message\n      ...\n\".strip_heredoc\nend\n</pre> <p>the user would see the usage message aligned against the left margin.</p> <p>Technically, it looks for the least indented line in the whole string, and removes that amount of leading whitespace.</p> <div class=\"method-source-code\" id=\"strip_heredoc-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/strip.rb, line 22\ndef strip_heredoc\n  indent = scan(/^[ \\t]*(?=\\S)/).min.try(:size) || 0\n  gsub(/^[ \\t]{#{indent}}/, '')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-tableize\"> <span class=\"method-name\">tableize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Creates the name of a table like Rails does for models to table names. This method uses the <code>pluralize</code> method on the last word in the string.</p> <pre class=\"ruby\">'RawScaledScorer'.tableize # =&gt; \"raw_scaled_scorers\"\n'egg_and_ham'.tableize     # =&gt; \"egg_and_hams\"\n'fancyCategory'.tableize   # =&gt; \"fancy_categories\"\n</pre> <div class=\"method-source-code\" id=\"tableize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 177\ndef tableize\n  ActiveSupport::Inflector.tableize(self)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-titlecase\"> <span class=\"method-name\">titlecase</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"string#method-i-titleize\">titleize</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-titleize\"> <span class=\"method-name\">titleize</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Capitalizes all the words and replaces some characters in the string to create a nicer looking title. <code>titleize</code> is meant for creating pretty output. It is not used in the Rails internals.</p> <p><code>titleize</code> is also aliased as <code>titlecase</code>.</p> <pre class=\"ruby\">'man from the boondocks'.titleize # =&gt; \"Man From The Boondocks\"\n'x-men: the last stand'.titleize  # =&gt; \"X Men: The Last Stand\"\n</pre> <div class=\"method-source-code\" id=\"titleize-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 107\ndef titleize\n  ActiveSupport::Inflector.titleize(self)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"string#method-i-titlecase\">titlecase</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to\"> <span class=\"method-name\">to</span><span class=\"method-args\">(position)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a substring from the beginning of the string to the given position. If the position is negative, it is counted from the end of the string.</p> <pre class=\"ruby\">str = \"hello\"\nstr.to(0)  # =&gt; \"h\"\nstr.to(3)  # =&gt; \"hell\"\nstr.to(-2) # =&gt; \"hell\"\n</pre> <p>You can mix it with <code>from</code> method and do fun things like:</p> <pre class=\"ruby\">str = \"hello\"\nstr.from(0).to(-1) # =&gt; \"hello\"\nstr.from(1).to(-2) # =&gt; \"ell\"\n</pre> <div class=\"method-source-code\" id=\"to-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/access.rb, line 61\ndef to(position)\n  self[0..position]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_date\"> <span class=\"method-name\">to_date</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts a string to a <a href=\"date\">Date</a> value.</p> <pre class=\"ruby\">\"1-1-2012\".to_date   # =&gt; Sun, 01 Jan 2012\n\"01/01/2012\".to_date # =&gt; Sun, 01 Jan 2012\n\"2012-12-13\".to_date # =&gt; Thu, 13 Dec 2012\n\"12/13/2012\".to_date # =&gt; ArgumentError: invalid date\n</pre> <div class=\"method-source-code\" id=\"to_date-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/conversions.rb, line 43\ndef to_date\n  ::Date.parse(self, false) unless blank?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_datetime\"> <span class=\"method-name\">to_datetime</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts a string to a <a href=\"datetime\">DateTime</a> value.</p> <pre class=\"ruby\">\"1-1-2012\".to_datetime            # =&gt; Sun, 01 Jan 2012 00:00:00 +0000\n\"01/01/2012 23:59:59\".to_datetime # =&gt; Sun, 01 Jan 2012 23:59:59 +0000\n\"2012-12-13 12:50\".to_datetime    # =&gt; Thu, 13 Dec 2012 12:50:00 +0000\n\"12/13/2012\".to_datetime          # =&gt; ArgumentError: invalid date\n</pre> <div class=\"method-source-code\" id=\"to_datetime-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/conversions.rb, line 53\ndef to_datetime\n  ::DateTime.parse(self, false) unless blank?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_time\"> <span class=\"method-name\">to_time</span><span class=\"method-args\">(form = :local)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts a string to a <a href=\"time\">Time</a> value. The <code>form</code> can be either :utc or :local (default :local).</p> <p>The time is parsed using Time.parse method. If <code>form</code> is :local, then the time is in the system timezone. If the date part is missing then the current date is used and if the time part is missing then it is assumed to be 00:00:00.</p> <pre class=\"ruby\">\"13-12-2012\".to_time               # =&gt; 2012-12-13 00:00:00 +0100\n\"06:12\".to_time                    # =&gt; 2012-12-13 06:12:00 +0100\n\"2012-12-13 06:12\".to_time         # =&gt; 2012-12-13 06:12:00 +0100\n\"2012-12-13T06:12\".to_time         # =&gt; 2012-12-13 06:12:00 +0100\n\"2012-12-13T06:12\".to_time(:utc)   # =&gt; 2012-12-13 05:12:00 UTC\n\"12/13/2012\".to_time               # =&gt; ArgumentError: argument out of range\n</pre> <div class=\"method-source-code\" id=\"to_time-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/conversions.rb, line 19\ndef to_time(form = :local)\n  parts = Date._parse(self, false)\n  return if parts.empty?\n\n  now = Time.now\n  time = Time.new(\n    parts.fetch(:year, now.year),\n    parts.fetch(:mon, now.month),\n    parts.fetch(:mday, now.day),\n    parts.fetch(:hour, 0),\n    parts.fetch(:min, 0),\n    parts.fetch(:sec, 0) + parts.fetch(:sec_fraction, 0),\n    parts.fetch(:offset, form == :utc ? 0 : nil)\n  )\n\n  form == :utc ? time.utc : time.getlocal\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-truncate\"> <span class=\"method-name\">truncate</span><span class=\"method-args\">(truncate_at, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Truncates a given <code>text</code> after a given <code>length</code> if <code>text</code> is longer than <code>length</code>:</p> <pre class=\"ruby\">'Once upon a time in a world far far away'.truncate(27)\n# =&gt; \"Once upon a time in a wo...\"\n</pre> <p>Pass a string or regexp <code>:separator</code> to truncate <code>text</code> at a natural break:</p> <pre class=\"ruby\">'Once upon a time in a world far far away'.truncate(27, separator: ' ')\n# =&gt; \"Once upon a time in a...\"\n\n'Once upon a time in a world far far away'.truncate(27, separator: /\\s/)\n# =&gt; \"Once upon a time in a...\"\n</pre> <p>The last characters will be replaced with the <code>:omission</code> string (defaults to “…”) for a total length not exceeding <code>length</code>:</p> <pre class=\"ruby\">'And they found that many people were sleeping better.'.truncate(25, omission: '... (continued)')\n# =&gt; \"And they f... (continued)\"\n</pre> <div class=\"method-source-code\" id=\"truncate-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/filters.rb, line 65\ndef truncate(truncate_at, options = {})\n  return dup unless length &gt; truncate_at\n\n  omission = options[:omission] || '...'\n  length_with_room_for_omission = truncate_at - omission.length\n  stop =        if options[:separator]\n      rindex(options[:separator], length_with_room_for_omission) || length_with_room_for_omission\n    else\n      length_with_room_for_omission\n    end\n\n  \"#{self[0, stop]}#{omission}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-truncate_words\"> <span class=\"method-name\">truncate_words</span><span class=\"method-args\">(words_count, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Truncates a given <code>text</code> after a given number of words (<code>words_count</code>):</p> <pre class=\"ruby\">'Once upon a time in a world far far away'.truncate_words(4)\n# =&gt; \"Once upon a time...\"\n</pre> <p>Pass a string or regexp <code>:separator</code> to specify a different separator of words:</p> <pre class=\"ruby\">'Once&lt;br&gt;upon&lt;br&gt;a&lt;br&gt;time&lt;br&gt;in&lt;br&gt;a&lt;br&gt;world'.truncate_words(5, separator: '&lt;br&gt;')\n# =&gt; \"Once&lt;br&gt;upon&lt;br&gt;a&lt;br&gt;time&lt;br&gt;in...\"\n</pre> <p>The last characters will be replaced with the <code>:omission</code> string (defaults to “…”):</p> <pre class=\"ruby\">'And they found that many people were sleeping better.'.truncate_words(5, omission: '... (continued)')\n# =&gt; \"And they found that many... (continued)\"\n</pre> <div class=\"method-source-code\" id=\"truncate_words-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/filters.rb, line 94\ndef truncate_words(words_count, options = {})\n  sep = options[:separator] || /\\s+/\n  sep = Regexp.escape(sep.to_s) unless Regexp === sep\n  if self =~ /\\A((?&gt;.+?#{sep}){#{words_count - 1}}.+?)#{sep}.*/m\n    $1 + (options[:omission] || '...')\n  else\n    dup\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-underscore\"> <span class=\"method-name\">underscore</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form from the expression in the string.</p> <p><code>underscore</code> will also change '::' to '/' to convert namespaces to paths.</p> <pre class=\"ruby\">'ActiveModel'.underscore         # =&gt; \"active_model\"\n'ActiveModel::Errors'.underscore # =&gt; \"active_model/errors\"\n</pre> <div class=\"method-source-code\" id=\"underscore-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/string/inflections.rb, line 118\ndef underscore\n  ActiveSupport::Inflector.underscore(self)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","symbol":"<h1 id=\"class-Symbol\" class=\"class\"> class Symbol </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-duplicable-3F\"> <span class=\"method-name\">duplicable?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Symbols are not duplicable:</p> <pre class=\"ruby\">:my_symbol.duplicable? # =&gt; false\n:my_symbol.dup         # =&gt; TypeError: can't dup Symbol\n</pre> <div class=\"method-source-code\" id=\"duplicable-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/duplicable.rb, line 64\ndef duplicable?\n  false\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","thread":"<h1 id=\"class-Thread\" class=\"class\"> class Thread </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-freeze\"> <span class=\"method-name\">freeze</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Freezes the thread so that thread local variables cannot be set via <a href=\"thread#method-i-thread_variable_set\">#thread_variable_set</a>, nor can fiber local variables be set.</p> <pre class=\"ruby\">me = Thread.current\nme.freeze\nme.thread_variable_set(:oliver, \"a\")  #=&gt; RuntimeError: can't modify frozen thread locals\nme[:oliver] = \"a\"                     #=&gt; RuntimeError: can't modify frozen thread locals\n</pre> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"freeze-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/thread.rb, line 72\ndef freeze\n  _locals.freeze\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-thread_variable-3F\"> <span class=\"method-name\">thread_variable?</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>true</code> if the given string (or symbol) exists as a thread-local variable.</p> <pre class=\"ruby\">me = Thread.current\nme.thread_variable_set(:oliver, \"a\")\nme.thread_variable?(:oliver)    # =&gt; true\nme.thread_variable?(:stanley)   # =&gt; false\n</pre> <p>Note that these are not fiber local variables. Please see <a href=\"thread#method-i-thread_variable_get\">#thread_variable_get</a> for more details.</p> <div class=\"method-source-code\" id=\"thread_variable-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/thread.rb, line 61\ndef thread_variable?(key)\n  _locals.has_key?(key.to_sym)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-thread_variable_get\"> <span class=\"method-name\">thread_variable_get</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the value of a thread local variable that has been set. Note that these are different than fiber local values.</p> <p><a href=\"thread\">Thread</a> local values are carried along with threads, and do not respect fibers. For example:</p> <pre class=\"ruby\">Thread.new {\n  Thread.current.thread_variable_set(\"foo\", \"bar\") # set a thread local\n  Thread.current[\"foo\"] = \"bar\"                    # set a fiber local\n\n  Fiber.new {\n    Fiber.yield [\n      Thread.current.thread_variable_get(\"foo\"), # get the thread local\n      Thread.current[\"foo\"],                     # get the fiber local\n    ]\n  }.resume\n}.join.value # =&gt; ['bar', nil]\n</pre> <p>The value <code>\"bar\"</code> is returned for the thread local, where <code>nil</code> is returned for the fiber local. The fiber is executed in the same thread, so the thread local values are available.</p> <div class=\"method-source-code\" id=\"thread_variable_get-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/thread.rb, line 25\ndef thread_variable_get(key)\n  _locals[key.to_sym]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-thread_variable_set\"> <span class=\"method-name\">thread_variable_set</span><span class=\"method-args\">(key, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets a thread local with <code>key</code> to <code>value</code>. Note that these are local to threads, and not to fibers. Please see <a href=\"thread#method-i-thread_variable_get\">#thread_variable_get</a> for more information.</p> <div class=\"method-source-code\" id=\"thread_variable_set-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/thread.rb, line 32\ndef thread_variable_set(key, value)\n  _locals[key.to_sym] = value\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-thread_variables\"> <span class=\"method-name\">thread_variables</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns an array of the names of the thread-local variables (as Symbols).</p> <pre class=\"ruby\">thr = Thread.new do\n  Thread.current.thread_variable_set(:cat, 'meow')\n  Thread.current.thread_variable_set(\"dog\", 'woof')\nend\nthr.join               # =&gt; #&lt;Thread:0x401b3f10 dead&gt;\nthr.thread_variables   # =&gt; [:dog, :cat]\n</pre> <p>Note that these are not fiber local variables. Please see <a href=\"thread#method-i-thread_variable_get\">#thread_variable_get</a> for more details.</p> <div class=\"method-source-code\" id=\"thread_variables-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/thread.rb, line 47\ndef thread_variables\n  _locals.keys\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","time":"<h1 id=\"class-Time\" class=\"class\"> class Time </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\">\n<a class=\"include\" href=\"dateandtime/calculations\">DateAndTime::Calculations</a>, <a class=\"include\" href=\"dateandtime/zones\">DateAndTime::Zones</a>\n</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"COMMON_YEAR_DAYS_IN_MONTH\">COMMON_YEAR_DAYS_IN_MONTH </dt>\n\n<dt id=\"DATE_FORMATS\">DATE_FORMATS </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-zone_default\"> <span class=\"method-name\">zone_default</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-3D-3D-3D\"> <span class=\"method-name\">===</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Overriding case equality method so that it returns true for <a href=\"activesupport/timewithzone\">ActiveSupport::TimeWithZone</a> instances</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"3D-3D-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 14\ndef ===(other)\n  super || (self == Time &amp;&amp; other.is_a?(ActiveSupport::TimeWithZone))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-_load\"> <span class=\"method-name\">_load</span><span class=\"method-args\">(marshaled_time)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_load-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/marshal.rb, line 8\ndef _load(marshaled_time)\n  time = _load_without_zone(marshaled_time)\n  time.instance_eval do\n    if zone = defined?(@_zone) &amp;&amp; remove_instance_variable('@_zone')\n      ary = to_a\n      ary[0] += subsec if ary[0] == sec\n      ary[-1] = zone\n      utc? ? Time.utc(*ary) : Time.local(*ary)\n    else\n      self\n    end\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-c-_load_without_zone\">_load_without_zone</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-c-_load_without_zone\"> <span class=\"method-name\">_load_without_zone</span><span class=\"method-args\">(marshaled_time)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-c-_load\">_load</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-c-at\"> <span class=\"method-name\">at</span><span class=\"method-args\">(*args)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"time#method-c-at_without_coercion\">at_without_coercion</a> </div> <div class=\"aliases\"> Alias for: <a href=\"time#method-c-at_with_coercion\">at_with_coercion</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-at_with_coercion\"> <span class=\"method-name\">at_with_coercion</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Layers additional behavior on <a href=\"time#method-c-at\">::at</a> so that <a href=\"activesupport/timewithzone\">ActiveSupport::TimeWithZone</a> and <a href=\"datetime\">DateTime</a> instances can be used when called with a single argument</p> <div class=\"method-source-code\" id=\"at_with_coercion-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 35\ndef at_with_coercion(*args)\n  return at_without_coercion(*args) if args.size != 1\n\n  # Time.at can be called with a time or numerical value\n  time_or_number = args.first\n\n  if time_or_number.is_a?(ActiveSupport::TimeWithZone) || time_or_number.is_a?(DateTime)\n    at_without_coercion(time_or_number.to_f).getlocal\n  else\n    at_without_coercion(time_or_number)\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-c-at\">at</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-c-at_without_coercion\"> <span class=\"method-name\">at_without_coercion</span><span class=\"method-args\">(*args)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-c-at\">at</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-current\"> <span class=\"method-name\">current</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or <code>config.time_zone</code> are set, otherwise just returns <code>Time.now</code>.</p> <div class=\"method-source-code\" id=\"current-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 29\ndef current\n  ::Time.zone ? ::Time.zone.now : ::Time.now\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-days_in_month\"> <span class=\"method-name\">days_in_month</span><span class=\"method-args\">(month, year = now.year)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return the number of days in the given month. If no year is specified, it will use the current year.</p> <div class=\"method-source-code\" id=\"days_in_month-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 20\ndef days_in_month(month, year = now.year)\n  if month == 2 &amp;&amp; ::Date.gregorian_leap?(year)\n    29\n  else\n    COMMON_YEAR_DAYS_IN_MONTH[month]\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-find_zone\"> <span class=\"method-name\">find_zone</span><span class=\"method-args\">(time_zone)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"find_zone-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/zones.rb, line 75\ndef find_zone(time_zone)\n  find_zone!(time_zone) rescue nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-find_zone-21\"> <span class=\"method-name\">find_zone!</span><span class=\"method-args\">(time_zone)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a TimeZone instance or nil, or raises an ArgumentError for invalid timezones.</p> <div class=\"method-source-code\" id=\"find_zone-21-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/zones.rb, line 55\ndef find_zone!(time_zone)\n  if !time_zone || time_zone.is_a?(ActiveSupport::TimeZone)\n    time_zone\n  else\n    # lookup timezone based on identifier (unless we've been passed a TZInfo::Timezone)\n    unless time_zone.respond_to?(:period_for_local)\n      time_zone = ActiveSupport::TimeZone[time_zone] || TZInfo::Timezone.get(time_zone)\n    end\n\n    # Return if a TimeZone instance, or wrap in a TimeZone instance if a TZInfo::Timezone\n    if time_zone.is_a?(ActiveSupport::TimeZone)\n      time_zone\n    else\n      ActiveSupport::TimeZone.create(time_zone.name, nil, time_zone)\n    end\n  end\nrescue TZInfo::InvalidTimezoneIdentifier\n  raise ArgumentError, \"Invalid Timezone: #{time_zone}\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-use_zone\"> <span class=\"method-name\">use_zone</span><span class=\"method-args\">(time_zone) { || ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Allows override of <code>Time.zone</code> locally inside supplied block; resets <code>Time.zone</code> to existing value when done.</p> <div class=\"method-source-code\" id=\"use_zone-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/zones.rb, line 44\ndef use_zone(time_zone)\n  new_zone = find_zone!(time_zone)\n  begin\n    old_zone, ::Time.zone = ::Time.zone, new_zone\n    yield\n  ensure\n    ::Time.zone = old_zone\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-zone\"> <span class=\"method-name\">zone</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the TimeZone for the current request, if this has been set (via <a href=\"time#method-c-zone-3D\">::zone=</a>). If <code>Time.zone</code> has not been set for the current request, returns the TimeZone specified in <code>config.time_zone</code>.</p> <div class=\"method-source-code\" id=\"zone-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/zones.rb, line 12\ndef zone\n  Thread.current[:time_zone] || zone_default\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-zone-3D\"> <span class=\"method-name\">zone=</span><span class=\"method-args\">(time_zone)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Sets <code>Time.zone</code> to a TimeZone object for the current request/thread.</p> <p>This method accepts any of the following:</p> <ul>\n<li> <p>A Rails TimeZone object.</p> </li>\n<li> <p>An identifier for a Rails TimeZone object (e.g., “Eastern <a href=\"time\">Time</a> (US &amp; Canada)”, <code>-5.hours</code>).</p> </li>\n<li> <p>A TZInfo::Timezone object.</p> </li>\n<li> <p>An identifier for a TZInfo::Timezone object (e.g., “America/New_York”).</p> </li>\n</ul> <p>Here's an example of how you might set <code>Time.zone</code> on a per request basis and reset it when the request is done. <code>current_user.time_zone</code> just needs to return a string identifying the user's preferred time zone:</p> <pre class=\"ruby\">class ApplicationController &lt; ActionController::Base\n  around_filter :set_time_zone\n\n  def set_time_zone\n    if logged_in?\n      Time.use_zone(current_user.time_zone) { yield }\n    else\n      yield\n    end\n  end\nend\n</pre> <div class=\"method-source-code\" id=\"zone-3D-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/zones.rb, line 39\ndef zone=(time_zone)\n  Thread.current[:time_zone] = find_zone!(time_zone)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-2D\"> <span class=\"method-name\">-</span><span class=\"method-args\">(other)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-minus_without_duration\">minus_without_duration</a>, <a href=\"time#method-i-minus_without_coercion\">minus_without_coercion</a> </div> <div class=\"aliases\"> Alias for: <a href=\"time#method-i-minus_with_coercion\">minus_with_coercion</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-3C-3D-3E\"> <span class=\"method-name\">&lt;=&gt;</span><span class=\"method-args\">(other)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-compare_without_coercion\">compare_without_coercion</a> </div> <div class=\"aliases\"> Alias for: <a href=\"time#method-i-compare_with_coercion\">compare_with_coercion</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_dump\"> <span class=\"method-name\">_dump</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_dump-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/marshal.rb, line 24\ndef _dump(*args)\n  obj = dup\n  obj.instance_variable_set('@_zone', zone)\n  obj.send :_dump_without_zone, *args\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-_dump_without_zone\">_dump_without_zone</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-_dump_without_zone\"> <span class=\"method-name\">_dump_without_zone</span><span class=\"method-args\">(*args)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-_dump\">_dump</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-acts_like_time-3F\"> <span class=\"method-name\">acts_like_time?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Duck-types as a Time-like class. See <a href=\"object#method-i-acts_like-3F\">Object#acts_like?</a>.</p> <div class=\"method-source-code\" id=\"acts_like_time-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/acts_like.rb, line 5\ndef acts_like_time?\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-advance\"> <span class=\"method-name\">advance</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Uses <a href=\"date\">Date</a> to provide precise <a href=\"time\">Time</a> calculations for years, months, and days according to the proleptic Gregorian calendar. The <code>options</code> parameter takes a hash with any of these keys: <code>:years</code>, <code>:months</code>, <code>:weeks</code>, <code>:days</code>, <code>:hours</code>, <code>:minutes</code>, <code>:seconds</code>.</p> <div class=\"method-source-code\" id=\"advance-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 107\ndef advance(options)\n  unless options[:weeks].nil?\n    options[:weeks], partial_weeks = options[:weeks].divmod(1)\n    options[:days] = options.fetch(:days, 0) + 7 * partial_weeks\n  end\n\n  unless options[:days].nil?\n    options[:days], partial_days = options[:days].divmod(1)\n    options[:hours] = options.fetch(:hours, 0) + 24 * partial_days\n  end\n\n  d = to_date.advance(options)\n  d = d.gregorian if d.julian?\n  time_advanced_by_date = change(:year =&gt; d.year, :month =&gt; d.month, :day =&gt; d.day)\n  seconds_to_advance =        options.fetch(:seconds, 0) +\n    options.fetch(:minutes, 0) * 60 +\n    options.fetch(:hours, 0) * 3600\n\n  if seconds_to_advance.zero?\n    time_advanced_by_date\n  else\n    time_advanced_by_date.since(seconds_to_advance)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ago\"> <span class=\"method-name\">ago</span><span class=\"method-args\">(seconds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> representing the time a number of seconds ago, this is basically a wrapper around the <a href=\"numeric\">Numeric</a> extension</p> <div class=\"method-source-code\" id=\"ago-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 134\ndef ago(seconds)\n  since(-seconds)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-all_day\"> <span class=\"method-name\">all_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a <a href=\"range\">Range</a> representing the whole day of the current time.</p> <div class=\"method-source-code\" id=\"all_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 208\ndef all_day\n  beginning_of_day..end_of_day\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_day\"> <span class=\"method-name\">at_beginning_of_day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-beginning_of_day\">beginning_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_hour\"> <span class=\"method-name\">at_beginning_of_hour</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-beginning_of_hour\">beginning_of_hour</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_beginning_of_minute\"> <span class=\"method-name\">at_beginning_of_minute</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-beginning_of_minute\">beginning_of_minute</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_day\"> <span class=\"method-name\">at_end_of_day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-end_of_day\">end_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_hour\"> <span class=\"method-name\">at_end_of_hour</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-end_of_hour\">end_of_hour</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_end_of_minute\"> <span class=\"method-name\">at_end_of_minute</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-end_of_minute\">end_of_minute</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_midday\"> <span class=\"method-name\">at_midday</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_middle_of_day\"> <span class=\"method-name\">at_middle_of_day</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_midnight\"> <span class=\"method-name\">at_midnight</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-beginning_of_day\">beginning_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-at_noon\"> <span class=\"method-name\">at_noon</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_day\"> <span class=\"method-name\">beginning_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> representing the start of the day (0:00)</p> <div class=\"method-source-code\" id=\"beginning_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 147\ndef beginning_of_day\n  #(self - seconds_since_midnight).change(usec: 0)\n  change(:hour =&gt; 0)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-midnight\">midnight</a>, <a href=\"time#method-i-at_midnight\">at_midnight</a>, <a href=\"time#method-i-at_beginning_of_day\">at_beginning_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_hour\"> <span class=\"method-name\">beginning_of_hour</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> representing the start of the hour (x:00)</p> <div class=\"method-source-code\" id=\"beginning_of_hour-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 177\ndef beginning_of_hour\n  change(:min =&gt; 0)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-at_beginning_of_hour\">at_beginning_of_hour</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-beginning_of_minute\"> <span class=\"method-name\">beginning_of_minute</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> representing the start of the minute (x:xx:00)</p> <div class=\"method-source-code\" id=\"beginning_of_minute-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 193\ndef beginning_of_minute\n  change(:sec =&gt; 0)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-at_beginning_of_minute\">at_beginning_of_minute</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-change\"> <span class=\"method-name\">change</span><span class=\"method-args\">(options)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> where one or more of the elements have been changed according to the <code>options</code> parameter. The time options (<code>:hour</code>, <code>:min</code>, <code>:sec</code>, <code>:usec</code>, <code>:nsec</code>) reset cascadingly, so if only the hour is passed, then minute, sec, usec and nsec is set to 0. If the hour and minute is passed, then sec, usec and nsec is set to 0. The <code>options</code> parameter takes a hash with any of these keys: <code>:year</code>, <code>:month</code>, <code>:day</code>, <code>:hour</code>, <code>:min</code>, <code>:sec</code>, <code>:usec</code> <code>:nsec</code>. Path either <code>:usec</code> or <code>:nsec</code>, not both.</p> <pre class=\"ruby\">Time.new(2012, 8, 29, 22, 35, 0).change(day: 1)              # =&gt; Time.new(2012, 8, 1, 22, 35, 0)\nTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, day: 1)  # =&gt; Time.new(1981, 8, 1, 22, 35, 0)\nTime.new(2012, 8, 29, 22, 35, 0).change(year: 1981, hour: 0) # =&gt; Time.new(1981, 8, 29, 0, 0, 0)\n</pre> <div class=\"method-source-code\" id=\"change-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 77\ndef change(options)\n  new_year  = options.fetch(:year, year)\n  new_month = options.fetch(:month, month)\n  new_day   = options.fetch(:day, day)\n  new_hour  = options.fetch(:hour, hour)\n  new_min   = options.fetch(:min, options[:hour] ? 0 : min)\n  new_sec   = options.fetch(:sec, (options[:hour] || options[:min]) ? 0 : sec)\n\n  if new_nsec = options[:nsec]\n    raise ArgumentError, \"Can't change both :nsec and :usec at the same time: #{options.inspect}\" if options[:usec]\n    new_usec = Rational(new_nsec, 1000)\n  else\n    new_usec  = options.fetch(:usec, (options[:hour] || options[:min] || options[:sec]) ? 0 : Rational(nsec, 1000))\n  end\n\n  if utc?\n    ::Time.utc(new_year, new_month, new_day, new_hour, new_min, new_sec, new_usec)\n  elsif zone\n    ::Time.local(new_year, new_month, new_day, new_hour, new_min, new_sec, new_usec)\n  else\n    raise ArgumentError, 'argument out of range' if new_usec &gt;= 1000000\n    ::Time.new(new_year, new_month, new_day, new_hour, new_min, new_sec + (new_usec.to_r / 1000000), utc_offset)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-compare_with_coercion\"> <span class=\"method-name\">compare_with_coercion</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Layers additional behavior on Time#&lt;=&gt; so that <a href=\"datetime\">DateTime</a> and <a href=\"activesupport/timewithzone\">ActiveSupport::TimeWithZone</a> instances can be chronologically compared with a <a href=\"time\">Time</a></p> <div class=\"method-source-code\" id=\"compare_with_coercion-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 244\ndef compare_with_coercion(other)\n  # we're avoiding Time#to_datetime cause it's expensive\n  if other.is_a?(Time)\n    compare_without_coercion(other.to_time)\n  else\n    to_datetime &lt;=&gt; other\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-3C-3D-3E\">&lt;=&gt;</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-compare_without_coercion\"> <span class=\"method-name\">compare_without_coercion</span><span class=\"method-args\">(other)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-3C-3D-3E\">&lt;=&gt;</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_day\"> <span class=\"method-name\">end_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> representing the end of the day, 23:59:59.999999 (.999999999 in ruby1.9)</p> <div class=\"method-source-code\" id=\"end_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 166\ndef end_of_day\n  change(\n    :hour =&gt; 23,\n    :min =&gt; 59,\n    :sec =&gt; 59,\n    :usec =&gt; Rational(999999999, 1000)\n  )\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-at_end_of_day\">at_end_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_hour\"> <span class=\"method-name\">end_of_hour</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> representing the end of the hour, x:59:59.999999 (.999999999 in ruby1.9)</p> <div class=\"method-source-code\" id=\"end_of_hour-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 183\ndef end_of_hour\n  change(\n    :min =&gt; 59,\n    :sec =&gt; 59,\n    :usec =&gt; Rational(999999999, 1000)\n  )\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-at_end_of_hour\">at_end_of_hour</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_of_minute\"> <span class=\"method-name\">end_of_minute</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> representing the end of the minute, x:xx:59.999999 (.999999999 in ruby1.9)</p> <div class=\"method-source-code\" id=\"end_of_minute-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 199\ndef end_of_minute\n  change(\n    :sec =&gt; 59,\n    :usec =&gt; Rational(999999999, 1000)\n  )\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-at_end_of_minute\">at_end_of_minute</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-eql-3F\"> <span class=\"method-name\">eql?</span><span class=\"method-args\">(other)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-eql_without_coercion\">eql_without_coercion</a> </div> <div class=\"aliases\"> Alias for: <a href=\"time#method-i-eql_with_coercion\">eql_with_coercion</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-eql_with_coercion\"> <span class=\"method-name\">eql_with_coercion</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Layers additional behavior on <a href=\"time#method-i-eql-3F\">#eql?</a> so that <a href=\"activesupport/timewithzone\">ActiveSupport::TimeWithZone</a> instances can be eql? to an equivalent <a href=\"time\">Time</a></p> <div class=\"method-source-code\" id=\"eql_with_coercion-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 257\ndef eql_with_coercion(other)\n  # if other is an ActiveSupport::TimeWithZone, coerce a Time instance from it so we can do eql? comparison\n  other = other.comparable_time if other.respond_to?(:comparable_time)\n  eql_without_coercion(other)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-eql-3F\">eql?</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-eql_without_coercion\"> <span class=\"method-name\">eql_without_coercion</span><span class=\"method-args\">(other)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-eql-3F\">eql?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-formatted_offset\"> <span class=\"method-name\">formatted_offset</span><span class=\"method-args\">(colon = true, alternate_utc_string = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the UTC offset as an +HH:MM formatted string.</p> <pre class=\"ruby\">Time.local(2000).formatted_offset        # =&gt; \"-06:00\"\nTime.local(2000).formatted_offset(false) # =&gt; \"-0600\"\n</pre> <div class=\"method-source-code\" id=\"formatted_offset-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/conversions.rb, line 62\ndef formatted_offset(colon = true, alternate_utc_string = nil)\n  utc? &amp;&amp; alternate_utc_string || ActiveSupport::TimeZone.seconds_to_utc_offset(utc_offset, colon)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-in\"> <span class=\"method-name\">in</span><span class=\"method-args\">(seconds)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-since\">since</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-midday\"> <span class=\"method-name\">midday</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-middle_of_day\"> <span class=\"method-name\">middle_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> representing the middle of the day (12:00)</p> <div class=\"method-source-code\" id=\"middle_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 156\ndef middle_of_day\n  change(:hour =&gt; 12)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-midday\">midday</a>, <a href=\"time#method-i-noon\">noon</a>, <a href=\"time#method-i-at_midday\">at_midday</a>, <a href=\"time#method-i-at_noon\">at_noon</a>, <a href=\"time#method-i-at_middle_of_day\">at_middle_of_day</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-midnight\"> <span class=\"method-name\">midnight</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-beginning_of_day\">beginning_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-minus_with_coercion\"> <span class=\"method-name\">minus_with_coercion</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Time#- can also be used to determine the number of seconds between two <a href=\"time\">Time</a> instances. We're layering on additional behavior so that <a href=\"activesupport/timewithzone\">ActiveSupport::TimeWithZone</a> instances are coerced into values that Time#- will recognize</p> <div class=\"method-source-code\" id=\"minus_with_coercion-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 235\ndef minus_with_coercion(other)\n  other = other.comparable_time if other.respond_to?(:comparable_time)\n  other.is_a?(DateTime) ? to_f - other.to_f : minus_without_coercion(other)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-2D\">-</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-minus_without_coercion\"> <span class=\"method-name\">minus_without_coercion</span><span class=\"method-args\">(other)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-2D\">-</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-minus_without_duration\"> <span class=\"method-name\">minus_without_duration</span><span class=\"method-args\">(other)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-2D\">-</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-noon\"> <span class=\"method-name\">noon</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-middle_of_day\">middle_of_day</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-seconds_since_midnight\"> <span class=\"method-name\">seconds_since_midnight</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Seconds since midnight: Time.now.seconds_since_midnight</p> <div class=\"method-source-code\" id=\"seconds_since_midnight-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 52\ndef seconds_since_midnight\n  to_i - change(:hour =&gt; 0).to_i + (usec / 1.0e+6)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-seconds_until_end_of_day\"> <span class=\"method-name\">seconds_until_end_of_day</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the number of seconds until 23:59:59.</p> <pre class=\"ruby\">Time.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day # =&gt; 86399\nTime.new(2012, 8, 29, 12, 34, 56).seconds_until_end_of_day # =&gt; 41103\nTime.new(2012, 8, 29, 23, 59, 59).seconds_until_end_of_day # =&gt; 0\n</pre> <div class=\"method-source-code\" id=\"seconds_until_end_of_day-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 61\ndef seconds_until_end_of_day\n  end_of_day.to_i - to_i\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-since\"> <span class=\"method-name\">since</span><span class=\"method-args\">(seconds)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"time\">Time</a> representing the time a number of seconds since the instance time</p> <div class=\"method-source-code\" id=\"since-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/calculations.rb, line 139\ndef since(seconds)\n  self + seconds\nrescue\n  to_datetime.since(seconds)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-in\">in</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_default_s\"> <span class=\"method-name\">to_default_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"time#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_formatted_s\"> <span class=\"method-name\">to_formatted_s</span><span class=\"method-args\">(format = :default)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Converts to a formatted string. See <a href=\"time#DATE_FORMATS\">DATE_FORMATS</a> for built-in formats.</p> <p>This method is aliased to <code>to_s</code>.</p> <pre class=\"ruby\">time = Time.now                    # =&gt; Thu Jan 18 06:10:17 CST 2007\n\ntime.to_formatted_s(:time)         # =&gt; \"06:10\"\ntime.to_s(:time)                   # =&gt; \"06:10\"\n\ntime.to_formatted_s(:db)           # =&gt; \"2007-01-18 06:10:17\"\ntime.to_formatted_s(:number)       # =&gt; \"20070118061017\"\ntime.to_formatted_s(:short)        # =&gt; \"18 Jan 06:10\"\ntime.to_formatted_s(:long)         # =&gt; \"January 18, 2007 06:10\"\ntime.to_formatted_s(:long_ordinal) # =&gt; \"January 18th, 2007 06:10\"\ntime.to_formatted_s(:rfc822)       # =&gt; \"Thu, 18 Jan 2007 06:10:17 -0600\"\ntime.to_formatted_s(:iso8601)      # =&gt; \"2007-01-18T06:10:17-06:00\"\n</pre> <h2 id=\"method-i-to_formatted_s-label-Adding+your+own+time+formats+to+to_formatted_s\">Adding your own time formats to <code>to_formatted_s</code>\n</h2> <p>You can add your own formats to the Time::DATE_FORMATS hash. Use the format name as the hash key and either a strftime string or Proc instance that takes a time argument as the value.</p> <pre class=\"ruby\"># config/initializers/time_formats.rb\nTime::DATE_FORMATS[:month_and_year] = '%B %Y'\nTime::DATE_FORMATS[:short_ordinal]  = -&gt;(time) { time.strftime(\"%B #{time.day.ordinalize}\") }\n</pre> <div class=\"method-source-code\" id=\"to_formatted_s-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/time/conversions.rb, line 48\ndef to_formatted_s(format = :default)\n  if formatter = DATE_FORMATS[format]\n    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)\n  else\n    to_default_s\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">(format = :default)</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"time#method-i-to_default_s\">to_default_s</a> </div> <div class=\"aliases\"> Alias for: <a href=\"time#method-i-to_formatted_s\">to_formatted_s</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","trueclass":"<h1 id=\"class-TrueClass\" class=\"class\"> class TrueClass </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"object\">Object</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-blank-3F\"> <span class=\"method-name\">blank?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>true</code> is not blank:</p> <pre class=\"ruby\">true.blank? # =&gt; false\n</pre> <p>@return [false]</p> <div class=\"method-source-code\" id=\"blank-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/blank.rb, line 75\ndef blank?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-duplicable-3F\"> <span class=\"method-name\">duplicable?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>true</code> is not duplicable:</p> <pre class=\"ruby\">true.duplicable? # =&gt; false\ntrue.dup         # =&gt; TypeError: can't dup TrueClass\n</pre> <div class=\"method-source-code\" id=\"duplicable-3F-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/duplicable.rb, line 54\ndef duplicable?\n  false\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_param\"> <span class=\"method-name\">to_param</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns <code>self</code>.</p> <div class=\"method-source-code\" id=\"to_param-source\"> <pre class=\"ruby\"># File activesupport/lib/active_support/core_ext/object/to_query.rb, line 25\ndef to_param\n  self\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","rails":"<h1 id=\"module-Rails\" class=\"module\"> module Rails </h1>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-app_class\"> <span class=\"method-name\">app_class</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-application\"> <span class=\"method-name\">application</span><span class=\"attribute-access-type\">[W]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-cache\"> <span class=\"method-name\">cache</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-logger\"> <span class=\"method-name\">logger</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-application\"> <span class=\"method-name\">application</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"application-source\"> <pre class=\"ruby\"># File railties/lib/rails.rb, line 36\ndef application\n  @application ||= (app_class.instance if app_class)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-backtrace_cleaner\"> <span class=\"method-name\">backtrace_cleaner</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"backtrace_cleaner-source\"> <pre class=\"ruby\"># File railties/lib/rails.rb, line 47\ndef backtrace_cleaner\n  @backtrace_cleaner ||= begin\n    # Relies on Active Support, so we have to lazy load to postpone definition until AS has been loaded\n    require 'rails/backtrace_cleaner'\n    Rails::BacktraceCleaner.new\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-configuration\"> <span class=\"method-name\">configuration</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The <a href=\"rails/configuration\">Configuration</a> instance used to configure the Rails environment</p> <div class=\"method-source-code\" id=\"configuration-source\"> <pre class=\"ruby\"># File railties/lib/rails.rb, line 43\ndef configuration\n  application.config\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-env\"> <span class=\"method-name\">env</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"env-source\"> <pre class=\"ruby\"># File railties/lib/rails.rb, line 59\ndef env\n  @_env ||= ActiveSupport::StringInquirer.new(ENV[\"RAILS_ENV\"] || ENV[\"RACK_ENV\"] || \"development\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-env-3D\"> <span class=\"method-name\">env=</span><span class=\"method-args\">(environment)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"env-3D-source\"> <pre class=\"ruby\"># File railties/lib/rails.rb, line 63\ndef env=(environment)\n  @_env = ActiveSupport::StringInquirer.new(environment)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-gem_version\"> <span class=\"method-name\">gem_version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Rails as a <code>Gem::Version</code></p> <div class=\"method-source-code\" id=\"gem_version-source\"> <pre class=\"ruby\"># File railties/lib/rails/gem_version.rb, line 3\ndef self.gem_version\n  Gem::Version.new VERSION::STRING\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-groups\"> <span class=\"method-name\">groups</span><span class=\"method-args\">(*groups)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns all rails groups for loading based on:</p> <ul>\n<li> <p>The Rails environment;</p> </li>\n<li> <p>The environment variable RAILS_GROUPS;</p> </li>\n<li> <p>The optional envs given as argument and the hash with group dependencies;</p> <p>groups assets: [:development, :test]</p> <p># Returns # =&gt; [:default, :development, :assets] for <a href=\"rails#method-c-env\">::env</a> == “development” # =&gt; [:default, :production] for <a href=\"rails#method-c-env\">::env</a> == “production”</p> </li>\n</ul> <div class=\"method-source-code\" id=\"groups-source\"> <pre class=\"ruby\"># File railties/lib/rails.rb, line 78\ndef groups(*groups)\n  hash = groups.extract_options!\n  env = Rails.env\n  groups.unshift(:default, env)\n  groups.concat ENV[\"RAILS_GROUPS\"].to_s.split(\",\")\n  groups.concat hash.map { |k, v| k if v.map(&amp;:to_s).include?(env) }\n  groups.compact!\n  groups.uniq!\n  groups\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-public_path\"> <span class=\"method-name\">public_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"public_path-source\"> <pre class=\"ruby\"># File railties/lib/rails.rb, line 89\ndef public_path\n  application &amp;&amp; Pathname.new(application.paths[\"public\"].first)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-root\"> <span class=\"method-name\">root</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"root-source\"> <pre class=\"ruby\"># File railties/lib/rails.rb, line 55\ndef root\n  application &amp;&amp; application.config.root\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-version\"> <span class=\"method-name\">version</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the version of the currently loaded Rails as a string.</p> <div class=\"method-source-code\" id=\"version-source\"> <pre class=\"ruby\"># File railties/lib/rails/version.rb, line 5\ndef self.version\n  VERSION::STRING\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2004&ndash;2015 David Heinemeier Hansson<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n"}
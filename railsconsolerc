#!/usr/bin/ruby
require 'logger'
begin
  require 'hirb' # sudo gem install cldwalker-hirb --source http://gems.github.com

  #Hirb.enable
  Hirb.enable :pager => false

rescue LoadError
end

def all_models
  result = []
  Dir.glob(RAILS_ROOT + '/app/models/*.rb').each do |file|
    filename = File.split(file)[-1]
    model = filename.split('.')[0].classify.constantize
    result << model if (model.respond_to? :table_name )
  end
  result
end

def sql(query)
  ActiveRecord::Base.connection.select_all(query)
end

def sql_bench(query, runs = 10)
  puts
  pp sql("EXPLAIN #{query}").first
  puts
  puts "#{runs} runs in"
  runs_time = Benchmark.realtime { runs.times { sql(query) } }
  puts " #{runs_time}"
end


def db_inspect
  ActiveRecord::Base.connection.tables.sort.each do |table|
    count = ActiveRecord::Base.connection.select_value("SELECT COUNT(*) FROM #{table}").to_i
    puts "%10s #{table}" % count
  end
  nil
end

if ENV.include?('RAILS_ENV') && !Object.const_defined?('RAILS_DEFAULT_LOGGER')
  #RAILS_DEFAULT_LOGGER = Logger.new(STDOUT)
end

def logon
   set_logger Logger.new(STDOUT)
end

def logoff
   set_logger @logger
end

def get_logger
   ActiveRecord::Base.connection.instance_variable_get("@logger")
end

def set_logger(logger)
   @logger ||= get_logger
   ActiveRecord::Base.connection.instance_variable_set("@logger", logger)
end


puts "load #{__FILE__}"
puts "SQL logging ein/ausschalten mit logon/logoff"
